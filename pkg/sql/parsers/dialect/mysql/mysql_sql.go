// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const LOWER_THAN_ON = 57422
const ON = 57423
const USING = 57424
const SUBQUERY_AS_EXPR = 57425
const LOWER_THAN_STRING = 57426
const ID = 57427
const AT_ID = 57428
const AT_AT_ID = 57429
const STRING = 57430
const VALUE_ARG = 57431
const LIST_ARG = 57432
const COMMENT = 57433
const COMMENT_KEYWORD = 57434
const QUOTE_ID = 57435
const STAGE = 57436
const CREDENTIALS = 57437
const STAGES = 57438
const SNAPSHOTS = 57439
const INTEGRAL = 57440
const HEX = 57441
const FLOAT = 57442
const HEXNUM = 57443
const BIT_LITERAL = 57444
const NULL = 57445
const TRUE = 57446
const FALSE = 57447
const LOWER_THAN_CHARSET = 57448
const CHARSET = 57449
const UNIQUE = 57450
const KEY = 57451
const OR = 57452
const PIPE_CONCAT = 57453
const XOR = 57454
const AND = 57455
const NOT = 57456
const BETWEEN = 57457
const CASE = 57458
const WHEN = 57459
const THEN = 57460
const ELSE = 57461
const END = 57462
const ELSEIF = 57463
const LOWER_THAN_EQ = 57464
const LE = 57465
const GE = 57466
const NE = 57467
const NULL_SAFE_EQUAL = 57468
const IS = 57469
const LIKE = 57470
const REGEXP = 57471
const IN = 57472
const ASSIGNMENT = 57473
const ILIKE = 57474
const SHIFT_LEFT = 57475
const SHIFT_RIGHT = 57476
const DIV = 57477
const MOD = 57478
const UNARY = 57479
const COLLATE = 57480
const BINARY = 57481
const UNDERSCORE_BINARY = 57482
const INTERVAL = 57483
const OUT = 57484
const INOUT = 57485
const BEGIN = 57486
const START = 57487
const TRANSACTION = 57488
const COMMIT = 57489
const ROLLBACK = 57490
const WORK = 57491
const CONSISTENT = 57492
const SNAPSHOT = 57493
const CHAIN = 57494
const NO = 57495
const RELEASE = 57496
const PRIORITY = 57497
const QUICK = 57498
const BIT = 57499
const TINYINT = 57500
const SMALLINT = 57501
const MEDIUMINT = 57502
const INT = 57503
const INTEGER = 57504
const BIGINT = 57505
const INTNUM = 57506
const REAL = 57507
const DOUBLE = 57508
const FLOAT_TYPE = 57509
const DECIMAL = 57510
const NUMERIC = 57511
const DECIMAL_VALUE = 57512
const TIME = 57513
const TIMESTAMP = 57514
const DATETIME = 57515
const YEAR = 57516
const CHAR = 57517
const VARCHAR = 57518
const BOOL = 57519
const CHARACTER = 57520
const VARBINARY = 57521
const NCHAR = 57522
const TEXT = 57523
const TINYTEXT = 57524
const MEDIUMTEXT = 57525
const LONGTEXT = 57526
const DATALINK = 57527
const BLOB = 57528
const TINYBLOB = 57529
const MEDIUMBLOB = 57530
const LONGBLOB = 57531
const JSON = 57532
const ENUM = 57533
const UUID = 57534
const VECF32 = 57535
const VECF64 = 57536
const GEOMETRY = 57537
const POINT = 57538
const LINESTRING = 57539
const POLYGON = 57540
const GEOMETRYCOLLECTION = 57541
const MULTIPOINT = 57542
const MULTILINESTRING = 57543
const MULTIPOLYGON = 57544
const INT1 = 57545
const INT2 = 57546
const INT3 = 57547
const INT4 = 57548
const INT8 = 57549
const S3OPTION = 57550
const STAGEOPTION = 57551
const SQL_SMALL_RESULT = 57552
const SQL_BIG_RESULT = 57553
const SQL_BUFFER_RESULT = 57554
const LOW_PRIORITY = 57555
const HIGH_PRIORITY = 57556
const DELAYED = 57557
const CREATE = 57558
const ALTER = 57559
const DROP = 57560
const RENAME = 57561
const ANALYZE = 57562
const PHYPLAN = 57563
const ADD = 57564
const RETURNS = 57565
const SCHEMA = 57566
const TABLE = 57567
const SEQUENCE = 57568
const INDEX = 57569
const VIEW = 57570
const TO = 57571
const IGNORE = 57572
const IF = 57573
const PRIMARY = 57574
const COLUMN = 57575
const CONSTRAINT = 57576
const SPATIAL = 57577
const FULLTEXT = 57578
const FOREIGN = 57579
const KEY_BLOCK_SIZE = 57580
const SHOW = 57581
const DESCRIBE = 57582
const EXPLAIN = 57583
const DATE = 57584
const ESCAPE = 57585
const REPAIR = 57586
const OPTIMIZE = 57587
const TRUNCATE = 57588
const MAXVALUE = 57589
const PARTITION = 57590
const REORGANIZE = 57591
const LESS = 57592
const THAN = 57593
const PROCEDURE = 57594
const TRIGGER = 57595
const STATUS = 57596
const VARIABLES = 57597
const ROLE = 57598
const PROXY = 57599
const AVG_ROW_LENGTH = 57600
const STORAGE = 57601
const DISK = 57602
const MEMORY = 57603
const CHECKSUM = 57604
const COMPRESSION = 57605
const DATA = 57606
const DIRECTORY = 57607
const DELAY_KEY_WRITE = 57608
const ENCRYPTION = 57609
const ENGINE = 57610
const MAX_ROWS = 57611
const MIN_ROWS = 57612
const PACK_KEYS = 57613
const ROW_FORMAT = 57614
const STATS_AUTO_RECALC = 57615
const STATS_PERSISTENT = 57616
const STATS_SAMPLE_PAGES = 57617
const DYNAMIC = 57618
const COMPRESSED = 57619
const REDUNDANT = 57620
const COMPACT = 57621
const FIXED = 57622
const COLUMN_FORMAT = 57623
const AUTO_RANDOM = 57624
const ENGINE_ATTRIBUTE = 57625
const SECONDARY_ENGINE_ATTRIBUTE = 57626
const INSERT_METHOD = 57627
const RESTRICT = 57628
const CASCADE = 57629
const ACTION = 57630
const PARTIAL = 57631
const SIMPLE = 57632
const CHECK = 57633
const ENFORCED = 57634
const RANGE = 57635
const LIST = 57636
const ALGORITHM = 57637
const LINEAR = 57638
const PARTITIONS = 57639
const SUBPARTITION = 57640
const SUBPARTITIONS = 57641
const CLUSTER = 57642
const TYPE = 57643
const ANY = 57644
const SOME = 57645
const EXTERNAL = 57646
const LOCALFILE = 57647
const URL = 57648
const PREPARE = 57649
const DEALLOCATE = 57650
const RESET = 57651
const EXTENSION = 57652
const RETENTION = 57653
const PERIOD = 57654
const INCREMENT = 57655
const CYCLE = 57656
const MINVALUE = 57657
const PUBLICATION = 57658
const SUBSCRIPTIONS = 57659
const PUBLICATIONS = 57660
const PROPERTIES = 57661
const PARSER = 57662
const VISIBLE = 57663
const INVISIBLE = 57664
const BTREE = 57665
const HASH = 57666
const RTREE = 57667
const BSI = 57668
const IVFFLAT = 57669
const MASTER = 57670
const ZONEMAP = 57671
const LEADING = 57672
const BOTH = 57673
const TRAILING = 57674
const UNKNOWN = 57675
const LISTS = 57676
const OP_TYPE = 57677
const REINDEX = 57678
const EXPIRE = 57679
const ACCOUNT = 57680
const ACCOUNTS = 57681
const UNLOCK = 57682
const DAY = 57683
const NEVER = 57684
const PUMP = 57685
const MYSQL_COMPATIBILITY_MODE = 57686
const UNIQUE_CHECK_ON_AUTOINCR = 57687
const MODIFY = 57688
const CHANGE = 57689
const SECOND = 57690
const ASCII = 57691
const COALESCE = 57692
const COLLATION = 57693
const HOUR = 57694
const MICROSECOND = 57695
const MINUTE = 57696
const MONTH = 57697
const QUARTER = 57698
const REPEAT = 57699
const REVERSE = 57700
const ROW_COUNT = 57701
const WEEK = 57702
const REVOKE = 57703
const FUNCTION = 57704
const PRIVILEGES = 57705
const TABLESPACE = 57706
const EXECUTE = 57707
const SUPER = 57708
const GRANT = 57709
const OPTION = 57710
const REFERENCES = 57711
const REPLICATION = 57712
const SLAVE = 57713
const CLIENT = 57714
const USAGE = 57715
const RELOAD = 57716
const FILE = 57717
const TEMPORARY = 57718
const ROUTINE = 57719
const EVENT = 57720
const SHUTDOWN = 57721
const NULLX = 57722
const AUTO_INCREMENT = 57723
const APPROXNUM = 57724
const SIGNED = 57725
const UNSIGNED = 57726
const ZEROFILL = 57727
const ENGINES = 57728
const LOW_CARDINALITY = 57729
const AUTOEXTEND_SIZE = 57730
const ADMIN_NAME = 57731
const RANDOM = 57732
const SUSPEND = 57733
const ATTRIBUTE = 57734
const HISTORY = 57735
const REUSE = 57736
const CURRENT = 57737
const OPTIONAL = 57738
const FAILED_LOGIN_ATTEMPTS = 57739
const PASSWORD_LOCK_TIME = 57740
const UNBOUNDED = 57741
const SECONDARY = 57742
const RESTRICTED = 57743
const USER = 57744
const IDENTIFIED = 57745
const CIPHER = 57746
const ISSUER = 57747
const X509 = 57748
const SUBJECT = 57749
const SAN = 57750
const REQUIRE = 57751
const SSL = 57752
const NONE = 57753
const PASSWORD = 57754
const SHARED = 57755
const EXCLUSIVE = 57756
const MAX_QUERIES_PER_HOUR = 57757
const MAX_UPDATES_PER_HOUR = 57758
const MAX_CONNECTIONS_PER_HOUR = 57759
const MAX_USER_CONNECTIONS = 57760
const FORMAT = 57761
const VERBOSE = 57762
const CONNECTION = 57763
const TRIGGERS = 57764
const PROFILES = 57765
const LOAD = 57766
const INLINE = 57767
const INFILE = 57768
const TERMINATED = 57769
const OPTIONALLY = 57770
const ENCLOSED = 57771
const ESCAPED = 57772
const STARTING = 57773
const LINES = 57774
const ROWS = 57775
const IMPORT = 57776
const DISCARD = 57777
const JSONTYPE = 57778
const MODUMP = 57779
const OVER = 57780
const PRECEDING = 57781
const FOLLOWING = 57782
const GROUPS = 57783
const DATABASES = 57784
const TABLES = 57785
const SEQUENCES = 57786
const EXTENDED = 57787
const FULL = 57788
const PROCESSLIST = 57789
const FIELDS = 57790
const COLUMNS = 57791
const OPEN = 57792
const ERRORS = 57793
const WARNINGS = 57794
const INDEXES = 57795
const SCHEMAS = 57796
const NODE = 57797
const LOCKS = 57798
const ROLES = 57799
const TABLE_NUMBER = 57800
const COLUMN_NUMBER = 57801
const TABLE_VALUES = 57802
const TABLE_SIZE = 57803
const NAMES = 57804
const GLOBAL = 57805
const PERSIST = 57806
const SESSION = 57807
const ISOLATION = 57808
const LEVEL = 57809
const READ = 57810
const WRITE = 57811
const ONLY = 57812
const REPEATABLE = 57813
const COMMITTED = 57814
const UNCOMMITTED = 57815
const SERIALIZABLE = 57816
const LOCAL = 57817
const EVENTS = 57818
const PLUGINS = 57819
const CURRENT_TIMESTAMP = 57820
const DATABASE = 57821
const CURRENT_TIME = 57822
const LOCALTIME = 57823
const LOCALTIMESTAMP = 57824
const UTC_DATE = 57825
const UTC_TIME = 57826
const UTC_TIMESTAMP = 57827
const REPLACE = 57828
const CONVERT = 57829
const SEPARATOR = 57830
const TIMESTAMPDIFF = 57831
const CURRENT_DATE = 57832
const CURRENT_USER = 57833
const CURRENT_ROLE = 57834
const SECOND_MICROSECOND = 57835
const MINUTE_MICROSECOND = 57836
const MINUTE_SECOND = 57837
const HOUR_MICROSECOND = 57838
const HOUR_SECOND = 57839
const HOUR_MINUTE = 57840
const DAY_MICROSECOND = 57841
const DAY_SECOND = 57842
const DAY_MINUTE = 57843
const DAY_HOUR = 57844
const YEAR_MONTH = 57845
const SQL_TSI_HOUR = 57846
const SQL_TSI_DAY = 57847
const SQL_TSI_WEEK = 57848
const SQL_TSI_MONTH = 57849
const SQL_TSI_QUARTER = 57850
const SQL_TSI_YEAR = 57851
const SQL_TSI_SECOND = 57852
const SQL_TSI_MINUTE = 57853
const RECURSIVE = 57854
const CONFIG = 57855
const DRAINER = 57856
const SOURCE = 57857
const STREAM = 57858
const HEADERS = 57859
const CONNECTOR = 57860
const CONNECTORS = 57861
const DAEMON = 57862
const PAUSE = 57863
const CANCEL = 57864
const TASK = 57865
const RESUME = 57866
const MATCH = 57867
const AGAINST = 57868
const BOOLEAN = 57869
const LANGUAGE = 57870
const WITH = 57871
const QUERY = 57872
const EXPANSION = 57873
const WITHOUT = 57874
const VALIDATION = 57875
const UPGRADE = 57876
const RETRY = 57877
const ADDDATE = 57878
const BIT_AND = 57879
const BIT_OR = 57880
const BIT_XOR = 57881
const CAST = 57882
const COUNT = 57883
const APPROX_COUNT = 57884
const APPROX_COUNT_DISTINCT = 57885
const SERIAL_EXTRACT = 57886
const APPROX_PERCENTILE = 57887
const CURDATE = 57888
const CURTIME = 57889
const DATE_ADD = 57890
const DATE_SUB = 57891
const EXTRACT = 57892
const GROUP_CONCAT = 57893
const MAX = 57894
const MID = 57895
const MIN = 57896
const NOW = 57897
const POSITION = 57898
const SESSION_USER = 57899
const STD = 57900
const STDDEV = 57901
const MEDIAN = 57902
const CLUSTER_CENTERS = 57903
const KMEANS = 57904
const STDDEV_POP = 57905
const STDDEV_SAMP = 57906
const SUBDATE = 57907
const SUBSTR = 57908
const SUBSTRING = 57909
const SUM = 57910
const SYSDATE = 57911
const SYSTEM_USER = 57912
const TRANSLATE = 57913
const TRIM = 57914
const VARIANCE = 57915
const VAR_POP = 57916
const VAR_SAMP = 57917
const AVG = 57918
const RANK = 57919
const ROW_NUMBER = 57920
const DENSE_RANK = 57921
const BIT_CAST = 57922
const BITMAP_BIT_POSITION = 57923
const BITMAP_BUCKET_NUMBER = 57924
const BITMAP_COUNT = 57925
const BITMAP_CONSTRUCT_AGG = 57926
const BITMAP_OR_AGG = 57927
const NEXTVAL = 57928
const SETVAL = 57929
const CURRVAL = 57930
const LASTVAL = 57931
const ARROW = 57932
const ROW = 57933
const OUTFILE = 57934
const HEADER = 57935
const MAX_FILE_SIZE = 57936
const FORCE_QUOTE = 57937
const PARALLEL = 57938
const STRICT = 57939
const UNUSED = 57940
const BINDINGS = 57941
const DO = 57942
const DECLARE = 57943
const LOOP = 57944
const WHILE = 57945
const LEAVE = 57946
const ITERATE = 57947
const UNTIL = 57948
const CALL = 57949
const PREV = 57950
const SLIDING = 57951
const FILL = 57952
const SPBEGIN = 57953
const BACKEND = 57954
const SERVERS = 57955
const HANDLER = 57956
const PERCENT = 57957
const SAMPLE = 57958
const MO_TS = 57959
const PITR = 57960
const CDC = 57961
const GROUPING = 57962
const SETS = 57963
const CUBE = 57964
const ROLLUP = 57965
const LOGSERVICE = 57966
const REPLICAS = 57967
const STORES = 57968
const SETTINGS = 57969
const KILL = 57970
const BACKUP = 57971
const FILESYSTEM = 57972
const PARALLELISM = 57973
const RESTORE = 57974
const QUERY_RESULT = 57975

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12684

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 138,
	11, 791,
	22, 791,
	-2, 784,
	-1, 161,
	242, 1211,
	244, 1110,
	-2, 1157,
	-1, 188,
	43, 614,
	244, 614,
	271, 621,
	272, 621,
	470, 614,
	-2, 649,
	-1, 228,
	654, 1981,
	-2, 518,
	-1, 535,
	654, 2103,
	-2, 398,
	-1, 593,
	654, 2162,
	-2, 396,
	-1, 594,
	654, 2163,
	-2, 397,
	-1, 595,
	654, 2164,
	-2, 399,
	-1, 733,
	323, 176,
	442, 176,
	443, 176,
	-2, 1883,
	-1, 800,
	84, 1669,
	-2, 2039,
	-1, 801,
	84, 1687,
	-2, 2010,
	-1, 805,
	84, 1688,
	-2, 2038,
	-1, 839,
	84, 1596,
	-2, 2240,
	-1, 840,
	84, 1597,
	-2, 2239,
	-1, 841,
	84, 1598,
	-2, 2229,
	-1, 842,
	84, 2201,
	-2, 2222,
	-1, 843,
	84, 2202,
	-2, 2223,
	-1, 844,
	84, 2203,
	-2, 2231,
	-1, 845,
	84, 2204,
	-2, 2211,
	-1, 846,
	84, 2205,
	-2, 2220,
	-1, 847,
	84, 2206,
	-2, 2232,
	-1, 848,
	84, 2207,
	-2, 2233,
	-1, 849,
	84, 2208,
	-2, 2238,
	-1, 850,
	84, 2209,
	-2, 2243,
	-1, 851,
	84, 2210,
	-2, 2244,
	-1, 852,
	84, 1665,
	-2, 2077,
	-1, 853,
	84, 1666,
	-2, 1867,
	-1, 854,
	84, 1667,
	-2, 2086,
	-1, 855,
	84, 1668,
	-2, 1876,
	-1, 857,
	84, 1671,
	-2, 1884,
	-1, 858,
	84, 1672,
	-2, 2110,
	-1, 860,
	84, 1675,
	-2, 1903,
	-1, 862,
	84, 1677,
	-2, 2122,
	-1, 863,
	84, 1678,
	-2, 2121,
	-1, 864,
	84, 1679,
	-2, 1948,
	-1, 865,
	84, 1680,
	-2, 2034,
	-1, 868,
	84, 1683,
	-2, 2133,
	-1, 870,
	84, 1685,
	-2, 2136,
	-1, 871,
	84, 1686,
	-2, 2138,
	-1, 872,
	84, 1689,
	-2, 2146,
	-1, 873,
	84, 1690,
	-2, 2019,
	-1, 874,
	84, 1691,
	-2, 2064,
	-1, 875,
	84, 1692,
	-2, 2029,
	-1, 876,
	84, 1693,
	-2, 2054,
	-1, 887,
	84, 1574,
	-2, 2234,
	-1, 888,
	84, 1575,
	-2, 2235,
	-1, 889,
	84, 1576,
	-2, 2236,
	-1, 989,
	465, 649,
	466, 649,
	-2, 615,
	-1, 1040,
	126, 1867,
	137, 1867,
	157, 1867,
	-2, 1841,
	-1, 1157,
	22, 818,
	-2, 767,
	-1, 1267,
	11, 791,
	22, 791,
	-2, 1451,
	-1, 1351,
	22, 818,
	-2, 767,
	-1, 1705,
	84, 1740,
	-2, 2036,
	-1, 1706,
	84, 1741,
	-2, 2037,
	-1, 1878,
	85, 982,
	-2, 988,
	-1, 2330,
	109, 1149,
	153, 1149,
	192, 1149,
	195, 1149,
	284, 1149,
	-2, 1142,
	-1, 2489,
	11, 791,
	22, 791,
	-2, 923,
	-1, 2523,
	85, 1827,
	158, 1827,
	-2, 2021,
	-1, 2524,
	85, 1827,
	158, 1827,
	-2, 2020,
	-1, 2525,
	85, 1803,
	158, 1803,
	-2, 2007,
	-1, 2526,
	85, 1804,
	158, 1804,
	-2, 2012,
	-1, 2527,
	85, 1805,
	158, 1805,
	-2, 1936,
	-1, 2528,
	85, 1806,
	158, 1806,
	-2, 1930,
	-1, 2529,
	85, 1807,
	158, 1807,
	-2, 1857,
	-1, 2530,
	85, 1808,
	158, 1808,
	-2, 2009,
	-1, 2531,
	85, 1809,
	158, 1809,
	-2, 1934,
	-1, 2532,
	85, 1810,
	158, 1810,
	-2, 1929,
	-1, 2533,
	85, 1811,
	158, 1811,
	-2, 1917,
	-1, 2534,
	85, 1827,
	158, 1827,
	-2, 1918,
	-1, 2535,
	85, 1827,
	158, 1827,
	-2, 1919,
	-1, 2537,
	85, 1816,
	158, 1816,
	-2, 2054,
	-1, 2538,
	85, 1793,
	158, 1793,
	-2, 2039,
	-1, 2539,
	85, 1825,
	158, 1825,
	-2, 2010,
	-1, 2540,
	85, 1825,
	158, 1825,
	-2, 2038,
	-1, 2541,
	85, 1825,
	158, 1825,
	-2, 1885,
	-1, 2542,
	85, 1823,
	158, 1823,
	-2, 2029,
	-1, 2543,
	85, 1820,
	158, 1820,
	-2, 1908,
	-1, 2544,
	84, 1774,
	85, 1774,
	158, 1774,
	400, 1774,
	401, 1774,
	402, 1774,
	-2, 1856,
	-1, 2545,
	84, 1775,
	85, 1775,
	158, 1775,
	400, 1775,
	401, 1775,
	402, 1775,
	-2, 1858,
	-1, 2546,
	84, 1776,
	85, 1776,
	158, 1776,
	400, 1776,
	401, 1776,
	402, 1776,
	-2, 2082,
	-1, 2547,
	84, 1778,
	85, 1778,
	158, 1778,
	400, 1778,
	401, 1778,
	402, 1778,
	-2, 2011,
	-1, 2548,
	84, 1780,
	85, 1780,
	158, 1780,
	400, 1780,
	401, 1780,
	402, 1780,
	-2, 1991,
	-1, 2549,
	84, 1782,
	85, 1782,
	158, 1782,
	400, 1782,
	401, 1782,
	402, 1782,
	-2, 1935,
	-1, 2550,
	84, 1784,
	85, 1784,
	158, 1784,
	400, 1784,
	401, 1784,
	402, 1784,
	-2, 1913,
	-1, 2551,
	84, 1785,
	85, 1785,
	158, 1785,
	400, 1785,
	401, 1785,
	402, 1785,
	-2, 1914,
	-1, 2552,
	84, 1787,
	85, 1787,
	158, 1787,
	400, 1787,
	401, 1787,
	402, 1787,
	-2, 1855,
	-1, 2553,
	85, 1830,
	158, 1830,
	400, 1830,
	401, 1830,
	402, 1830,
	-2, 1890,
	-1, 2554,
	85, 1830,
	158, 1830,
	400, 1830,
	401, 1830,
	402, 1830,
	-2, 1904,
	-1, 2555,
	85, 1833,
	158, 1833,
	400, 1833,
	401, 1833,
	402, 1833,
	-2, 1886,
	-1, 2556,
	85, 1833,
	158, 1833,
	400, 1833,
	401, 1833,
	402, 1833,
	-2, 1951,
	-1, 2557,
	85, 1830,
	158, 1830,
	400, 1830,
	401, 1830,
	402, 1830,
	-2, 1973,
	-1, 2774,
	109, 1149,
	153, 1149,
	192, 1149,
	195, 1149,
	284, 1149,
	-2, 1143,
	-1, 2792,
	82, 711,
	158, 711,
	-2, 1327,
	-1, 3214,
	195, 1149,
	308, 1414,
	-2, 1386,
	-1, 3395,
	109, 1149,
	153, 1149,
	192, 1149,
	195, 1149,
	-2, 1267,
	-1, 3397,
	109, 1149,
	153, 1149,
	192, 1149,
	195, 1149,
	-2, 1267,
	-1, 3409,
	82, 711,
	158, 711,
	-2, 1327,
	-1, 3430,
	195, 1149,
	308, 1414,
	-2, 1387,
	-1, 3582,
	109, 1149,
	153, 1149,
	192, 1149,
	195, 1149,
	-2, 1268,
	-1, 3610,
	85, 1229,
	158, 1229,
	-2, 1149,
	-1, 3754,
	85, 1229,
	158, 1229,
	-2, 1149,
	-1, 3918,
	85, 1233,
	158, 1233,
	-2, 1149,
	-1, 3969,
	85, 1234,
	158, 1234,
	-2, 1149,
}

const yyPrivate = 57344

const yyLast = 52969

var yyAct = [...]int{
	767, 743, 4019, 769, 3991, 2822, 217, 1963, 1607, 4011,
	3922, 3928, 1685, 3415, 3514, 3929, 3233, 3820, 3921, 3754,
	752, 3200, 3843, 3801, 3878, 3732, 3307, 3702, 3638, 3444,
	745, 2816, 3792, 1303, 3308, 3753, 3821, 3570, 2734, 1745,
	3671, 797, 2819, 3518, 1039, 3723, 633, 1158, 1451, 3382,
	3377, 3802, 3804, 1911, 1457, 2795, 3209, 3509, 2377, 3171,
	651, 1519, 657, 657, 1747, 1732, 3431, 1681, 657, 675,
	684, 3579, 3552, 684, 1688, 1152, 3591, 3133, 3157, 3398,
	3305, 2934, 3584, 202, 37, 2935, 2058, 3160, 1750, 2061,
	3369, 2933, 2911, 741, 2074, 2845, 3229, 2023, 3218, 65,
	3211, 2930, 3400, 2097, 2483, 3349, 3001, 2130, 2172, 2647,
	3293, 2519, 2380, 3273, 1923, 2763, 3138, 2922, 2960, 1512,
	3140, 3134, 3136, 692, 2612, 696, 3135, 3180, 2341, 1148,
	2775, 2286, 2309, 3131, 137, 735, 3108, 3048, 2168, 2285,
	2591, 1592, 2155, 1596, 2139, 3217, 2974, 36, 740, 2138,
	2131, 1843, 2984, 681, 2103, 1597, 2573, 2054, 2167, 2484,
	2027, 2469, 1417, 2024, 961, 1600, 2521, 2752, 2747, 2847,
	2464, 2827, 1608, 2378, 1953, 2787, 1887, 2340, 1423, 213,
	8, 212, 7, 1679, 2330, 6, 1033, 2517, 1384, 1585,
	1746, 2169, 1559, 633, 1096, 744, 1497, 2321, 1491, 1440,
	650, 1628, 1922, 1460, 734, 2684, 1739, 1719, 1528, 753,
	1670, 1174, 2202, 2137, 23, 2324, 2134, 217, 2119, 217,
	1684, 1087, 1088, 2373, 2093, 1611, 689, 1883, 657, 1566,
	1678, 1032, 632, 998, 2491, 1886, 1452, 960, 2465, 1427,
	1436, 666, 27, 742, 1496, 1550, 1751, 111, 1493, 1461,
	891, 16, 203, 698, 24, 699, 937, 1558, 195, 984,
	1373, 17, 10, 943, 199, 1304, 2683, 683, 1349, 958,
	893, 695, 14, 894, 2410, 1235, 1236, 1237, 1234, 15,
	2176, 1235, 1236, 1237, 1234, 3811, 33, 1235, 1236, 1237,
	1234, 3720, 2720, 968, 653, 2720, 1048, 2720, 2493, 1084,
	1083, 3018, 1085, 3017, 3545, 951, 3412, 952, 736, 3187,
	2186, 680, 1153, 3385, 3300, 1154, 2635, 2579, 2576, 1856,
	676, 2577, 1573, 2574, 662, 1569, 1079, 1080, 201, 669,
	1066, 1045, 652, 2284, 1495, 913, 1368, 3779, 1342, 911,
	687, 678, 2290, 3118, 1047, 932, 1080, 1018, 679, 1620,
	1080, 1420, 1421, 1422, 2294, 677, 1857, 658, 1371, 946,
	3103, 942, 3101, 3098, 965, 966, 3100, 4003, 1474, 1850,
	1619, 1153, 1364, 1571, 3507, 1008, 2997, 1235, 1236, 1237,
	1234, 8, 2995, 7, 2712, 2710, 2108, 1078, 1235, 1236,
	1237, 1234, 3787, 3678, 3672, 3510, 3306, 2152, 3806, 2133,
	892, 1298, 1067, 736, 3077, 2125, 2418, 4025, 3800, 200,
	4000, 3739, 903, 2331, 3686, 200, 3524, 923, 1233, 3957,
	3553, 1379, 1197, 3399, 2332, 2621, 2173, 2714, 1606, 200,
	3557, 2781, 3798, 200, 912, 3707, 2629, 2665, 910, 200,
	200, 200, 200, 61, 191, 162, 3854, 3684, 1536, 200,
	61, 191, 162, 3075, 3904, 3740, 1378, 1615, 1010, 1626,
	1377, 1009, 1376, 136, 913, 911, 1043, 1049, 1409, 1044,
	1374, 694, 2928, 2325, 1392, 1061, 1056, 1051, 1055, 1059,
	2779, 3020, 1380, 2511, 1859, 3709, 196, 1612, 3009, 1623,
	948, 200, 941, 1013, 1011, 2184, 1012, 1232, 2512, 994,
	196, 945, 944, 1064, 196, 908, 2967, 1054, 969, 2071,
	1614, 196, 1625, 196, 1470, 2968, 2969, 1471, 926, 1651,
	196, 904, 933, 1671, 2037, 882, 1675, 881, 883, 884,
	2782, 885, 886, 2592, 2736, 971, 1498, 2498, 1500, 136,
	2497, 1007, 940, 2499, 3102, 3099, 2038, 2039, 1868, 1869,
	1674, 1458, 1459, 200, 61, 191, 162, 1225, 1062, 3932,
	3933, 950, 196, 1937, 2749, 1687, 939, 1065, 1230, 1448,
	938, 2273, 2737, 1042, 2750, 1041, 925, 200, 61, 191,
	162, 1456, 931, 3956, 1019, 1455, 1458, 1459, 3809, 1052,
	200, 61, 191, 162, 3809, 3892, 3808, 3891, 3807, 3890,
	993, 991, 3808, 3807, 929, 1473, 1015, 3204, 1391, 3995,
	3996, 3897, 3880, 1063, 3534, 3901, 3202, 1169, 1572, 1570,
	3790, 3309, 990, 2748, 196, 3880, 3793, 3794, 3795, 3796,
	3883, 3003, 3002, 3004, 964, 2715, 1676, 3309, 2616, 1177,
	1180, 1637, 949, 3675, 1163, 970, 1003, 2188, 196, 200,
	61, 191, 162, 1053, 1166, 657, 657, 3817, 2045, 1691,
	1673, 196, 161, 1660, 198, 2055, 657, 1162, 930, 999,
	1017, 3322, 2755, 1172, 3153, 3370, 1177, 1180, 712, 711,
	718, 708, 1666, 2180, 2923, 188, 684, 684, 2453, 657,
	715, 716, 3038, 717, 721, 2866, 3562, 702, 3906, 3907,
	2459, 3375, 2320, 3711, 3712, 1000, 1004, 726, 2116, 1579,
	1578, 3902, 3903, 2738, 949, 2739, 3931, 1228, 1229, 3151,
	196, 3456, 3899, 3036, 693, 987, 1227, 985, 989, 1007,
	1060, 1161, 2626, 986, 983, 982, 187, 988, 973, 974,
	972, 975, 976, 977, 978, 947, 1005, 1016, 1006, 2416,
	2713, 2185, 1275, 1484, 3533, 681, 681, 681, 1367, 1001,
	1002, 1393, 3535, 2180, 2069, 2070, 1057, 1200, 1472, 1058,
	1446, 1223, 1224, 1048, 3508, 3148, 3149, 1672, 1690, 1689,
	3810, 2996, 2456, 2457, 936, 2917, 3719, 3325, 1155, 3716,
	3042, 3150, 2719, 2049, 2455, 3559, 997, 3147, 1090, 1162,
	3353, 1154, 996, 2732, 1154, 906, 3665, 1154, 1045, 2291,
	2174, 2462, 2163, 2174, 2174, 1621, 3019, 992, 2514, 1192,
	1222, 1047, 3016, 1858, 3158, 649, 3525, 3471, 2207, 1307,
	3964, 3232, 3230, 3231, 2191, 2193, 2194, 3169, 1179, 1178,
	3181, 2733, 1080, 907, 3206, 1080, 1048, 2175, 730, 1080,
	1080, 732, 3468, 1080, 1080, 3744, 731, 3738, 3836, 3831,
	1697, 1700, 1701, 1308, 2788, 2913, 1154, 3736, 686, 1068,
	1050, 1698, 2187, 1171, 2448, 1179, 1178, 682, 685, 2926,
	2327, 1045, 2575, 3461, 924, 922, 1014, 3109, 3822, 1181,
	2383, 2821, 3666, 1574, 1047, 995, 3838, 3201, 703, 705,
	704, 967, 962, 3416, 3844, 3423, 3905, 963, 1370, 710,
	1372, 1435, 3145, 680, 680, 680, 3685, 3710, 3362, 1269,
	2305, 714, 676, 676, 676, 892, 1389, 651, 729, 3706,
	3360, 3122, 1157, 1156, 2451, 707, 1044, 3159, 1347, 62,
	3472, 1352, 163, 678, 678, 678, 1189, 2711, 163, 1150,
	679, 679, 679, 1185, 1186, 3558, 3816, 677, 677, 677,
	961, 2630, 163, 1860, 1276, 1191, 163, 1661, 197, 3629,
	1662, 3235, 163, 163, 163, 163, 1212, 1168, 1375, 1213,
	2514, 682, 163, 4031, 909, 2428, 3361, 2754, 1458, 1459,
	3154, 1271, 1272, 1273, 1274, 2427, 1447, 1458, 1459, 2924,
	1165, 1167, 1170, 3521, 2056, 682, 3694, 1215, 3695, 3039,
	2817, 2818, 1183, 2821, 657, 3159, 3745, 1486, 682, 1217,
	3713, 657, 1218, 3618, 163, 633, 633, 3898, 3737, 2382,
	2761, 2396, 1454, 1508, 2384, 633, 633, 2376, 2399, 1523,
	1523, 1507, 657, 62, 2758, 2759, 1190, 709, 713, 719,
	1220, 720, 722, 1433, 2046, 723, 724, 725, 3624, 2757,
	727, 728, 3697, 684, 1551, 651, 1205, 62, 3563, 1207,
	1562, 1562, 2449, 2450, 3207, 1319, 1320, 682, 1667, 2192,
	62, 217, 2867, 1432, 2868, 2869, 163, 1431, 2385, 1210,
	633, 1530, 4014, 3696, 3845, 2398, 3724, 1208, 1450, 1449,
	3210, 1525, 1008, 3758, 1149, 1699, 1521, 1521, 3920, 3097,
	163, 2419, 1386, 1387, 951, 3146, 952, 3401, 1396, 1397,
	1398, 1399, 1400, 163, 1402, 2979, 2980, 1390, 1266, 2376,
	1408, 1485, 1216, 2767, 2770, 2771, 2772, 2768, 2769, 62,
	2397, 3505, 1604, 3312, 1426, 1385, 3167, 1609, 694, 3230,
	3231, 1434, 2393, 1211, 1618, 3877, 1517, 1518, 1444, 1353,
	2962, 2964, 1351, 1494, 3234, 3226, 1463, 1464, 3113, 1466,
	1467, 1221, 1468, 2622, 1197, 2503, 2414, 1442, 1443, 1201,
	2177, 2044, 163, 1649, 2021, 1010, 2386, 1401, 1009, 2048,
	3264, 3041, 1395, 2725, 1407, 1406, 1219, 1523, 1405, 1523,
	1162, 1862, 1404, 1020, 1627, 1203, 2304, 1429, 688, 3363,
	3631, 1502, 1504, 955, 956, 957, 706, 1206, 1209, 2189,
	2190, 1515, 1516, 1419, 3227, 1437, 1441, 1441, 1441, 1416,
	1214, 4015, 2864, 1613, 3757, 2203, 3350, 1644, 1645, 1580,
	1624, 1475, 1476, 1202, 3050, 3049, 1462, 1414, 1048, 1465,
	1437, 1437, 2729, 681, 2298, 1048, 681, 681, 953, 918,
	1594, 1595, 1196, 1383, 1686, 1552, 1871, 1523, 3694, 1659,
	3695, 2300, 2299, 1381, 1382, 3620, 1575, 3168, 1872, 3619,
	1617, 2886, 2887, 1506, 1162, 1749, 3689, 1583, 3919, 1586,
	1587, 1008, 3543, 1599, 3625, 3626, 1603, 1780, 1781, 1798,
	1784, 1588, 1589, 1394, 3115, 1602, 2297, 662, 1799, 1531,
	917, 1537, 1870, 1543, 920, 919, 914, 2440, 3690, 2387,
	1204, 1806, 3803, 1808, 3697, 1809, 1810, 1811, 1563, 1648,
	1549, 2963, 915, 1564, 1733, 2413, 3592, 1683, 1647, 1008,
	4027, 4033, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 2895, 3696, 1771, 3887, 1730, 1731,
	1233, 3270, 2793, 2392, 4012, 4013, 1162, 2390, 1428, 1428,
	950, 2514, 1861, 3266, 1010, 3313, 1864, 1009, 1866, 1783,
	1197, 1635, 2594, 1664, 1638, 1873, 3366, 1875, 1876, 1702,
	4021, 4009, 1551, 3186, 2481, 1630, 1841, 1884, 1523, 1889,
	1890, 3324, 1892, 1486, 657, 3971, 2885, 1807, 2278, 657,
	2312, 680, 1523, 2182, 680, 680, 961, 1680, 2726, 1912,
	676, 2621, 1010, 676, 676, 1009, 1863, 1657, 3228, 3239,
	1852, 1523, 1658, 2313, 2314, 2241, 1654, 1486, 2240, 1656,
	1844, 678, 675, 1797, 678, 678, 1655, 1652, 679, 1677,
	1021, 679, 679, 1682, 3943, 677, 3940, 1653, 677, 677,
	3934, 2096, 1936, 4022, 3972, 3237, 1788, 1789, 1790, 2794,
	1721, 1943, 1943, 1159, 1486, 3107, 1486, 1486, 3972, 1804,
	657, 657, 1805, 2010, 1884, 2014, 2323, 3916, 1523, 2018,
	2019, 1159, 3871, 3870, 2034, 3105, 633, 3864, 1636, 1818,
	1819, 1639, 1640, 2794, 3839, 3827, 1728, 1729, 2482, 3270,
	633, 1233, 1523, 1235, 1236, 1237, 1234, 1893, 3777, 1840,
	1940, 2482, 2482, 1767, 3776, 3771, 1891, 3944, 3770, 3941,
	1764, 2982, 2741, 2217, 1766, 1763, 1765, 1769, 1770, 657,
	1884, 1523, 1768, 2079, 1668, 657, 657, 657, 692, 692,
	3769, 2716, 3768, 1847, 1194, 2089, 2090, 2091, 2092, 3073,
	3917, 2611, 2098, 2599, 1965, 1233, 1233, 2173, 1812, 217,
	2217, 1669, 217, 217, 2036, 217, 2012, 2182, 3828, 2072,
	3690, 1880, 1881, 1882, 3691, 2369, 2283, 2277, 1946, 1848,
	2276, 3778, 3748, 1895, 1896, 1897, 1898, 2345, 2217, 1842,
	3747, 2217, 2094, 2322, 2064, 2065, 2896, 2898, 2899, 2900,
	2897, 1920, 1921, 2248, 2164, 1798, 1798, 2141, 1888, 2067,
	1233, 1195, 2041, 2217, 2043, 2217, 1798, 1798, 1930, 1931,
	2020, 1195, 1904, 2157, 2050, 2062, 2063, 1879, 1348, 2081,
	2082, 2083, 3722, 3477, 1924, 1929, 1926, 1927, 1941, 1415,
	2057, 1917, 2107, 1909, 1736, 2110, 2111, 1934, 2113, 2032,
	1933, 1945, 1908, 1913, 1509, 2182, 1912, 2078, 1914, 1915,
	1523, 2171, 1919, 2182, 2383, 2386, 2151, 4040, 1947, 1948,
	4023, 1437, 2035, 1925, 1928, 3425, 1774, 1775, 1776, 1777,
	1778, 1779, 1772, 1773, 2143, 1441, 3412, 2986, 2796, 3391,
	1935, 2624, 1613, 1938, 1939, 2383, 2386, 1441, 2017, 1942,
	1944, 2011, 1197, 2623, 1048, 2217, 2514, 1048, 2615, 2165,
	2363, 656, 656, 2016, 2236, 1048, 681, 664, 2022, 3342,
	2221, 2147, 2162, 2101, 2356, 2087, 1479, 1480, 737, 1482,
	1483, 2051, 1487, 1488, 1489, 1632, 2040, 1284, 2042, 1045,
	3639, 3640, 3641, 3645, 3643, 3644, 3642, 3338, 3426, 2136,
	1045, 1680, 1047, 1182, 1071, 1076, 1077, 2076, 3247, 2655,
	2136, 2077, 3392, 1047, 2084, 2085, 1538, 1539, 1540, 1541,
	1542, 1146, 1544, 1545, 1546, 1547, 1548, 2957, 2102, 2702,
	1554, 1555, 1556, 1557, 1141, 2104, 3374, 1140, 1136, 1137,
	1138, 1139, 3343, 2660, 2690, 2659, 2658, 2656, 2387, 3655,
	2121, 3475, 2682, 2382, 2376, 2381, 1266, 2379, 2384, 2637,
	2200, 2201, 1048, 1235, 1236, 1237, 1234, 2066, 1250, 2371,
	3339, 2619, 2153, 2607, 3191, 2216, 1912, 2601, 3033, 2387,
	2150, 3248, 2148, 2142, 2382, 2376, 2381, 916, 2379, 2384,
	3832, 1424, 2159, 2596, 2161, 1425, 2588, 1045, 2288, 2289,
	2482, 2292, 2345, 2586, 2295, 1235, 1236, 1237, 1234, 2355,
	1047, 2584, 2385, 4034, 2657, 2582, 2344, 1233, 735, 2166,
	3999, 657, 657, 657, 680, 1233, 1511, 664, 2411, 2271,
	1438, 2219, 1233, 676, 3833, 2196, 657, 657, 657, 657,
	2179, 782, 138, 2385, 2345, 3812, 2597, 138, 3721, 2342,
	2602, 2215, 2279, 2195, 678, 896, 897, 898, 899, 2348,
	1486, 679, 896, 897, 898, 899, 2597, 3682, 677, 2589,
	3622, 2197, 3182, 1721, 1787, 1786, 2587, 3621, 1235, 1236,
	1237, 1234, 2204, 3752, 2583, 2209, 1486, 3607, 2583, 2345,
	2255, 2254, 2239, 1081, 1082, 2230, 2229, 1469, 1086, 1073,
	1074, 1075, 2228, 2405, 2218, 2181, 1641, 663, 2198, 2199,
	138, 2160, 1249, 1248, 1258, 1259, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 1250, 2213, 2278, 2249, 2250, 1510, 2252,
	3593, 2243, 1787, 1786, 1534, 921, 2259, 1249, 1248, 1258,
	1259, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1250, 1439,
	2412, 3183, 3404, 3402, 2360, 2661, 2662, 3566, 2362, 3384,
	2364, 657, 1943, 1233, 1233, 1233, 3271, 3262, 1233, 1233,
	2486, 2486, 2034, 2486, 3594, 1233, 3254, 2217, 2182, 1642,
	1513, 3249, 2272, 2274, 2275, 3162, 2920, 1824, 2919, 2765,
	2280, 1514, 2721, 633, 633, 3184, 3405, 3403, 2634, 1424,
	2365, 1162, 2600, 1425, 2505, 901, 2146, 1523, 657, 2145,
	2144, 1411, 901, 1253, 1254, 1255, 1256, 1257, 1250, 2375,
	1410, 657, 2306, 2374, 1164, 2574, 3298, 1162, 2558, 651,
	2644, 1307, 2568, 2105, 1740, 1562, 2210, 2034, 1046, 1727,
	2563, 2988, 2565, 138, 1740, 1817, 217, 1567, 1874, 2105,
	1237, 1234, 2357, 2368, 3889, 1724, 1726, 1723, 138, 1725,
	138, 1234, 2349, 3634, 3633, 1308, 3005, 2856, 2500, 2490,
	2501, 1048, 2854, 2352, 2509, 2488, 2833, 2492, 2358, 2831,
	2361, 2359, 3604, 3567, 3568, 3613, 2604, 4005, 4004, 2506,
	2507, 2522, 4030, 1802, 3947, 2494, 1235, 1236, 1237, 1234,
	2350, 2351, 3560, 2617, 1286, 3299, 1045, 2171, 1803, 3915,
	2353, 2354, 3914, 2764, 1523, 2516, 1523, 1285, 1523, 1047,
	3834, 2388, 2389, 1162, 2394, 1235, 1236, 1237, 1234, 2569,
	1441, 2636, 2735, 1567, 2562, 3773, 1249, 1248, 1258, 1259,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 1250, 3761, 1235,
	1236, 1237, 1234, 2704, 2458, 2705, 4029, 1523, 1162, 2463,
	3301, 3561, 2668, 1258, 1259, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1250, 2495, 3372, 2907, 3751, 2675, 3741, 1502,
	1504, 3673, 1523, 2627, 3596, 2417, 3595, 2631, 2420, 2421,
	2422, 2423, 2424, 2425, 2426, 3417, 3406, 2429, 2430, 2431,
	2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2080, 2441,
	2442, 2443, 2444, 2445, 2513, 2446, 2510, 3371, 2663, 1235,
	1236, 1237, 1234, 3250, 1521, 3152, 2905, 2561, 3029, 2559,
	2578, 2723, 2724, 3373, 2906, 2727, 2903, 2679, 2680, 1235,
	1236, 1237, 1234, 2676, 1235, 1236, 1237, 1234, 2646, 1521,
	2613, 2614, 1162, 2570, 656, 1151, 1162, 3000, 2892, 1235,
	1236, 1237, 1234, 1523, 2652, 1160, 1486, 2633, 1568, 2999,
	2890, 2889, 2014, 2560, 2888, 2880, 2628, 2677, 2874, 2674,
	2792, 2873, 2567, 3925, 2666, 2904, 2798, 2232, 1188, 1235,
	1236, 1237, 1234, 2609, 2642, 2902, 2872, 2625, 2620, 2871,
	2618, 1785, 2717, 2590, 2808, 2502, 2282, 2124, 2708, 2123,
	1235, 1236, 1237, 1234, 1162, 2122, 2742, 2891, 2118, 2648,
	2522, 2648, 2830, 2117, 2073, 1235, 1236, 1237, 1234, 1162,
	1162, 1162, 1943, 1867, 1680, 1162, 1865, 2840, 2841, 2842,
	2843, 1162, 2850, 1633, 2851, 2852, 1366, 2853, 2664, 2855,
	2654, 2638, 2639, 2776, 730, 2231, 1144, 732, 2780, 3378,
	2850, 3539, 731, 2777, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1250, 2486, 1048, 1235, 1236, 1237, 1234, 2825, 3383,
	2762, 2809, 1235, 1236, 1237, 1234, 2908, 2641, 1235, 1236,
	1237, 1234, 1965, 2825, 2836, 2837, 633, 3139, 4026, 2839,
	3714, 3715, 4024, 2014, 3515, 2846, 3997, 1162, 2034, 2034,
	2034, 2034, 2034, 2799, 1143, 3963, 3962, 1238, 3959, 2744,
	3895, 2746, 1162, 2034, 3527, 1268, 2486, 3894, 3703, 1505,
	2914, 3875, 2828, 3819, 1278, 2824, 2828, 3066, 3571, 2760,
	3797, 3788, 2965, 2743, 1523, 2789, 3765, 3760, 3759, 3718,
	2835, 1235, 1236, 1237, 1234, 657, 657, 2791, 2783, 3705,
	1287, 2685, 2686, 8, 3704, 7, 3674, 2691, 2800, 2797,
	3615, 2936, 3575, 3564, 2811, 3546, 3544, 2805, 2806, 3541,
	3538, 3537, 2810, 1888, 2813, 3513, 2936, 3511, 3485, 3482,
	3602, 2826, 3479, 2912, 2224, 2832, 3368, 3358, 3065, 3052,
	3351, 3335, 2838, 2953, 3333, 2807, 3328, 3260, 3259, 2829,
	3257, 217, 138, 138, 138, 1046, 217, 3256, 3251, 3245,
	3244, 2966, 3163, 3126, 3125, 1235, 1236, 1237, 1234, 2870,
	3526, 2882, 2801, 3121, 3119, 2751, 3117, 2804, 1798, 3114,
	1798, 3112, 2287, 3015, 1249, 1248, 1258, 1259, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1250, 3028, 1235, 1236, 1237,
	1234, 2915, 1523, 3043, 3040, 3035, 2921, 4032, 3465, 2998,
	2972, 2937, 2938, 2939, 2940, 2941, 1235, 1236, 1237, 1234,
	2901, 2951, 2918, 2954, 2893, 2956, 2955, 3330, 1267, 1235,
	1236, 1237, 1234, 2214, 2989, 1235, 1236, 1237, 1234, 2993,
	2883, 2881, 2970, 2973, 1241, 1242, 1243, 1244, 1245, 1246,
	1247, 1239, 2877, 1481, 1235, 1236, 1237, 1234, 2876, 2875,
	1492, 3010, 1594, 1595, 2730, 1844, 2722, 2862, 2863, 2983,
	3014, 2718, 3021, 838, 837, 2823, 1048, 2610, 2301, 2296,
	2293, 1529, 2878, 2879, 2127, 2120, 3012, 1048, 3985, 1855,
	1599, 1854, 1634, 1603, 1587, 1315, 3022, 1311, 1310, 1147,
	2987, 905, 1602, 3851, 1588, 1589, 2990, 3116, 2916, 2991,
	1235, 1236, 1237, 1234, 3120, 3847, 3069, 3037, 3123, 3124,
	3699, 3068, 3011, 3698, 3687, 3006, 1162, 3008, 3032, 3013,
	3683, 3024, 3142, 3540, 3025, 200, 3023, 191, 162, 3522,
	3031, 2212, 3156, 1235, 1236, 1237, 1234, 657, 1235, 1236,
	1237, 1234, 3397, 3396, 3395, 3044, 3365, 3347, 3345, 3172,
	1162, 3344, 3341, 657, 3067, 1162, 1162, 3340, 3051, 3045,
	2701, 3334, 3064, 3332, 2034, 2342, 1354, 3190, 3314, 3060,
	3061, 3058, 3057, 3304, 3059, 3106, 3303, 3289, 1561, 1561,
	2825, 1235, 1236, 1237, 1234, 3288, 2405, 1235, 1236, 1237,
	1234, 3166, 3192, 3129, 3104, 3071, 196, 3984, 3216, 3062,
	3219, 3054, 3219, 3219, 3053, 3047, 2981, 1162, 1235, 1236,
	1237, 1234, 2740, 2585, 2825, 3055, 3056, 2581, 2700, 2825,
	2825, 2580, 3111, 2260, 2253, 3240, 3110, 2776, 2247, 2246,
	3236, 2245, 2244, 1523, 1523, 2699, 3175, 2242, 2238, 2237,
	3144, 3179, 3203, 3205, 3127, 1235, 1236, 1237, 1234, 1048,
	3194, 1048, 2235, 2226, 2223, 2222, 1048, 2126, 1483, 1838,
	1837, 3188, 1235, 1236, 1237, 1234, 1836, 3199, 1801, 1800,
	1791, 2825, 1535, 1533, 3946, 3165, 3869, 1305, 200, 3128,
	657, 3846, 1048, 3174, 1045, 2698, 3783, 3142, 3177, 3178,
	3185, 3780, 3767, 3189, 3241, 3242, 3215, 1047, 3762, 1486,
	1521, 1521, 2014, 2014, 3668, 3667, 3224, 2375, 3198, 3649,
	3632, 2374, 1235, 1236, 1237, 1234, 1532, 3628, 3078, 3079,
	663, 3606, 3590, 3495, 3080, 3081, 3082, 3083, 3225, 3084,
	3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094,
	2697, 3238, 1692, 1693, 1694, 1695, 1696, 3220, 3221, 196,
	3493, 3463, 138, 1162, 3462, 3459, 3197, 2668, 3458, 3424,
	3421, 3419, 3214, 770, 780, 3386, 3302, 1235, 1236, 1237,
	1234, 3063, 1582, 771, 3246, 772, 776, 779, 775, 773,
	774, 1593, 1584, 1598, 1737, 1601, 1590, 1418, 1741, 1742,
	1743, 1744, 3222, 2909, 2834, 2785, 2784, 2778, 1782, 2745,
	2703, 2595, 3252, 3267, 3268, 2504, 1792, 3253, 3255, 3258,
	3193, 3261, 657, 3265, 2447, 3195, 3196, 2522, 3072, 2343,
	138, 3863, 2696, 3278, 2315, 2281, 1722, 138, 777, 196,
	2086, 1878, 1851, 1894, 1665, 1616, 1591, 1365, 1899, 1350,
	138, 1346, 1345, 138, 138, 3285, 3286, 3287, 3282, 1235,
	1236, 1237, 1234, 1344, 1343, 1342, 138, 1341, 1340, 1845,
	778, 1339, 1338, 1337, 3291, 2695, 1336, 1335, 3297, 1334,
	1333, 1332, 1249, 1248, 1258, 1259, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 1250, 1331, 2098, 3355, 3315, 1330, 3357,
	2640, 1329, 1235, 1236, 1237, 1234, 1328, 1327, 3316, 1326,
	1325, 3317, 1324, 1323, 1322, 2952, 2694, 1321, 1318, 1949,
	1950, 3321, 1317, 3336, 1249, 1248, 1258, 1259, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1250, 3320, 1316, 1314, 657,
	2014, 3359, 3326, 1235, 1236, 1237, 1234, 1916, 1313, 1312,
	3390, 3977, 2693, 1309, 3269, 1248, 1258, 1259, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1250, 2486, 2034, 3409, 1302,
	1301, 1299, 1932, 3281, 1298, 1297, 3348, 1296, 2075, 1235,
	1236, 1237, 1234, 1295, 2075, 2075, 2075, 1294, 1293, 1292,
	1291, 3427, 1290, 1289, 1162, 3364, 3352, 1288, 3354, 2648,
	2692, 1283, 3367, 3216, 1282, 1281, 1280, 1162, 1279, 1199,
	1048, 1145, 3274, 3275, 3861, 3859, 3857, 1048, 1162, 3460,
	3474, 2347, 2329, 1187, 1523, 3975, 3411, 1235, 1236, 1237,
	1234, 1845, 2689, 3379, 3280, 3930, 1845, 1845, 2688, 3277,
	2766, 3381, 2515, 2129, 1198, 657, 2944, 2014, 3497, 2948,
	2946, 1162, 3279, 3457, 2949, 2947, 3498, 2943, 3428, 1235,
	1236, 1237, 1234, 2945, 3408, 1235, 1236, 1237, 1234, 2942,
	3407, 3467, 2950, 3888, 2477, 2478, 3418, 3450, 3420, 121,
	217, 3414, 2846, 64, 3799, 3476, 2106, 63, 3611, 2109,
	2608, 1521, 2112, 1162, 3486, 2114, 2598, 3489, 2687, 1412,
	3161, 3464, 3027, 3499, 3469, 3496, 3466, 1906, 1907, 1901,
	1902, 1903, 3212, 3473, 3213, 2936, 3318, 3319, 2415, 3480,
	3470, 3478, 3483, 3292, 3481, 1235, 1236, 1237, 1234, 3484,
	2003, 2681, 1576, 2593, 3542, 2632, 3490, 1629, 3488, 3487,
	1610, 3491, 2302, 3549, 2088, 659, 1193, 1162, 3520, 660,
	2156, 2613, 2614, 661, 3137, 3130, 2812, 2936, 1235, 1236,
	1237, 1234, 2205, 3506, 2786, 2367, 2338, 1162, 1523, 1523,
	1910, 1877, 3988, 3172, 3516, 2033, 1787, 1786, 3517, 3547,
	3548, 1361, 1362, 3583, 3764, 3583, 1249, 1248, 1258, 1259,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 1250, 1359, 1360,
	1162, 3600, 1162, 3243, 3577, 3578, 3572, 2460, 3410, 1357,
	1358, 2825, 3603, 2454, 3605, 1355, 1356, 3413, 2015, 1523,
	3556, 3387, 3388, 3389, 3555, 3554, 1478, 3393, 3394, 3573,
	1477, 1226, 3576, 3284, 3574, 1521, 1733, 657, 3565, 1162,
	1162, 1453, 2975, 1162, 1162, 3411, 2303, 2158, 3501, 3588,
	138, 3587, 1430, 138, 138, 2206, 138, 1403, 3953, 2211,
	3580, 3951, 3651, 3609, 1686, 2143, 1686, 2220, 3908, 3457,
	3646, 3599, 3885, 3884, 1912, 1048, 3660, 3612, 3636, 3637,
	3882, 3823, 3647, 3648, 3616, 3784, 1733, 3663, 3669, 3670,
	3536, 3662, 3294, 3450, 3601, 3512, 1046, 2985, 3608, 138,
	3337, 1523, 2671, 3311, 2227, 3310, 3295, 1046, 3614, 1428,
	3551, 2400, 2234, 2370, 3656, 1631, 3979, 3978, 3657, 3356,
	2316, 2317, 2318, 138, 3700, 3030, 2728, 3658, 2331, 1235,
	1236, 1237, 1234, 3693, 2251, 2333, 2334, 2335, 2336, 2256,
	2257, 2258, 3652, 3978, 2261, 2262, 2263, 2264, 2265, 2266,
	2267, 2268, 2269, 2270, 3680, 3676, 2667, 2225, 1369, 1184,
	3979, 2643, 3681, 1159, 3688, 3692, 961, 2858, 1521, 3630,
	3727, 3733, 3290, 1735, 2859, 2860, 2861, 204, 3, 3528,
	1445, 3529, 72, 1235, 1236, 1237, 1234, 1162, 1235, 1236,
	1237, 1234, 896, 897, 898, 899, 3717, 1159, 3756, 3750,
	1235, 1236, 1237, 1234, 1267, 2, 4001, 4002, 1, 3728,
	2709, 3729, 3520, 1849, 3730, 1363, 2472, 2476, 2477, 2478,
	2473, 2480, 2474, 2479, 3746, 3742, 2475, 3597, 3598, 900,
	1162, 895, 1499, 2496, 2068, 1523, 1527, 1853, 902, 2958,
	2959, 3283, 2961, 2731, 2178, 2925, 3725, 2452, 2319, 3155,
	1413, 1686, 3763, 954, 1793, 1646, 1070, 1176, 1643, 1175,
	1492, 1048, 1173, 1738, 1813, 1814, 1815, 1816, 784, 3772,
	1820, 1821, 1822, 1823, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 2132, 2910, 2884, 3815, 3659,
	3805, 3987, 4018, 3945, 3990, 1663, 3774, 3785, 768, 3876,
	3789, 3949, 1521, 3791, 3679, 2183, 1231, 1529, 3007, 980,
	825, 795, 1300, 1622, 3824, 3076, 3074, 1072, 794, 3376,
	2075, 2756, 3664, 2978, 3735, 3813, 3653, 1069, 981, 2115,
	3654, 3786, 3677, 1577, 1581, 2366, 3743, 3842, 3818, 3610,
	3208, 2820, 3841, 1605, 3837, 3422, 3532, 3826, 1162, 3530,
	3531, 700, 2047, 631, 1030, 3650, 1523, 2128, 701, 3866,
	1845, 2346, 1845, 3900, 3873, 3766, 3856, 3858, 3860, 3862,
	3840, 3835, 934, 2328, 935, 927, 2774, 3849, 2773, 3874,
	1703, 1845, 1845, 1240, 1720, 3095, 3096, 3855, 1249, 1248,
	1258, 1259, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1250,
	1277, 739, 2208, 2753, 3881, 3879, 1523, 2466, 3445, 3733,
	2971, 71, 70, 1561, 69, 68, 225, 3865, 786, 3893,
	3781, 3782, 224, 1521, 3701, 3918, 3569, 3872, 3992, 765,
	764, 3926, 763, 762, 3911, 3909, 761, 760, 2471, 2470,
	3912, 3913, 2468, 2467, 2472, 2476, 2477, 2478, 2473, 2480,
	2474, 2479, 2029, 2028, 2475, 2095, 3170, 2849, 3942, 2844,
	1954, 1952, 1490, 2603, 2395, 2606, 3935, 3910, 3936, 2402,
	3937, 1951, 3938, 1521, 3939, 3927, 3327, 3952, 3523, 3954,
	3955, 3852, 3853, 3627, 3950, 3948, 2894, 3519, 1900, 1162,
	3805, 2391, 1971, 3958, 2865, 1968, 1967, 2857, 3623, 3617,
	1999, 3731, 3582, 3429, 3430, 3436, 3756, 2337, 1095, 1091,
	3775, 3967, 1771, 2489, 1093, 1094, 1092, 2653, 3969, 3970,
	3968, 3976, 3973, 3263, 3974, 3986, 2372, 3994, 3132, 2645,
	3993, 2311, 2651, 3980, 3981, 3982, 3983, 2310, 2308, 2307,
	1388, 3814, 3896, 2669, 2670, 4006, 3550, 1162, 3998, 2520,
	2518, 2672, 2673, 3965, 1142, 3276, 3272, 3841, 2140, 4007,
	2154, 4008, 3026, 4010, 2030, 2026, 2025, 2678, 2927, 4016,
	4020, 2461, 3708, 4017, 1905, 928, 2326, 41, 2033, 2790,
	118, 105, 179, 3825, 56, 178, 55, 138, 3829, 3830,
	116, 176, 54, 100, 4028, 99, 1692, 1845, 115, 174,
	53, 209, 208, 3994, 4036, 211, 3993, 4035, 210, 207,
	2571, 1686, 2572, 206, 1565, 4020, 4037, 205, 3886, 3850,
	3586, 4041, 3868, 890, 44, 43, 180, 42, 106, 57,
	40, 39, 38, 200, 61, 191, 162, 34, 13, 12,
	35, 22, 21, 1650, 20, 26, 32, 200, 61, 191,
	162, 192, 31, 131, 130, 30, 129, 128, 183, 127,
	126, 125, 193, 124, 123, 192, 29, 19, 48, 47,
	46, 9, 183, 119, 2802, 2803, 193, 114, 112, 1767,
	28, 136, 113, 110, 109, 108, 1764, 107, 103, 101,
	1766, 1763, 1765, 1769, 1770, 136, 122, 1261, 1768, 1265,
	83, 82, 81, 96, 196, 95, 94, 93, 92, 91,
	122, 89, 90, 979, 80, 1262, 1264, 1260, 196, 1263,
	1249, 1248, 1258, 1259, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1250, 79, 78, 77, 76, 98, 104, 102, 87,
	97, 88, 86, 85, 84, 75, 74, 73, 160, 159,
	158, 157, 156, 154, 2976, 2977, 3960, 3961, 155, 153,
	152, 151, 150, 149, 148, 49, 50, 51, 52, 170,
	169, 171, 173, 175, 172, 177, 167, 165, 168, 166,
	164, 144, 145, 66, 146, 147, 11, 117, 18, 25,
	4, 0, 0, 0, 0, 144, 145, 0, 146, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3434, 0, 1845, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1774, 1775, 1776, 1777, 1778, 1779, 1772, 1773,
	0, 3446, 0, 161, 189, 198, 190, 120, 0, 0,
	0, 0, 0, 0, 3437, 0, 0, 161, 189, 198,
	190, 120, 0, 0, 0, 3432, 188, 182, 181, 0,
	3454, 3455, 0, 67, 0, 0, 3433, 0, 0, 0,
	188, 182, 181, 2992, 0, 2994, 0, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1845, 0, 0, 0, 0, 1845,
	0, 0, 0, 3438, 0, 0, 0, 0, 0, 0,
	2156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 186, 0, 0, 2033,
	2033, 2033, 2033, 2033, 0, 0, 0, 0, 184, 185,
	186, 0, 0, 0, 2033, 3046, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 194, 0, 3070, 0, 0, 0, 0, 132, 0,
	0, 0, 187, 0, 133, 0, 3164, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 187, 0, 133, 3453,
	0, 2381, 3176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3442, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 138, 0, 0,
	2000, 134, 0, 0, 0, 1961, 0, 0, 3439, 3443,
	3441, 3440, 0, 0, 60, 134, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 60, 138,
	0, 0, 0, 0, 0, 2003, 1970, 0, 0, 0,
	0, 0, 0, 0, 0, 2004, 2005, 0, 3448, 3449,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 1969, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1977, 2075,
	0, 0, 0, 3223, 0, 0, 3456, 0, 142, 197,
	0, 143, 0, 0, 0, 0, 163, 0, 3435, 0,
	0, 58, 142, 197, 3447, 143, 0, 0, 0, 0,
	163, 0, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1993, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 45, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 5, 0,
	0, 135, 45, 0, 0, 0, 0, 0, 59, 0,
	0, 1046, 0, 138, 0, 139, 140, 0, 138, 141,
	0, 0, 0, 0, 0, 2033, 0, 0, 0, 139,
	140, 3323, 0, 141, 0, 0, 2000, 0, 1960, 1962,
	1959, 1961, 0, 1956, 138, 0, 0, 0, 1981, 0,
	0, 0, 0, 0, 3452, 0, 0, 0, 0, 1987,
	0, 0, 0, 0, 0, 0, 0, 1972, 0, 1955,
	0, 2003, 1970, 0, 0, 0, 0, 0, 0, 1975,
	2009, 2004, 2005, 1976, 1978, 1980, 0, 1982, 1983, 1984,
	1988, 1989, 1990, 1992, 1995, 1996, 1997, 0, 0, 0,
	0, 0, 0, 0, 1985, 1994, 1986, 1969, 0, 0,
	0, 0, 0, 0, 0, 0, 1964, 0, 0, 0,
	0, 0, 0, 0, 1977, 0, 0, 0, 0, 0,
	3451, 0, 0, 0, 0, 3329, 0, 0, 0, 0,
	2001, 0, 3331, 1235, 1236, 1237, 1234, 0, 2075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1957, 1958, 0,
	0, 0, 0, 0, 3346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1998, 0, 0, 0, 0,
	0, 0, 1993, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1974, 0, 0, 0, 0, 0, 0, 1973,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1991, 0, 0, 0, 0, 0, 0,
	0, 0, 1979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2075, 2007, 2006, 0, 0, 0,
	0, 0, 0, 0, 1960, 2815, 1959, 0, 0, 2814,
	0, 0, 0, 0, 1981, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1975, 2009, 0, 1966, 1976,
	1978, 1980, 0, 1982, 1983, 1984, 1988, 1989, 1990, 1992,
	1995, 1996, 1997, 0, 1845, 0, 0, 0, 0, 0,
	1985, 1994, 1986, 0, 0, 0, 0, 0, 0, 0,
	1845, 0, 1964, 3492, 0, 0, 3494, 1114, 0, 0,
	2002, 0, 0, 2008, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 3500, 0, 0, 2001, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1767,
	0, 0, 0, 1957, 1958, 0, 1764, 0, 0, 0,
	1766, 1763, 1765, 1769, 1770, 0, 0, 0, 1768, 0,
	0, 1998, 0, 0, 0, 0, 0, 0, 2033, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1974, 0,
	0, 0, 0, 0, 0, 1973, 0, 0, 0, 1114,
	0, 0, 0, 0, 0, 0, 3635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1991,
	0, 0, 0, 0, 0, 0, 0, 0, 1979, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2007, 2006, 0, 0, 0, 0, 0, 0, 0,
	1122, 1126, 1128, 1130, 1132, 1133, 1135, 0, 1140, 1136,
	1137, 1138, 1139, 0, 1117, 1118, 1119, 1120, 1097, 1098,
	1123, 0, 1100, 0, 1102, 1103, 1104, 1105, 1101, 1106,
	1107, 1108, 1109, 1110, 1113, 1115, 1111, 1112, 1121, 0,
	0, 138, 0, 0, 1966, 0, 1125, 1127, 1129, 1131,
	1134, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1774, 1775, 1776, 1777, 1778, 1779, 1772, 1773,
	0, 0, 1099, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 1116, 2002, 0, 0, 2008,
	1114, 0, 1122, 1126, 1128, 1130, 1132, 1133, 1135, 0,
	1140, 1136, 1137, 1138, 1139, 0, 1117, 1118, 1119, 1120,
	1097, 1098, 1123, 0, 1100, 0, 1102, 1103, 1104, 1105,
	1101, 1106, 1107, 1108, 1109, 1110, 1113, 1115, 1111, 1112,
	1121, 0, 0, 0, 0, 0, 0, 138, 1125, 1127,
	1129, 1131, 1134, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2649, 2650, 0, 0,
	0, 0, 0, 1122, 1126, 1128, 1130, 1132, 1133, 1135,
	0, 1140, 1136, 1137, 1138, 1139, 0, 1117, 1118, 1119,
	1120, 1097, 1098, 1123, 0, 1100, 0, 1102, 1103, 1104,
	1105, 1101, 1106, 1107, 1108, 1109, 1110, 1113, 1115, 1111,
	1112, 1121, 0, 0, 0, 0, 1287, 0, 0, 1125,
	1127, 1129, 1131, 1134, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3848, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 802, 0, 0, 0, 0, 0, 0,
	1124, 0, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 754, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	793, 555, 506, 423, 375, 573, 572, 0, 0, 861,
	869, 0, 0, 0, 0, 3923, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 783, 838, 837, 770,
	780, 0, 0, 303, 223, 501, 621, 503, 502, 771,
	0, 772, 776, 779, 775, 773, 774, 0, 853, 0,
	0, 0, 1124, 0, 0, 738, 750, 0, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 747, 748, 0, 0, 0, 0, 803, 3923,
	749, 0, 0, 798, 777, 781, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 778, 801, 805, 324,
	875, 799, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 3923, 296, 443, 371, 366, 354, 332, 876, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	796, 0, 618, 0, 457, 0, 0, 859, 0, 0,
	0, 428, 0, 1124, 357, 0, 0, 0, 800, 0,
	412, 393, 872, 4039, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 1795, 1794, 1796, 469,
	358, 359, 0, 337, 285, 286, 640, 857, 389, 583,
	616, 617, 508, 0, 871, 852, 854, 855, 858, 862,
	863, 864, 865, 866, 868, 870, 874, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 873, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 804, 558,
	559, 379, 380, 381, 382, 860, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 882, 856, 881, 883, 884, 880,
	885, 886, 867, 759, 0, 811, 878, 877, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 766, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 845, 818, 819, 820, 756, 821, 815, 816,
	757, 817, 846, 809, 842, 843, 785, 812, 822, 841,
	823, 844, 847, 848, 887, 888, 829, 813, 251, 889,
	826, 849, 840, 839, 824, 810, 850, 851, 792, 787,
	827, 828, 814, 833, 834, 835, 758, 806, 807, 808,
	830, 831, 788, 789, 790, 791, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 836, 626, 427, 0, 832, 629, 630, 627,
	365, 414, 432, 421, 802, 641, 504, 505, 642, 615,
	0, 751, 0, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 754, 0, 0, 0,
	330, 1846, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 793, 555, 506, 423, 375, 573, 572, 0, 0,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2059, 0, 0, 746, 0, 0, 783, 838, 837,
	770, 780, 0, 0, 303, 223, 501, 621, 503, 502,
	771, 0, 772, 776, 779, 775, 773, 774, 0, 853,
	0, 0, 0, 0, 0, 0, 738, 750, 0, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 748, 0, 0, 0, 0, 803,
	0, 749, 0, 0, 2060, 777, 781, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 778, 801, 805,
	324, 875, 799, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 876,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 796, 0, 618, 0, 457, 0, 0, 859, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 800,
	0, 412, 393, 872, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 857, 389,
	583, 616, 617, 508, 0, 871, 852, 854, 855, 858,
	862, 863, 864, 865, 866, 868, 870, 874, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 873,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 804,
	558, 559, 379, 380, 381, 382, 860, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 882, 856, 881, 883, 884,
	880, 885, 886, 867, 759, 0, 811, 878, 877, 879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 766, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 845, 818, 819, 820, 756, 821, 815,
	816, 757, 817, 846, 809, 842, 843, 785, 812, 822,
	841, 823, 844, 847, 848, 887, 888, 829, 813, 251,
	889, 826, 849, 840, 839, 824, 810, 850, 851, 792,
	787, 827, 828, 814, 833, 834, 835, 758, 806, 807,
	808, 830, 831, 788, 789, 790, 791, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 836, 626, 427, 0, 832, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 0, 751, 200, 802, 0, 0, 0, 0, 0,
	0, 0, 0, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 754, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 1270, 555, 506, 423, 375, 573, 572, 0, 0,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 783, 838, 837,
	770, 780, 0, 0, 303, 223, 501, 621, 503, 502,
	771, 0, 772, 776, 779, 775, 773, 774, 0, 853,
	0, 0, 0, 0, 0, 0, 738, 750, 0, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 748, 0, 0, 0, 0, 803,
	0, 749, 0, 0, 798, 777, 781, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 778, 801, 805,
	324, 875, 799, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 876,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 796, 0, 618, 0, 457, 0, 0, 859, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 800,
	0, 412, 393, 872, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 857, 389,
	583, 616, 617, 508, 0, 871, 852, 854, 855, 858,
	862, 863, 864, 865, 866, 868, 870, 874, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 873,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 804,
	558, 559, 379, 380, 381, 382, 860, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 882, 856, 881, 883, 884,
	880, 885, 886, 867, 759, 0, 811, 878, 877, 879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 766, 287, 514, 361, 163, 404, 335, 579,
	580, 0, 0, 845, 818, 819, 820, 756, 821, 815,
	816, 757, 817, 846, 809, 842, 843, 785, 812, 822,
	841, 823, 844, 847, 848, 887, 888, 829, 813, 251,
	889, 826, 849, 840, 839, 824, 810, 850, 851, 792,
	787, 827, 828, 814, 833, 834, 835, 758, 806, 807,
	808, 830, 831, 788, 789, 790, 791, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 836, 626, 427, 0, 832, 629, 630,
	627, 365, 414, 432, 421, 802, 641, 504, 505, 642,
	615, 0, 751, 0, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 330, 4038, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 793, 555, 506, 423, 375, 573, 572, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 783, 838,
	837, 770, 780, 0, 0, 303, 223, 501, 621, 503,
	502, 771, 0, 772, 776, 779, 775, 773, 774, 0,
	853, 0, 0, 0, 0, 0, 0, 738, 750, 0,
	755, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 747, 748, 0, 0, 0, 0,
	803, 0, 749, 0, 0, 798, 777, 781, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 778, 801,
	805, 324, 875, 799, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	876, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 796, 0, 618, 0, 457, 0, 0, 859,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	800, 0, 412, 393, 872, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 857,
	389, 583, 616, 617, 508, 0, 871, 852, 854, 855,
	858, 862, 863, 864, 865, 866, 868, 870, 874, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	873, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	804, 558, 559, 379, 380, 381, 382, 860, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 882, 856, 881, 883,
	884, 880, 885, 886, 867, 759, 0, 811, 878, 877,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 766, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 845, 818, 819, 820, 756, 821,
	815, 816, 757, 817, 846, 809, 842, 843, 785, 812,
	822, 841, 823, 844, 847, 848, 887, 888, 829, 813,
	251, 889, 826, 849, 840, 839, 824, 810, 850, 851,
	792, 787, 827, 828, 814, 833, 834, 835, 758, 806,
	807, 808, 830, 831, 788, 789, 790, 791, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 836, 626, 427, 0, 832, 629,
	630, 627, 365, 414, 432, 421, 802, 641, 504, 505,
	642, 615, 0, 751, 0, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 793, 555, 506, 423, 375, 573, 572,
	0, 0, 861, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 783,
	838, 837, 770, 780, 0, 0, 303, 223, 501, 621,
	503, 502, 771, 0, 772, 776, 779, 775, 773, 774,
	0, 853, 0, 0, 0, 0, 0, 0, 738, 750,
	0, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 748, 0, 0, 0,
	0, 803, 0, 749, 0, 0, 798, 777, 781, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 778,
	801, 805, 324, 875, 799, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 876, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 796, 0, 618, 0, 457, 0, 0,
	859, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 800, 0, 412, 393, 872, 3924, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	857, 389, 583, 616, 617, 508, 0, 871, 852, 854,
	855, 858, 862, 863, 864, 865, 866, 868, 870, 874,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 873, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 804, 558, 559, 379, 380, 381, 382, 860, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 882, 856, 881,
	883, 884, 880, 885, 886, 867, 759, 0, 811, 878,
	877, 879, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 766, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 845, 818, 819, 820, 756,
	821, 815, 816, 757, 817, 846, 809, 842, 843, 785,
	812, 822, 841, 823, 844, 847, 848, 887, 888, 829,
	813, 251, 889, 826, 849, 840, 839, 824, 810, 850,
	851, 792, 787, 827, 828, 814, 833, 834, 835, 758,
	806, 807, 808, 830, 831, 788, 789, 790, 791, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 836, 626, 427, 0, 832,
	629, 630, 627, 365, 414, 432, 421, 802, 641, 504,
	505, 642, 615, 0, 751, 0, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 330, 1846, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 793, 555, 506, 423, 375, 573,
	572, 0, 0, 861, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	783, 838, 837, 770, 780, 0, 0, 303, 223, 501,
	621, 503, 502, 771, 0, 772, 776, 779, 775, 773,
	774, 0, 853, 0, 0, 0, 0, 0, 0, 738,
	750, 0, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 748, 0, 0,
	0, 0, 803, 0, 749, 0, 0, 798, 777, 781,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	778, 801, 805, 324, 875, 799, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 876, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 796, 0, 618, 0, 457, 0,
	0, 859, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 800, 0, 412, 393, 872, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 857, 389, 583, 616, 617, 508, 0, 871, 852,
	854, 855, 858, 862, 863, 864, 865, 866, 868, 870,
	874, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 873, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 804, 558, 559, 379, 380, 381, 382, 860,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 882, 856,
	881, 883, 884, 880, 885, 886, 867, 759, 0, 811,
	878, 877, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 766, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 845, 818, 819, 820,
	756, 821, 815, 816, 757, 817, 846, 809, 842, 843,
	785, 812, 822, 841, 823, 844, 847, 848, 887, 888,
	829, 813, 251, 889, 826, 849, 840, 839, 824, 810,
	850, 851, 792, 787, 827, 828, 814, 833, 834, 835,
	758, 806, 807, 808, 830, 831, 788, 789, 790, 791,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 836, 626, 427, 0,
	832, 629, 630, 627, 365, 414, 432, 421, 802, 641,
	504, 505, 642, 615, 0, 751, 0, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	754, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 793, 555, 506, 423, 375,
	573, 572, 0, 0, 861, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 783, 838, 837, 770, 780, 0, 0, 303, 223,
	501, 621, 503, 502, 771, 0, 772, 776, 779, 775,
	773, 774, 0, 853, 0, 0, 0, 0, 0, 0,
	738, 750, 0, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 748, 1560,
	0, 0, 0, 803, 0, 749, 0, 0, 798, 777,
	781, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 778, 801, 805, 324, 875, 799, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 876, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 796, 0, 618, 0, 457,
	0, 0, 859, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 800, 0, 412, 393, 872, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 857, 389, 583, 616, 617, 508, 0, 871,
	852, 854, 855, 858, 862, 863, 864, 865, 866, 868,
	870, 874, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 873, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 804, 558, 559, 379, 380, 381, 382,
	860, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 882,
	856, 881, 883, 884, 880, 885, 886, 867, 759, 0,
	811, 878, 877, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 766, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 845, 818, 819,
	820, 756, 821, 815, 816, 757, 817, 846, 809, 842,
	843, 785, 812, 822, 841, 823, 844, 847, 848, 887,
	888, 829, 813, 251, 889, 826, 849, 840, 839, 824,
	810, 850, 851, 792, 787, 827, 828, 814, 833, 834,
	835, 758, 806, 807, 808, 830, 831, 788, 789, 790,
	791, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 836, 626, 427,
	0, 832, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 802, 751, 0, 2233, 0,
	0, 0, 0, 0, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 793, 555, 506, 423, 375, 573, 572, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 783, 838,
	837, 770, 780, 0, 0, 303, 223, 501, 621, 503,
	502, 771, 0, 772, 776, 779, 775, 773, 774, 0,
	853, 0, 0, 0, 0, 0, 0, 738, 750, 0,
	755, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 747, 748, 0, 0, 0, 0,
	803, 0, 749, 0, 0, 798, 777, 781, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 778, 801,
	805, 324, 875, 799, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	876, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 796, 0, 618, 0, 457, 0, 0, 859,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	800, 0, 412, 393, 872, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 857,
	389, 583, 616, 617, 508, 0, 871, 852, 854, 855,
	858, 862, 863, 864, 865, 866, 868, 870, 874, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	873, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	804, 558, 559, 379, 380, 381, 382, 860, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 882, 856, 881, 883,
	884, 880, 885, 886, 867, 759, 0, 811, 878, 877,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 766, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 845, 818, 819, 820, 756, 821,
	815, 816, 757, 817, 846, 809, 842, 843, 785, 812,
	822, 841, 823, 844, 847, 848, 887, 888, 829, 813,
	251, 889, 826, 849, 840, 839, 824, 810, 850, 851,
	792, 787, 827, 828, 814, 833, 834, 835, 758, 806,
	807, 808, 830, 831, 788, 789, 790, 791, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 836, 626, 427, 0, 832, 629,
	630, 627, 365, 414, 432, 421, 802, 641, 504, 505,
	642, 615, 0, 751, 0, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 793, 555, 506, 423, 375, 573, 572,
	0, 0, 861, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 783,
	838, 837, 770, 780, 0, 0, 303, 223, 501, 621,
	503, 502, 771, 0, 772, 776, 779, 775, 773, 774,
	0, 853, 0, 0, 0, 0, 0, 0, 738, 750,
	0, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 748, 1839, 0, 0,
	0, 803, 0, 749, 0, 0, 798, 777, 781, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 778,
	801, 805, 324, 875, 799, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 876, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 796, 0, 618, 0, 457, 0, 0,
	859, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 800, 0, 412, 393, 872, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	857, 389, 583, 616, 617, 508, 0, 871, 852, 854,
	855, 858, 862, 863, 864, 865, 866, 868, 870, 874,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 873, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 804, 558, 559, 379, 380, 381, 382, 860, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 882, 856, 881,
	883, 884, 880, 885, 886, 867, 759, 0, 811, 878,
	877, 879, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 766, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 845, 818, 819, 820, 756,
	821, 815, 816, 757, 817, 846, 809, 842, 843, 785,
	812, 822, 841, 823, 844, 847, 848, 887, 888, 829,
	813, 251, 889, 826, 849, 840, 839, 824, 810, 850,
	851, 792, 787, 827, 828, 814, 833, 834, 835, 758,
	806, 807, 808, 830, 831, 788, 789, 790, 791, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 836, 626, 427, 0, 832,
	629, 630, 627, 365, 414, 432, 421, 802, 641, 504,
	505, 642, 615, 0, 751, 0, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 793, 555, 506, 423, 375, 573,
	572, 0, 0, 861, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	783, 838, 837, 770, 780, 0, 0, 303, 223, 501,
	621, 503, 502, 771, 0, 772, 776, 779, 775, 773,
	774, 0, 853, 0, 0, 0, 0, 0, 0, 738,
	750, 0, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 748, 0, 0,
	0, 0, 803, 0, 749, 0, 0, 798, 777, 781,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	778, 801, 805, 324, 875, 799, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 876, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 796, 0, 618, 0, 457, 0,
	0, 859, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 800, 0, 412, 393, 872, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 857, 389, 583, 616, 617, 508, 0, 871, 852,
	854, 855, 858, 862, 863, 864, 865, 866, 868, 870,
	874, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 873, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 804, 558, 559, 379, 380, 381, 382, 860,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 882, 856,
	881, 883, 884, 880, 885, 886, 867, 759, 0, 811,
	878, 877, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 766, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 845, 818, 819, 820,
	756, 821, 815, 816, 757, 817, 846, 809, 842, 843,
	785, 812, 822, 841, 823, 844, 847, 848, 887, 888,
	829, 813, 251, 889, 826, 849, 840, 839, 824, 810,
	850, 851, 792, 787, 827, 828, 814, 833, 834, 835,
	758, 806, 807, 808, 830, 831, 788, 789, 790, 791,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 836, 626, 427, 0,
	832, 629, 630, 627, 365, 414, 432, 421, 802, 641,
	504, 505, 642, 615, 0, 751, 0, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	754, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 793, 555, 506, 423, 375,
	573, 572, 0, 0, 861, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 783, 838, 837, 770, 780, 0, 0, 303, 223,
	501, 621, 503, 502, 771, 0, 772, 776, 779, 775,
	773, 774, 0, 853, 0, 0, 0, 0, 0, 0,
	738, 750, 0, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 748, 0,
	0, 0, 0, 803, 0, 749, 0, 0, 798, 777,
	781, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 778, 801, 805, 324, 875, 799, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 876, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 796, 0, 618, 0, 457,
	0, 0, 859, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 800, 0, 412, 393, 872, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 857, 389, 583, 616, 617, 508, 0, 871,
	852, 854, 855, 858, 862, 863, 864, 865, 866, 868,
	870, 874, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 873, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 804, 558, 559, 379, 380, 381, 382,
	860, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 882,
	856, 881, 883, 884, 880, 885, 886, 867, 759, 0,
	811, 878, 877, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 766, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 845, 818, 819,
	820, 756, 821, 815, 816, 757, 817, 846, 809, 842,
	843, 785, 812, 822, 841, 823, 844, 847, 848, 887,
	888, 829, 813, 251, 889, 826, 849, 840, 839, 824,
	810, 850, 851, 792, 787, 827, 828, 814, 833, 834,
	835, 758, 806, 807, 808, 830, 831, 788, 789, 790,
	791, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 836, 626, 427,
	0, 3502, 629, 3503, 3504, 365, 414, 432, 421, 802,
	641, 504, 505, 642, 615, 0, 751, 0, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 754, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 793, 555, 506, 423,
	375, 573, 572, 0, 0, 861, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 783, 838, 837, 770, 780, 0, 0, 303,
	223, 501, 621, 503, 502, 2706, 0, 2707, 776, 779,
	775, 773, 774, 0, 853, 0, 0, 0, 0, 0,
	0, 738, 750, 0, 755, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 748,
	0, 0, 0, 0, 803, 0, 749, 0, 0, 798,
	777, 781, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 778, 801, 805, 324, 875, 799, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 876, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 796, 0, 618, 0,
	457, 0, 0, 859, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 800, 0, 412, 393, 872, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 857, 389, 583, 616, 617, 508, 0,
	871, 852, 854, 855, 858, 862, 863, 864, 865, 866,
	868, 870, 874, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 873, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 804, 558, 559, 379, 380, 381,
	382, 860, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	882, 856, 881, 883, 884, 880, 885, 886, 867, 759,
	0, 811, 878, 877, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 766, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 845, 818,
	819, 820, 756, 821, 815, 816, 757, 817, 846, 809,
	842, 843, 785, 812, 822, 841, 823, 844, 847, 848,
	887, 888, 829, 813, 251, 889, 826, 849, 840, 839,
	824, 810, 850, 851, 792, 787, 827, 828, 814, 833,
	834, 835, 758, 806, 807, 808, 830, 831, 788, 789,
	790, 791, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 836, 626,
	427, 0, 832, 629, 630, 627, 365, 414, 432, 421,
	802, 641, 504, 505, 642, 615, 0, 751, 0, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 1704, 0,
	0, 0, 754, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 793, 555, 506,
	423, 375, 573, 572, 0, 0, 861, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 783, 838, 837, 770, 780, 0, 0,
	303, 223, 501, 621, 503, 502, 771, 0, 772, 776,
	779, 775, 773, 774, 0, 853, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
	748, 0, 0, 0, 0, 803, 0, 749, 0, 0,
	798, 777, 781, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 778, 801, 805, 324, 875, 799, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 876, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 796, 0, 618,
	0, 457, 0, 0, 859, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 800, 0, 412, 393, 872,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 1705, 1706, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 857, 389, 583, 616, 617, 508,
	0, 871, 852, 854, 855, 858, 862, 863, 864, 865,
	866, 868, 870, 874, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 873, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 804, 558, 559, 379, 380,
	381, 382, 860, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 882, 856, 881, 883, 884, 880, 885, 886, 867,
	759, 0, 811, 878, 877, 879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 766, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 845,
	818, 819, 820, 756, 821, 815, 816, 757, 817, 846,
	809, 842, 843, 785, 812, 822, 841, 823, 844, 847,
	848, 887, 888, 829, 813, 251, 889, 826, 849, 840,
	839, 824, 810, 850, 851, 792, 787, 827, 828, 814,
	833, 834, 835, 758, 806, 807, 808, 830, 831, 788,
	789, 790, 791, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 836,
	626, 427, 0, 832, 629, 630, 627, 365, 414, 432,
	421, 802, 641, 504, 505, 642, 615, 0, 751, 0,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 793, 555,
	506, 423, 375, 573, 572, 0, 0, 861, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 783, 838, 837, 770, 780, 0,
	0, 303, 223, 501, 621, 503, 502, 771, 0, 772,
	776, 779, 775, 773, 774, 0, 853, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 748, 0, 0, 0, 0, 803, 0, 749, 0,
	0, 798, 777, 781, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 778, 801, 805, 324, 875, 799,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 876, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 796, 0,
	618, 0, 457, 0, 0, 859, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 800, 0, 412, 393,
	872, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 857, 389, 583, 616, 617,
	508, 0, 871, 852, 854, 855, 858, 862, 863, 864,
	865, 866, 868, 870, 874, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 873, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 804, 558, 559, 379,
	380, 381, 382, 860, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 882, 856, 881, 883, 884, 880, 885, 886,
	867, 759, 0, 811, 878, 877, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 766,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	845, 818, 819, 820, 756, 821, 815, 816, 757, 817,
	846, 809, 842, 843, 785, 812, 822, 841, 823, 844,
	847, 848, 887, 888, 829, 813, 251, 889, 826, 849,
	840, 839, 824, 810, 850, 851, 792, 787, 827, 828,
	814, 833, 834, 835, 758, 806, 807, 808, 830, 831,
	788, 789, 790, 791, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	836, 626, 427, 0, 832, 629, 630, 627, 365, 414,
	432, 421, 802, 641, 504, 505, 642, 615, 0, 751,
	0, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 754, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 793,
	555, 506, 423, 375, 573, 572, 0, 0, 861, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 783, 838, 837, 770, 780,
	0, 0, 303, 223, 501, 621, 503, 502, 771, 0,
	772, 776, 779, 775, 773, 774, 0, 853, 0, 0,
	0, 0, 0, 0, 738, 750, 0, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 748, 0, 0, 0, 0, 803, 0, 749,
	0, 0, 798, 777, 781, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 778, 801, 805, 324, 875,
	799, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 876, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 796,
	0, 618, 0, 457, 0, 0, 859, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 800, 0, 412,
	393, 872, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 857, 389, 583, 616,
	617, 508, 0, 871, 852, 854, 855, 858, 862, 863,
	864, 865, 866, 868, 870, 874, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 873, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 804, 558, 559,
	379, 380, 381, 382, 860, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 882, 856, 881, 883, 884, 880, 885,
	886, 867, 759, 0, 811, 878, 877, 879, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	766, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 845, 818, 819, 820, 756, 821, 815, 816, 757,
	817, 846, 809, 842, 843, 785, 812, 822, 841, 823,
	844, 847, 848, 887, 888, 829, 813, 251, 889, 826,
	849, 840, 839, 824, 810, 850, 851, 792, 787, 827,
	828, 814, 833, 834, 835, 758, 806, 807, 808, 830,
	831, 788, 789, 790, 791, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 836, 626, 427, 0, 832, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 0,
	751, 200, 61, 191, 162, 0, 0, 0, 0, 0,
	0, 391, 0, 519, 552, 541, 625, 507, 0, 192,
	0, 0, 0, 0, 0, 0, 183, 0, 330, 0,
	193, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 136,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 161, 189, 198, 190, 120, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 215, 0, 0, 0,
	428, 0, 0, 357, 188, 182, 181, 473, 0, 412,
	393, 227, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 593, 594, 595, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 452, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 218, 565, 568, 498, 228, 0, 562, 577,
	535, 576, 229, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 134,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 226, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 233, 298, 440, 234,
	0, 287, 514, 361, 163, 404, 335, 579, 580, 58,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 230, 45, 216, 219, 221,
	220, 0, 59, 563, 575, 609, 5, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 139, 231, 504, 505, 232, 615, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 136, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 2383, 2386, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	2387, 457, 0, 0, 0, 2382, 0, 2381, 428, 2379,
	2384, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 2385, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 163, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1306, 0,
	0, 222, 0, 0, 770, 780, 0, 0, 303, 223,
	501, 621, 503, 502, 771, 0, 772, 776, 779, 775,
	773, 774, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 777,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 778, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 200, 61, 191, 162, 0,
	0, 0, 0, 0, 0, 391, 667, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 674,
	0, 0, 0, 0, 0, 0, 673, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 671,
	672, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 668, 670,
	308, 480, 405, 682, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 163, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 1114, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 2544, 2547, 2548, 2549, 2550, 2551,
	2552, 0, 2557, 2553, 2554, 2555, 2556, 0, 2539, 2540,
	2541, 2542, 1097, 2523, 2545, 0, 2524, 387, 2525, 2526,
	2527, 2528, 1101, 2529, 2530, 2531, 2532, 2533, 2536, 2537,
	2534, 2535, 2543, 399, 364, 400, 347, 377, 376, 378,
	1125, 1127, 1129, 1131, 1134, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 2538,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 2546, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 2383, 2386,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 2387, 457, 0, 0, 0, 2382, 0, 2381,
	428, 2379, 2384, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 2385, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 2404, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	2403, 457, 0, 0, 0, 2409, 2406, 2408, 428, 0,
	2407, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 2401, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 2404, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 2403, 457,
	0, 0, 0, 2409, 2406, 2408, 428, 0, 2407, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 2099, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 2100, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 1235, 1236, 1237, 1234, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 200, 641, 504,
	505, 642, 615, 0, 0, 0, 0, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 136, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 2149,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	163, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 200,
	641, 504, 505, 642, 615, 0, 0, 0, 0, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 136, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 2135, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 163, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 1029, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 1036, 1037, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1040, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 1023, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 1010, 455, 297, 1009,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 1027, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 1028, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 1031, 558, 559, 379, 380, 381, 382,
	341, 584, 1026, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 1038, 1024, 1034, 1025, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 1035, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 1022, 414, 432, 421, 200,
	641, 504, 505, 642, 615, 0, 0, 0, 0, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 136, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2031, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 163, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 1036, 1037, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1040, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 1010, 455, 297, 1009,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 1038, 2052, 1034, 2053, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 1035, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 2929, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 2932, 0, 0,
	0, 2931, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 1526, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	1524, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1522, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 1520,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 1524, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1522, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3989, 0, 222, 838, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 1524, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1522, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	2448, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 959, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	1524, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1734, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 2485, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 2487, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 2099, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 2100, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 3141, 3143, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 2508, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 1524, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 655,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 654, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 838, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3966, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 3734, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 3867, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1748, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3749, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 3661, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 3173, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2031, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	3380, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3034,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 1524, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	2487, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	2848, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2170, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 2605, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2566, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	2564, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 2339, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 1885, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 2013, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 1524, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 1918, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 1553, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 655, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 665, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 959, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 0, 555, 506, 423, 375, 573, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 222,
	0, 0, 0, 0, 0, 0, 303, 223, 501, 621,
	503, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 0, 409, 328, 342, 325, 388, 0,
	444, 472, 324, 463, 0, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 488, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 0, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 0, 0, 618, 0, 457, 0, 0,
	0, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 473, 0, 412, 393, 644, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 0,
	0, 0, 469, 358, 359, 0, 337, 285, 286, 640,
	323, 389, 583, 616, 617, 508, 0, 570, 509, 518,
	315, 542, 554, 553, 385, 468, 0, 565, 568, 498,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 453, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 477, 558, 559, 379, 380, 381, 382, 341, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 0, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 235, 236, 237, 238, 239,
	240, 241, 242, 280, 243, 244, 245, 246, 247, 248,
	249, 252, 253, 254, 255, 256, 257, 258, 259, 582,
	250, 251, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 0, 0, 0, 281,
	282, 283, 284, 0, 0, 275, 276, 277, 278, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 623, 626, 427, 0, 628,
	629, 630, 627, 365, 414, 432, 421, 0, 641, 504,
	505, 642, 615, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 0, 555, 506, 423, 375, 573, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 303, 223, 501, 621, 503, 502,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 306,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 429, 1503, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 0, 444, 472,
	324, 463, 0, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 488,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 0, 0, 618, 0, 457, 0, 0, 0, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 473,
	0, 412, 393, 644, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 323, 389,
	583, 616, 617, 508, 0, 570, 509, 518, 315, 542,
	554, 553, 385, 468, 0, 565, 568, 498, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 453,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 477,
	558, 559, 379, 380, 381, 382, 341, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 274, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 0, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 235, 236, 237, 238, 239, 240, 241,
	242, 280, 243, 244, 245, 246, 247, 248, 249, 252,
	253, 254, 255, 256, 257, 258, 259, 582, 250, 251,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 0, 0, 0, 281, 282, 283,
	284, 0, 0, 275, 276, 277, 278, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 623, 626, 427, 0, 628, 629, 630,
	627, 365, 414, 432, 421, 0, 641, 504, 505, 642,
	615, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 0,
	555, 506, 423, 375, 573, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 0, 0, 0, 0,
	0, 0, 303, 223, 501, 621, 503, 502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	429, 1501, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 0, 444, 472, 324, 463,
	0, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 488, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 0,
	0, 618, 0, 457, 0, 0, 0, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 473, 0, 412,
	393, 644, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 323, 389, 583, 616,
	617, 508, 0, 570, 509, 518, 315, 542, 554, 553,
	385, 468, 0, 565, 568, 498, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 453, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 477, 558, 559,
	379, 380, 381, 382, 341, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	0, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 235, 236, 237, 238, 239, 240, 241, 242, 280,
	243, 244, 245, 246, 247, 248, 249, 252, 253, 254,
	255, 256, 257, 258, 259, 582, 250, 251, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 0, 0, 0, 281, 282, 283, 284, 0,
	0, 275, 276, 277, 278, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 623, 626, 427, 0, 628, 629, 630, 627, 365,
	414, 432, 421, 0, 641, 504, 505, 642, 615, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 0, 555, 506,
	423, 375, 573, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 222, 0, 0, 0, 0, 0, 0,
	303, 223, 501, 621, 503, 502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 0, 444, 472, 324, 463, 0, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 488, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 0, 0, 618,
	0, 457, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 473, 0, 412, 393, 644,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 733, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 323, 389, 583, 616, 617, 508,
	0, 570, 509, 518, 315, 542, 554, 553, 385, 468,
	0, 565, 568, 498, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 453, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 477, 558, 559, 379, 380,
	381, 382, 341, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 0, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 235,
	236, 237, 238, 239, 240, 241, 242, 280, 243, 244,
	245, 246, 247, 248, 249, 252, 253, 254, 255, 256,
	257, 258, 259, 582, 250, 251, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	0, 0, 0, 281, 282, 283, 284, 0, 0, 275,
	276, 277, 278, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 623,
	626, 427, 0, 628, 629, 630, 627, 365, 414, 432,
	421, 0, 641, 504, 505, 642, 615, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 0, 555, 506, 423, 375,
	573, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 0, 0, 0, 0, 303, 223,
	501, 621, 503, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 306, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 0, 444, 472, 324, 463, 0, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 488, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 0, 0, 618, 0, 457,
	0, 0, 0, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 473, 0, 412, 393, 644, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 690, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 323, 389, 583, 616, 617, 508, 0, 570,
	509, 518, 315, 542, 554, 553, 385, 468, 0, 565,
	568, 498, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 691, 599, 453, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 477, 558, 559, 379, 380, 381, 382,
	341, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	274, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 0, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 235, 236, 237,
	238, 239, 240, 241, 242, 280, 243, 244, 245, 246,
	247, 248, 249, 252, 253, 254, 255, 256, 257, 258,
	259, 582, 250, 251, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 0, 0,
	0, 281, 282, 283, 284, 0, 0, 275, 276, 277,
	278, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 623, 626, 427,
	0, 628, 629, 630, 627, 365, 414, 432, 421, 0,
	641, 504, 505, 642, 615, 712, 711, 718, 708, 0,
	0, 0, 0, 0, 0, 0, 0, 715, 716, 0,
	717, 721, 2000, 0, 702, 712, 711, 718, 708, 200,
	0, 0, 0, 0, 726, 0, 0, 715, 716, 0,
	717, 721, 0, 0, 702, 0, 0, 0, 0, 0,
	0, 3581, 0, 0, 726, 0, 0, 2003, 0, 0,
	2000, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 732, 0, 0, 0, 0, 731, 0, 0,
	0, 0, 0, 0, 0, 2003, 0, 0, 0, 730,
	196, 0, 732, 0, 0, 0, 0, 731, 0, 0,
	1977, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1993, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2000, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1993, 0, 0, 0,
	0, 0, 0, 0, 0, 703, 705, 704, 0, 0,
	2003, 0, 0, 0, 0, 0, 710, 0, 0, 0,
	0, 0, 0, 0, 0, 703, 705, 704, 714, 0,
	0, 0, 0, 0, 0, 729, 710, 0, 0, 0,
	1981, 0, 707, 0, 0, 0, 697, 0, 714, 0,
	0, 1987, 0, 0, 0, 729, 0, 0, 0, 0,
	0, 0, 707, 1977, 0, 0, 0, 0, 0, 0,
	0, 1975, 2009, 0, 0, 1976, 1978, 1980, 1981, 1982,
	1983, 1984, 1988, 1989, 1990, 1992, 1995, 1996, 1997, 1987,
	0, 0, 0, 0, 0, 0, 1985, 1994, 1986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2000, 1975,
	2009, 0, 0, 1976, 1978, 1980, 0, 1982, 1983, 1984,
	1988, 1989, 1990, 1992, 1995, 1996, 1997, 3726, 0, 0,
	0, 1993, 2001, 0, 1985, 1994, 1986, 0, 0, 0,
	0, 0, 0, 2003, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 709, 713, 719, 0, 720, 722,
	0, 0, 723, 724, 725, 0, 0, 727, 728, 0,
	2001, 0, 0, 0, 709, 713, 719, 1998, 720, 722,
	0, 0, 723, 724, 725, 0, 0, 727, 728, 0,
	0, 0, 0, 0, 1974, 0, 1977, 0, 0, 0,
	0, 1973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1981, 0, 1998, 0, 0, 0, 0,
	0, 0, 0, 0, 1987, 1991, 0, 0, 0, 0,
	0, 0, 1974, 0, 1979, 0, 0, 0, 0, 1973,
	0, 0, 0, 0, 1975, 2009, 0, 0, 1976, 1978,
	1980, 0, 1982, 1983, 1984, 1988, 1989, 1990, 1992, 1995,
	1996, 1997, 0, 1991, 1993, 0, 0, 0, 0, 1985,
	1994, 1986, 1979, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2001, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3585, 706, 0, 0, 1981, 0, 0, 0,
	1998, 0, 0, 0, 0, 0, 0, 1987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1974, 0, 0,
	0, 0, 0, 0, 1973, 0, 0, 1975, 2009, 0,
	3589, 1976, 1978, 1980, 0, 1982, 1983, 1984, 1988, 1989,
	1990, 1992, 1995, 1996, 1997, 0, 0, 0, 1991, 0,
	0, 0, 1985, 1994, 1986, 0, 0, 1979, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2001, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1998, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1974, 0, 0, 0, 0, 0, 0, 1973, 0, 0,
	0, 0, 0, 0, 0, 3589, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1991, 0, 0, 0, 0, 0, 0, 0, 0,
	1979, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3589,
}

var yyPact = [...]int{
	4040, -1000, -1000, -1000, -323, 14998, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 48942, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 470, 48942,
	-318, 30730, 47058, -1000, -1000, 2742, -1000, 47686, 16902, 48942,
	554, 544, 48942, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	966, -1000, 51454, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 900, 52092, 50826, 11203, -208, -1000, 1916, -26,
	2631, 488, -198, -202, 1150, 1169, 1144, 1144, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 249, 983, 48314, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 266, 251,
	961, 983, 21934, 115, 113, 1916, 478, -70, 234, -1000,
	1732, 4054, 203, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11203, 11203, 14998, -355, 14998, 11203,
	48942, 48942, -1000, -1000, -1000, -1000, -318, 47686, 900, 52092,
	11203, 2631, 488, -198, -202, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -70, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 113, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5078, -1000, 1637, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2384,
	3147, 1624, 2629, 839, 47058, 48942, -1000, 155, 839, -1000,
	-1000, -1000, 1916, 3606, -1000, 48942, 48942, 206, 1958, -1000,
	577, 540, 436, 402, 354, 1606, -1000, -1000, -1000, -1000,
	-1000, -1000, 731, 3562, -1000, 48942, 48942, 3161, 48942, -1000,
	2327, 773, -1000, 52112, 3330, 1473, 1016, 3183, -1000, -1000,
	3145, -1000, 387, 824, 734, 777, 465, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 312, -1000, 3424, -1000, -1000, 341,
	-1000, -1000, 329, -1000, -1000, -1000, 108, -1000, -1000, -1000,
	-1000, -1000, -1000, 5, -1000, -1000, 1202, 2237, 11203, 2538,
	-1000, 4001, 1663, -1000, -1000, -1000, 6780, 13727, 13727, 13727,
	13727, 48942, -1000, -1000, 2975, 11203, 3144, 3142, 3141, 3140,
	-1000, -1000, -1000, -1000, -1000, -1000, 3137, 1590, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2074, -1000, -1000,
	-1000, 14358, -1000, 3133, 3129, 3128, 3126, 3125, 3124, 3123,
	3119, 3113, 3111, 3110, 3107, 3106, 3105, 2823, 16264, 3089,
	2628, 2627, 3085, 3084, 3074, 2625, 3073, 3058, 3054, 2823,
	2823, 3053, 3050, 3049, 3048, 3046, 3045, 3043, 3042, 3037,
	3034, 3030, 3017, 3016, 3015, 3013, 3012, 3009, 3008, 3007,
	3004, 3003, 3001, 3000, 2999, 2988, 2987, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1480, -1000, 2985, 3572, 2895, -1000, 3403, 3397, 3386, 3369,
	-254, 2983, 2306, -1000, -1000, 111, 3561, 48942, -277, 48942,
	438, -78, -80, -84, -1000, -64, -1000, -1000, 1104, -1000,
	1092, -1000, 897, 897, 897, 48942, 48942, 229, 1058, 897,
	897, 897, 897, 897, 943, 897, 3453, 960, 956, 953,
	952, 897, -35, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1954, 1945, 3260, 1074, -1000, -1000, -1000, -1000, 1491, 48942,
	-1000, 2933, 438, -291, 1717, 1717, 3511, 3511, 3448, 816,
	812, 782, 1717, 600, -1000, 1873, 1873, 1873, 1873, 1717,
	526, 827, 3439, 3439, 121, 1873, 78, 1717, 1717, 78,
	1717, 1717, -1000, 1925, 272, -262, -1000, -1000, -1000, -1000,
	1873, 1873, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3419,
	3415, 900, 900, 48942, 900, 223, 48942, 900, 900, 900,
	48942, 916, -310, 53, 50198, 49570, 2402, 2327, 768, 760,
	1506, 1862, -1000, 1914, 48942, 48942, 1914, 1914, 25078, 24450,
	-1000, 48942, -1000, 3572, 2895, 2818, 1909, 2817, 2895, -92,
	438, 900, 900, 900, 900, 900, 321, 900, 900, 900,
	900, 900, 48942, 48942, 46430, 900, 900, 900, 900, 9304,
	9304, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14998, 2073, 2207, 202, -1, -301, 276, -1000, -1000, 48942,
	3311, 309, -1000, -1000, -1000, 2918, -1000, 2928, 2928, 2928,
	2928, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2928, 2928, 2932, 2982, -1000, -1000, 2927, 2927, 2927,
	2918, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2929, 2929, 2931, 2931,
	2929, 48942, -118, -1000, -1000, 11203, 48942, 3321, 426, 2981,
	839, -1000, -1000, 48942, 181, 428, 3572, 3318, 3439, 3514,
	-1000, -1000, 1588, 2303, 2622, -1000, 354, -1000, 564, 354,
	-1000, 636, 636, 1881, -1000, 1131, -1000, -1000, -1000, -1000,
	-1000, -1000, 48942, 5, 429, -1000, -1000, 2605, 2980, -1000,
	650, 1463, 1554, -1000, 281, 665, 39522, 2327, 39522, 48942,
	-1000, -1000, -1000, -1000, -1000, -1000, 105, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 336, -1000, 11203, 11203, 11203, 11203, 11203, -1000, 755,
	13096, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13727, 13727,
	13727, 13727, 13727, 13727, 13727, 13727, 13727, 13727, 13727, 13727,
	2972, 1981, 13727, 13727, 13727, 13727, 27590, 1909, 3508, 1496,
	317, 1663, 1663, 1663, 1663, 11203, -1000, 1984, 2237, 11203,
	11203, 11203, 11203, 33870, 48942, -1000, -1000, 4701, 11203, 11203,
	3741, 11203, 3364, 11203, 11203, 11203, 2815, 5509, 48942, 11203,
	-1000, 2814, 2813, -1000, -1000, 2068, 11203, -1000, -1000, 11203,
	-1000, -1000, 11203, 13727, 11203, -1000, 11203, 11203, 11203, -1000,
	-1000, 1165, 3364, 3364, 3364, 1960, 11203, 11203, 3364, 3364,
	3364, 1902, 3364, 3364, 3364, 3364, 3364, 3364, 3364, 3364,
	3364, 3364, 3364, 2811, 2805, 2804, 10572, 3439, -208, -1000,
	8673, 3318, 3439, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -258, 2978, 48942, 2621, 2619, -333, 188,
	467, 48942, 1184, -1000, -1000, 48942, 2296, 48942, 2293, 62,
	1145, 1096, 1109, -1000, 48942, 1992, 48942, 48942, 3356, -1000,
	2977, 48942, 897, 897, 897, -1000, 44546, 39522, 48942, 48942,
	2327, 48942, 48942, 48942, 897, 897, 897, 897, 48942, -1000,
	3276, 39522, 3271, 916, -1000, 48942, 1491, 3355, 48942, -1000,
	-1000, -1000, -1000, 3511, 13727, 13727, -1000, -1000, 11203, -1000,
	45802, 1873, 1717, 1717, -1000, -1000, 48942, -1000, -1000, -1000,
	1873, 48942, 1873, 1873, 3511, 1873, -1000, -1000, -1000, 1717,
	1717, -1000, -1000, 11203, -1000, -1000, 1873, 1873, -1000, -1000,
	3511, 48942, 103, 3511, 3511, 86, -1000, -1000, -1000, 1717,
	48942, 48942, 897, 48942, -1000, 48942, 48942, -1000, -1000, 48942,
	48942, 4474, 48942, 44546, 45174, 3407, -1000, 39522, 48942, 48942,
	1472, -1000, 938, 37010, -1000, 48942, 1416, -1000, 40, -1000,
	60, 53, 1914, 53, 1914, 935, -1000, 626, 761, 23194,
	575, 39522, 6140, -1000, -1000, 1914, 1914, 6140, 6140, 1674,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1461, -1000, 279,
	3439, -1000, -1000, -1000, -1000, -1000, 2284, -1000, 48942, 44546,
	39522, 2327, 48942, 900, 48942, 48942, 48942, 48942, 48942, -1000,
	2976, 1578, -1000, 3328, 48942, 48942, 48942, 48942, 1444, -1000,
	-1000, 20042, 1576, 1444, -1000, 1987, -1000, 11203, 14998, -233,
	11203, 14998, 14998, 11203, 14998, -1000, 11203, 306, -1000, -1000,
	-1000, -1000, 2283, -1000, 2278, -1000, -1000, -1000, -1000, -1000,
	2615, 2615, -1000, 2275, -1000, -1000, -1000, -1000, 2269, -1000,
	-1000, 2267, -1000, -1000, -1000, -1000, -147, 2802, 1202, -1000,
	2614, 3182, -209, -1000, 21306, 48942, 48942, 426, -337, 1944,
	1943, 1940, -1000, -209, -1000, 20674, 48942, 3439, -1000, -212,
	3318, 11203, 48942, -1000, 3443, -1000, -1000, 354, -1000, -1000,
	-1000, 636, 439, -1000, -1000, -1000, -1000, -1000, -1000, 1575,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	457, -72, -73, 1456, -1000, 48942, -1000, -1000, 281, 39522,
	41406, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 268, -1000,
	-1000, 192, -1000, 934, 263, 1880, -1000, -1000, 248, 220,
	211, 994, 2237, -1000, 1996, 1996, 2006, -1000, 729, -1000,
	-1000, -1000, -1000, 2975, -1000, -1000, -1000, 2082, 3035, -1000,
	1928, 1928, 1678, 1678, 1678, 1678, 1678, 2281, 2281, -1000,
	-1000, -1000, 6780, 2972, 13727, 13727, 13727, 13727, 975, 975,
	3669, 3267, -1000, -1000, -1000, -1000, 11203, 175, 1974, -1000,
	11203, 2726, 1826, 2618, 1753, 1879, -1000, 2918, 11203, 1573,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2800, 2799, 2537, 3560, 2798, 11203, -1000, -1000, 1877, 1871,
	1870, -1000, 2330, 9941, -1000, -1000, -1000, 2797, 1567, 2784,
	-1000, -1000, -1000, 2783, 1867, 1353, 2782, 1833, 2777, 2776,
	2774, 2773, 1455, 11203, 11203, 11203, 11203, 2769, 1866, 1865,
	11203, 11203, 11203, 11203, 2768, 11203, 11203, 11203, 11203, 11203,
	11203, 11203, 11203, 11203, 11203, 48942, 116, 116, 116, 1432,
	1429, -1000, -1000, 1827, -1000, 2237, -1000, -1000, 3318, -1000,
	2971, 2266, 1428, -1000, -1000, -315, 2512, 48942, 48942, 174,
	48942, 2610, -281, 48942, -1000, -1000, 2609, -1000, -1000, -1000,
	1138, 1083, 1101, 2608, 3326, 3442, 896, 48942, 1274, 2970,
	48942, 48942, 48942, 296, -1000, -1000, 1445, -1000, 263, -23,
	557, 1222, 3160, 3531, -122, 48942, 48942, 48942, 48942, 3351,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43918, -1000,
	2965, 1791, -1000, -1000, 1663, 1663, 2237, 3159, 48942, 48942,
	3511, 3511, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1873,
	3511, 3511, 1711, 1717, 1873, -1000, -1000, 1873, -337, -1000,
	1873, -1000, -337, 1563, -337, 48942, -1000, -1000, -1000, 3350,
	2933, 1427, -1000, -1000, -1000, 3512, 1564, 879, 879, 1117,
	787, 3510, 18786, -1000, 1762, 1182, 930, 3295, 368, -1000,
	1762, -144, 846, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
	713, 703, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
	1762, 1762, 1762, 1154, 1762, 1762, 1762, 1762, 1762, -1000,
	1762, 2960, 546, -1000, -1000, -1000, -1000, -1000, -1000, 795,
	624, 282, 3402, 433, -1000, 421, 1445, 343, 3396, 456,
	48942, 48942, 3796, 1363, -1000, -1000, -1000, -1000, -1000, 28218,
	28218, 22566, 28218, -1000, 214, 1914, 53, 52, -1000, -1000,
	1416, 6140, 1416, 6140, 2265, -1000, -1000, 929, -1000, -1000,
	1222, -1000, 48942, 48942, -1000, -1000, 2951, 1938, -1000, -1000,
	16264, -1000, 6140, 6140, -1000, -1000, 30102, 48942, -1000, -9,
	-1000, 12, 3318, -1000, 1213, -1000, -1000, 1409, 1222, 3181,
	48942, 1213, 1213, 1213, -1000, -1000, 17530, 48942, 48942, -1000,
	-1000, -1000, -1000, 3511, 9304, -1000, 37010, -1000, -1000, 43290,
	-1000, 42662, 3511, 1969, -1000, 14998, 2192, 199, -1000, 265,
	-305, 198, 2167, 194, 2237, -1000, -1000, 2766, 2762, 1790,
	-1000, 1786, 2758, 1778, 1771, 2263, -1000, 68, -1000, 3313,
	1224, -1000, 2947, -1000, 1768, 3255, -1000, 1405, -1000, 1936,
	1752, -1000, -1000, -1000, 11203, 42034, 11203, 1224, 1748, 3249,
	1405, 3318, 2607, -1000, 1403, -1000, 2273, 1561, 200, -1000,
	-1000, -1000, 48942, 900, 2605, 1746, 41406, 1263, -1000, 927,
	1556, 1544, -1000, 39522, 348, 39522, -1000, 39522, -1000, -1000,
	415, -1000, 48942, 3316, -1000, -1000, -1000, 2512, 1932, -336,
	48942, -1000, -1000, -1000, -1000, -1000, 1734, -1000, 975, 975,
	3669, 3005, -1000, 13727, -1000, 13727, 3496, -1000, 1967, -1000,
	11203, 2187, 4986, 11203, 4986, 1615, 26334, 33870, -106, 3334,
	3491, 48942, -1000, -1000, 11203, 11203, -1000, 3437, -1000, -1000,
	-1000, -1000, 11203, 11203, 2322, -1000, 48942, -1000, -1000, -1000,
	-1000, 26334, -1000, 13727, -1000, -1000, -1000, -1000, 11203, 1462,
	1462, 3266, 1727, 116, 116, 116, 3233, 3173, 3167, 1719,
	116, 3135, 3087, 3051, 3010, 2967, 2885, 2830, 2780, 2763,
	2705, 1704, -1000, 2946, -1000, -1000, 2113, 12465, 8673, -1000,
	-1000, 322, 1393, 2262, 2601, 139, -1000, 1926, -1000, 2596,
	48942, 48942, 1176, -1000, 48942, 3529, -1000, -1000, -1000, -1000,
	1081, 2594, -1000, 486, 2092, 217, 323, 2757, 1374, -1000,
	-1000, 48942, -1000, -1000, -1000, 17530, 2933, 2945, 2933, 156,
	1762, 630, 39522, 757, -1000, 48942, 2076, 1923, 3179, 793,
	3309, 48942, 2943, 396, 2942, 2941, 3349, 534, 5219, 48942,
	1345, -1000, 1541, 4054, -1000, 48942, -1000, 2327, -1000, 1717,
	-1000, -1000, 3511, -1000, -1000, 11203, 11203, 3511, 1717, 1717,
	-1000, 1873, -1000, 48942, -1000, -337, 534, 5219, 3341, 4700,
	700, 2611, -1000, 48942, -1000, -1000, -1000, 780, -1000, 1075,
	897, 48942, 2028, 1075, 2025, 2940, -1000, -1000, 48942, 48942,
	48942, 48942, -1000, -1000, 48942, -1000, 48942, 48942, 48942, 48942,
	48942, 40778, -1000, 48942, 48942, -1000, 48942, 2021, 48942, 2016,
	3546, -1000, 1762, 1762, 1037, -1000, -1000, 654, -1000, 40778,
	2259, 2256, 2241, 2238, 2589, 2588, 2582, 1762, 1762, 2235,
	2571, 40150, 2570, 1236, 2234, 2231, 2230, 2277, 2554, 1313,
	-1000, 2550, 2255, 2245, 2194, 48942, 2939, 2463, 536, -1000,
	-1000, 2092, 156, 1762, 424, 48942, 1922, 1920, 630, 590,
	556, -24, 23822, -1000, -1000, -1000, 48942, 37010, 37010, 37010,
	37010, 37010, -1000, 3221, 3198, 3215, -1000, 3202, 3201, 3224,
	3056, 48942, 37010, 2933, -1000, 40150, -1000, -1000, -1000, 1909,
	1702, 3568, 1084, 11203, 6140, -1000, -1000, 21, 26, -1000,
	-1000, -1000, -1000, 39522, 2540, 575, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3438, 48942, 48942, 822, 2751, 1373, -1000,
	-1000, -1000, 5219, 2928, 2928, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2928, 2928, 2932, -1000, -1000, 2927,
	2927, 2927, 2918, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2929, 2929, 2931, 2931, 2929, -1000, -1000,
	3498, -1000, 1364, -1000, -1000, 1540, -1000, 3498, 1982, -324,
	14998, 1971, 1961, -1000, 11203, 14998, 11203, -237, 407, -244,
	-1000, -1000, -1000, 2539, -1000, -1000, -1000, 2229, -1000, 2217,
	-1000, 183, 187, 2015, -209, 8673, 427, 48942, -209, 48942,
	8673, -1000, 48942, 169, -350, -352, 163, 420, -209, 3438,
	68, 11203, 3278, -1000, -1000, 48942, 2188, -1000, -1000, -1000,
	3528, 39522, 2327, 1693, 38894, -1000, 338, -1000, 267, 602,
	2534, -1000, 949, 137, 2533, 2512, -1000, -1000, -1000, -1000,
	13727, 1663, -1000, -1000, -1000, 2237, 11203, 2750, -1000, 1066,
	1066, 2524, 2749, 2746, -1000, 2928, 2928, -1000, 2918, 2927,
	2918, 1066, 1066, 2744, -1000, 2917, -1000, 3334, -1000, 2473,
	2699, -1000, 2656, 2651, 11203, -1000, 2740, 2963, 1401, -52,
	-175, 116, 116, -1000, -1000, -1000, -1000, 116, 116, 116,
	116, -1000, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 844, -87, -266, -88, -272, -1000, 2739,
	1337, -1000, -1000, -1000, -1000, -1000, 3741, 1317, 569, 569,
	2512, 2511, -1000, 922, 2509, 1136, 48942, 2506, -292, -1000,
	2504, -1000, -1000, 48942, 2503, -1000, 621, 48942, 48942, 2494,
	2493, 1274, 5219, 2738, 3340, 18158, 3339, 2363, -1000, -1000,
	-1000, 29474, 590, -1000, -1000, -1000, 756, 365, 2185, 574,
	-1000, 48942, 582, 3268, 1919, 2492, 48942, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3309, -1000, 993, 504, 35754, 15636,
	-1000, 416, 48942, -1000, 18158, 18158, 416, 508, 1911, -1000,
	839, 1311, 152, 37010, 48942, -1000, 36382, 2737, -1000, 1222,
	3511, -1000, 2237, 2237, -337, 3511, 3511, 1717, -1000, -1000,
	508, -1000, 416, -1000, 1595, 19414, 583, 532, 523, -1000,
	733, -1000, -1000, 835, 3287, 5219, -1000, 48942, -1000, 48942,
	-1000, 48942, 48942, 897, 11203, 3287, 48942, 919, -1000, 1193,
	494, 487, 855, 855, 1307, -1000, 3334, -1000, -1000, 1271,
	-1000, -1000, -1000, -1000, 48942, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26334, 26334, 3392, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2490, 2489,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 48942,
	1683, -1000, 1915, 2183, 2488, 2363, 29474, 1910, 1914, 2487,
	2480, 590, -1000, 2478, 2477, 2076, 1901, 948, 48942, -1000,
	1215, 48942, 48942, -1000, 1351, -1000, 1900, 3151, 3178, 3151,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3204, -1000, 3186,
	-1000, -1000, -1000, 1351, -1000, -1000, -1000, -1000, -1000, 1084,
	-1000, 3429, 1075, 1075, 1075, 2730, -1000, -1000, -1000, -1000,
	1263, 2722, -1000, -1000, -1000, 3577, -1000, -1000, -1000, -1000,
	-1000, -1000, 17530, 3302, 3492, 3505, 38266, 3492, -1000, -324,
	1963, -1000, 2044, 191, 2097, 48942, -1000, -1000, -1000, 2721,
	2718, -214, 193, 3504, 3502, 1128, -1000, 2713, 1250, -209,
	-1000, -1000, 1224, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-209, -1000, 1224, -1000, 183, -1000, -1000, 3291, -1000, -1000,
	2327, -1000, 264, -1000, -1000, -1000, -1000, -1000, -1000, 242,
	-1000, 48942, -1000, 1243, 134, -1000, 2237, -1000, -1000, -1000,
	-1000, -1000, 4986, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2476, -1000, -1000, 11203, -1000, -1000, -1000,
	2562, -1000, -1000, 11203, 2708, 2474, 2706, 2471, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3572, -1000, 3499, 1672, 2702,
	2697, 1644, 2696, 2693, -1000, 11203, 2692, 3741, 1047, 2470,
	1047, -1000, -1000, 445, 28846, 48942, 3522, -1000, 48942, 2467,
	-1000, -1000, 2092, 620, 676, -1000, -1000, -1000, -1000, 969,
	416, 2691, 1228, -1000, -1000, -1000, -1000, 416, -1000, 2466,
	255, -1000, -1000, -1000, -1000, 2177, -1000, -1000, 2193, 1640,
	289, -1000, -1000, -1000, -1000, -1000, -1000, 2325, 48942, 37638,
	2345, 1893, -339, -1000, 2911, -1000, 1762, 1762, 1762, 48942,
	1614, -1000, 1762, 1762, 2689, -1000, -1000, 2688, 2687, -123,
	853, 1913, 1912, -1000, 2156, 28218, 37010, 36382, 1350, -1000,
	1539, -1000, -1000, -1000, -1000, -1000, -1000, 3511, 853, -1000,
	588, 2155, 13727, 2907, 13727, 2906, 593, 2905, 1600, -1000,
	48942, -1000, -1000, 48942, 4190, 2904, -1000, 2901, 3157, 565,
	2900, 2897, 48942, 2543, -1000, 3287, 48942, 811, 3299, -1000,
	-1000, -1000, 476, -1000, -1000, 631, -1000, 48942, -1000, 48942,
	-1000, 1658, -1000, 26334, -1000, -1000, 1558, -1000, 2463, 2462,
	3741, -1000, -1000, 255, 2459, 6140, -1000, -1000, -1000, -1000,
	-1000, 3268, 2458, 2325, 48942, -1000, 48942, 1215, 1215, 3572,
	48942, 8673, -1000, -1000, 11203, 2896, -1000, 11203, -1000, -1000,
	-1000, -1000, -1000, 2869, 3257, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2903, -1000, 11203, 11834, -1000, -1000, 893, 14998,
	-246, 400, -1000, -1000, -1000, -216, 2457, -1000, -1000, 3494,
	2455, 2374, 48942, -1000, -1000, 1224, 1224, -214, -1000, -1000,
	1222, -1000, -1000, 1230, 722, -1000, 2674, 280, -1000, 2505,
	-1000, 2399, 116, -1000, 116, -1000, 304, 11203, -1000, 2451,
	-1000, -1000, -1000, 2450, -1000, -1000, 2336, -1000, 2668, -1000,
	2449, -1000, -1000, 48942, -1000, -1000, 1124, 2446, -348, 2445,
	2092, 2092, 48942, 5219, -126, -123, 18158, -126, -1000, -1000,
	409, 437, -1000, -1000, 2121, 655, -1000, -1000, 2443, 660,
	-1000, 1215, -1000, 1891, 2037, 2408, 33870, 26334, 27590, 2442,
	-1000, -1000, 35754, 2903, 2903, 52116, 336, 52422, -1000, 2868,
	1174, 1890, -1000, 2146, -1000, 2144, -1000, 3511, 1350, 149,
	-1000, -1000, 1689, -1000, 1174, 2611, 3493, -1000, 2465, 48942,
	2057, 48942, 2867, 1821, 13727, -1000, 835, 3247, -1000, -1000,
	4190, -1000, -1000, 2040, 13727, -1000, -1000, 2440, 27590, 982,
	1811, 1804, 1017, 2863, -1000, 661, 3574, -1000, -1000, -1000,
	1015, 2856, -1000, 2013, 2012, -1000, 48942, -1000, 33870, 33870,
	1410, 1410, 33870, 33870, 2855, 855, -1000, -1000, 13727, -1000,
	-1000, 1762, -1000, -1000, -1000, 1762, 1656, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2345, -1000, -1000, 1213, -1000, 3439,
	-1000, -1000, 2237, 48942, 2237, 35126, -1000, 3490, 3486, -1000,
	2237, 260, 254, 2851, 2850, -1000, -324, 48942, 48942, -218,
	2141, -1000, 2436, 197, -1000, -1000, 1203, -216, -220, 86,
	26334, 1801, -1000, 2665, 372, -133, -1000, -1000, -1000, -1000,
	2659, -1000, 1168, -1000, -1000, -1000, 1202, 2658, 2655, -1000,
	-1000, -1000, -1000, 48942, -1000, 2398, -1000, 2434, 2429, 619,
	-110, -1000, -1000, 425, -1000, -1000, -1000, 613, 2370, -1000,
	-1000, 431, -1000, -1000, -1000, 2325, 2419, -1000, -1000, 133,
	-1000, 1782, 1557, -1000, -1000, -1000, -1000, -1000, -1000, 831,
	-1000, 416, 52289, -1000, 1182, 26962, -1000, 1230, 831, 546,
	32614, 697, 311, -1000, 2138, -1000, -1000, 3572, -1000, 685,
	-1000, 578, -1000, 1515, -1000, 1507, 34498, 2136, 1858, -1000,
	52154, 967, -1000, -1000, 3669, -1000, -1000, -1000, -1000, -1000,
	-1000, 2418, 2417, -1000, -1000, -1000, -1000, -1000, 2108, 2844,
	30, 3373, 2416, -1000, -1000, 2838, 1467, 1465, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1443, 1440, 33870,
	-1000, -1000, 3669, 2095, 26334, 1762, -1000, -1000, 1439, 1433,
	-1000, -1000, -1000, -1000, -1000, -303, 2837, 11203, 11203, -1000,
	-1000, -1000, 2832, -1000, -1000, 3484, -218, -222, 2411, 171,
	182, -1000, 2410, -1000, -113, 3239, -140, -1000, -1000, 906,
	-210, 147, 146, 132, -1000, -1000, -1000, 11203, -1000, -1000,
	-1000, 127, -1000, 1779, -1000, -1000, 2092, 48942, 648, -1000,
	-1000, -1000, -1000, 228, -1000, -1000, -1000, -1000, -1000, -1000,
	2408, 2403, -1000, 571, 3480, -1000, 52422, -1000, 1762, -1000,
	571, 1420, -1000, 1762, 1762, -1000, 528, -1000, 1750, -1000,
	2080, -1000, 3439, -1000, 527, -1000, 580, -1000, -1000, -1000,
	1419, -1000, -1000, -1000, 52154, 589, -1000, 826, 2827, -1000,
	-1000, 2650, 11203, 2823, 1762, 2638, -96, 33870, 3154, 3153,
	3152, 2969, 1412, -1000, -1000, 26334, -1000, -1000, 33242, -1000,
	2822, 1408, 1407, 48942, 2374, -1000, -1000, 2401, -1000, 908,
	177, 182, -1000, 3479, 184, 3472, 3471, 1199, 3228, -1000,
	-1000, 1999, -1000, 142, 140, 138, -1000, -1000, -1000, -1000,
	-1000, 2398, 2397, 2390, 576, -1000, 337, -1000, -1000, -1000,
	360, -1000, 3467, 700, -1000, 26334, -1000, -1000, 32614, 2903,
	2903, -1000, -1000, 2072, -1000, -1000, -1000, -1000, 2069, -1000,
	-1000, -1000, 1402, -1000, 48942, 1024, 8042, -1000, 2258, -1000,
	48942, -1000, 3174, -1000, 253, 1375, 360, 1410, 360, 1410,
	360, 1410, 360, 1410, 335, -1000, -1000, -1000, 1371, 11203,
	-1000, -1000, 1369, -1000, -1000, -1000, 2820, 2054, 193, 164,
	3460, -1000, 2374, 3457, 2374, 2374, -1000, 130, -127, 906,
	-1000, -1000, -1000, -1000, -1000, -1000, 2388, -1000, -1000, -1000,
	-1000, 1762, 1762, 2386, 2385, 493, -1000, -1000, 31986, 583,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 589, 52422, -1000,
	8042, 1320, -1000, 2237, -1000, 855, -1000, -1000, 3164, 3090,
	3521, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2743, 2623, -1000, 48942, 3361, 25706, 160, -1000, -1000,
	-1000, 2376, -1000, 2374, -1000, -1000, 1754, -137, -1000, -264,
	2048, 2047, -1000, -1000, 48942, -1000, 48942, 588, -1000, 52422,
	1306, -1000, 8042, -1000, -1000, 3565, -1000, 3547, 1061, 1061,
	360, 360, 360, 360, 11203, -1000, -1000, -1000, 48942, -1000,
	1305, -1000, -1000, -1000, 1523, -1000, -1000, -1000, -1000, 2372,
	-141, -1000, -1000, 2368, -1000, -1000, -1000, 1255, 2611, -1000,
	-1000, -1000, -1000, -1000, 2111, 678, -1000, 2542, 1183, -1000,
	1747, -1000, 31358, 48942, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 48942, 7411, -1000, 1520, -1000, -1000, 2237,
	48942, -1000,
}

var yyPgo = [...]int{
	0, 185, 3597, 252, 181, 4210, 83, 262, 272, 251,
	261, 4209, 4208, 4207, 4206, 3307, 3303, 4203, 4200, 4199,
	4198, 4197, 4196, 4195, 4194, 4193, 4192, 4191, 4190, 4189,
	4188, 4187, 4186, 4185, 4184, 4183, 4182, 4181, 4180, 4179,
	4178, 4173, 4172, 4171, 4170, 4169, 4168, 254, 4167, 4166,
	4165, 4164, 4163, 4162, 4161, 4160, 4159, 4158, 4157, 4156,
	4155, 4154, 4153, 4152, 4134, 4133, 4132, 4131, 4129, 4128,
	4127, 4126, 4125, 4123, 4122, 4121, 4120, 4109, 4108, 4107,
	4105, 4104, 247, 4103, 4102, 242, 4100, 3299, 4098, 4097,
	4093, 4091, 4090, 4089, 4088, 4087, 329, 4086, 4084, 4083,
	4081, 4080, 4079, 4077, 4076, 4075, 4074, 4073, 4072, 4066,
	286, 4065, 4064, 4063, 4062, 214, 4061, 279, 4060, 179,
	147, 4059, 4058, 4057, 4052, 4051, 4050, 4049, 4048, 4047,
	4046, 4045, 4044, 4043, 4042, 250, 201, 74, 4040, 43,
	4038, 4037, 229, 4034, 154, 4033, 156, 4032, 4030, 4029,
	4028, 4025, 4022, 4021, 4020, 4019, 4018, 4015, 4013, 4012,
	4011, 4010, 4006, 4005, 4004, 4002, 4001, 4000, 3997, 3996,
	50, 3995, 263, 3994, 72, 3992, 184, 3991, 78, 3988,
	84, 134, 258, 1901, 264, 257, 192, 177, 3986, 3985,
	294, 3984, 163, 234, 160, 97, 124, 3982, 142, 3980,
	268, 47, 48, 236, 144, 53, 162, 129, 3978, 216,
	101, 113, 3976, 3975, 146, 3974, 245, 187, 3970, 111,
	3969, 3966, 3962, 3961, 3960, 204, 200, 3959, 3958, 132,
	3957, 3951, 75, 133, 3948, 77, 126, 173, 122, 3946,
	1659, 128, 94, 3943, 121, 109, 3937, 166, 3936, 3935,
	3934, 3929, 194, 3928, 3927, 137, 66, 3925, 3924, 3923,
	71, 3922, 79, 3921, 61, 3920, 65, 3919, 3918, 3917,
	3916, 3915, 3914, 3912, 3911, 3908, 3907, 3906, 3903, 57,
	3902, 3901, 3898, 3896, 9, 11, 15, 3895, 29, 3891,
	174, 3889, 3884, 170, 3882, 198, 3881, 3880, 100, 95,
	3879, 96, 169, 3877, 7, 25, 59, 3876, 3875, 224,
	239, 110, 152, 3873, 273, 3872, 3863, 3862, 161, 3859,
	3858, 2361, 3857, 3856, 3853, 3852, 3850, 3849, 64, 3848,
	1, 218, 40, 3847, 131, 139, 3846, 37, 27, 3844,
	44, 114, 202, 136, 105, 3842, 3838, 3836, 274, 223,
	104, 67, 0, 103, 226, 159, 3835, 3834, 3832, 267,
	3831, 241, 199, 238, 178, 259, 203, 3830, 3828, 58,
	3823, 167, 30, 52, 148, 93, 20, 243, 3822, 1738,
	10, 212, 3821, 207, 3820, 8, 18, 172, 150, 3806,
	3805, 33, 265, 3804, 3803, 3800, 130, 3798, 3796, 188,
	82, 3795, 3794, 3793, 3792, 39, 3785, 190, 17, 3783,
	125, 3781, 255, 3778, 220, 138, 183, 176, 158, 230,
	235, 85, 81, 3777, 1847, 157, 108, 16, 3775, 231,
	3774, 186, 119, 3773, 86, 3772, 253, 271, 210, 3771,
	191, 12, 45, 36, 31, 42, 13, 266, 205, 3770,
	3769, 23, 51, 3766, 54, 3765, 21, 3764, 3763, 38,
	3761, 56, 5, 3760, 3759, 19, 22, 3757, 35, 209,
	175, 127, 102, 76, 3756, 3755, 143, 189, 3754, 141,
	155, 165, 3753, 80, 3752, 3751, 3749, 3748, 724, 3747,
	256, 3744, 3743, 3742, 3741, 3739, 3738, 3737, 3736, 3735,
	225, 3733, 107, 41, 3732, 3731, 3730, 3729, 89, 151,
	3728, 3726, 3725, 3724, 32, 140, 3723, 14, 3721, 26,
	24, 34, 3720, 106, 3719, 3, 195, 3718, 3715, 4,
	3714, 3713, 2, 3712, 3711, 145, 3709, 98, 28, 171,
	112, 3707, 3706, 92, 213, 149, 3705, 3688, 88, 246,
	206, 3683, 99, 237, 269, 3682, 211, 3679, 3678, 3677,
	3676, 3675, 3674, 1258, 3673, 3670, 248, 55, 91, 3669,
	227, 120, 3668, 3667, 90, 168, 116, 117, 49, 87,
	3665, 115, 215, 3664, 197, 3663, 260, 3662, 3661, 118,
	3660, 3659, 3658, 3657, 208, 3656, 3654, 196, 244, 3653,
	3652, 270, 3651, 3649, 3635, 3633, 3630, 3628, 3627, 3626,
	3625, 3602, 240, 249, 3600,
}

//line mysql_sql.y:12684
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 607, 610, 610, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 125,
	125, 343, 343, 344, 344, 127, 339, 339, 338, 338,
	128, 129, 130, 586, 586, 131, 132, 162, 585, 585,
	164, 164, 164, 164, 164, 459, 126, 126, 126, 126,
	126, 168, 168, 168, 168, 168, 124, 592, 592, 592,
	593, 593, 121, 151, 150, 153, 153, 152, 152, 149,
	149, 145, 148, 148, 147, 147, 146, 141, 143, 143,
	142, 144, 144, 122, 110, 123, 534, 534, 533, 533,
	532, 532, 484, 484, 485, 485, 330, 330, 330, 531,
	531, 531, 530, 530, 529, 529, 528, 528, 526, 526,
	527, 525, 524, 524, 524, 522, 522, 522, 518, 518,
	520, 519, 519, 521, 513, 513, 516, 516, 514, 514,
	514, 514, 517, 512, 512, 512, 511, 511, 109, 109,
	109, 426, 426, 108, 108, 440, 440, 440, 440, 440,
	438, 438, 438, 438, 438, 438, 437, 437, 436, 436,
	441, 441, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 97, 97, 97, 97, 97, 97, 97,
	104, 102, 102, 102, 103, 598, 598, 597, 597, 599,
	599, 599, 599, 600, 600, 100, 100, 100, 101, 435,
	435, 435, 98, 99, 99, 425, 425, 430, 430, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 434, 434, 434, 432, 432, 431, 431, 433,
	433, 91, 91, 91, 94, 93, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 92, 92, 92, 92, 92,
	92, 86, 86, 86, 86, 86, 85, 85, 87, 87,
	422, 422, 421, 105, 105, 106, 595, 595, 594, 596,
	596, 596, 596, 107, 113, 113, 113, 113, 113, 113,
	113, 113, 112, 112, 115, 115, 114, 116, 96, 96,
	96, 96, 96, 96, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	559, 559, 559, 559, 561, 561, 357, 358, 611, 360,
	356, 356, 356, 555, 555, 556, 557, 558, 558, 558,
	111, 14, 215, 215, 458, 458, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 13, 84, 89, 89,
	90, 294, 294, 295, 289, 289, 296, 296, 167, 297,
	297, 297, 302, 302, 303, 303, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 274, 274,
	274, 269, 269, 269, 269, 270, 270, 271, 271, 272,
	272, 272, 272, 273, 273, 349, 349, 298, 298, 298,
	300, 300, 299, 293, 291, 291, 291, 291, 291, 291,
	291, 292, 292, 292, 292, 301, 301, 82, 88, 88,
	88, 88, 573, 573, 83, 83, 584, 584, 488, 488,
	371, 371, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 494, 495,
	367, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 79, 80,
	81, 54, 57, 58, 166, 53, 53, 53, 411, 411,
	52, 612, 612, 342, 342, 67, 66, 56, 68, 69,
	70, 71, 72, 73, 51, 65, 65, 65, 65, 65,
	65, 65, 65, 76, 507, 507, 614, 614, 614, 74,
	75, 487, 487, 487, 64, 63, 62, 61, 60, 60,
	50, 50, 49, 49, 55, 157, 59, 158, 158, 364,
	364, 364, 366, 366, 362, 613, 613, 454, 454, 365,
	365, 48, 48, 48, 48, 77, 363, 363, 341, 361,
	361, 361, 12, 12, 10, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 26, 27, 29, 419, 419, 416, 28, 20,
	19, 19, 23, 22, 18, 18, 21, 24, 25, 25,
	9, 9, 9, 9, 15, 15, 16, 187, 187, 241,
	241, 567, 567, 563, 563, 564, 564, 564, 565, 565,
	566, 566, 117, 501, 501, 501, 501, 501, 501, 8,
	8, 210, 210, 500, 500, 500, 500, 500, 500, 423,
	423, 423, 544, 544, 544, 545, 209, 209, 204, 204,
	502, 502, 388, 546, 546, 510, 510, 509, 509, 508,
	508, 207, 207, 208, 208, 190, 190, 136, 136, 515,
	515, 515, 515, 523, 523, 483, 483, 279, 279, 332,
	332, 333, 333, 180, 180, 181, 181, 181, 181, 181,
	181, 601, 601, 602, 603, 604, 604, 605, 605, 605,
	606, 606, 606, 606, 606, 552, 552, 554, 554, 553,
	206, 206, 202, 202, 203, 203, 203, 201, 201, 200,
	199, 199, 198, 196, 196, 196, 197, 197, 197, 214,
	214, 183, 183, 183, 182, 182, 182, 182, 182, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 184, 184, 560, 560, 560, 489, 489, 489, 497,
	497, 311, 311, 312, 312, 312, 312, 312, 134, 134,
	493, 493, 310, 310, 185, 185, 186, 186, 186, 186,
	309, 309, 308, 195, 195, 194, 193, 193, 193, 188,
	188, 188, 188, 189, 320, 320, 319, 319, 318, 318,
	318, 318, 120, 133, 133, 135, 213, 213, 317, 316,
	316, 316, 316, 212, 212, 211, 211, 205, 205, 192,
	192, 192, 192, 315, 191, 313, 591, 591, 590, 590,
	589, 587, 587, 587, 588, 588, 588, 588, 536, 536,
	536, 536, 536, 350, 350, 350, 355, 355, 353, 353,
	353, 353, 353, 359, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 39, 224, 225, 40,
	226, 226, 227, 227, 228, 228, 229, 230, 231, 231,
	231, 231, 38, 216, 216, 217, 217, 218, 218, 219,
	220, 220, 220, 223, 221, 222, 222, 609, 609, 608,
	37, 37, 30, 171, 171, 172, 172, 172, 174, 174,
	275, 275, 275, 173, 173, 175, 175, 175, 568, 570,
	570, 572, 571, 571, 571, 574, 574, 574, 574, 574,
	575, 575, 575, 575, 576, 576, 31, 154, 154, 178,
	178, 159, 579, 579, 579, 578, 578, 580, 580, 581,
	581, 336, 336, 337, 337, 169, 170, 170, 161, 156,
	177, 177, 177, 177, 177, 179, 179, 243, 243, 155,
	160, 163, 165, 569, 577, 577, 577, 420, 420, 417,
	418, 418, 415, 414, 414, 414, 583, 583, 582, 582,
	582, 351, 351, 32, 410, 410, 412, 413, 413, 413,
	404, 404, 404, 404, 36, 408, 408, 409, 409, 409,
	409, 409, 409, 409, 405, 405, 407, 407, 403, 403,
	403, 403, 403, 403, 403, 35, 176, 176, 402, 402,
	399, 399, 397, 397, 398, 398, 396, 396, 396, 400,
	400, 43, 78, 44, 45, 46, 42, 401, 401, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 138,
	137, 137, 137, 137, 137, 140, 140, 335, 335, 334,
	334, 139, 276, 276, 41, 254, 254, 475, 475, 470,
	470, 470, 470, 470, 491, 491, 491, 471, 471, 471,
	472, 472, 472, 474, 474, 474, 473, 473, 473, 473,
	473, 490, 490, 492, 492, 492, 442, 442, 443, 443,
	443, 446, 446, 462, 462, 463, 463, 461, 461, 468,
	468, 467, 467, 466, 466, 465, 465, 464, 464, 464,
	464, 457, 457, 456, 456, 444, 444, 444, 444, 444,
	445, 445, 445, 455, 455, 460, 460, 307, 307, 306,
	306, 262, 262, 263, 263, 305, 305, 260, 260, 261,
	261, 261, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 542, 542,
	543, 265, 265, 277, 277, 277, 277, 277, 277, 264,
	264, 266, 266, 242, 242, 240, 240, 232, 232, 232,
	232, 232, 233, 233, 234, 234, 235, 235, 235, 239,
	239, 238, 238, 238, 238, 236, 236, 237, 237, 237,
	237, 237, 237, 428, 428, 539, 539, 540, 540, 535,
	535, 535, 538, 538, 538, 538, 538, 538, 538, 541,
	541, 541, 537, 537, 244, 329, 329, 329, 352, 352,
	352, 352, 354, 328, 328, 328, 259, 259, 258, 258,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 427, 427, 368, 368, 369, 369, 288, 287,
	287, 287, 287, 287, 285, 286, 284, 284, 284, 284,
	284, 281, 281, 280, 280, 280, 282, 282, 282, 282,
	282, 406, 406, 278, 278, 268, 268, 268, 267, 267,
	267, 469, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 283, 326, 326, 326, 327, 327, 327, 327,
	327, 327, 327, 327, 378, 378, 384, 384, 551, 551,
	550, 245, 245, 245, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 255, 255, 255, 451, 451, 451, 451,
	452, 452, 452, 452, 453, 453, 453, 449, 449, 450,
	450, 389, 390, 390, 498, 498, 499, 499, 447, 447,
	448, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 506, 506, 506, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 322, 562, 562, 562, 547, 547, 547, 548,
	548, 548, 548, 548, 548, 548, 548, 548, 548, 548,
	548, 549, 549, 549, 549, 549, 549, 549, 549, 549,
	549, 549, 549, 549, 549, 549, 549, 549, 324, 324,
	324, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 391,
	391, 392, 392, 503, 503, 503, 503, 503, 503, 504,
	504, 505, 505, 505, 505, 496, 496, 496, 496, 496,
	496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
	496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
	496, 496, 496, 496, 376, 321, 321, 321, 393, 385,
	385, 386, 386, 387, 387, 379, 379, 379, 379, 379,
	379, 380, 380, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 374, 381, 381, 383, 383, 395,
	395, 395, 394, 394, 394, 394, 394, 394, 394, 257,
	257, 257, 257, 373, 373, 373, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 247, 247,
	247, 247, 251, 251, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 252, 252,
	252, 252, 252, 250, 250, 250, 250, 250, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 118, 119, 119,
	249, 331, 331, 476, 476, 479, 479, 477, 477, 478,
	480, 480, 480, 481, 481, 481, 482, 482, 482, 486,
	486, 340, 340, 340, 348, 348, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	346, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 3, 4, 4, 5, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 2, 2, 0, 1, 4, 2,
	4, 1, 5, 3, 2, 1, 2, 2, 4, 4,
	5, 2, 1, 3, 4, 4, 1, 2, 9, 7,
	1, 3, 3, 1, 1, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 2, 4, 3, 3, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 7, 2, 3,
	3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 4, 1, 1, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 10, 7, 4, 4,
	3, 1, 3, 3, 1, 3, 1, 6, 7, 3,
	3, 3, 1, 1, 1, 3, 2, 4, 5, 5,
	6, 5, 5, 3, 2, 2, 1, 3, 4, 3,
	7, 5, 8, 2, 2, 1, 3, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 2,
	1, 3, 2, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 6, 3, 3, 1, 1, 7, 7, 7,
	8, 8, 0, 4, 7, 6, 0, 3, 0, 2,
	0, 1, 1, 1, 1, 4, 2, 2, 3, 3,
	4, 5, 3, 4, 4, 2, 2, 2, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 4, 3, 3, 3, 2, 5, 5, 0, 2,
	7, 0, 1, 0, 1, 5, 5, 3, 3, 2,
	4, 4, 4, 4, 4, 1, 1, 1, 3, 3,
	1, 1, 1, 6, 0, 1, 1, 1, 1, 5,
	5, 0, 1, 1, 3, 3, 3, 4, 7, 7,
	5, 4, 7, 8, 3, 3, 2, 3, 4, 0,
	2, 2, 0, 2, 2, 1, 1, 1, 1, 0,
	1, 5, 5, 6, 4, 3, 1, 3, 1, 1,
	3, 5, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 4, 1, 3, 1, 4, 6,
	6, 4, 4, 4, 4, 4, 3, 6, 3, 5,
	1, 1, 2, 2, 11, 8, 9, 1, 3, 2,
	4, 0, 2, 0, 1, 1, 1, 1, 0, 1,
	0, 1, 4, 2, 1, 5, 4, 4, 2, 5,
	5, 1, 3, 2, 1, 5, 4, 4, 2, 0,
	5, 4, 0, 1, 3, 3, 1, 3, 1, 3,
	1, 3, 4, 0, 1, 0, 1, 1, 3, 1,
	1, 0, 4, 1, 3, 2, 1, 0, 8, 0,
	4, 7, 4, 0, 2, 0, 2, 0, 2, 0,
	4, 1, 3, 1, 1, 6, 4, 5, 7, 4,
	5, 0, 1, 3, 8, 0, 6, 0, 4, 6,
	1, 1, 1, 1, 1, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 3, 0, 1, 1, 0, 2, 2, 0,
	2, 3, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 7, 7, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 2, 0, 4, 7, 6, 6, 3, 5,
	0, 2, 0, 2, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 3, 1, 1, 1, 1, 4,
	4, 4, 3, 3, 2, 2, 2, 2, 2, 3,
	2, 3, 4, 1, 3, 4, 0, 2, 1, 1,
	2, 2, 2, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 1, 7,
	1, 3, 0, 1, 1, 3, 1, 3, 0, 1,
	1, 1, 14, 1, 3, 0, 1, 1, 3, 1,
	1, 2, 4, 1, 1, 1, 1, 0, 1, 2,
	9, 9, 7, 1, 2, 3, 3, 3, 0, 4,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 4, 1, 1, 1, 3, 3, 4, 3, 3,
	0, 1, 1, 1, 0, 2, 7, 8, 10, 2,
	2, 8, 0, 3, 3, 0, 3, 0, 3, 0,
	5, 1, 3, 0, 3, 3, 0, 2, 9, 8,
	0, 2, 2, 3, 3, 0, 2, 0, 2, 4,
	4, 4, 4, 1, 0, 2, 2, 1, 3, 2,
	1, 3, 2, 1, 3, 2, 0, 1, 3, 4,
	3, 1, 1, 4, 1, 3, 1, 1, 1, 1,
	0, 1, 1, 1, 11, 0, 2, 3, 3, 2,
	2, 3, 1, 1, 1, 3, 3, 4, 0, 2,
	2, 2, 2, 2, 2, 6, 0, 4, 1, 1,
	0, 3, 0, 1, 1, 2, 4, 4, 4, 0,
	1, 8, 2, 4, 4, 4, 9, 0, 2, 11,
	9, 11, 8, 6, 9, 7, 10, 7, 6, 2,
	2, 9, 4, 5, 3, 0, 4, 1, 3, 0,
	3, 6, 0, 2, 10, 0, 2, 0, 2, 0,
	3, 2, 4, 3, 0, 2, 1, 0, 2, 3,
	0, 2, 3, 0, 2, 1, 0, 3, 2, 4,
	3, 0, 1, 0, 1, 1, 0, 6, 0, 3,
	5, 0, 4, 0, 3, 1, 3, 4, 5, 0,
	3, 1, 3, 2, 3, 1, 2, 0, 4, 6,
	5, 0, 2, 0, 2, 4, 5, 4, 5, 1,
	5, 6, 5, 0, 3, 0, 1, 1, 3, 3,
	3, 0, 4, 1, 3, 3, 3, 0, 1, 1,
	3, 2, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 5, 4, 5, 1, 3,
	3, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 0, 5, 5,
	5, 5, 0, 1, 1, 3, 1, 1, 1, 1,
	1, 7, 9, 7, 9, 2, 1, 7, 9, 7,
	9, 8, 5, 0, 1, 0, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 3, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 2,
	1, 2, 2, 1, 1, 2, 2, 2, 3, 3,
	2, 2, 1, 5, 6, 4, 1, 1, 1, 5,
	4, 1, 1, 2, 0, 1, 1, 2, 5, 0,
	1, 1, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 2, 2, 2, 0, 4, 7, 3,
	3, 0, 3, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 3, 5,
	2, 2, 2, 2, 4, 1, 1, 2, 5, 6,
	8, 6, 6, 6, 1, 1, 1, 1, 1, 1,
	3, 9, 1, 4, 4, 4, 7, 9, 7, 7,
	7, 9, 7, 7, 0, 2, 0, 1, 1, 2,
	4, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	2, 2, 2, 0, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 5, 0,
	1, 3, 0, 1, 0, 2, 0, 2, 0, 1,
	6, 8, 8, 6, 6, 5, 5, 5, 6, 6,
	6, 6, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 1, 1, 1, 4, 4, 6,
	8, 6, 4, 5, 4, 4, 4, 3, 4, 6,
	6, 7, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	8, 4, 2, 3, 2, 4, 2, 2, 4, 6,
	2, 2, 4, 6, 4, 2, 4, 4, 4, 0,
	1, 2, 3, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 3, 0,
	1, 1, 3, 1, 3, 3, 3, 3, 3, 2,
	1, 1, 1, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 1, 3, 4, 4, 5, 4, 5,
	3, 4, 5, 6, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 4, 1, 2, 3, 5,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -607, -610, -2, -5, 628, -1, -4, -119, -91,
	-7, -14, -121, -122, -8, -117, -9, -10, -12, -95,
	-112, -114, -116, -115, -47, -11, -111, -85, -86, -97,
	-105, -108, -109, -110, -123, -118, -120, -180, -124, -125,
	-126, -168, -129, -131, -132, 618, -92, -93, -94, -33,
	-32, -31, -30, -154, -159, -162, -164, -127, 551, 624,
	454, 14, 503, -15, -16, -552, -17, 263, -356, -357,
	-358, -360, -611, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -157,
	-158, -77, -57, -78, -58, -166, -128, -79, -80, -81,
	-83, -82, -88, -84, -89, -156, -161, -13, -167, -90,
	237, -87, 76, -98, -99, -100, -101, -102, -103, -104,
	-106, -107, 378, 384, 441, 617, 61, -181, -183, 645,
	646, 649, 538, 541, 161, 162, 164, 165, -34, -35,
	-36, -37, -38, -39, -41, -40, -42, -43, -44, -45,
	-46, 233, 16, 546, -18, -21, -19, -22, -20, -28,
	-29, -27, -24, -26, -155, -25, -160, -23, -163, -165,
	-130, 258, 257, 38, 324, 325, 326, 382, 256, 234,
	236, 15, 31, 42, 357, -182, 84, 539, 235, -184,
	13, 651, -6, -3, -2, -141, -145, -149, -152, -153,
	-150, -151, -4, -119, 119, 248, 619, -352, 374, 620,
	622, 621, 87, 95, -345, -347, 454, 263, 378, 384,
	617, 646, 649, 538, 541, 553, 554, 555, 556, 557,
	558, 559, 560, 562, 563, 564, 565, 566, 567, 568,
	578, 579, 569, 570, 571, 572, 573, 574, 575, 576,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 506, 603, 604, 605, 606, 534,
	561, 597, 598, 599, 600, 355, 356, 543, 275, 299,
	409, 305, 312, 161, 180, 174, 203, 194, 539, 169,
	279, 317, 280, 94, 164, 489, 109, 466, 438, 167,
	294, 296, 298, 535, 536, 368, 301, 533, 300, 302,
	304, 537, 281, 358, 190, 185, 293, 277, 183, 282,
	40, 283, 208, 284, 285, 548, 462, 354, 468, 309,
	52, 436, 184, 463, 297, 465, 212, 216, 480, 481,
	178, 179, 470, 483, 207, 210, 211, 255, 351, 352,
	43, 545, 267, 484, 214, 641, 206, 201, 492, 313,
	311, 205, 177, 200, 278, 65, 218, 217, 219, 432,
	433, 434, 435, 286, 287, 372, 479, 197, 186, 359,
	170, 23, 487, 262, 467, 385, 288, 306, 314, 213,
	215, 269, 274, 329, 547, 440, 273, 310, 485, 182,
	266, 295, 261, 488, 642, 171, 387, 289, 165, 303,
	482, 644, 491, 64, 400, 176, 168, 635, 252, 162,
	271, 276, 643, 290, 291, 292, 532, 316, 315, 307,
	540, 198, 268, 204, 188, 175, 199, 163, 270, 490,
	401, 615, 357, 419, 196, 193, 272, 245, 486, 469,
	166, 423, 402, 191, 318, 610, 611, 612, 373, 350,
	319, 320, 189, 259, 460, 461, 323, 429, 341, 403,
	439, 410, 404, 225, 226, 327, 472, 474, 209, 613,
	330, 331, 332, 464, 333, 334, 335, 336, 377, 56,
	58, 96, 99, 98, 647, 648, 63, 29, 363, 366,
	398, 405, 343, 616, 544, 340, 344, 345, 367, 25,
	421, 389, 425, 424, 48, 49, 50, 53, 54, 55,
	57, 59, 60, 51, 531, 382, 395, 493, 45, 47,
	392, 27, 369, 420, 442, 339, 422, 453, 46, 451,
	452, 473, 26, 371, 370, 62, 44, 428, 430, 431,
	321, 337, 380, 625, 494, 375, 391, 394, 376, 342,
	365, 396, 67, 66, 388, 626, 383, 381, 338, 549,
	550, 346, 577, 360, 437, 528, 527, 526, 525, 524,
	523, 522, 521, 324, 325, 326, 406, 407, 408, 418,
	411, 412, 413, 414, 415, 416, 417, 456, 457, 627,
	475, 477, 478, 476, 240, 650, 361, 362, 243, 629,
	630, 97, 631, 633, 632, 28, 634, 640, 637, 638,
	639, -433, -431, -352, 539, 617, 384, 538, 541, 378,
	357, 646, 649, 382, 263, 324, 325, 326, 454, 355,
	-226, -352, 650, -190, 247, 39, -240, -352, -190, -87,
	-16, -15, -182, -183, -240, 242, -361, 24, 436, -96,
	437, 237, 238, 84, 77, -352, -9, -110, -8, -117,
	-85, -180, 441, -359, -352, 324, 324, -359, 242, -354,
	273, 417, -352, -488, 248, -437, -410, 274, -436, -412,
	-439, -413, 32, 233, 235, 234, 551, 270, 16, 382,
	244, 14, 13, 383, 256, 25, 26, 28, 15, 384,
	386, 29, 387, 390, 391, 392, 42, 395, 396, 263,
	87, 95, 90, 281, -225, -352, -387, -379, 116, -382,
	-374, -375, -377, -330, -526, -372, 84, 143, 144, 151,
	117, 652, -376, -469, 36, 119, 557, 561, 597, 504,
	-322, -323, -324, -325, -326, -327, 542, -352, -527, -525,
	90, 100, 102, 106, 107, 105, 103, 155, 187, 104,
	91, 156, -183, 87, -547, 567, -346, 590, 603, 604,
	605, 606, 589, 61, -496, -505, 241, -503, 154, 192,
	259, 188, 14, 149, 429, 189, 598, 599, 600, 564,
	586, 506, 568, 578, 593, 559, 560, 562, 554, 555,
	556, 558, 569, 571, 585, -506, 581, 591, 592, 577,
	601, 602, 637, 594, 595, 596, 633, 89, 88, 584,
	583, 570, 565, 566, 572, 553, 563, 573, 574, 582,
	587, 588, 366, 109, 367, 368, 496, 358, 369, 248,
	436, 70, 370, 371, 372, 373, 374, 503, 375, 71,
	376, 365, 263, 419, 377, 191, 209, 508, 507, 509,
	500, 497, 495, 498, 499, 501, 502, 575, 576, 580,
	-133, -135, 608, -601, -314, -602, 6, 7, 8, 9,
	-603, 156, -592, 438, 547, 90, 317, 355, 17, 496,
	636, 537, 636, 537, 166, 163, -424, 166, 115, 171,
	170, -424, 636, 168, 635, 327, 269, -401, -171, 355,
	419, 333, 96, 273, -404, -402, 535, -490, 321, 317,
	293, 243, 112, -172, 253, 252, 110, 496, 241, 393,
	312, 56, 58, -563, -564, 230, 231, 232, -554, 529,
	-553, -352, 636, 641, 368, 98, 99, 635, 27, 242,
	379, 269, 474, 472, 473, 475, 476, 477, 478, -65,
	-507, -487, 469, 468, -365, 461, 467, 459, 471, 462,
	356, 335, 551, 334, 233, 629, 536, 530, -340, 403,
	439, 493, 494, 380, 440, 480, 482, 463, 109, 195,
	192, 243, 245, 242, 635, 355, 496, 419, 96, 333,
	242, -563, 641, 163, 480, 482, 438, 273, 417, 41,
	-430, 429, -429, -431, 481, 492, 88, 89, 479, -340,
	109, 460, 460, -601, -314, -181, -183, -120, -552, 537,
	636, 243, 355, 419, 273, 244, 242, 532, 535, 245,
	496, 241, 324, 379, 269, 333, 96, 168, 635, -489,
	-560, 32, -497, 227, 228, 229, 33, 34, -1, 123,
	651, -379, -379, -6, 654, -6, -379, -352, -352, 158,
	-247, -251, -248, -250, -249, -253, -252, 192, 193, 154,
	196, 202, 198, 199, 200, 201, 203, 204, 205, 206,
	207, 210, 211, 208, 31, 209, 259, 188, 189, 190,
	191, 212, 174, 194, 544, 220, 175, 221, 176, 222,
	177, 223, 178, 179, 224, 180, 183, 184, 185, 186,
	182, 157, -215, 90, 32, 84, 157, 90, -207, 265,
	-190, -240, -232, 157, 652, -207, -601, -200, -201, 11,
	-240, -328, -352, 438, 126, -96, 77, -96, 437, 77,
	-96, 437, 237, -555, -556, -557, -559, 237, 437, 436,
	238, -115, 157, 281, 17, -359, -359, 82, -240, -412,
	273, -437, -410, 36, 81, 158, 246, 158, 81, 84,
	380, 355, 419, 381, 496, 242, 393, 245, 273, 394,
	355, 419, 242, 245, 496, 273, 355, 242, 245, 419,
	273, 394, 355, 459, 460, 245, 27, 385, 388, 389,
	460, -511, 492, 158, 115, 112, 113, 114, -379, 133,
	-394, 126, 127, 128, 129, 130, 131, 132, 140, 139,
	150, 143, 144, 145, 146, 147, 148, 149, 141, 142,
	136, 116, 134, 138, 135, 118, 153, -183, -379, -387,
	61, -377, -377, -377, -377, -352, -469, -384, -379, 84,
	84, 84, 84, 84, 157, 103, 90, -379, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	-504, 84, 84, -391, -392, 84, 84, -372, -328, 84,
	90, 90, 84, 84, 84, 90, 84, 84, 84, -392,
	-392, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, -201, 158, -200,
	84, -200, -201, -184, -183, 32, 33, 32, 33, 32,
	33, 32, 33, -604, 626, 84, 100, 647, 225, 17,
	-352, 635, -352, -586, 32, 540, 540, 540, 540, 485,
	546, 169, 170, 171, -399, 248, -399, -399, -224, -352,
	-226, 379, 245, 532, 245, -172, -399, -399, -399, -399,
	-399, 244, -399, 24, 242, 242, 242, 242, -399, 503,
	126, 126, 59, -565, 173, 158, -554, -206, 84, -586,
	642, 643, 644, -364, 134, 138, -364, -310, 18, -310,
	24, 271, 271, 271, -364, 311, -612, -613, 17, 136,
	-362, -613, -362, -362, -364, -614, 244, 470, 43, 272,
	271, -202, -203, 22, -202, 464, 460, -454, 465, 466,
	-366, -613, -365, -364, -364, -365, -364, -364, -364, 32,
	242, 245, 496, 333, 630, -612, -612, 31, 31, -488,
	-488, -240, -488, -488, 530, -341, -352, -488, -488, -488,
	-294, -295, -240, -566, 247, 644, -598, -597, 483, -600,
	485, 163, -431, 163, -431, 87, -412, 273, 273, 158,
	126, 24, -432, 126, 137, -431, -431, -432, -432, -264,
	41, -351, 154, -352, 90, -264, 41, -595, -594, -240,
	-201, -184, -183, 85, 85, 85, 540, -586, -488, -488,
	-488, -488, -488, -490, -488, -488, -488, -488, -488, -359,
	-216, -352, -226, 248, -488, -488, -488, -488, -185, -186,
	145, -379, -352, -185, -3, -143, -142, 120, 121, 123,
	620, 374, 619, 623, 617, -431, 41, -482, 401, 400,
	-476, -478, 84, -477, 84, -477, -477, -477, -477, -477,
	84, 84, -479, 84, -479, -479, -476, -480, 84, -480,
	-481, 84, -481, -480, -352, -458, 546, -385, -387, -352,
	39, -500, 61, -180, 84, 31, 84, -207, -352, 189,
	168, 634, -501, 61, -180, 84, 31, -201, -136, 39,
	-203, 21, 157, 100, 90, -115, -96, 77, -115, -96,
	-96, 85, 158, -558, 106, 107, -561, 207, 198, -352,
	-113, 90, -7, -8, -9, -10, -47, -85, -82, -180,
	234, 538, 541, -528, -526, 84, 32, 428, 81, 17,
	-438, 242, 496, 379, 269, 245, 355, -436, -419, -416,
	-414, -351, -412, -415, -414, -441, -328, 460, -137, 443,
	442, 323, -379, -379, -379, -379, -379, 105, 116, 350,
	106, 107, -374, -395, 32, 319, 320, -375, -375, -375,
	-375, -375, -375, -375, -375, -375, -375, -375, -375, -383,
	-393, -469, 84, 136, 134, 138, 135, 118, -377, -377,
	-375, -375, -266, -351, 154, 85, 158, -379, -551, -550,
	120, -379, -379, -379, -379, -405, -407, -328, 84, -352,
	-548, -549, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 370, 365, 371, 369, 358, 377, 372,
	373, 191, 527, 528, 521, 522, 523, 524, 525, 526,
	-385, -385, -379, -548, -385, -321, 33, 32, -387, -387,
	-387, 85, -379, -562, 348, 347, 349, -204, -352, -385,
	85, 85, 85, 100, -387, -387, -385, -375, -385, -385,
	-385, -385, -549, -321, -321, -321, -321, 145, -387, -387,
	-321, -321, -321, -321, 145, -321, -321, -321, -321, -321,
	-321, -321, -321, -321, -321, -321, 85, 85, 85, 145,
	-387, -202, -135, -509, -508, -379, 41, -136, -203, -605,
	627, 84, -328, -593, 90, 90, 652, 168, 635, 17,
	496, -352, 17, 242, -352, 100, -352, 100, 486, 487,
	167, 170, 169, -352, 116, -352, -352, 35, 84, -216,
	-399, -399, -399, -570, -352, 91, -420, -417, -414, -352,
	-352, -410, -352, -341, -240, -399, -399, -399, -399, -240,
	-275, 53, 54, 55, -414, -173, 56, 57, -566, -553,
	35, -205, -352, -310, -377, -377, -379, -414, 273, -612,
	-364, -364, -342, -341, -366, -361, -366, -366, -310, -362,
	-364, -364, -379, -366, -362, -310, -352, 460, -310, -310,
	-454, -364, -363, -352, -363, -399, -341, -342, -342, -240,
	-240, -289, -296, -290, -297, 265, 239, 363, 364, 236,
	234, 11, 235, -304, 312, -400, 504, -270, -271, 77,
	42, -273, 263, 405, 398, 275, 279, 94, 280, 438,
	281, 244, 283, 284, 285, 300, 302, 255, 286, 287,
	288, 429, 289, 162, 301, 290, 291, 292, 381, -265,
	6, 336, 546, 41, 51, 52, 452, 451, 549, 276,
	-352, -570, -568, 31, -352, 31, -420, -414, -352, -352,
	158, 246, -193, -195, -192, -188, -189, -194, -313, -315,
	-191, 84, -240, -183, -352, -431, 158, 484, 486, 487,
	-598, -432, -598, -432, 246, 32, 428, -435, 428, 32,
	-410, -429, 480, 482, -425, 90, 429, -415, -434, 81,
	154, -508, -432, -432, -434, -434, 153, 158, -596, 485,
	486, 230, -202, 100, -242, -240, -570, -419, -410, -352,
	-488, -242, -242, -242, -354, -354, 84, 157, 36, -352,
	-352, -352, -352, -309, 158, -308, 17, -353, -352, 35,
	90, 157, -309, -144, -142, 122, -379, -6, 619, -379,
	-6, -6, -379, -6, -379, -486, 402, 100, 100, -331,
	90, -331, 100, 100, 100, 552, 85, 90, -423, 81,
	-502, -388, -546, 608, -209, 85, -204, -544, -545, -204,
	-208, -352, -500, -232, 126, 126, 126, -502, -209, 85,
	-544, -202, 609, -136, -199, -198, -379, -352, 24, -115,
	-96, -556, 157, 355, 158, -205, -438, -418, -415, -440,
	145, -352, -426, 158, 546, 655, 88, 246, -583, -582,
	420, 85, 158, -512, 247, 503, 90, 652, 436, 225,
	226, 105, 350, 106, 107, -469, -387, -383, -377, -377,
	-375, -375, -381, 260, -381, 115, -379, 653, -378, -550,
	122, -379, 35, 158, 35, 158, 82, 158, 85, -476,
	-379, 157, 85, 85, 17, 17, 85, -379, 85, 85,
	85, 85, 17, 17, -379, 85, 157, 85, 85, 85,
	85, 82, 85, 158, 85, 85, 85, 85, 158, -387,
	-387, -379, -387, 85, 85, 85, -379, -379, -379, -387,
	85, -379, -379, -379, -379, -379, -379, -379, -379, -379,
	-379, -205, -448, 455, -448, -448, 158, 158, 158, 85,
	-136, 84, 100, 158, 648, -335, -334, 90, -352, -352,
	168, 635, -352, 90, 635, -352, 90, 168, 171, 171,
	170, 90, 36, 24, 310, 24, -225, -227, -228, -229,
	-230, -231, 136, 159, 160, 84, -240, -240, -240, -572,
	406, -584, 158, 41, -582, 496, -169, 323, -403, 82,
	-176, 17, 546, -240, -240, -240, -240, -254, 35, 17,
	-187, -241, -352, 84, 85, 158, -411, 82, -352, -342,
	-310, -310, -366, -310, -310, 158, 23, -364, -366, -366,
	-232, -362, -232, 157, -232, -341, -475, 35, -206, 158,
	21, 265, -239, -349, -236, -238, 250, -369, -237, 253,
	-540, 251, 249, 110, 254, 308, 111, 244, -349, -349,
	250, -274, 246, 35, -349, -292, 244, 353, 308, 251,
	21, 265, -291, 244, 111, -352, 250, 254, 251, 249,
	-348, 126, -340, 153, 246, 43, 381, -348, 550, 265,
	-348, -348, -348, -348, -348, -348, -348, 282, 282, -348,
	-348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
	163, -348, -348, -348, -348, -348, -348, 84, 328, 277,
	278, 310, -573, 406, 31, 361, 361, 362, -584, 357,
	31, -177, 355, -295, -293, -363, 31, -316, -317, -318,
	-319, -320, 68, 72, 74, 78, 69, 70, 71, 75,
	73, 31, 158, -350, -355, 35, -352, 90, -350, -183,
	-195, -193, -350, 84, -432, -597, -599, 488, 485, 491,
	-434, -434, 100, 246, 84, 126, -434, -434, 41, -351,
	-594, 492, 486, -136, 158, 81, -242, -217, -218, -219,
	-220, -247, -328, 193, 196, 198, 199, 200, 201, 203,
	204, 205, 206, 207, 210, 211, 208, 209, 259, 188,
	189, 190, 191, 212, 174, 194, 544, 175, 176, 177,
	178, 179, 180, 183, 184, 185, 186, 182, -352, -226,
	-310, -186, -195, -352, 90, -352, 145, -310, 123, -6,
	121, -148, -147, -146, 124, 617, 623, 123, 123, 123,
	85, 85, 85, 158, 85, 85, 85, 158, 85, 158,
	100, -515, 465, 40, 158, 84, 85, 158, 61, 158,
	126, 85, 158, -379, -352, 90, -379, 85, 61, -136,
	90, 158, -196, 37, 38, 157, 438, -352, -526, 85,
	-440, 158, 246, 157, 157, -416, 384, -351, -418, 21,
	546, -328, 39, -335, 126, 652, -352, 85, -381, -381,
	115, -377, -374, 85, 123, -379, 121, -245, -247, 400,
	401, -379, -245, -246, -252, 154, 192, 259, 191, 190,
	188, 400, 401, -264, -407, 543, -196, 85, -352, -379,
	-379, 85, -379, -379, 17, -352, -264, -375, -379, -201,
	-201, 85, 85, -447, -448, -447, -447, 85, 85, 85,
	85, -447, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 84, 100, 102, 100, 102, -508, -606,
	63, 625, 62, 428, 105, 313, 158, 100, 90, 653,
	158, 126, 90, -352, -352, 17, 242, -352, 17, 171,
	90, -585, 317, 355, -459, 100, 317, 355, 496, 392,
	85, 158, -328, -217, -206, 84, -206, -575, 467, 408,
	418, -348, -371, -370, 357, 42, -494, 429, 414, 415,
	-417, 273, -341, -581, 97, 126, 81, 340, 344, 345,
	341, 342, 343, -397, -398, -396, -400, -568, 84, 84,
	-180, 35, 134, -176, 84, 84, 35, -470, 330, -247,
	-240, -187, -352, 17, 158, -567, 157, -1, -352, -410,
	-364, -310, -379, -379, -310, -364, -364, -366, -352, -232,
	-470, -247, 35, -290, 239, 235, -444, 310, 311, -445,
	-460, 313, -462, 84, -244, -328, -237, -539, -540, -399,
	-352, 111, -539, 111, 84, -244, -328, -328, -293, -328,
	-352, -352, -352, -352, -300, -299, -328, -302, 32, -303,
	-352, -352, -352, -352, 111, -352, 111, -269, 41, 48,
	49, 50, -348, -348, 195, -272, 41, 428, 430, 431,
	-302, 100, 100, 100, 100, 90, 90, 90, -348, -348,
	100, 90, -355, 90, -541, 170, 45, 46, 100, 100,
	100, 100, 41, 90, -277, 41, 293, 297, 294, 295,
	296, 90, 100, 41, 100, 41, 100, 41, -352, 84,
	-542, -543, 90, 329, -459, -575, -348, 361, -431, 126,
	126, -371, -577, 94, 409, -580, 323, -179, 496, 32,
	-210, 239, 235, -568, -422, -421, -328, -192, -192, -192,
	-192, -192, 68, 79, 68, 68, 68, 73, 68, 73,
	68, -318, 79, -422, -194, -206, -355, 85, -591, -590,
	-589, -587, 76, 247, 77, -385, -434, 485, 489, 490,
	-418, -367, 90, -425, -214, 24, -240, -240, -492, 303,
	304, 85, 158, -247, -312, 19, 157, -312, 119, -6,
	-144, -146, -379, -6, -379, 619, 374, 620, 90, 100,
	100, -523, 449, 444, 446, 111, -388, -510, -509, 61,
	-180, -204, -502, -545, -508, -352, 653, 653, 653, 653,
	61, -180, -502, -214, -515, -198, -197, 44, -352, 100,
	17, -415, -410, 145, 145, -352, 385, -426, 90, 407,
	90, 242, 653, 90, -335, -374, -379, 85, -255, 179,
	178, -255, 35, 85, 85, -477, -477, -476, -479, -476,
	-255, -255, 85, 84, -196, 85, 24, 85, 85, 85,
	-379, 85, 85, 158, -498, 505, -499, 579, -447, -447,
	-447, -447, -447, -447, -447, -447, -447, -447, -447, -447,
	-447, -447, -447, -447, -447, -390, -389, 265, 450, 632,
	632, 450, 632, 632, 85, 158, -548, 158, -343, 318,
	-343, -334, 90, 246, 90, 168, -352, 90, 635, 90,
	-352, 90, 310, -352, -352, 90, 90, -229, -247, 85,
	35, -233, -234, -235, -244, -236, -238, 35, -576, 94,
	-571, 90, -352, 91, -577, 156, 359, 41, 410, 411,
	426, 354, 100, 100, 416, -569, -352, -178, 242, 355,
	-579, 52, 126, 90, -240, -396, -340, 153, 284, 333,
	-307, -306, -352, 90, -233, -180, -240, -233, -233, -180,
	-471, 332, 21, 100, 144, -207, 82, 157, -195, -241,
	-352, 145, 85, -310, -232, -310, -310, -364, -471, -180,
	-456, 314, 84, -454, 84, -454, 111, 341, -463, -461,
	265, -298, 45, 47, -247, -537, -352, -535, -537, -352,
	-535, -535, -399, -379, -298, -244, 246, 31, 235, -301,
	338, 339, 344, -427, 309, 116, -427, 158, -196, 158,
	-352, -264, -264, 31, 90, 90, -242, 85, 158, 126,
	100, 90, -576, -571, 126, -432, 90, 90, -577, 90,
	90, -581, 126, -243, 242, -341, 158, -210, -210, -310,
	158, 126, -212, -211, 81, 82, -213, 81, -211, 68,
	68, -310, -589, -588, 24, -540, -540, -540, 85, 85,
	15, -219, 41, -311, 20, 21, 145, -311, 123, 121,
	123, 123, -352, 85, 85, -483, 610, -519, -521, 444,
	21, 21, 15, 247, 85, -502, -502, -523, 45, 46,
	-410, -426, 429, -240, 158, 653, -245, -283, 90, -379,
	85, -379, 85, 90, 85, 90, -201, 21, 85, 158,
	85, 85, 85, 158, 85, 85, -379, 85, -548, -344,
	189, 90, -344, 355, -353, -352, 17, -352, 90, -459,
	310, 310, 242, 240, -180, 85, 158, -180, 90, -574,
	420, 100, 41, 100, 156, 412, -495, -170, 94, -242,
	32, -210, -578, 94, 126, 652, 84, -348, -348, -348,
	-352, 85, 158, -348, -348, 85, 85, 85, -262, 546,
	-472, 264, 100, 144, 100, 144, 100, -350, -195, -352,
	-310, -567, 157, -310, -472, -446, 315, 100, -375, 84,
	-375, 84, -455, 312, 84, 85, 158, -352, -328, -259,
	-258, -256, 105, 116, 41, 398, -257, 94, 153, 298,
	301, 300, 276, 299, -288, -368, 81, 404, 338, 339,
	-400, 610, 534, 249, 110, 111, 386, -369, 84, 84,
	82, 318, 84, 84, -537, 85, -298, -328, 41, -301,
	41, 351, 309, -299, -352, 153, -264, 85, -543, 90,
	-548, -574, 90, -434, -579, 90, -170, -242, -568, -201,
	-421, -508, -379, 84, -379, 84, 68, 11, 19, -372,
	-379, -387, 637, 639, 640, 248, -6, 620, 374, -279,
	611, 90, 21, 90, -517, 90, -422, -483, -139, -276,
	-340, 281, 85, -282, 136, 546, 85, 85, -447, -447,
	-450, -449, -453, 450, 310, 458, -387, 90, 90, 85,
	85, 90, -352, 168, 90, 652, 90, -459, -459, -352,
	-221, -247, -174, 546, -262, -235, -174, 21, 546, 358,
	41, 100, 41, 413, 90, -178, 126, 106, 107, -336,
	-337, 90, -405, -264, -266, 90, -306, -372, -372, -260,
	-180, 35, -261, -304, -400, 546, -138, -137, -260, 546,
	84, -473, 162, 100, 144, 100, 100, -310, -310, -473,
	-462, 21, 85, -441, 85, -441, 84, 126, -375, -461,
	-464, 61, -256, 105, -375, 90, -266, -267, 41, 297,
	293, 126, 126, -268, 41, 277, 278, -278, 84, 308,
	15, 195, 84, 111, 111, -240, -405, -405, -538, 340,
	341, 342, 346, 344, 345, 343, -538, -405, -405, 84,
	-428, -427, -375, -348, -348, 153, -578, -202, -205, -536,
	-352, 249, 21, 21, -493, 546, 638, 84, 84, -352,
	-352, -332, 612, 100, 90, 446, -279, -484, 613, -513,
	-454, -264, 126, 85, 75, 544, 547, 85, -452, 118,
	412, 416, -373, -376, 100, 102, 187, 156, 85, 85,
	-352, -339, -338, 90, 90, 90, 310, 545, -175, 60,
	492, 90, 91, 407, 90, 91, 358, -170, 90, 653,
	158, 126, 85, -442, 265, -180, 158, -304, -340, -139,
	-442, -263, -305, -352, 90, -491, 170, 331, 546, 100,
	144, 100, -201, -474, 170, 331, -445, 85, 85, 85,
	-441, 100, 85, -468, -465, 84, -304, 267, 136, 90,
	90, 100, 84, -503, 31, 90, -406, 84, 85, 85,
	85, 85, -405, 100, -264, -348, 85, 85, 158, 640,
	84, -387, -387, 84, 21, -332, -485, 614, 90, -522,
	449, -516, -514, 444, 445, 446, 447, 90, 545, 65,
	548, -451, -452, 416, -373, -376, 608, 456, 456, 456,
	653, 158, 126, -459, -223, -352, 308, 429, -337, 90,
	-408, -443, 317, 21, -304, -348, -443, 85, 158, -348,
	-348, 331, 100, 144, 100, -202, 331, -457, 316, 85,
	-468, -304, -467, -466, 315, 268, 84, 85, -379, -391,
	-348, 85, -281, -280, 542, -405, -408, 82, -408, 82,
	-408, 82, -408, 82, 85, -264, -352, 249, -134, 84,
	85, 85, -333, -352, -517, 90, -524, 247, -520, -521,
	448, -514, 21, 446, 21, 21, -140, 158, 65, 115,
	457, 457, 457, -338, 90, 90, -222, 35, 451, 385,
	-409, 255, 351, 352, 94, 546, 338, 339, 21, -444,
	-264, -305, -372, -372, 100, 100, 85, 158, -352, 264,
	84, -386, -380, -379, 264, 85, -352, -287, -285, -286,
	81, 463, 306, 307, 85, -538, -538, -538, -538, -288,
	85, 158, -385, 85, 158, -531, 84, 100, -519, -518,
	-520, 21, -517, 21, -517, -517, 453, 546, -451, 90,
	-348, -348, 90, 90, 337, -328, 84, -456, -466, -465,
	-386, 85, 158, -427, -286, 81, -285, 81, 16, 15,
	-408, -408, -408, -408, 84, 85, -352, -534, 31, 85,
	-530, -529, -329, -525, -352, 449, 450, 90, -517, 126,
	547, -609, -608, 631, 100, 100, -352, -441, -446, 85,
	-380, -284, 303, 304, 31, 170, -284, -385, -533, -532,
	-330, 85, 158, 157, 90, 548, 90, 85, -462, 105,
	41, 305, 85, 158, 126, -529, -352, -532, 41, -379,
	157, -352,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 0, 0,
	0, 0, 0, 700, 701, 0, 664, 0, 0, 0,
	0, 0, 0, 541, 542, 543, 544, 545, 546, 547,
	548, 549, 550, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
	0, 336, 332, 253, 254, 255, 256, 257, 258, 259,
	343, 344, 518, 0, 0, 0, 0, 783, -2, 97,
	0, 0, 0, 0, 325, 0, 316, 316, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, -2, 713, 0, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 400, 401, 402, 396, 397, 399, 398, -2, 0,
	0, 713, 0, 0, 0, 791, 0, 0, 0, 834,
	856, 23, 0, 7, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 0, 0, 19, 0, 19, 0,
	0, 0, 1378, 1379, 1380, 1381, 2176, 2146, -2, 1912,
	1889, 2070, 2071, 1968, 1980, 2211, 2212, 2213, 2214, 2215,
	2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225,
	2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235,
	2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245,
	2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255,
	2256, 2257, 2258, 2259, 2260, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1890, 1891,
	1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901,
	1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1982, 1983, 1984, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025,
	2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035,
	2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,
	2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055,
	2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 2072, 2073, 2074, 2075, 2076, 2077,
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097,
	2098, 2099, 2100, 2101, 2102, -2, 2104, 2105, 2106, 2107,
	2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117,
	2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
	2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137,
	2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2147, 2148,
	2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158,
	2159, 2160, 2161, -2, -2, -2, 2165, 2166, 2167, 2168,
	2169, 2170, 2171, 2172, 2173, 2174, 2175, 2177, 2178, 2179,
	2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189,
	2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199,
	2200, 0, 309, 307, 1859, 1889, 1912, 1968, 1980, 1981,
	2018, 2070, 2071, 2103, 2146, 2162, 2163, 2164, 2176, 0,
	0, 980, 0, 761, 0, 0, 766, 1327, 761, 337,
	702, 703, 791, 817, 662, 0, 374, 0, 1903, 378,
	2153, 0, 0, 0, 0, 659, 368, 369, 370, 371,
	372, 373, 0, 0, 953, 0, 0, 364, 0, 331,
	1970, 2175, 1382, 0, 0, 0, 0, 0, 196, 1104,
	198, 1106, 202, 210, 0, 0, 0, 215, 216, 219,
	220, 221, 222, 223, 0, 227, 0, 229, 232, 0,
	234, 235, 0, 238, 239, 240, 0, 250, 251, 252,
	1107, 1108, 1109, -2, 125, 978, 1817, 1703, 0, 1710,
	1723, 1734, 1464, 1465, 1466, 1467, 0, 0, 0, 0,
	0, 0, 1475, 1476, 0, 1506, 2215, 2256, 2257, 0,
	1484, 1485, 1486, 1487, 1488, 1489, 0, 136, 148, 149,
	1756, 1757, 1758, 1759, 1760, 1761, 1762, 0, 1764, 1765,
	1766, 1674, 1451, 1378, 0, 2224, 0, 2246, 2251, 2252,
	2253, 2254, 2245, 0, 0, 1659, 0, 1649, 0, 0,
	-2, -2, 0, 0, 2043, -2, 2258, 2259, 2260, 2221,
	2242, 2250, 2225, 2226, 2249, 2217, 2218, 2219, 2212, 2213,
	2214, 2216, 2228, 2230, 2241, 0, 2237, 2247, 2248, 2151,
	0, 0, 2198, 0, 0, 0, 2193, 150, 151, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1670, -2, -2, 1673,
	-2, 1676, -2, -2, -2, -2, 1681, 1682, -2, 1684,
	-2, -2, -2, -2, -2, -2, -2, 1661, 1662, 1663,
	1664, 1653, 1654, 1655, 1656, 1657, 1658, -2, -2, -2,
	817, 903, 0, 817, 0, 792, 839, 842, 845, 848,
	795, 0, 0, 98, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 327, 315, 317, 0, 321,
	0, 314, 1140, 1140, 1140, 0, 0, 0, 0, 1140,
	1140, 1140, 1140, 1140, 0, 1140, 0, 0, 0, 0,
	0, 1140, 0, 1013, 1111, 1112, 1113, 1138, 1139, 1212,
	0, 0, 0, 718, 714, 715, 716, 717, 805, 0,
	807, 810, 0, 0, 639, 639, 872, 872, 585, 0,
	0, 0, 639, 0, 599, 591, 0, 0, 0, 639,
	0, 0, 812, 812, 0, 642, 649, 639, 639, -2,
	639, 639, 636, 639, 0, 0, 1152, 605, 606, 607,
	591, 591, 610, 611, 612, 622, 623, 650, 1841, 0,
	0, 518, 518, 0, 518, 518, 0, 518, 518, 518,
	0, 720, 1928, 2013, 1910, 1986, 1869, 1970, 2175, 0,
	282, 2043, 287, 0, 1911, 1931, 0, 0, 1949, 0,
	-2, 0, 353, 817, 0, 0, 791, 0, 0, 0,
	0, 518, 518, 518, 518, 518, 1211, 518, 518, 518,
	518, 518, 0, 0, 0, 518, 518, 518, 518, 0,
	0, 857, 858, 853, 854, 855, 859, 860, 5, 6,
	19, 0, 0, 0, 0, 0, 0, 104, 103, 0,
	1818, 1836, 1769, 1770, 1771, 1823, 1773, 1827, 1827, 1827,
	1827, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1827, 1827, 0, 0, 1816, 1793, 1825, 1825, 1825,
	1823, 1820, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1830, 1830, 1833, 1833,
	1830, 0, 414, 412, 413, 1699, 0, 0, 0, 0,
	761, 765, 1325, 0, 0, 0, 817, -2, 0, 0,
	663, 375, 1383, 0, 0, 379, 0, 380, 0, 0,
	382, 0, 0, 0, 403, 0, 406, 390, 391, 392,
	393, 386, 0, 176, 0, 366, 367, 0, 0, 333,
	0, 0, 0, 519, 0, 0, 0, 0, 0, 0,
	207, 203, 211, 214, 224, 231, 0, 243, 245, 248,
	204, 212, 217, 218, 225, 246, 205, 208, 209, 213,
	247, 249, 206, 226, 230, 244, 228, 233, 236, 237,
	242, 0, 177, 0, 0, 0, 0, 0, 1709, 0,
	0, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 1703, 0,
	0, 1470, 1471, 1472, 1473, 0, 1477, 0, 1507, 0,
	0, 0, 0, 0, 0, 1763, 1767, 0, 1699, 1699,
	0, 1699, 1695, 0, 0, 0, 0, 0, 0, 1699,
	1632, 0, 0, 1634, 1650, 0, 0, 1636, 1637, 0,
	1640, 1641, 1699, 0, 1699, 1645, 1699, 1699, 1699, 1628,
	1629, 0, 1695, 1695, 1695, 1695, 0, 0, 1695, 1695,
	1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695,
	1695, 1695, 1695, 0, 0, 0, 0, 812, 0, 818,
	0, -2, 0, 836, 838, 840, 841, 843, 844, 846,
	847, 849, 850, 797, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 71, 73, 0, 0, 0, 0, 0,
	0, 319, 0, 324, 0, 0, 0, 0, 0, 977,
	0, 0, 1140, 1140, 1140, 1014, 0, 0, 0, 0,
	0, 0, 0, 0, 1140, 1140, 1140, 1140, 0, 1158,
	0, 0, 0, 720, 719, 0, 806, 0, 0, 70,
	578, 579, 580, 872, 0, 0, 582, 583, 0, 584,
	0, 591, 639, 639, 597, 598, 593, 592, 645, 646,
	642, 0, 642, 642, 872, 0, 616, 617, 618, 639,
	639, 624, 813, 0, 625, 626, 642, 0, 647, 648,
	872, 0, 0, 872, 872, 0, 634, 635, 637, 639,
	0, 0, 1140, 0, 655, 593, 593, 1842, 1843, 0,
	0, 1149, 0, 0, 0, 0, 658, 0, 0, 0,
	430, 431, 0, 0, 721, 0, 261, 265, 0, 268,
	0, 2013, 0, 2013, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 305, 306, 0, 0, 0, 0, 296,
	299, 1319, 1320, 1101, 1102, 300, 301, 345, 346, 0,
	812, 835, 837, 831, 832, 833, 0, 72, 0, 0,
	0, 0, 0, 518, 0, 0, 0, 0, 0, 696,
	0, 993, 698, 0, 0, 0, 0, 0, 880, 874,
	876, 948, 136, 880, 8, 121, 118, 0, 19, 0,
	0, 19, 19, 0, 19, 310, 0, 1839, 1837, 1838,
	1772, 1824, 0, 1798, 0, 1799, 1800, 1801, 1812, 1813,
	0, 0, 1794, 0, 1795, 1796, 1797, 1788, 0, 1789,
	1790, 0, 1791, 1792, 308, 411, 0, 0, 1700, 981,
	0, 739, 753, 734, 0, 742, 0, 0, 1327, 0,
	0, 0, 722, 753, 724, 0, 742, 812, 789, 0,
	767, 0, 0, 376, 0, 387, 381, 0, 388, 383,
	384, 0, 0, 405, 407, 408, 409, 394, 395, 660,
	362, 363, 354, 355, 356, 357, 358, 359, 360, 361,
	0, 0, 0, 365, 146, 0, 334, 335, 0, 0,
	0, 190, 191, 192, 193, 194, 195, 197, 181, 685,
	687, 1093, 1105, 0, 1096, 0, 200, 241, 173, 0,
	0, 0, 1704, 1705, 1706, 1707, 1708, 1713, 0, 1715,
	1717, 1719, 1721, 0, 1739, -2, -2, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1724,
	1737, 1738, 0, 0, 0, 0, 0, 0, 1735, 1735,
	1730, 0, 1490, 1321, 1322, 1468, 0, 0, 1504, 1508,
	0, 0, 0, 0, 0, 0, 1124, 1823, 0, 137,
	1694, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607,
	1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617,
	1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627,
	0, 0, 1703, 0, 0, 0, 1696, 1697, 0, 0,
	0, 1587, 0, 0, 1593, 1594, 1595, 0, 748, 0,
	1660, 1633, 1651, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 904, 0, 757, 759, 760, 786, 767, 793,
	0, 0, 0, 96, 101, 0, 1179, 0, 0, 0,
	0, 0, 0, 0, 74, 1153, 75, 1155, 328, 329,
	0, 0, 323, 0, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 1029, 1030, 516, 1087, 0, 0,
	0, 1103, 1128, 1136, 0, 0, 0, 0, 0, 1185,
	1015, 1020, 1021, 1022, 1016, 1017, 1023, 1024, 0, 808,
	0, 0, 917, 581, 640, 641, 873, 588, 1970, 593,
	872, 872, 600, 594, 601, 644, 602, 603, 604, 642,
	872, 872, 814, 639, 642, 627, 643, 642, 1327, 631,
	0, 638, 1327, 656, 1327, 0, 654, 608, 609, 1187,
	810, 428, 429, 434, 436, 0, 485, 485, 485, 468,
	485, 0, 0, 456, 1844, 0, 0, 0, 0, 465,
	1844, 0, 0, 1844, 1844, 1844, 1844, 1844, 1844, 1844,
	0, 0, 1844, 1844, 1844, 1844, 1844, 1844, 1844, 1844,
	1844, 1844, 1844, 0, 1844, 1844, 1844, 1844, 1844, 1304,
	1844, 0, 484, 1150, 475, 476, 477, 478, 483, 0,
	0, 512, 0, 0, 1028, 0, 516, 0, 0, 1070,
	0, 0, 885, 0, 886, 887, 888, 883, 919, 943,
	943, 0, 943, 923, 1327, 0, 0, 0, 273, 274,
	262, 0, 263, 0, 0, 276, 277, 0, 279, 280,
	281, 288, 1910, 1986, 283, 285, 0, 0, 289, 302,
	303, 304, 0, 0, 294, 295, 0, 0, 348, 349,
	351, 0, 767, 1154, 682, 1323, 683, 684, 688, 0,
	0, 691, 692, 693, 694, 695, 995, 0, 0, 1079,
	1080, 1081, 1082, 872, 0, 881, 0, 877, 949, 0,
	951, 0, 872, 0, 119, 19, 0, 112, 109, 0,
	0, 0, 0, 0, 1819, 1768, 1840, 0, 0, 0,
	1821, 0, 0, 0, 0, 0, 102, 769, 729, 0,
	733, 750, 0, 754, 0, 0, 746, 738, 743, 0,
	0, 763, 730, 1326, 0, 0, 0, 723, 0, 0,
	728, 767, 0, 790, 819, 820, 823, 1384, 0, 389,
	385, 404, 0, 518, 0, 0, 0, 184, 1090, 0,
	185, 189, 179, 0, 0, 0, 1095, 0, 1092, 1097,
	0, 199, 0, 0, 174, 175, 1170, 1179, 0, 0,
	0, 1714, 1716, 1718, 1720, 1722, 0, 1725, 1735, 1735,
	1731, 0, 1726, 0, 1728, 0, 1704, 1474, 0, 1509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 823,
	0, 0, 1577, 1578, 0, 0, 1582, 0, 1584, 1585,
	1586, 1588, 0, 0, 0, 1592, 0, 1631, 1652, 1635,
	1638, 0, 1642, 0, 1644, 1646, 1647, 1648, 0, 817,
	817, 0, 0, 1548, 1548, 1548, 0, 0, 0, 0,
	1548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 1494, 1495, 0, 0, 0, 905,
	787, 0, 0, 0, 0, 0, 1177, 0, 86, 0,
	0, 0, 0, 91, 0, 0, 76, 330, 318, 320,
	0, 0, 1141, 0, 0, 0, 0, 0, 983, 984,
	986, 0, 989, 990, 991, 995, 810, 0, 810, 1040,
	1844, 520, 0, 0, 1089, 0, 1059, 0, 0, 0,
	-2, 0, 0, 1136, 0, 0, 0, 1189, 0, 0,
	0, 707, 711, 23, 811, 0, 586, 0, 587, 639,
	595, 596, 872, 619, 620, 0, 0, 872, 639, 639,
	630, 642, 651, 0, 652, 1327, 1189, 0, 0, 1149,
	1255, 1223, 446, 0, 1339, 1340, 486, 0, 1346, 1355,
	1140, 1416, 0, 1355, 0, 0, 1357, 1358, 0, 0,
	0, 0, 469, 470, 0, 455, 0, 0, 0, 0,
	0, 0, 454, 0, 0, 496, 0, 0, 0, 0,
	0, 1845, 1844, 1844, 0, 463, 464, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 1844, 1844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1295, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	1312, 0, 1040, 1844, 0, 0, 0, 0, 520, 1084,
	1057, 1075, 0, 432, 433, 493, 0, 0, 0, 0,
	0, 0, 909, 0, 0, 0, 908, 0, 0, 0,
	0, 0, 0, 810, 944, 0, 946, 947, 921, -2,
	0, 885, 926, 1699, 0, 266, 267, 0, 0, 272,
	290, 292, 264, 0, 0, 0, 291, 293, 297, 298,
	347, 350, 352, 829, 0, 0, 1213, 0, 996, 997,
	999, 1000, 0, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1894, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 994, 699,
	863, 875, 882, 950, 952, 137, 878, 863, 0, 122,
	19, 121, 113, 114, 0, 19, 0, 0, 0, 0,
	1829, 1828, 1814, 0, 1815, 1826, 1831, 0, 1834, 0,
	415, 773, 0, 0, 753, 755, 0, 0, 753, 0,
	0, 762, 0, 0, 0, 0, 0, 0, 753, 829,
	769, 0, 826, 824, 825, 0, 0, 661, 147, 410,
	0, 0, 0, 0, 0, 686, 0, 1094, 181, 0,
	0, 201, 0, 0, 0, 1179, 1174, 1698, 1727, 1729,
	0, 1736, 1732, 1469, 1478, 1505, 0, 0, 1511, 1523,
	1523, 0, 0, 0, 1514, 1827, 1827, 1517, 1823, 1825,
	1823, 1523, 1523, 0, 1125, 0, 1126, 823, 138, 0,
	0, 1583, 0, 0, 0, 749, 0, 0, 0, 1544,
	1546, 1548, 1548, 1555, 1549, 1556, 1557, 1548, 1548, 1548,
	1548, 1562, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
	1548, 1548, 1548, 1542, 0, 0, 1757, 1758, 758, 0,
	0, 800, 801, 802, 803, 804, 0, 0, 61, 61,
	1179, 0, 95, 87, 0, 0, 0, 0, 0, 322,
	0, 77, 78, 0, 0, 85, 0, 0, 0, 0,
	0, 988, 0, 0, 0, 1332, 0, 1044, 1041, 1042,
	1043, 0, 1084, 521, 522, 523, 524, 0, 0, 0,
	1088, 0, 0, 1052, 0, 0, 0, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, -2, 1144, 0, 0, 0, 1332,
	1163, 0, 0, 1168, 1332, 1332, 0, 1197, 0, 1186,
	761, 0, -2, 0, 0, 709, 0, 0, 918, 589,
	872, 613, 815, 816, 1327, 872, 872, 639, 657, 653,
	1197, 1188, 0, 435, 485, 0, 1243, 0, 0, 1249,
	0, 1256, 439, 0, 487, 0, 1345, 1372, 1356, 1372,
	1417, 1372, 1372, 1140, 0, 487, 0, 0, 457, 0,
	0, 0, 0, 0, 453, 490, 823, 440, 442, 443,
	444, 494, 495, 497, 0, 499, 500, 459, 471, 472,
	473, 474, 0, 0, 0, 466, 479, 480, 481, 482,
	441, 1272, 1273, 1274, 1277, 1278, 1279, 1280, 0, 0,
	1283, 1284, 1285, 1286, 1287, 1369, 1370, 1371, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1313, 1314, 1315, 1316, 1317,
	1318, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 0,
	0, 1308, 0, 0, 0, 1044, 0, 0, 0, 0,
	0, 1084, 515, 0, 0, 1059, 0, 1077, 0, 1071,
	1072, 0, 0, 731, 872, 340, 0, 913, 906, 0,
	892, 893, 910, 894, 911, 912, 898, 0, 900, 0,
	896, 897, 895, 872, 884, 920, 945, 922, 925, 927,
	928, 934, 0, 0, 0, 0, 260, 269, 270, 271,
	278, 0, 540, 284, 785, 0, 1324, 689, 690, 1214,
	1215, 697, 0, 1001, 861, 0, 0, 861, 117, 120,
	0, 115, 0, 0, 0, 0, 107, 105, 1822, 0,
	0, 775, 161, 0, 0, 0, 751, 0, 756, 753,
	737, 747, 736, 744, 745, 764, 1328, 1329, 1330, 1331,
	753, 727, 726, 788, 773, 821, 822, 0, 1385, 377,
	0, 1091, 181, 186, 187, 188, 182, 180, 1098, 0,
	1100, 0, 1172, 0, 0, 1733, 1510, 1479, 1512, 1524,
	1525, 1513, 0, 1481, 1482, 1515, 1516, 1518, 1519, 1520,
	1521, 1522, 1483, 0, 1127, 1579, 0, 1581, 1589, 1590,
	0, 1639, 1643, 0, 0, 0, 0, 0, 1553, 1554,
	1558, 1559, 1560, 1561, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 817, 1543, 0, 0, 0,
	0, 0, 0, 0, 798, 0, 0, 0, 63, 0,
	63, 1178, 1180, 0, 948, 0, 0, 92, 0, 0,
	79, 80, 0, 0, 0, 976, 979, 985, 987, 0,
	0, 0, 1333, 1334, 1336, 1337, 1338, 0, 1012, 0,
	0, 1032, 1033, 1034, 1046, 0, 526, 527, 0, 0,
	0, 539, 535, 536, 537, 517, 1083, 1066, 0, 0,
	1055, 0, 0, 1065, 0, 1145, 1844, 1844, 1844, 0,
	0, 1257, 1844, 1844, 0, 1165, 1167, 0, 0, 1261,
	1200, 0, 0, 1191, 0, 943, 0, 0, 872, 708,
	711, 712, 809, 590, 628, 632, 629, 872, 1200, 427,
	1221, 0, 0, 0, 0, 0, 1253, 0, 0, 1225,
	0, 458, 488, 0, -2, 0, 1373, 0, 1359, 1373,
	0, 0, 1372, 0, 447, 487, 0, 0, 0, 501,
	505, 506, 0, 503, 1412, 0, 504, 0, 492, 0,
	498, 1275, 1276, 0, 1281, 1282, 0, 1306, 0, 0,
	0, 438, 507, 0, 0, 0, 508, 509, 514, 1085,
	1086, 1052, 0, 1066, 0, 1076, 0, 1073, 1074, 817,
	0, 0, 889, 914, 0, 0, 890, 0, 891, 899,
	901, 339, 929, 0, 0, 931, 932, 933, 924, 286,
	830, 998, 0, 851, 0, 0, 879, 852, 0, 19,
	0, 0, 110, 1832, 1835, 777, 0, 774, 162, 0,
	0, 0, 0, 741, 752, 735, 725, 775, 827, 828,
	183, 178, 1099, 1182, 0, 1173, 0, 1436, 1492, 0,
	1591, 0, 1548, 1545, 1548, 1547, 1539, 0, 1496, 0,
	1498, 1499, 1500, 0, 1502, 1503, 0, 796, 0, 59,
	0, 62, 60, 0, 94, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 1261, 0, 1018, 1045, 1031,
	0, 0, 528, 529, 0, 532, 538, 1047, 0, 0,
	1049, 1050, 1051, 0, 0, 1063, 0, 0, 0, 0,
	1137, 1151, 0, 0, 0, -2, 0, -2, 1162, 0,
	1206, 0, 1198, 0, 1190, 0, 1193, 872, 872, -2,
	705, 710, 0, 633, 1206, 1223, 0, 1244, 0, 0,
	0, 0, 0, 0, 0, 1224, 0, 1237, 489, 1374,
	-2, 1388, 1390, 0, 1150, 1393, 1394, 0, 0, 0,
	0, 0, 0, 1443, 1402, 0, 0, 1406, 1407, 1408,
	0, 0, 1411, 0, 1751, 1752, 0, 1415, 0, 0,
	0, 0, 0, 0, 0, 1353, 448, 449, 0, 451,
	452, 1844, 1413, 491, 445, 1844, 461, 1305, 1309, 1310,
	1307, 513, 510, 511, 1055, 1058, 1069, 1078, 732, 812,
	341, 342, 915, 0, 907, 938, 935, 0, 0, 1002,
	862, 870, 2198, 2200, 2197, 111, 116, 0, 0, 779,
	0, 776, 0, 770, 772, 172, 740, 777, 132, 164,
	0, 0, 1480, 0, 0, 0, 1580, 1630, 1551, 1552,
	0, 1540, 0, 1534, 1535, 1536, 1541, 0, 0, 799,
	794, 64, 90, 0, 93, 68, 81, 0, 0, 0,
	0, 1004, 1011, 1025, 1156, 1335, 1010, 0, 0, 525,
	530, 0, 533, 534, 1067, 1066, 0, 1053, 1054, 0,
	1061, 0, 0, 1146, 1147, 1148, 1258, 1259, 1260, 1216,
	1164, 0, -2, 1269, 0, 0, 1160, 1182, 1216, 0,
	0, 1194, 0, 1201, 0, 1199, 1192, 817, 706, 1203,
	437, 1255, 1245, 0, 1247, 0, 0, 0, 0, 1226,
	-2, 0, 1389, 1391, 1392, 1395, 1396, 1397, 1448, 1449,
	1450, 0, 0, 1400, 1445, 1446, 1447, 1401, 0, 0,
	0, 0, 0, 1749, 1750, 1441, 0, 0, 1360, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1361, 0, 0, 0,
	1352, 1354, 450, 0, 0, 1844, 1068, 338, 0, 0,
	939, 941, 936, 937, 864, 0, 0, 0, 0, 106,
	108, 123, 0, 778, 163, 0, 779, 134, 0, 155,
	0, 1183, 0, 1491, 0, 0, 0, 1550, 1537, 0,
	0, 0, 0, 0, 1753, 1754, 1755, 0, 1497, 1501,
	89, 0, 66, 0, 82, 83, 0, 0, 0, 1026,
	1027, 1035, 1036, 0, 1038, 1039, 531, 1048, 1056, 1060,
	1063, 0, 1115, 1218, 0, 1166, 1149, 1271, 1844, 1169,
	1218, 0, 1263, 1844, 1844, 1184, 0, 1196, 0, 1208,
	0, 1202, 812, 426, 0, 1205, 1241, 1246, 1248, 1250,
	0, 1254, 1252, 1227, -2, 0, 1235, 0, 0, 1398,
	1399, 0, 0, 1649, 1844, 0, 1431, 0, 1115, 1115,
	1115, 1115, 0, 502, 460, 0, 916, 930, 0, 871,
	0, 0, 0, 0, 0, 768, 124, 0, 133, 152,
	0, 165, 166, 0, 0, 0, 0, 1175, 0, 1439,
	1440, 0, 1526, 0, 0, 0, 1530, 1531, 1532, 1533,
	65, 68, 0, 0, 0, 1003, 0, 1037, 1062, 1064,
	1114, 1159, 0, 1255, 1270, 0, 1161, 1262, 0, 0,
	0, 1195, 1207, 0, 1210, 704, 1204, 1222, 0, 1251,
	1228, 1236, 0, 1231, 0, 0, 0, 1444, 0, 1405,
	0, 1410, 1419, 1432, 0, 0, 1341, 0, 1343, 0,
	1347, 0, 1349, 0, 0, 462, 940, 942, 0, 1699,
	866, 867, 0, 781, 771, 135, 139, 0, 161, 158,
	0, 167, 0, 0, 0, 0, 1171, 0, 1437, 0,
	1527, 1528, 1529, 67, 69, 84, 0, 1005, 1006, 1019,
	1116, 1844, 1844, 0, 0, 0, 1122, 1123, 0, 1243,
	1275, 1264, 1265, 1266, 1209, 1242, 1230, 0, -2, 1238,
	0, 0, 1701, 1711, 1712, 1403, 1409, 1418, 1420, 1421,
	0, 1433, 1434, 1435, 1442, 1115, 1115, 1115, 1115, 1351,
	865, 0, 0, 780, 0, 126, 0, 0, 156, 157,
	159, 0, 168, 0, 170, 171, 0, 0, 1538, 1007,
	0, 0, 1119, 1120, 0, 1219, 0, 1221, 1232, -2,
	0, 1240, 0, 1404, 1422, 0, 1423, 0, 0, 0,
	1342, 1344, 1348, 1350, 1699, 868, 782, 1181, 0, 140,
	0, 142, 144, 145, 1375, 153, 154, 160, 169, 0,
	0, 992, 1008, 0, 1117, 1118, 1121, 0, 1223, 1239,
	1702, 1424, 1426, 1427, 0, 0, 1425, 0, 127, 128,
	0, 141, 0, 0, 1176, 1438, 1009, 1220, 1217, 1428,
	1430, 1429, 869, 0, 0, 143, 1376, 129, 130, 131,
	0, 1377,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 117, 3, 3, 3, 148, 140, 3,
	84, 85, 145, 143, 158, 144, 157, 146, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 654, 651,
	127, 126, 128, 3, 655, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 150, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 652, 139, 653, 151,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 118, 119, 120, 121, 122, 123, 124,
	125, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 141, 142, 147, 149, 152, 153, 154, 155, 156,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:841
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:848
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:854
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:862
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:887
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:902
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:939
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:953
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:964
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:976
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:985
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:989
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:995
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1009
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1021
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1028
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1036
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1050
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1066
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1074
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1082
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1092
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1102
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1114
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1124
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1134
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1145
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1156
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1170
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1178
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1186
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1194
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1225
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1233
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1252
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1262
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1272
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1292
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1298
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1305
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1313
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1319
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1328
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1346
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1354
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1372
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1380
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1390
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1397
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1406
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1416
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1420
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1426
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1430
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1436
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1445
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1455
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1459
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1465
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1474
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1484
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1505
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1519
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1526
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1530
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1536
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1540
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1546
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1553
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1561
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1565
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1577
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1581
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1595
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1599
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1604
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1619
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1625
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1634
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1645
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1649
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1655
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1659
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1665
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1669
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1675
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1695
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1714
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1718
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1722
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1727
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1731
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1740
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1750
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1757
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1762
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1769
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1774
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1778
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1806
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1810
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1816
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1824
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1844
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1863
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1888
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1901
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1905
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1911
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1924
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1935
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1948
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1952
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1962
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1975
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1988
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1994
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2000
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2008
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2018
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2055
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2059
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2072
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2081
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2085
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2091
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2291
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2306
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2315
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2322
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2329
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2338
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2356
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2360
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2366
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2381
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2389
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2393
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2399
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2403
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2409
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2416
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2423
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2432
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2462
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2470
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2476
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2482
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2486
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2493
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2499
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2503
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2526
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2535
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2551
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2574
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2600
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2607
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2622
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2629
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2638
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2642
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2646
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2652
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2656
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2662
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2666
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2672
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2676
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2687
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2693
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2698
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2702
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2706
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2710
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2714
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2722
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2726
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2730
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2736
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2740
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2753
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2758
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2764
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2777
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2790
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2803
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2816
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2832
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2839
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2850
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2861
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2865
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2871
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2881
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2887
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2891
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2897
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2903
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2907
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2911
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2915
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2921
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2934
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2940
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2950
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2954
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2960
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2966
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2977
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2983
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2987
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2991
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2995
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3003
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3011
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3019
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3029
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3037
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3047
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3057
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3073
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3077
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3085
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3093
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3133
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3137
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3143
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3149
		{
			yyVAL.str = yyDollar[1].str
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3154
		{
			yyVAL.str = "true"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3155
		{
			yyVAL.str = "false"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3156
		{
			yyVAL.str = yyDollar[1].str
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3161
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3167
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3176
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3183
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3191
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3195
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3220
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3243
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3253
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3260
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3269
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3277
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3281
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3287
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3298
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3302
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3308
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3312
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3336
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3346
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3356
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3372
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3390
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3394
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3400
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3404
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3410
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3416
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3424
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3434
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3442
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3452
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3462
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3472
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3479
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3483
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3487
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3491
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3495
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3502
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3508
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3512
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3516
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3520
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3524
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3528
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3532
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3536
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3541
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3572
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3576
		{
			yyVAL.str = string("COLUMN")
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3581
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3587
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3593
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3601
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3605
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3611
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3619
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3626
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3632
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3638
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3644
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3650
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3657
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3664
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3672
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3678
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3690
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3696
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3704
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3708
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3715
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3733
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3748
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3763
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3778
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3791
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3797
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3808
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3820
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3833
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3837
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3845
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3849
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3854
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3858
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3874
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3878
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3882
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3886
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3893
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3897
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3901
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3905
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3912
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3916
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3923
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3927
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3931
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3935
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3942
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3949
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3955
		{
			yyVAL.item = nil
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3960
		{
			yyVAL.item = nil
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4008
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4014
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4020
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4026
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4035
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4043
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4051
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4059
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4063
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4067
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4078
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4082
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4088
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4093
		{
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4097
		{
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4102
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4112
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4122
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4130
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4136
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4142
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4148
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4154
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4160
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4166
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4175
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4179
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4187
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4191
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4199
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4203
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4209
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4218
		{
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4220
		{
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4229
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4239
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4248
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4252
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4256
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4262
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4268
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4274
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4280
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4289
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4300
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4312
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4320
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4326
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4338
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4352
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4358
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4364
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4371
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4375
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4380
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4384
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4388
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4393
		{
			yyVAL.str = ""
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4397
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4403
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4418
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4422
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4428
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4436
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4443
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4451
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4457
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4463
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4468
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4476
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4482
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4487
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4493
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4499
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4503
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4531
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4539
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4547
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4555
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4559
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4565
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4578
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4586
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4595
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4601
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4609
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4617
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4625
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4631
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4639
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4645
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4653
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4659
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4669
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4674
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4681
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4697
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4710
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4721
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4725
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4731
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4737
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4746
		{
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4748
		{
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4751
		{
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4760
		{
		}
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4764
		{
		}
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4769
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4778
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4785
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4791
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4799
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4806
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4813
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4833
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4841
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4851
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4855
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4861
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4868
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4874
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4882
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4889
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4896
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4915
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4919
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4923
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4928
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4932
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4936
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4942
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4951
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4955
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4961
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4965
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4971
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4975
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4981
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4986
		{
		}
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4990
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4997
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5001
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5008
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5013
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5017
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5023
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5027
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5033
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5037
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5042
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5046
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5059
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5070
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5081
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5103
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5126
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5134
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5143
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5147
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5160
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5164
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5169
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5173
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5180
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5185
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5192
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5198
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5202
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5206
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5210
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5214
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5218
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5223
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5227
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5233
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5243
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5258
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5262
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5276
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5280
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5286
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5295
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5299
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5303
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5307
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5311
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5317
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5324
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5333
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5337
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5343
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5351
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5355
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5360
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5364
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5374
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5378
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5383
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5387
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5393
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5399
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5403
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5409
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5414
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5418
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5422
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5431
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5435
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5440
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5444
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5452
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5456
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5460
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5474
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5478
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5488
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5498
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5508
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5520
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5528
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5536
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5545
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5553
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5561
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5569
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5577
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5585
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5593
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5601
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5609
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5619
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5630
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5644
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5648
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 855:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5652
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5657
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5661
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5665
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5674
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5678
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5683
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5687
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5697
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5706
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5715
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5726
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5730
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5735
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5739
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5744
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5748
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5754
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5758
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5764
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5768
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5772
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5776
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5781
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5789
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5795
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5803
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5813
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5823
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5827
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5833
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5842
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5851
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5860
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5870
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5880
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5884
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5890
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5894
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5904
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5908
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5912
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 901:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5916
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 902:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5922
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5933
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5937
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5943
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5949
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5953
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5959
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5965
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5969
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5973
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5977
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5983
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5987
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5993
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5997
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6003
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6007
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6013
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6017
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6027
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6040
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6046
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6052
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6066
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6077
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6084
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6088
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6094
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6104
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6108
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6112
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6117
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6121
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6125
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6129
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6134
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6138
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6142
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6146
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6150
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6155
		{
			yyVAL.str = ""
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6159
		{
			yyVAL.str = yyDollar[1].str
		}
	case 945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6163
		{
			yyVAL.str = yyDollar[2].str
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6169
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6173
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6178
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6182
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6186
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6190
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6194
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6200
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 976:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6242
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6255
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6261
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 979:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6267
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6280
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6285
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6292
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6299
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6303
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6309
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6315
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6320
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6324
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6328
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6332
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6339
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6372
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6377
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6384
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6391
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6395
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6401
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6407
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6411
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6415
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6421
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6427
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6433
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6437
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6443
		{
			yyVAL.str = ""
		}
	case 1009:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6450
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1010:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6456
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6471
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6488
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6505
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6509
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6515
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6519
		{
			yyVAL.str = "DEFINER = "
		}
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6523
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1018:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6528
		{
			yyVAL.str = ""
		}
	case 1019:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6532
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1025:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6546
		{
			yyVAL.str = ""
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6554
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6560
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6565
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6571
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6584
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6589
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6594
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6600
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6607
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6614
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6621
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6628
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6636
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6642
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6649
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6656
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6664
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6670
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6679
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6696
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6712
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6731
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6737
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6746
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6764
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6770
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6777
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6785
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6791
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6799
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6805
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6813
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6819
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6828
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6832
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6837
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6841
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6848
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6853
		{
			yyVAL.str = ""
		}
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6857
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1068:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6863
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6876
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6887
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6891
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6897
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6903
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6909
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6916
		{
			yyVAL.str = ""
		}
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6920
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6925
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6929
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6935
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6943
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6951
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6959
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6967
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6972
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6984
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6995
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7104
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7108
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7114
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7127
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7131
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7137
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7150
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7154
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7158
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7163
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7167
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7173
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7180
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7186
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7195
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7202
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7213
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7217
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7223
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7232
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7236
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7240
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7245
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7249
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7253
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7257
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7263
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7294
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7298
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7324
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7330
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7342
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7348
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7354
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7360
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7366
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7374
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7378
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7384
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7398
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7412
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7416
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7420
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7424
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7428
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7432
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7436
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7442
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7457
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7461
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7472
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7476
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7481
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7485
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7491
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7495
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7501
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7510
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7519
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7525
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7529
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7535
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7546
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7552
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7570
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7588
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7606
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7622
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7626
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7635
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7647
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7656
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7668
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7678
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7688
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7699
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7709
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7720
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7728
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7739
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7746
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7756
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7769
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7777
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7786
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7795
		{
			yyVAL.str = ""
		}
	case 1176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7799
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7805
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7809
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7814
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7818
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7825
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7837
		{
			yyVAL.str = ""
		}
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7841
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1184:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7847
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7868
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7882
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7886
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7890
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7896
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7900
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7907
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7914
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7921
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7928
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7932
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7936
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7940
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7944
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7951
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7958
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7962
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7969
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7976
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7980
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7986
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7992
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7996
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8003
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8010
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8017
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8024
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8028
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8033
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8037
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8041
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8046
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8050
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8063
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8067
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8075
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8083
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8087
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8099
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8103
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8109
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8113
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8119
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8132
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8146
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8150
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8156
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8160
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8166
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8175
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8186
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8190
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8195
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8199
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8205
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8210
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8218
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8222
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8232
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8236
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8247
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8255
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8263
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8271
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8282
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8291
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8301
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8311
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8315
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8320
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8324
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8330
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8334
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8340
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8349
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8359
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8363
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8369
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8373
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8379
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8388
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8398
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8402
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8408
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8412
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8416
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8422
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8426
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8430
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8434
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8438
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8442
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8446
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8451
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8455
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8459
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8463
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8467
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8471
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8475
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8479
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8483
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8487
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8491
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8495
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8499
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8505
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8511
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8515
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8519
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8523
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8527
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8533
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8539
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8545
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8551
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8557
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8563
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8567
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8571
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8575
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8580
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8591
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8595
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8601
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8612
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8616
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8622
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8626
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8630
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8634
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8638
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8642
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8656
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8660
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8669
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8675
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8683
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8687
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8694
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8703
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8711
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8719
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8726
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8730
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8736
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8740
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8744
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8750
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8754
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8760
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8773
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8786
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8825
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8865
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8879
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8885
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8898
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8911
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8924
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8937
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8952
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8962
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8968
		{
			yyVAL.str = ""
		}
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8972
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8982
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8988
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8994
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9015
		{
			yyVAL.str = ""
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9019
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9025
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9031
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9035
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9040
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9048
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9052
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9056
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9060
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9066
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9072
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9076
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9081
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9088
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9092
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9098
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9102
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9108
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9112
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9116
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9120
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9124
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9128
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9133
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9137
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9141
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9145
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9149
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9153
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9157
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9161
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9165
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9169
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9183
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9187
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9191
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9195
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9199
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9203
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9209
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9213
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9218
		{
			yyVAL.str = ""
		}
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9222
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9228
		{
			yyVAL.str = ""
		}
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9232
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1418:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9238
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9255
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9262
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9269
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9276
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9283
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9292
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9298
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9304
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9308
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9312
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9316
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9320
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9325
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9332
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9336
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9340
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9345
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9349
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9353
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9357
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9361
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9366
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9370
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9375
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9379
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9395
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9401
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9405
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9409
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9413
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9417
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9421
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9425
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9429
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9433
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9437
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9441
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9445
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9449
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9455
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9459
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9463
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9467
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9471
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9475
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9479
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9483
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9487
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9491
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9533
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9537
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9541
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9546
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9554
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9558
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9562
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9566
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9570
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9580
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9584
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9588
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9592
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9596
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9600
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9604
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9608
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9621
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1493:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9627
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9636
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9645
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9656
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9666
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9676
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9685
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9695
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9705
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9715
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9724
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9734
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9738
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9743
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9747
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9753
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9757
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9763
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9772
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9784
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9801
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9818
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9831
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9844
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9856
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9870
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9885
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9900
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9917
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9932
		{
		}
	case 1527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9939
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9943
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9947
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9953
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9957
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9961
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9965
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9971
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9975
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9979
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9985
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9993
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10003
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10007
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10014
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10019
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10023
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10028
		{
			yyVAL.str = ","
		}
	case 1545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10032
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10037
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10041
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1548:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10046
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10053
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10079
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10091
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10103
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10114
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10125
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10136
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10146
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10156
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10167
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10178
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10189
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10200
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10211
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10222
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10233
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10244
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10255
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10266
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10277
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10288
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10299
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10310
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10321
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10345
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10354
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10363
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10372
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10381
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10392
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10401
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10411
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10420
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10429
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10438
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10447
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10459
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10470
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10483
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10495
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10518
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10554
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10567
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10580
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10592
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10601
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10609
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10617
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10630
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10639
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10650
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10661
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10670
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10682
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10692
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10702
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10711
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10722
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10731
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10741
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10750
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10759
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10769
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10773
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10779
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10783
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10802
		{
		}
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10804
		{
		}
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10845
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10857
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10861
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10865
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10871
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10876
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10880
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10886
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10890
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10896
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10900
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10907
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10911
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10915
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10924
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10928
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10932
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10937
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10941
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10947
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10951
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10955
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10959
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10963
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10967
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10971
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10975
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10979
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10983
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10991
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10995
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10999
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11003
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11007
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11011
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11015
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11019
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11023
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11027
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11033
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11037
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11043
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11047
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11054
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11058
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11062
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11068
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11072
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11076
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11080
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11084
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11088
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11092
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11098
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11102
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11106
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11110
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11116
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11129
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11134
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11140
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11144
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11157
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11162
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11166
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11170
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11174
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11178
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11185
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11189
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11193
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11197
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11204
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11215
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11220
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11226
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11238
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11250
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11262
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11275
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11288
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11301
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11314
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11327
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11340
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11353
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11366
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11379
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11392
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11407
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11434
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11476
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11512
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11548
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11565
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11577
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11597
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11617
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11637
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11653
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11666
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11679
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11692
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11705
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11717
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11729
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11741
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11753
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11765
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11777
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11789
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11801
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11813
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11825
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11838
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11851
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11864
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11877
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11892
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11900
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11909
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11919
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11942
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11947
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11953
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11960
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11964
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11969
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11973
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11979
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11985
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11992
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11999
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12008
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12015
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12022
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12031
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12035
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12039
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12045
		{
		}
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12047
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12057
		{
			yyVAL.str = ""
		}
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12061
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
