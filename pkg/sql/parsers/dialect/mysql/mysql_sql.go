// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const SNAPSHOTS = 57437
const INTEGRAL = 57438
const HEX = 57439
const FLOAT = 57440
const HEXNUM = 57441
const BIT_LITERAL = 57442
const NULL = 57443
const TRUE = 57444
const FALSE = 57445
const LOWER_THAN_CHARSET = 57446
const CHARSET = 57447
const UNIQUE = 57448
const KEY = 57449
const OR = 57450
const PIPE_CONCAT = 57451
const XOR = 57452
const AND = 57453
const NOT = 57454
const BETWEEN = 57455
const CASE = 57456
const WHEN = 57457
const THEN = 57458
const ELSE = 57459
const END = 57460
const ELSEIF = 57461
const LOWER_THAN_EQ = 57462
const LE = 57463
const GE = 57464
const NE = 57465
const NULL_SAFE_EQUAL = 57466
const IS = 57467
const LIKE = 57468
const REGEXP = 57469
const IN = 57470
const ASSIGNMENT = 57471
const ILIKE = 57472
const SHIFT_LEFT = 57473
const SHIFT_RIGHT = 57474
const DIV = 57475
const MOD = 57476
const UNARY = 57477
const COLLATE = 57478
const BINARY = 57479
const UNDERSCORE_BINARY = 57480
const INTERVAL = 57481
const OUT = 57482
const INOUT = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const WORK = 57489
const CONSISTENT = 57490
const SNAPSHOT = 57491
const CHAIN = 57492
const NO = 57493
const RELEASE = 57494
const PRIORITY = 57495
const QUICK = 57496
const BIT = 57497
const TINYINT = 57498
const SMALLINT = 57499
const MEDIUMINT = 57500
const INT = 57501
const INTEGER = 57502
const BIGINT = 57503
const INTNUM = 57504
const REAL = 57505
const DOUBLE = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const DECIMAL_VALUE = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const UUID = 57531
const VECF32 = 57532
const VECF64 = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const INT1 = 57542
const INT2 = 57543
const INT3 = 57544
const INT4 = 57545
const INT8 = 57546
const S3OPTION = 57547
const STAGEOPTION = 57548
const SQL_SMALL_RESULT = 57549
const SQL_BIG_RESULT = 57550
const SQL_BUFFER_RESULT = 57551
const LOW_PRIORITY = 57552
const HIGH_PRIORITY = 57553
const DELAYED = 57554
const CREATE = 57555
const ALTER = 57556
const DROP = 57557
const RENAME = 57558
const ANALYZE = 57559
const ADD = 57560
const RETURNS = 57561
const SCHEMA = 57562
const TABLE = 57563
const SEQUENCE = 57564
const INDEX = 57565
const VIEW = 57566
const TO = 57567
const IGNORE = 57568
const IF = 57569
const PRIMARY = 57570
const COLUMN = 57571
const CONSTRAINT = 57572
const SPATIAL = 57573
const FULLTEXT = 57574
const FOREIGN = 57575
const KEY_BLOCK_SIZE = 57576
const SHOW = 57577
const DESCRIBE = 57578
const EXPLAIN = 57579
const DATE = 57580
const ESCAPE = 57581
const REPAIR = 57582
const OPTIMIZE = 57583
const TRUNCATE = 57584
const MAXVALUE = 57585
const PARTITION = 57586
const REORGANIZE = 57587
const LESS = 57588
const THAN = 57589
const PROCEDURE = 57590
const TRIGGER = 57591
const STATUS = 57592
const VARIABLES = 57593
const ROLE = 57594
const PROXY = 57595
const AVG_ROW_LENGTH = 57596
const STORAGE = 57597
const DISK = 57598
const MEMORY = 57599
const CHECKSUM = 57600
const COMPRESSION = 57601
const DATA = 57602
const DIRECTORY = 57603
const DELAY_KEY_WRITE = 57604
const ENCRYPTION = 57605
const ENGINE = 57606
const MAX_ROWS = 57607
const MIN_ROWS = 57608
const PACK_KEYS = 57609
const ROW_FORMAT = 57610
const STATS_AUTO_RECALC = 57611
const STATS_PERSISTENT = 57612
const STATS_SAMPLE_PAGES = 57613
const DYNAMIC = 57614
const COMPRESSED = 57615
const REDUNDANT = 57616
const COMPACT = 57617
const FIXED = 57618
const COLUMN_FORMAT = 57619
const AUTO_RANDOM = 57620
const ENGINE_ATTRIBUTE = 57621
const SECONDARY_ENGINE_ATTRIBUTE = 57622
const INSERT_METHOD = 57623
const RESTRICT = 57624
const CASCADE = 57625
const ACTION = 57626
const PARTIAL = 57627
const SIMPLE = 57628
const CHECK = 57629
const ENFORCED = 57630
const RANGE = 57631
const LIST = 57632
const ALGORITHM = 57633
const LINEAR = 57634
const PARTITIONS = 57635
const SUBPARTITION = 57636
const SUBPARTITIONS = 57637
const CLUSTER = 57638
const TYPE = 57639
const ANY = 57640
const SOME = 57641
const EXTERNAL = 57642
const LOCALFILE = 57643
const URL = 57644
const PREPARE = 57645
const DEALLOCATE = 57646
const RESET = 57647
const EXTENSION = 57648
const INCREMENT = 57649
const CYCLE = 57650
const MINVALUE = 57651
const PUBLICATION = 57652
const SUBSCRIPTIONS = 57653
const PUBLICATIONS = 57654
const PROPERTIES = 57655
const PARSER = 57656
const VISIBLE = 57657
const INVISIBLE = 57658
const BTREE = 57659
const HASH = 57660
const RTREE = 57661
const BSI = 57662
const IVFFLAT = 57663
const MASTER = 57664
const ZONEMAP = 57665
const LEADING = 57666
const BOTH = 57667
const TRAILING = 57668
const UNKNOWN = 57669
const LISTS = 57670
const OP_TYPE = 57671
const REINDEX = 57672
const EXPIRE = 57673
const ACCOUNT = 57674
const ACCOUNTS = 57675
const UNLOCK = 57676
const DAY = 57677
const NEVER = 57678
const PUMP = 57679
const MYSQL_COMPATIBILITY_MODE = 57680
const MODIFY = 57681
const CHANGE = 57682
const SECOND = 57683
const ASCII = 57684
const COALESCE = 57685
const COLLATION = 57686
const HOUR = 57687
const MICROSECOND = 57688
const MINUTE = 57689
const MONTH = 57690
const QUARTER = 57691
const REPEAT = 57692
const REVERSE = 57693
const ROW_COUNT = 57694
const WEEK = 57695
const REVOKE = 57696
const FUNCTION = 57697
const PRIVILEGES = 57698
const TABLESPACE = 57699
const EXECUTE = 57700
const SUPER = 57701
const GRANT = 57702
const OPTION = 57703
const REFERENCES = 57704
const REPLICATION = 57705
const SLAVE = 57706
const CLIENT = 57707
const USAGE = 57708
const RELOAD = 57709
const FILE = 57710
const TEMPORARY = 57711
const ROUTINE = 57712
const EVENT = 57713
const SHUTDOWN = 57714
const NULLX = 57715
const AUTO_INCREMENT = 57716
const APPROXNUM = 57717
const SIGNED = 57718
const UNSIGNED = 57719
const ZEROFILL = 57720
const ENGINES = 57721
const LOW_CARDINALITY = 57722
const AUTOEXTEND_SIZE = 57723
const ADMIN_NAME = 57724
const RANDOM = 57725
const SUSPEND = 57726
const ATTRIBUTE = 57727
const HISTORY = 57728
const REUSE = 57729
const CURRENT = 57730
const OPTIONAL = 57731
const FAILED_LOGIN_ATTEMPTS = 57732
const PASSWORD_LOCK_TIME = 57733
const UNBOUNDED = 57734
const SECONDARY = 57735
const RESTRICTED = 57736
const USER = 57737
const IDENTIFIED = 57738
const CIPHER = 57739
const ISSUER = 57740
const X509 = 57741
const SUBJECT = 57742
const SAN = 57743
const REQUIRE = 57744
const SSL = 57745
const NONE = 57746
const PASSWORD = 57747
const SHARED = 57748
const EXCLUSIVE = 57749
const MAX_QUERIES_PER_HOUR = 57750
const MAX_UPDATES_PER_HOUR = 57751
const MAX_CONNECTIONS_PER_HOUR = 57752
const MAX_USER_CONNECTIONS = 57753
const FORMAT = 57754
const VERBOSE = 57755
const CONNECTION = 57756
const TRIGGERS = 57757
const PROFILES = 57758
const LOAD = 57759
const INLINE = 57760
const INFILE = 57761
const TERMINATED = 57762
const OPTIONALLY = 57763
const ENCLOSED = 57764
const ESCAPED = 57765
const STARTING = 57766
const LINES = 57767
const ROWS = 57768
const IMPORT = 57769
const DISCARD = 57770
const JSONTYPE = 57771
const MODUMP = 57772
const OVER = 57773
const PRECEDING = 57774
const FOLLOWING = 57775
const GROUPS = 57776
const DATABASES = 57777
const TABLES = 57778
const SEQUENCES = 57779
const EXTENDED = 57780
const FULL = 57781
const PROCESSLIST = 57782
const FIELDS = 57783
const COLUMNS = 57784
const OPEN = 57785
const ERRORS = 57786
const WARNINGS = 57787
const INDEXES = 57788
const SCHEMAS = 57789
const NODE = 57790
const LOCKS = 57791
const ROLES = 57792
const TABLE_NUMBER = 57793
const COLUMN_NUMBER = 57794
const TABLE_VALUES = 57795
const TABLE_SIZE = 57796
const NAMES = 57797
const GLOBAL = 57798
const PERSIST = 57799
const SESSION = 57800
const ISOLATION = 57801
const LEVEL = 57802
const READ = 57803
const WRITE = 57804
const ONLY = 57805
const REPEATABLE = 57806
const COMMITTED = 57807
const UNCOMMITTED = 57808
const SERIALIZABLE = 57809
const LOCAL = 57810
const EVENTS = 57811
const PLUGINS = 57812
const CURRENT_TIMESTAMP = 57813
const DATABASE = 57814
const CURRENT_TIME = 57815
const LOCALTIME = 57816
const LOCALTIMESTAMP = 57817
const UTC_DATE = 57818
const UTC_TIME = 57819
const UTC_TIMESTAMP = 57820
const REPLACE = 57821
const CONVERT = 57822
const SEPARATOR = 57823
const TIMESTAMPDIFF = 57824
const CURRENT_DATE = 57825
const CURRENT_USER = 57826
const CURRENT_ROLE = 57827
const SECOND_MICROSECOND = 57828
const MINUTE_MICROSECOND = 57829
const MINUTE_SECOND = 57830
const HOUR_MICROSECOND = 57831
const HOUR_SECOND = 57832
const HOUR_MINUTE = 57833
const DAY_MICROSECOND = 57834
const DAY_SECOND = 57835
const DAY_MINUTE = 57836
const DAY_HOUR = 57837
const YEAR_MONTH = 57838
const SQL_TSI_HOUR = 57839
const SQL_TSI_DAY = 57840
const SQL_TSI_WEEK = 57841
const SQL_TSI_MONTH = 57842
const SQL_TSI_QUARTER = 57843
const SQL_TSI_YEAR = 57844
const SQL_TSI_SECOND = 57845
const SQL_TSI_MINUTE = 57846
const RECURSIVE = 57847
const CONFIG = 57848
const DRAINER = 57849
const SOURCE = 57850
const STREAM = 57851
const HEADERS = 57852
const CONNECTOR = 57853
const CONNECTORS = 57854
const DAEMON = 57855
const PAUSE = 57856
const CANCEL = 57857
const TASK = 57858
const RESUME = 57859
const MATCH = 57860
const AGAINST = 57861
const BOOLEAN = 57862
const LANGUAGE = 57863
const WITH = 57864
const QUERY = 57865
const EXPANSION = 57866
const WITHOUT = 57867
const VALIDATION = 57868
const ADDDATE = 57869
const BIT_AND = 57870
const BIT_OR = 57871
const BIT_XOR = 57872
const CAST = 57873
const COUNT = 57874
const APPROX_COUNT = 57875
const APPROX_COUNT_DISTINCT = 57876
const SERIAL_EXTRACT = 57877
const APPROX_PERCENTILE = 57878
const CURDATE = 57879
const CURTIME = 57880
const DATE_ADD = 57881
const DATE_SUB = 57882
const EXTRACT = 57883
const GROUP_CONCAT = 57884
const MAX = 57885
const MID = 57886
const MIN = 57887
const NOW = 57888
const POSITION = 57889
const SESSION_USER = 57890
const STD = 57891
const STDDEV = 57892
const MEDIAN = 57893
const CLUSTER_CENTERS = 57894
const KMEANS = 57895
const STDDEV_POP = 57896
const STDDEV_SAMP = 57897
const SUBDATE = 57898
const SUBSTR = 57899
const SUBSTRING = 57900
const SUM = 57901
const SYSDATE = 57902
const SYSTEM_USER = 57903
const TRANSLATE = 57904
const TRIM = 57905
const VARIANCE = 57906
const VAR_POP = 57907
const VAR_SAMP = 57908
const AVG = 57909
const RANK = 57910
const ROW_NUMBER = 57911
const DENSE_RANK = 57912
const BIT_CAST = 57913
const BITMAP_BIT_POSITION = 57914
const BITMAP_BUCKET_NUMBER = 57915
const BITMAP_COUNT = 57916
const BITMAP_CONSTRUCT_AGG = 57917
const BITMAP_OR_AGG = 57918
const NEXTVAL = 57919
const SETVAL = 57920
const CURRVAL = 57921
const LASTVAL = 57922
const ARROW = 57923
const ROW = 57924
const OUTFILE = 57925
const HEADER = 57926
const MAX_FILE_SIZE = 57927
const FORCE_QUOTE = 57928
const PARALLEL = 57929
const UNUSED = 57930
const BINDINGS = 57931
const DO = 57932
const DECLARE = 57933
const LOOP = 57934
const WHILE = 57935
const LEAVE = 57936
const ITERATE = 57937
const UNTIL = 57938
const CALL = 57939
const PREV = 57940
const SLIDING = 57941
const FILL = 57942
const SPBEGIN = 57943
const BACKEND = 57944
const SERVERS = 57945
const HANDLER = 57946
const PERCENT = 57947
const SAMPLE = 57948
const KILL = 57949
const BACKUP = 57950
const FILESYSTEM = 57951
const PARALLELISM = 57952
const QUERY_RESULT = 57953

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11714

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 119,
	11, 713,
	22, 713,
	-2, 706,
	-1, 139,
	238, 1104,
	240, 1005,
	-2, 1052,
	-1, 164,
	43, 540,
	240, 540,
	267, 547,
	268, 547,
	463, 540,
	-2, 574,
	-1, 205,
	632, 1856,
	-2, 454,
	-1, 505,
	632, 1974,
	-2, 348,
	-1, 563,
	632, 2033,
	-2, 346,
	-1, 564,
	632, 2034,
	-2, 347,
	-1, 565,
	632, 2035,
	-2, 349,
	-1, 691,
	319, 136,
	435, 136,
	436, 136,
	-2, 1761,
	-1, 757,
	82, 1548,
	-2, 1911,
	-1, 758,
	82, 1566,
	-2, 1882,
	-1, 762,
	82, 1567,
	-2, 1910,
	-1, 795,
	82, 1475,
	-2, 2105,
	-1, 796,
	82, 1476,
	-2, 2104,
	-1, 797,
	82, 1477,
	-2, 2094,
	-1, 798,
	82, 2066,
	-2, 2087,
	-1, 799,
	82, 2067,
	-2, 2088,
	-1, 800,
	82, 2068,
	-2, 2096,
	-1, 801,
	82, 2069,
	-2, 2076,
	-1, 802,
	82, 2070,
	-2, 2085,
	-1, 803,
	82, 2071,
	-2, 2097,
	-1, 804,
	82, 2072,
	-2, 2098,
	-1, 805,
	82, 2073,
	-2, 2103,
	-1, 806,
	82, 2074,
	-2, 2108,
	-1, 807,
	82, 2075,
	-2, 2109,
	-1, 808,
	82, 1544,
	-2, 1948,
	-1, 809,
	82, 1545,
	-2, 1745,
	-1, 810,
	82, 1546,
	-2, 1957,
	-1, 811,
	82, 1547,
	-2, 1754,
	-1, 813,
	82, 1550,
	-2, 1762,
	-1, 814,
	82, 1551,
	-2, 1981,
	-1, 816,
	82, 1554,
	-2, 1781,
	-1, 818,
	82, 1556,
	-2, 1993,
	-1, 819,
	82, 1557,
	-2, 1992,
	-1, 820,
	82, 1558,
	-2, 1825,
	-1, 821,
	82, 1559,
	-2, 1906,
	-1, 824,
	82, 1562,
	-2, 2004,
	-1, 826,
	82, 1564,
	-2, 2007,
	-1, 827,
	82, 1565,
	-2, 2009,
	-1, 828,
	82, 1568,
	-2, 2017,
	-1, 829,
	82, 1569,
	-2, 1891,
	-1, 830,
	82, 1570,
	-2, 1936,
	-1, 831,
	82, 1571,
	-2, 1901,
	-1, 832,
	82, 1572,
	-2, 1926,
	-1, 843,
	82, 1453,
	-2, 2099,
	-1, 844,
	82, 1454,
	-2, 2100,
	-1, 845,
	82, 1455,
	-2, 2101,
	-1, 932,
	458, 574,
	459, 574,
	-2, 541,
	-1, 978,
	124, 1745,
	135, 1745,
	155, 1745,
	-2, 1719,
	-1, 1089,
	22, 740,
	-2, 689,
	-1, 1193,
	11, 713,
	22, 713,
	-2, 1334,
	-1, 1275,
	22, 740,
	-2, 689,
	-1, 1595,
	82, 1619,
	-2, 1908,
	-1, 1596,
	82, 1620,
	-2, 1909,
	-1, 1747,
	83, 890,
	-2, 896,
	-1, 2169,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	280, 1044,
	-2, 1037,
	-1, 2315,
	11, 713,
	22, 713,
	-2, 833,
	-1, 2347,
	83, 1705,
	156, 1705,
	-2, 1893,
	-1, 2348,
	83, 1705,
	156, 1705,
	-2, 1892,
	-1, 2349,
	83, 1681,
	156, 1681,
	-2, 1879,
	-1, 2350,
	83, 1682,
	156, 1682,
	-2, 1884,
	-1, 2351,
	83, 1683,
	156, 1683,
	-2, 1813,
	-1, 2352,
	83, 1684,
	156, 1684,
	-2, 1807,
	-1, 2353,
	83, 1685,
	156, 1685,
	-2, 1735,
	-1, 2354,
	83, 1686,
	156, 1686,
	-2, 1881,
	-1, 2355,
	83, 1687,
	156, 1687,
	-2, 1811,
	-1, 2356,
	83, 1688,
	156, 1688,
	-2, 1806,
	-1, 2357,
	83, 1689,
	156, 1689,
	-2, 1795,
	-1, 2358,
	83, 1705,
	156, 1705,
	-2, 1796,
	-1, 2359,
	83, 1705,
	156, 1705,
	-2, 1797,
	-1, 2361,
	83, 1694,
	156, 1694,
	-2, 1926,
	-1, 2362,
	83, 1672,
	156, 1672,
	-2, 1911,
	-1, 2363,
	83, 1703,
	156, 1703,
	-2, 1882,
	-1, 2364,
	83, 1703,
	156, 1703,
	-2, 1910,
	-1, 2365,
	83, 1703,
	156, 1703,
	-2, 1763,
	-1, 2366,
	83, 1701,
	156, 1701,
	-2, 1901,
	-1, 2367,
	83, 1698,
	156, 1698,
	-2, 1786,
	-1, 2368,
	82, 1653,
	83, 1653,
	156, 1653,
	393, 1653,
	394, 1653,
	395, 1653,
	-2, 1734,
	-1, 2369,
	82, 1654,
	83, 1654,
	156, 1654,
	393, 1654,
	394, 1654,
	395, 1654,
	-2, 1736,
	-1, 2370,
	82, 1655,
	83, 1655,
	156, 1655,
	393, 1655,
	394, 1655,
	395, 1655,
	-2, 1953,
	-1, 2371,
	82, 1657,
	83, 1657,
	156, 1657,
	393, 1657,
	394, 1657,
	395, 1657,
	-2, 1883,
	-1, 2372,
	82, 1659,
	83, 1659,
	156, 1659,
	393, 1659,
	394, 1659,
	395, 1659,
	-2, 1865,
	-1, 2373,
	82, 1661,
	83, 1661,
	156, 1661,
	393, 1661,
	394, 1661,
	395, 1661,
	-2, 1812,
	-1, 2374,
	82, 1663,
	83, 1663,
	156, 1663,
	393, 1663,
	394, 1663,
	395, 1663,
	-2, 1791,
	-1, 2375,
	82, 1664,
	83, 1664,
	156, 1664,
	393, 1664,
	394, 1664,
	395, 1664,
	-2, 1792,
	-1, 2376,
	82, 1666,
	83, 1666,
	156, 1666,
	393, 1666,
	394, 1666,
	395, 1666,
	-2, 1733,
	-1, 2377,
	83, 1708,
	156, 1708,
	393, 1708,
	394, 1708,
	395, 1708,
	-2, 1768,
	-1, 2378,
	83, 1708,
	156, 1708,
	393, 1708,
	394, 1708,
	395, 1708,
	-2, 1782,
	-1, 2379,
	83, 1711,
	156, 1711,
	393, 1711,
	394, 1711,
	395, 1711,
	-2, 1764,
	-1, 2380,
	83, 1711,
	156, 1711,
	393, 1711,
	394, 1711,
	395, 1711,
	-2, 1828,
	-1, 2381,
	83, 1708,
	156, 1708,
	393, 1708,
	394, 1708,
	395, 1708,
	-2, 1849,
	-1, 2576,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	280, 1044,
	-2, 1038,
	-1, 2592,
	80, 634,
	156, 634,
	-2, 1217,
	-1, 2980,
	193, 1044,
	304, 1302,
	-2, 1274,
	-1, 3136,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1160,
	-1, 3138,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1160,
	-1, 3150,
	80, 634,
	156, 634,
	-2, 1218,
	-1, 3171,
	193, 1044,
	304, 1302,
	-2, 1275,
	-1, 3308,
	107, 1044,
	151, 1044,
	190, 1044,
	193, 1044,
	-2, 1161,
	-1, 3334,
	83, 1122,
	156, 1122,
	-2, 1044,
	-1, 3462,
	83, 1122,
	156, 1122,
	-2, 1044,
	-1, 3608,
	83, 1126,
	156, 1126,
	-2, 1044,
	-1, 3655,
	83, 1127,
	156, 1127,
	-2, 1044,
}

const yyPrivate = 57344

const yyLast = 46629

var yyAct = [...]int{
	724, 3612, 2621, 701, 3701, 726, 194, 3675, 3694, 3156,
	3618, 3249, 3619, 2999, 1831, 3515, 3611, 3462, 2966, 710,
	1575, 3500, 3571, 3362, 3066, 3185, 2615, 3541, 3440, 3494,
	1228, 3519, 703, 1420, 3461, 1571, 3067, 2432, 3291, 3294,
	597, 3390, 754, 2618, 1090, 3293, 3501, 3503, 1358, 977,
	3431, 613, 3253, 618, 618, 1364, 3244, 1497, 1779, 618,
	635, 644, 699, 3123, 644, 2213, 3315, 3298, 3172, 3305,
	3139, 2975, 1578, 2939, 56, 3275, 2595, 2902, 3064, 179,
	1918, 2729, 2728, 3310, 1921, 3112, 2928, 2645, 2995, 2711,
	3141, 2984, 2727, 2977, 1886, 2721, 36, 2467, 1894, 2309,
	2028, 1633, 2790, 1990, 3052, 2343, 649, 2345, 2750, 2216,
	3032, 2565, 2909, 1413, 655, 2724, 693, 2180, 1082, 2907,
	2947, 1507, 2293, 2905, 2912, 118, 2903, 2904, 2983, 2577,
	2148, 1486, 2137, 2136, 2900, 2834, 2012, 698, 2024, 1493,
	2414, 35, 907, 2763, 1936, 1991, 1999, 1998, 2397, 1501,
	1964, 617, 617, 1725, 1914, 2773, 641, 625, 1498, 2310,
	2023, 1889, 1329, 1887, 2554, 2549, 2298, 2626, 597, 2647,
	2179, 190, 8, 189, 7, 1810, 6, 971, 2214, 1755,
	1034, 1569, 2341, 1821, 1298, 2025, 702, 1460, 2587, 1524,
	1429, 2624, 1506, 1367, 194, 2058, 194, 612, 1025, 1026,
	1399, 2160, 2209, 2035, 2500, 618, 1626, 692, 1103, 1560,
	711, 1609, 26, 1791, 940, 1347, 1997, 596, 1335, 1994,
	1980, 1790, 15, 1467, 1954, 970, 13, 22, 1568, 2317,
	1754, 1398, 1452, 14, 906, 32, 627, 1396, 694, 1343,
	2499, 1634, 1331, 657, 630, 23, 986, 16, 847, 658,
	10, 180, 1459, 904, 883, 1359, 643, 1574, 1273, 889,
	654, 927, 1229, 2319, 170, 2032, 3425, 2535, 1368, 176,
	2535, 2535, 640, 1021, 1022, 1023, 1162, 1163, 1164, 1161,
	3153, 2042, 636, 2954, 3126, 1085, 638, 1162, 1163, 1164,
	1161, 3059, 2455, 639, 2403, 637, 2401, 983, 2400, 1162,
	1163, 1164, 1161, 625, 2002, 1738, 2398, 1474, 1470, 1017,
	1018, 178, 614, 985, 1018, 177, 52, 166, 140, 2135,
	647, 623, 1292, 1018, 849, 850, 2884, 2881, 2886, 694,
	2883, 3686, 1381, 167, 2527, 2525, 1085, 1732, 3175, 1288,
	159, 1472, 3242, 2786, 168, 1162, 1163, 1164, 1161, 2784,
	8, 1969, 7, 3397, 3391, 1016, 1162, 1163, 1164, 1161,
	3245, 3065, 2009, 117, 1223, 3505, 1993, 848, 2861, 2254,
	859, 177, 52, 166, 140, 2529, 3187, 3280, 105, 1125,
	3593, 3447, 2441, 2029, 171, 3276, 700, 2449, 177, 3178,
	3140, 177, 1293, 2171, 3415, 3552, 1439, 1438, 177, 1437,
	3173, 989, 177, 177, 177, 3195, 3196, 177, 987, 1522,
	2583, 3174, 988, 653, 2859, 177, 1321, 1304, 177, 52,
	166, 140, 1514, 2164, 2336, 3448, 959, 3417, 177, 52,
	166, 140, 2335, 2040, 1159, 177, 52, 166, 140, 1519,
	171, 2756, 177, 52, 166, 140, 1545, 1400, 3179, 1402,
	2806, 2798, 1511, 1294, 1898, 117, 1377, 2581, 2415, 1378,
	1521, 122, 123, 117, 124, 125, 1561, 171, 1931, 1565,
	949, 171, 171, 1513, 2323, 3508, 171, 2322, 1152, 860,
	2324, 1805, 1101, 1577, 171, 2757, 2758, 171, 1899, 1900,
	1739, 1740, 1533, 1564, 2970, 981, 982, 171, 2551, 1098,
	1140, 1157, 1355, 1141, 171, 2885, 2882, 3266, 2552, 2968,
	838, 171, 837, 839, 840, 3507, 841, 842, 1363, 2246,
	1365, 1366, 1362, 1365, 1366, 980, 3622, 3623, 979, 3508,
	3584, 1143, 139, 165, 175, 1668, 103, 3507, 3583, 3590,
	3506, 3582, 3194, 3506, 2217, 1380, 2124, 3643, 1303, 1133,
	3586, 3492, 1135, 3573, 164, 158, 157, 2550, 3679, 3680,
	2791, 58, 3576, 3495, 3496, 3497, 3498, 1581, 3068, 3183,
	955, 953, 3573, 954, 2792, 3394, 2793, 1566, 3068, 2436,
	1136, 2530, 1106, 1473, 1471, 1095, 2044, 2666, 139, 3512,
	175, 3180, 3184, 3182, 3181, 1909, 3081, 1915, 1905, 2921,
	1563, 1556, 3120, 2287, 3113, 2036, 2557, 2159, 2923, 3419,
	164, 1138, 1977, 2446, 3285, 1480, 1479, 618, 895, 2541,
	3595, 3596, 160, 161, 162, 2913, 2824, 618, 1094, 3189,
	3190, 1155, 1156, 3591, 3592, 3409, 1106, 3410, 3197, 3588,
	163, 2822, 1154, 2252, 3265, 3243, 644, 644, 688, 618,
	1128, 690, 3267, 169, 2918, 2919, 689, 2785, 2715, 960,
	1129, 2290, 2289, 2294, 3422, 3282, 2539, 3212, 2998, 1145,
	2920, 2917, 1146, 113, 1139, 3650, 3197, 163, 2937, 114,
	3621, 956, 3534, 1580, 1579, 1131, 2041, 2948, 3176, 1150,
	1151, 3412, 1390, 2528, 3188, 2996, 2997, 1134, 1137, 1353,
	1148, 1305, 2540, 1028, 2047, 2049, 2050, 1379, 986, 3209,
	1201, 2972, 3452, 3529, 3409, 1084, 3410, 1562, 3444, 1929,
	1930, 2588, 3411, 1130, 646, 1092, 1291, 645, 641, 641,
	2720, 3202, 3404, 2166, 3520, 3536, 115, 3157, 1087, 3542,
	2967, 3424, 3084, 2620, 958, 2828, 2534, 1116, 3164, 51,
	1342, 1142, 1587, 1590, 1591, 2002, 1094, 3213, 1086, 983,
	1086, 3001, 2030, 1588, 3511, 2030, 2030, 1120, 2616, 2617,
	3412, 2620, 897, 3353, 898, 985, 3712, 1108, 1107, 986,
	1144, 2264, 2263, 3256, 2915, 1111, 2284, 2285, 1232, 3363,
	3364, 3365, 3369, 3367, 3368, 3366, 2338, 2805, 53, 1018,
	1132, 3411, 1018, 2563, 1018, 3348, 3697, 3543, 2063, 1409,
	1408, 1086, 2031, 1018, 1357, 1356, 1018, 1018, 1149, 1093,
	2003, 957, 3446, 2043, 3193, 3342, 1195, 3594, 1118, 1340,
	983, 1108, 1107, 172, 173, 1100, 174, 1339, 1338, 642,
	3610, 141, 2399, 1147, 640, 640, 985, 3466, 3432, 642,
	2976, 2695, 3418, 1475, 636, 636, 642, 1083, 638, 638,
	2880, 2255, 1109, 642, 3142, 639, 639, 637, 637, 3453,
	1365, 1366, 1301, 613, 2059, 3445, 1097, 1099, 2212, 3240,
	2219, 848, 1299, 1089, 3071, 1365, 1366, 2526, 653, 172,
	173, 1271, 174, 3570, 1276, 3281, 1397, 141, 3192, 1125,
	1117, 53, 1113, 1114, 2992, 2450, 907, 2442, 2229, 116,
	39, 53, 2327, 1119, 141, 2556, 50, 141, 53, 2924,
	5, 3420, 1354, 1202, 141, 53, 120, 121, 141, 141,
	141, 1916, 2250, 141, 2033, 2914, 2222, 2973, 2825, 2768,
	2769, 141, 3405, 3698, 141, 2048, 3502, 1233, 1088, 982,
	2752, 2754, 3000, 3106, 141, 1313, 618, 1306, 1392, 3587,
	2827, 141, 1319, 1318, 597, 597, 1317, 2667, 141, 2668,
	2669, 2560, 2561, 597, 597, 1361, 3465, 1424, 1424, 3286,
	618, 3355, 1316, 2916, 1908, 1124, 2559, 1906, 648, 2664,
	1557, 2232, 2993, 1589, 901, 902, 903, 2212, 2235, 1326,
	2996, 2997, 644, 1453, 613, 2045, 2046, 2537, 1463, 1463,
	2140, 1426, 1422, 1422, 1297, 2475, 1742, 2218, 3609, 194,
	1743, 3405, 2220, 950, 896, 3406, 1431, 950, 597, 1244,
	1245, 2569, 2572, 2573, 2574, 2570, 2571, 3349, 3350, 1538,
	1539, 2836, 2835, 1077, 1073, 1074, 1075, 1076, 2139, 2480,
	899, 2479, 2478, 2476, 1388, 2234, 2142, 2141, 1295, 1296,
	1308, 1309, 1310, 1311, 1312, 1741, 1314, 2223, 862, 2276,
	1302, 2935, 1320, 3344, 3695, 3696, 2221, 3343, 1430, 1505,
	950, 1508, 1009, 1014, 1015, 863, 1516, 3316, 1418, 1419,
	1336, 1481, 1197, 1198, 1199, 1200, 2953, 3713, 2233, 2696,
	2698, 2699, 2700, 2697, 2686, 2687, 952, 3580, 1275, 951,
	952, 1543, 3072, 951, 2593, 2228, 1160, 2753, 2477, 2226,
	1277, 2151, 1336, 2093, 2249, 1424, 2092, 1424, 1094, 3708,
	3029, 1542, 1125, 1523, 1307, 1091, 1349, 1350, 1091, 1541,
	3703, 1404, 1406, 2307, 2152, 2153, 2417, 2219, 2222, 3025,
	1416, 1417, 1334, 3109, 2162, 2219, 2222, 986, 1341, 1328,
	3083, 3692, 986, 952, 3657, 1351, 951, 1484, 2129, 1487,
	1488, 1391, 2594, 1370, 1371, 2441, 1373, 1374, 1375, 1512,
	1489, 1490, 1382, 1383, 1520, 1558, 3005, 1344, 1348, 1348,
	1348, 1369, 3003, 2994, 1372, 1495, 1496, 641, 2890, 1160,
	2936, 1454, 2038, 3720, 3630, 1476, 727, 737, 866, 1552,
	1632, 1344, 1344, 3704, 2888, 1407, 728, 961, 729, 733,
	736, 732, 730, 731, 1681, 3624, 1503, 2685, 2308, 852,
	853, 854, 855, 1500, 3658, 3606, 1504, 3658, 1597, 1598,
	1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
	1445, 623, 1432, 2594, 1620, 1621, 2481, 2482, 1451, 865,
	3029, 1464, 1123, 868, 867, 1573, 2308, 2771, 2308, 2161,
	1465, 734, 2543, 1957, 1011, 1012, 1013, 3631, 2531, 2223,
	1160, 3562, 3537, 1272, 2218, 2212, 2217, 2223, 2215, 2220,
	1094, 3525, 2218, 2212, 2217, 3485, 2215, 2220, 3428, 1744,
	2207, 1690, 1554, 735, 1453, 1592, 1435, 3484, 3607, 1753,
	1424, 1757, 1758, 640, 1760, 1761, 618, 1666, 2431, 1576,
	1723, 618, 1559, 636, 1424, 1551, 1531, 638, 907, 1534,
	3479, 1780, 3478, 2195, 639, 1548, 637, 3477, 1424, 1547,
	1671, 1672, 1673, 2221, 1392, 1532, 1526, 2422, 2338, 635,
	2029, 2221, 3476, 1687, 3428, 2038, 1688, 1897, 1550, 1726,
	1549, 2205, 2134, 1546, 3526, 3456, 3455, 1567, 3486, 1804,
	1680, 3427, 2128, 1701, 1702, 1572, 2127, 857, 1811, 1811,
	2184, 1392, 1570, 1392, 1392, 2100, 2020, 618, 618, 1927,
	1753, 1753, 1722, 1327, 1424, 1883, 1884, 1896, 1611, 1623,
	1410, 1752, 3218, 3428, 3166, 3428, 1663, 1664, 3705, 1667,
	3428, 597, 1955, 1424, 1762, 3153, 2775, 1682, 2596, 1767,
	1162, 1163, 1164, 1161, 3132, 3428, 2444, 1759, 1808, 2443,
	1689, 2435, 1691, 2200, 1692, 1693, 1694, 3099, 2038, 2038,
	3095, 618, 1753, 1424, 3428, 1941, 3013, 618, 618, 618,
	1946, 1947, 1162, 1163, 1164, 1161, 2088, 1951, 1952, 1953,
	2747, 1125, 2072, 1959, 2506, 1729, 2194, 2498, 2073, 2457,
	194, 1122, 1833, 194, 194, 2338, 194, 3167, 2019, 1962,
	1932, 1734, 1878, 1879, 1949, 1817, 1818, 1528, 1695, 1749,
	1750, 1751, 1162, 1163, 1164, 1161, 2439, 3133, 2857, 1924,
	1925, 1763, 1764, 1765, 1766, 852, 853, 854, 855, 3119,
	3100, 2427, 3379, 3096, 1681, 1681, 2001, 1209, 1902, 3014,
	1904, 1724, 1681, 1681, 1910, 2424, 1110, 1080, 1654, 2014,
	1922, 1923, 1730, 2308, 1938, 1078, 1748, 1160, 2071, 1937,
	1160, 1792, 1160, 1794, 1795, 1937, 1937, 1937, 1123, 1968,
	1781, 1917, 1971, 1972, 1812, 1974, 1780, 1801, 1940, 3216,
	1424, 2027, 1777, 1776, 1813, 2419, 1926, 1756, 1797, 2184,
	1796, 2412, 2008, 2410, 1177, 2408, 1618, 1619, 1787, 2406,
	1802, 1772, 1788, 1789, 2420, 1793, 1803, 2949, 986, 1806,
	1807, 1943, 1944, 1945, 1814, 1785, 986, 2183, 2425, 1798,
	1799, 2130, 2107, 2106, 1815, 1816, 2958, 1344, 1162, 1163,
	1164, 1161, 2091, 2082, 2021, 2081, 2819, 1414, 1345, 1809,
	2080, 1348, 2037, 2004, 1882, 1535, 1885, 1332, 1415, 3530,
	695, 1333, 641, 1348, 3317, 1901, 1911, 1903, 2420, 983,
	3714, 1617, 1670, 1669, 2413, 3683, 2411, 983, 2407, 1670,
	1669, 1756, 2407, 857, 2069, 985, 864, 1614, 1616, 1613,
	1996, 1615, 3145, 985, 2950, 2247, 3143, 3426, 1996, 3401,
	2184, 1939, 1376, 3531, 2129, 1160, 1160, 3346, 3318, 2056,
	2057, 1162, 1163, 1164, 1161, 1160, 1160, 986, 1160, 1963,
	1965, 1650, 3060, 1160, 3345, 2038, 3331, 1647, 1536, 3287,
	1570, 1649, 1646, 1648, 1652, 1653, 3146, 3125, 2951, 1651,
	3144, 1412, 3030, 1982, 3023, 3018, 2010, 3015, 2930, 1782,
	1783, 1176, 1175, 1185, 1186, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1177, 2717, 2052, 1346, 2567, 2536, 983, 2007,
	2095, 2005, 2454, 2423, 2329, 2018, 1323, 693, 640, 1322,
	618, 618, 618, 1707, 985, 1096, 2398, 3057, 636, 2464,
	1700, 2016, 638, 2392, 618, 618, 618, 618, 2022, 639,
	1966, 637, 1332, 1627, 1627, 2066, 1333, 2181, 2777, 3460,
	2017, 1745, 869, 1696, 1697, 1698, 1699, 2187, 1392, 1703,
	1704, 1705, 1706, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 3581, 2051, 1180, 1181, 1182, 1183, 1184,
	1177, 1411, 3328, 1161, 1392, 2060, 1164, 1161, 2101, 2102,
	3358, 2104, 1019, 1020, 1611, 2053, 3357, 1024, 2111, 2794,
	2850, 2241, 2065, 1176, 1175, 1185, 1186, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1177, 1468, 2656, 1966, 2155, 2156,
	2157, 2654, 2632, 1657, 1658, 1659, 1660, 1661, 1662, 1655,
	1656, 2630, 2172, 2173, 2174, 2175, 1176, 1175, 1185, 1186,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1177, 1188, 3711,
	1192, 3288, 3289, 2248, 3337, 739, 119, 3688, 2519, 2849,
	2520, 119, 2312, 2312, 1896, 2312, 1189, 1191, 1187, 3687,
	1190, 1176, 1175, 1185, 1186, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1177, 597, 597, 3326, 1162, 1163, 1164, 1161,
	2131, 1094, 3634, 2123, 2125, 2126, 3605, 1424, 618, 1176,
	1175, 1185, 1186, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1177, 3710, 624, 618, 1211, 119, 3604, 3532, 2211, 1094,
	2382, 613, 2210, 1232, 2145, 2490, 1463, 1210, 1896, 3283,
	2163, 2387, 2333, 2389, 3481, 3117, 3469, 194, 986, 1176,
	1175, 1185, 1186, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1177, 2204, 1685, 2325, 3459, 2326, 2707, 3449, 2316, 3392,
	3320, 2191, 2314, 3319, 2318, 3158, 2197, 1686, 2566, 2198,
	3147, 2054, 2055, 2330, 2331, 3116, 2705, 2189, 2190, 2188,
	1162, 1163, 1164, 1161, 2922, 2815, 3284, 2192, 2193, 983,
	2437, 2402, 3118, 2027, 2199, 2703, 1430, 2201, 2224, 2225,
	1424, 2230, 1424, 2789, 1424, 985, 2692, 2788, 2690, 1094,
	2689, 1937, 2688, 2706, 2196, 2680, 2393, 2456, 1162, 1163,
	1164, 1161, 2386, 1162, 1163, 1164, 1161, 984, 1162, 1163,
	1164, 1161, 3058, 2704, 119, 2674, 1468, 2447, 2673, 1162,
	1163, 1164, 1161, 1424, 2484, 2672, 2671, 1348, 2466, 119,
	2532, 119, 2702, 2133, 2291, 1985, 1984, 2340, 3124, 2491,
	1404, 1406, 1983, 2691, 1424, 1979, 1978, 1935, 2320, 1934,
	1162, 1163, 1164, 1161, 1933, 1529, 2483, 1290, 1422, 2394,
	2722, 2908, 1233, 3707, 1162, 1163, 1164, 1161, 2334, 3706,
	3250, 3681, 2337, 1469, 3649, 3648, 3645, 2492, 3514, 1422,
	1185, 1186, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1177,
	2346, 3292, 688, 2385, 2838, 690, 2495, 2496, 2383, 3499,
	689, 1094, 3490, 3473, 3468, 1094, 3467, 3423, 2493, 3421,
	3393, 3339, 1424, 3301, 3270, 2564, 2084, 3269, 2472, 3248,
	3246, 1753, 3225, 2384, 3222, 3220, 2468, 2453, 2468, 2592,
	2712, 3115, 2391, 3114, 3111, 2598, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1177, 2448, 3092, 3090, 3561, 2429, 2462,
	3024, 2608, 3020, 3011, 3010, 2433, 2434, 2438, 2440, 2931,
	1094, 2445, 2895, 2894, 2523, 2892, 2138, 2829, 2629, 1162,
	1163, 1164, 1161, 2826, 2787, 1094, 1094, 1094, 1811, 2761,
	2451, 1094, 2083, 2640, 2641, 2642, 2643, 1094, 2650, 2701,
	2651, 2652, 2693, 2653, 3615, 2655, 2070, 986, 2683, 2622,
	2458, 2459, 2474, 2578, 2681, 2068, 2650, 2677, 2676, 1162,
	1163, 1164, 1161, 2579, 3518, 2675, 2533, 2430, 2312, 2582,
	1987, 1162, 1163, 1164, 1161, 3271, 1981, 2590, 1162, 1163,
	1164, 1161, 2708, 794, 793, 2589, 3259, 1570, 1737, 1833,
	597, 1162, 1163, 1164, 1161, 1753, 1094, 1896, 1896, 1896,
	1896, 2599, 1162, 1163, 1164, 1161, 1736, 1530, 1094, 1896,
	1240, 2610, 2312, 1162, 1163, 1164, 1161, 1236, 2546, 1235,
	2548, 1162, 1163, 1164, 1161, 2627, 1081, 1165, 1424, 2627,
	1162, 1163, 1164, 1161, 861, 1194, 2623, 2545, 3549, 618,
	618, 2562, 2544, 3545, 1204, 3414, 2346, 2501, 2502, 2591,
	3413, 2634, 3402, 2507, 8, 3272, 7, 3257, 2253, 2597,
	3138, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 3137, 1212,
	2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274,
	2275, 3136, 2277, 2278, 2279, 2280, 2281, 2631, 2282, 2612,
	2743, 2609, 2625, 2607, 3108, 194, 1162, 1163, 1164, 1161,
	194, 2628, 3104, 2638, 3102, 3258, 177, 3101, 166, 140,
	2601, 3098, 3097, 3091, 3089, 2604, 3073, 2635, 2636, 1756,
	3206, 1681, 2639, 1681, 3063, 2670, 2804, 2682, 2646, 3062,
	3048, 2600, 1162, 1163, 1164, 1161, 2814, 2765, 2766, 3047,
	2605, 2606, 1424, 2959, 2898, 2821, 2461, 1162, 1163, 1164,
	1161, 2887, 2713, 2855, 2772, 2848, 2718, 2076, 2840, 2839,
	2731, 2732, 2733, 2734, 2833, 2770, 2542, 2716, 3087, 2409,
	2744, 2746, 2745, 2742, 2778, 171, 3559, 2405, 2404, 2782,
	1488, 2112, 2105, 2099, 2762, 2098, 2097, 2730, 2759, 2096,
	1489, 1490, 2094, 2853, 986, 1162, 1163, 1164, 1161, 2730,
	2090, 2089, 986, 1726, 1495, 1496, 2087, 2078, 2803, 2075,
	2074, 1986, 2755, 1720, 1719, 1718, 2799, 119, 119, 984,
	1162, 1163, 1164, 1161, 2807, 2801, 1684, 1683, 1674, 1436,
	1503, 2852, 2808, 1434, 3633, 1230, 2843, 1500, 2845, 3544,
	1504, 2893, 3487, 3475, 3470, 2780, 2779, 2776, 1094, 2823,
	1162, 1163, 1164, 1161, 2911, 177, 1483, 2818, 1162, 1163,
	1164, 1161, 3373, 2795, 2926, 3356, 3352, 2800, 2811, 618,
	2802, 2810, 2797, 2809, 2851, 3330, 3314, 3233, 3231, 3204,
	2817, 2940, 1094, 2517, 3203, 1094, 1094, 3200, 3199, 2830,
	1193, 3165, 3557, 2516, 1896, 2181, 3162, 2957, 2831, 3160,
	3127, 1162, 1163, 1164, 1161, 1494, 2837, 2841, 2842, 1485,
	1162, 1163, 1164, 1161, 1499, 2241, 2460, 2846, 2847, 2844,
	1162, 1163, 1164, 1161, 171, 1502, 1491, 2982, 2934, 2985,
	1330, 2985, 2985, 2889, 2709, 2633, 1094, 2585, 1462, 1462,
	1176, 1175, 1185, 1186, 1178, 1179, 1180, 1181, 1182, 1183,
	1184, 1177, 2897, 2584, 2580, 3006, 986, 3002, 986, 2547,
	2578, 986, 2515, 1424, 1424, 2518, 2418, 2932, 2891, 2328,
	2283, 2182, 2969, 2971, 2896, 2514, 2154, 2132, 1612, 2553,
	2943, 171, 1948, 2946, 3004, 1747, 986, 2927, 2955, 1162,
	1163, 1164, 1161, 1733, 1555, 1515, 3007, 3008, 1422, 1422,
	1492, 1289, 1162, 1163, 1164, 1161, 2933, 983, 2965, 2952,
	618, 1274, 2956, 1270, 1269, 2911, 2942, 1517, 2981, 2944,
	2945, 1268, 1267, 985, 1266, 1265, 1753, 1753, 2990, 1264,
	2964, 1263, 2980, 1262, 1261, 1260, 1278, 2211, 2862, 2863,
	3039, 2210, 1259, 1258, 2864, 2865, 2866, 2867, 1257, 2868,
	2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2986,
	2987, 1256, 2991, 1255, 1254, 1253, 1252, 1251, 2662, 2663,
	1250, 1249, 1094, 1248, 1247, 1246, 2484, 1243, 1242, 1241,
	1239, 1238, 1237, 2678, 2679, 3061, 2513, 1234, 1227, 1226,
	1224, 1582, 1583, 1584, 1585, 1586, 1175, 1185, 1186, 1178,
	1179, 1180, 1181, 1182, 1183, 1184, 1177, 2714, 1937, 652,
	1223, 1222, 1221, 1162, 1163, 1164, 1161, 2988, 1220, 2960,
	1219, 1218, 1217, 1216, 2961, 2962, 1215, 3017, 618, 2856,
	3019, 3022, 1624, 3016, 1214, 1213, 1628, 1629, 1630, 1631,
	1208, 3026, 3027, 3021, 3037, 1665, 2512, 1207, 1206, 1205,
	2963, 1127, 1079, 1675, 3012, 3033, 3034, 3555, 3041, 3201,
	2186, 2168, 3044, 3045, 3046, 1115, 3663, 3661, 1433, 2511,
	3620, 3036, 624, 1162, 1163, 1164, 1161, 3050, 2568, 2510,
	2339, 3056, 1989, 1176, 1175, 1185, 1186, 1178, 1179, 1180,
	1181, 1182, 1183, 1184, 1177, 1126, 1162, 1163, 1164, 1161,
	2509, 3038, 3074, 2736, 119, 1727, 1162, 1163, 1164, 1161,
	3075, 2739, 2508, 3076, 2735, 2737, 2740, 3335, 2428, 3080,
	2738, 2505, 2741, 3093, 2304, 2305, 3082, 1162, 1163, 1164,
	1161, 3079, 2421, 104, 1324, 2929, 3085, 3235, 3131, 1162,
	1163, 1164, 1161, 1774, 1775, 3236, 2468, 3028, 1162, 1163,
	1164, 1161, 55, 2312, 1896, 3150, 1769, 1770, 1771, 2978,
	2813, 2979, 3040, 2346, 3077, 3078, 2251, 1784, 119, 3211,
	54, 615, 2504, 119, 986, 2658, 3051, 3168, 1870, 1477,
	1094, 986, 2659, 2660, 2661, 2416, 119, 2061, 2452, 2982,
	620, 1800, 3105, 1094, 3234, 1525, 3107, 1509, 119, 1162,
	1163, 1164, 1161, 3110, 1094, 2144, 3215, 2433, 2434, 621,
	1424, 1176, 1175, 1185, 1186, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1177, 3122, 1950, 619, 1753, 622, 1121, 2906,
	1094, 3159, 2899, 3161, 3152, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1166, 3217, 1727, 1422, 3198, 2503, 3149, 1727,
	1727, 2611, 3148, 2586, 2203, 3155, 2177, 1778, 1746, 194,
	2497, 3043, 1670, 1669, 3191, 2487, 1285, 1286, 1283, 1284,
	1281, 1282, 1094, 3227, 1162, 1163, 1164, 1161, 1279, 1280,
	3205, 3672, 3210, 3472, 3237, 3207, 3009, 1162, 1163, 1164,
	1161, 3214, 1162, 1163, 1164, 1161, 2463, 2292, 2288, 1967,
	3223, 1881, 1970, 3221, 3219, 1973, 2295, 1385, 1975, 3224,
	1094, 3228, 1622, 1384, 1153, 3229, 2764, 2143, 3226, 2015,
	1337, 1315, 1360, 1162, 1163, 1164, 1161, 3640, 1094, 1424,
	1424, 3638, 3255, 3598, 2940, 3578, 3577, 3575, 3241, 1162,
	1163, 1164, 1161, 2300, 2303, 2304, 2305, 2301, 3521, 2302,
	2306, 3309, 3488, 3309, 3251, 3252, 3387, 3386, 2013, 3324,
	3325, 1094, 3297, 1094, 1422, 3299, 3247, 3303, 3304, 3094,
	3070, 3169, 3069, 3054, 3151, 2236, 3239, 2206, 1527, 3277,
	1424, 3327, 3154, 3329, 3208, 3053, 3279, 3278, 2774, 1336,
	2300, 2303, 2304, 2305, 2301, 2646, 2302, 2306, 618, 2816,
	1094, 1094, 3665, 3664, 1094, 1094, 2170, 3302, 3313, 2077,
	3312, 986, 1112, 3664, 3274, 3299, 3268, 3665, 3354, 3049,
	3375, 2730, 3323, 1091, 181, 3, 3370, 3152, 3332, 1352,
	63, 2, 1780, 3306, 3384, 3684, 3685, 3198, 3338, 3333,
	3336, 1, 2524, 3388, 3389, 3360, 3361, 3340, 1731, 3371,
	3372, 1287, 856, 851, 2062, 3191, 1424, 1401, 2067, 852,
	853, 854, 855, 2730, 1091, 2321, 1928, 1428, 1735, 858,
	2748, 2749, 3376, 3042, 2751, 2538, 3381, 2034, 2719, 2286,
	2158, 2925, 1895, 1325, 3408, 900, 1676, 1540, 3380, 3400,
	3382, 1422, 1008, 1105, 1537, 1104, 3359, 1102, 1625, 2079,
	741, 1992, 2710, 2684, 3383, 3671, 3700, 2086, 3632, 3395,
	3399, 3403, 3407, 3674, 1553, 3441, 725, 3569, 3491, 3295,
	3636, 3493, 3398, 3435, 2039, 1158, 2796, 923, 782, 2103,
	3260, 1094, 3261, 752, 2108, 2109, 2110, 1225, 1518, 2113,
	2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 3464,
	1510, 3458, 1576, 3429, 1576, 119, 2860, 2858, 119, 119,
	3436, 119, 3255, 1010, 3438, 3437, 3450, 3321, 3322, 3454,
	751, 3121, 2558, 2767, 1094, 3443, 1007, 924, 1976, 1424,
	3396, 1478, 986, 1482, 2202, 3451, 3540, 3334, 2974, 2619,
	3535, 3295, 3295, 3163, 3264, 3295, 3295, 3471, 3262, 984,
	3263, 659, 1907, 595, 3433, 968, 3374, 984, 1988, 660,
	2185, 3589, 3482, 3474, 1422, 880, 3510, 2167, 881, 3480,
	873, 119, 2576, 2575, 3504, 1593, 1167, 1610, 2878, 1094,
	2879, 1203, 697, 2064, 2555, 3186, 2760, 3489, 62, 61,
	60, 59, 1958, 202, 743, 201, 3290, 3566, 3676, 3522,
	723, 722, 721, 720, 3128, 3129, 3130, 719, 718, 2299,
	3134, 3135, 2297, 2296, 3513, 1891, 1890, 3517, 3516, 1956,
	3524, 2938, 2649, 2644, 1822, 1820, 1094, 3539, 2637, 2231,
	2238, 1819, 3617, 3550, 1424, 3551, 3351, 3564, 3567, 2694,
	3254, 1768, 3554, 3556, 3558, 3560, 2227, 3538, 1193, 3533,
	3568, 1839, 3547, 2665, 1836, 1835, 2657, 3347, 3341, 1867,
	3439, 3308, 3170, 3171, 3177, 2176, 1033, 3563, 1029, 1422,
	1031, 3553, 1576, 3574, 1424, 1032, 1030, 3441, 2473, 3572,
	2208, 2901, 2150, 1727, 2149, 1727, 2147, 2146, 1300, 3509,
	3585, 3273, 2344, 3608, 2342, 3035, 3031, 2000, 3599, 3616,
	2011, 2812, 1892, 1727, 1727, 3601, 3597, 3600, 1888, 1422,
	3602, 3603, 2169, 3416, 1773, 3295, 874, 2165, 156, 49,
	101, 154, 48, 90, 89, 100, 152, 47, 186, 3625,
	185, 3626, 188, 3627, 187, 3628, 1462, 3639, 3629, 3641,
	3642, 184, 2395, 2396, 183, 3637, 3635, 1466, 182, 1094,
	3579, 3504, 3311, 3644, 846, 38, 37, 1162, 1163, 1164,
	1161, 33, 12, 11, 34, 21, 20, 1544, 3653, 19,
	3295, 25, 31, 3464, 30, 112, 3655, 3656, 111, 3659,
	3662, 3660, 3670, 2426, 3678, 3654, 29, 110, 109, 3677,
	108, 3666, 3667, 3668, 3669, 107, 106, 28, 18, 42,
	41, 3689, 3682, 1094, 40, 9, 99, 97, 27, 98,
	3693, 95, 96, 3691, 93, 91, 74, 3295, 73, 72,
	3539, 87, 86, 3690, 3699, 1005, 3702, 85, 84, 83,
	82, 80, 81, 922, 71, 70, 1654, 69, 68, 67,
	94, 92, 78, 88, 3709, 79, 77, 2465, 76, 75,
	2471, 66, 65, 64, 138, 3678, 3716, 2485, 2486, 137,
	3677, 136, 3715, 135, 134, 2488, 2489, 3702, 3717, 132,
	133, 3721, 131, 130, 129, 177, 52, 166, 140, 128,
	127, 2494, 3377, 126, 43, 44, 3378, 45, 46, 148,
	147, 149, 151, 167, 153, 150, 155, 1006, 145, 143,
	159, 146, 144, 142, 168, 57, 102, 17, 24, 1582,
	1727, 4, 0, 1386, 1387, 0, 1389, 0, 1393, 1394,
	1395, 0, 0, 117, 0, 0, 0, 0, 0, 2315,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	3651, 0, 0, 0, 171, 0, 0, 0, 0, 0,
	1440, 1441, 1442, 1443, 1444, 0, 1446, 1447, 1448, 1449,
	1450, 0, 0, 0, 1456, 1457, 1458, 0, 1000, 995,
	990, 994, 998, 0, 0, 2602, 2603, 0, 0, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1895, 1576, 0, 1003, 0, 0, 1650,
	993, 0, 119, 0, 0, 1647, 0, 0, 0, 1649,
	1646, 1648, 1652, 1653, 0, 0, 0, 1651, 0, 0,
	0, 122, 123, 0, 124, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3483,
	0, 1001, 909, 910, 1654, 0, 0, 0, 1004, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 165, 175, 0, 103, 0, 0, 0,
	0, 0, 0, 1002, 0, 0, 3523, 0, 0, 0,
	0, 3527, 3528, 0, 164, 158, 157, 0, 0, 0,
	0, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3548, 992, 0, 0, 952, 0, 0, 951,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1657, 1658, 1659, 1660, 1661, 1662, 1655, 1656, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2781,
	0, 2783, 160, 161, 162, 0, 936, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 0, 0, 1727,
	0, 0, 0, 0, 1727, 0, 0, 0, 119, 0,
	0, 0, 2013, 169, 0, 0, 0, 1650, 119, 0,
	999, 914, 0, 1647, 0, 0, 0, 1649, 1646, 1648,
	1652, 1653, 0, 113, 0, 1651, 0, 163, 0, 114,
	0, 0, 0, 0, 0, 0, 0, 2832, 0, 0,
	0, 0, 0, 0, 0, 0, 996, 0, 0, 997,
	3646, 3647, 0, 0, 0, 1868, 0, 0, 0, 0,
	1829, 2854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 934, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	1870, 1838, 0, 0, 0, 0, 933, 0, 0, 51,
	1871, 1872, 0, 0, 0, 0, 0, 908, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 913, 945,
	0, 0, 1895, 1895, 1895, 1895, 1837, 0, 0, 0,
	0, 0, 0, 0, 1895, 0, 0, 0, 0, 0,
	0, 1845, 941, 0, 0, 0, 0, 0, 53, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1635, 1636,
	1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1657,
	1658, 1659, 1660, 1661, 1662, 1655, 1656, 0, 942, 946,
	0, 0, 0, 172, 173, 0, 174, 0, 0, 0,
	0, 141, 0, 0, 0, 1942, 0, 0, 930, 0,
	928, 932, 949, 0, 2989, 0, 929, 926, 925, 1861,
	931, 916, 917, 915, 918, 919, 920, 921, 0, 947,
	119, 948, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 943, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 0, 116,
	39, 0, 0, 0, 0, 0, 50, 0, 0, 939,
	0, 0, 0, 0, 0, 938, 120, 121, 0, 0,
	1828, 1830, 1827, 0, 1824, 0, 0, 0, 0, 1849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1855, 0, 0, 0, 1868, 0, 0, 0, 1840, 1829,
	1823, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1843, 1877, 0, 0, 1844, 1846, 1848, 0, 1850, 1851,
	1852, 1856, 1857, 1858, 1860, 1863, 1864, 1865, 0, 1870,
	1838, 0, 0, 0, 0, 1853, 1862, 1854, 0, 1871,
	1872, 0, 0, 0, 0, 0, 0, 1832, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1837, 0, 0, 0, 1869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1845, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1825, 1826, 984, 0, 119,
	0, 0, 119, 0, 0, 0, 0, 0, 0, 1895,
	0, 3086, 0, 1866, 0, 0, 0, 0, 3088, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	1842, 0, 0, 0, 0, 0, 0, 1841, 670, 669,
	676, 666, 0, 0, 0, 0, 0, 0, 1861, 3103,
	673, 674, 0, 675, 679, 0, 0, 661, 0, 0,
	0, 1859, 0, 0, 0, 0, 0, 684, 0, 0,
	1847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1874, 1873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	688, 0, 0, 690, 0, 0, 0, 0, 689, 1828,
	2614, 1827, 0, 2613, 0, 0, 0, 0, 1849, 0,
	0, 0, 0, 0, 0, 0, 1834, 0, 0, 1855,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1843,
	1877, 0, 0, 1844, 1846, 1848, 0, 1850, 1851, 1852,
	1856, 1857, 1858, 1860, 1863, 1864, 1865, 0, 1876, 0,
	1727, 1875, 0, 0, 1853, 1862, 1854, 0, 0, 0,
	0, 1727, 0, 0, 3230, 0, 1832, 3232, 0, 0,
	0, 0, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 0, 0, 3238, 0, 0, 0, 1869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1825, 1826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 662, 664, 663, 0, 0,
	0, 0, 1866, 0, 0, 668, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 672, 0, 1842,
	0, 0, 0, 0, 687, 0, 1841, 0, 0, 0,
	0, 665, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 669, 676, 666, 0,
	1859, 0, 0, 0, 0, 119, 0, 673, 674, 1847,
	675, 679, 119, 0, 661, 0, 1037, 0, 0, 0,
	0, 0, 1874, 1873, 684, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1059, 1063, 1065, 1067,
	1069, 1070, 1072, 0, 1077, 1073, 1074, 1075, 1076, 0,
	1054, 1055, 1056, 1057, 1035, 1036, 1060, 0, 1038, 1895,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050,
	1052, 1048, 1049, 1058, 0, 1834, 0, 0, 0, 0,
	0, 1062, 1064, 1066, 1068, 1071, 0, 0, 0, 0,
	667, 671, 677, 0, 678, 680, 0, 0, 681, 682,
	683, 0, 0, 685, 686, 0, 1037, 0, 0, 0,
	1027, 0, 0, 0, 0, 0, 0, 1876, 0, 1053,
	1875, 0, 0, 0, 0, 0, 1059, 1063, 1065, 1067,
	1069, 1070, 1072, 0, 1077, 1073, 1074, 1075, 1076, 1051,
	1054, 1055, 1056, 1057, 1035, 1036, 1060, 3430, 1038, 0,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050,
	1052, 1048, 1049, 1058, 119, 0, 0, 0, 0, 0,
	0, 1062, 1064, 1066, 1068, 1071, 0, 0, 0, 670,
	669, 676, 666, 0, 0, 0, 0, 0, 0, 0,
	0, 673, 674, 0, 675, 679, 0, 0, 661, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 684, 1053,
	0, 0, 662, 664, 663, 0, 0, 0, 0, 0,
	0, 0, 668, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
	0, 687, 119, 0, 0, 0, 0, 0, 665, 0,
	0, 688, 0, 0, 690, 0, 0, 2469, 2470, 689,
	1037, 0, 0, 1212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1059, 1063, 1065, 1067, 1069, 1070, 1072, 0, 1077, 1073,
	1074, 1075, 1076, 0, 1054, 1055, 1056, 1057, 1035, 1036,
	1060, 0, 1038, 0, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1050, 1052, 1048, 1049, 1058, 0, 0,
	0, 3546, 0, 0, 0, 1062, 1064, 1066, 1068, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 667, 671, 677,
	0, 678, 680, 1053, 0, 681, 682, 683, 0, 0,
	685, 686, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3613, 662, 664, 663, 0,
	0, 1061, 0, 0, 0, 0, 668, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 672, 0,
	0, 0, 0, 0, 0, 687, 0, 0, 0, 0,
	0, 0, 665, 759, 0, 0, 656, 0, 0, 0,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 304,
	0, 3613, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	750, 525, 476, 395, 348, 543, 542, 0, 0, 817,
	825, 1061, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 704, 0, 0, 740, 794, 793, 727, 737, 3613,
	0, 277, 200, 471, 590, 473, 472, 728, 0, 729,
	733, 736, 732, 730, 731, 0, 809, 0, 0, 0,
	0, 0, 0, 696, 708, 0, 713, 0, 0, 0,
	0, 667, 671, 677, 0, 678, 680, 0, 0, 681,
	682, 683, 0, 0, 685, 686, 0, 0, 0, 0,
	705, 706, 0, 0, 0, 3719, 760, 0, 707, 0,
	0, 755, 734, 738, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 735, 758, 762, 298, 831, 756,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 832, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 1061, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 753, 0, 587, 0,
	427, 0, 0, 815, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 757, 0, 385, 366, 828, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	1678, 1677, 1679, 439, 332, 333, 0, 311, 259, 260,
	604, 813, 362, 553, 586, 478, 0, 827, 808, 810,
	811, 814, 818, 819, 820, 821, 822, 824, 826, 830,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 829, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 761, 528, 529, 352, 353, 354, 355, 816, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 838, 812, 837,
	839, 840, 836, 841, 842, 823, 717, 0, 768, 834,
	833, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 801, 775, 776, 777, 714, 778, 772,
	773, 715, 774, 802, 766, 798, 799, 742, 769, 779,
	797, 780, 800, 803, 804, 843, 844, 786, 770, 225,
	845, 783, 805, 796, 795, 781, 767, 806, 807, 749,
	744, 784, 785, 771, 789, 790, 791, 716, 763, 764,
	765, 787, 788, 745, 746, 747, 748, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 792, 759, 605, 474, 475, 585, 0, 709,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 712, 0, 0, 0, 304,
	1728, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	750, 525, 476, 395, 348, 543, 542, 0, 0, 817,
	825, 0, 0, 0, 0, 0, 0, 0, 1919, 0,
	0, 704, 0, 0, 740, 794, 793, 727, 737, 0,
	0, 277, 200, 471, 590, 473, 472, 728, 0, 729,
	733, 736, 732, 730, 731, 0, 809, 0, 0, 0,
	0, 0, 0, 696, 708, 0, 713, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	705, 706, 0, 0, 0, 0, 760, 0, 707, 0,
	0, 1920, 734, 738, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 735, 758, 762, 298, 831, 756,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 832, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 753, 0, 587, 0,
	427, 0, 0, 815, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 757, 0, 385, 366, 828, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 813, 362, 553, 586, 478, 0, 827, 808, 810,
	811, 814, 818, 819, 820, 821, 822, 824, 826, 830,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 829, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 761, 528, 529, 352, 353, 354, 355, 816, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 838, 812, 837,
	839, 840, 836, 841, 842, 823, 717, 0, 768, 834,
	833, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 801, 775, 776, 777, 714, 778, 772,
	773, 715, 774, 802, 766, 798, 799, 742, 769, 779,
	797, 780, 800, 803, 804, 843, 844, 786, 770, 225,
	845, 783, 805, 796, 795, 781, 767, 806, 807, 749,
	744, 784, 785, 771, 789, 790, 791, 716, 763, 764,
	765, 787, 788, 745, 746, 747, 748, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 792, 0, 605, 474, 475, 585, 0, 709,
	177, 759, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 1196, 525,
	476, 395, 348, 543, 542, 0, 0, 817, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 704,
	0, 0, 740, 794, 793, 727, 737, 0, 0, 277,
	200, 471, 590, 473, 472, 728, 0, 729, 733, 736,
	732, 730, 731, 0, 809, 0, 0, 0, 0, 0,
	0, 696, 708, 0, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 705, 706,
	0, 0, 0, 0, 760, 0, 707, 0, 0, 755,
	734, 738, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 735, 758, 762, 298, 831, 756, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 832, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 753, 0, 587, 0, 427, 0,
	0, 815, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 757, 0, 385, 366, 828, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 813,
	362, 553, 586, 478, 0, 827, 808, 810, 811, 814,
	818, 819, 820, 821, 822, 824, 826, 830, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 829,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 761,
	528, 529, 352, 353, 354, 355, 816, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 838, 812, 837, 839, 840,
	836, 841, 842, 823, 717, 0, 768, 834, 833, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 141, 376, 309, 549,
	550, 801, 775, 776, 777, 714, 778, 772, 773, 715,
	774, 802, 766, 798, 799, 742, 769, 779, 797, 780,
	800, 803, 804, 843, 844, 786, 770, 225, 845, 783,
	805, 796, 795, 781, 767, 806, 807, 749, 744, 784,
	785, 771, 789, 790, 791, 716, 763, 764, 765, 787,
	788, 745, 746, 747, 748, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	792, 759, 605, 474, 475, 585, 0, 709, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 304, 3718, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 750, 525,
	476, 395, 348, 543, 542, 0, 0, 817, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 704,
	0, 0, 740, 794, 793, 727, 737, 0, 0, 277,
	200, 471, 590, 473, 472, 728, 0, 729, 733, 736,
	732, 730, 731, 0, 809, 0, 0, 0, 0, 0,
	0, 696, 708, 0, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 705, 706,
	0, 0, 0, 0, 760, 0, 707, 0, 0, 755,
	734, 738, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 735, 758, 762, 298, 831, 756, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 832, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 753, 0, 587, 0, 427, 0,
	0, 815, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 757, 0, 385, 366, 828, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 813,
	362, 553, 586, 478, 0, 827, 808, 810, 811, 814,
	818, 819, 820, 821, 822, 824, 826, 830, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 829,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 761,
	528, 529, 352, 353, 354, 355, 816, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 838, 812, 837, 839, 840,
	836, 841, 842, 823, 717, 0, 768, 834, 833, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 801, 775, 776, 777, 714, 778, 772, 773, 715,
	774, 802, 766, 798, 799, 742, 769, 779, 797, 780,
	800, 803, 804, 843, 844, 786, 770, 225, 845, 783,
	805, 796, 795, 781, 767, 806, 807, 749, 744, 784,
	785, 771, 789, 790, 791, 716, 763, 764, 765, 787,
	788, 745, 746, 747, 748, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	792, 759, 605, 474, 475, 585, 0, 709, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 750, 525,
	476, 395, 348, 543, 542, 0, 0, 817, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 704,
	0, 0, 740, 794, 793, 727, 737, 0, 0, 277,
	200, 471, 590, 473, 472, 728, 0, 729, 733, 736,
	732, 730, 731, 0, 809, 0, 0, 0, 0, 0,
	0, 696, 708, 0, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 705, 706,
	0, 0, 0, 0, 760, 0, 707, 0, 0, 755,
	734, 738, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 735, 758, 762, 298, 831, 756, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 832, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 753, 0, 587, 0, 427, 0,
	0, 815, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 757, 0, 385, 366, 828, 3614, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 813,
	362, 553, 586, 478, 0, 827, 808, 810, 811, 814,
	818, 819, 820, 821, 822, 824, 826, 830, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 829,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 761,
	528, 529, 352, 353, 354, 355, 816, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 838, 812, 837, 839, 840,
	836, 841, 842, 823, 717, 0, 768, 834, 833, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 801, 775, 776, 777, 714, 778, 772, 773, 715,
	774, 802, 766, 798, 799, 742, 769, 779, 797, 780,
	800, 803, 804, 843, 844, 786, 770, 225, 845, 783,
	805, 796, 795, 781, 767, 806, 807, 749, 744, 784,
	785, 771, 789, 790, 791, 716, 763, 764, 765, 787,
	788, 745, 746, 747, 748, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	792, 759, 605, 474, 475, 585, 0, 709, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 304, 1728, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 750, 525,
	476, 395, 348, 543, 542, 0, 0, 817, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 704,
	0, 0, 740, 794, 793, 727, 737, 0, 0, 277,
	200, 471, 590, 473, 472, 728, 0, 729, 733, 736,
	732, 730, 731, 0, 809, 0, 0, 0, 0, 0,
	0, 696, 708, 0, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 705, 706,
	0, 0, 0, 0, 760, 0, 707, 0, 0, 755,
	734, 738, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 735, 758, 762, 298, 831, 756, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 832, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 753, 0, 587, 0, 427, 0,
	0, 815, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 757, 0, 385, 366, 828, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 813,
	362, 553, 586, 478, 0, 827, 808, 810, 811, 814,
	818, 819, 820, 821, 822, 824, 826, 830, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 829,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 761,
	528, 529, 352, 353, 354, 355, 816, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 838, 812, 837, 839, 840,
	836, 841, 842, 823, 717, 0, 768, 834, 833, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 801, 775, 776, 777, 714, 778, 772, 773, 715,
	774, 802, 766, 798, 799, 742, 769, 779, 797, 780,
	800, 803, 804, 843, 844, 786, 770, 225, 845, 783,
	805, 796, 795, 781, 767, 806, 807, 749, 744, 784,
	785, 771, 789, 790, 791, 716, 763, 764, 765, 787,
	788, 745, 746, 747, 748, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	792, 759, 605, 474, 475, 585, 0, 709, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 712, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 750, 525,
	476, 395, 348, 543, 542, 0, 0, 817, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 704,
	0, 0, 740, 794, 793, 727, 737, 0, 0, 277,
	200, 471, 590, 473, 472, 728, 0, 729, 733, 736,
	732, 730, 731, 0, 809, 0, 0, 0, 0, 0,
	0, 696, 708, 0, 713, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 705, 706,
	1461, 0, 0, 0, 760, 0, 707, 0, 0, 755,
	734, 738, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 735, 758, 762, 298, 831, 756, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 832, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 753, 0, 587, 0, 427, 0,
	0, 815, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 757, 0, 385, 366, 828, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 813,
	362, 553, 586, 478, 0, 827, 808, 810, 811, 814,
	818, 819, 820, 821, 822, 824, 826, 830, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 829,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 761,
	528, 529, 352, 353, 354, 355, 816, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 838, 812, 837, 839, 840,
	836, 841, 842, 823, 717, 0, 768, 834, 833, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 801, 775, 776, 777, 714, 778, 772, 773, 715,
	774, 802, 766, 798, 799, 742, 769, 779, 797, 780,
	800, 803, 804, 843, 844, 786, 770, 225, 845, 783,
	805, 796, 795, 781, 767, 806, 807, 749, 744, 784,
	785, 771, 789, 790, 791, 716, 763, 764, 765, 787,
	788, 745, 746, 747, 748, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	792, 0, 605, 474, 475, 585, 759, 709, 0, 2085,
	0, 0, 0, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 750, 525, 476, 395, 348, 543, 542,
	0, 0, 817, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 704, 0, 0, 740, 794, 793,
	727, 737, 0, 0, 277, 200, 471, 590, 473, 472,
	728, 0, 729, 733, 736, 732, 730, 731, 0, 809,
	0, 0, 0, 0, 0, 0, 696, 708, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 706, 0, 0, 0, 0, 760,
	0, 707, 0, 0, 755, 734, 738, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 735, 758, 762,
	298, 831, 756, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 832, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 753,
	0, 587, 0, 427, 0, 0, 815, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 757, 0, 385,
	366, 828, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 813, 362, 553, 586, 478, 0,
	827, 808, 810, 811, 814, 818, 819, 820, 821, 822,
	824, 826, 830, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 829, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 761, 528, 529, 352, 353, 354,
	355, 816, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	838, 812, 837, 839, 840, 836, 841, 842, 823, 717,
	0, 768, 834, 833, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 801, 775, 776, 777,
	714, 778, 772, 773, 715, 774, 802, 766, 798, 799,
	742, 769, 779, 797, 780, 800, 803, 804, 843, 844,
	786, 770, 225, 845, 783, 805, 796, 795, 781, 767,
	806, 807, 749, 744, 784, 785, 771, 789, 790, 791,
	716, 763, 764, 765, 787, 788, 745, 746, 747, 748,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 792, 759, 605, 474, 475,
	585, 0, 709, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 750, 525, 476, 395, 348, 543, 542,
	0, 0, 817, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 704, 0, 0, 740, 794, 793,
	727, 737, 0, 0, 277, 200, 471, 590, 473, 472,
	728, 0, 729, 733, 736, 732, 730, 731, 0, 809,
	0, 0, 0, 0, 0, 0, 696, 708, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 706, 1721, 0, 0, 0, 760,
	0, 707, 0, 0, 755, 734, 738, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 735, 758, 762,
	298, 831, 756, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 832, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 753,
	0, 587, 0, 427, 0, 0, 815, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 757, 0, 385,
	366, 828, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 813, 362, 553, 586, 478, 0,
	827, 808, 810, 811, 814, 818, 819, 820, 821, 822,
	824, 826, 830, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 829, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 761, 528, 529, 352, 353, 354,
	355, 816, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	838, 812, 837, 839, 840, 836, 841, 842, 823, 717,
	0, 768, 834, 833, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 801, 775, 776, 777,
	714, 778, 772, 773, 715, 774, 802, 766, 798, 799,
	742, 769, 779, 797, 780, 800, 803, 804, 843, 844,
	786, 770, 225, 845, 783, 805, 796, 795, 781, 767,
	806, 807, 749, 744, 784, 785, 771, 789, 790, 791,
	716, 763, 764, 765, 787, 788, 745, 746, 747, 748,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 792, 759, 605, 474, 475,
	585, 0, 709, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 750, 525, 476, 395, 348, 543, 542,
	0, 0, 817, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 704, 0, 0, 740, 794, 793,
	727, 737, 0, 0, 277, 200, 471, 590, 473, 472,
	728, 0, 729, 733, 736, 732, 730, 731, 0, 809,
	0, 0, 0, 0, 0, 0, 696, 708, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 706, 0, 0, 0, 0, 760,
	0, 707, 0, 0, 755, 734, 738, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 735, 758, 762,
	298, 831, 756, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 832, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 753,
	0, 587, 0, 427, 0, 0, 815, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 757, 0, 385,
	366, 828, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 813, 362, 553, 586, 478, 0,
	827, 808, 810, 811, 814, 818, 819, 820, 821, 822,
	824, 826, 830, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 829, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 761, 528, 529, 352, 353, 354,
	355, 816, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	838, 812, 837, 839, 840, 836, 841, 842, 823, 717,
	0, 768, 834, 833, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 801, 775, 776, 777,
	714, 778, 772, 773, 715, 774, 802, 766, 798, 799,
	742, 769, 779, 797, 780, 800, 803, 804, 843, 844,
	786, 770, 225, 845, 783, 805, 796, 795, 781, 767,
	806, 807, 749, 744, 784, 785, 771, 789, 790, 791,
	716, 763, 764, 765, 787, 788, 745, 746, 747, 748,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 792, 759, 605, 474, 475,
	585, 0, 709, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 750, 525, 476, 395, 348, 543, 542,
	0, 0, 817, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 704, 0, 0, 740, 794, 793,
	727, 737, 0, 0, 277, 200, 471, 590, 473, 472,
	2521, 0, 2522, 733, 736, 732, 730, 731, 0, 809,
	0, 0, 0, 0, 0, 0, 696, 708, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 706, 0, 0, 0, 0, 760,
	0, 707, 0, 0, 755, 734, 738, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 735, 758, 762,
	298, 831, 756, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 832, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 753,
	0, 587, 0, 427, 0, 0, 815, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 757, 0, 385,
	366, 828, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 813, 362, 553, 586, 478, 0,
	827, 808, 810, 811, 814, 818, 819, 820, 821, 822,
	824, 826, 830, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 829, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 761, 528, 529, 352, 353, 354,
	355, 816, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	838, 812, 837, 839, 840, 836, 841, 842, 823, 717,
	0, 768, 834, 833, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 801, 775, 776, 777,
	714, 778, 772, 773, 715, 774, 802, 766, 798, 799,
	742, 769, 779, 797, 780, 800, 803, 804, 843, 844,
	786, 770, 225, 845, 783, 805, 796, 795, 781, 767,
	806, 807, 749, 744, 784, 785, 771, 789, 790, 791,
	716, 763, 764, 765, 787, 788, 745, 746, 747, 748,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 792, 759, 605, 474, 475,
	585, 0, 709, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 1594, 0, 0, 0, 712, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 750, 525, 476, 395, 348, 543, 542,
	0, 0, 817, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 704, 0, 0, 740, 794, 793,
	727, 737, 0, 0, 277, 200, 471, 590, 473, 472,
	728, 0, 729, 733, 736, 732, 730, 731, 0, 809,
	0, 0, 0, 0, 0, 0, 0, 708, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 706, 0, 0, 0, 0, 760,
	0, 707, 0, 0, 755, 734, 738, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 735, 758, 762,
	298, 831, 756, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 832, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 753,
	0, 587, 0, 427, 0, 0, 815, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 757, 0, 385,
	366, 828, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 1595, 1596, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 813, 362, 553, 586, 478, 0,
	827, 808, 810, 811, 814, 818, 819, 820, 821, 822,
	824, 826, 830, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 829, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 761, 528, 529, 352, 353, 354,
	355, 816, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	838, 812, 837, 839, 840, 836, 841, 842, 823, 717,
	0, 768, 834, 833, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 801, 775, 776, 777,
	714, 778, 772, 773, 715, 774, 802, 766, 798, 799,
	742, 769, 779, 797, 780, 800, 803, 804, 843, 844,
	786, 770, 225, 845, 783, 805, 796, 795, 781, 767,
	806, 807, 749, 744, 784, 785, 771, 789, 790, 791,
	716, 763, 764, 765, 787, 788, 745, 746, 747, 748,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 792, 759, 605, 474, 475,
	585, 0, 709, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 750, 525, 476, 395, 348, 543, 542,
	0, 0, 817, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 704, 0, 0, 740, 794, 793,
	727, 737, 0, 0, 277, 200, 471, 590, 473, 472,
	728, 0, 729, 733, 736, 732, 730, 731, 0, 809,
	0, 0, 0, 0, 0, 0, 0, 708, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 706, 0, 0, 0, 0, 760,
	0, 707, 0, 0, 755, 734, 738, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 735, 758, 762,
	298, 831, 756, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 832, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 753,
	0, 587, 0, 427, 0, 0, 815, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 757, 0, 385,
	366, 828, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 813, 362, 553, 586, 478, 0,
	827, 808, 810, 811, 814, 818, 819, 820, 821, 822,
	824, 826, 830, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 829, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 761, 528, 529, 352, 353, 354,
	355, 816, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	838, 812, 837, 839, 840, 836, 841, 842, 823, 717,
	0, 768, 834, 833, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 801, 775, 776, 777,
	714, 778, 772, 773, 715, 774, 802, 766, 798, 799,
	742, 769, 779, 797, 780, 800, 803, 804, 843, 844,
	786, 770, 225, 845, 783, 805, 796, 795, 781, 767,
	806, 807, 749, 744, 784, 785, 771, 789, 790, 791,
	716, 763, 764, 765, 787, 788, 745, 746, 747, 748,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 792, 759, 605, 474, 475,
	585, 0, 709, 0, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 750, 525, 476, 395, 348, 543, 542,
	0, 0, 817, 825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 740, 794, 793,
	727, 737, 0, 0, 277, 200, 471, 590, 473, 472,
	728, 0, 729, 733, 736, 732, 730, 731, 0, 809,
	0, 0, 0, 0, 0, 0, 696, 708, 0, 713,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 706, 0, 0, 0, 0, 760,
	0, 707, 0, 0, 755, 734, 738, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 735, 758, 762,
	298, 831, 756, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 832, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 753,
	0, 587, 0, 427, 0, 0, 815, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 757, 0, 385,
	366, 828, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 813, 362, 553, 586, 478, 0,
	827, 808, 810, 811, 814, 818, 819, 820, 821, 822,
	824, 826, 830, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 829, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 761, 528, 529, 352, 353, 354,
	355, 816, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	838, 812, 837, 839, 840, 836, 841, 842, 823, 717,
	0, 768, 834, 833, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 801, 775, 776, 777,
	714, 778, 772, 773, 715, 774, 802, 766, 798, 799,
	742, 769, 779, 797, 780, 800, 803, 804, 843, 844,
	786, 770, 225, 845, 783, 805, 796, 795, 781, 767,
	806, 807, 749, 744, 784, 785, 771, 789, 790, 791,
	716, 763, 764, 765, 787, 788, 745, 746, 747, 748,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 792, 0, 605, 474, 475,
	585, 0, 709, 177, 52, 166, 140, 0, 0, 0,
	0, 0, 0, 364, 0, 489, 522, 511, 594, 477,
	0, 167, 0, 0, 0, 0, 0, 0, 159, 0,
	304, 0, 168, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 117, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 171, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	139, 165, 175, 0, 103, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 192, 0, 0, 0, 399, 0,
	0, 331, 164, 158, 157, 443, 0, 385, 366, 204,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	563, 564, 565, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 422, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 195, 535, 538,
	468, 205, 0, 532, 547, 505, 546, 206, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 115, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 203, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 377, 272, 410, 388, 0, 261, 484, 335, 141,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 207, 39, 193,
	196, 198, 197, 0, 50, 533, 545, 579, 5, 588,
	589, 591, 593, 592, 120, 208, 474, 475, 585, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 117, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 2219, 2222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 417, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 2223, 427, 0, 0,
	0, 2218, 0, 2217, 399, 2215, 2220, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	2221, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 141, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 0, 0, 199, 0, 0,
	727, 737, 0, 0, 277, 200, 471, 590, 473, 472,
	728, 0, 729, 733, 736, 732, 730, 731, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 735, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 177, 52, 166, 140, 0, 0, 0, 0, 0,
	0, 364, 628, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 634, 0, 0, 0, 0,
	633, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 632, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 629, 631, 282,
	450, 378, 642, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 141, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 0, 525, 476, 395, 348,
	543, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 277, 200, 471, 590,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 2219, 2222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 0,
	414, 442, 298, 433, 0, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	458, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 587, 2223, 427, 0, 0, 0, 2218,
	0, 2217, 399, 2215, 2220, 331, 0, 0, 0, 443,
	0, 385, 366, 607, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 2221, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 297, 362, 553, 586,
	478, 0, 540, 479, 488, 289, 512, 524, 523, 358,
	438, 0, 535, 538, 468, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 423, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 447, 528, 529, 352,
	353, 354, 355, 315, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 552, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 256, 257, 258, 0, 0, 249, 250,
	251, 252, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 592, 0, 605,
	474, 475, 585, 364, 0, 489, 522, 511, 594, 477,
	0, 1051, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 0, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1037, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 2368, 2371, 2372, 2373, 2374, 2375, 2376, 0,
	2381, 2377, 2378, 2379, 2380, 0, 2363, 2364, 2365, 2366,
	1035, 2347, 2369, 0, 2348, 360, 2349, 2350, 2351, 2352,
	2353, 2354, 2355, 2356, 2357, 2360, 2361, 2358, 2359, 2367,
	372, 338, 373, 321, 350, 349, 351, 1062, 1064, 1066,
	1068, 1071, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 2362, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 2370, 335, 0,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 2240, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 417, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 2239, 427, 0, 0,
	0, 2245, 2242, 2244, 399, 0, 2243, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 2237, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	0, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 2240, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 2239, 427, 0, 0, 0, 2245, 2242, 2244,
	399, 0, 2243, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 1960, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 1961, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 1162, 1163,
	1164, 1161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 177, 605, 474, 475, 585, 0, 0, 0,
	0, 0, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	117, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 2006, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 141, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 177, 605, 474, 475, 585, 0, 0,
	0, 0, 0, 364, 0, 489, 522, 511, 594, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 117, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 1995, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 443, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 484, 335, 141,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 967, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 974, 975, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 978, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 962, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 952, 425, 271, 951,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 0, 427, 0, 0,
	0, 0, 0, 0, 399, 0, 0, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 965, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	0, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 966, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 969, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 976, 963,
	972, 964, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 973, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	177, 605, 474, 475, 585, 0, 0, 0, 0, 0,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 117, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1893,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 141, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 974,
	975, 0, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	978, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 952, 425, 271, 951, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 976, 1912, 972, 1913, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 973, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 2723, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 2726, 0, 0, 2725, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 1427, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 1425, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1423, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 1421, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 1425,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3673, 0, 199, 794, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 1425, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1423, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 1425, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3300, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	2311, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 2313, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 2332, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 1425,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 794, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3652, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 3442, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	3565, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3296, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3457, 0, 199, 0, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 3385, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 2941, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 0, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1893, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3055, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 2910, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2820, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 1425, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 0,
	605, 474, 475, 585, 364, 0, 489, 522, 511, 594,
	477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 0, 0, 334, 526, 508, 518, 509, 494,
	495, 496, 503, 314, 497, 498, 499, 469, 500, 470,
	501, 502, 0, 525, 476, 395, 348, 543, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 199, 0, 0, 2313,
	0, 0, 0, 277, 200, 471, 590, 473, 472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 400, 417, 278, 391, 430, 283, 398, 273, 363,
	387, 0, 0, 269, 415, 397, 345, 324, 325, 268,
	0, 382, 302, 316, 299, 361, 0, 414, 442, 298,
	433, 0, 425, 271, 0, 424, 360, 411, 416, 346,
	340, 270, 413, 344, 339, 328, 306, 458, 329, 330,
	320, 372, 338, 373, 321, 350, 349, 351, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 0, 0,
	587, 0, 427, 0, 0, 0, 0, 0, 0, 399,
	0, 0, 331, 0, 0, 0, 443, 0, 385, 366,
	607, 0, 0, 383, 336, 412, 374, 418, 401, 426,
	379, 375, 262, 402, 301, 347, 274, 276, 296, 303,
	305, 307, 308, 356, 357, 369, 390, 403, 404, 405,
	300, 284, 384, 285, 318, 286, 263, 292, 290, 293,
	392, 294, 265, 370, 409, 0, 313, 380, 343, 266,
	342, 371, 408, 407, 275, 434, 440, 441, 530, 0,
	446, 608, 609, 610, 455, 460, 461, 462, 464, 465,
	466, 467, 531, 548, 515, 485, 448, 539, 482, 486,
	487, 551, 0, 0, 0, 439, 332, 333, 0, 311,
	259, 260, 604, 297, 362, 553, 586, 478, 0, 540,
	479, 488, 289, 512, 524, 523, 358, 438, 0, 535,
	538, 468, 603, 0, 532, 547, 606, 546, 600, 368,
	0, 389, 544, 491, 0, 536, 510, 0, 537, 506,
	541, 0, 480, 0, 396, 420, 432, 449, 452, 481,
	566, 567, 568, 264, 451, 570, 571, 572, 573, 574,
	575, 576, 569, 423, 513, 490, 516, 431, 493, 492,
	0, 0, 527, 447, 528, 529, 352, 353, 354, 355,
	315, 554, 282, 450, 378, 0, 514, 0, 0, 0,
	0, 0, 0, 0, 0, 519, 520, 517, 611, 0,
	577, 578, 0, 0, 444, 445, 310, 317, 463, 319,
	281, 367, 312, 429, 326, 0, 456, 521, 457, 580,
	583, 581, 582, 359, 322, 323, 393, 327, 337, 381,
	428, 365, 386, 279, 419, 394, 341, 507, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 561, 560, 559, 558,
	557, 556, 555, 0, 0, 504, 406, 291, 253, 287,
	288, 295, 601, 598, 410, 602, 0, 261, 484, 335,
	0, 376, 309, 549, 550, 209, 210, 211, 212, 213,
	214, 215, 216, 254, 217, 218, 219, 220, 221, 222,
	223, 226, 227, 228, 229, 230, 231, 232, 233, 552,
	224, 225, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 0, 0, 0, 255,
	256, 257, 258, 0, 0, 249, 250, 251, 252, 0,
	0, 0, 435, 436, 437, 459, 421, 483, 599, 0,
	0, 0, 0, 0, 0, 0, 533, 545, 579, 0,
	588, 589, 591, 593, 592, 0, 605, 474, 475, 585,
	364, 0, 489, 522, 511, 594, 477, 0, 0, 2648,
	0, 0, 0, 0, 0, 0, 0, 304, 0, 0,
	334, 526, 508, 518, 509, 494, 495, 496, 503, 314,
	497, 498, 499, 469, 500, 470, 501, 502, 0, 525,
	476, 395, 348, 543, 542, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 199, 0, 0, 0, 0, 0, 0, 277,
	200, 471, 590, 473, 472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 400, 417, 278,
	391, 430, 283, 398, 273, 363, 387, 0, 0, 269,
	415, 397, 345, 324, 325, 268, 0, 382, 302, 316,
	299, 361, 0, 414, 442, 298, 433, 0, 425, 271,
	0, 424, 360, 411, 416, 346, 340, 270, 413, 344,
	339, 328, 306, 458, 329, 330, 320, 372, 338, 373,
	321, 350, 349, 351, 0, 0, 0, 0, 0, 453,
	454, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 0, 0, 587, 0, 427, 0,
	0, 0, 0, 0, 0, 399, 0, 0, 331, 0,
	0, 0, 443, 0, 385, 366, 607, 0, 0, 383,
	336, 412, 374, 418, 401, 426, 379, 375, 262, 402,
	301, 347, 274, 276, 296, 303, 305, 307, 308, 356,
	357, 369, 390, 403, 404, 405, 300, 284, 384, 285,
	318, 286, 263, 292, 290, 293, 392, 294, 265, 370,
	409, 0, 313, 380, 343, 266, 342, 371, 408, 407,
	275, 434, 440, 441, 530, 0, 446, 608, 609, 610,
	455, 460, 461, 462, 464, 465, 466, 467, 531, 548,
	515, 485, 448, 539, 482, 486, 487, 551, 0, 0,
	0, 439, 332, 333, 0, 311, 259, 260, 604, 297,
	362, 553, 586, 478, 0, 540, 479, 488, 289, 512,
	524, 523, 358, 438, 0, 535, 538, 468, 603, 0,
	532, 547, 606, 546, 600, 368, 0, 389, 544, 491,
	0, 536, 510, 0, 537, 506, 541, 0, 480, 0,
	396, 420, 432, 449, 452, 481, 566, 567, 568, 264,
	451, 570, 571, 572, 573, 574, 575, 576, 569, 423,
	513, 490, 516, 431, 493, 492, 0, 0, 527, 447,
	528, 529, 352, 353, 354, 355, 315, 554, 282, 450,
	378, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 519, 520, 517, 611, 0, 577, 578, 0, 0,
	444, 445, 310, 317, 463, 319, 281, 367, 312, 429,
	326, 0, 456, 521, 457, 580, 583, 581, 582, 359,
	322, 323, 393, 327, 337, 381, 428, 365, 386, 279,
	419, 394, 341, 507, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 561, 560, 559, 558, 557, 556, 555, 0,
	0, 504, 406, 291, 253, 287, 288, 295, 601, 598,
	410, 602, 0, 261, 484, 335, 0, 376, 309, 549,
	550, 209, 210, 211, 212, 213, 214, 215, 216, 254,
	217, 218, 219, 220, 221, 222, 223, 226, 227, 228,
	229, 230, 231, 232, 233, 552, 224, 225, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 0, 0, 0, 255, 256, 257, 258, 0,
	0, 249, 250, 251, 252, 0, 0, 0, 435, 436,
	437, 459, 421, 483, 599, 0, 0, 0, 0, 0,
	0, 0, 533, 545, 579, 0, 588, 589, 591, 593,
	592, 0, 605, 474, 475, 585, 364, 0, 489, 522,
	511, 594, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 334, 526, 508, 518,
	509, 494, 495, 496, 503, 314, 497, 498, 499, 469,
	500, 470, 501, 502, 0, 525, 476, 395, 348, 543,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 199, 0,
	0, 0, 0, 0, 0, 277, 200, 471, 590, 473,
	472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2026, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 400, 417, 278, 391, 430, 283, 398,
	273, 363, 387, 0, 0, 269, 415, 397, 345, 324,
	325, 268, 0, 382, 302, 316, 299, 361, 0, 414,
	442, 298, 433, 0, 425, 271, 0, 424, 360, 411,
	416, 346, 340, 270, 413, 344, 339, 328, 306, 458,
	329, 330, 320, 372, 338, 373, 321, 350, 349, 351,
	0, 0, 0, 0, 0, 453, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	0, 0, 587, 0, 427, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 331, 0, 0, 0, 443, 0,
	385, 366, 607, 0, 0, 383, 336, 412, 374, 418,
	401, 426, 379, 375, 262, 402, 301, 347, 274, 276,
	296, 303, 305, 307, 308, 356, 357, 369, 390, 403,
	404, 405, 300, 284, 384, 285, 318, 286, 263, 292,
	290, 293, 392, 294, 265, 370, 409, 0, 313, 380,
	343, 266, 342, 371, 408, 407, 275, 434, 440, 441,
	530, 0, 446, 608, 609, 610, 455, 460, 461, 462,
	464, 465, 466, 467, 531, 548, 515, 485, 448, 539,
	482, 486, 487, 551, 0, 0, 0, 439, 332, 333,
	0, 311, 259, 260, 604, 297, 362, 553, 586, 478,
	0, 540, 479, 488, 289, 512, 524, 523, 358, 438,
	0, 535, 538, 468, 603, 0, 532, 547, 606, 546,
	600, 368, 0, 389, 544, 491, 0, 536, 510, 0,
	537, 506, 541, 0, 480, 0, 396, 420, 432, 449,
	452, 481, 566, 567, 568, 264, 451, 570, 571, 572,
	573, 574, 575, 576, 569, 423, 513, 490, 516, 431,
	493, 492, 0, 0, 527, 447, 528, 529, 352, 353,
	354, 355, 315, 554, 282, 450, 378, 0, 514, 0,
	0, 0, 0, 0, 0, 0, 0, 519, 520, 517,
	611, 0, 577, 578, 0, 0, 444, 445, 310, 317,
	463, 319, 281, 367, 312, 429, 326, 0, 456, 521,
	457, 580, 583, 581, 582, 359, 322, 323, 393, 327,
	337, 381, 428, 365, 386, 279, 419, 394, 341, 507,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 561, 560,
	559, 558, 557, 556, 555, 0, 0, 504, 406, 291,
	253, 287, 288, 295, 601, 598, 410, 602, 0, 261,
	484, 335, 0, 376, 309, 549, 550, 209, 210, 211,
	212, 213, 214, 215, 216, 254, 217, 218, 219, 220,
	221, 222, 223, 226, 227, 228, 229, 230, 231, 232,
	233, 552, 224, 225, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 245, 246, 247, 0, 0,
	0, 255, 256, 257, 258, 0, 0, 249, 250, 251,
	252, 0, 0, 0, 435, 436, 437, 459, 421, 483,
	599, 0, 0, 0, 0, 0, 0, 0, 533, 545,
	579, 0, 588, 589, 591, 593, 592, 0, 605, 474,
	475, 585, 364, 0, 489, 522, 511, 594, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 304,
	0, 0, 334, 526, 508, 518, 509, 494, 495, 496,
	503, 314, 497, 498, 499, 469, 500, 470, 501, 502,
	0, 525, 476, 395, 348, 543, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 199, 0, 0, 0, 0, 0,
	0, 277, 200, 471, 590, 473, 472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2390, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 400,
	417, 278, 391, 430, 283, 398, 273, 363, 387, 0,
	0, 269, 415, 397, 345, 324, 325, 268, 0, 382,
	302, 316, 299, 361, 0, 414, 442, 298, 433, 0,
	425, 271, 0, 424, 360, 411, 416, 346, 340, 270,
	413, 344, 339, 328, 306, 458, 329, 330, 320, 372,
	338, 373, 321, 350, 349, 351, 0, 0, 0, 0,
	0, 453, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 0, 0, 587, 0,
	427, 0, 0, 0, 0, 0, 0, 399, 0, 0,
	331, 0, 0, 0, 443, 0, 385, 366, 607, 0,
	0, 383, 336, 412, 374, 418, 401, 426, 379, 375,
	262, 402, 301, 347, 274, 276, 296, 303, 305, 307,
	308, 356, 357, 369, 390, 403, 404, 405, 300, 284,
	384, 285, 318, 286, 263, 292, 290, 293, 392, 294,
	265, 370, 409, 0, 313, 380, 343, 266, 342, 371,
	408, 407, 275, 434, 440, 441, 530, 0, 446, 608,
	609, 610, 455, 460, 461, 462, 464, 465, 466, 467,
	531, 548, 515, 485, 448, 539, 482, 486, 487, 551,
	0, 0, 0, 439, 332, 333, 0, 311, 259, 260,
	604, 297, 362, 553, 586, 478, 0, 540, 479, 488,
	289, 512, 524, 523, 358, 438, 0, 535, 538, 468,
	603, 0, 532, 547, 606, 546, 600, 368, 0, 389,
	544, 491, 0, 536, 510, 0, 537, 506, 541, 0,
	480, 0, 396, 420, 432, 449, 452, 481, 566, 567,
	568, 264, 451, 570, 571, 572, 573, 574, 575, 576,
	569, 423, 513, 490, 516, 431, 493, 492, 0, 0,
	527, 447, 528, 529, 352, 353, 354, 355, 315, 554,
	282, 450, 378, 0, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 519, 520, 517, 611, 0, 577, 578,
	0, 0, 444, 445, 310, 317, 463, 319, 281, 367,
	312, 429, 326, 0, 456, 521, 457, 580, 583, 581,
	582, 359, 322, 323, 393, 327, 337, 381, 428, 365,
	386, 279, 419, 394, 341, 507, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 561, 560, 559, 558, 557, 556,
	555, 0, 0, 504, 406, 291, 253, 287, 288, 295,
	601, 598, 410, 602, 0, 261, 484, 335, 0, 376,
	309, 549, 550, 209, 210, 211, 212, 213, 214, 215,
	216, 254, 217, 218, 219, 220, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 552, 224, 225,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 245, 246, 247, 0, 0, 0, 255, 256, 257,
	258, 0, 0, 249, 250, 251, 252, 0, 0, 0,
	435, 436, 437, 459, 421, 483, 599, 0, 0, 0,
	0, 0, 0, 0, 533, 545, 579, 0, 588, 589,
	591, 593, 592, 0, 605, 474, 475, 585, 364, 0,
	489, 522, 511, 594, 477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 304, 0, 0, 334, 526,
	508, 518, 509, 494, 495, 496, 503, 314, 497, 498,
	499, 469, 500, 470, 501, 502, 0, 525, 476, 395,
	348, 543, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	199, 0, 0, 2388, 0, 0, 0, 277, 200, 471,
	590, 473, 472, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 400, 417, 278, 391, 430,
	283, 398, 273, 363, 387, 0, 0, 269, 415, 397,
	345, 324, 325, 268, 0, 382, 302, 316, 299, 361,
	0, 414, 442, 298, 433, 0, 425, 271, 0, 424,
	360, 411, 416, 346, 340, 270, 413, 344, 339, 328,
	306, 458, 329, 330, 320, 372, 338, 373, 321, 350,
	349, 351, 0, 0, 0, 0, 0, 453, 454, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 0, 0, 587, 0, 427, 0, 0, 0,
	0, 0, 0, 399, 0, 0, 331, 0, 0, 0,
	443, 0, 385, 366, 607, 0, 0, 383, 336, 412,
	374, 418, 401, 426, 379, 375, 262, 402, 301, 347,
	274, 276, 296, 303, 305, 307, 308, 356, 357, 369,
	390, 403, 404, 405, 300, 284, 384, 285, 318, 286,
	263, 292, 290, 293, 392, 294, 265, 370, 409, 0,
	313, 380, 343, 266, 342, 371, 408, 407, 275, 434,
	440, 441, 530, 0, 446, 608, 609, 610, 455, 460,
	461, 462, 464, 465, 466, 467, 531, 548, 515, 485,
	448, 539, 482, 486, 487, 551, 0, 0, 0, 439,
	332, 333, 0, 311, 259, 260, 604, 297, 362, 553,
	586, 478, 0, 540, 479, 488, 289, 512, 524, 523,
	358, 438, 0, 535, 538, 468, 603, 0, 532, 547,
	606, 546, 600, 368, 0, 389, 544, 491, 0, 536,
	510, 0, 537, 506, 541, 0, 480, 0, 396, 420,
	432, 449, 452, 481, 566, 567, 568, 264, 451, 570,
	571, 572, 573, 574, 575, 576, 569, 423, 513, 490,
	516, 431, 493, 492, 0, 0, 527, 447, 528, 529,
	352, 353, 354, 355, 315, 554, 282, 450, 378, 0,
	514, 0, 0, 0, 0, 0, 0, 0, 0, 519,
	520, 517, 611, 0, 577, 578, 0, 0, 444, 445,
	310, 317, 463, 319, 281, 367, 312, 429, 326, 0,
	456, 521, 457, 580, 583, 581, 582, 359, 322, 323,
	393, 327, 337, 381, 428, 365, 386, 279, 419, 394,
	341, 507, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	561, 560, 559, 558, 557, 556, 555, 0, 0, 504,
	406, 291, 253, 287, 288, 295, 601, 598, 410, 602,
	0, 261, 484, 335, 0, 376, 309, 549, 550, 209,
	210, 211, 212, 213, 214, 215, 216, 254, 217, 218,
	219, 220, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 552, 224, 225, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	0, 0, 0, 255, 256, 257, 258, 0, 0, 249,
	250, 251, 252, 0, 0, 0, 435, 436, 437, 459,
	421, 483, 599, 0, 0, 0, 0, 0, 0, 0,
	533, 545, 579, 0, 588, 589, 591, 593, 592, 2178,
	605, 474, 475, 585, 0, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 364, 0, 489, 522, 511, 594, 477, 0, 1880,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 0, 525, 476, 395, 348,
	543, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 1425, 0, 0, 0, 277, 200, 471, 590,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 0,
	414, 442, 298, 433, 0, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	458, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 587, 0, 427, 0, 0, 0, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 443,
	0, 385, 366, 607, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 1786, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 297, 362, 553, 586,
	478, 0, 540, 479, 488, 289, 512, 524, 523, 358,
	438, 0, 535, 538, 468, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 423, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 447, 528, 529, 352,
	353, 354, 355, 315, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 552, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 256, 257, 258, 0, 0, 249, 250,
	251, 252, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 592, 0, 605,
	474, 475, 585, 364, 0, 489, 522, 511, 594, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 0, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 417, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 1455, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 443, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 484, 335, 0,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 417, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 626, 587, 0, 427, 0, 0,
	0, 0, 0, 0, 399, 0, 0, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	0, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 296,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 905, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 616, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 379, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 576, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 0,
	0, 0, 0, 533, 545, 579, 0, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 364, 0, 489,
	522, 511, 594, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 0, 0, 334, 526, 508,
	518, 509, 494, 495, 496, 503, 314, 497, 498, 499,
	469, 500, 470, 501, 502, 0, 525, 476, 395, 348,
	543, 542, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 0, 277, 200, 471, 590,
	473, 472, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 400, 417, 278, 391, 430, 283,
	398, 273, 363, 387, 0, 0, 269, 415, 397, 345,
	324, 325, 268, 0, 382, 302, 316, 299, 361, 0,
	414, 442, 298, 433, 0, 425, 271, 0, 424, 360,
	411, 416, 346, 340, 270, 413, 344, 339, 328, 306,
	458, 329, 330, 320, 372, 338, 373, 321, 350, 349,
	351, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 0, 0, 587, 0, 427, 0, 0, 0, 0,
	0, 0, 399, 0, 0, 331, 0, 0, 0, 443,
	0, 385, 366, 607, 0, 0, 383, 336, 412, 374,
	418, 401, 426, 379, 375, 262, 402, 301, 347, 274,
	276, 296, 303, 305, 307, 308, 356, 357, 369, 390,
	403, 404, 405, 300, 284, 384, 285, 318, 286, 263,
	292, 290, 293, 392, 294, 265, 370, 409, 0, 313,
	380, 343, 266, 342, 371, 408, 407, 275, 434, 440,
	441, 530, 0, 446, 608, 609, 610, 455, 460, 461,
	462, 464, 465, 466, 467, 531, 548, 515, 485, 448,
	539, 482, 486, 487, 551, 0, 0, 0, 439, 332,
	333, 0, 311, 259, 260, 604, 297, 362, 553, 586,
	478, 0, 540, 479, 488, 289, 512, 524, 523, 358,
	438, 0, 535, 538, 468, 603, 0, 532, 547, 606,
	546, 600, 368, 0, 389, 544, 491, 0, 536, 510,
	0, 537, 506, 541, 0, 480, 0, 396, 420, 432,
	449, 452, 481, 566, 567, 568, 264, 451, 570, 571,
	572, 573, 574, 575, 576, 569, 423, 513, 490, 516,
	431, 493, 492, 0, 0, 527, 447, 528, 529, 352,
	353, 354, 355, 315, 554, 282, 450, 378, 0, 514,
	0, 0, 0, 0, 0, 0, 0, 0, 519, 520,
	517, 611, 0, 577, 578, 0, 0, 444, 445, 310,
	317, 463, 319, 281, 367, 312, 429, 326, 0, 456,
	521, 457, 580, 583, 581, 582, 359, 322, 323, 393,
	327, 337, 381, 428, 365, 386, 279, 419, 394, 341,
	507, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 561,
	560, 559, 558, 557, 556, 555, 0, 0, 504, 406,
	291, 253, 287, 288, 295, 601, 598, 410, 602, 0,
	261, 484, 335, 0, 376, 309, 549, 550, 209, 210,
	211, 212, 213, 214, 215, 216, 254, 217, 218, 219,
	220, 221, 222, 223, 226, 227, 228, 229, 230, 231,
	232, 233, 552, 224, 225, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 0,
	0, 0, 255, 256, 257, 258, 0, 0, 249, 250,
	251, 252, 0, 0, 0, 435, 436, 437, 459, 421,
	483, 599, 0, 0, 0, 0, 0, 0, 0, 533,
	545, 579, 0, 588, 589, 591, 593, 592, 0, 605,
	474, 475, 585, 364, 0, 489, 522, 511, 594, 477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 334, 526, 508, 518, 509, 494, 495,
	496, 503, 314, 497, 498, 499, 469, 500, 470, 501,
	502, 0, 525, 476, 395, 348, 543, 542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 199, 0, 0, 0, 0,
	0, 0, 277, 200, 471, 590, 473, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	400, 1405, 278, 391, 430, 283, 398, 273, 363, 387,
	0, 0, 269, 415, 397, 345, 324, 325, 268, 0,
	382, 302, 316, 299, 361, 0, 414, 442, 298, 433,
	0, 425, 271, 0, 424, 360, 411, 416, 346, 340,
	270, 413, 344, 339, 328, 306, 458, 329, 330, 320,
	372, 338, 373, 321, 350, 349, 351, 0, 0, 0,
	0, 0, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 587,
	0, 427, 0, 0, 0, 0, 0, 0, 399, 0,
	0, 331, 0, 0, 0, 443, 0, 385, 366, 607,
	0, 0, 383, 336, 412, 374, 418, 401, 426, 379,
	375, 262, 402, 301, 347, 274, 276, 296, 303, 305,
	307, 308, 356, 357, 369, 390, 403, 404, 405, 300,
	284, 384, 285, 318, 286, 263, 292, 290, 293, 392,
	294, 265, 370, 409, 0, 313, 380, 343, 266, 342,
	371, 408, 407, 275, 434, 440, 441, 530, 0, 446,
	608, 609, 610, 455, 460, 461, 462, 464, 465, 466,
	467, 531, 548, 515, 485, 448, 539, 482, 486, 487,
	551, 0, 0, 0, 439, 332, 333, 0, 311, 259,
	260, 604, 297, 362, 553, 586, 478, 0, 540, 479,
	488, 289, 512, 524, 523, 358, 438, 0, 535, 538,
	468, 603, 0, 532, 547, 606, 546, 600, 368, 0,
	389, 544, 491, 0, 536, 510, 0, 537, 506, 541,
	0, 480, 0, 396, 420, 432, 449, 452, 481, 566,
	567, 568, 264, 451, 570, 571, 572, 573, 574, 575,
	576, 569, 423, 513, 490, 516, 431, 493, 492, 0,
	0, 527, 447, 528, 529, 352, 353, 354, 355, 315,
	554, 282, 450, 378, 0, 514, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 520, 517, 611, 0, 577,
	578, 0, 0, 444, 445, 310, 317, 463, 319, 281,
	367, 312, 429, 326, 0, 456, 521, 457, 580, 583,
	581, 582, 359, 322, 323, 393, 327, 337, 381, 428,
	365, 386, 279, 419, 394, 341, 507, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 561, 560, 559, 558, 557,
	556, 555, 0, 0, 504, 406, 291, 253, 287, 288,
	295, 601, 598, 410, 602, 0, 261, 484, 335, 0,
	376, 309, 549, 550, 209, 210, 211, 212, 213, 214,
	215, 216, 254, 217, 218, 219, 220, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 552, 224,
	225, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 245, 246, 247, 0, 0, 0, 255, 256,
	257, 258, 0, 0, 249, 250, 251, 252, 0, 0,
	0, 435, 436, 437, 459, 421, 483, 599, 0, 0,
	0, 0, 0, 0, 0, 533, 545, 579, 0, 588,
	589, 591, 593, 592, 0, 605, 474, 475, 585, 364,
	0, 489, 522, 511, 594, 477, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 0, 0, 334,
	526, 508, 518, 509, 494, 495, 496, 503, 314, 497,
	498, 499, 469, 500, 470, 501, 502, 0, 525, 476,
	395, 348, 543, 542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 277, 200,
	471, 590, 473, 472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 400, 1403, 278, 391,
	430, 283, 398, 273, 363, 387, 0, 0, 269, 415,
	397, 345, 324, 325, 268, 0, 382, 302, 316, 299,
	361, 0, 414, 442, 298, 433, 0, 425, 271, 0,
	424, 360, 411, 416, 346, 340, 270, 413, 344, 339,
	328, 306, 458, 329, 330, 320, 372, 338, 373, 321,
	350, 349, 351, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 0, 0, 587, 0, 427, 0, 0,
	0, 0, 0, 0, 399, 0, 0, 331, 0, 0,
	0, 443, 0, 385, 366, 607, 0, 0, 383, 336,
	412, 374, 418, 401, 426, 379, 375, 262, 402, 301,
	347, 274, 276, 296, 303, 305, 307, 308, 356, 357,
	369, 390, 403, 404, 405, 300, 284, 384, 285, 318,
	286, 263, 292, 290, 293, 392, 294, 265, 370, 409,
	0, 313, 380, 343, 266, 342, 371, 408, 407, 275,
	434, 440, 441, 530, 0, 446, 608, 609, 610, 455,
	460, 461, 462, 464, 465, 466, 467, 531, 548, 515,
	485, 448, 539, 482, 486, 487, 551, 0, 0, 0,
	439, 332, 333, 0, 311, 259, 260, 604, 297, 362,
	553, 586, 478, 0, 540, 479, 488, 289, 512, 524,
	523, 358, 438, 0, 535, 538, 468, 603, 0, 532,
	547, 606, 546, 600, 368, 0, 389, 544, 491, 0,
	536, 510, 0, 537, 506, 541, 0, 480, 0, 396,
	420, 432, 449, 452, 481, 566, 567, 568, 264, 451,
	570, 571, 572, 573, 574, 575, 576, 569, 423, 513,
	490, 516, 431, 493, 492, 0, 0, 527, 447, 528,
	529, 352, 353, 354, 355, 315, 554, 282, 450, 378,
	0, 514, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 520, 517, 611, 0, 577, 578, 0, 0, 444,
	445, 310, 317, 463, 319, 281, 367, 312, 429, 326,
	0, 456, 521, 457, 580, 583, 581, 582, 359, 322,
	323, 393, 327, 337, 381, 428, 365, 386, 279, 419,
	394, 341, 507, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 561, 560, 559, 558, 557, 556, 555, 0, 0,
	504, 406, 291, 253, 287, 288, 295, 601, 598, 410,
	602, 0, 261, 484, 335, 0, 376, 309, 549, 550,
	209, 210, 211, 212, 213, 214, 215, 216, 254, 217,
	218, 219, 220, 221, 222, 223, 226, 227, 228, 229,
	230, 231, 232, 233, 552, 224, 225, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 0, 0, 0, 255, 256, 257, 258, 0, 0,
	249, 250, 251, 252, 0, 0, 0, 435, 436, 437,
	459, 421, 483, 599, 0, 0, 0, 0, 0, 0,
	0, 533, 545, 579, 0, 588, 589, 591, 593, 592,
	0, 605, 474, 475, 585, 364, 0, 489, 522, 511,
	594, 477, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 334, 526, 508, 518, 509,
	494, 495, 496, 503, 314, 497, 498, 499, 469, 500,
	470, 501, 502, 0, 525, 476, 395, 348, 543, 542,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 277, 200, 471, 590, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 400, 417, 278, 391, 430, 283, 398, 273,
	363, 387, 0, 0, 269, 415, 397, 345, 324, 325,
	268, 0, 382, 302, 316, 299, 361, 0, 414, 442,
	298, 433, 0, 425, 271, 0, 424, 360, 411, 416,
	346, 340, 270, 413, 344, 339, 328, 306, 458, 329,
	330, 320, 372, 338, 373, 321, 350, 349, 351, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 0,
	0, 587, 0, 427, 0, 0, 0, 0, 0, 0,
	399, 0, 0, 331, 0, 0, 0, 443, 0, 385,
	366, 607, 0, 0, 383, 336, 412, 374, 418, 401,
	426, 379, 375, 262, 402, 301, 347, 274, 276, 691,
	303, 305, 307, 308, 356, 357, 369, 390, 403, 404,
	405, 300, 284, 384, 285, 318, 286, 263, 292, 290,
	293, 392, 294, 265, 370, 409, 0, 313, 380, 343,
	266, 342, 371, 408, 407, 275, 434, 440, 441, 530,
	0, 446, 608, 609, 610, 455, 460, 461, 462, 464,
	465, 466, 467, 531, 548, 515, 485, 448, 539, 482,
	486, 487, 551, 0, 0, 0, 439, 332, 333, 0,
	311, 259, 260, 604, 297, 362, 553, 586, 478, 0,
	540, 479, 488, 289, 512, 524, 523, 358, 438, 0,
	535, 538, 468, 603, 0, 532, 547, 606, 546, 600,
	368, 0, 389, 544, 491, 0, 536, 510, 0, 537,
	506, 541, 0, 480, 0, 396, 420, 432, 449, 452,
	481, 566, 567, 568, 264, 451, 570, 571, 572, 573,
	574, 575, 576, 569, 423, 513, 490, 516, 431, 493,
	492, 0, 0, 527, 447, 528, 529, 352, 353, 354,
	355, 315, 554, 282, 450, 378, 0, 514, 0, 0,
	0, 0, 0, 0, 0, 0, 519, 520, 517, 611,
	0, 577, 578, 0, 0, 444, 445, 310, 317, 463,
	319, 281, 367, 312, 429, 326, 0, 456, 521, 457,
	580, 583, 581, 582, 359, 322, 323, 393, 327, 337,
	381, 428, 365, 386, 279, 419, 394, 341, 507, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 561, 560, 559,
	558, 557, 556, 555, 0, 0, 504, 406, 291, 253,
	287, 288, 295, 601, 598, 410, 602, 0, 261, 484,
	335, 0, 376, 309, 549, 550, 209, 210, 211, 212,
	213, 214, 215, 216, 254, 217, 218, 219, 220, 221,
	222, 223, 226, 227, 228, 229, 230, 231, 232, 233,
	552, 224, 225, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 247, 0, 0, 0,
	255, 256, 257, 258, 0, 0, 249, 250, 251, 252,
	0, 0, 0, 435, 436, 437, 459, 421, 483, 599,
	0, 0, 0, 0, 0, 0, 0, 533, 545, 579,
	0, 588, 589, 591, 593, 592, 0, 605, 474, 475,
	585, 364, 0, 489, 522, 511, 594, 477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 0,
	0, 334, 526, 508, 518, 509, 494, 495, 496, 503,
	314, 497, 498, 499, 469, 500, 470, 501, 502, 0,
	525, 476, 395, 348, 543, 542, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 199, 0, 0, 0, 0, 0, 0,
	277, 200, 471, 590, 473, 472, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 400, 417,
	278, 391, 430, 283, 398, 273, 363, 387, 0, 0,
	269, 415, 397, 345, 324, 325, 268, 0, 382, 302,
	316, 299, 361, 0, 414, 442, 298, 433, 0, 425,
	271, 0, 424, 360, 411, 416, 346, 340, 270, 413,
	344, 339, 328, 306, 458, 329, 330, 320, 372, 338,
	373, 321, 350, 349, 351, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 0, 0, 587, 0, 427,
	0, 0, 0, 0, 0, 0, 399, 0, 0, 331,
	0, 0, 0, 443, 0, 385, 366, 607, 0, 0,
	383, 336, 412, 374, 418, 401, 426, 650, 375, 262,
	402, 301, 347, 274, 276, 296, 303, 305, 307, 308,
	356, 357, 369, 390, 403, 404, 405, 300, 284, 384,
	285, 318, 286, 263, 292, 290, 293, 392, 294, 265,
	370, 409, 0, 313, 380, 343, 266, 342, 371, 408,
	407, 275, 434, 440, 441, 530, 0, 446, 608, 609,
	610, 455, 460, 461, 462, 464, 465, 466, 467, 531,
	548, 515, 485, 448, 539, 482, 486, 487, 551, 0,
	0, 0, 439, 332, 333, 0, 311, 259, 260, 604,
	297, 362, 553, 586, 478, 0, 540, 479, 488, 289,
	512, 524, 523, 358, 438, 0, 535, 538, 468, 603,
	0, 532, 547, 606, 546, 600, 368, 0, 389, 544,
	491, 0, 536, 510, 0, 537, 506, 541, 0, 480,
	0, 396, 420, 432, 449, 452, 481, 566, 567, 568,
	264, 451, 570, 571, 572, 573, 574, 575, 651, 569,
	423, 513, 490, 516, 431, 493, 492, 0, 0, 527,
	447, 528, 529, 352, 353, 354, 355, 315, 554, 282,
	450, 378, 0, 514, 0, 0, 0, 0, 0, 0,
	0, 0, 519, 520, 517, 611, 0, 577, 578, 0,
	0, 444, 445, 310, 317, 463, 319, 281, 367, 312,
	429, 326, 0, 456, 521, 457, 580, 583, 581, 582,
	359, 322, 323, 393, 327, 337, 381, 428, 365, 386,
	279, 419, 394, 341, 507, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 561, 560, 559, 558, 557, 556, 555,
	0, 0, 504, 406, 291, 253, 287, 288, 295, 601,
	598, 410, 602, 0, 261, 484, 335, 0, 376, 309,
	549, 550, 209, 210, 211, 212, 213, 214, 215, 216,
	254, 217, 218, 219, 220, 221, 222, 223, 226, 227,
	228, 229, 230, 231, 232, 233, 552, 224, 225, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 0, 0, 0, 255, 256, 257, 258,
	0, 0, 249, 250, 251, 252, 0, 0, 0, 435,
	436, 437, 459, 421, 483, 599, 0, 0, 0, 1868,
	0, 0, 0, 533, 545, 579, 177, 588, 589, 591,
	593, 592, 0, 605, 474, 475, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3307, 0,
	0, 0, 0, 0, 1870, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 898, 0, 0, 0, 0,
	0, 0, 1868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1845, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 1870, 0, 0,
	0, 0, 0, 0, 0, 892, 0, 888, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3463, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1845, 0,
	0, 0, 0, 1861, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1861, 0, 0, 0,
	0, 0, 0, 1868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1849, 894, 0, 887, 0, 0, 0,
	0, 0, 0, 0, 1855, 891, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1870, 0,
	0, 0, 872, 0, 1843, 1877, 879, 0, 1844, 1846,
	1848, 0, 1850, 1851, 1852, 1856, 1857, 1858, 1860, 1863,
	1864, 1865, 0, 1868, 0, 0, 886, 0, 0, 1853,
	1862, 1854, 0, 0, 0, 0, 1849, 0, 0, 0,
	0, 0, 0, 0, 0, 896, 0, 1855, 0, 1845,
	885, 0, 0, 0, 884, 0, 0, 0, 1870, 0,
	871, 0, 0, 1869, 877, 0, 0, 1843, 1877, 0,
	0, 1844, 1846, 1848, 0, 1850, 1851, 1852, 1856, 1857,
	1858, 1860, 1863, 1864, 1865, 0, 875, 0, 0, 0,
	0, 0, 1853, 1862, 1854, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1866, 0, 1845,
	0, 0, 0, 3434, 0, 0, 0, 1861, 0, 0,
	0, 0, 0, 895, 1842, 0, 1869, 0, 0, 0,
	0, 1841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 1859, 0, 0, 0, 0,
	0, 0, 0, 0, 1847, 0, 0, 0, 0, 0,
	1866, 0, 0, 0, 0, 0, 0, 1861, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1842, 0, 0,
	0, 0, 0, 0, 1841, 0, 0, 1849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1855, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1859, 0,
	0, 0, 0, 0, 0, 0, 893, 1847, 1843, 1877,
	0, 0, 1844, 1846, 1848, 0, 1850, 1851, 1852, 1856,
	1857, 1858, 1860, 1863, 1864, 1865, 0, 0, 0, 0,
	0, 0, 0, 1853, 1862, 1854, 0, 1849, 0, 0,
	0, 0, 0, 0, 0, 882, 0, 0, 1855, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1869, 1843, 1877,
	0, 0, 1844, 1846, 1848, 0, 1850, 1851, 1852, 1856,
	1857, 1858, 1860, 1863, 1864, 1865, 0, 0, 0, 0,
	0, 0, 0, 1853, 1862, 1854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1869, 1842, 0,
	0, 0, 0, 0, 0, 1841, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1859,
	0, 0, 0, 0, 0, 0, 0, 0, 1847, 0,
	0, 1866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1842, 0,
	0, 0, 0, 0, 0, 1841, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1859,
	0, 0, 0, 0, 0, 0, 0, 0, 1847,
}

var yyPact = [...]int{
	302, -1000, -1000, -1000, -318, 13760, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42884,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42884, -316, 42278, 42278, -1000, -1000, 2393, -1000, 41066, 15598,
	42884, 407, 404, 42884, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 750, -1000, 45308, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 644, 4946, 44702, 10702, -232, -1000, 1499,
	-61, 2246, 904, 924, 1095, 1095, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 45917,
	767, 41672, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3806, 332, 767, 20456, 75, 72,
	1499, 394, -122, -118, -129, 3581, -1000, 1050, 3712, 188,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10702, 10702, 13760, -358, 13760, 10702, 42884, 42884, -1000,
	-1000, -1000, -1000, -316, 41066, 644, 4946, 10702, 2246, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -118, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -122, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -129, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 72, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4734, -1000, 1380, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2770, 1372, 2238, 596, 42884, -1000, 130, 596,
	-1000, -1000, -1000, 1499, 3253, -1000, 42884, 42884, 154, 1631,
	-1000, 422, 405, 402, 265, 1371, -1000, -1000, -1000, -1000,
	-1000, -1000, 508, 3195, -1000, 42884, 42884, 2785, 42884, -1000,
	2057, 559, 4495, 2992, 1392, 743, 2816, -1000, -1000, 2769,
	-1000, 277, 311, 262, 431, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 237, -1000, 3087, -1000, -1000, 264, -1000, -1000,
	250, -1000, -1000, -1000, 48, -1000, -1000, -1000, -1000, -1000,
	-1000, -51, -1000, -1000, 960, 2286, 10702, 2911, -1000, 1764,
	-1000, -1000, -1000, -1000, 6427, 12532, 12532, 12532, 12532, 42884,
	-1000, -1000, 2599, 10702, 2767, 2766, 2765, 2758, -1000, -1000,
	-1000, -1000, -1000, -1000, 1362, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1856, -1000, -1000, -1000, 13142, -1000,
	2753, 2752, 2744, 2741, 2740, 2739, 2738, 2736, 2730, 2729,
	2728, 2708, 2707, 2706, 2453, 14982, 2705, 2231, 2229, 2700,
	2699, 2698, 2222, 2697, 2696, 2695, 2453, 2453, 2693, 2692,
	2691, 2689, 2688, 2685, 2684, 2683, 2682, 2681, 2679, 2666,
	2661, 2660, 2653, 2652, 2651, 2649, 2647, 2643, 2642, 2640,
	2639, 2632, 2631, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1127, -1000, 2629, 3212,
	2542, -1000, 3046, 3038, 3036, 3034, -277, 2619, 2009, -1000,
	-1000, 100, -1000, -86, -1000, -1000, 891, -1000, 845, -1000,
	638, 42884, 42884, 176, 716, 638, 638, 638, 638, 638,
	715, 638, 3097, 744, 728, 725, 724, 638, -80, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1625, 1622, 2875, 828,
	-1000, -1000, -1000, -1000, 1237, 42884, -1000, 2548, 1495, 1495,
	3171, 3096, 571, 570, 562, 1495, 443, -1000, 1601, 1601,
	1601, 1601, 1495, 459, 547, 3100, 3100, 65, 1601, 14,
	1495, 1495, 14, 1495, 1495, 1640, 218, -288, -1000, -1000,
	-1000, -1000, 1601, 1601, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3082, 3076, 644, 644, 42884, 169, 42884, 644, 644,
	644, 653, -29, 44096, 43490, 2057, 541, 540, 1244, 1687,
	-1000, 1493, 42884, 42884, 1493, 1493, 23491, 22885, -1000, 42884,
	-1000, 3212, 2542, 2450, 1223, 2446, 2542, -134, -136, -137,
	644, 644, 644, 644, 644, 232, 644, 644, 644, 644,
	644, 42884, 42884, 40460, 644, 644, 644, 8867, 8867, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13760, 1948,
	2004, 187, -26, -306, 246, -1000, -1000, 42884, 2938, 222,
	-1000, -1000, -1000, 2474, -1000, 2527, 2527, 2527, 2527, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2527, 2527,
	2544, 2618, -1000, -1000, 2523, 2523, 2523, 2474, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2532, 2532, 2543, 2543, 2532, 42884, 10702,
	42884, 2958, 391, 2613, -1000, 42884, 10702, 378, 3212, 2956,
	3100, 3157, -1000, -1000, 1332, 2007, 2219, -1000, 265, -1000,
	415, 265, 1542, -1000, 935, -1000, -1000, -1000, -1000, -1000,
	42884, -51, 358, -1000, -1000, 2197, 2612, -1000, 569, 1106,
	1305, -1000, 228, 4762, 35005, 2057, 35005, 42884, -1000, -1000,
	-1000, -1000, -1000, -1000, 30, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 248, -1000,
	10702, 10702, 10702, 10702, 10702, -1000, 649, 11922, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 12532, 12532, 12532, 12532, 12532,
	12532, 12532, 12532, 12532, 12532, 12532, 12532, 2596, 1525, 12532,
	12532, 12532, 12532, 1223, 3029, 1243, 282, -1000, -1000, -1000,
	-1000, 10702, -1000, 1656, 2286, 10702, 10702, 10702, 10702, 42884,
	-1000, -1000, 3497, 10702, 10702, 3715, 10702, 3030, 10702, 10702,
	10702, 2445, 5199, 42884, 10702, -1000, 2444, 2443, -1000, -1000,
	1899, 10702, -1000, -1000, 10702, -1000, -1000, 10702, 12532, 10702,
	-1000, 10702, 10702, 10702, -1000, -1000, 1339, 3030, 3030, 3030,
	1617, 10702, 10702, 3030, 3030, 3030, 1610, 3030, 3030, 3030,
	3030, 3030, 3030, 3030, 3030, 3030, 3030, 2432, 2431, 2430,
	10092, 3100, -232, -1000, 8257, 2956, 3100, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -280, 2611, 42884,
	2218, 2200, -325, 11, 900, 848, 853, -1000, 42884, 1667,
	3023, -1000, 2603, 42884, 638, 638, 638, -1000, 42884, 35005,
	42884, 42884, 2057, 42884, 42884, 42884, 638, 638, 638, 638,
	42884, -1000, 2903, 35005, 2887, 653, -1000, 42884, 1237, 3022,
	42884, 3171, 12532, 12532, -1000, -1000, 10702, 39854, 1601, 1495,
	1495, -1000, -1000, 42884, -1000, -1000, -1000, 1601, 42884, 1601,
	1601, 3171, 1601, -1000, -1000, -1000, 1495, 1495, -1000, -1000,
	10702, -1000, -1000, 1601, 1601, -1000, -1000, 3171, 42884, 28,
	3171, 3171, 62, -1000, -1000, -1000, 1495, 42884, 42884, 638,
	42884, -1000, 42884, 42884, -1000, -1000, 42884, 42884, 4109, 42884,
	39248, 3070, -1000, 35005, 42884, 42884, 32581, -1000, 1201, -1000,
	-23, -1000, 9, -29, 1493, -29, 1493, -1000, 566, 563,
	21673, 509, 35005, 5809, -1000, -1000, 1493, 1493, 5809, 5809,
	1415, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1233, -1000,
	241, 3100, -1000, -1000, -1000, -1000, -1000, 2006, 2001, 1999,
	42884, 42884, 35005, 2057, 42884, 644, 42884, 42884, 42884, 42884,
	42884, -1000, 2600, 1329, -1000, 2988, 42884, 42884, 42884, 1256,
	-1000, -1000, 18628, 1324, 1256, -1000, 1727, -1000, 10702, 13760,
	-258, 10702, 13760, 13760, 10702, 13760, -1000, 10702, 217, -1000,
	-1000, -1000, -1000, 1998, -1000, 1997, -1000, -1000, -1000, -1000,
	-1000, 2188, 2188, -1000, 1994, -1000, -1000, -1000, -1000, 1988,
	-1000, -1000, 1987, -1000, -1000, -1000, 2428, 960, -1000, 2182,
	2803, -233, -1000, 19850, 42884, 42884, -326, 189, -1000, -233,
	-1000, 19239, 42884, 3100, -1000, -238, 2956, 10702, 42884, -1000,
	3095, -1000, -1000, 265, -1000, 429, 348, -1000, -1000, -1000,
	-1000, -1000, -1000, 1323, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1230, -1000, 42884, -1000, -1000, 228, 35005,
	36823, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 227, -1000,
	-1000, 179, -1000, 692, 192, 1539, -1000, -1000, 190, 193,
	157, 783, 2286, -1000, 1704, 1704, 1700, -1000, 601, -1000,
	-1000, -1000, -1000, 2599, -1000, -1000, -1000, 1991, 2658, -1000,
	1662, 1662, 1426, 1426, 1426, 1426, 1426, 2045, 2045, -1000,
	-1000, -1000, 6427, 2596, 12532, 12532, 12532, 12532, 618, 618,
	1792, 2874, -1000, 10702, 177, 1655, -1000, 10702, 2220, 1498,
	2211, 1382, 1313, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2427, 2426, 2440, 3192, 2424, 10702, -1000,
	-1000, 1537, 1532, 1530, -1000, 2149, 9482, -1000, -1000, -1000,
	2423, 1301, 2418, -1000, -1000, -1000, 2417, 1529, 1043, 2409,
	1584, 2406, 2403, 2402, 2400, 1229, 10702, 10702, 10702, 10702,
	2399, 1520, 1519, 10702, 10702, 10702, 10702, 2398, 10702, 10702,
	10702, 10702, 10702, 10702, 10702, 10702, 10702, 10702, 98, 98,
	98, 1220, 1216, -1000, -1000, 1518, -1000, 2286, -1000, -1000,
	2956, -1000, 2595, 1985, 1206, -1000, -1000, -308, 2128, -1000,
	-1000, 882, 841, 888, 3093, 2969, 42884, 987, 2594, 42884,
	42884, 42884, 208, -1000, 1113, -1000, 192, -66, 414, 976,
	2781, 3189, -146, 42884, 42884, 42884, 42884, 3021, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 38642, -1000, 2589, 1514,
	-1000, -1000, -1000, -1000, 2286, 2780, 42884, 42884, 3171, 3171,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1601, 3171, 3171,
	1310, 1495, 1601, -1000, -1000, 1601, -1000, -1000, 1601, -1000,
	-1000, 1278, -1000, 42884, -1000, -1000, -1000, 3019, 2548, 1205,
	-1000, -1000, -1000, 3156, 1039, 632, 632, 873, 751, 3154,
	17416, -1000, 1541, 973, 690, 2923, 269, -1000, 1541, -174,
	600, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 504, 503,
	1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
	1541, 908, 1541, 1541, 1541, 1541, 1541, -1000, 1541, 2588,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 513, 204, 3067,
	307, 306, 1113, 3066, 314, 3075, 1112, -1000, -1000, -1000,
	-1000, 25915, 25915, 21067, 25915, -1000, 181, -29, -4, -1000,
	-1000, 1201, 5809, 1201, 5809, -1000, -1000, 670, -1000, -1000,
	976, -1000, 42884, 42884, -1000, -1000, 2587, 1620, -1000, -1000,
	14982, -1000, 5809, 5809, -1000, -1000, 26521, 42884, -1000, -53,
	-1000, -55, 2956, -1000, -1000, -1000, 1192, -1000, -1000, 1194,
	976, 2801, 42884, 1192, 1192, 1192, -1000, -1000, 16810, 42884,
	42884, -1000, -1000, -1000, 3171, 8867, -1000, 32581, -1000, -1000,
	38035, -1000, 37429, 3171, 1642, -1000, 13760, 1990, 184, -1000,
	235, -315, 175, 1900, 173, 2286, -1000, -1000, 2395, 2394,
	1496, -1000, 1492, 2386, 1490, 1488, -1000, 0, -1000, 2945,
	990, -1000, 2584, -1000, 1482, 2871, -1000, 1191, -1000, 1619,
	1442, -1000, 10702, -1000, 990, 1428, 2857, 1191, 2956, 2179,
	-1000, 1162, -1000, 2168, 1276, 148, -1000, -1000, -1000, 42884,
	2197, 1413, 36823, 1019, -1000, 665, 1274, 1271, -1000, 35005,
	236, 35005, -1000, 35005, -1000, -1000, 366, -1000, 42884, 2949,
	-1000, -1000, -1000, 2128, 1618, -338, 42884, -1000, -1000, -1000,
	-1000, -1000, 1386, -1000, 618, 618, 1792, 2503, -1000, 12532,
	-1000, 12532, 3013, -1000, 1638, -1000, 10702, 1959, 4644, 10702,
	4644, 863, 24703, 42884, -1000, -1000, 10702, 10702, -1000, 2982,
	-1000, -1000, -1000, -1000, 10702, 10702, 1938, -1000, 42884, -1000,
	-1000, -1000, -1000, 24703, -1000, 12532, -1000, -1000, -1000, -1000,
	10702, 1124, 1124, 2977, 1384, 98, 98, 98, 2964, 2889,
	2838, 1381, 98, 2829, 2817, 2796, 2786, 2763, 2703, 2592,
	2579, 2510, 2500, -1000, 2583, -1000, -1000, 1790, 11312, 8257,
	-1000, -1000, 272, 1122, 1982, 2178, 115, -1000, 1613, -1000,
	-1000, -1000, 838, 353, -1000, 234, 2383, 1116, -1000, -1000,
	42884, -1000, -1000, -1000, 16810, 2548, 2577, 2548, 97, 1541,
	564, 35005, 534, -1000, 42884, 1903, 1612, 2799, 697, 2937,
	42884, 2572, 375, 2571, 2555, 3018, 397, 4888, 42884, 1097,
	-1000, 1263, 3712, -1000, 42884, -1000, 2057, -1000, 1495, -1000,
	-1000, 3171, -1000, -1000, 10702, 10702, 3171, 1495, 1495, 1601,
	42884, -1000, 397, 4888, 3016, 4358, 462, 2167, -1000, 42884,
	-1000, -1000, -1000, 772, -1000, 827, 638, 42884, 1752, 827,
	1743, 2553, -1000, -1000, 42884, 42884, 42884, 42884, -1000, -1000,
	42884, -1000, 42884, 42884, 42884, 42884, 42884, 36217, -1000, 42884,
	42884, -1000, 42884, 1742, 42884, 1737, 2934, -1000, 1541, 1541,
	796, -1000, -1000, 546, -1000, 36217, 1978, 1977, 1970, 1967,
	2177, 2170, 2169, 1541, 1541, 1947, 2166, 35611, 2160, 1059,
	1944, 1942, 1940, 1995, 2154, 810, -1000, 2151, 1984, 1965,
	1945, 42884, 2552, 2092, -1000, -1000, 97, 1541, 303, 42884,
	1609, 564, 411, 2018, 22279, 42884, 32581, 32581, 32581, 32581,
	-1000, 2846, 2835, -1000, 2847, 2843, 2854, 42884, 32581, 2548,
	-1000, 35611, -1000, -1000, -1000, 1223, 1377, 3122, 874, 10702,
	-1000, -1000, -37, 3, -1000, -1000, -1000, 35005, 2141, 509,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3092, 42884, 42884,
	640, 2382, 1111, -1000, -1000, -1000, 4888, 2527, 2527, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2527, 2527,
	2544, -1000, -1000, 2523, 2523, 2523, 2474, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2532, 2532, 2543,
	2543, 2532, -1000, -1000, 3169, -1000, 1110, -1000, -1000, 1261,
	-1000, 3169, 1661, -319, 13760, 1650, 1634, -1000, 10702, 13760,
	10702, -260, 290, -267, -1000, -1000, -1000, 2136, -1000, -1000,
	-1000, 1939, -1000, 1935, 118, 137, 1720, -233, 8257, 390,
	42884, -233, 42884, 8257, -1000, 42884, 166, 389, -233, 3092,
	0, 10702, 2916, -1000, -1000, 42884, 1917, -1000, -1000, -1000,
	3182, 35005, 2057, 1473, 34399, -1000, 263, -1000, 226, 538,
	2135, -1000, 722, 114, 2129, 2128, -1000, -1000, -1000, -1000,
	12532, -1000, -1000, -1000, -1000, 2286, 10702, 2381, -1000, 865,
	865, 2109, 2376, 2375, -1000, 2527, 2527, -1000, 2474, 2523,
	2474, 865, 865, 2372, -1000, 1806, 2491, -1000, 2448, 2410,
	10702, -1000, 2370, 2746, 1342, -84, -202, 98, 98, -1000,
	-1000, -1000, -1000, 98, 98, 98, 98, -1000, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 599, -116,
	-292, -117, -294, -1000, 2368, 1058, -1000, -1000, -1000, -1000,
	-1000, 3715, 1042, -1000, -1000, 2128, 2127, -1000, -1000, -1000,
	42884, 2125, 2124, 987, 4888, 2361, 2997, 16204, 2994, 2019,
	-1000, -1000, -1000, 33793, 533, -1000, -1000, -1000, 630, 251,
	1916, 510, -1000, 42884, 314, 2883, 1594, 2121, 42884, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2937, -1000, 920, 351,
	31369, 14376, -1000, 385, 16204, 16204, 385, 361, 1566, -1000,
	596, 1016, 128, 32581, 42884, -1000, 31975, 2360, -1000, 976,
	3171, -1000, 2286, 2286, -1000, 3171, 3171, 1495, -1000, 361,
	-1000, 385, -1000, 1047, 18022, 430, 427, 412, -1000, 602,
	-1000, -1000, 589, 2914, 4888, -1000, 42884, -1000, 42884, -1000,
	42884, 42884, 638, 10702, 2914, 42884, 662, -1000, -1000, 961,
	363, 330, 647, 647, 1036, -1000, 2970, -1000, -1000, 1030,
	-1000, -1000, -1000, -1000, 42884, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 24703, 24703, 3055, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2116, 2115,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42884,
	1363, -1000, 1593, 2019, 33793, 1591, 1493, 2114, 533, 1903,
	1590, -1000, 2112, -1000, 993, 42884, 42884, -1000, 1104, -1000,
	1588, 2776, 2792, 2776, -1000, -1000, -1000, -1000, 2833, -1000,
	2672, -1000, -1000, 1104, -1000, -1000, -1000, -1000, -1000, 874,
	-1000, 3037, 827, 827, 827, 2356, -1000, -1000, -1000, 1019,
	2347, -1000, -1000, -1000, 3204, -1000, -1000, -1000, -1000, -1000,
	-1000, 16810, 2935, 3165, 3152, 33187, 3165, -1000, -319, 1636,
	-1000, 1943, 170, 1571, 42884, -1000, -1000, -1000, 2346, 2341,
	-240, 141, 3151, 3149, 869, -1000, 2333, 1012, -233, -1000,
	-1000, 990, -1000, -1000, -1000, -1000, -233, -1000, 990, -1000,
	118, -1000, -1000, 2919, -1000, -1000, 2057, -1000, 223, -1000,
	-1000, -1000, -1000, -1000, -1000, 174, -1000, 42884, -1000, 1004,
	111, -1000, 2286, -1000, -1000, -1000, -1000, -1000, 4644, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10702, -1000, -1000, -1000, 2385, -1000, -1000, 10702, 2331, 2108,
	2330, 2107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3212, -1000,
	3148, 1357, 2329, 2328, 1354, 2324, 2321, -1000, 10702, 2319,
	3715, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 717, 385,
	2311, 997, -1000, -1000, -1000, -1000, 385, -1000, 2096, 191,
	-1000, -1000, -1000, 2095, 2093, 1907, -1000, -1000, 1924, 1355,
	197, -1000, -1000, -1000, -1000, -1000, -1000, 2018, 1996, 1583,
	-346, -1000, 2518, -1000, 1541, 1541, 1541, 42884, 1341, -1000,
	1541, 1541, 2298, -1000, 2285, 2277, -149, 604, 1568, 1564,
	-1000, 1902, 25915, 32581, 31975, 1072, -1000, 1260, -1000, -1000,
	-1000, -1000, -1000, 3171, 604, -1000, 426, 1897, 12532, 2517,
	12532, 2514, 440, 2509, 1321, -1000, 42884, -1000, -1000, 42884,
	297, 2506, -1000, 2505, 2779, 417, 2502, 2497, 42884, 2337,
	-1000, 2914, 42884, 668, 2928, -1000, -1000, -1000, 322, -1000,
	-1000, 452, -1000, 42884, -1000, 42884, -1000, 1408, -1000, 24703,
	-1000, -1000, 1319, -1000, 2092, 2087, -1000, 191, 2086, 5809,
	-1000, -1000, 2883, 2084, -1000, 42884, 993, 993, 3212, 42884,
	8257, -1000, -1000, 10702, 2496, -1000, 10702, -1000, -1000, -1000,
	-1000, -1000, 2495, 2926, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1118, -1000, 10702, 10702, -1000, -1000, 635, 13760, -268,
	278, -1000, -1000, -1000, -242, 2082, -1000, -1000, 3145, 2081,
	2032, 42884, -1000, -1000, 990, 990, -240, -1000, -1000, 976,
	-1000, -1000, 916, 506, -1000, 2274, 2322, -1000, 2203, 98,
	-1000, 98, -1000, 201, 10702, -1000, 2079, -1000, -1000, -1000,
	2076, -1000, -1000, 2192, -1000, 2272, 4888, -154, -149, 16204,
	-154, -1000, -1000, 356, -1000, -1000, 313, -1000, -1000, 1918,
	573, -1000, -1000, -1000, 1575, 1777, 2053, 29551, 24703, 25309,
	2075, -1000, -1000, 31369, 1118, 1118, 45913, 248, 46197, -1000,
	2494, 927, 1536, -1000, 1895, -1000, 1892, -1000, 3171, 1072,
	125, -1000, -1000, 1463, -1000, 927, 2167, 3139, -1000, 1832,
	42884, 1729, 42884, 2493, 1572, 12532, -1000, 589, 2856, -1000,
	-1000, 297, -1000, -1000, 1781, 12532, -1000, -1000, 2073, 25309,
	784, 1570, 1553, 764, 2484, -1000, 469, 3203, -1000, -1000,
	-1000, 788, 2483, -1000, 1717, 1711, -1000, 42884, -1000, 29551,
	29551, 455, 455, 29551, 29551, 2480, 647, -1000, -1000, 12532,
	-1000, -1000, 1541, -1000, -1000, -1000, 1541, 1361, -1000, -1000,
	-1000, -1000, -1000, -1000, 1996, -1000, -1000, 3100, -1000, -1000,
	2286, 42884, 2286, 30763, -1000, 3136, 3135, -1000, 2286, 960,
	-1000, -319, 42884, 42884, -249, 1891, -1000, 2072, 136, -1000,
	-1000, 974, -242, -251, 62, 24703, 1545, -1000, -1000, -1000,
	-1000, -1000, 2269, -1000, 616, -1000, -1000, -1000, 960, 2267,
	2262, -1000, -1000, -144, -1000, -1000, 367, -1000, -1000, -1000,
	521, 2071, -1000, -1000, 312, -1000, -1000, 2069, -1000, -1000,
	110, -1000, 1543, 1288, -1000, 2474, 10702, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 587, -1000, 385, 46137, -1000,
	973, -1000, 916, 587, 28339, 550, 283, -1000, 1889, -1000,
	-1000, 3212, -1000, 544, -1000, 434, -1000, 1283, -1000, 1282,
	30157, 1886, 1696, -1000, 45976, 713, -1000, -1000, 1792, -1000,
	-1000, -1000, -1000, -1000, -1000, 2068, 2066, -1000, -1000, -1000,
	-1000, -1000, 1868, 2462, 22, 3052, 2065, -1000, -1000, 2461,
	1269, 1254, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1249, 1247, 29551, -1000, -1000, 1792, 1866, 24703, 1541,
	-1000, -1000, 1224, 1212, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2460, -1000, -1000, 3131, -249, -1000, 2064, 109, 126,
	-1000, 2061, -1000, -1000, 537, -234, 94, 66, 26, -1000,
	-1000, -1000, 10702, -1000, -1000, 42884, 460, -1000, -1000, -1000,
	167, -1000, -1000, -1000, -1000, 2053, 2040, -1000, 29551, 2970,
	2181, 421, 3127, -1000, 46197, -1000, 1541, -1000, 421, 1208,
	-1000, 1541, 1541, -1000, 388, -1000, 1531, -1000, 1849, -1000,
	3100, -1000, 357, -1000, 423, -1000, -1000, -1000, 1199, -1000,
	-1000, -1000, 45976, 428, -1000, 543, 2457, -1000, -1000, 2260,
	10702, 2453, 1541, 2255, -140, 29551, 2777, 2512, 2396, 2117,
	1198, -1000, -1000, 24703, -1000, -1000, 28945, 42884, 2032, -1000,
	-1000, 650, 131, 126, -1000, 3116, 123, 3115, 3114, 951,
	1690, -1000, 91, 88, 80, -1000, -1000, -1000, -1000, 515,
	-1000, 261, -1000, -1000, -1000, 288, -1000, -1000, 2970, -1000,
	3112, 462, -1000, 24703, -1000, -1000, 28339, 1118, 1118, -1000,
	-1000, 1848, -1000, -1000, -1000, -1000, 1828, -1000, -1000, -1000,
	1152, -1000, 42884, 758, 7647, -1000, 2161, -1000, 42884, -1000,
	2791, -1000, 224, 1142, 288, 455, 288, 455, 288, 455,
	288, 455, 259, -1000, -1000, -1000, 1121, -1000, -1000, 2452,
	1824, 141, 112, 3110, -1000, 2032, 3106, 2032, 2032, -1000,
	101, 537, -1000, -1000, -1000, 2038, -1000, -1000, -1000, -1000,
	1541, 1541, 2037, 2036, 344, -1000, -1000, -1000, 27733, 430,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 428, 46197, -1000,
	7647, 1081, -1000, 2286, -1000, 647, -1000, -1000, 2788, 2787,
	3187, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 42884, 3050, 24097, 116, -1000, -1000, -1000, 2033, -1000,
	2032, -1000, -1000, 1521, -1000, -290, 1801, 1789, -1000, -1000,
	42884, -1000, 42884, 426, -1000, 46197, 1078, -1000, 7647, -1000,
	-1000, 3202, -1000, 3197, 775, 775, 288, 288, 288, 288,
	-1000, -1000, 42884, -1000, 1057, -1000, -1000, -1000, 1253, -1000,
	-1000, -1000, -1000, 2031, -1000, -1000, 2025, -1000, -1000, -1000,
	1046, 2167, -1000, -1000, -1000, -1000, -1000, 1838, 475, -1000,
	941, -1000, 1516, -1000, 27127, 42884, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42884, 7037, -1000, 1048, -1000, -1000, 2286,
	42884, -1000,
}

var yyPgo = [...]int{
	0, 176, 3224, 251, 173, 3761, 79, 250, 226, 222,
	247, 3758, 3757, 3756, 2970, 2952, 3755, 3753, 3752, 3751,
	3749, 3748, 3746, 3745, 3744, 3742, 3741, 3740, 3739, 3738,
	3737, 3735, 3734, 3733, 3730, 3729, 3724, 3723, 3722, 3720,
	3719, 3714, 3713, 3711, 3709, 3704, 245, 3703, 3702, 3701,
	3699, 3698, 3696, 3695, 3693, 3692, 3691, 3690, 3689, 3688,
	3687, 3685, 3684, 3683, 3682, 3681, 3680, 3679, 3678, 3677,
	3672, 3671, 3669, 3668, 3666, 3665, 3664, 3662, 3661, 3659,
	212, 3658, 2933, 3657, 3656, 3655, 3654, 3650, 3649, 3648,
	244, 3647, 3646, 3645, 3640, 3638, 3637, 3636, 3628, 3625,
	3624, 3622, 235, 3621, 3619, 3617, 3616, 227, 3615, 233,
	3614, 171, 141, 3613, 3612, 3611, 3606, 3605, 3604, 248,
	189, 72, 3602, 52, 3600, 3598, 223, 3597, 150, 3594,
	148, 3593, 3592, 3591, 3584, 3582, 3580, 3578, 3577, 3576,
	3575, 3574, 3573, 3572, 3571, 3570, 3569, 3568, 3567, 95,
	3566, 259, 3564, 75, 3563, 3562, 122, 96, 125, 264,
	1885, 269, 252, 187, 170, 94, 3558, 2971, 3552, 163,
	229, 161, 37, 3551, 136, 3550, 258, 44, 48, 255,
	146, 58, 162, 118, 3547, 219, 115, 110, 3546, 3545,
	143, 232, 182, 3544, 105, 3542, 3541, 3540, 3539, 3538,
	207, 197, 3537, 3536, 130, 3534, 3532, 134, 3531, 77,
	127, 178, 123, 3530, 98, 117, 144, 126, 97, 3528,
	107, 3526, 3525, 3520, 3518, 180, 3516, 3515, 135, 68,
	3514, 3513, 3512, 69, 3511, 70, 3510, 33, 3509, 67,
	3508, 3507, 3506, 3505, 3504, 3503, 3501, 3496, 3491, 3490,
	3489, 3486, 56, 3485, 3483, 8, 10, 12, 3482, 25,
	3481, 183, 3480, 3479, 3478, 3475, 3474, 93, 87, 3473,
	88, 169, 3472, 14, 28, 73, 3471, 3469, 224, 218,
	104, 155, 3466, 325, 3465, 3463, 3462, 166, 3459, 535,
	3458, 3457, 3453, 3452, 3451, 3450, 191, 3448, 220, 41,
	3447, 132, 133, 3446, 38, 49, 213, 221, 3445, 3444,
	3443, 519, 202, 99, 35, 0, 3442, 159, 3441, 3440,
	3439, 256, 3438, 236, 215, 175, 242, 261, 193, 3436,
	3435, 65, 3434, 164, 32, 47, 137, 62, 19, 386,
	3433, 1630, 1, 195, 3432, 211, 3431, 192, 16, 121,
	145, 3430, 3428, 30, 262, 3427, 3426, 3425, 129, 3423,
	3422, 184, 83, 3420, 3418, 3417, 3415, 45, 3413, 39,
	15, 3411, 114, 3410, 249, 3409, 257, 138, 181, 179,
	160, 228, 230, 81, 82, 3408, 1656, 154, 100, 13,
	3406, 225, 3405, 177, 113, 3403, 80, 3402, 243, 260,
	209, 3401, 185, 20, 50, 31, 26, 43, 9, 240,
	204, 3400, 3398, 21, 46, 3394, 55, 3393, 18, 3390,
	3389, 71, 2, 3388, 3387, 17, 27, 3386, 34, 210,
	188, 120, 90, 66, 3385, 3384, 57, 131, 3383, 139,
	158, 149, 3381, 78, 3380, 3378, 3377, 2809, 3376, 254,
	3375, 3373, 3372, 3371, 3370, 3363, 3357, 3356, 3350, 3338,
	103, 42, 3337, 3333, 3328, 3327, 84, 153, 3326, 3325,
	3324, 3322, 29, 140, 3321, 11, 3320, 24, 22, 36,
	3318, 102, 3317, 5, 186, 3316, 3314, 7, 3313, 3308,
	3, 4, 3306, 3305, 128, 3304, 91, 23, 167, 109,
	3303, 3302, 89, 216, 147, 3301, 3300, 101, 241, 206,
	3298, 74, 234, 253, 3297, 208, 3295, 3294, 3293, 3292,
	3287, 3286, 1050, 3285, 3283, 237, 76, 92, 112, 3281,
	3280, 3279, 85, 165, 119, 124, 63, 86, 3278, 111,
	203, 3277, 201, 3275, 3274, 3273, 108, 3271, 3270, 3269,
	3268, 190, 3267, 3266, 200, 231, 3265, 3257, 324, 3253,
	3252, 3251, 3248, 3242, 3241, 3236, 3235, 3231, 3230, 239,
	268, 3229,
}

//line mysql_sql.y:11714
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObejectInfo {
	v, _ := st.union.(tree.ObejectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 564, 567, 567, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 117, 117, 146, 543, 543, 116, 549,
	549, 549, 550, 550, 113, 135, 134, 137, 137, 136,
	136, 133, 133, 129, 132, 132, 131, 131, 130, 125,
	127, 127, 126, 128, 128, 114, 102, 115, 493, 493,
	492, 492, 491, 491, 444, 444, 490, 490, 490, 489,
	489, 489, 488, 488, 487, 487, 486, 486, 484, 484,
	485, 483, 482, 482, 482, 480, 480, 480, 476, 476,
	478, 477, 477, 479, 471, 471, 474, 474, 472, 472,
	472, 472, 475, 470, 470, 470, 469, 469, 101, 101,
	101, 388, 388, 100, 100, 402, 402, 402, 402, 402,
	400, 400, 400, 400, 400, 400, 399, 399, 398, 398,
	403, 403, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 401, 401, 401, 401, 401, 401, 401, 401,
	401, 401, 91, 91, 91, 91, 91, 96, 96, 96,
	555, 555, 554, 554, 556, 556, 556, 556, 557, 557,
	94, 94, 94, 95, 397, 397, 397, 92, 93, 93,
	387, 387, 392, 392, 391, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 396, 396, 396,
	394, 394, 393, 393, 395, 395, 85, 85, 85, 88,
	87, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	86, 86, 86, 86, 86, 86, 81, 81, 81, 81,
	81, 80, 80, 82, 82, 384, 384, 383, 97, 97,
	98, 552, 552, 551, 553, 553, 553, 553, 99, 105,
	105, 105, 105, 105, 105, 105, 104, 104, 107, 107,
	106, 108, 90, 90, 90, 90, 90, 90, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 518, 518, 518, 520, 520, 319, 320, 568, 322,
	318, 318, 318, 514, 514, 515, 516, 517, 517, 517,
	103, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	79, 84, 84, 260, 260, 265, 265, 266, 266, 266,
	271, 271, 272, 272, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 261, 261, 261, 261,
	261, 261, 261, 261, 261, 261, 247, 247, 247, 242,
	242, 242, 242, 243, 243, 244, 244, 245, 245, 245,
	245, 246, 246, 312, 312, 267, 267, 267, 269, 269,
	268, 264, 262, 262, 262, 262, 262, 262, 262, 263,
	263, 263, 263, 270, 270, 77, 83, 83, 83, 531,
	531, 78, 542, 542, 447, 447, 333, 333, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 332, 452, 453, 329, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 53, 56,
	57, 52, 52, 52, 373, 373, 51, 569, 569, 307,
	307, 65, 64, 55, 66, 67, 68, 69, 70, 71,
	50, 63, 63, 63, 63, 63, 63, 63, 63, 74,
	465, 465, 571, 571, 571, 72, 73, 446, 446, 446,
	62, 61, 60, 59, 58, 58, 49, 49, 48, 48,
	54, 141, 142, 142, 326, 326, 326, 328, 328, 324,
	570, 570, 416, 416, 327, 327, 47, 47, 47, 47,
	75, 325, 325, 306, 323, 323, 323, 12, 12, 10,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 25, 26, 28, 381, 381,
	378, 27, 19, 18, 18, 22, 21, 17, 17, 20,
	23, 24, 24, 9, 9, 9, 9, 14, 14, 15,
	164, 164, 215, 215, 526, 526, 522, 522, 523, 523,
	523, 524, 524, 525, 525, 109, 459, 459, 459, 459,
	459, 459, 8, 186, 186, 458, 458, 458, 458, 458,
	458, 385, 385, 385, 503, 503, 503, 504, 185, 185,
	180, 180, 460, 460, 350, 505, 505, 468, 468, 467,
	467, 466, 466, 183, 183, 184, 184, 167, 167, 120,
	120, 473, 473, 473, 473, 481, 481, 443, 443, 252,
	252, 299, 299, 300, 300, 157, 157, 158, 158, 158,
	158, 158, 158, 558, 558, 559, 560, 561, 561, 562,
	562, 562, 563, 563, 563, 563, 563, 511, 511, 513,
	513, 512, 182, 182, 178, 178, 179, 179, 179, 177,
	177, 176, 175, 175, 174, 172, 172, 172, 173, 173,
	173, 190, 190, 160, 160, 160, 159, 159, 159, 159,
	159, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 161, 161, 519, 519, 519, 448, 448,
	448, 455, 455, 280, 280, 281, 281, 279, 279, 162,
	162, 163, 163, 163, 163, 278, 278, 277, 165, 165,
	171, 170, 170, 166, 166, 166, 166, 288, 288, 287,
	287, 287, 287, 112, 118, 118, 119, 189, 189, 286,
	285, 285, 285, 188, 188, 187, 187, 181, 181, 169,
	169, 169, 169, 284, 168, 282, 548, 548, 547, 547,
	546, 544, 544, 544, 545, 545, 545, 545, 495, 495,
	495, 495, 495, 313, 313, 313, 317, 317, 316, 316,
	316, 316, 316, 321, 7, 7, 7, 7, 7, 7,
	7, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 38, 199, 200, 39, 201, 201,
	202, 202, 203, 203, 204, 205, 206, 206, 206, 206,
	37, 191, 191, 192, 192, 193, 193, 194, 195, 195,
	195, 198, 196, 197, 197, 566, 566, 565, 36, 36,
	29, 150, 150, 151, 151, 151, 153, 153, 248, 248,
	248, 152, 152, 154, 154, 154, 527, 530, 528, 528,
	532, 532, 532, 533, 533, 533, 533, 534, 534, 30,
	138, 143, 537, 537, 537, 536, 536, 538, 538, 539,
	539, 303, 303, 304, 304, 148, 149, 149, 145, 140,
	156, 156, 156, 156, 156, 139, 144, 147, 529, 535,
	535, 535, 382, 382, 379, 380, 380, 377, 376, 376,
	376, 541, 541, 540, 540, 540, 314, 314, 31, 372,
	372, 374, 375, 375, 375, 366, 366, 366, 366, 35,
	370, 370, 371, 371, 371, 371, 371, 371, 371, 367,
	367, 369, 369, 365, 365, 365, 365, 365, 365, 365,
	34, 155, 155, 364, 364, 361, 361, 359, 359, 360,
	360, 358, 358, 358, 362, 362, 42, 76, 43, 44,
	45, 41, 363, 363, 33, 33, 33, 33, 33, 33,
	33, 33, 122, 121, 121, 121, 121, 121, 124, 124,
	302, 302, 301, 301, 123, 249, 249, 40, 227, 227,
	435, 435, 430, 430, 430, 430, 430, 450, 450, 450,
	431, 431, 431, 432, 432, 432, 434, 434, 434, 433,
	433, 433, 433, 433, 449, 449, 451, 451, 451, 404,
	404, 405, 405, 405, 408, 408, 422, 422, 423, 423,
	421, 421, 428, 428, 427, 427, 426, 426, 425, 425,
	424, 424, 424, 424, 419, 419, 418, 418, 406, 406,
	406, 406, 406, 407, 407, 407, 417, 417, 420, 420,
	276, 276, 275, 275, 235, 235, 236, 236, 274, 274,
	233, 233, 234, 234, 234, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	501, 501, 502, 238, 238, 250, 250, 250, 250, 250,
	250, 237, 237, 239, 239, 216, 216, 214, 214, 214,
	214, 207, 207, 208, 208, 209, 209, 209, 213, 213,
	212, 212, 212, 212, 210, 210, 211, 211, 211, 211,
	211, 211, 390, 390, 498, 498, 499, 499, 494, 494,
	494, 497, 497, 497, 497, 497, 497, 497, 500, 500,
	500, 496, 496, 217, 297, 297, 297, 315, 315, 315,
	315, 296, 296, 296, 232, 232, 231, 231, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	389, 389, 330, 330, 331, 331, 259, 258, 258, 258,
	258, 258, 256, 257, 255, 255, 255, 255, 255, 254,
	254, 253, 253, 253, 368, 368, 251, 251, 241, 241,
	241, 240, 240, 240, 429, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 294, 294, 294, 295, 295, 295, 295,
	295, 295, 295, 295, 340, 340, 346, 346, 510, 510,
	509, 218, 218, 218, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 228, 228, 228, 413, 413, 413, 413,
	414, 414, 414, 414, 415, 415, 415, 411, 411, 412,
	412, 351, 352, 352, 456, 456, 457, 457, 409, 409,
	410, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 464, 464, 464, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 521, 521, 521, 506, 506, 506, 507, 507,
	507, 507, 507, 507, 507, 507, 507, 507, 507, 507,
	508, 508, 508, 508, 508, 508, 508, 508, 508, 508,
	508, 508, 508, 508, 508, 508, 508, 292, 292, 292,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 353, 353,
	354, 354, 461, 461, 461, 461, 461, 461, 462, 462,
	463, 463, 463, 463, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 454, 454, 454, 454, 454, 454, 454,
	454, 454, 454, 338, 289, 289, 289, 355, 347, 347,
	348, 348, 349, 349, 341, 341, 341, 341, 341, 341,
	342, 342, 344, 344, 344, 344, 344, 344, 344, 344,
	344, 344, 344, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 343, 343, 345, 345, 357, 357,
	357, 356, 356, 356, 356, 356, 356, 356, 230, 230,
	230, 230, 335, 335, 335, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 220, 220, 220,
	220, 224, 224, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 225, 225, 225,
	225, 225, 223, 223, 223, 223, 223, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 110, 111, 111, 222, 298,
	298, 436, 436, 439, 439, 437, 437, 438, 440, 440,
	440, 441, 441, 441, 442, 442, 442, 445, 445, 305,
	305, 305, 311, 311, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 6, 1, 2, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 10, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 1, 1, 2, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	3, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 3, 4, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 10,
	7, 4, 4, 1, 3, 1, 6, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 8, 8, 0,
	4, 7, 0, 3, 0, 2, 0, 1, 1, 1,
	1, 4, 2, 2, 3, 3, 4, 5, 3, 4,
	4, 2, 2, 2, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	3, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 6, 7, 4, 4, 7, 8,
	3, 3, 3, 4, 0, 2, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 4, 5, 4,
	3, 1, 3, 1, 1, 3, 5, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 1, 3, 2, 1, 5, 4, 4,
	2, 0, 5, 4, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 6, 4, 5,
	7, 4, 5, 0, 1, 3, 8, 0, 6, 0,
	4, 6, 1, 1, 1, 1, 1, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 3, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 7, 1, 3,
	0, 1, 1, 3, 1, 3, 0, 1, 1, 1,
	14, 1, 3, 0, 1, 1, 3, 1, 1, 2,
	4, 1, 1, 1, 1, 0, 1, 2, 9, 9,
	7, 1, 2, 3, 3, 3, 0, 4, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 4, 1, 1,
	3, 4, 3, 0, 1, 1, 1, 0, 2, 7,
	8, 8, 0, 3, 3, 0, 3, 0, 3, 0,
	5, 1, 3, 0, 3, 3, 0, 2, 9, 6,
	0, 2, 2, 3, 3, 4, 4, 4, 1, 0,
	2, 2, 1, 3, 2, 1, 3, 2, 1, 3,
	2, 0, 1, 3, 4, 3, 1, 1, 4, 1,
	3, 1, 1, 1, 1, 0, 1, 1, 1, 11,
	0, 2, 3, 3, 2, 2, 3, 1, 1, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 2, 2,
	6, 0, 4, 1, 1, 0, 3, 0, 1, 1,
	2, 4, 4, 4, 0, 1, 8, 2, 4, 4,
	4, 9, 0, 2, 11, 9, 11, 8, 6, 9,
	7, 10, 2, 2, 9, 4, 5, 3, 0, 4,
	1, 3, 0, 3, 6, 0, 2, 10, 0, 2,
	0, 2, 0, 3, 2, 4, 3, 0, 2, 1,
	0, 2, 3, 0, 2, 3, 0, 2, 1, 0,
	3, 2, 4, 3, 0, 1, 0, 1, 1, 0,
	6, 0, 3, 5, 0, 4, 0, 3, 1, 3,
	4, 5, 0, 3, 1, 3, 2, 3, 1, 2,
	0, 4, 6, 5, 0, 2, 0, 2, 4, 5,
	4, 5, 1, 5, 6, 5, 0, 3, 0, 1,
	1, 3, 3, 3, 0, 4, 1, 3, 3, 3,
	0, 1, 1, 3, 2, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 5, 4,
	1, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 4,
	6, 0, 1, 1, 3, 1, 1, 1, 1, 1,
	7, 9, 7, 9, 2, 1, 7, 9, 7, 9,
	8, 5, 0, 1, 0, 1, 1, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 5, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 2, 1, 2,
	2, 1, 1, 2, 2, 2, 3, 3, 2, 2,
	1, 5, 6, 4, 1, 1, 1, 5, 4, 1,
	1, 2, 0, 1, 1, 2, 5, 0, 1, 1,
	2, 2, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 2, 2, 2, 0, 3, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 3, 5, 2, 2, 2, 2, 4, 1, 1,
	2, 5, 6, 8, 6, 6, 6, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 7, 9, 7, 7,
	7, 9, 7, 7, 0, 2, 0, 1, 1, 2,
	4, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	2, 2, 2, 0, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 5, 0,
	1, 3, 0, 1, 0, 2, 0, 2, 0, 1,
	6, 8, 8, 6, 6, 5, 5, 5, 6, 6,
	6, 6, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 1, 1, 1, 4, 4, 6, 8,
	6, 4, 5, 4, 4, 4, 3, 4, 6, 6,
	7, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 8,
	4, 2, 3, 2, 4, 2, 2, 4, 6, 2,
	2, 4, 6, 4, 2, 4, 4, 4, 0, 1,
	2, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 3, 0, 1,
	1, 3, 1, 3, 3, 3, 3, 3, 2, 1,
	1, 1, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 1, 3, 4, 4, 5, 4, 5, 3,
	4, 5, 6, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 2, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 4, 1, 2, 3, 5, 1, 1,
	3, 0, 1, 0, 3, 0, 3, 3, 0, 3,
	5, 0, 3, 5, 0, 1, 1, 0, 1, 1,
	2, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -564, -567, -2, -5, 618, -1, -4, -111, -85,
	-7, -113, -114, -8, -109, -9, -10, -12, -89, -104,
	-106, -108, -107, -46, -11, -103, -80, -81, -91, -97,
	-100, -101, -102, -115, -110, -112, -157, -116, -117, 608,
	-86, -87, -88, -32, -31, -30, -29, -138, -143, -146,
	614, 447, 14, 496, -14, -15, -511, -16, 259, -318,
	-319, -320, -322, -568, -47, -48, -49, -58, -59, -60,
	-61, -62, -72, -73, -74, -50, -51, -52, -55, -53,
	-65, -64, -66, -67, -68, -69, -70, -71, -54, -141,
	-142, -75, -56, -76, -57, -78, -77, -83, -79, -84,
	-140, -145, -13, 234, -82, 76, -92, -93, -94, -95,
	-96, -98, -99, 371, 377, 434, 607, 61, -158, -160,
	624, 625, 159, 160, 162, 163, -33, -34, -35, -36,
	-37, -38, -40, -39, -41, -42, -43, -44, -45, 230,
	16, 539, -17, -20, -18, -21, -19, -27, -28, -26,
	-23, -25, -139, -24, -144, -22, -147, 254, 253, 38,
	320, 321, 322, 375, 252, 231, 15, 31, 42, 351,
	-159, 82, 531, 532, 534, 232, -161, 13, 629, -6,
	-3, -2, -125, -129, -133, -136, -137, -134, -135, -4,
	-111, 117, 244, 609, -315, 367, 610, 612, 611, 85,
	93, -308, -310, 447, 259, 371, 377, 607, 625, 544,
	545, 546, 547, 548, 549, 550, 551, 553, 554, 555,
	556, 557, 558, 559, 569, 570, 560, 561, 562, 563,
	564, 565, 566, 567, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 499, 594,
	595, 596, 597, 527, 552, 588, 589, 590, 591, 349,
	350, 536, 271, 295, 402, 301, 308, 159, 178, 172,
	200, 192, 532, 167, 275, 313, 276, 92, 162, 482,
	107, 459, 431, 165, 290, 292, 294, 528, 529, 361,
	297, 526, 296, 298, 300, 530, 277, 352, 188, 183,
	289, 273, 181, 278, 40, 279, 205, 280, 281, 541,
	455, 348, 461, 305, 52, 429, 182, 456, 293, 458,
	209, 213, 473, 474, 176, 177, 463, 476, 204, 207,
	208, 251, 345, 346, 43, 538, 263, 477, 211, 203,
	199, 485, 309, 307, 202, 175, 198, 274, 65, 215,
	214, 216, 425, 426, 427, 428, 282, 283, 365, 472,
	195, 184, 353, 168, 23, 480, 258, 460, 378, 284,
	302, 310, 210, 212, 265, 270, 540, 531, 433, 269,
	306, 478, 180, 262, 291, 257, 481, 169, 534, 380,
	285, 163, 299, 475, 484, 64, 393, 174, 166, 248,
	160, 267, 272, 286, 287, 288, 525, 312, 311, 303,
	533, 196, 264, 201, 186, 173, 197, 161, 266, 483,
	394, 605, 351, 412, 194, 191, 268, 241, 479, 462,
	164, 416, 395, 189, 314, 601, 602, 603, 366, 344,
	315, 316, 187, 255, 453, 454, 319, 422, 335, 396,
	432, 403, 397, 222, 223, 323, 465, 467, 206, 604,
	324, 325, 326, 457, 327, 328, 329, 330, 370, 56,
	58, 94, 97, 96, 626, 627, 63, 29, 356, 359,
	391, 398, 337, 606, 537, 334, 338, 339, 360, 25,
	414, 382, 418, 417, 48, 49, 50, 53, 54, 55,
	57, 59, 60, 51, 524, 375, 388, 486, 45, 47,
	385, 27, 362, 413, 435, 333, 415, 446, 46, 444,
	445, 466, 26, 364, 363, 62, 44, 421, 423, 424,
	317, 331, 373, 615, 487, 368, 384, 387, 369, 336,
	358, 389, 67, 66, 381, 616, 376, 374, 332, 542,
	543, 340, 568, 354, 430, 521, 520, 519, 518, 517,
	516, 515, 514, 320, 321, 322, 399, 400, 401, 411,
	404, 405, 406, 407, 408, 409, 410, 449, 450, 617,
	468, 470, 471, 469, 236, 628, 355, 239, 619, 620,
	95, 621, 623, 622, 28, -395, -393, -315, 532, 607,
	377, 531, 534, 371, 351, 625, 375, 259, 320, 321,
	322, 447, -201, -315, 628, -167, 39, -214, -315, -167,
	-82, -15, -14, -159, -160, -214, 238, -323, 24, 429,
	-90, 430, 234, 82, 77, -315, -9, -102, -8, -109,
	-80, -157, 434, -321, -315, 320, 320, -321, 238, -315,
	269, 410, -447, 244, -399, -372, 270, -398, -374, -401,
	-375, 32, 230, 232, 231, 266, 16, 375, 240, 14,
	13, 376, 252, 25, 26, 28, 15, 377, 379, 29,
	380, 383, 384, 385, 42, 388, 389, 259, 85, 93,
	88, 277, -200, -315, -349, -341, 114, -344, -336, -337,
	-339, -490, -484, -334, 82, 141, 142, 149, 115, 630,
	-338, -429, 36, 117, 548, 552, 588, 497, -290, -291,
	-292, -293, -294, -295, -315, -485, -483, 88, 98, 100,
	104, 105, 103, 101, 153, 185, 102, 89, 154, -160,
	85, -506, 558, -309, 581, 594, 595, 596, 597, 580,
	61, -454, -463, 237, -461, 152, 190, 255, 186, 14,
	147, 422, 187, 589, 590, 591, 555, 577, 499, 559,
	569, 584, 550, 551, 553, 545, 546, 547, 549, 560,
	562, 576, -464, 572, 582, 583, 568, 592, 593, 585,
	586, 587, 623, 87, 86, 575, 574, 561, 556, 557,
	563, 544, 554, 564, 565, 573, 578, 579, 359, 107,
	360, 361, 489, 352, 362, 244, 429, 70, 363, 364,
	365, 366, 367, 496, 368, 71, 369, 358, 259, 412,
	370, 189, 206, 501, 500, 502, 493, 490, 488, 491,
	492, 494, 495, 566, 567, 571, -118, -119, 599, -558,
	-283, -559, 6, 7, 8, 9, -560, 154, -549, 431,
	540, 88, 164, 161, -386, 164, 113, 169, 168, -386,
	166, 323, 265, -363, -150, 349, 412, 327, 94, 269,
	-366, -364, 528, -449, 317, 313, 289, 239, 110, -151,
	249, 248, 108, 489, 237, 386, 308, 56, 58, -522,
	-523, 227, 228, 229, -513, 522, -512, -315, 361, 96,
	97, 27, 238, 372, 265, 467, 465, 466, 468, 469,
	470, 471, -63, -465, -446, 462, 461, -327, 454, 460,
	452, 464, 455, 350, 329, 328, 230, 619, 529, 523,
	-305, 396, 432, 486, 487, 373, 433, 473, 475, 456,
	107, 193, 190, 239, 241, 238, 349, 489, 412, 94,
	327, -522, 161, 473, 475, 269, 410, 41, -392, 422,
	-391, -393, 474, 485, 86, 87, 472, -305, 107, 453,
	453, -558, -283, -158, -160, -112, -511, 530, 530, 530,
	239, 349, 412, 269, 240, 238, 525, 528, 241, 489,
	237, 320, 372, 265, 327, 94, 166, -448, -519, 32,
	-455, 224, 225, 226, 33, 34, -1, 121, 629, -341,
	-341, -6, 632, -6, -341, -315, -315, 156, -220, -224,
	-221, -223, -222, -226, -225, 190, 191, 152, 194, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 207, 208,
	205, 31, 206, 255, 186, 187, 188, 189, 209, 172,
	192, 537, 217, 173, 218, 174, 219, 175, 220, 176,
	177, 221, 178, 181, 182, 183, 184, 180, 155, 82,
	155, 88, -183, 261, -214, 155, 630, -183, -558, -176,
	-177, 11, -214, -296, -315, 431, 124, -90, 77, -90,
	430, 77, -514, -515, -516, -518, 234, 430, 429, -107,
	155, 277, 17, -321, -321, 80, -214, -374, 269, -399,
	-372, 36, 79, 156, 242, 156, 79, 82, 373, 349,
	412, 374, 489, 238, 386, 241, 269, 387, 349, 412,
	238, 241, 489, 269, 349, 238, 241, 412, 269, 387,
	452, 453, 241, 27, 378, 381, 382, 453, -469, 485,
	156, 113, 110, 111, 112, -341, 131, -356, 124, 125,
	126, 127, 128, 129, 130, 138, 137, 148, 141, 142,
	143, 144, 145, 146, 147, 139, 140, 134, 114, 132,
	136, 133, 116, -160, -341, -349, 61, -339, -339, -339,
	-339, -315, -429, -346, -341, 82, 82, 82, 82, 155,
	101, 88, -341, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, -462, 82, 82, -353, -354,
	82, 82, -334, -296, 82, 88, 88, 82, 82, 82,
	88, 82, 82, 82, -354, -354, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, -177, 156, -176, 82, -176, -177, -161, -160, 32,
	33, 32, 33, 32, 33, 32, 33, -561, 616, 82,
	98, 626, 222, 478, 539, 167, 168, 169, -361, 244,
	-199, -315, -201, 372, 241, 525, 241, -151, -361, -361,
	-361, -361, -361, 240, -361, 24, 238, 238, 238, 238,
	-361, 496, 124, 124, 59, -524, 171, 156, -513, -182,
	82, -326, 132, 136, -326, -279, 18, 24, 267, 267,
	267, -326, 307, -569, -570, 17, 134, -324, -570, -324,
	-324, -326, -571, 240, 463, 43, 268, 267, -178, -179,
	22, -178, 457, 453, -416, 458, 459, -328, -570, -327,
	-326, -326, -327, -326, -326, -326, 32, 238, 241, 489,
	327, 620, -569, -569, 31, 31, -447, -447, -214, -447,
	523, -306, -315, -447, -447, -447, -525, 243, -555, -554,
	476, -557, 478, 161, -393, 161, -393, -374, 269, 269,
	156, 124, 24, -394, 124, 135, -393, -393, -394, -394,
	-237, 41, -314, 152, -315, 88, -237, 41, -552, -551,
	-214, -177, -161, -160, 83, 83, 83, 533, 533, 533,
	-447, -447, -447, -447, -447, -449, -447, -447, -447, -447,
	-447, -321, -191, -315, -201, 244, -447, -447, -447, -162,
	-163, 143, -341, -315, -162, -3, -127, -126, 118, 119,
	121, 610, 367, 609, 613, 607, -393, 41, -442, 394,
	393, -436, -438, 82, -437, 82, -437, -437, -437, -437,
	-437, 82, 82, -439, 82, -439, -439, -436, -440, 82,
	-440, -441, 82, -441, -440, -315, -347, -349, -315, 39,
	-458, 61, -157, 82, 31, 82, -315, -341, -459, 61,
	-157, 82, 31, -177, -120, 39, -179, 21, 155, 98,
	88, -107, -90, 77, -107, 83, 156, -517, 104, 105,
	-520, 204, 196, -315, -105, 88, -7, -8, -9, -10,
	-46, -80, -157, -486, -484, 82, 32, 421, 79, 17,
	-400, 238, 489, 372, 265, 241, 349, -398, -381, -378,
	-376, -314, -374, -377, -376, -403, -296, 453, -121, 436,
	435, 319, -341, -341, -341, -341, -341, 103, 114, 344,
	104, 105, -336, -357, 32, 315, 316, -337, -337, -337,
	-337, -337, -337, -337, -337, -337, -337, -337, -337, -345,
	-355, -429, 82, 134, 132, 136, 133, 116, -339, -339,
	-337, -337, 83, 156, -341, -510, -509, 118, -341, -341,
	-341, -341, -315, -507, -508, 503, 504, 505, 506, 507,
	508, 509, 510, 511, 512, 513, 363, 358, 364, 362,
	352, 370, 365, 366, 189, 520, 521, 514, 515, 516,
	517, 518, 519, -347, -347, -341, -507, -347, -289, 33,
	32, -349, -349, -349, 83, -341, -521, 342, 341, 343,
	-180, -315, -347, 83, 83, 83, 98, -349, -349, -347,
	-337, -347, -347, -347, -347, -508, -289, -289, -289, -289,
	143, -349, -349, -289, -289, -289, -289, 143, -289, -289,
	-289, -289, -289, -289, -289, -289, -289, -289, 83, 83,
	83, 143, -349, -178, -119, -467, -466, -341, 41, -120,
	-179, -562, 617, 82, -296, -550, 88, 88, 630, 479,
	480, 165, 168, 167, -315, 114, 35, 82, -191, -361,
	-361, -361, -527, -315, -382, -379, -376, -315, -315, -372,
	-315, -315, -214, -361, -361, -361, -361, -214, -248, 53,
	54, 55, -376, -152, 56, 57, -525, -512, 35, -181,
	-315, -279, -339, -339, -341, -376, 269, -569, -326, -326,
	-307, -306, -328, -323, -328, -328, -279, -324, -326, -326,
	-341, -328, -324, -279, -315, 453, -279, -279, -416, -326,
	-325, -315, -325, -361, -306, -307, -307, -214, -214, -260,
	-265, -261, -266, 261, 235, 356, 357, 233, 231, 11,
	232, -273, 308, -362, 497, -243, -244, 77, 42, -246,
	259, 398, 391, 271, 275, 92, 276, 431, 277, 240,
	279, 280, 281, 296, 298, 251, 282, 283, 284, 422,
	285, 160, 297, 286, 287, 288, 374, -238, 6, 330,
	41, 51, 52, 445, 444, 542, 539, 272, -527, -527,
	31, 31, -382, -315, -315, -170, -165, -169, -166, -171,
	-282, -284, -168, 82, -214, -160, -315, 156, 477, 479,
	480, -555, -394, -555, -394, 32, 421, -397, 421, 32,
	-372, -391, 473, 475, -387, 88, 422, -377, -396, 79,
	152, -466, -394, -394, -396, -396, 151, 156, -553, 478,
	479, 227, -178, 98, 98, 98, -216, -214, -527, -381,
	-372, -315, -447, -216, -216, -216, -315, -315, 82, 155,
	36, -315, -315, -315, -278, 156, -277, 17, -316, -315,
	35, 88, 155, -278, -128, -126, 120, -341, -6, 609,
	-341, -6, -6, -341, -6, -341, -445, 395, 98, 98,
	-298, 88, -298, 98, 98, 98, 83, 88, -385, 79,
	-460, -350, -505, 599, -185, 83, -180, -503, -504, -180,
	-184, -315, 630, 631, -460, -185, 83, -503, -178, 600,
	-120, -175, -174, -341, -315, 24, -107, -90, -515, 155,
	156, -181, -400, -380, -377, -402, 143, -315, -388, 156,
	539, 633, 86, 242, -541, -540, 413, 83, 156, -470,
	243, 496, 88, 630, 429, 222, 223, 103, 344, 104,
	105, -429, -349, -345, -339, -339, -337, -337, -343, 256,
	-343, 113, -341, 631, -340, -509, 120, -341, 35, 156,
	35, 156, 80, 155, 83, 83, 17, 17, 83, -341,
	83, 83, 83, 83, 17, 17, -341, 83, 155, 83,
	83, 83, 83, 80, 83, 156, 83, 83, 83, 83,
	156, -349, -349, -341, -349, 83, 83, 83, -341, -341,
	-341, -349, 83, -341, -341, -341, -341, -341, -341, -341,
	-341, -341, -341, -410, 448, -410, -410, 156, 156, 156,
	83, -120, 82, 98, 156, 627, -302, -301, 88, 166,
	169, 169, 168, 24, 36, -200, -202, -203, -204, -205,
	-206, 134, 157, 158, 82, -214, -214, -214, -530, 399,
	-542, 156, 41, -540, 489, -148, 319, -365, 80, -155,
	17, 539, -214, -214, -214, -214, -227, 35, 17, -164,
	-215, -315, 82, 83, 156, -373, 80, -315, -307, -279,
	-279, -328, -279, -279, 156, 23, -326, -328, -328, -324,
	155, -306, -435, 35, -182, 156, 21, 261, -213, -312,
	-210, -212, 246, -331, -211, 249, -499, 247, 245, 108,
	250, 304, 109, 240, -312, -312, 246, -247, 242, 35,
	-312, -263, 240, 347, 304, 247, 21, 261, -262, 240,
	109, -315, 246, 250, 247, 245, -311, 124, -305, 151,
	242, 43, 374, -311, 543, 261, -311, -311, -311, -311,
	-311, -311, -311, 278, 278, -311, -311, -311, -311, -311,
	-311, -311, -311, -311, -311, -311, 161, -311, -311, -311,
	-311, -311, -311, 82, 273, 274, -531, 399, 31, 355,
	355, -542, 31, -156, 349, 31, -285, -286, -287, -288,
	68, 72, 74, 69, 70, 71, 75, 31, 156, -313,
	-317, 35, -315, 88, -313, -160, -165, -170, -313, 82,
	-554, -556, 481, 478, 484, -396, -396, 242, 82, 124,
	-396, -396, 41, -314, -551, 485, 479, -120, 156, 79,
	-216, -192, -193, -194, -195, -220, -296, 191, 194, 196,
	197, 198, 199, 200, 201, 202, 203, 204, 207, 208,
	205, 206, 255, 186, 187, 188, 189, 209, 172, 192,
	537, 173, 174, 175, 176, 177, 178, 181, 182, 183,
	184, 180, -315, -201, -279, -163, -165, -315, 88, -315,
	143, -279, 121, -6, 119, -132, -131, -130, 122, 607,
	613, 121, 121, 121, 83, 83, 83, 156, 83, 83,
	83, 156, 83, 156, -473, 458, 40, 156, 82, 83,
	156, 61, 156, 124, 83, 156, -341, 83, 61, -120,
	88, 156, -172, 37, 38, 155, 431, -315, -484, 83,
	-402, 156, 242, 155, 155, -378, 377, -314, -380, 21,
	539, -296, 39, -302, 124, 630, -315, 83, -343, -343,
	113, -339, -336, 83, 121, -341, 119, -218, -220, 393,
	394, -341, -218, -219, -225, 152, 190, 255, 189, 188,
	186, 393, 394, -237, -315, -341, -341, 83, -341, -341,
	17, -315, -237, -337, -341, -177, -177, 83, 83, -409,
	-410, -409, -409, 83, 83, 83, 83, -409, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 82, 98,
	100, 98, 100, -466, -563, 63, 615, 62, 421, 103,
	309, 156, 98, 88, 631, 156, 124, 169, -543, 313,
	349, 385, 83, 156, -296, -192, -182, 82, -182, -533,
	460, 401, 411, -311, -333, -332, 351, 42, -452, 422,
	407, 408, -379, 269, -315, -539, 95, 124, 79, 334,
	338, 339, 335, 336, 337, -359, -360, -358, -362, -527,
	82, 82, -157, 35, 82, 82, 35, -430, 324, -220,
	-214, -164, -315, 17, 156, -526, 155, -1, -315, -372,
	-326, -279, -341, -341, -279, -326, -326, -328, -315, -430,
	-220, 35, -261, 235, 232, -406, 306, 307, -407, -420,
	309, -422, 82, -217, -296, -211, -498, -499, -361, -315,
	109, -498, 109, 82, -217, -296, -296, -264, -325, -296,
	-315, -315, -315, -315, -269, -268, -296, -271, 32, -272,
	-315, -315, -315, -315, 109, -315, 109, -242, 41, 48,
	49, 50, -311, -311, 193, -245, 41, 421, 423, 424,
	-271, 98, 98, 98, 98, 88, 88, 88, -311, -311,
	98, 88, -317, 88, -500, 168, 45, 46, 98, 98,
	98, 98, 41, 88, -250, 41, 289, 293, 290, 291,
	292, 88, 98, 41, 98, 41, 98, 41, -315, 82,
	-501, -502, 88, -533, -311, 355, -393, 124, -333, -538,
	319, -149, 92, 32, -186, 235, 232, -527, -384, -383,
	-296, -169, -169, -169, -169, 68, 68, 68, 73, 68,
	73, 68, -287, -384, -171, -182, -317, 83, -548, -547,
	-546, -544, 76, 243, 77, -347, 478, 482, 483, -380,
	-329, 88, -387, -190, 24, -214, -214, -451, 299, 300,
	83, 156, -220, -281, 19, 155, -281, 117, -6, -128,
	-130, -341, -6, -341, 609, 367, 610, 88, 98, 98,
	-481, 442, 437, 439, 109, -350, -468, -467, 61, -157,
	-180, -460, -504, -466, -315, 631, 61, -157, -460, -190,
	-473, -174, -173, 44, -315, 98, 17, -377, -372, 143,
	143, -315, 378, -388, 88, 400, 88, 238, 631, 88,
	-302, -336, -341, 83, -228, 177, 176, -228, 35, 83,
	83, -437, -437, -436, -439, -436, -228, -228, 83, 83,
	24, 83, 83, 83, -341, 83, 83, 156, -456, 498,
	-457, 570, -409, -409, -409, -409, -409, -409, -409, -409,
	-409, -409, -409, -409, -409, -409, -409, -409, -352, -351,
	261, 443, 622, 622, 443, 622, 622, 83, 156, -507,
	156, -301, 88, -315, 88, 88, -204, -220, 83, 35,
	-207, -208, -209, -217, -210, -212, 35, -534, 92, -528,
	88, -315, -535, 92, 402, 154, 353, 41, 403, 404,
	419, 348, 98, 98, 409, -529, -315, -156, -537, 52,
	124, 88, -214, -358, -305, 151, 280, 327, -276, -275,
	-315, 88, -207, -157, -207, -207, -157, -431, 326, 21,
	98, 142, -183, 80, 155, -165, -215, -315, 143, 83,
	-279, -279, -279, -326, -431, -157, -418, 310, 82, -416,
	82, -416, 109, 335, -423, -421, 261, -267, 45, 47,
	-220, -496, -315, -494, -496, -315, -494, -494, -361, -341,
	-267, -217, 242, 31, 232, -270, 332, 333, 338, -389,
	305, 114, -389, 156, -172, 156, -315, -237, -237, 31,
	88, 88, -216, 83, 156, 124, -534, -528, 124, -394,
	88, -535, -539, 124, 88, 156, -186, -186, -279, 156,
	124, -188, -187, 79, 80, -189, 79, -187, 68, 68,
	-279, -546, -545, 24, -499, -499, -499, 83, 83, 15,
	-194, 41, -280, 20, 21, 143, -280, 121, 119, 121,
	121, -315, 83, 83, -443, 601, -477, -479, 437, 21,
	21, 15, 243, 83, -460, -460, -481, 45, 46, -372,
	-388, 422, -214, 156, 631, -218, -341, 83, -341, 83,
	88, 83, 88, -177, 21, 83, 156, 83, 83, 83,
	156, 83, 83, -341, 83, -507, 236, -157, 83, 156,
	-157, 88, -532, 413, 88, 88, 98, 41, 98, 154,
	405, -453, -149, -536, 92, 124, 630, 82, -311, -311,
	-311, -315, 83, 156, -311, -311, 83, 83, 83, -235,
	539, -432, 260, 98, 142, 98, 142, 98, -313, -165,
	-315, -279, -526, 155, -279, -432, -408, 311, 98, -337,
	82, -337, 82, -417, 308, 82, 83, 156, -315, -296,
	-232, -231, -229, 103, 114, 41, 391, -230, 92, 151,
	294, 297, 296, 272, 295, -259, -330, 79, 397, 332,
	333, -362, 601, 527, 245, 108, 109, 379, -331, 82,
	82, 80, 314, 82, 82, -496, 83, -267, -296, 41,
	-270, 41, 345, 305, -268, -315, 151, -237, 83, -502,
	88, -532, 88, -396, -537, 88, -527, -177, -383, -466,
	-341, 82, -341, 82, 68, 11, 19, -334, -341, -349,
	244, -6, 610, 367, -252, 602, 88, 21, 88, -475,
	88, -384, -443, -123, -249, -305, 277, 83, 83, 83,
	-409, -409, -412, -411, -415, 443, 306, 451, -349, 88,
	88, 83, 83, -196, -220, -153, 539, -235, -209, -153,
	21, 539, 352, 41, 98, 41, 406, 124, 104, 105,
	-303, -304, 88, -367, -369, -296, 82, -237, -239, -314,
	152, 88, -275, -334, -334, -233, -157, 35, -234, -273,
	-362, -122, -121, -233, 82, -433, 160, 98, 142, 98,
	98, -279, -279, -433, -422, 21, 83, -403, 83, -403,
	82, 124, -337, -421, -424, 61, -229, 103, -337, 88,
	-239, -240, 41, 293, 289, 124, 124, -241, 41, 273,
	274, -251, 82, 304, 15, 193, 82, 109, 109, -214,
	-367, -367, -497, 334, 335, 336, 340, 338, 339, 337,
	-497, -367, -367, 82, -390, -389, -337, -311, -311, 151,
	-536, -178, -181, -495, -315, 245, 21, 21, -315, -315,
	-299, 603, 98, 88, 439, -252, -444, 604, -471, -416,
	-237, 124, 83, -414, 116, 405, 409, -335, -338, 98,
	100, 185, 154, 83, 83, 538, -154, 60, 485, 88,
	400, 88, 352, 88, 631, 156, 124, 83, 156, -436,
	-341, -404, 261, -157, 156, -273, -305, -123, -404, -236,
	-274, -315, 88, -450, 168, 325, 539, 98, 142, 98,
	-177, -434, 168, 325, -407, 83, 83, 83, -403, 98,
	83, -428, -425, 82, -273, 263, 134, 88, 88, 98,
	82, -461, 31, 88, -368, 82, 83, 83, 83, 83,
	-367, 98, -237, -311, 83, 83, 156, 82, 21, -299,
	88, -480, 442, -474, -472, 437, 438, 439, 440, 88,
	-413, -414, 409, -335, -338, 599, 449, 449, 449, -198,
	-315, 304, 422, -304, 88, -370, -369, -172, 83, -405,
	313, 21, -273, -311, -405, 83, 156, -311, -311, 325,
	98, 142, 98, -178, 325, -419, 312, 83, -428, -273,
	-427, -426, 311, 264, 82, 83, -341, -353, -311, 83,
	-254, -253, 535, -367, -370, 80, -370, 80, -370, 80,
	-370, 80, 83, -237, -315, 245, -300, -315, -475, -482,
	243, -478, -479, 441, -472, 21, 439, 21, 21, -124,
	156, 113, 450, 450, 450, -197, 35, 444, 378, -371,
	251, 345, 346, 92, 539, 332, 333, -172, 21, -406,
	-237, -274, -334, -334, 98, 98, 83, 156, -315, 260,
	82, -348, -342, -341, 260, 83, -315, -258, -256, -257,
	79, 456, 302, 303, 83, -497, -497, -497, -497, -259,
	83, 156, -489, 82, 98, -477, -476, -478, 21, -475,
	21, -475, -475, 446, -413, 88, -311, -311, 88, 88,
	331, -296, 82, -418, -426, -425, -348, 83, 156, -389,
	-257, 79, -256, 79, 16, 15, -370, -370, -370, -370,
	-315, -493, 31, 83, -488, -487, -297, -483, -315, 442,
	443, 88, -475, 124, -566, -565, 621, 98, 98, -315,
	-403, -408, 83, -342, -255, 299, 300, 31, 168, -255,
	-492, -491, -490, 83, 156, 155, 88, 88, 83, -422,
	103, 41, 301, 156, 124, -487, -315, -491, 41, -341,
	155, -315,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	266, 267, 268, 864, 865, 866, 867, 868, 869, 870,
	0, 0, 0, 0, 623, 624, 0, 589, 0, 0,
	0, 0, 0, 0, 477, 478, 479, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	493, 494, 495, 496, 497, 498, 499, 500, 501, 502,
	503, 504, 505, 506, 507, 361, 362, 363, 364, 365,
	366, 367, 368, 0, 291, 287, 212, 213, 214, 215,
	216, 298, 299, 454, 0, 0, 0, 0, 705, -2,
	59, 0, 280, 0, 271, 271, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, -2,
	636, 0, 590, 591, 592, 593, 594, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 350, 351, 352,
	346, 347, 349, 348, -2, 0, 636, 0, 0, 0,
	713, 0, 0, 0, 0, 0, 756, 778, 23, 0,
	7, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 0, 0, 19, 0, 19, 0, 0, 0, 1267,
	1268, 1269, 1270, 2047, 2017, -2, 1790, 1767, 1942, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
	2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106,
	2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116,
	2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 1789, 1791, 1792, 1793, 1794, 1795, 1796,
	1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1943, 1944, 1945, 1946, 1947, 1948,
	1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958,
	1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,
	1969, 1970, 1971, 1972, 1973, -2, 1975, 1976, 1977, 1978,
	1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, -2, -2, -2, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2048, 2049, 2050,
	2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 0, 264, 262, 1737, 1767,
	1790, 1844, 1855, 1856, 1890, 1942, 1974, 2017, 2033, 2034,
	2035, 2047, 0, 888, 0, 683, 0, 688, 1217, 683,
	292, 625, 626, 713, 739, 587, 0, 328, 0, 1781,
	332, 2024, 0, 0, 0, 584, 322, 323, 324, 325,
	326, 327, 0, 0, 863, 0, 0, 318, 0, 286,
	1846, 2046, 0, 0, 0, 0, 0, 156, 999, 158,
	1001, 162, 169, 0, 0, 174, 175, 178, 179, 180,
	181, 182, 0, 186, 0, 188, 191, 0, 193, 194,
	0, 197, 198, 199, 0, 209, 210, 211, 1002, 1003,
	1004, -2, 87, 886, 1695, 1582, 0, 1589, 1602, 1613,
	1347, 1348, 1349, 1350, 0, 0, 0, 0, 0, 0,
	1358, 1359, 0, 1386, 2080, 2121, 2122, 0, 1367, 1368,
	1369, 1370, 1371, 1372, 96, 108, 109, 1635, 1636, 1637,
	1638, 1639, 1640, 1641, 0, 1643, 1644, 1645, 1553, 1334,
	1267, 0, 2089, 0, 2111, 2116, 2117, 2118, 2119, 2110,
	0, 0, 1538, 0, 1528, 0, 0, -2, -2, 0,
	0, 1915, -2, 2123, 2124, 2125, 2086, 2107, 2115, 2090,
	2091, 2114, 2082, 2083, 2084, 2077, 2078, 2079, 2081, 2093,
	2095, 2106, 0, 2102, 2112, 2113, 2022, 0, 0, 0,
	0, 0, 2063, 110, 111, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1549, -2, -2, 1552, -2, 1555, -2, -2,
	-2, -2, 1560, 1561, -2, 1563, -2, -2, -2, -2,
	-2, -2, -2, 1540, 1541, 1542, 1543, 1532, 1533, 1534,
	1535, 1536, 1537, -2, -2, -2, 739, 814, 0, 739,
	0, 714, 761, 764, 767, 770, 717, 0, 0, 60,
	61, 0, 281, 282, 270, 272, 0, 276, 0, 269,
	1035, 0, 0, 0, 0, 1035, 1035, 1035, 1035, 1035,
	0, 1035, 0, 0, 0, 0, 0, 1035, 0, 921,
	1006, 1007, 1008, 1033, 1034, 1105, 0, 0, 0, 641,
	637, 638, 639, 640, 727, 0, 729, 732, 564, 564,
	787, 511, 0, 0, 0, 564, 0, 525, 517, 0,
	0, 0, 564, 0, 0, 734, 734, 0, 567, 574,
	564, 564, -2, 564, 564, 564, 0, 0, 1047, 531,
	532, 533, 517, 517, 536, 537, 538, 548, 549, 575,
	1719, 0, 0, 454, 454, 0, 454, 0, 454, 454,
	454, 643, 1885, 1788, 1861, 1846, 2046, 0, 237, 1915,
	242, 0, 1789, 1808, 0, 0, 1826, 0, -2, 0,
	308, 739, 0, 0, 713, 0, 0, 0, 0, 0,
	454, 454, 454, 454, 454, 1104, 454, 454, 454, 454,
	454, 0, 0, 0, 454, 454, 454, 0, 0, 779,
	780, 775, 776, 777, 781, 782, 5, 6, 19, 0,
	0, 0, 0, 0, 0, 66, 65, 0, 1696, 1714,
	1648, 1649, 1650, 1701, 1652, 1705, 1705, 1705, 1705, 1681,
	1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1705, 1705,
	0, 0, 1694, 1672, 1703, 1703, 1703, 1701, 1698, 1653,
	1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663,
	1664, 1665, 1666, 1708, 1708, 1711, 1711, 1708, 0, 1578,
	0, 0, 0, 0, 687, 0, 0, 0, 739, -2,
	0, 0, 588, 329, 1271, 0, 0, 333, 0, 334,
	0, 0, 0, 353, 0, 356, 341, 342, 343, 337,
	0, 136, 0, 320, 321, 0, 0, 288, 0, 0,
	0, 455, 0, 0, 0, 0, 0, 0, 166, 163,
	170, 173, 183, 190, 0, 202, 204, 207, 164, 171,
	176, 177, 184, 205, 165, 167, 168, 172, 206, 208,
	185, 189, 203, 187, 192, 195, 196, 201, 0, 137,
	0, 0, 0, 0, 0, 1588, 0, 0, 1621, 1622,
	1623, 1624, 1625, 1626, 1627, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 1582, 0, 0, 1353, 1354, 1355,
	1356, 0, 1360, 0, 1387, 0, 0, 0, 0, 0,
	1642, 1646, 0, 1578, 1578, 0, 1578, 1574, 0, 0,
	0, 0, 0, 0, 1578, 1511, 0, 0, 1513, 1529,
	0, 0, 1515, 1516, 0, 1519, 1520, 1578, 0, 1578,
	1524, 1578, 1578, 1578, 1507, 1508, 0, 1574, 1574, 1574,
	1574, 0, 0, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
	1574, 1574, 1574, 1574, 1574, 1574, 1574, 0, 0, 0,
	0, 734, 0, 740, 0, -2, 0, 758, 760, 762,
	763, 765, 766, 768, 769, 771, 772, 719, 0, 0,
	62, 0, 0, 0, 0, 274, 0, 279, 0, 0,
	0, 885, 0, 0, 1035, 1035, 1035, 922, 0, 0,
	0, 0, 0, 0, 0, 0, 1035, 1035, 1035, 1035,
	0, 1053, 0, 0, 0, 643, 642, 0, 728, 0,
	0, 787, 0, 0, 509, 510, 0, 0, 517, 564,
	564, 523, 524, 519, 518, 570, 571, 567, 0, 567,
	567, 787, 0, 542, 543, 544, 564, 564, 550, 735,
	0, 551, 552, 567, 0, 572, 573, 787, 0, 0,
	787, 787, 0, 560, 561, 562, 564, 0, 0, 1035,
	0, 580, 519, 519, 1720, 1721, 0, 0, 1044, 0,
	0, 0, 583, 0, 0, 0, 0, 644, 217, 220,
	0, 223, 0, 1885, 0, 1885, 0, 230, 0, 0,
	0, 0, 0, 0, 260, 261, 0, 0, 0, 0,
	251, 254, 1211, 1212, 996, 997, 255, 256, 300, 301,
	0, 734, 757, 759, 753, 754, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 454, 0, 0, 0, 0,
	0, 619, 0, 901, 621, 0, 0, 0, 0, 795,
	789, 791, 858, 96, 795, 8, 83, 80, 0, 19,
	0, 0, 19, 19, 0, 19, 265, 0, 1717, 1715,
	1716, 1651, 1702, 0, 1677, 0, 1678, 1679, 1680, 1690,
	1691, 0, 0, 1673, 0, 1674, 1675, 1676, 1667, 0,
	1668, 1669, 0, 1670, 1671, 263, 0, 1579, 889, 0,
	661, 675, 656, 0, 664, 0, 1218, 0, 645, 675,
	647, 0, 664, 734, 711, 0, 689, 0, 0, 330,
	0, 338, 335, 0, 339, 0, 0, 355, 357, 358,
	359, 344, 345, 585, 316, 317, 309, 310, 311, 312,
	313, 314, 315, 319, 106, 0, 289, 290, 0, 0,
	0, 150, 151, 152, 153, 154, 155, 157, 141, 608,
	610, 988, 1000, 0, 991, 0, 160, 200, 133, 0,
	0, 0, 1583, 1584, 1585, 1586, 1587, 1592, 0, 1594,
	1596, 1598, 1600, 0, 1618, -2, -2, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1603,
	1616, 1617, 0, 0, 0, 0, 0, 0, 1614, 1614,
	1609, 0, 1351, 0, 0, 1384, 1388, 0, 0, 0,
	0, 0, 97, 1573, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503,
	1504, 1505, 1506, 0, 0, 1582, 0, 0, 0, 1575,
	1576, 0, 0, 0, 1466, 0, 0, 1472, 1473, 1474,
	0, 670, 0, 1539, 1512, 1530, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 813, 815, 0, 679, 681, 682, 708,
	689, 715, 0, 0, 0, 58, 63, 0, 1072, 283,
	284, 0, 0, 278, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 936, 452, 982, 0, 0, 0, 998,
	1023, 1031, 0, 0, 0, 0, 0, 1078, 923, 928,
	929, 930, 924, 925, 931, 932, 0, 730, 0, 0,
	827, 508, 565, 566, 788, 514, 1846, 519, 787, 787,
	526, 520, 527, 569, 528, 529, 530, 567, 787, 787,
	736, 564, 567, 553, 568, 567, 556, 557, 0, 563,
	576, 581, 577, 0, 579, 534, 535, 1080, 732, 371,
	372, 373, 375, 0, 423, 423, 423, 406, 423, 0,
	0, 394, 1722, 0, 0, 0, 0, 403, 1722, 0,
	0, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 0, 0,
	1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
	1722, 0, 1722, 1722, 1722, 1722, 1722, 1197, 1722, 0,
	1045, 413, 414, 415, 416, 421, 422, 0, 449, 0,
	0, 0, 452, 0, 970, 800, 0, 801, 802, 798,
	829, 853, 853, 0, 853, 833, 1217, 0, 0, 228,
	229, 218, 0, 219, 0, 231, 232, 0, 234, 235,
	236, 243, 1788, 1861, 238, 240, 0, 0, 244, 257,
	258, 259, 0, 0, 249, 250, 0, 0, 303, 304,
	306, 0, 689, 1048, 1049, 1050, 605, 1215, 606, 607,
	611, 0, 0, 614, 615, 616, 617, 618, 903, 0,
	0, 975, 976, 977, 787, 0, 796, 0, 792, 859,
	0, 861, 0, 787, 0, 81, 19, 0, 74, 71,
	0, 0, 0, 0, 0, 1697, 1647, 1718, 0, 0,
	0, 1699, 0, 0, 0, 0, 64, 691, 652, 0,
	655, 672, 0, 676, 0, 0, 668, 660, 665, 0,
	0, 685, 0, 1219, 646, 0, 0, 651, 689, 0,
	712, 741, 742, 745, 1272, 0, 340, 336, 354, 0,
	0, 0, 0, 144, 985, 0, 145, 149, 139, 0,
	0, 0, 990, 0, 987, 992, 0, 159, 0, 0,
	134, 135, 1063, 1072, 0, 0, 0, 1593, 1595, 1597,
	1599, 1601, 0, 1604, 1614, 1614, 1610, 0, 1605, 0,
	1607, 0, 1583, 1357, 0, 1389, 0, 0, 0, 0,
	0, 0, 0, 0, 1456, 1457, 0, 0, 1461, 0,
	1463, 1464, 1465, 1467, 0, 0, 0, 1471, 0, 1510,
	1531, 1514, 1517, 0, 1521, 0, 1523, 1525, 1526, 1527,
	0, 739, 739, 0, 0, 1428, 1428, 1428, 0, 0,
	0, 0, 1428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1373, 0, 1374, 1375, 0, 0, 0,
	816, 709, 0, 0, 0, 0, 0, 1070, 0, 285,
	273, 275, 0, 0, 1036, 0, 0, 891, 892, 894,
	0, 897, 898, 899, 903, 732, 0, 732, 943, 1722,
	456, 0, 0, 984, 0, 959, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	630, 634, 23, 733, 0, 512, 0, 513, 564, 521,
	522, 787, 545, 546, 0, 0, 787, 564, 564, 567,
	0, 578, 1082, 0, 0, 1044, 1148, 1116, 384, 0,
	1228, 1229, 424, 0, 1235, 1244, 1035, 1304, 0, 1244,
	0, 0, 1246, 1247, 0, 0, 0, 0, 407, 408,
	0, 393, 0, 0, 0, 0, 0, 0, 392, 0,
	0, 434, 0, 0, 0, 0, 0, 1723, 1722, 1722,
	0, 401, 402, 0, 405, 0, 0, 0, 0, 0,
	0, 0, 0, 1722, 1722, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1188, 0, 0, 0,
	0, 0, 0, 0, 1203, 1204, 943, 1722, 0, 0,
	0, 456, 957, 966, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 819, 0, 0, 0, 0, 0, 732,
	854, 0, 856, 857, 831, -2, 0, 800, 836, 1578,
	221, 222, 0, 0, 227, 245, 247, 0, 0, 0,
	246, 248, 252, 253, 302, 305, 307, 751, 0, 0,
	1106, 0, 904, 905, 907, 908, 0, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1772, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 902, 622, 785, 790, 797, 860, 862, 97,
	793, 785, 0, 84, 19, 83, 75, 76, 0, 19,
	0, 0, 0, 0, 1707, 1706, 1692, 0, 1693, 1704,
	1709, 0, 1712, 0, 695, 0, 0, 675, 677, 0,
	0, 675, 0, 0, 684, 0, 0, 0, 675, 751,
	691, 0, 748, 746, 747, 0, 0, 586, 107, 360,
	0, 0, 0, 0, 0, 609, 0, 989, 141, 0,
	0, 161, 0, 0, 0, 1072, 1067, 1577, 1606, 1608,
	0, 1615, 1611, 1352, 1361, 1385, 0, 0, 1391, 1403,
	1403, 0, 0, 0, 1394, 1705, 1705, 1397, 1701, 1703,
	1701, 1403, 1403, 0, 98, 0, 0, 1462, 0, 0,
	0, 671, 0, 0, 0, 1424, 1426, 1428, 1428, 1435,
	1429, 1436, 1437, 1428, 1428, 1428, 1428, 1442, 1428, 1428,
	1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1422, 0,
	0, 1636, 1637, 680, 0, 0, 722, 723, 724, 725,
	726, 0, 0, 53, 54, 1072, 0, 277, 55, 56,
	0, 0, 0, 896, 0, 0, 0, 1221, 0, 947,
	944, 945, 946, 0, 979, 457, 458, 459, 460, 0,
	0, 0, 983, 0, 970, 952, 0, 0, 0, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, -2, 1039, 0, 0,
	0, 1221, 1058, 0, 1221, 1221, 0, 1090, 0, 1079,
	683, 0, -2, 0, 0, 632, 0, 0, 828, 515,
	787, 539, 737, 738, 554, 787, 787, 564, 582, 1090,
	1081, 0, 374, 423, 0, 1136, 0, 0, 1142, 0,
	1149, 377, 0, 425, 0, 1234, 1261, 1245, 1261, 1305,
	1261, 1261, 1035, 0, 425, 0, 0, 395, 431, 0,
	0, 0, 0, 0, 391, 428, 745, 378, 380, 381,
	382, 432, 433, 435, 0, 437, 438, 397, 409, 410,
	411, 412, 0, 0, 0, 404, 417, 418, 419, 420,
	379, 1165, 1166, 1167, 1170, 1171, 1172, 1173, 0, 0,
	1176, 1177, 1178, 1179, 1180, 1258, 1259, 1260, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1205, 1206, 1207, 1208, 1209,
	1210, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 0,
	0, 1200, 0, 947, 0, 0, 0, 0, 979, 959,
	0, 969, 0, 971, 972, 0, 0, 653, 787, 295,
	0, 823, 817, 0, 806, 821, 822, 809, 0, 811,
	0, 807, 808, 787, 799, 830, 855, 832, 835, 837,
	838, 844, 0, 0, 0, 0, 224, 225, 226, 233,
	0, 476, 239, 707, 0, 1216, 612, 613, 1107, 1108,
	620, 0, 909, 783, 0, 0, 783, 79, 82, 0,
	77, 0, 0, 0, 0, 69, 67, 1700, 0, 0,
	697, 121, 0, 0, 0, 673, 0, 678, 675, 659,
	669, 658, 666, 667, 686, 1220, 675, 650, 649, 710,
	695, 743, 744, 0, 1273, 331, 0, 986, 141, 146,
	147, 148, 142, 140, 993, 0, 995, 0, 1065, 0,
	0, 1612, 1390, 1362, 1392, 1404, 1405, 1393, 0, 1364,
	1365, 1395, 1396, 1398, 1399, 1400, 1401, 1402, 1366, 1458,
	0, 1460, 1468, 1469, 0, 1518, 1522, 0, 0, 0,
	0, 0, 1433, 1434, 1438, 1439, 1440, 1441, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 739, 1423,
	0, 0, 0, 0, 0, 0, 0, 720, 0, 0,
	0, 1071, 1073, 57, 884, 887, 893, 895, 0, 0,
	0, 1222, 1223, 1225, 1226, 1227, 0, 920, 0, 0,
	938, 939, 949, 0, 0, 0, 462, 463, 0, 0,
	0, 475, 471, 472, 473, 453, 978, 966, 955, 0,
	0, 965, 0, 1040, 1722, 1722, 1722, 0, 0, 1150,
	1722, 1722, 0, 1060, 0, 0, 1154, 1093, 0, 0,
	1084, 0, 853, 0, 0, 787, 631, 634, 635, 731,
	516, 558, 555, 787, 1093, 370, 1114, 0, 0, 0,
	0, 0, 1146, 0, 0, 1118, 0, 396, 426, 0,
	-2, 0, 1262, 0, 1248, 1262, 0, 0, 1261, 0,
	385, 425, 0, 0, 0, 439, 443, 444, 0, 441,
	1300, 0, 442, 0, 430, 0, 436, 1168, 1169, 0,
	1174, 1175, 0, 1199, 0, 0, 445, 0, 0, 0,
	446, 451, 952, 0, 967, 0, 973, 974, 739, 0,
	0, 803, 824, 0, 0, 804, 0, 805, 810, 812,
	294, 839, 0, 0, 841, 842, 843, 834, 241, 752,
	906, 0, 773, 0, 0, 794, 774, 0, 19, 0,
	0, 72, 1710, 1713, 699, 0, 696, 122, 0, 0,
	0, 0, 663, 674, 657, 648, 697, 749, 750, 143,
	138, 994, 1075, 0, 1066, 0, 0, 1470, 0, 1428,
	1425, 1428, 1427, 1419, 0, 1376, 0, 1378, 1379, 1380,
	0, 1382, 1383, 0, 718, 0, 0, 926, 1154, 0,
	926, 948, 937, 0, 980, 981, 0, 464, 465, 0,
	468, 474, 950, 951, 0, 0, 963, 0, 0, 0,
	0, 1032, 1046, 0, 0, 0, -2, 0, -2, 1057,
	0, 1099, 0, 1091, 0, 1083, 0, 1086, 787, 787,
	-2, 628, 633, 0, 559, 1099, 1116, 0, 1137, 0,
	0, 0, 0, 0, 0, 0, 1117, 0, 1130, 427,
	1263, -2, 1276, 1278, 0, 1045, 1281, 1282, 0, 0,
	0, 0, 0, 0, 1326, 1290, 0, 0, 1294, 1295,
	1296, 0, 0, 1299, 0, 1630, 1631, 0, 1303, 0,
	0, 0, 0, 0, 0, 0, 1242, 386, 387, 0,
	389, 390, 1722, 1301, 429, 383, 1722, 399, 1198, 1201,
	1202, 450, 447, 448, 955, 958, 654, 734, 296, 297,
	825, 0, 818, 848, 845, 0, 0, 910, 784, 786,
	73, 78, 0, 0, 701, 0, 698, 0, 692, 694,
	132, 662, 699, 94, 124, 0, 0, 1363, 1459, 1509,
	1431, 1432, 0, 1420, 0, 1414, 1415, 1416, 1421, 0,
	0, 721, 716, 0, 912, 919, 933, 1051, 1224, 918,
	0, 0, 461, 466, 0, 469, 470, 0, 953, 954,
	0, 961, 0, 0, 1019, 1701, 0, 1041, 1042, 1213,
	1214, 1043, 1151, 1152, 1153, 1109, 1059, 0, -2, 1162,
	0, 1055, 1075, 1109, 0, 1087, 0, 1094, 0, 1092,
	1085, 739, 629, 1096, 376, 1148, 1138, 0, 1140, 0,
	0, 0, 0, 1119, -2, 0, 1277, 1279, 1280, 1283,
	1284, 1285, 1331, 1332, 1333, 0, 0, 1288, 1328, 1329,
	1330, 1289, 0, 0, 0, 0, 0, 1628, 1629, 1324,
	0, 0, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1250, 0, 0, 0, 1241, 1243, 388, 0, 0, 1722,
	968, 293, 0, 0, 849, 851, 846, 847, 68, 70,
	85, 0, 700, 123, 0, 701, 86, 0, 115, 0,
	1076, 0, 1430, 1417, 0, 0, 0, 0, 0, 1632,
	1633, 1634, 0, 1377, 1381, 0, 0, 934, 935, 940,
	0, 942, 467, 956, 960, 963, 0, 1010, 0, 745,
	0, 1111, 0, 1061, 1044, 1164, 1722, 1062, 1111, 0,
	1156, 1722, 1722, 1077, 0, 1089, 0, 1101, 0, 1095,
	734, 369, 0, 1098, 1134, 1139, 1141, 1143, 0, 1147,
	1145, 1120, -2, 0, 1128, 0, 0, 1286, 1287, 0,
	0, 1528, 1722, 0, 1319, 0, 1010, 1010, 1010, 1010,
	0, 440, 398, 0, 826, 840, 0, 0, 0, 690,
	95, 112, 0, 125, 126, 0, 0, 0, 0, 1068,
	0, 1406, 0, 0, 0, 1410, 1411, 1412, 1413, 0,
	911, 0, 941, 962, 964, 1009, 1020, 1021, 745, 1054,
	0, 1148, 1163, 0, 1056, 1155, 0, 0, 0, 1088,
	1100, 0, 1103, 627, 1097, 1115, 0, 1144, 1121, 1129,
	0, 1124, 0, 0, 0, 1327, 0, 1293, 0, 1298,
	1307, 1320, 0, 0, 1230, 0, 1232, 0, 1236, 0,
	1238, 0, 0, 400, 850, 852, 0, 703, 693, 99,
	0, 121, 118, 0, 127, 0, 0, 0, 0, 1064,
	0, 0, 1407, 1408, 1409, 0, 913, 914, 927, 1011,
	1722, 1722, 0, 0, 0, 1017, 1018, 1022, 0, 1136,
	1168, 1157, 1158, 1159, 1102, 1135, 1123, 0, -2, 1131,
	0, 0, 1580, 1590, 1591, 1291, 1297, 1306, 1308, 1309,
	0, 1321, 1322, 1323, 1325, 1010, 1010, 1010, 1010, 1240,
	702, 0, 88, 0, 0, 116, 117, 119, 0, 128,
	0, 130, 131, 0, 1418, 915, 0, 0, 1014, 1015,
	0, 1112, 0, 1114, 1125, -2, 0, 1133, 0, 1292,
	1310, 0, 1311, 0, 0, 0, 1231, 1233, 1237, 1239,
	704, 1074, 0, 100, 0, 102, 104, 105, 1264, 113,
	114, 120, 129, 0, 900, 916, 0, 1012, 1013, 1016,
	0, 1116, 1132, 1581, 1312, 1314, 1315, 0, 0, 1313,
	89, 90, 0, 101, 0, 0, 1069, 917, 1113, 1110,
	1316, 1318, 1317, 0, 0, 103, 1265, 91, 92, 93,
	0, 1266,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 3, 3, 3, 146, 138, 3,
	82, 83, 143, 141, 156, 142, 155, 144, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 632, 629,
	125, 124, 126, 3, 633, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 148, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 630, 137, 631, 149,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 116, 117, 118, 119, 120, 121, 122, 123, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 145, 147, 150, 151, 152, 153, 154, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:801
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:808
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:814
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:822
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:828
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:832
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:847
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:851
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:857
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:862
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:866
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:898
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:915
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option)
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:926
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Obeject:     yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:936
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObejectInfo
//line mysql_sql.y:946
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObejectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:959
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:979
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:985
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:992
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1000
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1006
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1015
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1025
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1033
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1049
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1059
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1067
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1077
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1084
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1093
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1103
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1107
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1113
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1117
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1123
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1132
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1142
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1146
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1152
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1161
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1165
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1171
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1192
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1205
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1212
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1216
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1222
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1226
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1232
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1239
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1247
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1251
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1265
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1269
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1273
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1278
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1282
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1286
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1292
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1301
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1312
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1316
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1322
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1326
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1332
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1336
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1342
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1366
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1385
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1389
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1393
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1398
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1402
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1411
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1421
		{
			yyVAL.str = ""
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1428
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1433
		{
			yyVAL.str = "\n"
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1440
		{
			yyVAL.str = yyDollar[3].str
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1445
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1449
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1477
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1481
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1487
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1495
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1515
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1534
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1559
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1563
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1567
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1572
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1576
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1582
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1595
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1606
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1619
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1623
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1633
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1646
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1659
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1665
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1671
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1678
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1686
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1695
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1699
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1703
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1707
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1711
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1715
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1722
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1726
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1732
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1739
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1748
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1752
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1758
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1762
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1766
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1770
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1774
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1778
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1782
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1786
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1790
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1794
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1798
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1802
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1806
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1810
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1814
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1818
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1822
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1826
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1830
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1834
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1838
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1842
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1846
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1850
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1854
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1858
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1862
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1866
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1870
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1874
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1878
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1882
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1886
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1890
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1894
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1898
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1902
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1906
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1910
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1914
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1918
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1922
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1926
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1930
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1934
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1938
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1942
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1946
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1950
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1954
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1967
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1974
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1981
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1991
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1995
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2001
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2008
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2016
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2020
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2024
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2028
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2034
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2038
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2044
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2051
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2058
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2067
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2097
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2101
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2105
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2111
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2117
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2121
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2128
		{
			yyVAL.str = yyDollar[3].str
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2134
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2138
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2144
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2152
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2161
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2170
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2178
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2186
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2209
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2232
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2239
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2246
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2254
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2261
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2268
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2277
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2285
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2291
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2295
		{
			yyVAL.str = yyDollar[1].str
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2301
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2305
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2311
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2315
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2326
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2332
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2337
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2341
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2345
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2349
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2353
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2357
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2361
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2365
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2369
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2375
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2379
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2383
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2387
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2392
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2397
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2403
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2416
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2429
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2442
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2455
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2471
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2478
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2489
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2500
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2504
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2510
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2520
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2526
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2530
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2536
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2542
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2546
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2550
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2554
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2560
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2572
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2578
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2582
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2588
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2592
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2598
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2604
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2615
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2621
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2625
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2629
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2633
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2637
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2641
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2649
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2657
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2667
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2679
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2683
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2691
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2699
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2738
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2742
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2748
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2754
		{
			yyVAL.str = yyDollar[1].str
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2759
		{
			yyVAL.str = "true"
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2760
		{
			yyVAL.str = "false"
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2761
		{
			yyVAL.str = yyDollar[1].str
		}
	case 360:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2766
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2783
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2806
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2816
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2823
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2832
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2836
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2842
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2846
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2870
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2880
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2896
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2914
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2918
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2924
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2928
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2934
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2940
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2948
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2958
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2966
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2976
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2986
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2996
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3003
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3007
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3011
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3015
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3019
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3026
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3032
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3036
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3040
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3044
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3048
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3052
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3056
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3060
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3065
		{
			yyVAL.str = ""
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3096
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3100
		{
			yyVAL.str = string("COLUMN")
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3105
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3111
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3117
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3125
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3129
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3135
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3143
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3150
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3156
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3162
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3168
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3174
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3181
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3188
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3196
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3202
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3214
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3220
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3228
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3232
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3239
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3257
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3271
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3285
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3298
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3304
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3315
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3328
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3332
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3340
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3344
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3349
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3353
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3369
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3373
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3377
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3381
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3388
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3392
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3396
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3400
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3407
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3411
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3418
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3422
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3426
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3430
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3437
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3444
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3450
		{
			yyVAL.item = nil
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3455
		{
			yyVAL.item = nil
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3497
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3506
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3514
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3522
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3526
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3530
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3541
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3545
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3551
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3556
		{
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3560
		{
		}
	case 521:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3565
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3575
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3585
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3593
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3599
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3605
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3611
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3617
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3623
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3629
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3638
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3642
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3646
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3650
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3654
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3658
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3662
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3666
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3672
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3681
		{
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3683
		{
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3692
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3702
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3711
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3715
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3719
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3725
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3731
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3743
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3752
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3762
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3774
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3778
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3784
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3796
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3810
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3816
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3823
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3827
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3832
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3836
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3840
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3845
		{
			yyVAL.str = ""
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3849
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3855
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3868
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3872
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3878
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3883
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3887
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3891
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3897
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3903
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3907
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3913
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3919
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3923
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3927
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3933
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3937
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3963
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3971
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].str
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3979
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3987
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3991
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3997
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4010
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4018
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4027
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4033
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4041
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4049
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4057
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4063
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4071
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4077
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4085
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4091
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4101
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4106
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4113
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4129
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4142
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4153
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4157
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4163
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4168
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4175
		{
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4177
		{
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4180
		{
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4189
		{
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4193
		{
		}
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4198
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4207
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4214
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4220
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4228
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4235
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4242
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4262
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4272
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4276
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4282
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4289
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4295
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4303
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4310
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4317
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4336
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4340
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4344
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4349
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4353
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4357
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4363
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4372
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4376
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4382
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4386
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4392
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4396
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4402
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4407
		{
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4411
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4418
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4422
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4429
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4434
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4438
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4444
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4448
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4454
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4458
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4463
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4467
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4480
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4491
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4502
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4524
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4547
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4555
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4564
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4568
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4581
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4585
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4590
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4594
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4601
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4606
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4613
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4619
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4623
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4627
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4631
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4635
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4639
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4644
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4648
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4654
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4664
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4679
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4683
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4697
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4701
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4707
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4716
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4720
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4724
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4728
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4732
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4738
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4745
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4754
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4758
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4764
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4772
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4776
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4781
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4785
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4791
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4795
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4799
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4804
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4808
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4814
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4820
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4824
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4830
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4835
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4839
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4843
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4848
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4852
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4856
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4861
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4865
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4873
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4877
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4881
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4895
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4899
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4909
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4919
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4929
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4941
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4949
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4957
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4966
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4974
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4982
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4990
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4998
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5006
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5014
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5022
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5030
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5040
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5051
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5065
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5069
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5073
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5078
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5082
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5086
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5095
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5099
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5104
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5108
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5113
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5117
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5123
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5127
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5133
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5137
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5142
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5146
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5151
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5159
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5165
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5173
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5181
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5191
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5197
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5206
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5215
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5224
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5234
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5238
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 809:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5248
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5252
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5256
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5260
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 813:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5266
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5276
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5280
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5286
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5292
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5296
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5302
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5308
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5312
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5316
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5322
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5326
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5332
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5336
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5342
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5346
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5352
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5356
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5366
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5379
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5385
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5391
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5404
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5415
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5422
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5426
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5432
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5442
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5446
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5450
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5455
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5459
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5463
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5467
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5472
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5476
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5480
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5484
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5488
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5493
		{
			yyVAL.str = ""
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5497
		{
			yyVAL.str = yyDollar[1].str
		}
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5501
		{
			yyVAL.str = yyDollar[2].str
		}
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5507
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5513
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5517
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5521
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5525
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5529
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5535
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 884:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5575
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5588
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5594
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 887:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5600
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5613
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5618
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5624
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5631
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5635
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5641
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5647
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5652
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5656
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5660
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5664
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5671
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5704
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5709
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5715
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5722
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5726
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5732
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5738
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5742
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5746
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5752
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5758
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5764
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5768
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5774
		{
			yyVAL.str = ""
		}
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5781
		{
			yyVAL.str = yyDollar[2].str
		}
	case 918:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5787
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5802
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5819
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].str
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5836
		{
			yyVAL.str = yyDollar[1].str
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5840
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5846
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5850
		{
			yyVAL.str = "DEFINER = "
		}
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5854
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5859
		{
			yyVAL.str = ""
		}
	case 927:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5863
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5877
		{
			yyVAL.str = ""
		}
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5885
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 937:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5891
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].str
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5904
		{
			yyVAL.str = yyDollar[1].str
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5908
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 940:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5914
		{
			var Typ = tree.AccountIdentifiedByPassword
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5923
		{
			var Typ = tree.AccountIdentifiedByRandomPassword
			var Str string
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5932
		{
			var Typ = tree.AccountIdentifiedWithSSL
			var Str = yyDollar[3].str
			yyLOCAL = *tree.NewAccountIdentified(
				Typ,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5942
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5948
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5955
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5962
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5970
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5976
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5985
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6002
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6019
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6037
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6043
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6050
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6058
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6064
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6072
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6078
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6086
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6092
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6101
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6105
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6110
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6114
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6121
		{
			yyVAL.str = yyDollar[3].str
		}
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6126
		{
			yyVAL.str = ""
		}
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6130
		{
			yyVAL.str = yyDollar[2].str
		}
	case 968:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6136
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6149
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var comment = yyDollar[6].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, comment)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6158
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6162
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6168
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6174
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6180
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6189
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6197
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6205
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6213
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6218
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6230
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6241
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6350
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6354
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6360
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6373
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6377
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6383
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6396
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6400
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6404
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6409
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6413
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6419
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6426
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6432
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6441
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 998:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6448
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6459
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6463
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6469
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6478
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6482
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6486
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6491
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6495
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6499
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6503
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6509
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6540
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6544
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6570
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6576
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6588
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6594
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6600
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6606
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6612
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6620
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6624
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6630
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6644
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6658
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6662
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6666
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6670
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6674
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6678
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6682
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6688
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6703
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6707
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6718
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6722
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6727
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6731
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6737
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6741
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6747
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6756
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6765
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6771
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6775
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6781
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6792
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6798
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6816
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6834
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6852
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6868
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6872
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6878
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6890
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6899
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6911
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6921
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6931
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6942
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6952
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6965
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6972
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6982
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6995
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7003
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7012
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7021
		{
			yyVAL.str = ""
		}
	case 1069:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7025
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7031
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7035
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7040
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7044
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7051
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7063
		{
			yyVAL.str = ""
		}
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7067
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1077:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7073
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7094
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7108
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7112
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7116
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7122
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7126
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7133
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7140
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7147
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7154
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7158
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7162
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7166
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7170
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7177
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7184
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7188
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7195
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7202
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7206
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7212
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7218
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7222
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7229
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7236
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7243
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7250
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7254
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7259
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7263
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7267
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7272
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7276
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7289
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7293
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7301
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7309
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7313
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7325
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7329
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7335
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7339
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7345
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7358
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7372
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7376
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7382
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7386
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7392
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7401
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7412
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7416
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7421
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7425
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7431
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7436
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7444
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7448
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7458
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7462
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7473
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7481
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7489
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7497
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7508
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7517
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7527
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7537
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7541
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7546
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7550
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7556
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7560
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7566
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7575
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7585
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7589
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7595
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7599
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7605
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7614
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7624
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7628
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7634
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7638
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7642
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7648
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7652
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7656
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7660
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7664
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7668
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7672
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7677
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7681
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7685
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7689
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7693
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7697
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7701
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7705
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7709
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7713
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7717
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7721
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7725
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7731
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7737
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7741
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7745
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7749
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7753
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7759
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7765
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7771
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7777
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7783
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7789
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7793
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7797
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7801
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7808
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7812
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7818
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7829
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7833
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7839
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7843
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7847
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7851
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7855
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7859
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7873
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7877
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7886
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7891
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7896
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[3].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7904
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			atTs := &tree.AtTimeStamp{
				Expr: yyDollar[5].exprUnion(),
			}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix, atTs)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7913
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7920
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7924
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7930
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7934
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7938
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7944
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7948
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7954
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7967
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7980
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8019
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8059
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8073
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8079
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8092
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8105
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8118
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8131
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8146
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8156
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8162
		{
			yyVAL.str = ""
		}
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8166
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8176
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8182
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8188
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8209
		{
			yyVAL.str = ""
		}
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8213
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8219
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8225
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8229
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8233
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8239
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8243
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8247
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8251
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8257
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8261
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8265
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8270
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8274
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8280
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8284
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8290
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8294
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8298
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8302
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8306
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8310
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8315
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8319
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8323
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8327
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8331
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8335
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8339
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8343
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8347
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8351
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8364
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8368
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8372
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8376
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8380
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8384
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8390
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8394
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8399
		{
			yyVAL.str = ""
		}
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8403
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8409
		{
			yyVAL.str = ""
		}
	case 1305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8413
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8419
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8436
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8443
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8450
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8457
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8464
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8473
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8479
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8485
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8489
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8493
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8497
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8501
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8506
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8513
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8517
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8521
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8526
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8530
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8535
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8539
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8555
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8561
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8565
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8569
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8573
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8577
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8581
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8585
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8589
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8593
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8597
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8601
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8605
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8609
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8615
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8619
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8623
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8627
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8631
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8635
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8639
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8643
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8647
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8651
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8693
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8697
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8701
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8706
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8714
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8718
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8722
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8726
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8730
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8739
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8743
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8747
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8751
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8755
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8759
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8765
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8773
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8781
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8791
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8801
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8811
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8820
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8830
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8840
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8850
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8859
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8869
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8873
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8878
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8882
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8888
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8892
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8898
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8907
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8919
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8936
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8953
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8966
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8979
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8991
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9005
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9020
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9035
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9052
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9067
		{
		}
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9074
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9078
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9082
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9088
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9092
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9096
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9100
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9106
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9110
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9114
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9120
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9128
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9138
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9142
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9149
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9154
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9158
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9163
		{
			yyVAL.str = ","
		}
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9167
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9172
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9176
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9181
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9188
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9214
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9225
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9236
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9246
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9256
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9266
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9275
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9284
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9294
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9304
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9314
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9324
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9334
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9344
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9354
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9364
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9374
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9384
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9394
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9404
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9414
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9424
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9441
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9449
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9457
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9465
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9473
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9483
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9491
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9500
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9508
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9516
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9524
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9532
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9543
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9553
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9565
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9576
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9598
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9634
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9646
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9658
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9669
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9677
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9684
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9691
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9703
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9711
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9721
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9731
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9739
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9750
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9759
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9768
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9776
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9786
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9794
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9803
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9811
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9819
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9828
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9832
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9838
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9842
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9861
		{
		}
	case 1539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9863
		{
		}
	case 1573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9904
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9915
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9919
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9923
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9929
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9934
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9938
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9944
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9948
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9954
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9958
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9965
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9969
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9973
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9981
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9985
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9989
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9994
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9998
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10004
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10008
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10012
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10016
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10020
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10024
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10028
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10032
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10036
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10040
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10048
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10052
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10056
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10060
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10064
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10068
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10072
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10076
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10080
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10084
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10090
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10094
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10100
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10104
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10111
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10115
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10119
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10125
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10129
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10133
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10137
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10141
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10145
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10149
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10155
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10159
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10163
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10167
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10173
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10186
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10191
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10197
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10201
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10214
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10219
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10223
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10227
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10231
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10235
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10242
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10246
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10250
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10254
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10261
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10272
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10277
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10283
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10295
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10307
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10319
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10332
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10345
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10358
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10371
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10384
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10397
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10410
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10423
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10436
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10449
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10464
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10491
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10533
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10569
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10605
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10622
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10634
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10654
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10674
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10694
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10710
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10723
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10736
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10749
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10762
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10774
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10786
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10798
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10810
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10822
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10834
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10846
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10858
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10870
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10883
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10896
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10909
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10922
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10937
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10945
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10954
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10964
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10987
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10992
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10998
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11005
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11009
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11014
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11018
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11024
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11030
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11037
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11044
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11053
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11060
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11067
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11076
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11080
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11084
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11090
		{
		}
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11092
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11102
		{
			yyVAL.str = ""
		}
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11106
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
