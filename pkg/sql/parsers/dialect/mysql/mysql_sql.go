// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CROSS_L2 = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const INCREMENT = 57659
const CYCLE = 57660
const MINVALUE = 57661
const PUBLICATION = 57662
const SUBSCRIPTIONS = 57663
const PUBLICATIONS = 57664
const PROPERTIES = 57665
const PARSER = 57666
const VISIBLE = 57667
const INVISIBLE = 57668
const BTREE = 57669
const HASH = 57670
const RTREE = 57671
const BSI = 57672
const IVFFLAT = 57673
const MASTER = 57674
const ZONEMAP = 57675
const LEADING = 57676
const BOTH = 57677
const TRAILING = 57678
const UNKNOWN = 57679
const LISTS = 57680
const OP_TYPE = 57681
const REINDEX = 57682
const EXPIRE = 57683
const ACCOUNT = 57684
const ACCOUNTS = 57685
const UNLOCK = 57686
const DAY = 57687
const NEVER = 57688
const PUMP = 57689
const MYSQL_COMPATIBILITY_MODE = 57690
const UNIQUE_CHECK_ON_AUTOINCR = 57691
const MODIFY = 57692
const CHANGE = 57693
const SECOND = 57694
const ASCII = 57695
const COALESCE = 57696
const COLLATION = 57697
const HOUR = 57698
const MICROSECOND = 57699
const MINUTE = 57700
const MONTH = 57701
const QUARTER = 57702
const REPEAT = 57703
const REVERSE = 57704
const ROW_COUNT = 57705
const WEEK = 57706
const REVOKE = 57707
const FUNCTION = 57708
const PRIVILEGES = 57709
const TABLESPACE = 57710
const EXECUTE = 57711
const SUPER = 57712
const GRANT = 57713
const OPTION = 57714
const REFERENCES = 57715
const REPLICATION = 57716
const SLAVE = 57717
const CLIENT = 57718
const USAGE = 57719
const RELOAD = 57720
const FILE = 57721
const TEMPORARY = 57722
const ROUTINE = 57723
const EVENT = 57724
const SHUTDOWN = 57725
const NULLX = 57726
const AUTO_INCREMENT = 57727
const APPROXNUM = 57728
const SIGNED = 57729
const UNSIGNED = 57730
const ZEROFILL = 57731
const ENGINES = 57732
const LOW_CARDINALITY = 57733
const AUTOEXTEND_SIZE = 57734
const ADMIN_NAME = 57735
const RANDOM = 57736
const SUSPEND = 57737
const ATTRIBUTE = 57738
const HISTORY = 57739
const REUSE = 57740
const CURRENT = 57741
const OPTIONAL = 57742
const FAILED_LOGIN_ATTEMPTS = 57743
const PASSWORD_LOCK_TIME = 57744
const UNBOUNDED = 57745
const SECONDARY = 57746
const RESTRICTED = 57747
const USER = 57748
const IDENTIFIED = 57749
const CIPHER = 57750
const ISSUER = 57751
const X509 = 57752
const SUBJECT = 57753
const SAN = 57754
const REQUIRE = 57755
const SSL = 57756
const NONE = 57757
const PASSWORD = 57758
const SHARED = 57759
const EXCLUSIVE = 57760
const MAX_QUERIES_PER_HOUR = 57761
const MAX_UPDATES_PER_HOUR = 57762
const MAX_CONNECTIONS_PER_HOUR = 57763
const MAX_USER_CONNECTIONS = 57764
const FORMAT = 57765
const VERBOSE = 57766
const CONNECTION = 57767
const TRIGGERS = 57768
const PROFILES = 57769
const LOAD = 57770
const INLINE = 57771
const INFILE = 57772
const TERMINATED = 57773
const OPTIONALLY = 57774
const ENCLOSED = 57775
const ESCAPED = 57776
const STARTING = 57777
const LINES = 57778
const ROWS = 57779
const IMPORT = 57780
const DISCARD = 57781
const JSONTYPE = 57782
const MODUMP = 57783
const OVER = 57784
const PRECEDING = 57785
const FOLLOWING = 57786
const GROUPS = 57787
const DATABASES = 57788
const TABLES = 57789
const SEQUENCES = 57790
const EXTENDED = 57791
const FULL = 57792
const PROCESSLIST = 57793
const FIELDS = 57794
const COLUMNS = 57795
const OPEN = 57796
const ERRORS = 57797
const WARNINGS = 57798
const INDEXES = 57799
const SCHEMAS = 57800
const NODE = 57801
const LOCKS = 57802
const ROLES = 57803
const TABLE_NUMBER = 57804
const COLUMN_NUMBER = 57805
const TABLE_VALUES = 57806
const TABLE_SIZE = 57807
const NAMES = 57808
const GLOBAL = 57809
const PERSIST = 57810
const SESSION = 57811
const ISOLATION = 57812
const LEVEL = 57813
const READ = 57814
const WRITE = 57815
const ONLY = 57816
const REPEATABLE = 57817
const COMMITTED = 57818
const UNCOMMITTED = 57819
const SERIALIZABLE = 57820
const LOCAL = 57821
const EVENTS = 57822
const PLUGINS = 57823
const CURRENT_TIMESTAMP = 57824
const DATABASE = 57825
const CURRENT_TIME = 57826
const LOCALTIME = 57827
const LOCALTIMESTAMP = 57828
const UTC_DATE = 57829
const UTC_TIME = 57830
const UTC_TIMESTAMP = 57831
const REPLACE = 57832
const CONVERT = 57833
const SEPARATOR = 57834
const TIMESTAMPDIFF = 57835
const CURRENT_DATE = 57836
const CURRENT_USER = 57837
const CURRENT_ROLE = 57838
const SECOND_MICROSECOND = 57839
const MINUTE_MICROSECOND = 57840
const MINUTE_SECOND = 57841
const HOUR_MICROSECOND = 57842
const HOUR_SECOND = 57843
const HOUR_MINUTE = 57844
const DAY_MICROSECOND = 57845
const DAY_SECOND = 57846
const DAY_MINUTE = 57847
const DAY_HOUR = 57848
const YEAR_MONTH = 57849
const SQL_TSI_HOUR = 57850
const SQL_TSI_DAY = 57851
const SQL_TSI_WEEK = 57852
const SQL_TSI_MONTH = 57853
const SQL_TSI_QUARTER = 57854
const SQL_TSI_YEAR = 57855
const SQL_TSI_SECOND = 57856
const SQL_TSI_MINUTE = 57857
const RECURSIVE = 57858
const CONFIG = 57859
const DRAINER = 57860
const SOURCE = 57861
const STREAM = 57862
const HEADERS = 57863
const CONNECTOR = 57864
const CONNECTORS = 57865
const DAEMON = 57866
const PAUSE = 57867
const CANCEL = 57868
const TASK = 57869
const RESUME = 57870
const MATCH = 57871
const AGAINST = 57872
const BOOLEAN = 57873
const LANGUAGE = 57874
const WITH = 57875
const QUERY = 57876
const EXPANSION = 57877
const WITHOUT = 57878
const VALIDATION = 57879
const UPGRADE = 57880
const RETRY = 57881
const ADDDATE = 57882
const BIT_AND = 57883
const BIT_OR = 57884
const BIT_XOR = 57885
const CAST = 57886
const COUNT = 57887
const APPROX_COUNT = 57888
const APPROX_COUNT_DISTINCT = 57889
const SERIAL_EXTRACT = 57890
const APPROX_PERCENTILE = 57891
const CURDATE = 57892
const CURTIME = 57893
const DATE_ADD = 57894
const DATE_SUB = 57895
const EXTRACT = 57896
const GROUP_CONCAT = 57897
const MAX = 57898
const MID = 57899
const MIN = 57900
const NOW = 57901
const POSITION = 57902
const SESSION_USER = 57903
const STD = 57904
const STDDEV = 57905
const MEDIAN = 57906
const CLUSTER_CENTERS = 57907
const KMEANS = 57908
const STDDEV_POP = 57909
const STDDEV_SAMP = 57910
const SUBDATE = 57911
const SUBSTR = 57912
const SUBSTRING = 57913
const SUM = 57914
const SYSDATE = 57915
const SYSTEM_USER = 57916
const TRANSLATE = 57917
const TRIM = 57918
const VARIANCE = 57919
const VAR_POP = 57920
const VAR_SAMP = 57921
const AVG = 57922
const RANK = 57923
const ROW_NUMBER = 57924
const DENSE_RANK = 57925
const BIT_CAST = 57926
const BITMAP_BIT_POSITION = 57927
const BITMAP_BUCKET_NUMBER = 57928
const BITMAP_COUNT = 57929
const BITMAP_CONSTRUCT_AGG = 57930
const BITMAP_OR_AGG = 57931
const NEXTVAL = 57932
const SETVAL = 57933
const CURRVAL = 57934
const LASTVAL = 57935
const ARROW = 57936
const ROW = 57937
const OUTFILE = 57938
const HEADER = 57939
const MAX_FILE_SIZE = 57940
const FORCE_QUOTE = 57941
const PARALLEL = 57942
const STRICT = 57943
const UNUSED = 57944
const BINDINGS = 57945
const DO = 57946
const DECLARE = 57947
const LOOP = 57948
const WHILE = 57949
const LEAVE = 57950
const ITERATE = 57951
const UNTIL = 57952
const CALL = 57953
const PREV = 57954
const SLIDING = 57955
const FILL = 57956
const SPBEGIN = 57957
const BACKEND = 57958
const SERVERS = 57959
const HANDLER = 57960
const PERCENT = 57961
const SAMPLE = 57962
const MO_TS = 57963
const PITR = 57964
const RECOVERY_WINDOW = 57965
const CDC = 57966
const GROUPING = 57967
const SETS = 57968
const CUBE = 57969
const ROLLUP = 57970
const LOGSERVICE = 57971
const REPLICAS = 57972
const STORES = 57973
const SETTINGS = 57974
const KILL = 57975
const BACKUP = 57976
const FILESYSTEM = 57977
const PARALLELISM = 57978
const RESTORE = 57979
const QUERY_RESULT = 57980

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12848

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	11, 808,
	22, 808,
	-2, 801,
	-1, 167,
	246, 1235,
	248, 1134,
	-2, 1181,
	-1, 194,
	44, 631,
	248, 631,
	275, 638,
	276, 638,
	474, 631,
	-2, 666,
	-1, 234,
	659, 2007,
	-2, 530,
	-1, 543,
	659, 2131,
	-2, 410,
	-1, 601,
	659, 2190,
	-2, 408,
	-1, 602,
	659, 2191,
	-2, 409,
	-1, 603,
	659, 2192,
	-2, 411,
	-1, 743,
	327, 179,
	446, 179,
	447, 179,
	-2, 1909,
	-1, 810,
	86, 1694,
	-2, 2067,
	-1, 811,
	86, 1713,
	-2, 2038,
	-1, 815,
	86, 1714,
	-2, 2066,
	-1, 849,
	86, 1621,
	-2, 2270,
	-1, 850,
	86, 1622,
	-2, 2269,
	-1, 851,
	86, 1623,
	-2, 2259,
	-1, 852,
	86, 2231,
	-2, 2252,
	-1, 853,
	86, 2232,
	-2, 2253,
	-1, 854,
	86, 2233,
	-2, 2261,
	-1, 855,
	86, 2234,
	-2, 2241,
	-1, 856,
	86, 2235,
	-2, 2250,
	-1, 857,
	86, 2236,
	-2, 2262,
	-1, 858,
	86, 2237,
	-2, 2263,
	-1, 859,
	86, 2238,
	-2, 2268,
	-1, 860,
	86, 2239,
	-2, 2273,
	-1, 861,
	86, 2240,
	-2, 2274,
	-1, 862,
	86, 1690,
	-2, 2105,
	-1, 863,
	86, 1691,
	-2, 1893,
	-1, 864,
	86, 1692,
	-2, 2114,
	-1, 865,
	86, 1693,
	-2, 1902,
	-1, 867,
	86, 1696,
	-2, 1910,
	-1, 869,
	86, 1698,
	-2, 2138,
	-1, 871,
	86, 1701,
	-2, 1929,
	-1, 873,
	86, 1703,
	-2, 2150,
	-1, 874,
	86, 1704,
	-2, 2149,
	-1, 875,
	86, 1705,
	-2, 1974,
	-1, 876,
	86, 1706,
	-2, 2062,
	-1, 879,
	86, 1709,
	-2, 2161,
	-1, 881,
	86, 1711,
	-2, 2164,
	-1, 882,
	86, 1712,
	-2, 2166,
	-1, 883,
	86, 1715,
	-2, 2174,
	-1, 884,
	86, 1716,
	-2, 2047,
	-1, 885,
	86, 1717,
	-2, 2092,
	-1, 886,
	86, 1718,
	-2, 2057,
	-1, 887,
	86, 1719,
	-2, 2082,
	-1, 898,
	86, 1599,
	-2, 2264,
	-1, 899,
	86, 1600,
	-2, 2265,
	-1, 900,
	86, 1601,
	-2, 2266,
	-1, 1005,
	469, 666,
	470, 666,
	-2, 632,
	-1, 1056,
	128, 1893,
	139, 1893,
	159, 1893,
	-2, 1867,
	-1, 1177,
	22, 835,
	-2, 784,
	-1, 1287,
	11, 808,
	22, 808,
	-2, 1476,
	-1, 1371,
	22, 835,
	-2, 784,
	-1, 1731,
	86, 1766,
	-2, 2064,
	-1, 1732,
	86, 1767,
	-2, 2065,
	-1, 1907,
	87, 1006,
	-2, 1012,
	-1, 2362,
	111, 1173,
	155, 1173,
	195, 1173,
	198, 1173,
	288, 1173,
	-2, 1166,
	-1, 2526,
	11, 808,
	22, 808,
	-2, 947,
	-1, 2560,
	87, 1853,
	160, 1853,
	-2, 2049,
	-1, 2561,
	87, 1853,
	160, 1853,
	-2, 2048,
	-1, 2562,
	87, 1829,
	160, 1829,
	-2, 2035,
	-1, 2563,
	87, 1830,
	160, 1830,
	-2, 2040,
	-1, 2564,
	87, 1831,
	160, 1831,
	-2, 1962,
	-1, 2565,
	87, 1832,
	160, 1832,
	-2, 1956,
	-1, 2566,
	87, 1833,
	160, 1833,
	-2, 1883,
	-1, 2567,
	87, 1834,
	160, 1834,
	-2, 2037,
	-1, 2568,
	87, 1835,
	160, 1835,
	-2, 1960,
	-1, 2569,
	87, 1836,
	160, 1836,
	-2, 1955,
	-1, 2570,
	87, 1837,
	160, 1837,
	-2, 1943,
	-1, 2571,
	87, 1853,
	160, 1853,
	-2, 1944,
	-1, 2572,
	87, 1853,
	160, 1853,
	-2, 1945,
	-1, 2574,
	87, 1842,
	160, 1842,
	-2, 2082,
	-1, 2575,
	87, 1819,
	160, 1819,
	-2, 2067,
	-1, 2576,
	87, 1851,
	160, 1851,
	-2, 2038,
	-1, 2577,
	87, 1851,
	160, 1851,
	-2, 2066,
	-1, 2578,
	87, 1851,
	160, 1851,
	-2, 1911,
	-1, 2579,
	87, 1849,
	160, 1849,
	-2, 2057,
	-1, 2580,
	87, 1846,
	160, 1846,
	-2, 1934,
	-1, 2581,
	86, 1800,
	87, 1800,
	160, 1800,
	404, 1800,
	405, 1800,
	406, 1800,
	-2, 1882,
	-1, 2582,
	86, 1801,
	87, 1801,
	160, 1801,
	404, 1801,
	405, 1801,
	406, 1801,
	-2, 1884,
	-1, 2583,
	86, 1802,
	87, 1802,
	160, 1802,
	404, 1802,
	405, 1802,
	406, 1802,
	-2, 2110,
	-1, 2584,
	86, 1804,
	87, 1804,
	160, 1804,
	404, 1804,
	405, 1804,
	406, 1804,
	-2, 2039,
	-1, 2585,
	86, 1806,
	87, 1806,
	160, 1806,
	404, 1806,
	405, 1806,
	406, 1806,
	-2, 2017,
	-1, 2586,
	86, 1808,
	87, 1808,
	160, 1808,
	404, 1808,
	405, 1808,
	406, 1808,
	-2, 1961,
	-1, 2587,
	86, 1810,
	87, 1810,
	160, 1810,
	404, 1810,
	405, 1810,
	406, 1810,
	-2, 1939,
	-1, 2588,
	86, 1811,
	87, 1811,
	160, 1811,
	404, 1811,
	405, 1811,
	406, 1811,
	-2, 1940,
	-1, 2589,
	86, 1813,
	87, 1813,
	160, 1813,
	404, 1813,
	405, 1813,
	406, 1813,
	-2, 1881,
	-1, 2590,
	87, 1856,
	160, 1856,
	404, 1856,
	405, 1856,
	406, 1856,
	-2, 1916,
	-1, 2591,
	87, 1856,
	160, 1856,
	404, 1856,
	405, 1856,
	406, 1856,
	-2, 1930,
	-1, 2592,
	87, 1859,
	160, 1859,
	404, 1859,
	405, 1859,
	406, 1859,
	-2, 1912,
	-1, 2593,
	87, 1859,
	160, 1859,
	404, 1859,
	405, 1859,
	406, 1859,
	-2, 1977,
	-1, 2594,
	87, 1856,
	160, 1856,
	404, 1856,
	405, 1856,
	406, 1856,
	-2, 1999,
	-1, 2812,
	111, 1173,
	155, 1173,
	195, 1173,
	198, 1173,
	288, 1173,
	-2, 1167,
	-1, 2830,
	84, 728,
	160, 728,
	-2, 1351,
	-1, 3259,
	198, 1173,
	312, 1439,
	-2, 1411,
	-1, 3443,
	111, 1173,
	155, 1173,
	195, 1173,
	198, 1173,
	-2, 1291,
	-1, 3445,
	111, 1173,
	155, 1173,
	195, 1173,
	198, 1173,
	-2, 1291,
	-1, 3457,
	84, 728,
	160, 728,
	-2, 1351,
	-1, 3478,
	198, 1173,
	312, 1439,
	-2, 1412,
	-1, 3631,
	111, 1173,
	155, 1173,
	195, 1173,
	198, 1173,
	-2, 1292,
	-1, 3659,
	87, 1253,
	160, 1253,
	-2, 1173,
	-1, 3803,
	87, 1253,
	160, 1253,
	-2, 1173,
	-1, 3966,
	87, 1257,
	160, 1257,
	-2, 1173,
	-1, 4017,
	87, 1258,
	160, 1258,
	-2, 1173,
}

const yyPrivate = 57344

const yyLast = 55050

var yyAct = [...]int{
	777, 753, 4067, 779, 4039, 2861, 223, 4059, 1632, 1995,
	3970, 3976, 3463, 3977, 1711, 3562, 3969, 3278, 3892, 3803,
	3869, 3245, 762, 3850, 3927, 3687, 3352, 3492, 1544, 3781,
	3751, 2855, 3841, 755, 3353, 1323, 1707, 3619, 3802, 1771,
	1476, 3870, 3720, 807, 2858, 3772, 643, 1178, 1055, 3851,
	3566, 2953, 3853, 3557, 3430, 3254, 3425, 1940, 1482, 3640,
	3633, 1758, 1172, 661, 1773, 667, 667, 3628, 3216, 1714,
	2412, 667, 685, 694, 3479, 2833, 694, 3601, 3202, 3178,
	3350, 3446, 2974, 208, 37, 751, 2093, 3205, 2975, 3417,
	2090, 2106, 2950, 2973, 68, 2884, 3274, 3448, 2558, 1776,
	3256, 2129, 2970, 2684, 3042, 2055, 2556, 3263, 2520, 3395,
	2415, 3002, 3318, 2204, 1955, 2801, 2962, 3183, 3179, 3185,
	3262, 2161, 3181, 3180, 1168, 2373, 706, 702, 3225, 2813,
	2341, 2318, 3176, 141, 36, 3150, 1610, 2649, 3090, 745,
	2187, 750, 2317, 1621, 2627, 1537, 1617, 2200, 3016, 2170,
	1869, 2169, 2609, 935, 2162, 1625, 691, 2134, 2790, 2785,
	2886, 2086, 2499, 1441, 2199, 2866, 2413, 1985, 6, 2825,
	976, 2521, 2059, 2372, 1622, 219, 8, 2504, 218, 7,
	1049, 2362, 1916, 1116, 2554, 1705, 2201, 2234, 1772, 754,
	1584, 660, 1408, 1553, 1522, 1516, 2353, 2408, 1954, 643,
	744, 1765, 2356, 1654, 2721, 752, 1194, 2056, 1745, 763,
	1696, 2168, 27, 23, 2165, 1636, 2150, 1591, 1521, 1912,
	1465, 1704, 1710, 223, 1048, 223, 642, 1107, 1108, 2528,
	1915, 676, 1461, 902, 667, 1575, 699, 1777, 1518, 975,
	1087, 1477, 2500, 1014, 708, 1393, 201, 1485, 1486, 209,
	693, 952, 205, 115, 24, 709, 958, 1324, 17, 973,
	1369, 1000, 15, 904, 663, 905, 10, 705, 1255, 1256,
	1257, 1254, 16, 2208, 3860, 3769, 2757, 14, 1255, 1256,
	1257, 1254, 2720, 2757, 690, 2757, 33, 1255, 1256, 1257,
	1254, 2530, 1104, 3460, 3361, 3059, 3232, 1064, 3058, 1173,
	3593, 2218, 1633, 3433, 3345, 1174, 1103, 2672, 1105, 2615,
	2613, 679, 2612, 1882, 2610, 672, 1598, 1594, 1099, 1100,
	207, 662, 1082, 2316, 1388, 1520, 697, 1444, 1445, 1446,
	668, 1034, 3828, 1451, 689, 1362, 1061, 1063, 924, 922,
	3160, 1100, 2322, 2326, 686, 1100, 1391, 1883, 3143, 688,
	3140, 3145, 3142, 4051, 1499, 1647, 1876, 1384, 687, 2749,
	2747, 3555, 3038, 1596, 1173, 3036, 2139, 3836, 3727, 3721,
	206, 64, 197, 168, 3558, 3351, 1098, 1255, 1256, 1257,
	1254, 2184, 3855, 8, 1318, 2164, 7, 903, 3119, 198,
	3482, 2156, 2453, 4073, 1083, 206, 189, 3849, 914, 2363,
	199, 4048, 3952, 2751, 1255, 1256, 1257, 1254, 3735, 3572,
	1253, 1217, 3788, 206, 206, 64, 197, 168, 2819, 140,
	2658, 4005, 1399, 3602, 2205, 3447, 2364, 1631, 3847, 3756,
	2702, 3494, 1640, 206, 126, 206, 206, 3733, 923, 921,
	924, 3903, 746, 202, 3485, 1561, 206, 64, 197, 168,
	1394, 3606, 2666, 206, 1652, 3480, 3789, 1398, 1397, 1396,
	3502, 3503, 1637, 206, 922, 1059, 3481, 1060, 2817, 1077,
	1072, 1067, 1071, 1075, 3117, 1065, 2216, 1416, 1433, 1029,
	1027, 2968, 1028, 1400, 1649, 3062, 1639, 202, 704, 1645,
	206, 64, 197, 168, 2357, 206, 3758, 1080, 2548, 1948,
	1252, 1070, 140, 3486, 1885, 2549, 202, 915, 1651, 202,
	2535, 1644, 3050, 2534, 2776, 919, 2536, 3009, 2820, 202,
	148, 149, 2069, 150, 151, 2772, 202, 2628, 152, 2103,
	3144, 153, 3141, 1523, 1495, 1525, 202, 1496, 1023, 746,
	3010, 3011, 2070, 2071, 140, 1894, 1895, 1473, 1969, 1447,
	1225, 1713, 1078, 1227, 1483, 1484, 206, 64, 197, 168,
	3582, 1081, 1245, 202, 1250, 3949, 3980, 3981, 202, 1677,
	1035, 893, 1058, 892, 894, 895, 1057, 896, 897, 3858,
	2787, 1228, 1481, 1068, 3858, 3941, 1480, 1483, 1484, 2774,
	2788, 3857, 1031, 3856, 167, 195, 204, 196, 124, 1697,
	2769, 3501, 1701, 2416, 3857, 3940, 2305, 1079, 1597, 1595,
	4004, 1415, 1946, 2752, 3839, 3856, 3939, 194, 188, 187,
	3945, 1189, 3249, 3043, 70, 1498, 1700, 2773, 3490, 202,
	3929, 1811, 3932, 206, 64, 197, 168, 3724, 2770, 2786,
	206, 64, 197, 168, 3044, 3247, 3045, 1069, 3954, 3955,
	3487, 3491, 3489, 3488, 4043, 4044, 1033, 2653, 2445, 3354,
	3354, 3950, 3951, 1221, 3929, 667, 667, 3842, 3843, 3844,
	3845, 1183, 2220, 2793, 1192, 2087, 667, 1182, 2905, 1717,
	3866, 1197, 1200, 1197, 1200, 190, 191, 192, 2081, 1223,
	3496, 3497, 3368, 3418, 2494, 2077, 694, 694, 1663, 667,
	3581, 1226, 1229, 1692, 2212, 1186, 202, 3198, 3583, 3423,
	3611, 2488, 1702, 202, 167, 1686, 204, 2352, 200, 964,
	2147, 2777, 703, 3979, 1076, 3504, 3080, 1222, 2750, 2963,
	1604, 1603, 2217, 1032, 3760, 3761, 1699, 194, 3504, 136,
	1110, 1181, 2663, 193, 740, 137, 3556, 742, 1387, 3947,
	3483, 1471, 741, 1947, 1248, 1249, 3495, 2212, 1232, 3078,
	1073, 1233, 1295, 1074, 1417, 691, 691, 691, 2775, 1247,
	1509, 193, 3859, 3768, 3371, 2451, 1243, 1244, 1064, 2771,
	1220, 3084, 3196, 2756, 2101, 2102, 3037, 3192, 1497, 1235,
	2957, 1174, 2490, 1175, 1174, 3399, 3765, 1174, 1716, 1715,
	3714, 2206, 138, 3203, 1224, 3608, 2491, 2492, 2497, 1182,
	2206, 2323, 3060, 2195, 2206, 63, 1884, 1061, 1063, 917,
	1242, 3573, 3057, 659, 2551, 3519, 1723, 1726, 1727, 3277,
	1212, 2239, 3743, 4012, 3744, 1100, 3214, 1724, 3193, 3194,
	1100, 1100, 1327, 2207, 1100, 3226, 692, 3793, 1100, 1100,
	3738, 1064, 3516, 1698, 3195, 3885, 3953, 918, 3275, 3276,
	3787, 3880, 1174, 1084, 65, 1066, 2219, 2826, 2952, 2483,
	696, 1230, 1030, 1328, 1191, 695, 2966, 3251, 692, 2359,
	1199, 1198, 1199, 1198, 2611, 3785, 3500, 3509, 3746, 3151,
	1061, 1063, 3715, 690, 690, 690, 3871, 3887, 1201, 146,
	203, 3464, 147, 3190, 2223, 2225, 2226, 169, 65, 3734,
	903, 1599, 61, 3893, 2856, 2857, 3204, 2860, 2860, 1390,
	3745, 1392, 3246, 3471, 1460, 2748, 3598, 3409, 2418, 1170,
	3280, 3759, 169, 1404, 1177, 1231, 1176, 1407, 1060, 3407,
	65, 1413, 661, 689, 689, 689, 1205, 1206, 3520, 1367,
	169, 169, 1372, 686, 686, 686, 1209, 1646, 688, 688,
	688, 1395, 3499, 1291, 1292, 1293, 1294, 687, 687, 687,
	169, 1211, 169, 169, 1296, 976, 4079, 1472, 139, 45,
	3607, 2667, 2551, 169, 1188, 62, 3167, 1886, 692, 5,
	169, 2792, 1185, 1187, 1190, 2486, 3865, 3678, 920, 2463,
	169, 722, 721, 728, 718, 1483, 1484, 143, 144, 3794,
	2462, 145, 1234, 3569, 725, 726, 2088, 727, 731, 1687,
	203, 712, 1688, 3204, 966, 3199, 967, 169, 1483, 1484,
	667, 736, 169, 1511, 3743, 1237, 3744, 667, 1238, 3946,
	1479, 643, 643, 3667, 1203, 3081, 2964, 3786, 2796, 2797,
	65, 643, 643, 3762, 2431, 1548, 1548, 3673, 667, 1289,
	2411, 2434, 2799, 2795, 4062, 692, 1240, 1533, 2906, 2417,
	2907, 2908, 692, 1725, 2419, 2484, 2485, 1339, 1340, 694,
	1576, 661, 2692, 1458, 1550, 3612, 1587, 2080, 1532, 1457,
	3746, 1546, 1546, 169, 2078, 2805, 2808, 2809, 2810, 2806,
	2807, 223, 1693, 1475, 1474, 1456, 1210, 1555, 3191, 3252,
	643, 1160, 1156, 1157, 1158, 1159, 3894, 2697, 2433, 2696,
	2695, 2693, 3745, 3773, 1024, 3279, 3968, 65, 2420, 3021,
	3022, 1410, 1411, 1414, 65, 3255, 1169, 1420, 1421, 1422,
	1423, 1424, 3807, 1426, 3139, 2454, 3739, 1510, 1236, 1432,
	3740, 2224, 3275, 3276, 3449, 2428, 2411, 3553, 1373, 3357,
	3004, 3006, 1629, 2432, 1409, 1371, 704, 1634, 3212, 1286,
	169, 3926, 1519, 3271, 1643, 3155, 1425, 169, 3688, 3689,
	3690, 3694, 3692, 3693, 3691, 2659, 2540, 1241, 929, 2694,
	1217, 2449, 2209, 2076, 2053, 1406, 2762, 3309, 1542, 1543,
	1419, 2421, 1888, 1675, 3083, 4063, 1431, 1430, 1026, 1429,
	1428, 1025, 1239, 3411, 1467, 1468, 1418, 1548, 1036, 1548,
	1182, 1527, 1529, 1443, 1653, 713, 715, 714, 698, 3680,
	3272, 1540, 1541, 2903, 1440, 3396, 720, 2221, 2222, 933,
	1462, 1466, 1466, 1466, 931, 930, 968, 2643, 724, 1500,
	1501, 1670, 1671, 1638, 1608, 739, 1611, 1612, 1438, 1605,
	1650, 2766, 717, 1064, 1487, 1462, 1462, 1490, 1613, 1614,
	1064, 2330, 1577, 691, 1897, 3806, 691, 691, 2235, 1403,
	1216, 3092, 3091, 965, 1712, 1619, 1620, 1548, 1898, 1685,
	1600, 970, 971, 972, 936, 1642, 3674, 3675, 3669, 1531,
	3591, 3213, 3668, 3157, 1182, 1775, 1024, 1024, 3967, 2332,
	2331, 672, 1562, 1556, 1896, 1627, 1453, 1806, 1807, 1824,
	1810, 932, 2329, 1759, 1568, 2925, 2926, 1588, 1825, 1574,
	2698, 2699, 1624, 2934, 3005, 1628, 2422, 1401, 1402, 4060,
	4061, 1832, 925, 1834, 1674, 1835, 1836, 1837, 3739, 2475,
	1589, 2448, 3852, 1673, 1733, 1734, 1735, 1736, 1737, 1738,
	1739, 1740, 1741, 1742, 1743, 1744, 1709, 926, 3641, 2427,
	1756, 1757, 4081, 2425, 719, 723, 729, 2273, 730, 732,
	2272, 1452, 733, 734, 735, 1452, 1182, 737, 738, 2518,
	1026, 1026, 1887, 1025, 1025, 3358, 1890, 1690, 1892, 1179,
	1661, 690, 1728, 1664, 690, 690, 1899, 1901, 1867, 1902,
	1809, 1904, 1905, 3936, 1179, 3231, 1576, 1683, 2344, 1833,
	1656, 1913, 1548, 1918, 1919, 2763, 1921, 1511, 667, 929,
	1253, 1889, 2355, 667, 4075, 2831, 1548, 3273, 4069, 1706,
	976, 2345, 2346, 1941, 1037, 747, 1255, 1256, 1257, 1254,
	1878, 689, 2924, 1253, 689, 689, 1548, 1870, 1684, 1682,
	1703, 686, 1511, 1681, 686, 686, 688, 685, 1823, 688,
	688, 1678, 4088, 1708, 4057, 687, 3315, 1680, 687, 687,
	928, 2551, 1679, 1694, 3311, 931, 930, 1968, 1754, 1755,
	1747, 2832, 3115, 1217, 2630, 3414, 1975, 1975, 3370, 1511,
	1662, 1511, 1511, 1665, 1666, 667, 667, 2214, 2042, 1913,
	2046, 4070, 4019, 1548, 2050, 2051, 2310, 2519, 2658, 2066,
	3991, 643, 3988, 2519, 1095, 1096, 1097, 3315, 3982, 3284,
	1450, 1255, 1256, 1257, 1254, 643, 3282, 1548, 1459, 3964,
	3149, 1922, 3920, 716, 3147, 1469, 3919, 4020, 1253, 1972,
	2354, 1920, 2128, 1488, 1489, 2519, 1491, 1492, 1094, 1493,
	1215, 1091, 3913, 1368, 667, 1913, 1548, 1997, 2111, 1695,
	667, 667, 667, 702, 702, 1873, 3024, 2245, 2832, 1838,
	2121, 2122, 2123, 2124, 3888, 4020, 2779, 2130, 2935, 2937,
	2938, 2939, 2936, 3992, 223, 3989, 2104, 223, 223, 3876,
	223, 2249, 1868, 2044, 2753, 2648, 2248, 2635, 1214, 1909,
	1910, 1911, 3965, 1978, 1874, 1253, 1814, 1815, 1816, 1253,
	2205, 1924, 1925, 1926, 1927, 907, 908, 909, 910, 1830,
	2068, 3826, 1831, 2096, 2097, 2249, 1255, 1256, 1257, 1254,
	1824, 1824, 2172, 2404, 1917, 3825, 2315, 3820, 2309, 1844,
	1845, 1908, 1824, 1824, 1943, 1944, 2308, 2214, 1933, 2189,
	2082, 2113, 2114, 2115, 2280, 2196, 1101, 1102, 3819, 1866,
	2099, 1106, 3877, 2073, 2391, 2075, 1937, 2138, 1949, 1938,
	2141, 2142, 2247, 2144, 2089, 1215, 2094, 2095, 3818, 1951,
	1977, 1961, 1941, 2110, 2183, 2126, 1548, 2203, 1957, 1979,
	1980, 2067, 3817, 1966, 3827, 1462, 2174, 3797, 2418, 2421,
	3796, 2052, 1217, 1956, 1439, 1958, 1959, 1762, 2377, 1466,
	2249, 1088, 1089, 1090, 1093, 1534, 1092, 1638, 2043, 1965,
	4071, 1466, 3460, 3028, 1064, 2049, 2834, 1064, 1974, 1976,
	3422, 2249, 2661, 2048, 3771, 2072, 1064, 2074, 2054, 2197,
	1504, 1505, 691, 1507, 1508, 3525, 1512, 1513, 1514, 2083,
	3704, 2249, 3473, 3439, 3388, 1255, 1256, 1257, 1254, 3384,
	2660, 2179, 3292, 1061, 1063, 2249, 2652, 912, 1270, 2999,
	2214, 1942, 2739, 2214, 2108, 1061, 1063, 2109, 1706, 2167,
	1563, 1564, 1565, 1566, 1567, 2727, 1569, 1570, 1571, 1572,
	1573, 2167, 2398, 1960, 1579, 1580, 1581, 1582, 2135, 2116,
	2117, 2390, 907, 908, 909, 910, 966, 2249, 967, 1967,
	2268, 2719, 1970, 1971, 2674, 2656, 2418, 2421, 2551, 2644,
	2637, 2632, 2253, 2152, 3523, 3474, 3440, 3389, 2232, 2233,
	2194, 2624, 3385, 1064, 2422, 3293, 2133, 2622, 2620, 2417,
	2411, 2416, 2519, 2414, 2419, 2377, 2119, 947, 2173, 2618,
	2185, 2376, 1941, 2311, 2182, 2406, 2180, 1286, 1253, 2287,
	1658, 961, 1304, 957, 1202, 2193, 1166, 2191, 1161, 2098,
	690, 4082, 1061, 1063, 2320, 2321, 927, 2324, 2286, 3881,
	2327, 3642, 2271, 1559, 1253, 1813, 1812, 1253, 2377, 3236,
	2262, 2333, 2633, 2638, 2633, 2198, 3452, 745, 2420, 3450,
	667, 667, 667, 2211, 2625, 1813, 1812, 2251, 3075, 2303,
	2623, 2619, 1463, 2261, 2260, 667, 667, 667, 667, 938,
	689, 1536, 2619, 3882, 2377, 3643, 2310, 2250, 2374, 2227,
	686, 2213, 1253, 2236, 1667, 688, 3227, 2378, 2379, 2380,
	3453, 2383, 1511, 3451, 687, 4047, 2230, 2231, 2229, 1747,
	2446, 1253, 2422, 1494, 912, 1253, 2241, 2417, 2411, 2416,
	3861, 2414, 2419, 1253, 1839, 1840, 1841, 1842, 1511, 2192,
	1846, 1847, 1848, 1849, 1851, 1852, 1853, 1854, 1855, 1856,
	1857, 1858, 1859, 1860, 1861, 2440, 1253, 1253, 1273, 1274,
	1275, 1276, 1277, 1270, 963, 3770, 956, 1952, 1953, 1850,
	2249, 3343, 3731, 3671, 2214, 960, 959, 1668, 3670, 1448,
	1538, 3656, 3615, 1449, 1962, 1963, 2420, 3228, 3432, 1843,
	3316, 1539, 941, 2395, 3307, 1535, 948, 2397, 934, 2399,
	3299, 1753, 3294, 1464, 1973, 3207, 2447, 2960, 2959, 2610,
	2803, 2228, 2758, 667, 1975, 2671, 955, 1750, 1752, 1749,
	2636, 1751, 2523, 2523, 2066, 2523, 1448, 2304, 2306, 2307,
	1449, 3229, 2542, 2177, 2176, 965, 2175, 1435, 2312, 1434,
	954, 1184, 2681, 2604, 953, 643, 643, 1766, 2136, 2242,
	940, 1766, 2400, 1182, 1903, 1592, 946, 2136, 3029, 1548,
	667, 1257, 1254, 1255, 1256, 1257, 1254, 2338, 3938, 1254,
	3683, 2410, 2409, 667, 3346, 3682, 3046, 2895, 944, 1182,
	2595, 661, 1255, 1256, 1257, 1254, 1327, 1587, 2893, 2066,
	2872, 2870, 2600, 2614, 2602, 2546, 4078, 223, 1255, 1256,
	1257, 1254, 2281, 2282, 3662, 2284, 2403, 3344, 3616, 3617,
	2384, 3973, 2291, 2741, 1306, 2742, 964, 1328, 1064, 1255,
	1256, 1257, 1254, 4053, 2537, 4052, 2538, 1305, 2683, 2527,
	3995, 2525, 3963, 2529, 1828, 3962, 3609, 2640, 1255, 1256,
	1257, 1254, 945, 2559, 3883, 2543, 2544, 2423, 2424, 1829,
	2429, 3420, 2946, 2396, 1258, 2654, 2802, 1061, 1063, 2203,
	2944, 4077, 1288, 3822, 2553, 3810, 1548, 2942, 1548, 2387,
	1548, 1298, 3800, 2531, 2393, 1182, 2931, 2394, 3790, 2954,
	2605, 1466, 3722, 2673, 1278, 1279, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1270, 2599, 3094, 3610, 1307, 1255, 1256,
	1257, 1254, 2650, 2651, 2664, 2493, 3645, 2606, 2498, 1548,
	1182, 3421, 2945, 3587, 2705, 1255, 1256, 1257, 1254, 962,
	2943, 3644, 3465, 2532, 1593, 1527, 1529, 2941, 3426, 2712,
	1255, 1256, 1257, 1254, 1548, 3454, 2930, 2700, 1592, 2668,
	1255, 1256, 1257, 1254, 3419, 1546, 2385, 2386, 3295, 2246,
	3197, 2112, 3431, 2547, 2064, 3071, 2388, 2389, 951, 3041,
	3040, 3184, 2713, 3108, 2929, 2264, 4074, 2677, 2550, 2928,
	1546, 2927, 2596, 1255, 1256, 1257, 1254, 2598, 1255, 1256,
	1257, 1254, 2919, 2760, 2761, 2913, 2912, 2764, 2911, 2716,
	2717, 1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1270, 2685, 1182, 2685, 2910, 2754, 1182, 2626,
	2689, 2539, 2314, 2155, 2711, 1548, 2154, 2153, 1511, 666,
	666, 2714, 2670, 2149, 2046, 674, 3107, 1255, 1256, 1257,
	1254, 2148, 2830, 2105, 2665, 2263, 1893, 1891, 2836, 2679,
	1659, 2837, 1386, 3763, 3764, 2657, 2655, 2646, 4072, 2703,
	1164, 2662, 3563, 1255, 1256, 1257, 1254, 2745, 939, 2847,
	937, 4045, 1255, 1256, 1257, 1254, 4011, 4010, 2780, 1182,
	4007, 3943, 2559, 1255, 1256, 1257, 1254, 2869, 2675, 2676,
	3752, 3924, 3868, 2814, 1182, 1182, 1182, 1975, 1706, 1530,
	1182, 2691, 2879, 2880, 2881, 2882, 1182, 2889, 2701, 2890,
	2891, 2678, 2892, 3620, 2894, 3862, 3846, 3575, 3837, 1163,
	2818, 1255, 1256, 1257, 1254, 2889, 3814, 2815, 740, 2597,
	1064, 742, 3809, 2848, 3808, 1997, 741, 2523, 3767, 2827,
	780, 790, 2800, 2864, 1255, 1256, 1257, 1254, 3754, 3753,
	781, 2947, 782, 786, 789, 785, 783, 784, 2864, 2875,
	2876, 643, 3723, 3664, 2878, 3624, 3613, 3596, 2046, 3594,
	2885, 2850, 1182, 2066, 2066, 2066, 2066, 2066, 2066, 2838,
	3592, 3589, 2782, 3586, 2784, 2392, 3585, 3561, 3559, 1182,
	2066, 3533, 3530, 2523, 3527, 2867, 2951, 2863, 674, 2867,
	3416, 1586, 2781, 3404, 3397, 787, 3381, 2798, 2244, 3007,
	3379, 1548, 2874, 3374, 2835, 2829, 3305, 2821, 3304, 3302,
	3301, 8, 667, 667, 7, 1268, 1278, 1279, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1270, 2976, 3296, 788, 2722,
	2723, 2849, 2852, 3290, 3289, 2728, 3574, 1917, 3208, 2865,
	3171, 3912, 3170, 2976, 2871, 3161, 3159, 4080, 3156, 2877,
	1271, 1272, 1273, 1274, 1275, 1276, 1277, 1270, 3154, 2319,
	3085, 2995, 3082, 1255, 1256, 1257, 1254, 223, 2868, 3061,
	3039, 3014, 223, 3513, 2940, 2909, 1255, 1256, 1257, 1254,
	2932, 3376, 3008, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
	1259, 2922, 2920, 2916, 1824, 2915, 1824, 2914, 2921, 3056,
	1255, 1256, 1257, 1254, 2846, 2767, 2759, 2955, 1255, 1256,
	1257, 1254, 2961, 3070, 2256, 2755, 848, 847, 3025, 1548,
	2647, 2452, 3077, 2334, 2455, 2456, 2457, 2458, 2459, 2460,
	2461, 2958, 2328, 2464, 2465, 2466, 2467, 2468, 2469, 2470,
	2471, 2472, 2473, 2474, 2997, 2476, 2477, 2478, 2479, 2480,
	3030, 2481, 2996, 2992, 2998, 3034, 2325, 2158, 1612, 1718,
	1719, 1720, 1721, 1722, 3015, 3012, 3111, 2151, 1613, 1614,
	2977, 2978, 2979, 2980, 2981, 2982, 1881, 3051, 1870, 1880,
	1660, 2840, 1335, 3055, 1619, 1620, 2843, 1064, 1331, 3063,
	3110, 1330, 1167, 1255, 1256, 1257, 1254, 916, 4033, 1064,
	206, 1763, 197, 168, 3900, 1767, 1768, 1769, 1770, 1627,
	3896, 1255, 1256, 1257, 1254, 1808, 3053, 1255, 1256, 1257,
	1254, 3032, 3748, 1818, 3158, 3031, 1624, 3064, 3747, 1628,
	3736, 3162, 3163, 3164, 3166, 3732, 3168, 3169, 3588, 3079,
	3109, 3570, 3049, 3052, 1182, 3047, 3074, 3054, 3445, 3067,
	3187, 3444, 3066, 3443, 3413, 3065, 3393, 3391, 3390, 3387,
	3201, 3386, 3380, 3378, 3359, 667, 3073, 1255, 1256, 1257,
	1254, 3349, 3348, 202, 2862, 3086, 1871, 3217, 1182, 3087,
	3335, 667, 2738, 1182, 1182, 3334, 3093, 3237, 3174, 3097,
	3098, 2737, 2066, 2374, 3146, 3235, 3113, 3102, 3103, 3099,
	3104, 3101, 3106, 3100, 3096, 3095, 3089, 3023, 2864, 1255,
	1256, 1257, 1254, 3148, 2778, 2440, 2736, 2621, 1255, 1256,
	1257, 1254, 2617, 3211, 2616, 2292, 2285, 3261, 2279, 3264,
	2278, 3264, 3264, 2814, 2277, 2276, 1182, 2274, 2270, 3173,
	2269, 2267, 2864, 1255, 1256, 1257, 1254, 2864, 2864, 3153,
	2258, 2255, 3152, 2735, 3285, 2254, 2157, 1864, 1945, 2734,
	3281, 1863, 1548, 1548, 3220, 1862, 3239, 3189, 1827, 3224,
	3172, 1826, 1064, 1817, 1064, 3248, 3250, 1560, 1508, 1064,
	1255, 1256, 1257, 1254, 1964, 1558, 1255, 1256, 1257, 1254,
	3286, 3287, 206, 4032, 2839, 3994, 3244, 3233, 1546, 1546,
	2864, 3918, 3210, 2844, 2845, 1325, 1064, 3895, 3832, 667,
	3219, 1061, 1063, 3230, 3829, 3222, 3223, 3187, 3234, 666,
	1171, 3816, 3811, 3259, 3717, 3716, 3698, 3910, 2733, 1511,
	1180, 3681, 2046, 2046, 3260, 3269, 2410, 2409, 3243, 3677,
	3655, 3639, 3543, 1871, 792, 142, 3541, 3511, 1871, 1871,
	142, 3265, 3266, 1208, 3270, 1255, 1256, 1257, 1254, 3510,
	3507, 3120, 3121, 2732, 3506, 202, 3472, 3122, 3123, 3124,
	3125, 2789, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133,
	3134, 3135, 3136, 3283, 3469, 1182, 3467, 3434, 3105, 2705,
	1255, 1256, 1257, 1254, 2731, 1607, 1618, 3347, 2137, 2730,
	3291, 2140, 1609, 1623, 2143, 1626, 1615, 2145, 1442, 2948,
	2873, 2823, 2822, 673, 2816, 2783, 142, 2994, 2729, 2740,
	2631, 1255, 1256, 1257, 1254, 3267, 1255, 1256, 1257, 1254,
	2726, 2541, 2482, 3297, 3312, 3313, 3298, 3326, 3303, 2375,
	2347, 3306, 2725, 3310, 667, 1255, 1256, 1257, 1254, 2559,
	2313, 1748, 3323, 202, 3324, 3908, 2724, 1255, 1256, 1257,
	1254, 2118, 1907, 2188, 3300, 1877, 2901, 2902, 1691, 1255,
	1256, 1257, 1254, 3328, 1641, 3331, 3332, 3333, 1616, 1385,
	1370, 2917, 2918, 1255, 1256, 1257, 1254, 1366, 1365, 1364,
	1363, 3337, 1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1270, 1362, 1361, 1360, 2956, 1359, 1358,
	1357, 2275, 1356, 1355, 1354, 1353, 1352, 2130, 3401, 1351,
	1350, 3403, 1349, 1348, 1347, 3405, 1436, 2718, 1346, 1345,
	3410, 3363, 3360, 3238, 1344, 1343, 1342, 1341, 3240, 3241,
	3801, 1338, 1337, 1336, 3362, 3382, 1334, 1062, 3367, 1333,
	1332, 1329, 142, 2685, 1255, 1256, 1257, 1254, 3372, 3366,
	2708, 1322, 1321, 1319, 667, 2046, 1318, 142, 2238, 142,
	1317, 1316, 2243, 1315, 1314, 3438, 1313, 3406, 1312, 3408,
	2252, 1311, 3325, 2704, 1310, 1309, 1308, 1255, 1256, 1257,
	1254, 2523, 2066, 3457, 1269, 1268, 1278, 1279, 1271, 1272,
	1273, 1274, 1275, 1276, 1277, 1270, 2680, 1303, 1302, 3394,
	1255, 1256, 1257, 1254, 1301, 1300, 3475, 2259, 3400, 1182,
	3412, 1299, 3398, 1219, 1165, 2266, 3906, 3415, 3261, 3508,
	1064, 2382, 1182, 1255, 1256, 1257, 1254, 1064, 3319, 3320,
	2361, 1207, 4025, 1182, 4023, 3522, 3978, 2283, 3322, 1548,
	2804, 2552, 2288, 2289, 2290, 3427, 2160, 2293, 2294, 2295,
	2296, 2297, 2298, 2299, 2300, 2301, 2302, 3429, 3314, 1218,
	667, 3459, 2046, 2989, 2987, 2985, 1182, 3524, 2990, 2988,
	3498, 1761, 2993, 3476, 1506, 1546, 2984, 2986, 2983, 3327,
	3505, 1517, 3937, 3466, 3848, 3468, 3515, 3456, 3660, 3455,
	2991, 3462, 2513, 2514, 2645, 223, 2634, 2885, 1255, 1256,
	1257, 1254, 1554, 3206, 125, 3069, 67, 66, 1182, 1935,
	1936, 3257, 3537, 3258, 2450, 3534, 3545, 3364, 3365, 3517,
	2501, 3514, 3547, 3518, 3546, 3512, 3338, 2035, 3521, 1601,
	2976, 1930, 1931, 1932, 2629, 2669, 3526, 1655, 3529, 1635,
	2897, 3531, 2650, 2651, 3532, 3528, 3242, 2898, 2899, 2900,
	3590, 3535, 2335, 3539, 3538, 3536, 2120, 2508, 2512, 2513,
	2514, 2509, 2517, 2510, 2515, 1182, 1213, 2511, 3568, 2516,
	3182, 3175, 2976, 669, 3544, 670, 671, 2851, 3554, 2824,
	2402, 2370, 1939, 1906, 4036, 1182, 1548, 1548, 1813, 1812,
	3564, 3217, 1381, 1382, 3565, 1379, 1380, 1377, 1378, 1375,
	1376, 3813, 3288, 3632, 2495, 3632, 2489, 2047, 1503, 3595,
	1502, 3597, 1246, 2178, 3622, 3330, 3017, 2337, 1182, 3649,
	1182, 2336, 1546, 1759, 3621, 3626, 3627, 2190, 1455, 2864,
	1454, 1427, 3652, 1478, 3654, 4001, 3340, 1548, 3999, 3956,
	3934, 3933, 3931, 3605, 3604, 3603, 3872, 3833, 3623, 3712,
	3711, 3650, 3560, 3383, 3356, 667, 3614, 1182, 1182, 3625,
	3600, 1182, 1182, 3637, 3636, 3355, 3341, 2435, 2405, 1871,
	2174, 1871, 3648, 1759, 1657, 3027, 1452, 3402, 3629, 3072,
	3658, 3700, 1712, 3459, 1712, 3695, 4027, 4026, 1064, 3498,
	1871, 1871, 1941, 2765, 3709, 2363, 3685, 3686, 3665, 3505,
	3696, 3697, 3653, 3661, 2257, 1389, 3718, 3719, 3657, 1204,
	4026, 4027, 3679, 3336, 1179, 210, 3, 3458, 3663, 1548,
	1470, 75, 1586, 2, 4049, 4050, 3461, 1, 3706, 907,
	908, 909, 910, 1797, 1179, 2746, 1875, 3705, 1383, 911,
	906, 1524, 3749, 2533, 2100, 1552, 1879, 3730, 913, 3707,
	3000, 3001, 3701, 3742, 3329, 1546, 1269, 1268, 1278, 1279,
	1271, 1272, 1273, 1274, 1275, 1276, 1277, 1270, 3003, 3725,
	2768, 2639, 2210, 2642, 2965, 2487, 3729, 2351, 3200, 1437,
	3737, 969, 1819, 3741, 1672, 976, 1196, 1669, 1195, 1193,
	3782, 3776, 1764, 794, 3549, 2163, 2949, 2923, 3708, 4035,
	3755, 4066, 3993, 4038, 1689, 778, 1182, 3925, 3838, 3997,
	3840, 3576, 3728, 3577, 2215, 142, 142, 142, 1062, 3805,
	3799, 3766, 1251, 3048, 996, 835, 805, 1320, 1648, 3118,
	3116, 804, 3777, 3779, 3424, 3568, 3584, 3778, 2682, 2794,
	3713, 2688, 3020, 3784, 3791, 3795, 997, 2146, 3835, 1182,
	3726, 1602, 2706, 2707, 1548, 1606, 2401, 3792, 3891, 3659,
	2709, 2710, 3253, 2859, 1630, 3774, 3886, 3651, 3470, 3580,
	1712, 3578, 1923, 3812, 3579, 1064, 2715, 1928, 710, 2079,
	641, 1046, 3823, 3699, 2159, 711, 2381, 3948, 3821, 3815,
	1546, 1287, 2508, 2512, 2513, 2514, 2509, 2517, 2510, 2515,
	949, 1793, 2511, 2360, 2516, 1718, 1871, 3864, 1790, 950,
	942, 3854, 1792, 1789, 1791, 1795, 1796, 2812, 3834, 2811,
	1794, 1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1270, 1729, 1260, 3873, 1746, 3137, 3138, 3646,
	3647, 1297, 749, 2240, 2791, 3493, 3013, 74, 73, 1981,
	1982, 72, 71, 231, 796, 230, 3750, 3867, 3618, 3921,
	4040, 775, 774, 3890, 773, 772, 771, 1182, 770, 2506,
	2507, 3875, 2505, 2503, 2502, 1548, 2061, 2060, 3915, 3026,
	3339, 2125, 3884, 3922, 2127, 3215, 2841, 2842, 3905, 3907,
	3909, 3911, 3889, 2888, 2883, 1986, 1984, 1515, 3898, 3923,
	2430, 2437, 1983, 3914, 3975, 3373, 3904, 3571, 2107, 3901,
	3902, 1546, 3676, 2933, 2107, 2107, 2107, 3567, 1929, 2426,
	3435, 3436, 3437, 3930, 3928, 1548, 3441, 3442, 3782, 2003,
	2904, 2000, 1999, 2896, 3672, 3666, 2031, 3780, 3631, 3477,
	1374, 3942, 3478, 3484, 3966, 2369, 1115, 1111, 1113, 1114,
	3974, 1112, 2690, 3958, 3957, 3308, 2407, 3959, 3177, 3114,
	2343, 1546, 3960, 3961, 1800, 1801, 1802, 1803, 1804, 1805,
	1798, 1799, 2342, 2340, 2339, 1412, 3863, 3990, 3944, 3599,
	2557, 2555, 3983, 1162, 3984, 3321, 3985, 3317, 3986, 2171,
	2186, 3987, 3068, 2062, 2058, 2057, 1086, 4000, 1085, 4002,
	4003, 1583, 2967, 3998, 3996, 2496, 3757, 1182, 1934, 943,
	2358, 3854, 4006, 1269, 1268, 1278, 1279, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1270, 109, 3805, 1871, 41, 4015,
	122, 108, 185, 59, 4016, 4018, 4017, 184, 58, 4024,
	4022, 4021, 120, 4034, 182, 4042, 57, 2032, 4041, 103,
	102, 119, 1993, 180, 4028, 4029, 4030, 4031, 56, 215,
	214, 217, 216, 4054, 213, 1182, 2607, 4046, 2608, 3830,
	3831, 4013, 212, 1590, 211, 3935, 3635, 3890, 4056, 4055,
	3917, 4058, 901, 2035, 2002, 4064, 44, 43, 4068, 186,
	42, 4065, 110, 2036, 2037, 1557, 60, 40, 39, 673,
	38, 34, 13, 12, 35, 22, 3033, 21, 3035, 1676,
	20, 26, 4076, 32, 31, 135, 134, 30, 133, 2001,
	132, 4042, 4084, 131, 4041, 4083, 130, 1871, 129, 1712,
	128, 127, 1871, 4068, 4085, 142, 29, 2009, 19, 4089,
	51, 50, 49, 48, 2188, 47, 46, 9, 123, 118,
	116, 206, 64, 197, 168, 28, 117, 114, 113, 112,
	111, 106, 104, 86, 1281, 85, 1285, 84, 99, 98,
	198, 97, 96, 95, 94, 92, 93, 189, 995, 3088,
	83, 199, 1282, 1284, 1280, 82, 1283, 1269, 1268, 1278,
	1279, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1270, 81,
	140, 80, 79, 142, 101, 2025, 107, 3112, 105, 90,
	142, 100, 91, 89, 88, 126, 2237, 87, 78, 77,
	76, 166, 165, 142, 202, 164, 142, 142, 3702, 163,
	162, 160, 3703, 161, 159, 158, 157, 156, 155, 142,
	1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1270, 154, 52, 2348, 2349, 2350, 53, 2032, 54,
	55, 176, 175, 177, 179, 206, 181, 178, 183, 2365,
	2366, 2367, 2368, 173, 171, 174, 172, 170, 69, 1992,
	1994, 1991, 11, 121, 1988, 18, 25, 4, 3630, 2013,
	0, 0, 0, 0, 2035, 0, 0, 0, 0, 0,
	2019, 148, 149, 0, 150, 151, 0, 0, 2004, 152,
	1987, 0, 153, 0, 0, 0, 0, 0, 0, 0,
	2007, 2041, 0, 0, 2008, 2010, 2012, 0, 2014, 2015,
	2016, 2020, 2021, 2022, 2024, 2027, 2028, 2029, 202, 0,
	0, 0, 0, 0, 0, 2017, 2026, 2018, 2009, 0,
	0, 0, 0, 0, 0, 0, 0, 1996, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3268,
	0, 0, 0, 0, 0, 167, 195, 204, 196, 124,
	0, 2033, 1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274,
	1275, 1276, 1277, 1270, 0, 0, 0, 1517, 194, 188,
	187, 0, 0, 0, 0, 70, 0, 984, 1989, 1990,
	0, 0, 0, 3824, 0, 0, 2025, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2030, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2006, 1554, 0, 0, 0, 0, 0,
	2005, 0, 0, 0, 0, 0, 0, 2107, 0, 0,
	0, 0, 0, 0, 0, 0, 190, 191, 192, 0,
	0, 0, 0, 0, 2023, 0, 0, 0, 0, 980,
	981, 0, 0, 2011, 0, 0, 3874, 0, 0, 0,
	1024, 3878, 3879, 0, 0, 0, 2039, 2038, 0, 200,
	2013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2019, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 3899, 0, 193, 0, 137, 0, 0, 0,
	0, 2007, 2041, 0, 0, 2008, 2010, 2012, 0, 2014,
	2015, 2016, 2020, 2021, 2022, 2024, 2027, 2028, 2029, 1998,
	0, 0, 0, 2065, 0, 0, 2017, 2026, 2018, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1026, 0, 0, 1025, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 2034, 2033, 0, 2040, 0, 63, 0, 0, 0,
	0, 0, 0, 0, 3375, 0, 0, 0, 0, 0,
	0, 3377, 0, 0, 0, 0, 1010, 0, 0, 0,
	0, 0, 0, 0, 0, 985, 0, 0, 142, 0,
	0, 142, 142, 0, 142, 0, 0, 2030, 0, 0,
	0, 0, 0, 3392, 0, 65, 0, 0, 0, 0,
	0, 0, 987, 0, 2006, 0, 0, 0, 4008, 4009,
	0, 2005, 0, 0, 0, 0, 0, 0, 2032, 0,
	0, 0, 0, 1993, 1062, 0, 0, 142, 0, 0,
	146, 203, 0, 147, 0, 2023, 1062, 0, 169, 0,
	0, 0, 0, 61, 2011, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 2035, 2002, 0, 0, 0, 0,
	0, 0, 0, 0, 2036, 2037, 2828, 1009, 1007, 0,
	0, 1255, 1256, 1257, 1254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1006,
	2001, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 979, 0, 0, 0, 0, 1797, 0, 2009, 139,
	45, 0, 986, 1019, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1287, 0, 0, 1015, 0, 143, 144,
	0, 0, 145, 0, 0, 0, 1871, 0, 0, 0,
	0, 1797, 3634, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1871, 0, 0, 3540, 0, 0, 3542, 0,
	0, 0, 1016, 1020, 0, 0, 2025, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3548, 0, 0, 0,
	0, 0, 1003, 0, 1001, 1005, 1023, 0, 0, 0,
	1002, 999, 998, 0, 1004, 989, 990, 988, 991, 992,
	993, 994, 0, 1021, 0, 1022, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1017, 1018, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3018, 3019, 0, 0,
	1992, 2854, 1991, 0, 0, 2853, 0, 0, 0, 0,
	2013, 0, 0, 1013, 0, 0, 0, 0, 0, 1012,
	0, 2019, 0, 0, 1793, 0, 0, 0, 0, 0,
	0, 1790, 0, 0, 1008, 1792, 1789, 1791, 1795, 1796,
	0, 2007, 2041, 1794, 0, 2008, 2010, 2012, 0, 2014,
	2015, 2016, 2020, 2021, 2022, 2024, 2027, 2028, 2029, 0,
	0, 0, 0, 0, 0, 0, 2017, 2026, 2018, 1793,
	0, 0, 0, 0, 0, 0, 1790, 0, 1996, 0,
	1792, 1789, 1791, 1795, 1796, 0, 0, 0, 1794, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1011, 0, 0, 0, 0, 0, 982, 983,
	977, 0, 0, 0, 0, 978, 0, 0, 0, 1989,
	1990, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2030, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2006, 0, 0, 0, 0, 0,
	0, 2005, 0, 0, 1134, 0, 1778, 1779, 1780, 1781,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1800, 1801, 1802,
	1803, 1804, 1805, 1798, 1799, 2023, 0, 0, 2526, 0,
	0, 0, 0, 0, 2011, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2039, 2038, 0,
	0, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
	1787, 1788, 1800, 1801, 1802, 1803, 1804, 1805, 1798, 1799,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2065, 1134, 3221, 0, 0, 0, 0,
	1998, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2034, 0, 0, 2040, 0, 0, 0, 1142,
	1146, 1148, 1150, 1152, 1153, 1155, 0, 1160, 1156, 1157,
	1158, 1159, 0, 1137, 1138, 1139, 1140, 1117, 1118, 1143,
	0, 1120, 1307, 1122, 1123, 1124, 1125, 1121, 1126, 1127,
	1128, 1129, 1130, 1133, 1135, 1131, 1132, 1141, 0, 0,
	0, 0, 0, 0, 0, 1145, 1147, 1149, 1151, 1154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 0, 1109, 2107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1136, 0, 3897, 0, 1142,
	1146, 1148, 1150, 1152, 1153, 1155, 0, 1160, 1156, 1157,
	1158, 1159, 0, 1137, 1138, 1139, 1140, 1117, 1118, 1143,
	1134, 1120, 0, 1122, 1123, 1124, 1125, 1121, 1126, 1127,
	1128, 1129, 1130, 1133, 1135, 1131, 1132, 1141, 722, 721,
	728, 718, 0, 0, 0, 1145, 1147, 1149, 1151, 1154,
	0, 725, 726, 0, 727, 731, 0, 0, 712, 0,
	0, 0, 722, 721, 728, 718, 0, 0, 736, 0,
	0, 0, 0, 0, 0, 725, 726, 0, 727, 731,
	0, 3971, 712, 0, 0, 1136, 0, 0, 0, 0,
	142, 0, 736, 0, 0, 0, 0, 0, 2032, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 742, 3369, 0,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2035, 0, 2686, 2687, 740, 0,
	0, 742, 0, 0, 1119, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 3971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1142, 1146, 1148, 1150, 1152,
	1153, 1155, 0, 1160, 1156, 1157, 1158, 1159, 3804, 1137,
	1138, 1139, 1140, 1117, 1118, 1143, 0, 1120, 2009, 1122,
	1123, 1124, 1125, 1121, 1126, 1127, 1128, 1129, 1130, 1133,
	1135, 1131, 1132, 1141, 0, 0, 3971, 0, 0, 0,
	0, 1145, 1147, 1149, 1151, 1154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2065, 2065, 2065,
	2065, 2065, 2065, 0, 0, 0, 0, 0, 2107, 0,
	0, 0, 0, 0, 2065, 0, 0, 0, 0, 0,
	0, 1136, 0, 0, 0, 0, 2025, 0, 0, 0,
	0, 0, 713, 715, 714, 0, 0, 0, 4087, 0,
	0, 0, 0, 720, 0, 0, 0, 0, 0, 0,
	1144, 0, 0, 0, 2032, 724, 713, 715, 714, 0,
	0, 0, 739, 0, 0, 0, 0, 720, 0, 717,
	0, 0, 0, 707, 0, 0, 0, 0, 0, 724,
	0, 0, 0, 0, 0, 0, 739, 0, 0, 0,
	2035, 0, 0, 717, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 142, 0, 0, 0,
	2013, 0, 0, 0, 2107, 0, 0, 0, 0, 0,
	0, 2019, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 2032, 0, 0, 142,
	1144, 2007, 2041, 0, 2009, 2008, 2010, 2012, 0, 2014,
	2015, 2016, 2020, 2021, 2022, 2024, 2027, 2028, 2029, 0,
	0, 0, 0, 0, 0, 0, 2017, 2026, 2018, 0,
	0, 0, 2035, 0, 0, 0, 0, 0, 0, 0,
	0, 719, 723, 729, 0, 730, 732, 0, 0, 733,
	734, 735, 0, 0, 737, 738, 0, 0, 0, 0,
	0, 0, 2033, 0, 0, 719, 723, 729, 3775, 730,
	732, 0, 2025, 733, 734, 735, 0, 0, 737, 738,
	0, 0, 0, 0, 0, 0, 2009, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2030, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2006, 0, 0, 0, 0, 0,
	0, 2005, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2025, 2023, 2013, 0, 0, 0,
	0, 0, 0, 0, 2011, 0, 1144, 2019, 0, 3684,
	0, 0, 1062, 0, 142, 0, 0, 0, 0, 142,
	0, 0, 0, 0, 0, 0, 2065, 2007, 2041, 0,
	0, 2008, 2010, 2012, 0, 2014, 2015, 2016, 2020, 2021,
	2022, 2024, 2027, 2028, 2029, 0, 142, 0, 0, 0,
	716, 0, 2017, 2026, 2018, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 716, 0, 0, 0, 2013, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2033, 2019,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2007,
	2041, 0, 3638, 2008, 2010, 2012, 0, 2014, 2015, 2016,
	2020, 2021, 2022, 2024, 2027, 2028, 2029, 0, 0, 0,
	0, 0, 0, 2030, 2017, 2026, 2018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2006, 0, 0, 0, 0, 0, 0, 2005, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2033, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2023, 0, 0, 0, 0, 0, 0, 0, 0,
	2011, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2006, 0, 0, 0, 0, 0, 0, 2005,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2023, 0, 0, 0, 0, 0, 0,
	0, 0, 2011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	3638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 397, 0,
	0, 527, 560, 549, 633, 515, 2065, 0, 0, 0,
	0, 0, 764, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 803, 563, 514,
	429, 381, 581, 580, 0, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 756, 0, 0, 793, 848, 847, 780, 790, 0,
	0, 309, 229, 509, 629, 511, 510, 781, 0, 782,
	786, 789, 785, 783, 784, 0, 863, 0, 0, 0,
	0, 0, 0, 748, 760, 0, 765, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 142,
	757, 758, 0, 0, 0, 0, 813, 0, 759, 0,
	0, 808, 787, 791, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 788, 811, 815, 330, 886,
	809, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 887, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 622,
	806, 0, 626, 0, 465, 0, 0, 870, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 810, 0,
	418, 399, 883, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 1821, 1820, 1822, 477,
	364, 365, 0, 343, 291, 292, 650, 867, 395, 591,
	624, 625, 516, 0, 882, 862, 864, 865, 869, 873,
	874, 875, 876, 877, 879, 881, 885, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 884, 551,
	528, 554, 469, 531, 530, 142, 0, 565, 814, 566,
	567, 385, 386, 387, 388, 871, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 893, 866, 892, 894, 895, 891,
	896, 897, 878, 769, 0, 821, 889, 888, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 776, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 855, 828, 829, 830, 766, 831, 825, 826,
	767, 827, 856, 819, 852, 853, 795, 822, 832, 851,
	833, 854, 857, 858, 898, 899, 839, 823, 257, 900,
	836, 859, 850, 849, 834, 820, 860, 861, 802, 797,
	837, 838, 824, 843, 844, 845, 768, 816, 817, 818,
	840, 841, 798, 799, 800, 801, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 846, 634, 433, 434, 0, 842, 637, 638,
	635, 371, 420, 439, 427, 812, 651, 512, 513, 652,
	623, 0, 761, 0, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 764, 0,
	0, 0, 336, 1872, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 803, 563, 514, 429, 381, 581, 580,
	0, 0, 872, 880, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 2091, 0, 0, 756, 0, 0,
	793, 848, 847, 780, 790, 0, 0, 309, 229, 509,
	629, 511, 510, 781, 0, 782, 786, 789, 785, 783,
	784, 0, 863, 0, 0, 0, 0, 0, 0, 748,
	760, 0, 765, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 758, 0, 0,
	0, 0, 813, 0, 759, 0, 0, 2092, 787, 791,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 788, 811, 815, 330, 886, 809, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 887, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 806, 0, 626, 0,
	465, 0, 0, 870, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 810, 0, 418, 399, 883, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 867, 395, 591, 624, 625, 516, 0,
	882, 862, 864, 865, 869, 873, 874, 875, 876, 877,
	879, 881, 885, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 884, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 814, 566, 567, 385, 386, 387,
	388, 871, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	893, 866, 892, 894, 895, 891, 896, 897, 878, 769,
	0, 821, 889, 888, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 776, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 855, 828,
	829, 830, 766, 831, 825, 826, 767, 827, 856, 819,
	852, 853, 795, 822, 832, 851, 833, 854, 857, 858,
	898, 899, 839, 823, 257, 900, 836, 859, 850, 849,
	834, 820, 860, 861, 802, 797, 837, 838, 824, 843,
	844, 845, 768, 816, 817, 818, 840, 841, 798, 799,
	800, 801, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 846, 634,
	433, 434, 0, 842, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 0, 761, 206,
	812, 0, 0, 0, 0, 0, 0, 0, 0, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 1290, 563,
	514, 429, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 756, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 229, 509, 629, 511, 510, 781, 0,
	782, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 748, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 0, 0, 0, 0, 813, 0, 759,
	0, 0, 808, 787, 791, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 418, 399, 883, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 776, 293, 522, 367, 169, 410, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 257,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 433, 434, 0, 842, 637,
	638, 635, 371, 420, 439, 427, 812, 651, 512, 513,
	652, 623, 0, 761, 0, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 764,
	0, 0, 0, 336, 4086, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 803, 563, 514, 429, 381, 581,
	580, 0, 0, 872, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 756, 0,
	0, 793, 848, 847, 780, 790, 0, 0, 309, 229,
	509, 629, 511, 510, 781, 0, 782, 786, 789, 785,
	783, 784, 0, 863, 0, 0, 0, 0, 0, 0,
	748, 760, 0, 765, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 757, 758, 0,
	0, 0, 0, 813, 0, 759, 0, 0, 808, 787,
	791, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 788, 811, 815, 330, 886, 809, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 887, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 806, 0, 626,
	0, 465, 0, 0, 870, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 810, 0, 418, 399, 883,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 867, 395, 591, 624, 625, 516,
	0, 882, 862, 864, 865, 869, 873, 874, 875, 876,
	877, 879, 881, 885, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 884, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 814, 566, 567, 385, 386,
	387, 388, 871, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 893, 866, 892, 894, 895, 891, 896, 897, 878,
	769, 0, 821, 889, 888, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 776, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 855,
	828, 829, 830, 766, 831, 825, 826, 767, 827, 856,
	819, 852, 853, 795, 822, 832, 851, 833, 854, 857,
	858, 898, 899, 839, 823, 257, 900, 836, 859, 850,
	849, 834, 820, 860, 861, 802, 797, 837, 838, 824,
	843, 844, 845, 768, 816, 817, 818, 840, 841, 798,
	799, 800, 801, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 846,
	634, 433, 434, 0, 842, 637, 638, 635, 371, 420,
	439, 427, 812, 651, 512, 513, 652, 623, 0, 761,
	0, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 764, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	803, 563, 514, 429, 381, 581, 580, 0, 0, 872,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 756, 0, 0, 793, 848, 847,
	780, 790, 0, 0, 309, 229, 509, 629, 511, 510,
	781, 0, 782, 786, 789, 785, 783, 784, 0, 863,
	0, 0, 0, 0, 0, 0, 748, 760, 0, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 757, 758, 0, 0, 0, 0, 813,
	0, 759, 0, 0, 808, 787, 791, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 788, 811,
	815, 330, 886, 809, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	887, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 806, 0, 626, 0, 465, 0, 0,
	870, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 810, 0, 418, 399, 883, 3972, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	867, 395, 591, 624, 625, 516, 0, 882, 862, 864,
	865, 869, 873, 874, 875, 876, 877, 879, 881, 885,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 884, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 814, 566, 567, 385, 386, 387, 388, 871, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 893, 866, 892,
	894, 895, 891, 896, 897, 878, 769, 0, 821, 889,
	888, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 776, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 855, 828, 829, 830, 766,
	831, 825, 826, 767, 827, 856, 819, 852, 853, 795,
	822, 832, 851, 833, 854, 857, 858, 898, 899, 839,
	823, 257, 900, 836, 859, 850, 849, 834, 820, 860,
	861, 802, 797, 837, 838, 824, 843, 844, 845, 768,
	816, 817, 818, 840, 841, 798, 799, 800, 801, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 846, 634, 433, 434, 0,
	842, 637, 638, 635, 371, 420, 439, 427, 812, 651,
	512, 513, 652, 623, 0, 761, 0, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 336, 1872, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 803, 563, 514, 429,
	381, 581, 580, 0, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	756, 0, 0, 793, 848, 847, 780, 790, 0, 0,
	309, 229, 509, 629, 511, 510, 781, 0, 782, 786,
	789, 785, 783, 784, 0, 863, 0, 0, 0, 0,
	0, 0, 748, 760, 0, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	758, 0, 0, 0, 0, 813, 0, 759, 0, 0,
	808, 787, 791, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 788, 811, 815, 330, 886, 809,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 887, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 806,
	0, 626, 0, 465, 0, 0, 870, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 810, 0, 418,
	399, 883, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 867, 395, 591, 624,
	625, 516, 0, 882, 862, 864, 865, 869, 873, 874,
	875, 876, 877, 879, 881, 885, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 884, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 814, 566, 567,
	385, 386, 387, 388, 871, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 893, 866, 892, 894, 895, 891, 896,
	897, 878, 769, 0, 821, 889, 888, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	776, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 855, 828, 829, 830, 766, 831, 825, 826, 767,
	827, 856, 819, 852, 853, 795, 822, 832, 851, 833,
	854, 857, 858, 898, 899, 839, 823, 257, 900, 836,
	859, 850, 849, 834, 820, 860, 861, 802, 797, 837,
	838, 824, 843, 844, 845, 768, 816, 817, 818, 840,
	841, 798, 799, 800, 801, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 846, 634, 433, 434, 0, 842, 637, 638, 635,
	371, 420, 439, 427, 812, 651, 512, 513, 652, 623,
	0, 761, 0, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 803, 563, 514, 429, 381, 581, 580, 0,
	0, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 756, 0, 0, 793,
	848, 847, 780, 790, 0, 0, 309, 229, 509, 629,
	511, 510, 781, 0, 782, 786, 789, 785, 783, 784,
	0, 863, 0, 0, 0, 0, 0, 0, 748, 760,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 758, 1585, 0, 0,
	0, 813, 0, 759, 0, 0, 808, 787, 791, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	788, 811, 815, 330, 886, 809, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 887, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 806, 0, 626, 0, 465,
	0, 0, 870, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 810, 0, 418, 399, 883, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 867, 395, 591, 624, 625, 516, 0, 882,
	862, 864, 865, 869, 873, 874, 875, 876, 877, 879,
	881, 885, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 884, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 814, 566, 567, 385, 386, 387, 388,
	871, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 893,
	866, 892, 894, 895, 891, 896, 897, 878, 769, 0,
	821, 889, 888, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 776, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 855, 828, 829,
	830, 766, 831, 825, 826, 767, 827, 856, 819, 852,
	853, 795, 822, 832, 851, 833, 854, 857, 858, 898,
	899, 839, 823, 257, 900, 836, 859, 850, 849, 834,
	820, 860, 861, 802, 797, 837, 838, 824, 843, 844,
	845, 768, 816, 817, 818, 840, 841, 798, 799, 800,
	801, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 846, 634, 433,
	434, 0, 842, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 812, 761, 0, 2265,
	0, 0, 0, 0, 0, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 764,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 803, 563, 514, 429, 381, 581,
	580, 0, 0, 872, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 756, 0,
	0, 793, 848, 847, 780, 790, 0, 0, 309, 229,
	509, 629, 511, 510, 781, 0, 782, 786, 789, 785,
	783, 784, 0, 863, 0, 0, 0, 0, 0, 0,
	748, 760, 0, 765, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 757, 758, 0,
	0, 0, 0, 813, 0, 759, 0, 0, 808, 787,
	791, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 788, 811, 815, 330, 886, 809, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 887, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 806, 0, 626,
	0, 465, 0, 0, 870, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 810, 0, 418, 399, 883,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 867, 395, 591, 624, 625, 516,
	0, 882, 862, 864, 865, 869, 873, 874, 875, 876,
	877, 879, 881, 885, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 884, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 814, 566, 567, 385, 386,
	387, 388, 871, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 893, 866, 892, 894, 895, 891, 896, 897, 878,
	769, 0, 821, 889, 888, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 776, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 855,
	828, 829, 830, 766, 831, 825, 826, 767, 827, 856,
	819, 852, 853, 795, 822, 832, 851, 833, 854, 857,
	858, 898, 899, 839, 823, 257, 900, 836, 859, 850,
	849, 834, 820, 860, 861, 802, 797, 837, 838, 824,
	843, 844, 845, 768, 816, 817, 818, 840, 841, 798,
	799, 800, 801, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 846,
	634, 433, 434, 0, 842, 637, 638, 635, 371, 420,
	439, 427, 812, 651, 512, 513, 652, 623, 0, 761,
	0, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 764, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	803, 563, 514, 429, 381, 581, 580, 0, 0, 872,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 756, 0, 0, 793, 848, 847,
	780, 790, 0, 0, 309, 229, 509, 629, 511, 510,
	781, 0, 782, 786, 789, 785, 783, 784, 0, 863,
	0, 0, 0, 0, 0, 0, 748, 760, 0, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 757, 758, 1865, 0, 0, 0, 813,
	0, 759, 0, 0, 808, 787, 791, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 788, 811,
	815, 330, 886, 809, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	887, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 806, 0, 626, 0, 465, 0, 0,
	870, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 810, 0, 418, 399, 883, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	867, 395, 591, 624, 625, 516, 0, 882, 862, 864,
	865, 869, 873, 874, 875, 876, 877, 879, 881, 885,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 884, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 814, 566, 567, 385, 386, 387, 388, 871, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 893, 866, 892,
	894, 895, 891, 896, 897, 878, 769, 0, 821, 889,
	888, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 776, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 855, 828, 829, 830, 766,
	831, 825, 826, 767, 827, 856, 819, 852, 853, 795,
	822, 832, 851, 833, 854, 857, 858, 898, 899, 839,
	823, 257, 900, 836, 859, 850, 849, 834, 820, 860,
	861, 802, 797, 837, 838, 824, 843, 844, 845, 768,
	816, 817, 818, 840, 841, 798, 799, 800, 801, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 846, 634, 433, 434, 0,
	842, 637, 638, 635, 371, 420, 439, 427, 812, 651,
	512, 513, 652, 623, 0, 761, 0, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 803, 563, 514, 429,
	381, 581, 580, 0, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	756, 0, 0, 793, 848, 847, 780, 790, 0, 0,
	309, 229, 509, 629, 511, 510, 781, 0, 782, 786,
	789, 785, 783, 784, 0, 863, 0, 0, 0, 0,
	0, 0, 748, 760, 0, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	758, 0, 0, 0, 0, 813, 0, 759, 0, 0,
	808, 787, 791, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 788, 811, 815, 330, 886, 809,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 887, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 806,
	0, 626, 0, 465, 0, 0, 870, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 810, 0, 418,
	399, 883, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 867, 395, 591, 624,
	625, 516, 0, 882, 862, 864, 865, 869, 873, 874,
	875, 876, 877, 879, 881, 885, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 884, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 814, 566, 567,
	385, 386, 387, 388, 871, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 893, 866, 892, 894, 895, 891, 896,
	897, 878, 769, 0, 821, 889, 888, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	776, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 855, 828, 829, 830, 766, 831, 825, 826, 767,
	827, 856, 819, 852, 853, 795, 822, 832, 851, 833,
	854, 857, 858, 898, 899, 839, 823, 257, 900, 836,
	859, 850, 849, 834, 820, 860, 861, 802, 797, 837,
	838, 824, 843, 844, 845, 768, 816, 817, 818, 840,
	841, 798, 799, 800, 801, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 846, 634, 433, 434, 0, 842, 637, 638, 635,
	371, 420, 439, 427, 812, 651, 512, 513, 652, 623,
	0, 761, 0, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 803, 563, 514, 429, 381, 581, 580, 0,
	0, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 756, 0, 0, 793,
	848, 847, 780, 790, 0, 0, 309, 229, 509, 629,
	511, 510, 781, 0, 782, 786, 789, 785, 783, 784,
	0, 863, 0, 0, 0, 0, 0, 0, 748, 760,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 758, 0, 0, 0,
	0, 813, 0, 759, 0, 0, 808, 787, 791, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	788, 811, 815, 330, 886, 809, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 887, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 806, 0, 626, 0, 465,
	0, 0, 870, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 810, 0, 418, 399, 883, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 867, 395, 591, 624, 625, 516, 0, 882,
	862, 864, 865, 869, 873, 874, 875, 876, 877, 879,
	881, 885, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 884, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 814, 566, 567, 385, 386, 387, 388,
	871, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 893,
	866, 892, 894, 895, 891, 896, 897, 878, 769, 0,
	821, 889, 888, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 776, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 855, 828, 829,
	830, 766, 831, 825, 826, 767, 827, 856, 819, 852,
	853, 795, 822, 832, 851, 833, 854, 857, 858, 898,
	899, 839, 823, 257, 900, 836, 859, 850, 849, 834,
	820, 860, 861, 802, 797, 837, 838, 824, 843, 844,
	845, 768, 816, 817, 818, 840, 841, 798, 799, 800,
	801, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 846, 634, 433,
	434, 0, 3550, 637, 3551, 3552, 371, 420, 439, 427,
	812, 651, 512, 513, 652, 623, 0, 761, 0, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 803, 563,
	514, 429, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 756, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 229, 509, 629, 511, 510, 2743, 0,
	2744, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 748, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 0, 0, 0, 0, 813, 0, 759,
	0, 0, 808, 787, 791, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 418, 399, 883, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 776, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 257,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 433, 434, 0, 842, 637,
	638, 635, 371, 420, 439, 427, 812, 651, 512, 513,
	652, 623, 0, 761, 0, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 1730, 0, 0, 0, 764,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 803, 563, 514, 429, 381, 581,
	580, 0, 0, 872, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 756, 0,
	0, 793, 848, 847, 780, 790, 0, 0, 309, 229,
	509, 629, 511, 510, 781, 0, 782, 786, 789, 785,
	783, 784, 0, 863, 0, 0, 0, 0, 0, 0,
	0, 760, 0, 765, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 757, 758, 0,
	0, 0, 0, 813, 0, 759, 0, 0, 808, 787,
	791, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 788, 811, 815, 330, 886, 809, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 887, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 806, 0, 626,
	0, 465, 0, 0, 870, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 810, 0, 418, 399, 883,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 1731, 1732, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 867, 395, 591, 624, 625, 516,
	0, 882, 862, 864, 865, 869, 873, 874, 875, 876,
	877, 879, 881, 885, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 884, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 814, 566, 567, 385, 386,
	387, 388, 871, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 893, 866, 892, 894, 895, 891, 896, 897, 878,
	769, 0, 821, 889, 888, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 776, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 855,
	828, 829, 830, 766, 831, 825, 826, 767, 827, 856,
	819, 852, 853, 795, 822, 832, 851, 833, 854, 857,
	858, 898, 899, 839, 823, 257, 900, 836, 859, 850,
	849, 834, 820, 860, 861, 802, 797, 837, 838, 824,
	843, 844, 845, 768, 816, 817, 818, 840, 841, 798,
	799, 800, 801, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 846,
	634, 433, 434, 0, 842, 637, 638, 635, 371, 420,
	439, 427, 812, 651, 512, 513, 652, 623, 0, 761,
	0, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 764, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	803, 563, 514, 429, 381, 581, 580, 0, 0, 872,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 756, 0, 0, 793, 848, 847,
	780, 790, 0, 0, 309, 229, 509, 629, 511, 510,
	781, 0, 782, 786, 789, 785, 783, 784, 0, 863,
	0, 0, 0, 0, 0, 0, 0, 760, 0, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 757, 758, 0, 0, 0, 0, 813,
	0, 759, 0, 0, 808, 787, 791, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 788, 811,
	815, 330, 886, 809, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	887, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 806, 0, 626, 0, 465, 0, 0,
	870, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 810, 0, 418, 399, 883, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	867, 395, 591, 624, 625, 516, 0, 882, 862, 864,
	865, 869, 873, 874, 875, 876, 877, 879, 881, 885,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 884, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 814, 566, 567, 385, 386, 387, 388, 871, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 893, 866, 892,
	894, 895, 891, 896, 897, 878, 769, 0, 821, 889,
	888, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 776, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 855, 828, 829, 830, 766,
	831, 825, 826, 767, 827, 856, 819, 852, 853, 795,
	822, 832, 851, 833, 854, 857, 858, 898, 899, 839,
	823, 257, 900, 836, 859, 850, 849, 834, 820, 860,
	861, 802, 797, 837, 838, 824, 843, 844, 845, 768,
	816, 817, 818, 840, 841, 798, 799, 800, 801, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 846, 634, 433, 434, 0,
	842, 637, 638, 635, 371, 420, 439, 427, 812, 651,
	512, 513, 652, 623, 0, 761, 0, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 803, 563, 514, 429,
	381, 581, 580, 0, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 793, 848, 847, 780, 790, 0, 0,
	309, 229, 509, 629, 511, 510, 781, 0, 782, 786,
	789, 785, 783, 784, 0, 863, 0, 0, 0, 0,
	0, 0, 748, 760, 0, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	758, 0, 0, 0, 0, 813, 0, 759, 0, 0,
	808, 787, 791, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 788, 811, 815, 330, 886, 809,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 887, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 806,
	0, 626, 0, 465, 0, 0, 870, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 810, 0, 418,
	399, 883, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 867, 395, 591, 624,
	625, 516, 0, 882, 862, 864, 865, 869, 873, 874,
	875, 876, 877, 879, 881, 885, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 884, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 814, 566, 567,
	385, 386, 387, 388, 871, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 893, 866, 892, 894, 895, 891, 896,
	897, 878, 769, 0, 821, 889, 888, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	776, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 855, 828, 829, 830, 766, 831, 825, 826, 767,
	827, 856, 819, 852, 853, 795, 822, 832, 851, 833,
	854, 857, 858, 898, 899, 839, 823, 257, 900, 836,
	859, 850, 849, 834, 820, 860, 861, 802, 797, 837,
	838, 824, 843, 844, 845, 768, 816, 817, 818, 840,
	841, 798, 799, 800, 801, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 846, 634, 433, 434, 0, 842, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	0, 761, 206, 64, 197, 168, 0, 0, 0, 0,
	0, 0, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 198, 0, 0, 0, 0, 0, 0, 189, 0,
	336, 0, 199, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 140, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 0,
	452, 480, 330, 471, 0, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 496, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 167, 195, 204, 196,
	124, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 221, 0, 0, 0, 435, 0, 0, 363, 194,
	188, 187, 481, 0, 418, 399, 233, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 601, 602, 603,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	460, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 224, 573, 576,
	506, 234, 0, 570, 585, 543, 584, 235, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 138, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 232, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 239, 304, 448, 240, 0, 293, 522, 367, 169,
	410, 341, 587, 588, 61, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	236, 45, 222, 225, 227, 226, 0, 62, 571, 583,
	617, 5, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 143,
	237, 512, 513, 238, 623, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 140, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 2418, 2421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	2422, 465, 0, 0, 0, 2417, 0, 2416, 435, 2414,
	2419, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 2420, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 169, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 0, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 0, 0, 228, 0, 0, 780, 790, 0,
	0, 309, 229, 509, 629, 511, 510, 781, 0, 782,
	786, 789, 785, 783, 784, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 787, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 788, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 0, 465, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 206, 64, 197, 168, 0, 0, 0, 0, 0,
	0, 397, 677, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 684, 0, 0, 0,
	0, 0, 0, 0, 683, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 681,
	682, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 678, 680,
	314, 488, 411, 692, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 169, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 1134, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1119, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 2581, 2584,
	2585, 2586, 2587, 2588, 2589, 0, 2594, 2590, 2591, 2592,
	2593, 0, 2576, 2577, 2578, 2579, 1117, 2560, 2582, 0,
	2561, 393, 2562, 2563, 2564, 2565, 1121, 2566, 2567, 2568,
	2569, 2570, 2573, 2574, 2571, 2572, 2580, 405, 370, 406,
	353, 383, 382, 384, 1145, 1147, 1149, 1151, 1154, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 626, 0,
	465, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 2575, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 2583,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 2418, 2421, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 2422, 465, 0, 0, 0, 2417, 0, 2416,
	435, 2414, 2419, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 2420, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 0,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	2439, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 626, 2438, 465, 0, 0, 0,
	2444, 2441, 2443, 435, 0, 2442, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 2436, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 0, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 2439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 2438, 465,
	0, 0, 0, 2444, 2441, 2443, 435, 0, 2442, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 2131,
	0, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 2132, 0, 0, 0, 309,
	229, 509, 629, 511, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 1255, 1256, 1257,
	1254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 0, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 206, 651, 512, 513, 652, 623, 0,
	0, 0, 0, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 140, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 2181, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	169, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	206, 651, 512, 513, 652, 623, 0, 0, 0, 0,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 140,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 2166, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 626, 0, 465, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 169, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 1045, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	1052, 1053, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1056, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 1039, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 1026, 463, 303, 1025, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 1043, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 1044, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 1047, 566, 567, 385, 386, 387, 388,
	347, 592, 1042, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 1054, 1040, 1050, 1041, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 1051, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 1038, 420, 439, 427,
	206, 651, 512, 513, 652, 623, 0, 0, 0, 0,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 140,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2063, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 626, 0, 465, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 169, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	1052, 1053, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1056, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 1026, 463, 303, 1025, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 1054, 2084, 1050, 2085, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 1051, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 2969, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 509, 629, 511, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 0, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 2972, 0, 0, 0, 2971, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 0, 651, 512, 513, 652, 623, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 1551, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1549, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1547, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 1545, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 0, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 1549, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1547, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 0,
	452, 480, 330, 471, 0, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 496, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 0, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 481, 0, 418, 399, 654, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 0, 573, 576,
	506, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 0, 293, 522, 367, 0,
	410, 341, 587, 588, 0, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4037,
	0, 228, 848, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 0, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 1549, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1547, 0, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 0, 465, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	2483, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 974, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 1549, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1760, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 0, 452, 480, 330, 471, 0, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 496, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 626, 0,
	465, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 481, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	2522, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2524, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 2131, 0, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 0,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 2132,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 626, 0, 465, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 0, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 3186, 3188, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 2545, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 1549, 0, 0, 0, 309,
	229, 509, 629, 511, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 0, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 0, 651, 512, 513, 652, 623, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 665, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 664, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 0, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 848,
	0, 0, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 0,
	452, 480, 330, 471, 0, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 496, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 0, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 481, 0, 418, 399, 654, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 0, 573, 576,
	506, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 0, 293, 522, 367, 0,
	410, 341, 587, 588, 0, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 4014, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 0, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 3783, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 0, 465, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 3916, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1774, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 0, 452, 480, 330, 471, 0, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 496, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 626, 0,
	465, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 481, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3798, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 0,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 626, 0, 465, 0, 0, 0,
	3710, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 0, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 3218, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 509, 629, 511, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 0, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 0, 651, 512, 513, 652, 623, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2063, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 3428, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 0, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 0,
	452, 480, 330, 471, 0, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 496, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 0, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 481, 0, 418, 399, 654, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 0, 573, 576,
	506, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 0, 293, 522, 367, 0,
	410, 341, 587, 588, 0, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 0, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3076, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 0, 465, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	1549, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 2524, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 0, 452, 480, 330, 471, 0, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 496, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 626, 0,
	465, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 481, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 2887, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 0,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 626, 0, 465, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 0, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 2641, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 509, 629, 511, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2603, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 0, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 0, 651, 512, 513, 652, 623, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 2601, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 2371, 651, 512, 513,
	652, 623, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 0, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 0,
	452, 480, 330, 471, 0, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 496, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 0, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 481, 0, 418, 399, 654, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 0, 573, 576,
	506, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 0, 293, 522, 367, 0,
	410, 341, 587, 588, 0, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 1914, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 2045, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 0, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 0, 465, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	1549, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 1950, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 0, 452, 480, 330, 471, 0, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 496, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 626, 0,
	465, 0, 0, 1578, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 481, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 665, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 0,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 675, 626, 0, 465, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 0, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 974, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 509, 629, 511, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 0, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 0, 651, 512, 513, 652, 623, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	3165, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 0, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	1900, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 0,
	452, 480, 330, 471, 0, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 496, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 0, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 481, 0, 418, 399, 654, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 0, 573, 576,
	506, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 0, 293, 522, 367, 0,
	410, 341, 587, 588, 0, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 1528, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 0, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 436,
	1526, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 0, 465, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 1405,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 0, 452, 480, 330, 471, 0, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 496, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 626, 0,
	465, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 481, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 743, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 700, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 701, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
}

var yyPact = [...]int{
	357, -1000, -1000, -1000, -336, 15749, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49963, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 464, 49963, -334, 31606, 48064, -1000, -1000, 2727, -1000,
	48697, 17668, 49963, 547, 542, 49963, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 982, -1000, 54394, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 914, 5285, 53761, 11924,
	-225, -1000, 1619, -44, 2645, 498, -202, -203, 1174, 1202,
	1312, 1071, 49963, 1123, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1759, 1057, 49330,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 4329, 233, 972, 1057, 22740, 112,
	108, 1619, 482, -66, 224, -1000, 1491, 4088, 193, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11924, 11924, 15749, -367, 15749, 11924, 49963, 49963, -1000, -1000,
	-1000, -1000, -334, 48697, 914, 5285, 11924, 2645, 498, -202,
	-203, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -66, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	108, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5082, -1000, 1719, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2357,
	3178, 1717, 2640, 867, 48064, 49963, -1000, 140, 867, -1000,
	-1000, -1000, 1619, 3573, -1000, 49963, 49963, 229, 1953, -1000,
	627, 543, 433, 440, 385, 1715, -1000, -1000, -1000, -1000,
	-1000, -1000, 759, 3542, -1000, 49963, 49963, 3197, 49963, -1000,
	2369, 829, -1000, 5309, 3379, 1525, 1030, 3226, -1000, -1000,
	3177, -1000, 396, 304, 512, 789, 461, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 313, -1000, 3434, -1000, -1000, 380,
	-1000, -1000, 362, -1000, -1000, -1000, 100, -1000, -1000, -1000,
	-1000, -1000, -1000, 4, -1000, -1000, 1270, 2299, 11924, 2495,
	-1000, 3996, 1712, -1000, -1000, -1000, 7466, 14468, 14468, 14468,
	14468, 49963, -1000, -1000, 3007, 11924, 3175, 3169, 3168, 3162,
	-1000, -1000, -1000, -1000, -1000, -1000, 3161, 1713, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2062, -1000, -1000,
	-1000, 15104, -1000, 3140, 3139, 3138, 3135, 3132, 3130, 3128,
	3127, 3125, 3124, 3120, 3117, 3116, 3115, 2859, 17025, 3105,
	2639, 2636, 3104, 3103, 3100, 2630, 3097, 3096, 3095, 2859,
	2859, 3091, 3090, 3089, 3088, 3083, 3082, 3078, 3077, 3076,
	3074, 3073, 3070, 3069, 3068, 3067, 3066, 3064, 3063, 3062,
	3060, 3059, 3058, 3044, 3043, 3042, 3041, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1403, -1000, 3034, 3553, 2919, -1000, 3416, 3414, 3412,
	3409, -273, 3033, 2280, -1000, -1000, 96, 3538, 49963, -293,
	49963, 417, -85, -86, -87, -1000, -67, -1000, -1000, 1165,
	-1000, 1105, 53128, 945, -1000, -1000, 49963, 912, 912, 912,
	49963, 49963, 228, 967, 912, 912, 912, 912, 912, 928,
	912, 3457, 964, 963, 961, 960, 912, -29, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1951, 1949, 3106, 1082, -1000,
	-1000, -1000, -1000, 1554, 49963, -1000, 2962, 417, -320, 1883,
	1883, 3508, 3508, 3456, 3454, 830, 814, 808, 1883, 609,
	-1000, 1905, 1905, 1905, 1905, 1883, 503, 828, 3461, 3461,
	118, 1905, 71, 1883, 1883, 71, 1883, 1883, -1000, 1930,
	288, -280, -1000, -1000, -1000, -1000, 1905, 1905, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3428, 3426, 914, 914, 49963,
	914, 236, 49963, 914, 914, 914, 49963, 921, -324, 46,
	52495, 51862, 2340, 2369, 811, 790, 1565, 1907, -1000, 1892,
	49963, 49963, 1892, 1892, 25909, 25276, -1000, 49963, -1000, 3553,
	2919, 2838, 1806, 2830, 2919, -99, 417, 914, 914, 914,
	914, 914, 322, 914, 914, 914, 914, 914, 49963, 49963,
	47431, 914, 914, 914, 914, 10010, 1491, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15749, 2156, 2141, 192, -15, -311, 290, -1000, -1000, 49963,
	3337, 326, -1000, -1000, -1000, 2949, -1000, 2956, 2956, 2956,
	2956, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2956, 2956, 2960, 3032, -1000, -1000, 2950, 2950, 2950,
	2949, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2957, 2957, 2959, 2959,
	2957, 49963, -123, -1000, -1000, 11924, 49963, 3349, 400, 3028,
	867, -1000, -1000, 49963, 319, 422, 3553, 3347, 3461, 3503,
	-1000, -1000, 1711, 2278, 2628, -1000, 385, -1000, 620, 385,
	-1000, 401, 401, 1857, -1000, 1143, -1000, -1000, -1000, -1000,
	-1000, -1000, 49963, 4, 477, -1000, -1000, 2566, 3022, -1000,
	670, 1400, 1552, -1000, 353, 988, 40468, 2369, 40468, 49963,
	-1000, -1000, -1000, -1000, -1000, -1000, 87, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 352, -1000, 11924, 11924, 11924, 11924, 11924, -1000, 719,
	13832, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14468, 14468,
	14468, 14468, 14468, 14468, 14468, 14468, 14468, 14468, 14468, 14468,
	3005, 1921, 14468, 14468, 14468, 14468, 28441, 1806, 3234, 1557,
	298, 1712, 1712, 1712, 1712, 11924, -1000, 1969, 2299, 11924,
	11924, 11924, 11924, 34771, 49963, -1000, -1000, 4557, 11924, 11924,
	4512, 11924, 3405, 11924, 11924, 11924, 2826, 6185, 49963, 11924,
	-1000, 2824, 2821, -1000, -1000, 2087, 11924, -1000, -1000, 11924,
	-1000, -1000, 11924, 14468, 11924, -1000, 11924, 11924, 11924, -1000,
	-1000, 3389, 3405, 3405, 3405, 1882, 11924, 11924, 3405, 3405,
	3405, 1862, 3405, 3405, 3405, 3405, 3405, 3405, 3405, 3405,
	3405, 3405, 3405, 2818, 2814, 2810, 11288, 3461, -225, -1000,
	9374, 3347, 3461, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -275, 3019, 49963, 2627, 2624, -344, 177,
	487, 49963, 1185, -1000, -1000, 49963, 2275, 49963, 2274, 55,
	1145, 1101, 1116, -1000, -1000, 49963, 51229, -1000, 49963, 1976,
	49963, 49963, 3397, -1000, 3016, 49963, 912, 912, 912, -1000,
	45532, 40468, 49963, 49963, 2369, 49963, 49963, 49963, 912, 912,
	912, 912, 49963, -1000, 3327, 40468, 3302, 921, -1000, 49963,
	1554, 3396, 49963, -1000, -1000, -1000, -1000, 3508, 14468, 14468,
	-1000, -1000, 11924, -1000, 253, 46798, 1905, 1883, 1883, -1000,
	-1000, 49963, -1000, -1000, -1000, 1905, 49963, 1905, 1905, 3508,
	1905, -1000, -1000, -1000, 1883, 1883, -1000, -1000, 11924, -1000,
	-1000, 1905, 1905, -1000, -1000, 3508, 49963, 84, 3508, 3508,
	85, -1000, -1000, -1000, 1883, 49963, 49963, 912, 49963, -1000,
	49963, 49963, -1000, -1000, 49963, 49963, 3991, 49963, 45532, 46165,
	3425, -1000, 40468, 49963, 49963, 1551, -1000, 944, 37936, -1000,
	49963, 1470, -1000, 34, -1000, 52, 46, 1892, 46, 1892,
	943, -1000, 662, 655, 24010, 583, 40468, 6821, -1000, -1000,
	1892, 1892, 6821, 6821, 1724, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1510, -1000, 295, 3461, -1000, -1000, -1000, -1000,
	-1000, 2271, -1000, 49963, 45532, 40468, 2369, 49963, 914, 49963,
	49963, 49963, 49963, 49963, -1000, 3015, 1697, -1000, 3369, 49963,
	49963, 49963, 49963, 1535, -1000, -1000, 20833, 1687, -1000, -1000,
	1973, -1000, 11924, 15749, -257, 11924, 15749, 15749, 11924, 15749,
	-1000, 11924, 314, -1000, -1000, -1000, -1000, 2269, -1000, 2261,
	-1000, -1000, -1000, -1000, -1000, 2615, 2615, -1000, 2255, -1000,
	-1000, -1000, -1000, 2254, -1000, -1000, 2251, -1000, -1000, -1000,
	-1000, -165, 2809, 1270, -1000, 2605, 3213, -227, -1000, 22107,
	49963, 49963, 400, -352, 1948, 1946, 1945, 3438, -1000, -227,
	-1000, 21470, 49963, 3461, -1000, -232, 3347, 11924, 49963, -1000,
	3453, -1000, -1000, 385, -1000, -1000, -1000, 401, 442, -1000,
	-1000, -1000, -1000, -1000, -1000, 1681, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 454, -77, -101, 1505,
	-1000, 49963, -1000, -1000, 353, 40468, 42367, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 264, -1000, -1000, 183, -1000, 942,
	280, 1854, -1000, -1000, 225, 209, 232, 1009, 2299, -1000,
	1985, 1985, 1992, -1000, 797, -1000, -1000, -1000, -1000, 3007,
	-1000, -1000, -1000, 2081, 2413, -1000, 1851, 1851, 1626, 1626,
	1626, 1626, 1626, 2445, 2445, -1000, -1000, -1000, 7466, 3005,
	14468, 14468, 14468, 14468, 1014, 1014, 4191, 4049, -1000, -1000,
	-1000, -1000, 11924, 173, 1965, -1000, 11924, 2502, 1417, 2253,
	1522, 1850, -1000, 2949, 11924, 1673, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2808, 2804, 2637, 3537,
	2803, 11924, -1000, -1000, 1837, 1836, 1813, -1000, 2288, 10652,
	-1000, -1000, -1000, 2794, 1661, 2793, -1000, -1000, -1000, 2791,
	1805, 1293, 2790, 2991, 2788, 2787, 2783, 2781, 1504, 11924,
	11924, 11924, 11924, 2779, 1801, 1782, 11924, 11924, 11924, 11924,
	2778, 11924, 11924, 11924, 11924, 11924, 11924, 11924, 11924, 11924,
	11924, 49963, 147, 147, 147, 1496, 1488, -1000, -1000, 1776,
	-1000, 2299, -1000, -1000, 3347, -1000, 3004, 2250, 1486, -1000,
	-1000, -330, 2507, 49963, 49963, 172, 49963, 2604, -296, 49963,
	-1000, -1000, 2580, -1000, -1000, -1000, 1152, 1097, 1136, -1000,
	49963, -1000, 2571, 3365, 3447, 3443, 49963, 1280, 2994, 49963,
	49963, 49963, 307, -1000, -1000, 1390, -1000, 280, -6, 552,
	1333, 3196, 3528, -124, 49963, 49963, 49963, 49963, 3395, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 44899, -1000, 2993,
	1774, -1000, -1000, 1712, 1712, 2299, 49963, 49963, 49963, 3187,
	49963, 49963, 3508, 3508, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1905, 3508, 3508, 1651, 1883, 1905, -1000, -1000, 1905,
	-352, -1000, 1905, -1000, -352, 1643, -352, 49963, -1000, -1000,
	-1000, 3394, 2962, 1483, -1000, -1000, -1000, 3497, 1596, 902,
	902, 1119, 806, 3496, 19567, -1000, 1832, 1196, 941, 3320,
	390, -1000, 1832, -162, 876, 1832, 1832, 1832, 1832, 1832,
	1832, 1832, 724, 713, 1832, 1832, 1832, 1832, 1832, 1832,
	1832, 1832, 1832, 1832, 1832, 1184, 1832, 1832, 1832, 1832,
	1832, -1000, 1832, 2986, 537, -1000, -1000, -1000, -1000, -1000,
	-1000, 794, 681, 301, 3424, 427, -1000, 441, 1390, 333,
	3422, 449, 49963, 49963, 3338, 1357, -1000, -1000, -1000, -1000,
	-1000, 29074, 29074, 23377, 29074, -1000, 205, 1892, 46, 21,
	-1000, -1000, 1470, 6821, 1470, 6821, 2249, -1000, -1000, 936,
	-1000, -1000, 1333, -1000, 49963, 49963, -1000, -1000, 2985, 1944,
	-1000, -1000, 17025, -1000, 6821, 6821, -1000, -1000, 30973, 49963,
	-1000, 2, -1000, 15, 3347, -1000, 1321, -1000, -1000, 1460,
	1333, 3208, 49963, 1321, 1321, 1321, -1000, -1000, 18301, 49963,
	49963, -1000, -1000, -1000, -1000, 3508, 10010, -1000, 37936, -1000,
	-1000, 44266, -1000, 43633, 1958, -1000, 15749, 2124, 188, -1000,
	263, -315, 185, 2008, 184, 2299, -1000, -1000, 2777, 2775,
	1772, -1000, 1761, 2770, 1760, 1754, 2247, -1000, 58, -1000,
	3343, 1334, -1000, 2974, -1000, 1744, 3284, -1000, 1447, -1000,
	1932, 1743, -1000, -1000, -1000, 11924, 43000, 11924, 1055, 1334,
	1742, 3282, 1447, 3347, 2568, -1000, 1445, -1000, 2204, 1617,
	215, -1000, -1000, -1000, 49963, 914, 2566, 1738, 42367, 1358,
	-1000, 935, 1611, 1583, -1000, 40468, 354, 40468, -1000, 40468,
	-1000, -1000, 431, -1000, 49963, 3345, -1000, -1000, -1000, 2507,
	1927, -350, 49963, -1000, -1000, -1000, -1000, -1000, 1737, -1000,
	1014, 1014, 4191, 2190, -1000, 14468, -1000, 14468, 3159, -1000,
	1957, -1000, 11924, 2045, 4992, 11924, 4992, 926, 27175, 34771,
	-117, 3354, 3136, 49963, -1000, -1000, 11924, 11924, -1000, 3113,
	-1000, -1000, -1000, -1000, 11924, 11924, 2337, -1000, 49963, -1000,
	-1000, -1000, -1000, 27175, -1000, 14468, -1000, -1000, -1000, -1000,
	11924, 1388, 1388, 3080, 1734, 147, 147, 147, 3009, 2995,
	2983, 1708, 147, 2971, 2952, 2947, 2916, 2881, 2812, 2806,
	2769, 2744, 2735, 1695, -1000, 2973, -1000, -1000, 2051, 13196,
	9374, -1000, -1000, 296, 1444, 2245, 2563, 125, -1000, 1924,
	-1000, 2554, 49963, 49963, 1179, -1000, 49963, 3526, -1000, -1000,
	-1000, -1000, 1087, -1000, 2553, -1000, 279, 268, 325, 2767,
	1426, -1000, -1000, 49963, -1000, -1000, -1000, 18301, 2962, 2969,
	2962, 168, 1832, 630, 40468, 785, -1000, 49963, 2097, 1922,
	3207, 751, 3335, 49963, 2968, 382, 2966, 2965, 3393, 533,
	5248, 49963, 1418, -1000, 1577, 4088, -1000, 49963, -1000, -1000,
	49963, -1000, 2369, -1000, 1883, -1000, -1000, 3508, -1000, -1000,
	11924, 11924, 3508, 1883, 1883, -1000, 1905, -1000, 49963, -1000,
	-352, 533, 5248, 3391, 4612, 600, 2728, -1000, 49963, -1000,
	-1000, -1000, 816, -1000, 1088, 912, 49963, 2018, 1088, 2017,
	2964, -1000, -1000, 49963, 49963, 49963, 49963, -1000, -1000, 49963,
	-1000, 49963, 49963, 49963, 49963, 49963, 41734, -1000, 49963, 49963,
	-1000, 49963, 2015, 49963, 2004, 3348, -1000, 1832, 1832, 1035,
	-1000, -1000, 636, -1000, 41734, 2244, 2226, 2224, 2223, 2545,
	2543, 2541, 1832, 1832, 2220, 2540, 41101, 2539, 1279, 2209,
	2207, 2202, 2174, 2528, 1291, -1000, 2522, 2165, 2158, 2150,
	49963, 2963, 2434, 535, -1000, -1000, 2117, 168, 1832, 425,
	49963, 1920, 1919, 630, 633, 549, -19, 24643, -1000, -1000,
	-1000, 49963, 37936, 37936, 37936, 37936, 37936, 37936, -1000, 3259,
	3246, 3258, -1000, 3245, 3244, 3271, 3253, 2977, 49963, 37936,
	2962, -1000, 41101, -1000, -1000, -1000, 1806, 1692, 3673, 1083,
	11924, 6821, -1000, -1000, 28, 47, -1000, -1000, -1000, -1000,
	40468, 2519, 583, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3442, 49963, 49963, 822, 2760, 1416, -1000, -1000, -1000, 5248,
	2956, 2956, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2956, 2956, 2960, -1000, -1000, 2950, 2950, 2950, 2949,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2957, 2957, 2959, 2959, 2957, -1000, -1000, 3506, -1000, 1395,
	-1000, -1000, 1574, -1000, 1977, -337, 15749, 1964, 1923, -1000,
	11924, 15749, 11924, -258, 408, -262, -1000, -1000, -1000, 2518,
	-1000, -1000, -1000, 2198, -1000, 2197, -1000, 170, 196, 2003,
	-227, 9374, 450, 49963, -227, 49963, 9374, -1000, 49963, 164,
	-360, -363, 154, 2517, 423, -227, 3442, 58, 11924, 3310,
	-1000, -1000, 49963, 2193, -1000, -1000, -1000, 3512, 40468, 2369,
	1771, 39835, -1000, 370, -1000, 260, 634, 2510, -1000, 958,
	123, 2508, 2507, -1000, -1000, -1000, -1000, 14468, 1712, -1000,
	-1000, -1000, 2299, 11924, 2759, -1000, 1100, 1100, 2199, 2758,
	2757, -1000, 2956, 2956, -1000, 2949, 2950, 2949, 1100, 1100,
	2753, -1000, 2942, -1000, 3354, -1000, 2279, 2693, -1000, 2643,
	2619, 11924, -1000, 2749, 3822, 1332, -35, -195, 147, 147,
	-1000, -1000, -1000, -1000, 147, 147, 147, 147, -1000, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	875, -104, -284, -106, -285, -1000, 2747, 1384, -1000, -1000,
	-1000, -1000, -1000, 4512, 1380, 567, 567, 2507, 2506, -1000,
	925, 2496, 1133, 49963, 2494, -299, -1000, 2493, -1000, -1000,
	49963, 49963, 49963, 50596, 672, 49963, 49963, 2490, 2488, 1280,
	5248, 2741, 3385, 18934, 3384, 2205, -1000, -1000, -1000, 30340,
	633, -1000, -1000, -1000, 745, 424, 2188, 605, -1000, 49963,
	557, 3300, 1917, 2486, 49963, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3335, -1000, 1013, 499, 36670, 16392, -1000, 420,
	49963, -1000, 18934, 18934, 420, 509, 1925, -1000, 867, 1331,
	137, 37936, 49963, -1000, 37303, 2740, -1000, -1000, 1333, 3508,
	-1000, 2299, 2299, -352, 3508, 3508, 1883, -1000, -1000, 509,
	-1000, 420, -1000, 1714, 20200, 604, 559, 536, -1000, 764,
	-1000, -1000, 866, 3315, 5248, -1000, 49963, -1000, 49963, -1000,
	49963, 49963, 912, 11924, 3315, 49963, 923, -1000, 1198, 516,
	481, 812, 812, 1376, -1000, 3354, -1000, -1000, 1369, -1000,
	-1000, -1000, -1000, 49963, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 27175, 27175, 3420, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2482, 2481, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49963, 1685,
	-1000, 1914, 2186, 2475, -1000, 2205, 30340, 1912, 1892, 2458,
	2457, 633, -1000, 2456, 2454, 2097, 1906, 951, 49963, -1000,
	1324, 49963, 49963, -1000, 1367, -1000, 1902, 3195, 3205, 3195,
	-1000, 3195, -1000, -1000, -1000, -1000, -1000, -1000, 3153, -1000,
	3008, -1000, -1000, -1000, -1000, 1367, -1000, -1000, -1000, -1000,
	-1000, 1083, -1000, 3441, 1088, 1088, 1088, 2738, -1000, -1000,
	-1000, -1000, 1358, 2733, -1000, -1000, -1000, 3548, -1000, -1000,
	-1000, -1000, -1000, -1000, 18301, 3334, 3466, 3495, 39202, -1000,
	-337, 1886, -1000, 2024, 179, 1989, 49963, -1000, -1000, -1000,
	2725, 2724, -239, 211, 3494, 3483, 1144, -1000, 2717, 1356,
	-227, -1000, -1000, 1334, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -364, -227, -1000, 1334, -1000, 170, -1000, -1000, 3321,
	-1000, -1000, 2369, -1000, 251, -1000, -1000, -1000, -1000, -1000,
	-1000, 259, -1000, 49963, -1000, 1338, 116, -1000, 2299, -1000,
	-1000, -1000, -1000, -1000, 4992, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2451, -1000, -1000, 11924, -1000,
	-1000, -1000, 2534, -1000, -1000, 11924, 2716, 2448, 2715, 2444,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3553, -1000, 3482,
	1682, 2714, 2712, 1677, 2711, 2710, -1000, 11924, 2709, 4512,
	1043, 2442, 1043, -1000, -1000, 436, 29707, 49963, 3510, -1000,
	49963, 2441, -1000, -1000, 49963, 2117, 625, 2117, 613, 49963,
	-1000, -1000, -1000, -1000, 969, 420, 2707, 1335, -1000, -1000,
	-1000, -1000, 420, -1000, 2438, 269, -1000, -1000, -1000, -1000,
	2182, -1000, -1000, 2149, 1582, 293, -1000, -1000, -1000, -1000,
	-1000, -1000, 2172, 49963, 38569, 2196, 1900, -354, -1000, 2941,
	-1000, 1832, 1832, 1832, 49963, 1676, -1000, 1832, 1832, 2706,
	-1000, -1000, 2704, 2701, -125, 886, 1807, 1804, -1000, 2173,
	29074, 37936, 37303, 1363, -1000, 1573, -1000, -1000, -1000, -1000,
	-1000, -1000, 3508, 886, -1000, 582, 2160, 14468, 2940, 14468,
	2938, 607, 2920, 1675, -1000, 49963, -1000, -1000, 49963, 348,
	2918, -1000, 2914, 3185, 565, 2913, 2901, 49963, 2526, -1000,
	3315, 49963, 810, 3331, -1000, -1000, -1000, 470, -1000, -1000,
	635, -1000, 49963, -1000, 49963, -1000, 1679, -1000, 27175, -1000,
	-1000, 1668, -1000, 2434, 2432, 4512, -1000, -1000, 269, 2430,
	6821, -1000, -1000, -1000, -1000, -1000, 3300, 2429, 2172, 49963,
	-1000, 49963, 1324, 1324, 3553, 49963, 9374, -1000, -1000, 11924,
	2900, -1000, 11924, -1000, -1000, -1000, -1000, -1000, -1000, 2896,
	3355, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2378, -1000,
	11924, 12560, -1000, 905, 15749, -263, 368, -1000, -1000, -1000,
	-241, 2426, -1000, -1000, 3481, 2425, 2300, 49963, -1000, -1000,
	1334, -1000, 1334, -239, -1000, -1000, 1333, -1000, -1000, 1195,
	728, -1000, 2694, 271, -1000, 2489, -1000, 2360, 147, -1000,
	147, -1000, 246, 11924, -1000, 2424, -1000, -1000, -1000, 2421,
	-1000, -1000, 2166, -1000, 2691, -1000, 2419, -1000, -1000, 49963,
	-1000, -1000, 1130, 2418, -357, -1000, 2407, 2117, 2405, 2117,
	612, 5248, -127, -125, 18934, -127, -1000, -1000, 430, 443,
	-1000, -1000, 2134, 668, -1000, -1000, 2404, 664, -1000, 1324,
	-1000, 1894, 2040, 2351, 34771, 27175, 28441, 2403, -1000, -1000,
	36670, 2378, 2378, 4202, 352, 5620, -1000, 2895, 1204, 1789,
	-1000, 2159, -1000, 2144, -1000, 3508, 1363, 134, -1000, -1000,
	1752, -1000, 1204, 2728, 3480, -1000, 3630, 49963, 3465, 49963,
	2894, 1893, 14468, -1000, 866, 3276, -1000, -1000, 348, -1000,
	-1000, 2037, 14468, -1000, -1000, 2401, 28441, 1001, 1890, 1885,
	1015, 2893, -1000, 685, 3547, -1000, -1000, -1000, 1031, 2885,
	-1000, 2002, 1997, -1000, 49963, -1000, 34771, 34771, 834, 834,
	34771, 34771, 2880, 812, -1000, -1000, 14468, -1000, -1000, 1832,
	-1000, -1000, -1000, 1832, 1605, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2196, -1000, -1000, 1321, -1000, 3461, -1000, -1000,
	2299, 49963, 2299, 36037, -1000, 3479, 3478, -1000, 2299, 250,
	249, 2879, 2878, -1000, -337, 49963, 49963, -247, 2120, -1000,
	2400, 187, -1000, -1000, 1316, -241, -249, 85, 27175, 1884,
	-1000, 2688, 361, -143, -1000, -1000, -1000, -1000, 2683, -1000,
	730, -1000, -1000, -1000, 1270, 2681, 2675, -1000, -1000, -1000,
	-1000, 49963, -1000, 2328, -1000, 2387, -1000, 2386, 2117, -120,
	-1000, -1000, 435, -1000, -1000, -1000, 642, 2291, -1000, -1000,
	434, -1000, -1000, -1000, 2172, 2376, -1000, -1000, 115, -1000,
	1877, 1657, -1000, -1000, -1000, -1000, -1000, -1000, 854, -1000,
	420, 5538, -1000, 1196, 27808, -1000, 1195, 854, 537, 33505,
	712, 310, -1000, 2116, -1000, -1000, 3553, -1000, 674, -1000,
	601, -1000, 1623, -1000, 1620, 35404, 2110, 3093, -1000, 5352,
	1004, -1000, -1000, 4191, -1000, -1000, -1000, -1000, -1000, -1000,
	2372, 2370, -1000, -1000, -1000, -1000, -1000, 2103, 2876, 72,
	3419, 2364, -1000, -1000, 2875, 1615, 1601, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1581, 1560, 34771, -1000,
	-1000, 4191, 2101, 27175, 1832, -1000, -1000, 1558, 1544, -1000,
	-1000, -1000, -1000, -1000, -313, 2868, 11924, 11924, -1000, -1000,
	-1000, 2862, -1000, -1000, 3476, -247, -251, 2356, 161, 219,
	-1000, 2354, -1000, -121, 3268, -155, -1000, -1000, 932, -230,
	133, 131, 119, -1000, -1000, -1000, 11924, -1000, -1000, -1000,
	114, -1000, 1842, -1000, -1000, 2353, 49963, 684, -1000, -1000,
	-1000, -1000, 247, -1000, -1000, -1000, -1000, -1000, -1000, 2351,
	2330, -1000, 575, 3475, -1000, 5620, -1000, 1832, -1000, 575,
	1512, -1000, 1832, 1832, -1000, 526, -1000, 1787, -1000, 2082,
	-1000, 3461, -1000, 520, -1000, 577, -1000, -1000, -1000, 1497,
	-1000, -1000, -1000, 5352, 594, -1000, 844, 2861, -1000, -1000,
	2663, 11924, 2859, 1832, 2657, -105, 34771, 3182, 3011, 2883,
	2497, 1475, -1000, -1000, 27175, -1000, -1000, 34138, -1000, 2855,
	1459, 1455, 49963, 2300, -1000, -1000, 2329, -1000, 920, 212,
	219, -1000, 3471, 182, 3470, 3469, 1253, 3266, -1000, -1000,
	1991, -1000, 155, 144, 124, -1000, -1000, -1000, -1000, -1000,
	2328, 2319, -1000, 584, -1000, 360, -1000, -1000, -1000, 306,
	-1000, 3468, 600, -1000, 27175, -1000, -1000, 33505, 2378, 2378,
	-1000, -1000, 2073, -1000, -1000, -1000, -1000, 2070, -1000, -1000,
	-1000, 1452, -1000, 49963, 1040, 8738, -1000, 2064, -1000, 49963,
	-1000, 3203, -1000, 256, 1441, 306, 834, 306, 834, 306,
	834, 306, 834, 335, -1000, -1000, -1000, 1435, 11924, -1000,
	-1000, 1433, -1000, -1000, -1000, 2849, 2068, 211, 178, 3467,
	-1000, 2300, 3464, 2300, 2300, -1000, 153, -129, 932, -1000,
	-1000, -1000, -1000, -1000, 2318, -1000, -1000, -1000, -1000, 1832,
	1832, 2315, 2314, 492, -1000, -1000, 32872, 604, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 594, 5620, -1000, 8738, 1425,
	-1000, 2299, -1000, 812, -1000, -1000, 3201, 3199, 3521, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2847,
	2651, -1000, 49963, 3402, 26542, 201, -1000, -1000, -1000, 2309,
	-1000, 2300, -1000, -1000, 1827, -150, -1000, -282, 2063, 2061,
	-1000, -1000, 49963, -1000, 49963, 582, -1000, 5620, 1387, -1000,
	8738, -1000, -1000, 3546, -1000, 3544, 1032, 1032, 306, 306,
	306, 306, 11924, -1000, -1000, -1000, 49963, -1000, 1351, -1000,
	-1000, -1000, 1571, -1000, -1000, -1000, -1000, 2296, -159, -1000,
	-1000, 2214, -1000, -1000, -1000, 1347, 2728, -1000, -1000, -1000,
	-1000, -1000, 2094, 667, -1000, 2500, 1212, -1000, 1753, -1000,
	32239, 49963, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49963, 8102, -1000, 1313, -1000, -1000, 2299, 49963, -1000,
}

var yyPgo = [...]int{
	0, 168, 3565, 249, 178, 4237, 83, 266, 277, 272,
	258, 4236, 4235, 4233, 4232, 3357, 3356, 4228, 4227, 4226,
	4225, 4224, 4223, 4218, 4217, 4216, 4214, 4213, 4212, 4211,
	4210, 4209, 4207, 4203, 4202, 4188, 4187, 4186, 4185, 4184,
	4183, 4181, 4180, 4179, 4175, 4172, 4171, 254, 4170, 4169,
	4168, 4167, 4164, 4163, 4162, 4161, 4159, 4158, 4156, 4154,
	4152, 4151, 4149, 4135, 4130, 4128, 4126, 4125, 4124, 4123,
	4122, 4121, 4119, 4118, 4117, 4115, 4113, 4112, 4111, 4110,
	4109, 4108, 253, 4107, 4106, 212, 4105, 3354, 4100, 4099,
	4098, 4097, 4096, 4095, 4093, 4092, 4091, 4090, 4088, 311,
	4086, 4081, 4080, 4078, 4076, 4073, 4070, 4068, 4067, 4066,
	4065, 4064, 4063, 286, 4061, 4060, 4059, 4057, 213, 4055,
	262, 4054, 175, 134, 4053, 4052, 4051, 4050, 4048, 4047,
	4046, 4042, 4040, 4039, 4037, 4036, 4032, 4030, 233, 203,
	69, 4026, 50, 4025, 4024, 217, 4023, 157, 4022, 152,
	4018, 4016, 4014, 4012, 4011, 4010, 4009, 4008, 4003, 4001,
	4000, 3999, 3996, 3994, 3992, 3988, 3987, 3983, 3982, 3981,
	3980, 3978, 3975, 3960, 56, 3959, 256, 3958, 77, 3956,
	181, 3955, 78, 3952, 84, 133, 246, 2984, 252, 3951,
	190, 3948, 3946, 240, 173, 3945, 3944, 264, 3943, 207,
	229, 172, 105, 137, 3942, 140, 3940, 260, 47, 40,
	241, 149, 57, 163, 124, 3939, 214, 102, 112, 3937,
	3935, 148, 3933, 235, 184, 3931, 106, 3930, 3929, 3928,
	3926, 3925, 200, 191, 3924, 3923, 130, 3922, 3910, 62,
	132, 3908, 79, 123, 166, 122, 3906, 2294, 125, 91,
	3905, 118, 103, 3902, 98, 3901, 3899, 3898, 3897, 183,
	3896, 3895, 138, 74, 3893, 3892, 3889, 67, 3888, 81,
	3887, 28, 3886, 61, 3885, 3884, 3883, 3882, 3881, 3880,
	3879, 3869, 3868, 3867, 3863, 3862, 53, 3860, 3859, 3857,
	3855, 7, 11, 13, 3854, 27, 3852, 167, 3851, 3850,
	162, 3847, 195, 3846, 3845, 100, 95, 3844, 96, 160,
	3843, 9, 29, 68, 3835, 3834, 3831, 333, 3830, 3829,
	3827, 265, 3826, 3824, 3823, 177, 3822, 3820, 3819, 631,
	3818, 3816, 3815, 3814, 3812, 3811, 64, 3810, 1, 216,
	42, 3809, 131, 142, 3808, 37, 30, 3806, 48, 114,
	198, 135, 109, 3805, 3804, 3803, 658, 197, 108, 36,
	0, 101, 236, 171, 3802, 3801, 3798, 250, 3797, 231,
	220, 242, 549, 261, 247, 3796, 3795, 70, 3794, 158,
	33, 52, 141, 85, 22, 205, 3793, 1445, 10, 187,
	3792, 208, 3791, 8, 16, 302, 154, 3788, 3787, 35,
	257, 3786, 3784, 3783, 129, 3769, 3767, 192, 60, 3760,
	3759, 3753, 3750, 39, 3739, 188, 20, 3737, 126, 3736,
	255, 3735, 222, 147, 185, 182, 164, 221, 230, 88,
	82, 3734, 1886, 161, 113, 17, 3733, 224, 3731, 180,
	145, 3730, 90, 3729, 244, 267, 210, 3728, 186, 14,
	45, 41, 31, 44, 12, 282, 204, 3724, 3721, 23,
	49, 3719, 58, 3718, 21, 3716, 3714, 51, 3713, 55,
	5, 3712, 3709, 19, 18, 3708, 38, 209, 169, 128,
	97, 59, 3707, 3706, 143, 136, 3705, 146, 174, 155,
	3701, 80, 3700, 3698, 3697, 3696, 722, 251, 3693, 3692,
	3690, 3689, 3684, 3681, 3680, 3679, 215, 3678, 121, 43,
	3677, 3676, 3675, 3674, 86, 150, 3673, 3672, 3664, 3662,
	32, 144, 3660, 15, 3659, 26, 24, 34, 3658, 104,
	3657, 3, 189, 3655, 3654, 4, 3653, 3652, 2, 3651,
	3649, 120, 3648, 107, 25, 165, 110, 3647, 3646, 92,
	211, 151, 3645, 3643, 99, 237, 201, 3642, 94, 239,
	259, 3639, 206, 3638, 3637, 3636, 3634, 3632, 1246, 3631,
	3629, 238, 75, 93, 3628, 219, 119, 3627, 3625, 89,
	159, 117, 116, 54, 87, 3624, 115, 202, 3622, 196,
	3620, 245, 3618, 3604, 111, 3601, 3600, 3598, 3596, 193,
	3595, 3594, 194, 218, 3593, 3591, 263, 3590, 3589, 3588,
	3586, 3585, 3577, 3575, 3574, 3573, 3571, 232, 248, 3570,
}

//line mysql_sql.y:12848
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 612, 615, 615, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 351, 351, 352, 352, 130, 347, 347, 346, 346,
	131, 132, 133, 591, 591, 134, 135, 165, 590, 590,
	590, 590, 590, 167, 167, 167, 167, 167, 467, 129,
	129, 129, 129, 129, 171, 171, 171, 171, 171, 127,
	597, 597, 597, 598, 598, 124, 154, 153, 156, 156,
	155, 155, 152, 152, 148, 151, 151, 150, 150, 149,
	144, 146, 146, 145, 147, 147, 125, 113, 126, 540,
	540, 539, 539, 538, 538, 492, 492, 493, 493, 338,
	338, 338, 537, 537, 537, 536, 536, 535, 535, 534,
	534, 532, 532, 533, 531, 530, 530, 530, 528, 528,
	528, 524, 524, 526, 525, 525, 527, 519, 519, 522,
	522, 520, 520, 520, 520, 523, 518, 518, 518, 517,
	517, 112, 112, 112, 434, 434, 111, 111, 448, 448,
	448, 448, 448, 446, 446, 446, 446, 446, 446, 445,
	445, 444, 444, 449, 449, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 100, 100, 100, 100,
	100, 100, 100, 107, 105, 105, 105, 106, 603, 603,
	602, 602, 604, 604, 604, 604, 605, 605, 103, 103,
	103, 104, 443, 443, 443, 101, 102, 102, 433, 433,
	438, 438, 437, 437, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 442, 442, 442, 440, 440,
	439, 439, 441, 441, 91, 91, 91, 91, 91, 91,
	95, 96, 97, 97, 97, 97, 94, 93, 432, 432,
	432, 432, 432, 432, 432, 432, 432, 92, 92, 92,
	92, 92, 92, 86, 86, 86, 86, 86, 85, 85,
	87, 87, 430, 430, 429, 108, 108, 109, 600, 600,
	599, 601, 601, 601, 601, 110, 116, 116, 116, 116,
	116, 116, 116, 116, 115, 115, 118, 118, 117, 119,
	99, 99, 99, 99, 99, 99, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 565, 565, 565, 565, 566, 566, 365, 366,
	616, 368, 364, 364, 364, 561, 561, 562, 563, 564,
	564, 564, 114, 14, 222, 222, 466, 466, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 13, 84,
	89, 89, 90, 301, 301, 302, 296, 296, 303, 303,
	170, 304, 304, 304, 309, 309, 310, 310, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	281, 281, 281, 276, 276, 276, 276, 277, 277, 278,
	278, 279, 279, 279, 279, 280, 280, 357, 357, 305,
	305, 305, 307, 307, 306, 300, 298, 298, 298, 298,
	298, 298, 298, 299, 299, 299, 299, 308, 308, 82,
	88, 88, 88, 88, 578, 578, 83, 83, 589, 589,
	496, 496, 379, 379, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	501, 502, 375, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 79, 80, 81, 54, 57, 58, 169, 172, 172,
	172, 172, 53, 53, 53, 419, 419, 52, 617, 617,
	350, 350, 67, 66, 56, 68, 69, 70, 71, 72,
	73, 51, 65, 65, 65, 65, 65, 65, 65, 65,
	76, 513, 513, 619, 619, 619, 74, 75, 495, 495,
	495, 64, 63, 62, 61, 60, 60, 50, 50, 49,
	49, 55, 160, 59, 161, 161, 372, 372, 372, 374,
	374, 370, 618, 618, 462, 462, 373, 373, 48, 48,
	48, 48, 77, 371, 371, 349, 369, 369, 369, 12,
	12, 10, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 26,
	27, 29, 427, 427, 424, 28, 20, 19, 19, 23,
	22, 18, 18, 21, 24, 25, 25, 9, 9, 9,
	9, 15, 15, 16, 194, 194, 248, 248, 572, 572,
	568, 568, 569, 569, 569, 570, 570, 571, 571, 120,
	507, 507, 507, 507, 507, 507, 8, 8, 217, 217,
	506, 506, 506, 506, 506, 506, 431, 431, 431, 550,
	550, 550, 551, 216, 216, 211, 211, 508, 508, 396,
	552, 552, 516, 516, 515, 515, 514, 514, 214, 214,
	215, 215, 197, 197, 139, 139, 521, 521, 521, 521,
	529, 529, 491, 491, 286, 286, 340, 340, 341, 341,
	184, 184, 185, 185, 185, 185, 185, 185, 606, 606,
	607, 608, 609, 609, 610, 610, 610, 611, 611, 611,
	611, 611, 558, 558, 560, 560, 559, 213, 213, 209,
	209, 210, 210, 210, 208, 208, 207, 206, 206, 205,
	203, 203, 203, 204, 204, 204, 221, 221, 187, 187,
	187, 186, 186, 186, 186, 186, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 188, 191,
	191, 192, 192, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 318, 318, 319, 319, 319, 319, 319,
	137, 137, 500, 500, 317, 317, 189, 189, 190, 190,
	190, 190, 316, 316, 315, 202, 202, 201, 200, 200,
	200, 195, 195, 195, 195, 195, 196, 327, 327, 326,
	326, 325, 325, 325, 325, 328, 123, 136, 136, 138,
	220, 220, 324, 323, 323, 323, 323, 219, 219, 218,
	218, 212, 212, 199, 199, 199, 199, 322, 198, 320,
	596, 596, 595, 595, 594, 592, 592, 592, 593, 593,
	593, 593, 542, 542, 542, 542, 542, 358, 358, 358,
	363, 363, 361, 361, 361, 361, 361, 367, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	39, 231, 232, 40, 233, 233, 234, 234, 235, 235,
	236, 237, 238, 238, 238, 238, 38, 223, 223, 224,
	224, 225, 225, 226, 227, 227, 227, 230, 228, 229,
	229, 614, 614, 613, 37, 37, 30, 175, 175, 176,
	176, 176, 178, 178, 282, 282, 282, 177, 177, 179,
	179, 179, 573, 575, 575, 577, 576, 576, 576, 579,
	579, 579, 579, 579, 580, 580, 580, 580, 581, 581,
	31, 157, 157, 182, 182, 162, 584, 584, 584, 583,
	583, 585, 585, 586, 586, 344, 344, 345, 345, 173,
	174, 174, 164, 159, 181, 181, 181, 181, 181, 183,
	183, 250, 250, 158, 163, 166, 168, 574, 582, 582,
	582, 428, 428, 425, 426, 426, 423, 422, 422, 422,
	588, 588, 587, 587, 587, 359, 359, 32, 418, 418,
	420, 421, 421, 421, 412, 412, 412, 412, 36, 416,
	416, 417, 417, 417, 417, 417, 417, 417, 413, 413,
	415, 415, 411, 411, 411, 411, 411, 411, 411, 35,
	180, 180, 410, 410, 407, 407, 405, 405, 406, 406,
	404, 404, 404, 408, 408, 43, 78, 44, 45, 46,
	42, 409, 409, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 141, 140, 140, 140, 140, 140, 143,
	143, 343, 343, 342, 342, 142, 283, 283, 41, 261,
	261, 483, 483, 478, 478, 478, 478, 478, 498, 498,
	498, 479, 479, 479, 480, 480, 480, 482, 482, 482,
	481, 481, 481, 481, 481, 497, 497, 499, 499, 499,
	450, 450, 451, 451, 451, 454, 454, 470, 470, 471,
	471, 469, 469, 476, 476, 475, 475, 474, 474, 473,
	473, 472, 472, 472, 472, 465, 465, 464, 464, 452,
	452, 452, 452, 452, 453, 453, 453, 463, 463, 468,
	468, 314, 314, 313, 313, 269, 269, 270, 270, 312,
	312, 267, 267, 268, 268, 268, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 548, 548, 549, 272, 272, 284, 284, 284,
	284, 284, 284, 271, 271, 273, 273, 249, 249, 247,
	247, 239, 239, 239, 239, 239, 239, 240, 240, 241,
	241, 242, 242, 242, 246, 246, 245, 245, 245, 245,
	243, 243, 244, 244, 244, 244, 244, 244, 436, 436,
	545, 545, 546, 546, 541, 541, 541, 544, 544, 544,
	544, 544, 544, 544, 547, 547, 547, 543, 543, 251,
	337, 337, 337, 360, 360, 360, 360, 362, 336, 336,
	336, 266, 266, 265, 265, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 435, 435, 376,
	376, 377, 377, 295, 294, 294, 294, 294, 294, 292,
	293, 291, 291, 291, 291, 291, 288, 288, 287, 287,
	287, 289, 289, 289, 289, 289, 414, 414, 285, 285,
	275, 275, 275, 274, 274, 274, 477, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 290, 334, 334,
	334, 335, 335, 335, 335, 335, 335, 335, 335, 386,
	386, 392, 392, 557, 557, 556, 252, 252, 252, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 262, 262,
	262, 459, 459, 459, 459, 460, 460, 460, 460, 461,
	461, 461, 457, 457, 458, 458, 397, 398, 398, 504,
	504, 505, 505, 455, 455, 456, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 512,
	512, 512, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 567, 567,
	567, 553, 553, 553, 554, 554, 554, 554, 554, 554,
	554, 554, 554, 554, 554, 554, 555, 555, 555, 555,
	555, 555, 555, 555, 555, 555, 555, 555, 555, 555,
	555, 555, 555, 332, 332, 332, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 399, 399, 400, 400, 509, 509,
	509, 509, 509, 509, 510, 510, 511, 511, 511, 511,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	384, 329, 329, 329, 401, 393, 393, 394, 394, 395,
	395, 387, 387, 387, 387, 387, 387, 388, 388, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 389, 389, 391, 391, 403, 403, 403, 402, 402,
	402, 402, 402, 402, 402, 264, 264, 264, 264, 381,
	381, 381, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 254, 254, 254, 254, 258, 258,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 259, 259, 259, 259, 259, 257,
	257, 257, 257, 257, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 121, 122, 122, 256, 339, 339, 484,
	484, 487, 487, 485, 485, 486, 488, 488, 488, 489,
	489, 489, 490, 490, 490, 494, 494, 348, 348, 348,
	356, 356, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	1, 2, 3, 9, 9, 10, 10, 11, 1, 5,
	6, 8, 10, 9, 5, 7, 9, 8, 6, 4,
	0, 1, 1, 0, 1, 5, 2, 2, 6, 9,
	6, 9, 4, 7, 8, 0, 1, 1, 2, 4,
	6, 1, 2, 4, 0, 2, 10, 11, 2, 0,
	2, 1, 3, 3, 3, 0, 2, 0, 2, 1,
	3, 5, 0, 2, 3, 1, 3, 1, 1, 1,
	3, 1, 1, 1, 1, 0, 3, 3, 0, 3,
	3, 0, 1, 3, 0, 1, 3, 0, 2, 1,
	2, 3, 4, 3, 3, 1, 0, 1, 1, 0,
	1, 8, 5, 7, 0, 3, 8, 5, 1, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 4, 1, 3, 1, 2, 2, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 2, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 2, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 1, 1, 2,
	2, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 6, 3, 4, 4, 5, 1, 3,
	3, 1, 2, 2, 2, 1, 2, 2, 3, 4,
	4, 6, 1, 1, 1, 2, 4, 6, 1, 4,
	1, 3, 3, 4, 4, 4, 4, 3, 3, 2,
	4, 4, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	2, 3, 3, 4, 5, 4, 2, 2, 0, 1,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 3, 4, 4, 1, 2,
	9, 7, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 2, 4, 3, 3,
	1, 1, 1, 1, 1, 1, 2, 3, 4, 7,
	2, 3, 3, 4, 3, 4, 4, 5, 3, 4,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 1, 1,
	1, 1, 6, 4, 1, 1, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 10, 7,
	4, 4, 3, 1, 3, 3, 1, 3, 1, 6,
	7, 3, 3, 3, 1, 1, 1, 3, 2, 4,
	5, 5, 6, 5, 5, 3, 2, 2, 1, 3,
	4, 3, 7, 5, 8, 2, 2, 1, 3, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 2, 1, 3, 2, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 6, 3, 3, 1, 1, 7,
	7, 7, 8, 8, 0, 4, 7, 6, 0, 3,
	0, 2, 0, 1, 1, 1, 1, 4, 2, 2,
	3, 3, 4, 5, 3, 4, 4, 2, 2, 2,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 4, 3, 3, 3, 4, 5,
	6, 5, 2, 5, 5, 0, 2, 7, 0, 1,
	0, 1, 5, 5, 3, 3, 2, 4, 4, 4,
	4, 4, 1, 1, 1, 3, 3, 1, 1, 1,
	6, 0, 1, 1, 1, 1, 5, 5, 0, 1,
	1, 3, 3, 3, 4, 7, 7, 5, 4, 7,
	8, 3, 3, 2, 3, 4, 0, 2, 2, 0,
	2, 2, 1, 1, 1, 1, 0, 1, 5, 5,
	6, 4, 3, 1, 3, 1, 1, 3, 5, 2,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 1, 3, 1, 4, 6, 6, 4, 4,
	4, 4, 4, 3, 6, 3, 5, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 5, 5, 1, 3,
	2, 1, 5, 4, 4, 2, 0, 5, 4, 0,
	1, 3, 3, 1, 3, 1, 3, 1, 3, 4,
	0, 1, 0, 1, 1, 3, 1, 1, 0, 4,
	1, 3, 2, 1, 0, 8, 0, 4, 7, 4,
	0, 2, 0, 2, 0, 2, 0, 4, 1, 3,
	1, 1, 6, 4, 5, 7, 4, 5, 0, 1,
	3, 8, 0, 6, 0, 4, 6, 1, 1, 1,
	1, 1, 2, 3, 1, 3, 6, 0, 3, 0,
	1, 2, 4, 4, 0, 1, 3, 1, 3, 3,
	0, 1, 1, 0, 2, 2, 0, 2, 3, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 7, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 4, 7, 6, 6,
	3, 5, 0, 2, 0, 2, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 3, 1, 1, 1,
	1, 4, 4, 4, 3, 4, 3, 2, 2, 2,
	2, 2, 3, 2, 3, 2, 4, 1, 3, 4,
	0, 2, 1, 1, 2, 2, 2, 0, 1, 2,
	4, 1, 3, 1, 3, 2, 3, 1, 4, 3,
	0, 1, 1, 2, 5, 2, 2, 2, 0, 2,
	3, 3, 0, 1, 3, 1, 3, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 1, 7, 1, 3, 0, 1, 1, 3,
	1, 3, 0, 1, 1, 1, 14, 1, 3, 0,
	1, 1, 3, 1, 1, 2, 4, 1, 1, 1,
	1, 0, 1, 2, 9, 9, 7, 1, 2, 3,
	3, 3, 0, 4, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 4, 1, 1, 1, 3,
	3, 4, 3, 3, 0, 1, 1, 1, 0, 2,
	7, 8, 10, 2, 2, 8, 0, 3, 3, 0,
	3, 0, 3, 0, 5, 1, 3, 0, 3, 3,
	0, 2, 9, 8, 0, 2, 2, 3, 3, 0,
	2, 0, 2, 4, 4, 4, 4, 1, 0, 2,
	2, 1, 3, 2, 1, 3, 2, 1, 3, 2,
	0, 1, 3, 4, 3, 1, 1, 4, 1, 3,
	1, 1, 1, 1, 0, 1, 1, 1, 11, 0,
	2, 3, 3, 2, 2, 3, 1, 1, 1, 3,
	3, 4, 0, 2, 2, 2, 2, 2, 2, 6,
	0, 4, 1, 1, 0, 3, 0, 1, 1, 2,
	4, 4, 4, 0, 1, 8, 2, 4, 4, 4,
	9, 0, 2, 11, 9, 11, 8, 6, 9, 7,
	10, 7, 6, 2, 2, 9, 4, 5, 3, 0,
	4, 1, 3, 0, 3, 6, 0, 2, 10, 0,
	2, 0, 2, 0, 3, 2, 4, 3, 0, 2,
	1, 0, 2, 3, 0, 2, 3, 0, 2, 1,
	0, 3, 2, 4, 3, 0, 1, 0, 1, 1,
	0, 6, 0, 3, 5, 0, 4, 0, 3, 1,
	3, 4, 5, 0, 3, 1, 3, 2, 3, 1,
	2, 0, 4, 6, 5, 0, 2, 0, 2, 4,
	5, 4, 5, 1, 5, 6, 5, 0, 3, 0,
	1, 1, 3, 3, 3, 0, 4, 1, 3, 3,
	3, 0, 1, 1, 3, 2, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 5,
	4, 5, 1, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 0, 5, 5, 5, 5, 6, 0, 1, 1,
	3, 1, 1, 1, 1, 1, 7, 9, 7, 9,
	2, 1, 7, 9, 7, 9, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 3,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 2, 1, 2, 2, 1, 1,
	2, 2, 2, 3, 3, 2, 2, 1, 5, 6,
	4, 1, 1, 1, 5, 4, 1, 1, 2, 0,
	1, 1, 2, 5, 0, 1, 1, 2, 2, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 2, 2,
	2, 0, 4, 7, 3, 3, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 3, 5, 2, 2, 2, 2, 4,
	1, 1, 2, 5, 6, 8, 6, 6, 6, 1,
	1, 1, 1, 1, 1, 3, 9, 1, 4, 4,
	4, 7, 9, 7, 7, 7, 9, 7, 7, 0,
	2, 0, 1, 1, 2, 4, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 2, 2, 2, 0, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 5, 0, 1, 3, 0, 1, 0,
	2, 0, 2, 0, 1, 6, 8, 8, 6, 6,
	5, 5, 5, 6, 6, 6, 6, 5, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 1,
	1, 1, 4, 4, 6, 8, 6, 4, 5, 4,
	4, 4, 3, 4, 6, 6, 7, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 8, 4, 2, 3, 2,
	4, 2, 2, 4, 6, 2, 2, 4, 6, 4,
	2, 4, 4, 4, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 3, 0, 1, 1, 3, 1,
	3, 3, 3, 3, 3, 2, 1, 1, 1, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 1,
	3, 4, 4, 5, 4, 5, 3, 4, 5, 6,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 2, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 4, 1, 2, 3, 5, 1, 1, 3, 0,
	1, 0, 3, 0, 3, 3, 0, 3, 5, 0,
	3, 5, 0, 1, 1, 0, 1, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int{
	-1000, -612, -615, -2, -5, 632, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -184, -127, -128,
	-129, -171, -132, -134, -135, 622, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 555, 628, 458, 14, 507, -15, -16, -558, -17,
	267, -364, -365, -366, -368, -616, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -172,
	-131, -79, -80, -81, -83, -82, -88, -84, -89, -159,
	-164, -13, -170, -90, 241, -87, 77, -101, -102, -103,
	-104, -105, -106, -107, -109, -110, 382, 388, 445, 621,
	62, -185, -187, 650, 651, 654, 542, 545, 163, 164,
	166, 167, 171, 174, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 237, 16, 550,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-158, -25, -163, -23, -166, -168, -133, 262, 261, 39,
	328, 329, 330, 386, 260, 238, 240, 15, 32, 43,
	361, -186, 86, 543, 239, -188, 13, 656, -6, -3,
	-2, -144, -148, -152, -155, -156, -153, -154, -4, -122,
	121, 252, 623, -360, 378, 624, 626, 625, 89, 97,
	-353, -355, 458, 267, 382, 388, 621, 651, 654, 542,
	545, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 568, 569, 570, 571, 572, 582, 583, 573, 574,
	575, 576, 577, 578, 579, 580, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	510, 607, 608, 609, 610, 538, 565, 601, 602, 603,
	604, 359, 360, 547, 279, 303, 413, 309, 316, 163,
	183, 177, 206, 197, 543, 172, 283, 321, 284, 96,
	166, 493, 111, 470, 442, 169, 298, 300, 302, 539,
	540, 372, 305, 537, 304, 306, 308, 541, 285, 362,
	193, 188, 297, 281, 186, 286, 41, 287, 211, 288,
	289, 552, 466, 358, 472, 313, 53, 440, 187, 467,
	301, 469, 215, 219, 484, 485, 181, 182, 474, 487,
	210, 213, 214, 259, 355, 356, 44, 549, 271, 488,
	217, 646, 209, 204, 496, 317, 315, 208, 180, 203,
	282, 66, 221, 220, 222, 436, 437, 438, 439, 290,
	291, 376, 483, 200, 189, 363, 173, 23, 491, 266,
	471, 389, 292, 310, 318, 216, 218, 273, 278, 333,
	551, 444, 277, 314, 489, 185, 270, 299, 265, 492,
	647, 174, 391, 293, 167, 307, 486, 649, 495, 65,
	404, 179, 170, 639, 640, 256, 164, 275, 280, 648,
	294, 295, 296, 536, 320, 319, 311, 171, 544, 201,
	272, 207, 191, 178, 202, 165, 274, 494, 405, 619,
	361, 423, 199, 196, 276, 249, 490, 473, 168, 427,
	406, 194, 322, 614, 615, 616, 377, 354, 323, 324,
	192, 263, 464, 465, 327, 433, 345, 407, 443, 414,
	408, 228, 229, 331, 476, 478, 212, 617, 334, 335,
	336, 468, 337, 338, 339, 340, 381, 57, 59, 98,
	101, 100, 652, 653, 64, 30, 367, 370, 402, 409,
	347, 620, 548, 344, 348, 349, 371, 26, 425, 393,
	429, 428, 49, 50, 51, 54, 55, 56, 58, 60,
	61, 52, 535, 386, 399, 497, 46, 48, 396, 28,
	373, 424, 446, 343, 426, 457, 47, 455, 456, 477,
	27, 375, 374, 63, 45, 432, 434, 435, 325, 341,
	384, 629, 498, 379, 395, 398, 380, 346, 369, 400,
	68, 67, 392, 630, 387, 385, 342, 553, 554, 350,
	581, 364, 441, 532, 531, 530, 529, 528, 527, 526,
	525, 328, 329, 330, 410, 411, 412, 422, 415, 416,
	417, 418, 419, 420, 421, 460, 461, 631, 479, 481,
	482, 480, 244, 655, 365, 366, 247, 633, 634, 99,
	635, 637, 636, 29, 638, 645, 642, 643, 644, 556,
	232, -441, -439, -360, 543, 621, 388, 542, 545, 382,
	361, 651, 654, 386, 267, 328, 329, 330, 458, 359,
	-233, -360, 655, -197, 251, 40, -247, -360, -197, -87,
	-16, -15, -186, -187, -247, 246, -369, 24, 440, -99,
	441, 241, 242, 86, 78, -360, -9, -113, -8, -120,
	-85, -184, 445, -367, -360, 328, 328, -367, 246, -362,
	277, 421, -360, -496, 252, -445, -418, 278, -444, -420,
	-447, -421, 33, 237, 239, 238, 555, 274, 16, 386,
	248, 14, 13, 387, 260, 26, 27, 29, 15, 388,
	390, 30, 391, 394, 395, 396, 43, 399, 400, 267,
	89, 97, 92, 285, -232, -360, -395, -387, 118, -390,
	-382, -383, -385, -338, -532, -380, 86, 145, 146, 153,
	119, 657, -384, -477, 37, 121, 561, 565, 601, 508,
	-330, -331, -332, -333, -334, -335, 546, -360, -533, -531,
	92, 102, 104, 108, 109, 107, 105, 157, 190, 106,
	93, 158, -187, 89, -553, 571, -354, 594, 607, 608,
	609, 610, 593, 62, -503, -511, 245, -509, 156, 195,
	263, 191, 14, 151, 433, 192, 602, 603, 604, 568,
	590, 510, 572, 582, 597, 563, 564, 566, 558, 559,
	560, 562, 573, 575, 589, -512, 585, 595, 596, 581,
	605, 606, 642, 598, 599, 600, 637, 91, 90, 588,
	587, 574, 569, 570, 576, 557, 567, 577, 578, 586,
	591, 592, 370, 111, 371, 372, 500, 362, 81, 373,
	252, 440, 71, 374, 375, 376, 377, 378, 507, 379,
	72, 380, 369, 267, 423, 381, 194, 212, 512, 511,
	513, 504, 501, 499, 502, 503, 505, 506, 579, 580,
	584, -136, -138, 612, -606, -321, -607, 6, 7, 8,
	9, -608, 158, -597, 442, 551, 92, 321, 359, 17,
	500, 641, 541, 641, 541, 168, 165, -432, 168, 117,
	174, 173, 250, 168, -432, -360, 171, 641, 170, 639,
	331, 273, -409, -175, 359, 423, 337, 98, 277, -412,
	-410, 539, -497, 325, 321, 297, 247, 114, -176, 257,
	256, 112, 500, 245, 397, 316, 57, 59, -568, -569,
	234, 235, 236, -560, 533, -559, -360, 641, 646, 372,
	100, 101, 639, 640, 28, 246, 383, 273, 478, 476,
	477, 479, 480, 481, 482, -65, -513, -495, 473, 472,
	-373, 465, 471, 463, 475, 466, 360, 339, 555, 338,
	237, 633, 540, 534, -348, 407, 443, 497, 498, 384,
	444, 484, 486, 467, 111, 198, 195, 247, 249, 246,
	639, 359, 500, 423, 98, 337, 246, -568, 646, 165,
	484, 486, 442, 277, 421, 42, -438, 433, -437, -439,
	485, 496, 90, 91, 483, -348, 111, 464, 464, -606,
	-321, -185, -187, -123, -558, 541, 641, 247, 359, 423,
	277, 248, 246, 536, 539, 249, 500, 245, 328, 383,
	273, 337, 98, 170, 639, -191, -192, -193, 230, 231,
	232, 70, 235, 233, 67, 33, 34, 35, -1, 125,
	656, -387, -387, -6, 659, -6, -387, -360, -360, 160,
	-254, -258, -255, -257, -256, -260, -259, 195, 196, 156,
	199, 205, 201, 202, 203, 204, 206, 207, 208, 209,
	210, 213, 214, 211, 32, 212, 263, 191, 192, 193,
	194, 215, 177, 197, 548, 223, 178, 224, 179, 225,
	180, 226, 181, 182, 227, 183, 186, 187, 188, 189,
	185, 159, -222, 92, 33, 86, 159, 92, -214, 269,
	-197, -247, -239, 159, 657, -214, -606, -207, -208, 11,
	-247, -336, -360, 442, 128, -99, 78, -99, 441, 78,
	-99, 441, 241, -561, -562, -563, -565, 241, 441, 440,
	242, -118, 159, 285, 17, -367, -367, 84, -247, -420,
	277, -445, -418, 37, 83, 160, 250, 160, 83, 86,
	384, 359, 423, 385, 500, 246, 397, 249, 277, 398,
	359, 423, 246, 249, 500, 277, 359, 246, 249, 423,
	277, 398, 359, 463, 464, 249, 28, 389, 392, 393,
	464, -517, 496, 160, 117, 114, 115, 116, -387, 135,
	-402, 128, 129, 130, 131, 132, 133, 134, 142, 141,
	152, 145, 146, 147, 148, 149, 150, 151, 143, 144,
	138, 118, 136, 140, 137, 120, 155, -187, -387, -395,
	62, -385, -385, -385, -385, -360, -477, -392, -387, 86,
	86, 86, 86, 86, 159, 105, 92, -387, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	-510, 86, 86, -399, -400, 86, 86, -380, -336, 86,
	92, 92, 86, 86, 86, 92, 86, 86, 86, -400,
	-400, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, -208, 160, -207,
	86, -207, -208, -188, -187, 33, 34, 33, 34, 33,
	34, 33, 34, -609, 630, 86, 102, 652, 228, 17,
	-360, 639, -360, -591, 33, 544, 544, 544, 544, 489,
	550, 172, 173, 174, -360, 171, 250, -360, -407, 252,
	-407, -407, -231, -360, -233, 383, 249, 536, 249, -176,
	-407, -407, -407, -407, -407, 248, -407, 24, 246, 246,
	246, 246, -407, 507, 128, 128, 60, -570, 176, 160,
	-560, -213, 86, -591, 647, 648, 649, -372, 136, 140,
	-372, -317, 18, -317, 24, 24, 275, 275, 275, -372,
	315, -617, -618, 17, 138, -370, -618, -370, -370, -372,
	-619, 248, 474, 44, 276, 275, -209, -210, 22, -209,
	468, 464, -462, 469, 470, -374, -618, -373, -372, -372,
	-373, -372, -372, -372, 33, 246, 249, 500, 337, 634,
	-617, -617, 32, 32, -496, -496, -247, -496, -496, 534,
	-349, -360, -496, -496, -496, -301, -302, -247, -571, 251,
	649, -603, -602, 487, -605, 489, 165, -439, 165, -439,
	89, -420, 277, 277, 160, 128, 24, -440, 128, 139,
	-439, -439, -440, -440, -271, 42, -359, 156, -360, 92,
	-271, 42, -600, -599, -247, -208, -188, -187, 87, 87,
	87, 544, -591, -496, -496, -496, -496, -496, -497, -496,
	-496, -496, -496, -496, -367, -223, -360, -233, 252, -496,
	-496, -496, -496, -189, -190, 147, -387, -360, -193, -3,
	-146, -145, 122, 123, 125, 624, 378, 623, 627, 621,
	-439, 42, -490, 405, 404, -484, -486, 86, -485, 86,
	-485, -485, -485, -485, -485, 86, 86, -487, 86, -487,
	-487, -484, -488, 86, -488, -489, 86, -489, -488, -360,
	-466, 550, -393, -395, -360, 40, -506, 62, -184, 86,
	32, 86, -214, -360, 192, 170, 638, 36, -507, 62,
	-184, 86, 32, -208, -139, 40, -210, 21, 159, 102,
	92, -118, -99, 78, -118, -99, -99, 87, 160, -564,
	108, 109, -566, 210, 201, -360, -116, 92, -7, -8,
	-9, -10, -47, -85, -82, -184, 238, 542, 545, -534,
	-532, 86, 33, 432, 83, 17, -446, 246, 500, 383,
	273, 249, 359, -444, -427, -424, -422, -359, -420, -423,
	-422, -449, -336, 464, -140, 447, 446, 327, -387, -387,
	-387, -387, -387, 107, 118, 354, 108, 109, -382, -403,
	33, 323, 324, -383, -383, -383, -383, -383, -383, -383,
	-383, -383, -383, -383, -383, -391, -401, -477, 86, 138,
	136, 140, 137, 120, -385, -385, -383, -383, -273, -359,
	156, 87, 160, -387, -557, -556, 122, -387, -387, -387,
	-387, -413, -415, -336, 86, -360, -554, -555, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 374,
	369, 375, 373, 362, 381, 376, 377, 194, 531, 532,
	525, 526, 527, 528, 529, 530, -393, -393, -387, -554,
	-393, -329, 34, 33, -395, -395, -395, 87, -387, -567,
	352, 351, 353, -211, -360, -393, 87, 87, 87, 102,
	-395, -395, -393, -383, -393, -393, -393, -393, -555, -329,
	-329, -329, -329, 147, -395, -395, -329, -329, -329, -329,
	147, -329, -329, -329, -329, -329, -329, -329, -329, -329,
	-329, -329, 87, 87, 87, 147, -395, -209, -138, -515,
	-514, -387, 42, -139, -210, -610, 631, 86, -336, -598,
	92, 92, 657, 170, 639, 17, 500, -360, 17, 246,
	-360, 102, -360, 102, 490, 491, 169, 173, 172, -360,
	171, -360, -360, 118, -360, -360, 36, 86, -223, -407,
	-407, -407, -575, -360, 93, -428, -425, -422, -360, -360,
	-418, -360, -349, -247, -407, -407, -407, -407, -247, -282,
	54, 55, 56, -422, -177, 57, 58, -571, -559, 36,
	-212, -360, -317, -385, -385, -387, 359, 500, 246, -422,
	277, -617, -372, -372, -350, -349, -374, -369, -374, -374,
	-317, -370, -372, -372, -387, -374, -370, -317, -360, 464,
	-317, -317, -462, -372, -371, -360, -371, -407, -349, -350,
	-350, -247, -247, -296, -303, -297, -304, 269, 243, 367,
	368, 240, 238, 11, 239, -311, 316, -408, 508, -277,
	-278, 78, 43, -280, 267, 409, 402, 279, 283, 96,
	284, 442, 285, 248, 287, 288, 289, 304, 306, 259,
	290, 291, 292, 433, 293, 164, 305, 294, 295, 296,
	385, -272, 6, 340, 550, 42, 52, 53, 456, 455,
	553, 280, -360, -575, -573, 32, -360, 32, -428, -422,
	-360, -360, 160, 250, -200, -202, -199, -195, -196, -201,
	-320, -322, -198, 86, -247, -187, -360, -439, 160, 488,
	490, 491, -603, -440, -603, -440, 250, 33, 432, -443,
	432, 33, -418, -437, 484, 486, -433, 92, 433, -423,
	-442, 83, 156, -514, -440, -440, -442, -442, 155, 160,
	-601, 489, 490, 234, -209, 102, -249, -247, -575, -427,
	-418, -360, -496, -249, -249, -249, -362, -362, 86, 159,
	37, -360, -360, -360, -360, -316, 160, -315, 17, -361,
	-360, 36, 92, 159, -147, -145, 124, -387, -6, 623,
	-387, -6, -6, -387, -6, -387, -494, 406, 102, 102,
	-339, 92, -339, 102, 102, 102, 556, 87, 92, -431,
	83, -508, -396, -552, 612, -216, 87, -211, -550, -551,
	-211, -215, -360, -506, -239, 128, 128, 128, 25, -508,
	-216, 87, -550, -209, 613, -139, -206, -205, -387, -360,
	24, -118, -99, -562, 159, 359, 160, -212, -446, -426,
	-423, -448, 147, -360, -434, 160, 550, 660, 90, 250,
	-588, -587, 424, 87, 160, -518, 251, 507, 92, 657,
	440, 228, 229, 107, 354, 108, 109, -477, -395, -391,
	-385, -385, -383, -383, -389, 264, -389, 117, -387, 658,
	-386, -556, 124, -387, 36, 160, 36, 160, 84, 160,
	87, -484, -387, 159, 87, 87, 17, 17, 87, -387,
	87, 87, 87, 87, 17, 17, -387, 87, 159, 87,
	87, 87, 87, 84, 87, 160, 87, 87, 87, 87,
	160, -395, -395, -387, -395, 87, 87, 87, -387, -387,
	-387, -395, 87, -387, -387, -387, -387, -387, -387, -387,
	-387, -387, -387, -212, -456, 459, -456, -456, 160, 160,
	160, 87, -139, 86, 102, 160, 653, -343, -342, 92,
	-360, -360, 170, 639, -360, 92, 639, -360, 92, 170,
	174, 174, 173, -360, 92, 37, 24, 24, -232, -234,
	-235, -236, -237, -238, 138, 161, 162, 86, -247, -247,
	-247, -577, 410, -589, 160, 42, -587, 500, -173, 327,
	-411, 84, -180, 17, 550, -247, -247, -247, -247, -261,
	36, 17, -194, -248, -360, 86, 87, 160, -360, -360,
	-360, -419, 84, -360, -350, -317, -317, -374, -317, -317,
	160, 23, -372, -374, -374, -239, -370, -239, 159, -239,
	-349, -483, 36, -213, 160, 21, 269, -246, -357, -243,
	-245, 254, -377, -244, 257, -546, 255, 253, 112, 258,
	312, 113, 248, -357, -357, 254, -281, 250, 36, -357,
	-299, 248, 357, 312, 255, 21, 269, -298, 248, 113,
	-360, 254, 258, 255, 253, -356, 128, -348, 155, 250,
	44, 385, -356, 554, 269, -356, -356, -356, -356, -356,
	-356, -356, 286, 286, -356, -356, -356, -356, -356, -356,
	-356, -356, -356, -356, -356, 165, -356, -356, -356, -356,
	-356, -356, 86, 332, 281, 282, 314, -578, 410, 32,
	365, 365, 366, -589, 361, 32, -181, 359, -302, -300,
	-371, 32, -323, -324, -325, -326, -328, -327, 69, 73,
	75, 79, 70, 71, 72, 76, 81, 74, 32, 160,
	-358, -363, 36, -360, 92, -358, -187, -202, -200, -358,
	86, -440, -602, -604, 492, 489, 495, -442, -442, 102,
	250, 86, 128, -442, -442, 42, -359, -599, 496, 490,
	-139, 160, 83, -249, -224, -225, -226, -227, -254, -336,
	196, 199, 201, 202, 203, 204, 206, 207, 208, 209,
	210, 213, 214, 211, 212, 263, 191, 192, 193, 194,
	215, 177, 197, 548, 178, 179, 180, 181, 182, 183,
	186, 187, 188, 189, 185, -360, -233, -317, -190, -202,
	-360, 92, -360, 147, 125, -6, 123, -151, -150, -149,
	126, 621, 627, 125, 125, 125, 87, 87, 87, 160,
	87, 87, 87, 160, 87, 160, 102, -521, 469, 41,
	160, 86, 87, 160, 62, 160, 128, 87, 160, -387,
	-360, 92, -387, 192, 87, 62, -139, 92, 160, -203,
	38, 39, 159, 442, -360, -532, 87, -448, 160, 250,
	159, 159, -424, 388, -359, -426, 21, 550, -336, 40,
	-343, 128, 657, -360, 87, -389, -389, 117, -385, -382,
	87, 125, -387, 123, -252, -254, 404, 405, -387, -252,
	-253, -259, 156, 195, 263, 194, 193, 191, 404, 405,
	-271, -415, 547, -203, 87, -360, -387, -387, 87, -387,
	-387, 17, -360, -271, -383, -387, -208, -208, 87, 87,
	-455, -456, -455, -455, 87, 87, 87, 87, -455, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	86, 102, 104, 102, 104, -514, -611, 64, 629, 63,
	432, 107, 317, 160, 102, 92, 658, 160, 128, 92,
	-360, -360, 17, 246, -360, 17, 174, 92, -590, 321,
	359, 500, 246, 359, 321, 500, 246, 396, 87, 160,
	-336, -224, -213, 86, -213, -580, 471, 412, 422, -356,
	-379, -378, 361, 43, -501, 433, 418, 419, -425, 277,
	-349, -586, 99, 128, 83, 344, 348, 349, 345, 346,
	347, -405, -406, -404, -408, -573, 86, 86, -184, 36,
	136, -180, 86, 86, 36, -478, 334, -254, -247, -194,
	-360, 17, 160, -572, 159, -1, -360, -360, -418, -372,
	-317, -387, -387, -317, -372, -372, -374, -360, -239, -478,
	-254, 36, -297, 243, 239, -452, 314, 315, -453, -468,
	317, -470, 86, -251, -336, -244, -545, -546, -407, -360,
	113, -545, 113, 86, -251, -336, -336, -300, -336, -360,
	-360, -360, -360, -307, -306, -336, -309, 33, -310, -360,
	-360, -360, -360, 113, -360, 113, -276, 42, 49, 50,
	51, -356, -356, 198, -279, 42, 432, 434, 435, -309,
	102, 102, 102, 102, 92, 92, 92, -356, -356, 102,
	92, -363, 92, -547, 173, 46, 47, 102, 102, 102,
	102, 42, 92, -284, 42, 297, 301, 298, 299, 300,
	92, 102, 42, 102, 42, 102, 42, -360, 86, -548,
	-549, 92, 333, -467, 102, -580, -356, 365, -439, 128,
	128, -379, -582, 96, 413, -585, 327, -183, 500, 33,
	-217, 243, 239, -573, -430, -429, -336, -199, -199, -199,
	-199, -199, -199, 69, 80, 69, 69, 69, 74, 69,
	74, 69, -325, 69, 80, -430, -201, -213, -363, 87,
	-596, -595, -594, -592, 77, 251, 78, -393, -442, 489,
	493, 494, -426, -375, 92, -433, -221, 24, -247, -247,
	-499, 307, 308, 87, 160, -254, -319, 19, 159, 121,
	-6, -147, -149, -387, -6, -387, 623, 378, 624, 92,
	102, 102, -529, 453, 448, 450, 113, -396, -516, -515,
	62, -184, -211, -508, -551, -514, -360, 658, 658, 658,
	658, 92, 62, -184, -508, -221, -521, -205, -204, 45,
	-360, 102, 17, -423, -418, 147, 147, -360, 389, -434,
	92, 411, 92, 246, 658, 92, -343, -382, -387, 87,
	-262, 182, 181, -262, 36, 87, 87, -485, -485, -484,
	-487, -484, -262, -262, 87, 86, -203, 87, 24, 87,
	87, 87, -387, 87, 87, 160, -504, 509, -505, 583,
	-455, -455, -455, -455, -455, -455, -455, -455, -455, -455,
	-455, -455, -455, -455, -455, -455, -455, -398, -397, 269,
	454, 636, 636, 454, 636, 636, 87, 160, -554, 160,
	-351, 322, -351, -342, 92, 250, 92, 170, -360, 92,
	639, 92, -360, -360, -360, 314, -360, 314, -360, -360,
	92, 92, -236, -254, 87, 36, -240, -241, -242, -251,
	-243, -245, 36, -581, 96, -576, 92, -360, 93, -582,
	158, 363, 42, 414, 415, 430, 358, 102, 102, 420,
	-574, -360, -182, 246, 359, -584, 53, 128, 92, -247,
	-404, -348, 155, 288, 337, -314, -313, -360, 92, -240,
	-184, -247, -240, -240, -184, -479, 336, 21, 102, 146,
	-214, 84, 159, -202, -248, -360, 147, 87, -317, -239,
	-317, -317, -372, -479, -184, -464, 318, 86, -462, 86,
	-462, 113, 345, -471, -469, 269, -305, 46, 48, -254,
	-543, -360, -541, -543, -360, -541, -541, -407, -387, -305,
	-251, 250, 32, 239, -308, 342, 343, 348, -435, 313,
	118, -435, 160, -203, 160, -360, -271, -271, 32, 92,
	92, -249, 87, 160, 128, 102, 92, -581, -576, 128,
	-440, 92, 92, -582, 92, 92, -586, 128, -250, 246,
	-349, 160, -217, -217, -317, 160, 128, -219, -218, 83,
	84, -220, 83, -218, -218, 69, 69, -317, -594, -593,
	24, -546, -546, -546, 87, 87, 15, -226, 42, -318,
	20, 21, 147, 125, 123, 125, 125, -360, 87, 87,
	-491, 614, -525, -527, 448, 21, 21, 15, 251, 87,
	-508, 658, -508, -529, 46, 47, -418, -434, 433, -247,
	160, 658, -252, -290, 92, -387, 87, -387, 87, 92,
	87, 92, -208, 21, 87, 160, 87, 87, 87, 160,
	87, 87, -387, 87, -554, -352, 192, 92, -352, 359,
	-361, -360, 17, -360, 92, -360, -467, 314, -467, 314,
	-360, 244, -184, 87, 160, -184, 92, -579, 424, 102,
	42, 102, 158, 416, -502, -174, 96, -249, 33, -217,
	-583, 96, 128, 657, 86, -356, -356, -356, -360, 87,
	160, -356, -356, 87, 87, 87, -269, 550, -480, 268,
	102, 146, 102, 146, 102, -358, -202, -360, -317, -572,
	159, -317, -480, -454, 319, 102, -383, 86, -383, 86,
	-463, 316, 86, 87, 160, -360, -336, -266, -265, -263,
	107, 118, 42, 402, -264, 96, 155, 302, 305, 304,
	280, 303, -295, -376, 83, 408, 342, 343, -408, 614,
	538, 253, 112, 113, 390, -377, 86, 86, 84, 322,
	86, 86, -543, 87, -305, -336, 42, -308, 42, 355,
	313, -306, -360, 155, -271, 87, -549, 92, -554, -579,
	92, -442, -584, 92, -174, -249, -573, -208, -429, -514,
	-387, 86, -387, 86, 69, 11, 19, -380, -387, -395,
	642, 644, 645, 252, -6, 624, 378, -286, 615, 92,
	21, 92, -523, 92, -430, -491, -142, -283, -348, 285,
	87, -289, 138, 550, 87, 87, -455, -455, -458, -457,
	-461, 454, 314, 462, -395, 92, 92, 87, 87, 92,
	-360, 170, 92, 657, 92, -467, 92, -467, 314, -228,
	-254, -178, 550, -269, -242, -178, 21, 550, 362, 42,
	102, 42, 417, 92, -182, 128, 108, 109, -344, -345,
	92, -413, -271, -273, 92, -313, -380, -380, -267, -184,
	36, -268, -311, -408, 550, -141, -140, -267, 550, 86,
	-481, 164, 102, 146, 102, 102, -317, -317, -481, -470,
	21, 87, -449, 87, -449, 86, 128, -383, -469, -472,
	62, -263, 107, -383, 92, -273, -274, 42, 301, 297,
	128, 128, -275, 42, 281, 282, -285, 86, 312, 15,
	198, 86, 113, 113, -247, -413, -413, -544, 344, 345,
	346, 350, 348, 349, 347, -544, -413, -413, 86, -436,
	-435, -383, -356, -356, 155, -583, -209, -212, -542, -360,
	253, 21, 21, -500, 550, 643, 86, 86, -360, -360,
	-340, 616, 102, 92, 450, -286, -492, 617, -519, -462,
	-271, 128, 87, 76, 548, 551, 87, -460, 120, 416,
	420, -381, -384, 102, 104, 190, 158, 87, 87, -360,
	-347, -346, 92, 92, 92, -467, 549, -179, 61, 496,
	92, 93, 411, 92, 93, 362, -174, 92, 658, 160,
	128, 87, -450, 269, -184, 160, -311, -348, -142, -450,
	-270, -312, -360, 92, -498, 173, 335, 550, 102, 146,
	102, -208, -482, 173, 335, -453, 87, 87, 87, -449,
	102, 87, -476, -473, 86, -311, 271, 138, 92, 92,
	102, 86, -509, 32, 92, -414, 86, 87, 87, 87,
	87, -413, 102, -271, -356, 87, 87, 160, 645, 86,
	-395, -395, 86, 21, -340, -493, 618, 92, -528, 453,
	-522, -520, 448, 449, 450, 451, 92, 549, 66, 552,
	-459, -460, 420, -381, -384, 612, 460, 460, 460, 658,
	160, 128, 92, -230, -360, 312, 433, -345, 92, -416,
	-451, 321, 21, -311, -356, -451, 87, 160, -356, -356,
	335, 102, 146, 102, -209, 335, -465, 320, 87, -476,
	-311, -475, -474, 319, 272, 86, 87, -387, -399, -356,
	87, -288, -287, 546, -413, -416, 84, -416, 84, -416,
	84, -416, 84, 87, -271, -360, 253, -137, 86, 87,
	87, -341, -360, -523, 92, -530, 251, -526, -527, 452,
	-520, 21, 450, 21, 21, -143, 160, 66, 117, 461,
	461, 461, -346, 92, -229, 36, 455, 389, -417, 259,
	355, 356, 96, 550, 342, 343, 21, -452, -271, -312,
	-380, -380, 102, 102, 87, 160, -360, 268, 86, -394,
	-388, -387, 268, 87, -360, -294, -292, -293, 83, 467,
	310, 311, 87, -544, -544, -544, -544, -295, 87, 160,
	-393, 87, 160, -537, 86, 102, -525, -524, -526, 21,
	-523, 21, -523, -523, 457, 550, -459, 92, -356, -356,
	92, 92, 341, -336, 86, -464, -474, -473, -394, 87,
	160, -435, -293, 83, -292, 83, 16, 15, -416, -416,
	-416, -416, 86, 87, -360, -540, 32, 87, -536, -535,
	-337, -531, -360, 453, 454, 92, -523, 128, 551, -614,
	-613, 635, 102, 102, -360, -449, -454, 87, -388, -291,
	307, 308, 32, 173, -291, -393, -539, -538, -338, 87,
	160, 159, 92, 552, 92, 87, -470, 107, 42, 309,
	87, 160, 128, -535, -360, -538, 42, -387, 159, -360,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 314, 315, 316, 317,
	318, 319, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 0, 0, 0, 0, 0, 717, 718, 0, 681,
	0, 0, 0, 0, 0, 0, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 586,
	587, 588, 589, 590, 428, 429, 430, 431, 432, 433,
	434, 435, 436, 437, 0, 348, 344, 256, 257, 258,
	259, 260, 261, 262, 355, 356, 530, 0, 0, 0,
	0, 800, -2, 100, 0, 0, 0, 0, 337, 0,
	328, 328, 0, 0, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, -2, 730, 0,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 412, 413, 414,
	408, 409, 411, 410, -2, 0, 0, 730, 0, 0,
	0, 808, 0, 0, 0, 851, 869, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1403, 1404,
	1405, 1406, 2204, 2174, -2, 1938, 1915, 2098, 2099, 1994,
	2006, 2241, 2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249,
	2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259,
	2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269,
	2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279,
	2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289,
	2290, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1936, 1937, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952,
	1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025,
	2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035,
	2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,
	2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055,
	2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
	2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095,
	2096, 2097, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107,
	2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117,
	2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
	2128, 2129, 2130, -2, 2132, 2133, 2134, 2135, 2136, 2137,
	2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147,
	2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157,
	2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167,
	2168, 2169, 2170, 2171, 2172, 2173, 2175, 2176, 2177, 2178,
	2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,
	2189, -2, -2, -2, 2193, 2194, 2195, 2196, 2197, 2198,
	2199, 2200, 2201, 2202, 2203, 2205, 2206, 2207, 2208, 2209,
	2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219,
	2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229,
	2230, 0, 312, 310, 1885, 1915, 1938, 1994, 2006, 2007,
	2046, 2098, 2099, 2131, 2174, 2190, 2191, 2192, 2204, 0,
	0, 1004, 0, 778, 0, 0, 783, 1351, 778, 349,
	719, 720, 808, 834, 679, 0, 386, 0, 1929, 390,
	2181, 0, 0, 0, 0, 676, 380, 381, 382, 383,
	384, 385, 0, 0, 977, 0, 0, 376, 0, 343,
	1996, 2203, 1407, 0, 0, 0, 0, 0, 199, 1128,
	201, 1130, 205, 213, 0, 0, 0, 218, 219, 222,
	223, 224, 225, 226, 0, 230, 0, 232, 235, 0,
	237, 238, 0, 241, 242, 243, 0, 253, 254, 255,
	1131, 1132, 1133, -2, 128, 1002, 1843, 1729, 0, 1736,
	1749, 1760, 1489, 1490, 1491, 1492, 0, 0, 0, 0,
	0, 0, 1500, 1501, 0, 1531, 2245, 2286, 2287, 0,
	1509, 1510, 1511, 1512, 1513, 1514, 0, 139, 151, 152,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 0, 1790, 1791,
	1792, 1700, 1476, 1403, 0, 2254, 0, 2276, 2281, 2282,
	2283, 2284, 2275, 0, 0, 1684, 0, 1674, 0, 0,
	-2, -2, 0, 0, 2071, -2, 2288, 2289, 2290, 2251,
	2272, 2280, 2255, 2256, 2279, 2247, 2248, 2249, 2242, 2243,
	2244, 2246, 2258, 2260, 2271, 0, 2267, 2277, 2278, 2179,
	0, 0, 2226, 0, 0, 0, 2221, 153, 154, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1695, -2, 1697, -2,
	1699, -2, 1702, -2, -2, -2, -2, 1707, 1708, -2,
	1710, -2, -2, -2, -2, -2, -2, -2, 1686, 1687,
	1688, 1689, 1678, 1679, 1680, 1681, 1682, 1683, -2, -2,
	-2, 834, 927, 0, 834, 0, 809, 856, 859, 862,
	865, 812, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 338, 339, 327, 329, 0,
	333, 0, 0, 329, 326, 320, 0, 1164, 1164, 1164,
	0, 0, 0, 0, 1164, 1164, 1164, 1164, 1164, 0,
	1164, 0, 0, 0, 0, 0, 1164, 0, 1037, 1135,
	1136, 1137, 1162, 1163, 1236, 0, 0, 0, 735, 731,
	732, 733, 734, 822, 0, 824, 827, 0, 0, 656,
	656, 894, 894, 0, 602, 0, 0, 0, 656, 0,
	616, 608, 0, 0, 0, 656, 0, 0, 829, 829,
	0, 659, 666, 656, 656, -2, 656, 656, 653, 656,
	0, 0, 1176, 622, 623, 624, 608, 608, 627, 628,
	629, 639, 640, 667, 1867, 0, 0, 530, 530, 0,
	530, 530, 0, 530, 530, 530, 0, 737, 1954, 2041,
	1936, 2012, 1895, 1996, 2203, 0, 285, 2071, 290, 0,
	1937, 1957, 0, 0, 1975, 0, -2, 0, 365, 834,
	0, 0, 808, 0, 0, 0, 0, 530, 530, 530,
	530, 530, 1235, 530, 530, 530, 530, 530, 0, 0,
	0, 530, 530, 530, 530, 0, 870, 871, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 5, 6,
	19, 0, 0, 0, 0, 0, 0, 107, 106, 0,
	1844, 1862, 1795, 1796, 1797, 1849, 1799, 1853, 1853, 1853,
	1853, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1853, 1853, 0, 0, 1842, 1819, 1851, 1851, 1851,
	1849, 1846, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1856, 1856, 1859, 1859,
	1856, 0, 426, 424, 425, 1725, 0, 0, 0, 0,
	778, 782, 1349, 0, 0, 0, 834, -2, 0, 0,
	680, 387, 1408, 0, 0, 391, 0, 392, 0, 0,
	394, 0, 0, 0, 415, 0, 418, 402, 403, 404,
	405, 398, 0, 179, 0, 378, 379, 0, 0, 345,
	0, 0, 0, 531, 0, 0, 0, 0, 0, 0,
	210, 206, 214, 217, 227, 234, 0, 246, 248, 251,
	207, 215, 220, 221, 228, 249, 208, 211, 212, 216,
	250, 252, 209, 229, 233, 247, 231, 236, 239, 240,
	245, 0, 180, 0, 0, 0, 0, 0, 1735, 0,
	0, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 1729, 0,
	0, 1495, 1496, 1497, 1498, 0, 1502, 0, 1532, 0,
	0, 0, 0, 0, 0, 1789, 1793, 0, 1725, 1725,
	0, 1725, 1721, 0, 0, 0, 0, 0, 0, 1725,
	1657, 0, 0, 1659, 1675, 0, 0, 1661, 1662, 0,
	1665, 1666, 1725, 0, 1725, 1670, 1725, 1725, 1725, 1653,
	1654, 0, 1721, 1721, 1721, 1721, 0, 0, 1721, 1721,
	1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721,
	1721, 1721, 1721, 0, 0, 0, 0, 829, 0, 835,
	0, -2, 0, 853, 855, 857, 858, 860, 861, 863,
	864, 866, 867, 814, 0, 0, 103, 0, 0, 0,
	0, 0, 0, 71, 73, 0, 0, 0, 0, 0,
	0, 331, 0, 336, 322, 2033, 0, 321, 0, 0,
	0, 0, 0, 1001, 0, 0, 1164, 1164, 1164, 1038,
	0, 0, 0, 0, 0, 0, 0, 0, 1164, 1164,
	1164, 1164, 0, 1182, 0, 0, 0, 737, 736, 0,
	823, 0, 0, 70, 591, 592, 593, 894, 0, 0,
	595, 596, 0, 597, 0, 0, 608, 656, 656, 614,
	615, 610, 609, 662, 663, 659, 0, 659, 659, 894,
	0, 633, 634, 635, 656, 656, 641, 830, 0, 642,
	643, 659, 0, 664, 665, 894, 0, 0, 894, 894,
	0, 651, 652, 654, 656, 0, 0, 1164, 0, 672,
	610, 610, 1868, 1869, 0, 0, 1173, 0, 0, 0,
	0, 675, 0, 0, 0, 442, 443, 0, 0, 738,
	0, 264, 268, 0, 271, 0, 2041, 0, 2041, 0,
	0, 278, 0, 0, 0, 0, 0, 0, 308, 309,
	0, 0, 0, 0, 299, 302, 1343, 1344, 1125, 1126,
	303, 304, 357, 358, 0, 829, 852, 854, 848, 849,
	850, 0, 72, 0, 0, 0, 0, 0, 530, 0,
	0, 0, 0, 0, 713, 0, 1017, 715, 0, 0,
	0, 0, 0, 902, 896, 898, 972, 139, 872, 8,
	124, 121, 0, 19, 0, 0, 19, 19, 0, 19,
	313, 0, 1865, 1863, 1864, 1798, 1850, 0, 1824, 0,
	1825, 1826, 1827, 1838, 1839, 0, 0, 1820, 0, 1821,
	1822, 1823, 1814, 0, 1815, 1816, 0, 1817, 1818, 311,
	423, 0, 0, 1726, 1005, 0, 756, 770, 751, 0,
	759, 0, 0, 1351, 0, 0, 0, 0, 739, 770,
	741, 0, 759, 829, 806, 0, 784, 0, 0, 388,
	0, 399, 393, 0, 400, 395, 396, 0, 0, 417,
	419, 420, 421, 406, 407, 677, 374, 375, 366, 367,
	368, 369, 370, 371, 372, 373, 0, 0, 0, 377,
	149, 0, 346, 347, 0, 0, 0, 193, 194, 195,
	196, 197, 198, 200, 184, 702, 704, 1117, 1129, 0,
	1120, 0, 203, 244, 176, 0, 0, 0, 1730, 1731,
	1732, 1733, 1734, 1739, 0, 1741, 1743, 1745, 1747, 0,
	1765, -2, -2, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 1750, 1763, 1764, 0, 0,
	0, 0, 0, 0, 1761, 1761, 1756, 0, 1515, 1345,
	1346, 1493, 0, 0, 1529, 1533, 0, 0, 0, 0,
	0, 0, 1148, 1849, 0, 140, 1720, 1624, 1625, 1626,
	1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
	1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
	1647, 1648, 1649, 1650, 1651, 1652, 0, 0, 1729, 0,
	0, 0, 1722, 1723, 0, 0, 0, 1612, 0, 0,
	1618, 1619, 1620, 0, 765, 0, 1685, 1658, 1676, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 926, 928, 0,
	774, 776, 777, 803, 784, 810, 0, 0, 0, 99,
	104, 0, 1203, 0, 0, 0, 0, 0, 0, 0,
	74, 1177, 75, 1179, 340, 341, 0, 0, 335, 323,
	2033, 325, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 1053, 1054, 528, 1111, 0, 0, 0,
	1127, 1152, 1160, 0, 0, 0, 0, 0, 1209, 1039,
	1044, 1045, 1046, 1040, 1041, 1047, 1048, 0, 825, 0,
	0, 941, 594, 657, 658, 895, 598, 0, 0, 605,
	1996, 610, 894, 894, 617, 611, 618, 661, 619, 620,
	621, 659, 894, 894, 831, 656, 659, 644, 660, 659,
	1351, 648, 0, 655, 1351, 673, 1351, 0, 671, 625,
	626, 1211, 827, 440, 441, 446, 448, 0, 497, 497,
	497, 480, 497, 0, 0, 468, 1870, 0, 0, 0,
	0, 477, 1870, 0, 0, 1870, 1870, 1870, 1870, 1870,
	1870, 1870, 0, 0, 1870, 1870, 1870, 1870, 1870, 1870,
	1870, 1870, 1870, 1870, 1870, 0, 1870, 1870, 1870, 1870,
	1870, 1328, 1870, 0, 496, 1174, 487, 488, 489, 490,
	495, 0, 0, 524, 0, 0, 1052, 0, 528, 0,
	0, 1094, 0, 0, 907, 0, 908, 909, 910, 905,
	943, 967, 967, 0, 967, 947, 1351, 0, 0, 0,
	276, 277, 265, 0, 266, 0, 0, 279, 280, 0,
	282, 283, 284, 291, 1936, 2012, 286, 288, 0, 0,
	292, 305, 306, 307, 0, 0, 297, 298, 0, 0,
	360, 361, 363, 0, 784, 1178, 699, 1347, 700, 701,
	705, 0, 0, 708, 709, 710, 711, 712, 1019, 0,
	0, 1103, 1104, 1105, 1106, 894, 0, 903, 0, 899,
	973, 0, 975, 0, 0, 122, 19, 0, 115, 112,
	0, 0, 0, 0, 0, 1845, 1794, 1866, 0, 0,
	0, 1847, 0, 0, 0, 0, 0, 105, 786, 746,
	0, 750, 767, 0, 771, 0, 0, 763, 755, 760,
	0, 0, 780, 747, 1350, 0, 0, 0, 0, 740,
	0, 0, 745, 784, 0, 807, 836, 837, 840, 1409,
	0, 401, 397, 416, 0, 530, 0, 0, 0, 187,
	1114, 0, 188, 192, 182, 0, 0, 0, 1119, 0,
	1116, 1121, 0, 202, 0, 0, 177, 178, 1194, 1203,
	0, 0, 0, 1740, 1742, 1744, 1746, 1748, 0, 1751,
	1761, 1761, 1757, 0, 1752, 0, 1754, 0, 1730, 1499,
	0, 1534, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 840, 0, 0, 1602, 1603, 0, 0, 1607, 0,
	1609, 1610, 1611, 1613, 0, 0, 0, 1617, 0, 1656,
	1677, 1660, 1663, 0, 1667, 0, 1669, 1671, 1672, 1673,
	0, 834, 834, 0, 0, 1573, 1573, 1573, 0, 0,
	0, 0, 1573, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1518, 0, 1519, 1520, 0, 0,
	0, 929, 804, 0, 0, 0, 0, 0, 1201, 0,
	89, 0, 0, 0, 0, 94, 0, 0, 76, 342,
	330, 332, 0, 324, 0, 1165, 0, 0, 0, 0,
	1007, 1008, 1010, 0, 1013, 1014, 1015, 1019, 827, 0,
	827, 1064, 1870, 532, 0, 0, 1113, 0, 1083, 0,
	0, 0, -2, 0, 0, 1160, 0, 0, 0, 1213,
	0, 0, 0, 724, 728, 23, 828, 0, 601, 599,
	0, 603, 0, 604, 656, 612, 613, 894, 636, 637,
	0, 0, 894, 656, 656, 647, 659, 668, 0, 669,
	1351, 1213, 0, 0, 1173, 1279, 1247, 458, 0, 1364,
	1365, 498, 0, 1371, 1380, 1164, 1441, 0, 1380, 0,
	0, 1382, 1383, 0, 0, 0, 0, 481, 482, 0,
	467, 0, 0, 0, 0, 0, 0, 466, 0, 0,
	508, 0, 0, 0, 0, 0, 1871, 1870, 1870, 0,
	475, 476, 0, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 1870, 1870, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 0,
	0, 0, 0, 0, 1335, 1336, 0, 1064, 1870, 0,
	0, 0, 0, 532, 1108, 1081, 1099, 0, 444, 445,
	505, 0, 0, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 0,
	827, 968, 0, 970, 971, 945, -2, 0, 907, 950,
	1725, 0, 269, 270, 0, 0, 275, 293, 295, 267,
	0, 0, 0, 294, 296, 300, 301, 359, 362, 364,
	846, 0, 0, 1237, 0, 1020, 1021, 1023, 1024, 0,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1920, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1018, 716, 885, 897, 904,
	974, 976, 140, 900, 0, 125, 19, 124, 116, 117,
	0, 19, 0, 0, 0, 0, 1855, 1854, 1840, 0,
	1841, 1852, 1857, 0, 1860, 0, 427, 790, 0, 0,
	770, 772, 0, 0, 770, 0, 0, 779, 0, 0,
	0, 0, 0, 0, 0, 770, 846, 786, 0, 843,
	841, 842, 0, 0, 678, 150, 422, 0, 0, 0,
	0, 0, 703, 0, 1118, 184, 0, 0, 204, 0,
	0, 0, 1203, 1198, 1724, 1753, 1755, 0, 1762, 1758,
	1494, 1503, 1530, 0, 0, 1536, 1548, 1548, 0, 0,
	0, 1539, 1853, 1853, 1542, 1849, 1851, 1849, 1548, 1548,
	0, 1149, 0, 1150, 840, 141, 0, 0, 1608, 0,
	0, 0, 766, 0, 0, 0, 1569, 1571, 1573, 1573,
	1580, 1574, 1581, 1582, 1573, 1573, 1573, 1573, 1587, 1573,
	1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
	1567, 0, 0, 1783, 1784, 775, 0, 0, 817, 818,
	819, 820, 821, 0, 0, 61, 61, 1203, 0, 98,
	90, 0, 0, 0, 0, 0, 334, 0, 77, 78,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 0, 0, 1357, 0, 1068, 1065, 1066, 1067, 0,
	1108, 533, 534, 535, 536, 0, 0, 0, 1112, 0,
	0, 1076, 0, 0, 0, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, -2, 1168, 0, 0, 0, 1357, 1187, 0,
	0, 1192, 1357, 1357, 0, 1221, 0, 1210, 778, 0,
	-2, 0, 0, 726, 0, 0, 942, 600, 606, 894,
	630, 832, 833, 1351, 894, 894, 656, 674, 670, 1221,
	1212, 0, 447, 497, 0, 1267, 0, 0, 1273, 0,
	1280, 451, 0, 499, 0, 1370, 1397, 1381, 1397, 1442,
	1397, 1397, 1164, 0, 499, 0, 0, 469, 0, 0,
	0, 0, 0, 465, 502, 840, 452, 454, 455, 456,
	506, 507, 509, 0, 511, 512, 471, 483, 484, 485,
	486, 0, 0, 0, 478, 491, 492, 493, 494, 453,
	1296, 1297, 1298, 1301, 1302, 1303, 1304, 0, 0, 1307,
	1308, 1309, 1310, 1311, 1394, 1395, 1396, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1337, 1338, 1339, 1340, 1341, 1342,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 0, 0,
	1332, 0, 0, 0, 88, 1068, 0, 0, 0, 0,
	0, 1108, 527, 0, 0, 1083, 0, 1101, 0, 1095,
	1096, 0, 0, 748, 894, 352, 0, 937, 930, 0,
	914, 0, 916, 934, 917, 935, 936, 921, 0, 923,
	0, 919, 920, 925, 918, 894, 906, 944, 969, 946,
	949, 951, 952, 958, 0, 0, 0, 0, 263, 272,
	273, 274, 281, 0, 552, 287, 802, 0, 1348, 706,
	707, 1238, 1239, 714, 0, 1025, 883, 0, 0, 120,
	123, 0, 118, 0, 0, 0, 0, 110, 108, 1848,
	0, 0, 792, 164, 0, 0, 0, 768, 0, 773,
	770, 754, 764, 753, 761, 762, 781, 1352, 1353, 1354,
	1355, 0, 770, 744, 743, 805, 790, 838, 839, 0,
	1410, 389, 0, 1115, 184, 189, 190, 191, 185, 183,
	1122, 0, 1124, 0, 1196, 0, 0, 1759, 1535, 1504,
	1537, 1549, 1550, 1538, 0, 1506, 1507, 1540, 1541, 1543,
	1544, 1545, 1546, 1547, 1508, 0, 1151, 1604, 0, 1606,
	1614, 1615, 0, 1664, 1668, 0, 0, 0, 0, 0,
	1578, 1579, 1583, 1584, 1585, 1586, 1588, 1589, 1590, 1591,
	1592, 1593, 1594, 1595, 1596, 1597, 1598, 834, 1568, 0,
	0, 0, 0, 0, 0, 0, 815, 0, 0, 0,
	63, 0, 63, 1202, 1204, 0, 972, 0, 0, 95,
	0, 0, 79, 81, 0, 1997, 0, 0, 0, 0,
	1000, 1003, 1009, 1011, 0, 0, 0, 1358, 1359, 1361,
	1362, 1363, 0, 1036, 0, 0, 1056, 1057, 1058, 1070,
	0, 538, 539, 0, 0, 0, 551, 547, 548, 549,
	529, 1107, 1090, 0, 0, 1079, 0, 0, 1089, 0,
	1169, 1870, 1870, 1870, 0, 0, 1281, 1870, 1870, 0,
	1189, 1191, 0, 0, 1285, 1224, 0, 0, 1215, 0,
	967, 0, 0, 894, 725, 728, 729, 826, 607, 645,
	649, 646, 894, 1224, 439, 1245, 0, 0, 0, 0,
	0, 1277, 0, 0, 1249, 0, 470, 500, 0, -2,
	0, 1398, 0, 1384, 1398, 0, 0, 1397, 0, 459,
	499, 0, 0, 0, 513, 517, 518, 0, 515, 1437,
	0, 516, 0, 504, 0, 510, 1299, 1300, 0, 1305,
	1306, 0, 1330, 0, 0, 0, 450, 519, 0, 0,
	0, 520, 521, 526, 1109, 1110, 1076, 0, 1090, 0,
	1100, 0, 1097, 1098, 834, 0, 0, 911, 938, 0,
	0, 912, 0, 913, 915, 922, 924, 351, 953, 0,
	0, 955, 956, 957, 948, 289, 847, 1022, 0, 868,
	0, 0, 901, 0, 19, 0, 0, 113, 1858, 1861,
	794, 0, 791, 165, 0, 0, 0, 0, 758, 769,
	752, 1356, 742, 792, 844, 845, 186, 181, 1123, 1206,
	0, 1197, 0, 1461, 1517, 0, 1616, 0, 1573, 1570,
	1573, 1572, 1564, 0, 1521, 0, 1523, 1524, 1525, 0,
	1527, 1528, 0, 813, 0, 59, 0, 62, 60, 0,
	97, 91, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 1042, 1285, 0, 1042, 1069, 1055, 0, 0,
	540, 541, 0, 544, 550, 1071, 0, 0, 1073, 1074,
	1075, 0, 0, 1087, 0, 0, 0, 0, 1161, 1175,
	0, 0, 0, -2, 0, -2, 1186, 0, 1230, 0,
	1222, 0, 1214, 0, 1217, 894, 894, -2, 722, 727,
	0, 650, 1230, 1247, 0, 1268, 0, 0, 0, 0,
	0, 0, 0, 1248, 0, 1261, 501, 1399, -2, 1413,
	1415, 0, 1174, 1418, 1419, 0, 0, 0, 0, 0,
	0, 1468, 1427, 0, 0, 1431, 1432, 1433, 0, 0,
	1436, 0, 1777, 1778, 0, 1440, 0, 0, 0, 0,
	0, 0, 0, 1378, 460, 461, 0, 463, 464, 1870,
	1438, 503, 457, 1870, 473, 1329, 1333, 1334, 1331, 525,
	522, 523, 1079, 1082, 1093, 1102, 749, 829, 353, 354,
	939, 0, 931, 962, 959, 0, 0, 1026, 884, 892,
	2226, 2228, 2225, 114, 119, 0, 0, 796, 0, 793,
	0, 787, 789, 175, 757, 794, 135, 167, 0, 0,
	1505, 0, 0, 0, 1605, 1655, 1576, 1577, 0, 1565,
	0, 1559, 1560, 1561, 1566, 0, 0, 816, 811, 64,
	93, 0, 96, 68, 83, 0, 84, 0, 0, 0,
	1028, 1035, 1049, 1180, 1360, 1034, 0, 0, 537, 542,
	0, 545, 546, 1091, 1090, 0, 1077, 1078, 0, 1085,
	0, 0, 1170, 1171, 1172, 1282, 1283, 1284, 1240, 1188,
	0, -2, 1293, 0, 0, 1184, 1206, 1240, 0, 0,
	1218, 0, 1225, 0, 1223, 1216, 834, 723, 1227, 449,
	1279, 1269, 0, 1271, 0, 0, 0, 0, 1250, -2,
	0, 1414, 1416, 1417, 1420, 1421, 1422, 1473, 1474, 1475,
	0, 0, 1425, 1470, 1471, 1472, 1426, 0, 0, 0,
	0, 0, 1775, 1776, 1466, 0, 0, 1385, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1386, 0, 0, 0, 1377,
	1379, 462, 0, 0, 1870, 1092, 350, 0, 0, 963,
	965, 960, 961, 886, 0, 0, 0, 0, 109, 111,
	126, 0, 795, 166, 0, 796, 137, 0, 158, 0,
	1207, 0, 1516, 0, 0, 0, 1575, 1562, 0, 0,
	0, 0, 0, 1779, 1780, 1781, 0, 1522, 1526, 92,
	0, 66, 0, 85, 86, 0, 0, 0, 1050, 1051,
	1059, 1060, 0, 1062, 1063, 543, 1072, 1080, 1084, 1087,
	0, 1139, 1242, 0, 1190, 1173, 1295, 1870, 1193, 1242,
	0, 1287, 1870, 1870, 1208, 0, 1220, 0, 1232, 0,
	1226, 829, 438, 0, 1229, 1265, 1270, 1272, 1274, 0,
	1278, 1276, 1251, -2, 0, 1259, 0, 0, 1423, 1424,
	0, 0, 1674, 1870, 0, 1456, 0, 1139, 1139, 1139,
	1139, 0, 514, 472, 0, 940, 954, 0, 893, 0,
	0, 0, 0, 0, 785, 127, 0, 136, 155, 0,
	168, 169, 0, 0, 0, 0, 1199, 0, 1464, 1465,
	0, 1551, 0, 0, 0, 1555, 1556, 1557, 1558, 65,
	68, 0, 87, 0, 1027, 0, 1061, 1086, 1088, 1138,
	1183, 0, 1279, 1294, 0, 1185, 1286, 0, 0, 0,
	1219, 1231, 0, 1234, 721, 1228, 1246, 0, 1275, 1252,
	1260, 0, 1255, 0, 0, 0, 1469, 0, 1430, 0,
	1435, 1444, 1457, 0, 0, 1366, 0, 1368, 0, 1372,
	0, 1374, 0, 0, 474, 964, 966, 0, 1725, 888,
	889, 0, 798, 788, 138, 142, 0, 164, 161, 0,
	170, 0, 0, 0, 0, 1195, 0, 1462, 0, 1552,
	1553, 1554, 67, 69, 0, 1029, 1030, 1043, 1140, 1870,
	1870, 0, 0, 0, 1146, 1147, 0, 1267, 1299, 1288,
	1289, 1290, 1233, 1266, 1254, 0, -2, 1262, 0, 0,
	1727, 1737, 1738, 1428, 1434, 1443, 1445, 1446, 0, 1458,
	1459, 1460, 1467, 1139, 1139, 1139, 1139, 1376, 887, 0,
	0, 797, 0, 129, 0, 0, 159, 160, 162, 0,
	171, 0, 173, 174, 0, 0, 1563, 1031, 0, 0,
	1143, 1144, 0, 1243, 0, 1245, 1256, -2, 0, 1264,
	0, 1429, 1447, 0, 1448, 0, 0, 0, 1367, 1369,
	1373, 1375, 1725, 890, 799, 1205, 0, 143, 0, 145,
	147, 148, 1400, 156, 157, 163, 172, 0, 0, 1016,
	1032, 0, 1141, 1142, 1145, 0, 1247, 1263, 1728, 1449,
	1451, 1452, 0, 0, 1450, 0, 130, 131, 0, 144,
	0, 0, 1200, 1463, 1033, 1244, 1241, 1453, 1455, 1454,
	891, 0, 0, 146, 1401, 132, 133, 134, 0, 1402,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 659, 656,
	129, 128, 130, 3, 660, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 657, 141, 658, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:845
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:852
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:858
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:866
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:876
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:943
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:968
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:984
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:989
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:993
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:999
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1021
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1025
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1040
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1048
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1061
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1078
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1086
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1096
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1106
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1116
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1126
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1136
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1148
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1158
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1168
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1179
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1204
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1220
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1228
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1247
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1267
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1276
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1286
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1296
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1306
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1326
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1332
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1339
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1347
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1353
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1372
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1380
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1388
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1396
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1406
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1414
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1424
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1431
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1440
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1450
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1454
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1460
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1464
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1470
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1479
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1489
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1493
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1499
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1508
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1512
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1518
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1539
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1553
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1560
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1564
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1570
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1574
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1580
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1587
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1595
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1599
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1611
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1615
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1629
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1633
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1638
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1645
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1649
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1653
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1659
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1668
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1679
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1683
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1689
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1693
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1699
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1703
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1709
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1729
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1748
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1752
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1756
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1761
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1765
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1774
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1784
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1791
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1796
		{
			yyVAL.str = "\n"
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1803
		{
			yyVAL.str = yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1808
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1812
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1840
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1844
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1850
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1858
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1878
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1897
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1922
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1926
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1930
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1935
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1939
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1945
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1958
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1969
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1982
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1986
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1996
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2009
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2022
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2028
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2034
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2042
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2052
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2062
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2066
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2070
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2074
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2078
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2082
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2089
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2093
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2099
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2106
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2115
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2119
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2125
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2129
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2133
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2137
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2141
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2145
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2149
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2153
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2157
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2161
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2165
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2169
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2177
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2181
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2185
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2189
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2193
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2197
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2201
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2205
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2209
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2213
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2217
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2229
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2233
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2237
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2241
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2245
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2249
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2253
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2257
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2261
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2265
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2269
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2273
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2277
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2297
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2301
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2305
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2309
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2313
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2317
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2321
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2325
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2340
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2349
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2356
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2363
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2372
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2390
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2394
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2400
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2407
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2415
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2419
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2423
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2427
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2433
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2437
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2443
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2450
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2457
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2466
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2496
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2500
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2504
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2510
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2516
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2520
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2527
		{
			yyVAL.str = yyDollar[3].str
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2533
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2537
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2551
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2560
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2569
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2577
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2585
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2608
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2627
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2634
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2641
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2649
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2656
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2663
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2672
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2676
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2680
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2686
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2690
		{
			yyVAL.str = yyDollar[1].str
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2696
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2700
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2706
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2710
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2724
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2730
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2736
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2741
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2746
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2751
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2757
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2763
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2768
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2772
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2776
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2780
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2784
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2788
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2792
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2796
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2800
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2806
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2810
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2814
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2818
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2823
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2828
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2834
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2847
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2860
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2873
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2886
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2902
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2909
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2920
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2931
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2935
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2941
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2951
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2957
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2961
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2967
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2973
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2977
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2981
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2985
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2991
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3004
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3010
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3014
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3020
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3024
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3030
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3036
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3047
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3053
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3057
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3061
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3065
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3069
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3073
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3081
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3089
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3099
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3107
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3117
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3127
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3143
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3147
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3155
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3163
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3203
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3207
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3213
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3219
		{
			yyVAL.str = yyDollar[1].str
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3224
		{
			yyVAL.str = "true"
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3225
		{
			yyVAL.str = "false"
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3226
		{
			yyVAL.str = yyDollar[1].str
		}
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3231
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3237
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3246
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3253
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3261
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3265
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3290
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3313
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3323
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3330
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3339
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3347
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3351
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3357
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3368
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3372
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3378
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3382
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3406
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3416
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3426
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3442
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3460
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3464
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3470
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3474
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3480
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3486
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3494
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3504
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3512
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3522
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3532
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3542
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3549
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3553
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3557
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3561
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3565
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3572
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3578
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3582
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3586
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3590
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3594
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3598
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3602
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3606
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3611
		{
			yyVAL.str = ""
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3642
		{
			yyVAL.str = ""
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3646
		{
			yyVAL.str = string("COLUMN")
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3651
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3657
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3663
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3671
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3675
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3681
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3689
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3696
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3702
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3708
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3714
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3720
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3727
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3734
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3742
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3748
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3760
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3766
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3774
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3778
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3785
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3803
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3818
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3833
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3848
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3861
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3867
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3878
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3890
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3903
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3907
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3915
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3919
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3924
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3928
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3944
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3948
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3952
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3956
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3963
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3967
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3971
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3975
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3982
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3986
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3993
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3997
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4001
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4005
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4012
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4019
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4025
		{
			yyVAL.item = nil
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4030
		{
			yyVAL.item = nil
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4079
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4085
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4091
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4097
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4106
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4114
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4122
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4130
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4136
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4143
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4151
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4160
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4164
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4168
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4179
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4183
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4189
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4194
		{
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4198
		{
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4203
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4213
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4223
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4231
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4237
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4243
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4249
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4255
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4261
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4267
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4276
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4280
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4284
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4288
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4292
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4296
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4300
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4304
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4319
		{
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4321
		{
		}
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4330
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4340
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4349
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4353
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4357
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4363
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4369
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4375
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4381
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4390
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4401
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4413
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4421
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4427
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4439
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4453
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4459
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4465
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4472
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4476
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4481
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4485
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4489
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4494
		{
			yyVAL.str = ""
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4498
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4504
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4519
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4523
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4529
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4537
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4544
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4552
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4558
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4564
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4569
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4577
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4583
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4588
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4594
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4600
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4604
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4632
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4640
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4648
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4656
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4660
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4666
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4679
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4687
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4696
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4702
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4710
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4718
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4726
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4732
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4740
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4746
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4754
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4760
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4770
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4775
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4782
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4798
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4811
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4822
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4826
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4832
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4838
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4847
		{
		}
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4849
		{
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4852
		{
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4861
		{
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4865
		{
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4870
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4879
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4886
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4892
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4900
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4907
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4914
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4934
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4942
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4952
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4956
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4962
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4969
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4975
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4983
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4990
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4997
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5016
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5020
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5024
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5029
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5033
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5037
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5043
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5052
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5056
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5062
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5066
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5072
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5076
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5082
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5087
		{
		}
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5091
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5098
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5102
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5109
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5114
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5118
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5124
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5128
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5134
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5138
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5143
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5147
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5160
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5171
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5182
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5204
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5227
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5235
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5244
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5248
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5261
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5265
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5270
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5274
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5281
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5286
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5293
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5299
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5303
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5307
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5311
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5315
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5319
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5324
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5328
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5334
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5344
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5359
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5363
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5377
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5381
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5387
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5396
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5400
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5404
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5408
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5412
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5418
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5425
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5434
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5438
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5444
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5452
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5456
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5461
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5465
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5471
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5475
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5479
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5488
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5494
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5500
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5504
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5510
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5515
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5519
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5523
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5528
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5532
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5536
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5541
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5545
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5553
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5557
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5561
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5575
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5579
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5589
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5599
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5609
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5621
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5629
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5637
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5646
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5654
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5662
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5670
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5678
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5686
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5694
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5702
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5710
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5720
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5733
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5737
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5743
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5747
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5753
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5757
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5761
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5765
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5769
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5773
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5777
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5781
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5785
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5789
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5811
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5815
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5820
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5824
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5834
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5843
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5852
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5863
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5867
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5872
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5876
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5881
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5885
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5891
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5895
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5901
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5905
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5909
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5913
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5918
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5926
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5932
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5940
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5950
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5960
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5964
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5970
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5979
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5988
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5997
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6005
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6016
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6026
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6030
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6036
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6040
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6050
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6054
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6058
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6062
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6068
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 926:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6074
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6085
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6089
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6095
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6101
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6105
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6111
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6117
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6121
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 935:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6125
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6129
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 937:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6135
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6139
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6145
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6149
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6155
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6159
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6165
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6169
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6179
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6192
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6198
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6204
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6218
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6229
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6236
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6240
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6246
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6256
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6260
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6264
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6269
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6273
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6277
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6281
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6286
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6290
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6294
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6298
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6302
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6307
		{
			yyVAL.str = ""
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6311
		{
			yyVAL.str = yyDollar[1].str
		}
	case 969:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6315
		{
			yyVAL.str = yyDollar[2].str
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6321
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6325
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 972:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6330
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6334
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6338
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6342
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6346
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6352
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1000:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6394
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6407
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6413
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1003:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6419
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6432
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6437
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6444
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6451
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6455
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6461
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6467
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6472
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6476
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6480
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6484
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6491
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6524
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6529
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6536
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6543
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6547
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6553
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6559
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6563
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6567
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6573
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6579
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6585
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6589
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6595
		{
			yyVAL.str = ""
		}
	case 1033:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6602
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1034:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6608
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6623
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6640
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6657
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6661
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6667
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6671
		{
			yyVAL.str = "DEFINER = "
		}
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6675
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1042:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6680
		{
			yyVAL.str = ""
		}
	case 1043:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6684
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1049:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6698
		{
			yyVAL.str = ""
		}
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6706
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6712
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6717
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6723
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6736
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6741
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6746
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6752
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6759
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6766
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6773
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6780
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6788
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6794
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6801
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6808
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6816
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6822
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6831
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6848
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6864
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6883
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6889
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6898
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6916
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6922
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6929
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6937
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6943
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6951
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6957
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6965
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6971
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6980
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6984
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6989
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6993
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7000
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7005
		{
			yyVAL.str = ""
		}
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7009
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1092:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7015
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7028
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7039
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7043
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7049
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7055
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7061
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7068
		{
			yyVAL.str = ""
		}
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7072
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7077
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7081
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7087
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7095
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7103
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7111
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7119
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7124
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7136
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7147
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7256
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7260
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7266
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7279
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7283
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7289
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7302
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7306
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7310
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7315
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7319
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7325
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7332
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7338
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7347
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1127:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7354
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7365
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7369
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7375
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7384
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7388
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7392
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7397
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7401
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7405
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7409
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7415
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7446
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7450
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7476
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7482
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7494
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7500
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7506
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7512
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7518
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7526
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7530
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7536
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7550
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7564
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7568
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7572
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7576
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7580
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7584
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7588
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7594
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7609
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7613
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7624
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7628
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7633
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7637
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7643
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7647
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7653
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7662
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7671
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7677
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7681
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7687
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7698
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7704
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7722
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7740
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7758
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7774
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7778
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7787
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7799
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7808
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7820
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7830
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7840
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7851
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7861
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7872
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7880
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7891
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7898
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7908
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7921
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7929
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7938
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7947
		{
			yyVAL.str = ""
		}
	case 1200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7951
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7957
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7961
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7966
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7970
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7977
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7989
		{
			yyVAL.str = ""
		}
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7993
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1208:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7999
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8020
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8034
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8038
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8042
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8048
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8052
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8059
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8066
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8073
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8080
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8084
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8088
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8092
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8096
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8103
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8110
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8114
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8121
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8128
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8132
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8138
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8144
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8148
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8155
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8162
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8169
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8176
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8180
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8185
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8189
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8193
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8198
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8202
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8215
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8219
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8227
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8235
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8239
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8251
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8255
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8261
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8265
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8271
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8284
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8298
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8302
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8308
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8312
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8318
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8327
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8338
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8342
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8347
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8351
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8357
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8362
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8370
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8374
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8384
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8388
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8399
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8407
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8415
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8423
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8434
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8443
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8453
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8463
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8467
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8472
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8476
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8482
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8486
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8492
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8501
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8511
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8515
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8521
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8525
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8531
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8540
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8550
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8554
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8560
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8564
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8568
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8574
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8578
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8582
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8586
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8590
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8594
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8598
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8603
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8607
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8611
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8615
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8619
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8623
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8627
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8631
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8635
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8639
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8643
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8647
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8651
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8657
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8663
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8667
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8671
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8675
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8679
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8685
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8691
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8697
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8703
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8709
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8715
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8719
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8723
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8727
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8732
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8743
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8747
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8753
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8764
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8768
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8774
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8778
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8782
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8786
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8790
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8794
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8808
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8812
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8821
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8827
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8835
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8839
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8846
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8855
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8863
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8870
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8878
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8885
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8889
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8895
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8899
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8903
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8909
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8913
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8919
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8932
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8945
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8984
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9024
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9038
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9044
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9057
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9070
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9083
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9096
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9111
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9121
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9127
		{
			yyVAL.str = ""
		}
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9131
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9141
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9147
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9153
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9174
		{
			yyVAL.str = ""
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9178
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9184
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9190
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9194
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9199
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9207
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9211
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9215
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9219
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9225
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9231
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9235
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9240
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9247
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9251
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9257
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9261
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9267
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9271
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9275
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9279
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9283
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9287
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9292
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9296
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9300
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9304
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9308
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9312
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9316
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9320
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9324
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9328
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9342
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9346
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9350
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9354
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9358
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9362
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9368
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9372
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9377
		{
			yyVAL.str = ""
		}
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9381
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9387
		{
			yyVAL.str = ""
		}
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9391
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9397
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9414
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9421
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9428
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9435
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9442
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9451
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9457
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9463
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9467
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9471
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9475
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9479
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9484
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9491
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9495
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9499
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9504
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9508
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9512
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9516
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9520
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9525
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9529
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9534
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9538
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9554
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9560
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9564
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9568
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9572
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9576
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9580
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9584
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9588
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9592
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9596
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9600
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9604
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9608
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9614
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9618
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9622
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9626
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9630
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9634
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9638
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9642
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9646
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9650
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9692
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9696
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9700
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9705
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9713
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9717
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9721
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9725
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9729
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9739
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9743
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9747
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9751
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9755
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9759
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9763
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9767
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9780
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9786
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9795
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9804
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9815
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9825
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9835
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9844
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9854
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9864
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9874
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9883
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9893
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9897
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9902
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9906
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9912
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9916
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9922
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9931
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9943
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9960
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9977
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9990
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10003
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10015
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10029
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10044
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10059
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10076
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10091
		{
		}
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10098
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10102
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10106
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10112
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10116
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10120
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10124
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10130
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10134
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10138
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10144
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10152
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10162
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10166
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10173
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10178
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10182
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10187
		{
			yyVAL.str = ","
		}
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10191
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10196
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10200
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10205
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10212
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10238
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10250
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10262
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10273
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10284
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10295
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10305
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10315
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10326
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10337
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10348
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10359
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10370
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10381
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10392
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10403
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10414
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10425
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10436
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10447
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10458
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10469
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10480
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10504
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10513
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10522
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10531
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10540
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10551
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10560
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10570
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10579
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10588
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10597
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10606
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10618
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10629
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10642
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10654
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10677
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10713
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10726
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10739
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10751
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10760
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10768
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10776
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10789
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10798
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10809
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10820
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10829
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10841
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10851
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10861
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10870
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10881
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10890
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10900
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10909
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10918
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10928
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10932
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10938
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10942
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10961
		{
		}
	case 1685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10963
		{
		}
	case 1720:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11005
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11017
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11021
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11025
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11031
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11036
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11040
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11046
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11050
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11056
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11060
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11067
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11071
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11075
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11084
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11088
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11092
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11097
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11101
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11107
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11111
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11115
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11119
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11123
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11127
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11131
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11135
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11139
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11143
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11151
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11155
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11159
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11163
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11167
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11171
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11175
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11179
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11183
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11187
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11193
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11197
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11203
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11207
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11214
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11218
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11222
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11228
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11232
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11236
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11240
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11244
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11248
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11252
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11258
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11262
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11266
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11270
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11276
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11289
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11294
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11300
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11304
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11317
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11322
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11326
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11330
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11334
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11338
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11345
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11349
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11353
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11357
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11364
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11375
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11380
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11386
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11398
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11410
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11422
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11435
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11448
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11461
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11474
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11487
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11500
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11513
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11526
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11539
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11552
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11567
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11594
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11636
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11672
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11708
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11725
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11737
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11757
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11777
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11797
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11813
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11826
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11839
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11852
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11865
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11877
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11889
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11901
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11913
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11925
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11937
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11949
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11961
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11973
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11985
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11998
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12011
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12024
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12037
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12052
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12060
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12069
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12079
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12102
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12107
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12113
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12120
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12124
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12129
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12133
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12139
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12145
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12152
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12159
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12168
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12175
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12182
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12191
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12195
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12199
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12205
		{
		}
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12207
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12217
		{
			yyVAL.str = ""
		}
	case 1871:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12221
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
