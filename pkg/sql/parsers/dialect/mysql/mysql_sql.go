// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const UUID = 57532
const VECF32 = 57533
const VECF64 = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const INT1 = 57543
const INT2 = 57544
const INT3 = 57545
const INT4 = 57546
const INT8 = 57547
const S3OPTION = 57548
const STAGEOPTION = 57549
const SQL_SMALL_RESULT = 57550
const SQL_BIG_RESULT = 57551
const SQL_BUFFER_RESULT = 57552
const LOW_PRIORITY = 57553
const HIGH_PRIORITY = 57554
const DELAYED = 57555
const CREATE = 57556
const ALTER = 57557
const DROP = 57558
const RENAME = 57559
const ANALYZE = 57560
const ADD = 57561
const RETURNS = 57562
const SCHEMA = 57563
const TABLE = 57564
const SEQUENCE = 57565
const INDEX = 57566
const VIEW = 57567
const TO = 57568
const IGNORE = 57569
const IF = 57570
const PRIMARY = 57571
const COLUMN = 57572
const CONSTRAINT = 57573
const SPATIAL = 57574
const FULLTEXT = 57575
const FOREIGN = 57576
const KEY_BLOCK_SIZE = 57577
const SHOW = 57578
const DESCRIBE = 57579
const EXPLAIN = 57580
const DATE = 57581
const ESCAPE = 57582
const REPAIR = 57583
const OPTIMIZE = 57584
const TRUNCATE = 57585
const MAXVALUE = 57586
const PARTITION = 57587
const REORGANIZE = 57588
const LESS = 57589
const THAN = 57590
const PROCEDURE = 57591
const TRIGGER = 57592
const STATUS = 57593
const VARIABLES = 57594
const ROLE = 57595
const PROXY = 57596
const AVG_ROW_LENGTH = 57597
const STORAGE = 57598
const DISK = 57599
const MEMORY = 57600
const CHECKSUM = 57601
const COMPRESSION = 57602
const DATA = 57603
const DIRECTORY = 57604
const DELAY_KEY_WRITE = 57605
const ENCRYPTION = 57606
const ENGINE = 57607
const MAX_ROWS = 57608
const MIN_ROWS = 57609
const PACK_KEYS = 57610
const ROW_FORMAT = 57611
const STATS_AUTO_RECALC = 57612
const STATS_PERSISTENT = 57613
const STATS_SAMPLE_PAGES = 57614
const DYNAMIC = 57615
const COMPRESSED = 57616
const REDUNDANT = 57617
const COMPACT = 57618
const FIXED = 57619
const COLUMN_FORMAT = 57620
const AUTO_RANDOM = 57621
const ENGINE_ATTRIBUTE = 57622
const SECONDARY_ENGINE_ATTRIBUTE = 57623
const INSERT_METHOD = 57624
const RESTRICT = 57625
const CASCADE = 57626
const ACTION = 57627
const PARTIAL = 57628
const SIMPLE = 57629
const CHECK = 57630
const ENFORCED = 57631
const RANGE = 57632
const LIST = 57633
const ALGORITHM = 57634
const LINEAR = 57635
const PARTITIONS = 57636
const SUBPARTITION = 57637
const SUBPARTITIONS = 57638
const CLUSTER = 57639
const TYPE = 57640
const ANY = 57641
const SOME = 57642
const EXTERNAL = 57643
const LOCALFILE = 57644
const URL = 57645
const PREPARE = 57646
const DEALLOCATE = 57647
const RESET = 57648
const EXTENSION = 57649
const INCREMENT = 57650
const CYCLE = 57651
const MINVALUE = 57652
const PUBLICATION = 57653
const SUBSCRIPTIONS = 57654
const PUBLICATIONS = 57655
const PROPERTIES = 57656
const PARSER = 57657
const VISIBLE = 57658
const INVISIBLE = 57659
const BTREE = 57660
const HASH = 57661
const RTREE = 57662
const BSI = 57663
const IVFFLAT = 57664
const MASTER = 57665
const ZONEMAP = 57666
const LEADING = 57667
const BOTH = 57668
const TRAILING = 57669
const UNKNOWN = 57670
const LISTS = 57671
const OP_TYPE = 57672
const REINDEX = 57673
const EXPIRE = 57674
const ACCOUNT = 57675
const ACCOUNTS = 57676
const UNLOCK = 57677
const DAY = 57678
const NEVER = 57679
const PUMP = 57680
const MYSQL_COMPATIBILITY_MODE = 57681
const UNIQUE_CHECK_ON_AUTOINCR = 57682
const MODIFY = 57683
const CHANGE = 57684
const SECOND = 57685
const ASCII = 57686
const COALESCE = 57687
const COLLATION = 57688
const HOUR = 57689
const MICROSECOND = 57690
const MINUTE = 57691
const MONTH = 57692
const QUARTER = 57693
const REPEAT = 57694
const REVERSE = 57695
const ROW_COUNT = 57696
const WEEK = 57697
const REVOKE = 57698
const FUNCTION = 57699
const PRIVILEGES = 57700
const TABLESPACE = 57701
const EXECUTE = 57702
const SUPER = 57703
const GRANT = 57704
const OPTION = 57705
const REFERENCES = 57706
const REPLICATION = 57707
const SLAVE = 57708
const CLIENT = 57709
const USAGE = 57710
const RELOAD = 57711
const FILE = 57712
const TEMPORARY = 57713
const ROUTINE = 57714
const EVENT = 57715
const SHUTDOWN = 57716
const NULLX = 57717
const AUTO_INCREMENT = 57718
const APPROXNUM = 57719
const SIGNED = 57720
const UNSIGNED = 57721
const ZEROFILL = 57722
const ENGINES = 57723
const LOW_CARDINALITY = 57724
const AUTOEXTEND_SIZE = 57725
const ADMIN_NAME = 57726
const RANDOM = 57727
const SUSPEND = 57728
const ATTRIBUTE = 57729
const HISTORY = 57730
const REUSE = 57731
const CURRENT = 57732
const OPTIONAL = 57733
const FAILED_LOGIN_ATTEMPTS = 57734
const PASSWORD_LOCK_TIME = 57735
const UNBOUNDED = 57736
const SECONDARY = 57737
const RESTRICTED = 57738
const USER = 57739
const IDENTIFIED = 57740
const CIPHER = 57741
const ISSUER = 57742
const X509 = 57743
const SUBJECT = 57744
const SAN = 57745
const REQUIRE = 57746
const SSL = 57747
const NONE = 57748
const PASSWORD = 57749
const SHARED = 57750
const EXCLUSIVE = 57751
const MAX_QUERIES_PER_HOUR = 57752
const MAX_UPDATES_PER_HOUR = 57753
const MAX_CONNECTIONS_PER_HOUR = 57754
const MAX_USER_CONNECTIONS = 57755
const FORMAT = 57756
const VERBOSE = 57757
const CONNECTION = 57758
const TRIGGERS = 57759
const PROFILES = 57760
const LOAD = 57761
const INLINE = 57762
const INFILE = 57763
const TERMINATED = 57764
const OPTIONALLY = 57765
const ENCLOSED = 57766
const ESCAPED = 57767
const STARTING = 57768
const LINES = 57769
const ROWS = 57770
const IMPORT = 57771
const DISCARD = 57772
const JSONTYPE = 57773
const MODUMP = 57774
const OVER = 57775
const PRECEDING = 57776
const FOLLOWING = 57777
const GROUPS = 57778
const DATABASES = 57779
const TABLES = 57780
const SEQUENCES = 57781
const EXTENDED = 57782
const FULL = 57783
const PROCESSLIST = 57784
const FIELDS = 57785
const COLUMNS = 57786
const OPEN = 57787
const ERRORS = 57788
const WARNINGS = 57789
const INDEXES = 57790
const SCHEMAS = 57791
const NODE = 57792
const LOCKS = 57793
const ROLES = 57794
const TABLE_NUMBER = 57795
const COLUMN_NUMBER = 57796
const TABLE_VALUES = 57797
const TABLE_SIZE = 57798
const NAMES = 57799
const GLOBAL = 57800
const PERSIST = 57801
const SESSION = 57802
const ISOLATION = 57803
const LEVEL = 57804
const READ = 57805
const WRITE = 57806
const ONLY = 57807
const REPEATABLE = 57808
const COMMITTED = 57809
const UNCOMMITTED = 57810
const SERIALIZABLE = 57811
const LOCAL = 57812
const EVENTS = 57813
const PLUGINS = 57814
const CURRENT_TIMESTAMP = 57815
const DATABASE = 57816
const CURRENT_TIME = 57817
const LOCALTIME = 57818
const LOCALTIMESTAMP = 57819
const UTC_DATE = 57820
const UTC_TIME = 57821
const UTC_TIMESTAMP = 57822
const REPLACE = 57823
const CONVERT = 57824
const SEPARATOR = 57825
const TIMESTAMPDIFF = 57826
const CURRENT_DATE = 57827
const CURRENT_USER = 57828
const CURRENT_ROLE = 57829
const SECOND_MICROSECOND = 57830
const MINUTE_MICROSECOND = 57831
const MINUTE_SECOND = 57832
const HOUR_MICROSECOND = 57833
const HOUR_SECOND = 57834
const HOUR_MINUTE = 57835
const DAY_MICROSECOND = 57836
const DAY_SECOND = 57837
const DAY_MINUTE = 57838
const DAY_HOUR = 57839
const YEAR_MONTH = 57840
const SQL_TSI_HOUR = 57841
const SQL_TSI_DAY = 57842
const SQL_TSI_WEEK = 57843
const SQL_TSI_MONTH = 57844
const SQL_TSI_QUARTER = 57845
const SQL_TSI_YEAR = 57846
const SQL_TSI_SECOND = 57847
const SQL_TSI_MINUTE = 57848
const RECURSIVE = 57849
const CONFIG = 57850
const DRAINER = 57851
const SOURCE = 57852
const STREAM = 57853
const HEADERS = 57854
const CONNECTOR = 57855
const CONNECTORS = 57856
const DAEMON = 57857
const PAUSE = 57858
const CANCEL = 57859
const TASK = 57860
const RESUME = 57861
const MATCH = 57862
const AGAINST = 57863
const BOOLEAN = 57864
const LANGUAGE = 57865
const WITH = 57866
const QUERY = 57867
const EXPANSION = 57868
const WITHOUT = 57869
const VALIDATION = 57870
const UPGRADE = 57871
const RETRY = 57872
const ADDDATE = 57873
const BIT_AND = 57874
const BIT_OR = 57875
const BIT_XOR = 57876
const CAST = 57877
const COUNT = 57878
const APPROX_COUNT = 57879
const APPROX_COUNT_DISTINCT = 57880
const SERIAL_EXTRACT = 57881
const APPROX_PERCENTILE = 57882
const CURDATE = 57883
const CURTIME = 57884
const DATE_ADD = 57885
const DATE_SUB = 57886
const EXTRACT = 57887
const GROUP_CONCAT = 57888
const MAX = 57889
const MID = 57890
const MIN = 57891
const NOW = 57892
const POSITION = 57893
const SESSION_USER = 57894
const STD = 57895
const STDDEV = 57896
const MEDIAN = 57897
const CLUSTER_CENTERS = 57898
const KMEANS = 57899
const STDDEV_POP = 57900
const STDDEV_SAMP = 57901
const SUBDATE = 57902
const SUBSTR = 57903
const SUBSTRING = 57904
const SUM = 57905
const SYSDATE = 57906
const SYSTEM_USER = 57907
const TRANSLATE = 57908
const TRIM = 57909
const VARIANCE = 57910
const VAR_POP = 57911
const VAR_SAMP = 57912
const AVG = 57913
const RANK = 57914
const ROW_NUMBER = 57915
const DENSE_RANK = 57916
const BIT_CAST = 57917
const BITMAP_BIT_POSITION = 57918
const BITMAP_BUCKET_NUMBER = 57919
const BITMAP_COUNT = 57920
const BITMAP_CONSTRUCT_AGG = 57921
const BITMAP_OR_AGG = 57922
const NEXTVAL = 57923
const SETVAL = 57924
const CURRVAL = 57925
const LASTVAL = 57926
const ARROW = 57927
const ROW = 57928
const OUTFILE = 57929
const HEADER = 57930
const MAX_FILE_SIZE = 57931
const FORCE_QUOTE = 57932
const PARALLEL = 57933
const STRICT = 57934
const UNUSED = 57935
const BINDINGS = 57936
const DO = 57937
const DECLARE = 57938
const LOOP = 57939
const WHILE = 57940
const LEAVE = 57941
const ITERATE = 57942
const UNTIL = 57943
const CALL = 57944
const PREV = 57945
const SLIDING = 57946
const FILL = 57947
const SPBEGIN = 57948
const BACKEND = 57949
const SERVERS = 57950
const HANDLER = 57951
const PERCENT = 57952
const SAMPLE = 57953
const MO_TS = 57954
const PITR = 57955
const CDC = 57956
const KILL = 57957
const BACKUP = 57958
const FILESYSTEM = 57959
const PARALLELISM = 57960
const RESTORE = 57961
const QUERY_RESULT = 57962

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12345

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 131,
	11, 769,
	22, 769,
	-2, 762,
	-1, 154,
	239, 1174,
	241, 1073,
	-2, 1120,
	-1, 181,
	43, 590,
	241, 590,
	268, 597,
	269, 597,
	465, 590,
	-2, 627,
	-1, 220,
	641, 1932,
	-2, 500,
	-1, 522,
	641, 2052,
	-2, 386,
	-1, 580,
	641, 2111,
	-2, 384,
	-1, 581,
	641, 2112,
	-2, 385,
	-1, 582,
	641, 2113,
	-2, 387,
	-1, 715,
	320, 172,
	437, 172,
	438, 172,
	-2, 1837,
	-1, 781,
	83, 1624,
	-2, 1988,
	-1, 782,
	83, 1642,
	-2, 1959,
	-1, 786,
	83, 1643,
	-2, 1987,
	-1, 819,
	83, 1551,
	-2, 2185,
	-1, 820,
	83, 1552,
	-2, 2184,
	-1, 821,
	83, 1553,
	-2, 2174,
	-1, 822,
	83, 2146,
	-2, 2167,
	-1, 823,
	83, 2147,
	-2, 2168,
	-1, 824,
	83, 2148,
	-2, 2176,
	-1, 825,
	83, 2149,
	-2, 2156,
	-1, 826,
	83, 2150,
	-2, 2165,
	-1, 827,
	83, 2151,
	-2, 2177,
	-1, 828,
	83, 2152,
	-2, 2178,
	-1, 829,
	83, 2153,
	-2, 2183,
	-1, 830,
	83, 2154,
	-2, 2188,
	-1, 831,
	83, 2155,
	-2, 2189,
	-1, 832,
	83, 1620,
	-2, 2026,
	-1, 833,
	83, 1621,
	-2, 1821,
	-1, 834,
	83, 1622,
	-2, 2035,
	-1, 835,
	83, 1623,
	-2, 1830,
	-1, 837,
	83, 1626,
	-2, 1838,
	-1, 838,
	83, 1627,
	-2, 2059,
	-1, 840,
	83, 1630,
	-2, 1857,
	-1, 842,
	83, 1632,
	-2, 2071,
	-1, 843,
	83, 1633,
	-2, 2070,
	-1, 844,
	83, 1634,
	-2, 1901,
	-1, 845,
	83, 1635,
	-2, 1983,
	-1, 848,
	83, 1638,
	-2, 2082,
	-1, 850,
	83, 1640,
	-2, 2085,
	-1, 851,
	83, 1641,
	-2, 2087,
	-1, 852,
	83, 1644,
	-2, 2095,
	-1, 853,
	83, 1645,
	-2, 1968,
	-1, 854,
	83, 1646,
	-2, 2013,
	-1, 855,
	83, 1647,
	-2, 1978,
	-1, 856,
	83, 1648,
	-2, 2003,
	-1, 867,
	83, 1529,
	-2, 2179,
	-1, 868,
	83, 1530,
	-2, 2180,
	-1, 869,
	83, 1531,
	-2, 2181,
	-1, 966,
	460, 627,
	461, 627,
	-2, 591,
	-1, 1014,
	125, 1821,
	136, 1821,
	156, 1821,
	-2, 1795,
	-1, 1130,
	22, 796,
	-2, 745,
	-1, 1236,
	11, 769,
	22, 769,
	-2, 1409,
	-1, 1318,
	22, 796,
	-2, 745,
	-1, 1659,
	83, 1695,
	-2, 1985,
	-1, 1660,
	83, 1696,
	-2, 1986,
	-1, 1825,
	84, 949,
	-2, 955,
	-1, 2265,
	108, 1112,
	152, 1112,
	191, 1112,
	194, 1112,
	281, 1112,
	-2, 1105,
	-1, 2418,
	11, 769,
	22, 769,
	-2, 890,
	-1, 2450,
	84, 1781,
	157, 1781,
	-2, 1970,
	-1, 2451,
	84, 1781,
	157, 1781,
	-2, 1969,
	-1, 2452,
	84, 1757,
	157, 1757,
	-2, 1956,
	-1, 2453,
	84, 1758,
	157, 1758,
	-2, 1961,
	-1, 2454,
	84, 1759,
	157, 1759,
	-2, 1889,
	-1, 2455,
	84, 1760,
	157, 1760,
	-2, 1883,
	-1, 2456,
	84, 1761,
	157, 1761,
	-2, 1811,
	-1, 2457,
	84, 1762,
	157, 1762,
	-2, 1958,
	-1, 2458,
	84, 1763,
	157, 1763,
	-2, 1887,
	-1, 2459,
	84, 1764,
	157, 1764,
	-2, 1882,
	-1, 2460,
	84, 1765,
	157, 1765,
	-2, 1871,
	-1, 2461,
	84, 1781,
	157, 1781,
	-2, 1872,
	-1, 2462,
	84, 1781,
	157, 1781,
	-2, 1873,
	-1, 2464,
	84, 1770,
	157, 1770,
	-2, 2003,
	-1, 2465,
	84, 1748,
	157, 1748,
	-2, 1988,
	-1, 2466,
	84, 1779,
	157, 1779,
	-2, 1959,
	-1, 2467,
	84, 1779,
	157, 1779,
	-2, 1987,
	-1, 2468,
	84, 1779,
	157, 1779,
	-2, 1839,
	-1, 2469,
	84, 1777,
	157, 1777,
	-2, 1978,
	-1, 2470,
	84, 1774,
	157, 1774,
	-2, 1862,
	-1, 2471,
	83, 1729,
	84, 1729,
	157, 1729,
	395, 1729,
	396, 1729,
	397, 1729,
	-2, 1810,
	-1, 2472,
	83, 1730,
	84, 1730,
	157, 1730,
	395, 1730,
	396, 1730,
	397, 1730,
	-2, 1812,
	-1, 2473,
	83, 1731,
	84, 1731,
	157, 1731,
	395, 1731,
	396, 1731,
	397, 1731,
	-2, 2031,
	-1, 2474,
	83, 1733,
	84, 1733,
	157, 1733,
	395, 1733,
	396, 1733,
	397, 1733,
	-2, 1960,
	-1, 2475,
	83, 1735,
	84, 1735,
	157, 1735,
	395, 1735,
	396, 1735,
	397, 1735,
	-2, 1941,
	-1, 2476,
	83, 1737,
	84, 1737,
	157, 1737,
	395, 1737,
	396, 1737,
	397, 1737,
	-2, 1888,
	-1, 2477,
	83, 1739,
	84, 1739,
	157, 1739,
	395, 1739,
	396, 1739,
	397, 1739,
	-2, 1867,
	-1, 2478,
	83, 1740,
	84, 1740,
	157, 1740,
	395, 1740,
	396, 1740,
	397, 1740,
	-2, 1868,
	-1, 2479,
	83, 1742,
	84, 1742,
	157, 1742,
	395, 1742,
	396, 1742,
	397, 1742,
	-2, 1809,
	-1, 2480,
	84, 1784,
	157, 1784,
	395, 1784,
	396, 1784,
	397, 1784,
	-2, 1844,
	-1, 2481,
	84, 1784,
	157, 1784,
	395, 1784,
	396, 1784,
	397, 1784,
	-2, 1858,
	-1, 2482,
	84, 1787,
	157, 1787,
	395, 1787,
	396, 1787,
	397, 1787,
	-2, 1840,
	-1, 2483,
	84, 1787,
	157, 1787,
	395, 1787,
	396, 1787,
	397, 1787,
	-2, 1904,
	-1, 2484,
	84, 1784,
	157, 1784,
	395, 1784,
	396, 1784,
	397, 1784,
	-2, 1925,
	-1, 2694,
	108, 1112,
	152, 1112,
	191, 1112,
	194, 1112,
	281, 1112,
	-2, 1106,
	-1, 2712,
	81, 689,
	157, 689,
	-2, 1289,
	-1, 3123,
	194, 1112,
	305, 1377,
	-2, 1349,
	-1, 3296,
	108, 1112,
	152, 1112,
	191, 1112,
	194, 1112,
	-2, 1230,
	-1, 3298,
	108, 1112,
	152, 1112,
	191, 1112,
	194, 1112,
	-2, 1230,
	-1, 3310,
	81, 689,
	157, 689,
	-2, 1289,
	-1, 3332,
	194, 1112,
	305, 1377,
	-2, 1350,
	-1, 3477,
	108, 1112,
	152, 1112,
	191, 1112,
	194, 1112,
	-2, 1231,
	-1, 3504,
	84, 1192,
	157, 1192,
	-2, 1112,
	-1, 3642,
	84, 1192,
	157, 1192,
	-2, 1112,
	-1, 3801,
	84, 1196,
	157, 1196,
	-2, 1112,
	-1, 3849,
	84, 1197,
	157, 1197,
	-2, 1112,
}

const yyPrivate = 57344

const yyLast = 49026

var yyAct = [...]int{
	748, 725, 3895, 750, 3869, 2742, 209, 1911, 3805, 3888,
	3317, 3811, 1639, 3703, 719, 3411, 3812, 3804, 3642, 3109,
	734, 3729, 3142, 2745, 3682, 3760, 3346, 3213, 3532, 2736,
	3620, 2539, 1474, 3588, 3676, 1271, 727, 3641, 1635, 3214,
	3707, 3462, 3465, 1411, 3560, 616, 2653, 3464, 778, 1131,
	2739, 3415, 1013, 3611, 1551, 3406, 3683, 1417, 1858, 634,
	3685, 640, 640, 3283, 3479, 2313, 1686, 640, 657, 666,
	3333, 3118, 666, 3474, 3484, 2715, 1125, 1642, 3446, 3079,
	3040, 3211, 3299, 2851, 2852, 3068, 64, 3271, 2832, 2766,
	2850, 3138, 3120, 3301, 3127, 2000, 3253, 2574, 1968, 3169,
	1700, 2914, 2003, 2073, 2115, 3199, 194, 2606, 2412, 678,
	2874, 2446, 2316, 3179, 2847, 2683, 3047, 3051, 674, 37,
	1871, 3045, 1383, 3126, 3043, 3041, 1467, 3088, 717, 3042,
	2295, 2243, 2346, 1121, 3038, 2448, 1387, 2695, 2017, 2276,
	2224, 2223, 2395, 722, 2961, 2111, 2098, 3018, 2518, 2081,
	1792, 2887, 2082, 2046, 1540, 2500, 2074, 939, 1547, 1996,
	2413, 130, 2110, 1969, 1971, 2671, 2897, 2400, 2666, 2747,
	2768, 2314, 763, 131, 1901, 2707, 1890, 6, 131, 2275,
	1555, 1552, 1633, 36, 2265, 616, 2444, 663, 1007, 723,
	205, 8, 204, 7, 1380, 1834, 1514, 1483, 2112, 1070,
	1453, 2255, 1584, 633, 2145, 2309, 2122, 726, 716, 209,
	1624, 209, 1693, 1061, 1062, 1673, 1144, 2062, 2080, 1521,
	640, 1055, 1056, 2077, 724, 2607, 1060, 1870, 735, 1566,
	23, 1400, 2036, 615, 975, 1830, 1632, 646, 27, 1006,
	131, 16, 2420, 671, 14, 1450, 1833, 871, 1809, 938,
	1420, 107, 15, 1452, 33, 649, 1421, 1412, 1701, 652,
	681, 1505, 195, 1513, 680, 915, 1396, 24, 665, 191,
	921, 17, 10, 677, 187, 1022, 936, 1316, 1272, 961,
	2119, 3694, 873, 1058, 874, 1204, 1205, 1206, 1203, 1204,
	1205, 1206, 1203, 3605, 3492, 1576, 1040, 2422, 2642, 2642,
	2642, 1204, 1205, 1206, 1203, 929, 662, 930, 3313, 658,
	3095, 2931, 660, 2930, 2129, 1057, 1575, 1059, 1562, 1126,
	661, 3439, 659, 1638, 3286, 3206, 2296, 2562, 2506, 2504,
	1127, 2501, 2503, 1805, 1528, 1524, 636, 1054, 1053, 645,
	669, 193, 635, 2222, 910, 1335, 891, 889, 995, 3011,
	1019, 1563, 1054, 3008, 1054, 3013, 3010, 3880, 924, 1434,
	920, 1020, 1799, 2634, 2632, 1331, 131, 1347, 1041, 3404,
	1126, 1052, 1021, 1526, 1204, 1205, 1206, 1203, 2910, 2908,
	2051, 131, 3671, 131, 8, 3567, 7, 3561, 1204, 1205,
	1206, 1203, 3407, 3212, 2095, 1266, 3687, 2076, 641, 872,
	2988, 3786, 2068, 2354, 883, 2636, 192, 60, 183, 155,
	3447, 3451, 192, 192, 192, 192, 901, 1166, 2266, 3300,
	192, 3627, 2548, 2116, 184, 2556, 2267, 1342, 1561, 3593,
	1570, 176, 3740, 1582, 1813, 185, 2701, 1491, 1341, 1035,
	1030, 1025, 1029, 1033, 192, 890, 888, 192, 60, 183,
	155, 1339, 891, 192, 129, 889, 192, 60, 183, 155,
	1567, 2933, 1023, 1579, 1810, 3628, 1355, 1038, 2922, 117,
	1017, 1028, 1018, 676, 2986, 2127, 188, 1372, 2260, 1807,
	718, 2845, 1569, 188, 2699, 1581, 2438, 926, 1343, 919,
	188, 2439, 990, 988, 1625, 989, 1201, 1629, 923, 922,
	2655, 129, 192, 60, 183, 155, 1430, 2013, 3595, 1431,
	1454, 1142, 1456, 884, 188, 904, 2880, 188, 1980, 911,
	984, 1628, 1036, 188, 2426, 1408, 188, 2425, 2519, 1039,
	2427, 3012, 1605, 1885, 2702, 3009, 2656, 2881, 2882, 918,
	192, 1981, 1982, 192, 60, 183, 155, 192, 60, 183,
	155, 1026, 3428, 137, 138, 1641, 139, 140, 928, 1199,
	3783, 1815, 1816, 917, 1416, 1016, 1593, 916, 1415, 1418,
	1419, 1015, 188, 903, 718, 1037, 862, 909, 861, 863,
	864, 996, 865, 866, 2668, 1194, 3113, 2211, 129, 1418,
	1419, 3111, 3815, 3816, 2669, 1433, 3690, 3773, 1354, 907,
	3689, 3772, 3690, 992, 3689, 1630, 3688, 1139, 3688, 3771,
	188, 2637, 3836, 188, 3674, 1027, 3779, 188, 1527, 1525,
	3873, 3874, 3762, 3215, 154, 182, 190, 3762, 115, 1627,
	3677, 3678, 3679, 3680, 3215, 3765, 2915, 927, 640, 640,
	1735, 3788, 3789, 2667, 2543, 3564, 181, 175, 174, 640,
	1135, 2131, 1136, 66, 3784, 3785, 3700, 2916, 1181, 2917,
	1147, 1182, 1997, 908, 3228, 3060, 3272, 994, 666, 666,
	1645, 640, 2787, 1134, 154, 1614, 190, 2657, 3062, 2123,
	3279, 3456, 1987, 1620, 3052, 3597, 3598, 2388, 2254, 1184,
	3427, 2059, 1034, 927, 2951, 3358, 181, 2658, 3429, 1534,
	1533, 3781, 1186, 1197, 1198, 1187, 2949, 1196, 2553, 3579,
	1174, 3580, 180, 1176, 177, 178, 179, 2352, 3405, 1169,
	2909, 3057, 3058, 1406, 2635, 2391, 2392, 3574, 1031, 2128,
	2259, 1032, 1991, 1189, 1244, 1207, 2837, 3059, 2390, 2674,
	925, 1177, 1022, 1237, 993, 186, 1626, 3814, 3056, 3602,
	1064, 1356, 1247, 1444, 3141, 3774, 1334, 1577, 1432, 2011,
	2012, 3453, 1147, 2651, 3693, 3582, 125, 3585, 1574, 1179,
	180, 3257, 126, 663, 663, 1128, 3604, 1255, 2396, 914,
	1135, 3231, 2955, 2641, 886, 1161, 712, 1644, 1643, 714,
	3373, 1127, 2106, 1127, 713, 1191, 3581, 1192, 1193, 2652,
	632, 2117, 1127, 1276, 2332, 3115, 2117, 2117, 3844, 3370,
	2312, 2335, 3077, 1185, 2932, 1022, 1275, 1019, 2929, 3089,
	887, 1170, 2134, 2136, 2137, 3632, 131, 131, 1020, 127,
	2150, 1042, 1024, 1180, 2708, 2118, 3624, 3139, 3140, 1021,
	3722, 1054, 59, 3717, 1054, 1054, 1054, 1172, 2843, 3787,
	668, 1054, 1190, 1127, 1054, 2262, 1149, 1148, 667, 1175,
	1178, 3363, 3054, 3626, 2130, 3019, 1141, 3708, 2334, 3724,
	664, 1651, 1654, 1655, 3318, 2502, 3730, 1188, 3110, 902,
	900, 2741, 1652, 991, 3325, 1171, 675, 1150, 1337, 1529,
	1019, 61, 662, 662, 1395, 658, 658, 2239, 660, 660,
	929, 1236, 930, 3264, 1352, 634, 661, 661, 659, 659,
	1183, 2333, 1021, 1138, 1140, 872, 2737, 2738, 3592, 2741,
	1314, 2633, 3144, 1319, 1130, 664, 135, 189, 1129, 136,
	1018, 3452, 61, 1158, 156, 3596, 1154, 1155, 939, 57,
	156, 156, 156, 156, 3262, 2557, 3029, 1407, 156, 1160,
	2386, 3374, 3699, 1808, 1240, 1241, 1242, 1243, 1149, 1148,
	3523, 2441, 1173, 1418, 1419, 1245, 664, 1811, 1418, 1419,
	664, 3263, 156, 3906, 1123, 156, 1615, 189, 2364, 1616,
	2319, 156, 3633, 2363, 156, 2680, 3418, 61, 1152, 3518,
	3063, 640, 1463, 3625, 1446, 3053, 1462, 1998, 3599, 985,
	616, 616, 2384, 2385, 1414, 128, 44, 2952, 1159, 616,
	616, 1393, 58, 1478, 1478, 1392, 640, 3575, 1410, 1409,
	3891, 3576, 3579, 1391, 3580, 132, 133, 3780, 61, 134,
	156, 3116, 61, 2816, 3731, 3646, 3612, 666, 1506, 634,
	3119, 1122, 3007, 3075, 1517, 1517, 1480, 1321, 3457, 2673,
	3512, 1476, 1476, 3803, 2788, 209, 2789, 2790, 1516, 1516,
	2355, 3055, 3302, 2135, 616, 1386, 1235, 1485, 156, 1287,
	1288, 156, 1394, 1988, 1621, 156, 2312, 3402, 3582, 1404,
	1238, 1389, 987, 3218, 1348, 986, 1357, 1423, 1424, 3759,
	1426, 1427, 2329, 1428, 3533, 3534, 3535, 3539, 3537, 3538,
	3536, 3139, 3140, 676, 2892, 2893, 2677, 2678, 1353, 3581,
	1451, 3692, 1653, 3143, 1445, 1559, 1166, 2318, 3437, 3135,
	1564, 2676, 2320, 1990, 1535, 3023, 2549, 1573, 2687, 2690,
	2691, 2692, 2688, 2689, 2876, 2878, 2430, 1472, 1473, 2350,
	2120, 2954, 1364, 1370, 1320, 1369, 2645, 1368, 1367, 670,
	3265, 1318, 1603, 928, 1045, 1050, 1051, 3525, 3892, 2785,
	2322, 933, 934, 935, 3645, 3254, 1478, 3136, 1478, 1135,
	931, 2146, 3076, 2132, 2133, 1377, 2321, 1358, 2648, 1583,
	2238, 2963, 2962, 2234, 2233, 2232, 1402, 1403, 1458, 1460,
	1346, 1487, 1640, 1344, 1345, 646, 1818, 1470, 1471, 1819,
	2807, 2808, 1165, 3438, 2319, 2322, 1598, 1599, 1022, 1397,
	1401, 1401, 1401, 3024, 1379, 1022, 2727, 1646, 1647, 1648,
	1649, 1650, 3519, 3520, 985, 1817, 1538, 131, 1541, 1542,
	2231, 3802, 985, 2227, 1397, 1397, 1478, 1806, 892, 1543,
	1544, 1568, 1507, 1422, 1435, 1436, 1425, 2376, 1580, 893,
	1549, 1550, 1530, 1699, 3485, 2180, 3902, 1572, 2179, 1691,
	1132, 663, 1461, 1695, 1696, 1697, 1698, 1748, 2349, 1349,
	1350, 3897, 1732, 1613, 1687, 1359, 1360, 1361, 1362, 1363,
	1742, 1365, 2817, 2819, 2820, 2821, 2818, 1371, 1486, 3889,
	3890, 2323, 1554, 1557, 131, 1558, 1498, 645, 1602, 3514,
	2328, 131, 2877, 3513, 2326, 1504, 1601, 987, 1518, 3094,
	986, 3886, 3219, 1637, 131, 987, 2246, 1519, 986, 3907,
	3851, 3769, 2319, 2322, 2806, 1202, 131, 1388, 2713, 2125,
	3575, 1202, 1794, 1135, 3684, 2039, 2323, 3176, 1132, 2247,
	2248, 2318, 2312, 2317, 3898, 2315, 2320, 1047, 1048, 1049,
	1822, 1823, 1166, 1656, 997, 1506, 1801, 2307, 1790, 1733,
	1831, 1478, 1836, 1837, 1618, 1839, 1446, 640, 2646, 3137,
	1591, 2410, 640, 1594, 3823, 1478, 2521, 3172, 1622, 939,
	662, 3268, 1859, 658, 3852, 2714, 660, 3230, 2291, 1586,
	2216, 1478, 1611, 3852, 661, 1608, 659, 1446, 1607, 3817,
	2321, 1592, 657, 1864, 2548, 1612, 1202, 1661, 1662, 1663,
	1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1747,
	1793, 1610, 1884, 1684, 1685, 1609, 1606, 1636, 1880, 1631,
	3148, 1891, 1891, 2257, 1446, 3799, 1446, 1446, 3146, 3017,
	640, 640, 1388, 1958, 1831, 1962, 3750, 3824, 1478, 1965,
	1966, 1978, 3725, 3713, 2323, 1164, 1682, 1683, 1675, 2318,
	2312, 2317, 3015, 2315, 2320, 616, 2411, 1478, 2714, 3665,
	2411, 1757, 3608, 1838, 3664, 2037, 1204, 1205, 1206, 1203,
	3659, 1623, 1794, 1888, 1315, 3658, 1840, 1794, 1794, 1634,
	1204, 1205, 1206, 1203, 640, 1831, 1478, 2411, 2022, 2895,
	640, 640, 640, 674, 674, 2660, 1913, 3657, 3800, 2638,
	2032, 2033, 2034, 2035, 1163, 1868, 1869, 2041, 2321, 3608,
	1861, 1796, 2290, 3656, 209, 2125, 3714, 209, 209, 2014,
	209, 2538, 1878, 1879, 3636, 1960, 2984, 2049, 2526, 896,
	2052, 1876, 3666, 2055, 3635, 3607, 2057, 2280, 1762, 2256,
	2441, 2116, 1889, 3608, 1894, 1979, 2305, 1883, 3608, 3379,
	1886, 1887, 3327, 1791, 2221, 2215, 2214, 2187, 2006, 2007,
	1748, 1748, 2084, 1992, 2107, 1730, 1731, 1797, 1734, 3292,
	3608, 3176, 1748, 1748, 2009, 1984, 1749, 1986, 3246, 2100,
	895, 1164, 1378, 3242, 898, 897, 3608, 2004, 2005, 1756,
	1690, 1758, 2099, 1759, 1760, 1761, 2021, 2125, 1892, 1862,
	1863, 2159, 1999, 1738, 1739, 1740, 1826, 2125, 3608, 1464,
	1859, 1166, 1855, 1977, 1478, 2114, 1754, 2094, 1856, 1755,
	2050, 1860, 2441, 2053, 2054, 3328, 2056, 1877, 2024, 2025,
	2026, 1204, 1205, 1206, 1203, 3914, 1768, 1769, 1397, 1882,
	2086, 1872, 3293, 1874, 1875, 3156, 1022, 1873, 1867, 1022,
	2871, 3247, 1401, 1895, 1896, 1789, 3243, 1881, 1022, 3899,
	1204, 1205, 1206, 1203, 1401, 2613, 2605, 3313, 2108, 1959,
	2899, 2716, 2564, 2090, 1835, 2551, 2546, 2158, 2534, 2528,
	2550, 2542, 1568, 1967, 1964, 2299, 131, 2523, 1851, 131,
	131, 2175, 131, 2160, 1993, 2149, 2515, 2105, 2513, 2154,
	2511, 1983, 2044, 1985, 1865, 663, 2156, 876, 877, 878,
	879, 2030, 2079, 1827, 1828, 1829, 1588, 3278, 3157, 1252,
	2019, 1019, 2020, 2411, 2079, 1842, 1843, 1844, 1845, 2509,
	2047, 2016, 1020, 1019, 2279, 131, 2027, 2028, 1202, 1202,
	2166, 2045, 1151, 1021, 1020, 1202, 1119, 1114, 2173, 2280,
	3549, 2524, 2529, 1022, 2064, 1021, 2217, 3377, 131, 2194,
	2524, 1835, 1235, 2008, 876, 877, 878, 879, 2193, 2516,
	2190, 2514, 1219, 2510, 2178, 2195, 2196, 2197, 2169, 2096,
	2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209,
	1893, 2093, 2085, 3099, 2168, 2091, 2946, 2226, 1466, 2228,
	2501, 2167, 2510, 2104, 2124, 3718, 1595, 2280, 3486, 1634,
	3305, 3303, 894, 1384, 2102, 717, 3908, 1385, 640, 640,
	640, 3877, 2347, 2109, 662, 3695, 3204, 658, 1019, 2216,
	660, 2901, 1202, 640, 640, 640, 640, 3090, 661, 1236,
	659, 1202, 1489, 1737, 1736, 2103, 2277, 1202, 1468, 3719,
	1021, 1202, 3487, 1429, 3306, 3304, 881, 2283, 1446, 1469,
	2143, 2144, 1398, 3606, 3571, 1439, 1440, 1202, 1442, 1443,
	3516, 1447, 1448, 1449, 1202, 3515, 2138, 2125, 2147, 1596,
	1737, 1736, 3501, 2140, 1446, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1219, 2141, 2142, 2152, 1675, 3458, 3285, 1465,
	3177, 2341, 1493, 1494, 1495, 1496, 1497, 3168, 1499, 1500,
	1501, 1502, 1503, 881, 3640, 3091, 1509, 1510, 1511, 1512,
	3162, 1763, 1764, 1765, 1766, 3158, 3105, 1770, 1771, 1772,
	1773, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1218, 1217, 1227, 1228, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1219, 899, 1384, 1774, 2348, 3070, 1385, 3092,
	2182, 2840, 2839, 2685, 2415, 2415, 1978, 2415, 1218, 1217,
	1227, 1228, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1219,
	1399, 2643, 2561, 2527, 2432, 616, 616, 2089, 2088, 1794,
	2218, 1794, 1767, 1135, 2292, 2285, 2286, 2087, 1374, 1478,
	640, 2210, 2212, 2213, 2301, 2288, 2289, 1373, 1137, 1794,
	1794, 2298, 2571, 2300, 640, 2495, 1276, 2048, 2139, 2311,
	1135, 2485, 634, 2240, 2310, 1694, 1694, 2153, 1517, 1275,
	1978, 1821, 2258, 2490, 1522, 2492, 2048, 2436, 3770, 209,
	1203, 2353, 1516, 2449, 2356, 2357, 2358, 2359, 2360, 2361,
	2362, 3528, 1022, 2365, 2366, 2367, 2368, 2369, 2370, 2371,
	2372, 2373, 2374, 2375, 2419, 2377, 2378, 2379, 2380, 2381,
	2428, 2382, 2429, 2417, 3527, 2421, 1206, 1203, 2918, 2531,
	2777, 2775, 2753, 2304, 2751, 2284, 1204, 1205, 1206, 1203,
	2433, 2434, 2530, 3507, 2533, 3454, 2544, 3207, 3459, 3460,
	2114, 2324, 2325, 3882, 2330, 2188, 2189, 1478, 2191, 1478,
	2297, 1478, 3905, 1681, 3881, 2198, 1135, 3827, 2287, 1204,
	1205, 1206, 1203, 2293, 2563, 3276, 2294, 1019, 2489, 1678,
	1680, 1677, 1976, 1679, 2626, 1401, 2627, 2828, 2418, 2558,
	1204, 1205, 1206, 1203, 3798, 2496, 1254, 2554, 1522, 1021,
	1478, 2591, 2443, 3455, 3797, 3720, 2393, 3808, 2572, 1253,
	2654, 2578, 3661, 2487, 2826, 2965, 2598, 3284, 2592, 2593,
	2423, 1478, 2494, 1458, 1460, 3904, 2595, 2596, 1204, 1205,
	1206, 1203, 2590, 3277, 1204, 1205, 1206, 1203, 1476, 2505,
	2824, 2813, 2601, 639, 639, 2827, 3649, 2437, 3639, 647,
	3629, 3562, 1977, 2599, 1752, 3489, 3488, 2440, 3319, 1476,
	3307, 131, 1222, 1223, 1224, 1225, 1226, 1219, 2644, 1753,
	1646, 1794, 2825, 3275, 2488, 2486, 3061, 2942, 2602, 2603,
	1204, 1205, 1206, 1203, 2913, 2912, 1135, 2811, 2582, 3205,
	1135, 1204, 1205, 1206, 1203, 2579, 2810, 1478, 2823, 2812,
	2681, 2682, 1204, 1205, 1206, 1203, 2809, 1962, 2801, 2661,
	2795, 2573, 2560, 2449, 2794, 2712, 1113, 1109, 1110, 1111,
	1112, 2718, 2587, 2555, 2586, 2585, 2583, 1204, 1205, 1206,
	1203, 2575, 2569, 2575, 3706, 2793, 2497, 2536, 2792, 2552,
	2729, 2608, 2609, 2639, 2517, 2722, 2723, 2614, 2547, 2597,
	1135, 1204, 1205, 1206, 1203, 2545, 2220, 2067, 2750, 2630,
	1523, 1204, 1205, 1206, 1203, 1135, 1135, 1135, 1891, 2066,
	2696, 1135, 2065, 2761, 2762, 2763, 2764, 1135, 2771, 2061,
	2772, 2773, 2060, 2774, 2015, 2776, 2565, 2566, 1814, 2756,
	2757, 2584, 1812, 1589, 2760, 1022, 2771, 2697, 2581, 1333,
	2767, 712, 647, 2684, 714, 3170, 3433, 3046, 2415, 713,
	1913, 2568, 2600, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1208, 3737, 2829, 3600, 3601, 2023, 2977, 2670, 2700, 3901,
	3900, 616, 2719, 1204, 1205, 1206, 1203, 1962, 1135, 1978,
	1978, 1978, 1978, 1204, 1205, 1206, 1203, 2720, 3412, 2709,
	1117, 1135, 1978, 3875, 3843, 2415, 2725, 2726, 3842, 3839,
	3777, 2853, 3776, 3589, 2721, 2540, 2541, 3757, 2748, 2724,
	3702, 1478, 2748, 2834, 2853, 2744, 2662, 3463, 2171, 2731,
	1634, 131, 640, 640, 3681, 2663, 2976, 2665, 751, 761,
	2755, 131, 2679, 2703, 2711, 3672, 2717, 3653, 752, 3648,
	753, 757, 760, 756, 754, 755, 3647, 1116, 3603, 8,
	3591, 7, 2163, 1204, 1205, 1206, 1203, 3733, 2730, 3421,
	2733, 2783, 2784, 3590, 3584, 2746, 3563, 3509, 3470, 2752,
	2588, 2589, 3440, 3435, 2867, 3432, 2799, 2800, 209, 1204,
	1205, 1206, 1203, 209, 2759, 2170, 1204, 1205, 1206, 1203,
	3749, 3420, 3431, 758, 3410, 3408, 2905, 3387, 2907, 3386,
	3383, 2836, 2157, 3381, 2833, 1748, 2791, 1748, 2803, 3314,
	2928, 3274, 1204, 1205, 1206, 1203, 3273, 1794, 1204, 1205,
	1206, 1203, 1794, 2941, 3583, 759, 3270, 3260, 2728, 1478,
	3255, 3239, 2948, 2099, 3237, 3165, 2835, 3164, 3159, 2841,
	3154, 3153, 2854, 2855, 2856, 2857, 1204, 1205, 1206, 1203,
	3071, 1977, 1977, 1977, 1977, 2870, 2868, 2866, 3033, 2838,
	1835, 3032, 3028, 3026, 1977, 2896, 3022, 2225, 2959, 2956,
	2953, 2911, 2886, 2883, 2885, 2822, 2814, 1721, 1204, 1205,
	1206, 1203, 2804, 2802, 2902, 3367, 1542, 2869, 2798, 2906,
	1022, 2797, 2981, 2796, 2649, 2647, 1543, 1544, 2640, 818,
	817, 1022, 2537, 2235, 2230, 1793, 1549, 1550, 2229, 2925,
	2927, 2070, 1204, 1205, 1206, 1203, 2063, 1820, 1804, 2935,
	2970, 1803, 2972, 2923, 1590, 1492, 1382, 3025, 1340, 1338,
	1283, 1279, 2903, 3027, 2934, 2904, 1278, 3030, 3031, 2945,
	2950, 2900, 3234, 1554, 1557, 1135, 1558, 3572, 1120, 885,
	131, 3049, 3434, 2921, 3419, 131, 2926, 2924, 2919, 3298,
	3297, 3065, 3296, 3267, 2749, 2938, 2937, 640, 2936, 1204,
	1205, 1206, 1203, 3251, 2944, 3249, 131, 3248, 3245, 3080,
	1135, 3244, 3238, 640, 2957, 1135, 1135, 131, 3236, 3220,
	3210, 2958, 2989, 2990, 1978, 2277, 3209, 3098, 2991, 2992,
	2993, 2994, 2964, 2995, 2996, 2997, 2998, 2999, 3000, 3001,
	3002, 3003, 3004, 2973, 2974, 2980, 2341, 2968, 2969, 3016,
	3195, 2879, 3194, 3100, 3036, 2971, 3498, 3014, 3125, 3074,
	3128, 2155, 3128, 3128, 2982, 2975, 2967, 1135, 2966, 2696,
	1717, 2960, 1204, 1205, 1206, 1203, 2894, 1714, 2659, 3132,
	2512, 1716, 1713, 1715, 1719, 1720, 3149, 2508, 2507, 1718,
	639, 1124, 2199, 3021, 1478, 1478, 1022, 3145, 1022, 3020,
	2192, 1133, 3034, 1022, 2186, 3112, 3114, 3035, 2185, 3147,
	1218, 1217, 1227, 1228, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1219, 3096, 1157, 2184, 2183, 3150, 3151, 2181, 1022,
	2177, 3083, 1476, 1476, 3066, 3067, 3087, 1204, 1205, 1206,
	1203, 640, 3073, 192, 3082, 183, 155, 3049, 2979, 3085,
	3086, 2176, 3124, 2174, 3093, 2165, 1446, 2162, 3133, 1962,
	1962, 3106, 3108, 2161, 3097, 3102, 2069, 3101, 3107, 2311,
	2978, 1019, 3103, 3104, 2310, 1204, 1205, 1206, 1203, 1787,
	1786, 1785, 1020, 1751, 131, 3129, 3130, 1750, 1741, 131,
	1490, 3123, 3134, 1021, 1488, 2743, 1977, 1204, 1205, 1206,
	1203, 2402, 2406, 2407, 2408, 2403, 1135, 2404, 2409, 3826,
	2591, 2405, 1273, 188, 3732, 131, 3857, 3667, 3655, 3208,
	3650, 1537, 3543, 1230, 3526, 1234, 192, 3496, 3522, 2449,
	3855, 2624, 3500, 1724, 1725, 1726, 1727, 1728, 1729, 1722,
	1723, 1231, 1233, 1229, 3483, 1232, 1218, 1217, 1227, 1228,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1219, 1204, 1205,
	1206, 1203, 3395, 3161, 2983, 640, 3393, 3160, 3167, 3166,
	3365, 3364, 3361, 3173, 3174, 3163, 3171, 2623, 3360, 3155,
	3184, 1218, 1217, 1227, 1228, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1219, 3326, 3188, 3323, 188, 3321, 3175, 3191,
	3192, 3193, 3233, 1443, 1204, 1205, 1206, 1203, 3287, 3235,
	1548, 1539, 1553, 1556, 3187, 2622, 3203, 3197, 1218, 1217,
	1227, 1228, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1219,
	1545, 1381, 2830, 2754, 2705, 3258, 3221, 2704, 2698, 2664,
	3250, 2621, 1204, 1205, 1206, 1203, 2625, 3222, 2522, 3223,
	2567, 2431, 2383, 2278, 2249, 2219, 1676, 3813, 188, 2029,
	3227, 1825, 1800, 3226, 1619, 3240, 2148, 1571, 1204, 1205,
	1206, 1203, 1546, 3232, 1218, 1217, 1227, 1228, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1219, 3261, 1332, 3291, 1317,
	1218, 1217, 1227, 1228, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1219, 1313, 1312, 2415, 1978, 3310, 3186, 2620, 1311,
	1310, 2575, 1218, 1217, 1227, 1228, 1220, 1221, 1222, 1223,
	1224, 1225, 1226, 1219, 2619, 1309, 1308, 3256, 3252, 1307,
	3329, 3131, 1306, 1135, 1022, 1204, 1205, 1206, 1203, 1305,
	1304, 1022, 3125, 1441, 1303, 1302, 1135, 1301, 1300, 1299,
	1298, 1204, 1205, 1206, 1203, 1297, 3330, 1135, 1296, 3376,
	1295, 3747, 2618, 1478, 1294, 1293, 1292, 3266, 1484, 3369,
	1291, 1290, 1289, 1286, 3269, 1285, 3281, 3282, 1284, 1282,
	2767, 1281, 1280, 1962, 3312, 1277, 1270, 1135, 1794, 1204,
	1205, 1206, 1203, 1269, 1267, 3378, 1266, 1265, 3352, 3359,
	1264, 1476, 1794, 3309, 2617, 3392, 1263, 1262, 3394, 1261,
	2853, 3316, 3308, 1260, 1259, 1258, 209, 3288, 3289, 3290,
	131, 2616, 1257, 3294, 3295, 3400, 1256, 131, 1251, 1135,
	1250, 1204, 1205, 1206, 1203, 3389, 3366, 3368, 3371, 1249,
	1248, 1168, 1118, 3311, 3745, 3399, 3375, 3743, 1204, 1205,
	1206, 1203, 2853, 3315, 3180, 3181, 3380, 3362, 2282, 3382,
	2264, 1156, 3505, 3385, 3183, 2686, 2615, 2442, 3436, 3384,
	2072, 3390, 1167, 3388, 3185, 3443, 2860, 1977, 2612, 1135,
	1227, 1228, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1219,
	3391, 2859, 3417, 1204, 1205, 1206, 1203, 2611, 1135, 1478,
	1478, 2858, 116, 63, 3080, 1204, 1205, 1206, 1203, 62,
	2535, 3320, 3413, 3322, 3478, 3414, 3478, 2525, 2863, 3441,
	3442, 3466, 3403, 2864, 1204, 1205, 1206, 1203, 1375, 1853,
	1854, 3468, 1135, 3494, 1135, 2610, 3069, 1476, 1687, 2940,
	2861, 3472, 3473, 2351, 3497, 2862, 3499, 1848, 1849, 1850,
	2604, 1478, 3224, 3225, 3422, 1640, 3423, 1640, 3450, 3449,
	3448, 3372, 1204, 1205, 1206, 1203, 3469, 642, 643, 640,
	3198, 1135, 1135, 1950, 644, 1135, 1135, 1204, 1205, 1206,
	1203, 2520, 3482, 3471, 2865, 3481, 2407, 2408, 131, 1687,
	3121, 1531, 3122, 1022, 3466, 3466, 3312, 2086, 3466, 3466,
	3545, 3493, 3540, 2559, 1859, 1585, 3554, 3352, 3359, 1565,
	3503, 3445, 2236, 3506, 2031, 3558, 3559, 3510, 3530, 3531,
	2540, 2541, 3541, 3542, 2594, 1162, 3475, 3044, 1478, 1217,
	1227, 1228, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1219,
	2570, 3037, 2732, 3551, 1689, 2706, 2303, 2273, 1857, 3586,
	3397, 1204, 1205, 1206, 1203, 3490, 3491, 3578, 3398, 3550,
	3570, 2397, 3552, 1824, 1737, 1736, 1476, 1204, 1205, 1206,
	1203, 1204, 1205, 1206, 1203, 1328, 1329, 3866, 2779, 131,
	3565, 1326, 1327, 3652, 3569, 2780, 2781, 2782, 1324, 1325,
	1322, 1323, 3610, 3573, 3621, 3615, 3152, 3577, 2402, 2406,
	2407, 2408, 2403, 2394, 2404, 2409, 2389, 3396, 2405, 1963,
	1438, 1135, 1437, 1195, 3190, 2888, 3547, 2237, 2101, 1841,
	3548, 1390, 3644, 3638, 1846, 1366, 3502, 1413, 3833, 3831,
	3791, 3609, 3767, 3766, 1640, 3764, 3508, 3709, 3668, 3557,
	3556, 3495, 3616, 3617, 3417, 3409, 3618, 3241, 3217, 3216,
	3630, 3201, 2336, 2306, 1135, 1587, 3634, 3200, 2898, 1478,
	1388, 3859, 3858, 3401, 3259, 2943, 2266, 2164, 1336, 1153,
	3546, 3858, 3859, 1022, 3524, 3196, 1132, 3466, 1405, 876,
	877, 878, 879, 3651, 1132, 196, 3, 71, 2, 3878,
	3879, 3662, 1897, 1898, 1, 2631, 3691, 1476, 1798, 1330,
	880, 3660, 875, 3430, 3698, 3686, 3613, 1255, 1455, 2424,
	2010, 1482, 1802, 882, 2872, 2873, 3189, 2875, 2650, 1135,
	3669, 2121, 2842, 2387, 2253, 3064, 1376, 932, 1743, 1600,
	1044, 1146, 3710, 1597, 1145, 1143, 1692, 765, 2075, 2831,
	2805, 3553, 3466, 3865, 3894, 3825, 2018, 3868, 1617, 3696,
	749, 3705, 2018, 2018, 2018, 3758, 3673, 3701, 3829, 131,
	3727, 3704, 3675, 3568, 2126, 1200, 1135, 2920, 957, 3712,
	806, 776, 1268, 1578, 1478, 3734, 2987, 3752, 3755, 2985,
	3742, 3744, 3746, 3748, 3721, 1046, 775, 3280, 2675, 3466,
	3726, 2891, 3663, 3623, 3756, 1043, 958, 3735, 2058, 3670,
	3566, 1532, 1536, 2302, 3631, 3728, 3751, 3504, 3117, 2740,
	1560, 3723, 1476, 3741, 3324, 3426, 3424, 3425, 682, 1989,
	3763, 614, 1478, 1004, 3761, 3621, 3544, 2071, 683, 2281,
	3782, 3654, 912, 2263, 913, 905, 2694, 2693, 3775, 1657,
	1209, 3801, 1674, 3005, 3006, 1246, 721, 3809, 3790, 3792,
	2151, 2672, 3347, 2884, 3793, 3794, 70, 3806, 69, 3711,
	1476, 68, 3795, 3796, 3715, 3716, 67, 2040, 217, 767,
	216, 3587, 3461, 3754, 3870, 747, 746, 745, 744, 743,
	742, 2401, 3818, 2399, 3819, 3838, 3820, 3822, 3821, 2398,
	3832, 1973, 3834, 3835, 1972, 3736, 1087, 3830, 3828, 2038,
	3078, 3686, 1135, 2770, 2765, 3837, 1902, 1900, 2758, 2331,
	2338, 1899, 3810, 3738, 3739, 3521, 2815, 3416, 1847, 3644,
	2327, 1919, 3847, 2786, 1916, 3845, 1915, 2778, 3806, 3517,
	3849, 3850, 3848, 3511, 3856, 3864, 1947, 3872, 3854, 3619,
	3871, 3853, 3860, 3861, 3862, 3863, 3477, 3331, 3332, 3338,
	2272, 1069, 1065, 1067, 1068, 3883, 1066, 1135, 2580, 3876,
	2308, 3039, 2245, 2244, 2242, 2241, 1351, 3727, 3885, 3884,
	3697, 3887, 3778, 3444, 2447, 2445, 1115, 3806, 3896, 3893,
	1640, 3182, 3178, 1087, 2083, 2097, 2939, 1974, 1970, 2844,
	3594, 1852, 906, 2261, 114, 104, 172, 55, 171, 54,
	112, 3903, 169, 53, 99, 98, 111, 167, 52, 3872,
	3910, 201, 3871, 3909, 200, 203, 202, 199, 1073, 3896,
	3911, 2498, 2499, 198, 1520, 3915, 3840, 3841, 197, 3768,
	3480, 870, 43, 3913, 42, 173, 41, 105, 1095, 1099,
	1101, 1103, 1105, 1106, 1108, 56, 1113, 1109, 1110, 1111,
	1112, 40, 1090, 1091, 1092, 1093, 1071, 1072, 1096, 39,
	1074, 38, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1086, 1088, 1084, 1085, 1094, 34, 13, 12, 35,
	2250, 2251, 2252, 1098, 1100, 1102, 1104, 1107, 22, 21,
	1604, 20, 26, 32, 31, 2268, 2269, 2270, 2271, 124,
	123, 30, 122, 121, 120, 1073, 119, 118, 29, 1063,
	19, 47, 46, 45, 9, 110, 108, 28, 109, 106,
	102, 1089, 100, 82, 81, 1095, 1099, 1101, 1103, 1105,
	1106, 1108, 80, 1113, 1109, 1110, 1111, 1112, 95, 1090,
	1091, 1092, 1093, 1071, 1072, 1096, 94, 1074, 93, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1086, 1088,
	1084, 1085, 1094, 92, 91, 90, 88, 89, 956, 79,
	1098, 1100, 1102, 1104, 1107, 78, 77, 76, 75, 97,
	103, 101, 86, 96, 87, 85, 84, 83, 74, 73,
	72, 153, 152, 151, 150, 149, 147, 148, 146, 145,
	144, 143, 142, 141, 48, 49, 50, 51, 1089, 163,
	162, 164, 166, 168, 165, 170, 160, 158, 161, 159,
	157, 65, 11, 113, 18, 25, 4, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2576, 2577, 1484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 783, 0, 0,
	0, 0, 0, 0, 0, 0, 382, 0, 506, 539,
	528, 612, 494, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 0, 322, 0, 0, 352, 543, 525, 535,
	526, 511, 512, 513, 520, 332, 514, 515, 516, 486,
	517, 487, 518, 519, 774, 542, 493, 411, 366, 560,
	559, 0, 0, 841, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 764,
	818, 817, 751, 761, 0, 0, 295, 215, 488, 608,
	490, 489, 752, 0, 753, 757, 760, 756, 754, 755,
	0, 833, 0, 0, 0, 0, 0, 0, 720, 732,
	0, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 730, 0, 0, 0,
	0, 784, 0, 731, 0, 0, 779, 758, 762, 0,
	0, 0, 0, 285, 417, 434, 296, 407, 447, 301,
	414, 291, 381, 404, 0, 0, 287, 432, 413, 363,
	342, 343, 286, 0, 399, 320, 334, 317, 379, 759,
	782, 786, 316, 855, 780, 442, 289, 0, 441, 378,
	428, 433, 364, 358, 288, 430, 362, 357, 346, 324,
	856, 347, 348, 338, 390, 356, 391, 339, 368, 367,
	369, 1097, 0, 0, 0, 0, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 777, 0, 605, 0, 444, 0, 0, 839, 0,
	0, 0, 416, 0, 0, 349, 0, 2710, 0, 781,
	0, 402, 384, 852, 0, 0, 400, 354, 429, 392,
	435, 418, 443, 396, 393, 280, 419, 319, 365, 292,
	294, 314, 321, 323, 325, 326, 374, 375, 387, 406,
	420, 421, 422, 318, 302, 401, 303, 336, 304, 281,
	310, 308, 311, 408, 312, 283, 388, 426, 0, 331,
	397, 361, 284, 360, 389, 425, 424, 293, 451, 457,
	458, 547, 0, 463, 628, 629, 630, 472, 477, 478,
	479, 481, 482, 483, 484, 548, 565, 532, 502, 465,
	556, 499, 503, 504, 568, 1745, 1744, 1746, 456, 350,
	351, 0, 329, 277, 278, 623, 837, 380, 570, 603,
	604, 495, 0, 851, 832, 834, 835, 838, 842, 843,
	844, 845, 846, 848, 850, 854, 622, 0, 549, 564,
	626, 563, 619, 386, 0, 405, 561, 508, 0, 553,
	527, 0, 554, 523, 558, 0, 497, 0, 412, 437,
	449, 466, 469, 498, 583, 584, 585, 282, 468, 587,
	588, 589, 590, 591, 592, 593, 586, 853, 530, 507,
	533, 448, 510, 509, 2889, 2890, 544, 785, 545, 546,
	370, 371, 372, 373, 840, 571, 300, 467, 395, 0,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	537, 534, 631, 0, 594, 595, 0, 0, 461, 462,
	328, 335, 480, 337, 299, 385, 330, 446, 344, 0,
	473, 538, 474, 597, 600, 598, 599, 377, 340, 341,
	409, 345, 355, 398, 445, 383, 403, 297, 436, 410,
	359, 524, 551, 862, 836, 861, 863, 864, 860, 865,
	866, 847, 741, 0, 792, 858, 857, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	578, 577, 576, 575, 574, 573, 572, 0, 0, 521,
	423, 309, 271, 305, 306, 313, 620, 617, 427, 621,
	0, 279, 501, 353, 0, 394, 327, 566, 567, 0,
	0, 825, 799, 800, 801, 738, 802, 796, 797, 739,
	798, 826, 790, 822, 823, 766, 793, 803, 821, 804,
	824, 827, 828, 867, 868, 810, 794, 243, 869, 807,
	829, 820, 819, 805, 791, 830, 831, 773, 768, 808,
	809, 795, 813, 814, 815, 740, 787, 788, 789, 811,
	812, 769, 770, 771, 772, 0, 0, 0, 452, 453,
	454, 476, 0, 438, 500, 618, 0, 0, 0, 0,
	0, 0, 0, 550, 562, 596, 0, 606, 607, 609,
	611, 816, 613, 415, 0, 0, 624, 491, 492, 625,
	602, 0, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3084, 0, 0, 0, 783,
	0, 0, 0, 0, 0, 0, 0, 0, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 322, 1795, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 774, 542, 493, 411,
	366, 560, 559, 0, 0, 841, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 2001, 0, 0, 728, 0,
	0, 764, 818, 817, 751, 761, 0, 0, 295, 215,
	488, 608, 490, 489, 752, 0, 753, 757, 760, 756,
	754, 755, 0, 833, 0, 0, 0, 0, 0, 0,
	720, 732, 0, 737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2018, 0, 0, 0, 729, 730, 0,
	0, 0, 0, 784, 0, 731, 0, 0, 2002, 758,
	762, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 759, 782, 786, 316, 855, 780, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 856, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 777, 0, 605, 0, 444, 0, 0,
	839, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 781, 0, 402, 384, 852, 0, 3229, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 837, 380,
	570, 603, 604, 495, 0, 851, 832, 834, 835, 838,
	842, 843, 844, 845, 846, 848, 850, 854, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 853,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 785,
	545, 546, 370, 371, 372, 373, 840, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 862, 836, 861, 863, 864,
	860, 865, 866, 847, 741, 0, 792, 858, 857, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 825, 799, 800, 801, 738, 802, 796,
	797, 739, 798, 826, 790, 822, 823, 766, 793, 803,
	821, 804, 824, 827, 828, 867, 868, 810, 794, 243,
	869, 807, 829, 820, 819, 805, 791, 830, 831, 773,
	768, 808, 809, 795, 813, 814, 815, 740, 787, 788,
	789, 811, 812, 769, 770, 771, 772, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 816, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 0, 733, 192, 783, 0, 0, 0,
	0, 0, 0, 0, 0, 382, 0, 506, 539, 528,
	612, 494, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 3529, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 1239, 542, 493, 411, 366, 560, 559,
	0, 0, 841, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 764, 818,
	817, 751, 761, 0, 0, 295, 215, 488, 608, 490,
	489, 752, 0, 753, 757, 760, 756, 754, 755, 0,
	833, 0, 0, 0, 0, 0, 0, 720, 732, 0,
	737, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 730, 0, 0, 0, 0,
	784, 0, 731, 0, 0, 779, 758, 762, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 759, 782,
	786, 316, 855, 780, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 856,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	777, 0, 605, 0, 444, 0, 0, 839, 0, 0,
	0, 416, 0, 0, 349, 0, 0, 0, 781, 0,
	402, 384, 852, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 628, 629, 630, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 623, 837, 380, 570, 603, 604,
	495, 0, 851, 832, 834, 835, 838, 842, 843, 844,
	845, 846, 848, 850, 854, 622, 0, 549, 564, 626,
	563, 619, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 853, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 785, 545, 546, 370,
	371, 372, 373, 840, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 631, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 862, 836, 861, 863, 864, 860, 865, 866,
	847, 741, 0, 792, 858, 857, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 620, 617, 427, 621, 0,
	279, 501, 353, 156, 394, 327, 566, 567, 0, 0,
	825, 799, 800, 801, 738, 802, 796, 797, 739, 798,
	826, 790, 822, 823, 766, 793, 803, 821, 804, 824,
	827, 828, 867, 868, 810, 794, 243, 869, 807, 829,
	820, 819, 805, 791, 830, 831, 773, 768, 808, 809,
	795, 813, 814, 815, 740, 787, 788, 789, 811, 812,
	769, 770, 771, 772, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 618, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	816, 613, 415, 783, 0, 624, 491, 492, 625, 602,
	0, 733, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 0, 322,
	3912, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	774, 542, 493, 411, 366, 560, 559, 0, 0, 841,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 764, 818, 817, 751, 761,
	0, 0, 295, 215, 488, 608, 490, 489, 752, 0,
	753, 757, 760, 756, 754, 755, 0, 833, 0, 0,
	0, 0, 0, 0, 720, 732, 0, 737, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 729, 730, 0, 0, 0, 0, 784, 0, 731,
	0, 0, 779, 758, 762, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 759, 782, 786, 316, 855,
	780, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 856, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 777, 0, 605,
	0, 444, 0, 0, 839, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 781, 0, 402, 384, 852,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 837, 380, 570, 603, 604, 495, 0, 851,
	832, 834, 835, 838, 842, 843, 844, 845, 846, 848,
	850, 854, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 853, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 785, 545, 546, 370, 371, 372, 373,
	840, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 862,
	836, 861, 863, 864, 860, 865, 866, 847, 741, 0,
	792, 858, 857, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 825, 799, 800,
	801, 738, 802, 796, 797, 739, 798, 826, 790, 822,
	823, 766, 793, 803, 821, 804, 824, 827, 828, 867,
	868, 810, 794, 243, 869, 807, 829, 820, 819, 805,
	791, 830, 831, 773, 768, 808, 809, 795, 813, 814,
	815, 740, 787, 788, 789, 811, 812, 769, 770, 771,
	772, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 816, 613, 415,
	783, 0, 624, 491, 492, 625, 602, 0, 733, 382,
	0, 506, 539, 528, 612, 494, 0, 0, 0, 0,
	0, 0, 736, 0, 0, 0, 322, 0, 0, 352,
	543, 525, 535, 526, 511, 512, 513, 520, 332, 514,
	515, 516, 486, 517, 487, 518, 519, 774, 542, 493,
	411, 366, 560, 559, 0, 0, 841, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 728,
	0, 0, 764, 818, 817, 751, 761, 0, 0, 295,
	215, 488, 608, 490, 489, 752, 0, 753, 757, 760,
	756, 754, 755, 0, 833, 0, 0, 0, 0, 0,
	0, 720, 732, 0, 737, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 730,
	0, 0, 0, 0, 784, 0, 731, 0, 0, 779,
	758, 762, 0, 0, 0, 0, 285, 417, 434, 296,
	407, 447, 301, 414, 291, 381, 404, 0, 0, 287,
	432, 413, 363, 342, 343, 286, 0, 399, 320, 334,
	317, 379, 759, 782, 786, 316, 855, 780, 442, 289,
	0, 441, 378, 428, 433, 364, 358, 288, 430, 362,
	357, 346, 324, 856, 347, 348, 338, 390, 356, 391,
	339, 368, 367, 369, 0, 0, 0, 0, 0, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 777, 0, 605, 0, 444, 0,
	0, 839, 0, 0, 0, 416, 0, 0, 349, 0,
	0, 0, 781, 0, 402, 384, 852, 3807, 0, 400,
	354, 429, 392, 435, 418, 443, 396, 393, 280, 419,
	319, 365, 292, 294, 314, 321, 323, 325, 326, 374,
	375, 387, 406, 420, 421, 422, 318, 302, 401, 303,
	336, 304, 281, 310, 308, 311, 408, 312, 283, 388,
	426, 0, 331, 397, 361, 284, 360, 389, 425, 424,
	293, 451, 457, 458, 547, 0, 463, 628, 629, 630,
	472, 477, 478, 479, 481, 482, 483, 484, 548, 565,
	532, 502, 465, 556, 499, 503, 504, 568, 0, 0,
	0, 456, 350, 351, 0, 329, 277, 278, 623, 837,
	380, 570, 603, 604, 495, 0, 851, 832, 834, 835,
	838, 842, 843, 844, 845, 846, 848, 850, 854, 622,
	0, 549, 564, 626, 563, 619, 386, 0, 405, 561,
	508, 0, 553, 527, 0, 554, 523, 558, 0, 497,
	0, 412, 437, 449, 466, 469, 498, 583, 584, 585,
	282, 468, 587, 588, 589, 590, 591, 592, 593, 586,
	853, 530, 507, 533, 448, 510, 509, 0, 0, 544,
	785, 545, 546, 370, 371, 372, 373, 840, 571, 300,
	467, 395, 0, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 537, 534, 631, 0, 594, 595, 0,
	0, 461, 462, 328, 335, 480, 337, 299, 385, 330,
	446, 344, 0, 473, 538, 474, 597, 600, 598, 599,
	377, 340, 341, 409, 345, 355, 398, 445, 383, 403,
	297, 436, 410, 359, 524, 551, 862, 836, 861, 863,
	864, 860, 865, 866, 847, 741, 0, 792, 858, 857,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 578, 577, 576, 575, 574, 573, 572,
	0, 0, 521, 423, 309, 271, 305, 306, 313, 620,
	617, 427, 621, 0, 279, 501, 353, 0, 394, 327,
	566, 567, 0, 0, 825, 799, 800, 801, 738, 802,
	796, 797, 739, 798, 826, 790, 822, 823, 766, 793,
	803, 821, 804, 824, 827, 828, 867, 868, 810, 794,
	243, 869, 807, 829, 820, 819, 805, 791, 830, 831,
	773, 768, 808, 809, 795, 813, 814, 815, 740, 787,
	788, 789, 811, 812, 769, 770, 771, 772, 0, 0,
	0, 452, 453, 454, 476, 0, 438, 500, 618, 0,
	0, 0, 0, 0, 0, 0, 550, 562, 596, 0,
	606, 607, 609, 611, 816, 613, 415, 783, 0, 624,
	491, 492, 625, 602, 0, 733, 382, 0, 506, 539,
	528, 612, 494, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 0, 322, 1795, 0, 352, 543, 525, 535,
	526, 511, 512, 513, 520, 332, 514, 515, 516, 486,
	517, 487, 518, 519, 774, 542, 493, 411, 366, 560,
	559, 0, 0, 841, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 764,
	818, 817, 751, 761, 0, 0, 295, 215, 488, 608,
	490, 489, 752, 0, 753, 757, 760, 756, 754, 755,
	0, 833, 0, 0, 0, 0, 0, 0, 720, 732,
	0, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 730, 0, 0, 0,
	0, 784, 0, 731, 0, 0, 779, 758, 762, 0,
	0, 0, 0, 285, 417, 434, 296, 407, 447, 301,
	414, 291, 381, 404, 0, 0, 287, 432, 413, 363,
	342, 343, 286, 0, 399, 320, 334, 317, 379, 759,
	782, 786, 316, 855, 780, 442, 289, 0, 441, 378,
	428, 433, 364, 358, 288, 430, 362, 357, 346, 324,
	856, 347, 348, 338, 390, 356, 391, 339, 368, 367,
	369, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 777, 0, 605, 0, 444, 0, 0, 839, 0,
	0, 0, 416, 0, 0, 349, 0, 0, 0, 781,
	0, 402, 384, 852, 0, 0, 400, 354, 429, 392,
	435, 418, 443, 396, 393, 280, 419, 319, 365, 292,
	294, 314, 321, 323, 325, 326, 374, 375, 387, 406,
	420, 421, 422, 318, 302, 401, 303, 336, 304, 281,
	310, 308, 311, 408, 312, 283, 388, 426, 0, 331,
	397, 361, 284, 360, 389, 425, 424, 293, 451, 457,
	458, 547, 0, 463, 628, 629, 630, 472, 477, 478,
	479, 481, 482, 483, 484, 548, 565, 532, 502, 465,
	556, 499, 503, 504, 568, 0, 0, 0, 456, 350,
	351, 0, 329, 277, 278, 623, 837, 380, 570, 603,
	604, 495, 0, 851, 832, 834, 835, 838, 842, 843,
	844, 845, 846, 848, 850, 854, 622, 0, 549, 564,
	626, 563, 619, 386, 0, 405, 561, 508, 0, 553,
	527, 0, 554, 523, 558, 0, 497, 0, 412, 437,
	449, 466, 469, 498, 583, 584, 585, 282, 468, 587,
	588, 589, 590, 591, 592, 593, 586, 853, 530, 507,
	533, 448, 510, 509, 0, 0, 544, 785, 545, 546,
	370, 371, 372, 373, 840, 571, 300, 467, 395, 0,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	537, 534, 631, 0, 594, 595, 0, 0, 461, 462,
	328, 335, 480, 337, 299, 385, 330, 446, 344, 0,
	473, 538, 474, 597, 600, 598, 599, 377, 340, 341,
	409, 345, 355, 398, 445, 383, 403, 297, 436, 410,
	359, 524, 551, 862, 836, 861, 863, 864, 860, 865,
	866, 847, 741, 0, 792, 858, 857, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	578, 577, 576, 575, 574, 573, 572, 0, 0, 521,
	423, 309, 271, 305, 306, 313, 620, 617, 427, 621,
	0, 279, 501, 353, 0, 394, 327, 566, 567, 0,
	0, 825, 799, 800, 801, 738, 802, 796, 797, 739,
	798, 826, 790, 822, 823, 766, 793, 803, 821, 804,
	824, 827, 828, 867, 868, 810, 794, 243, 869, 807,
	829, 820, 819, 805, 791, 830, 831, 773, 768, 808,
	809, 795, 813, 814, 815, 740, 787, 788, 789, 811,
	812, 769, 770, 771, 772, 0, 0, 0, 452, 453,
	454, 476, 0, 438, 500, 618, 0, 0, 0, 0,
	0, 0, 0, 550, 562, 596, 0, 606, 607, 609,
	611, 816, 613, 415, 783, 0, 624, 491, 492, 625,
	602, 0, 733, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 736, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 774, 542, 493, 411, 366, 560, 559, 0, 0,
	841, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 0, 764, 818, 817, 751,
	761, 0, 0, 295, 215, 488, 608, 490, 489, 752,
	0, 753, 757, 760, 756, 754, 755, 0, 833, 0,
	0, 0, 0, 0, 0, 720, 732, 0, 737, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 730, 1515, 0, 0, 0, 784, 0,
	731, 0, 0, 779, 758, 762, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 759, 782, 786, 316,
	855, 780, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 856, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 777, 0,
	605, 0, 444, 0, 0, 839, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 781, 0, 402, 384,
	852, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 837, 380, 570, 603, 604, 495, 0,
	851, 832, 834, 835, 838, 842, 843, 844, 845, 846,
	848, 850, 854, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 853, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 785, 545, 546, 370, 371, 372,
	373, 840, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	862, 836, 861, 863, 864, 860, 865, 866, 847, 741,
	0, 792, 858, 857, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 825, 799,
	800, 801, 738, 802, 796, 797, 739, 798, 826, 790,
	822, 823, 766, 793, 803, 821, 804, 824, 827, 828,
	867, 868, 810, 794, 243, 869, 807, 829, 820, 819,
	805, 791, 830, 831, 773, 768, 808, 809, 795, 813,
	814, 815, 740, 787, 788, 789, 811, 812, 769, 770,
	771, 772, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 816, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 783, 733,
	0, 2172, 0, 0, 0, 0, 0, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 774, 542, 493, 411, 366,
	560, 559, 0, 0, 841, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 0,
	764, 818, 817, 751, 761, 0, 0, 295, 215, 488,
	608, 490, 489, 752, 0, 753, 757, 760, 756, 754,
	755, 0, 833, 0, 0, 0, 0, 0, 0, 720,
	732, 0, 737, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 730, 0, 0,
	0, 0, 784, 0, 731, 0, 0, 779, 758, 762,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	759, 782, 786, 316, 855, 780, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 856, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 777, 0, 605, 0, 444, 0, 0, 839,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	781, 0, 402, 384, 852, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 837, 380, 570,
	603, 604, 495, 0, 851, 832, 834, 835, 838, 842,
	843, 844, 845, 846, 848, 850, 854, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 853, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 785, 545,
	546, 370, 371, 372, 373, 840, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 862, 836, 861, 863, 864, 860,
	865, 866, 847, 741, 0, 792, 858, 857, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 825, 799, 800, 801, 738, 802, 796, 797,
	739, 798, 826, 790, 822, 823, 766, 793, 803, 821,
	804, 824, 827, 828, 867, 868, 810, 794, 243, 869,
	807, 829, 820, 819, 805, 791, 830, 831, 773, 768,
	808, 809, 795, 813, 814, 815, 740, 787, 788, 789,
	811, 812, 769, 770, 771, 772, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 816, 613, 415, 783, 0, 624, 491, 492,
	625, 602, 0, 733, 382, 0, 506, 539, 528, 612,
	494, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 322, 0, 0, 352, 543, 525, 535, 526, 511,
	512, 513, 520, 332, 514, 515, 516, 486, 517, 487,
	518, 519, 774, 542, 493, 411, 366, 560, 559, 0,
	0, 841, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 764, 818, 817,
	751, 761, 0, 0, 295, 215, 488, 608, 490, 489,
	752, 0, 753, 757, 760, 756, 754, 755, 0, 833,
	0, 0, 0, 0, 0, 0, 720, 732, 0, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 730, 1788, 0, 0, 0, 784,
	0, 731, 0, 0, 779, 758, 762, 0, 0, 0,
	0, 285, 417, 434, 296, 407, 447, 301, 414, 291,
	381, 404, 0, 0, 287, 432, 413, 363, 342, 343,
	286, 0, 399, 320, 334, 317, 379, 759, 782, 786,
	316, 855, 780, 442, 289, 0, 441, 378, 428, 433,
	364, 358, 288, 430, 362, 357, 346, 324, 856, 347,
	348, 338, 390, 356, 391, 339, 368, 367, 369, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 777,
	0, 605, 0, 444, 0, 0, 839, 0, 0, 0,
	416, 0, 0, 349, 0, 0, 0, 781, 0, 402,
	384, 852, 0, 0, 400, 354, 429, 392, 435, 418,
	443, 396, 393, 280, 419, 319, 365, 292, 294, 314,
	321, 323, 325, 326, 374, 375, 387, 406, 420, 421,
	422, 318, 302, 401, 303, 336, 304, 281, 310, 308,
	311, 408, 312, 283, 388, 426, 0, 331, 397, 361,
	284, 360, 389, 425, 424, 293, 451, 457, 458, 547,
	0, 463, 628, 629, 630, 472, 477, 478, 479, 481,
	482, 483, 484, 548, 565, 532, 502, 465, 556, 499,
	503, 504, 568, 0, 0, 0, 456, 350, 351, 0,
	329, 277, 278, 623, 837, 380, 570, 603, 604, 495,
	0, 851, 832, 834, 835, 838, 842, 843, 844, 845,
	846, 848, 850, 854, 622, 0, 549, 564, 626, 563,
	619, 386, 0, 405, 561, 508, 0, 553, 527, 0,
	554, 523, 558, 0, 497, 0, 412, 437, 449, 466,
	469, 498, 583, 584, 585, 282, 468, 587, 588, 589,
	590, 591, 592, 593, 586, 853, 530, 507, 533, 448,
	510, 509, 0, 0, 544, 785, 545, 546, 370, 371,
	372, 373, 840, 571, 300, 467, 395, 0, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 537, 534,
	631, 0, 594, 595, 0, 0, 461, 462, 328, 335,
	480, 337, 299, 385, 330, 446, 344, 0, 473, 538,
	474, 597, 600, 598, 599, 377, 340, 341, 409, 345,
	355, 398, 445, 383, 403, 297, 436, 410, 359, 524,
	551, 862, 836, 861, 863, 864, 860, 865, 866, 847,
	741, 0, 792, 858, 857, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 578, 577,
	576, 575, 574, 573, 572, 0, 0, 521, 423, 309,
	271, 305, 306, 313, 620, 617, 427, 621, 0, 279,
	501, 353, 0, 394, 327, 566, 567, 0, 0, 825,
	799, 800, 801, 738, 802, 796, 797, 739, 798, 826,
	790, 822, 823, 766, 793, 803, 821, 804, 824, 827,
	828, 867, 868, 810, 794, 243, 869, 807, 829, 820,
	819, 805, 791, 830, 831, 773, 768, 808, 809, 795,
	813, 814, 815, 740, 787, 788, 789, 811, 812, 769,
	770, 771, 772, 0, 0, 0, 452, 453, 454, 476,
	0, 438, 500, 618, 0, 0, 0, 0, 0, 0,
	0, 550, 562, 596, 0, 606, 607, 609, 611, 816,
	613, 415, 783, 0, 624, 491, 492, 625, 602, 0,
	733, 382, 0, 506, 539, 528, 612, 494, 0, 0,
	0, 0, 0, 0, 736, 0, 0, 0, 322, 0,
	0, 352, 543, 525, 535, 526, 511, 512, 513, 520,
	332, 514, 515, 516, 486, 517, 487, 518, 519, 774,
	542, 493, 411, 366, 560, 559, 0, 0, 841, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 0, 764, 818, 817, 751, 761, 0,
	0, 295, 215, 488, 608, 490, 489, 752, 0, 753,
	757, 760, 756, 754, 755, 0, 833, 0, 0, 0,
	0, 0, 0, 720, 732, 0, 737, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 730, 0, 0, 0, 0, 784, 0, 731, 0,
	0, 779, 758, 762, 0, 0, 0, 0, 285, 417,
	434, 296, 407, 447, 301, 414, 291, 381, 404, 0,
	0, 287, 432, 413, 363, 342, 343, 286, 0, 399,
	320, 334, 317, 379, 759, 782, 786, 316, 855, 780,
	442, 289, 0, 441, 378, 428, 433, 364, 358, 288,
	430, 362, 357, 346, 324, 856, 347, 348, 338, 390,
	356, 391, 339, 368, 367, 369, 0, 0, 0, 0,
	0, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 601, 777, 0, 605, 0,
	444, 0, 0, 839, 0, 0, 0, 416, 0, 0,
	349, 0, 0, 0, 781, 0, 402, 384, 852, 0,
	0, 400, 354, 429, 392, 435, 418, 443, 396, 393,
	280, 419, 319, 365, 292, 294, 314, 321, 323, 325,
	326, 374, 375, 387, 406, 420, 421, 422, 318, 302,
	401, 303, 336, 304, 281, 310, 308, 311, 408, 312,
	283, 388, 426, 0, 331, 397, 361, 284, 360, 389,
	425, 424, 293, 451, 457, 458, 547, 0, 463, 628,
	629, 630, 472, 477, 478, 479, 481, 482, 483, 484,
	548, 565, 532, 502, 465, 556, 499, 503, 504, 568,
	0, 0, 0, 456, 350, 351, 0, 329, 277, 278,
	623, 837, 380, 570, 603, 604, 495, 0, 851, 832,
	834, 835, 838, 842, 843, 844, 845, 846, 848, 850,
	854, 622, 0, 549, 564, 626, 563, 619, 386, 0,
	405, 561, 508, 0, 553, 527, 0, 554, 523, 558,
	0, 497, 0, 412, 437, 449, 466, 469, 498, 583,
	584, 585, 282, 468, 587, 588, 589, 590, 591, 592,
	593, 586, 853, 530, 507, 533, 448, 510, 509, 0,
	0, 544, 785, 545, 546, 370, 371, 372, 373, 840,
	571, 300, 467, 395, 0, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 537, 534, 631, 0, 594,
	595, 0, 0, 461, 462, 328, 335, 480, 337, 299,
	385, 330, 446, 344, 0, 473, 538, 474, 597, 600,
	598, 599, 377, 340, 341, 409, 345, 355, 398, 445,
	383, 403, 297, 436, 410, 359, 524, 551, 862, 836,
	861, 863, 864, 860, 865, 866, 847, 741, 0, 792,
	858, 857, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 579, 578, 577, 576, 575, 574,
	573, 572, 0, 0, 521, 423, 309, 271, 305, 306,
	313, 620, 617, 427, 621, 0, 279, 501, 353, 0,
	394, 327, 566, 567, 0, 0, 825, 799, 800, 801,
	738, 802, 796, 797, 739, 798, 826, 790, 822, 823,
	766, 793, 803, 821, 804, 824, 827, 828, 867, 868,
	810, 794, 243, 869, 807, 829, 820, 819, 805, 791,
	830, 831, 773, 768, 808, 809, 795, 813, 814, 815,
	740, 787, 788, 789, 811, 812, 769, 770, 771, 772,
	0, 0, 0, 452, 453, 454, 476, 0, 438, 500,
	618, 0, 0, 0, 0, 0, 0, 0, 550, 562,
	596, 0, 606, 607, 609, 611, 816, 613, 415, 783,
	0, 624, 491, 492, 625, 602, 0, 733, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 774, 542, 493, 411,
	366, 560, 559, 0, 0, 841, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 728, 0,
	0, 764, 818, 817, 751, 761, 0, 0, 295, 215,
	488, 608, 490, 489, 2628, 0, 2629, 757, 760, 756,
	754, 755, 0, 833, 0, 0, 0, 0, 0, 0,
	720, 732, 0, 737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 730, 0,
	0, 0, 0, 784, 0, 731, 0, 0, 779, 758,
	762, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 759, 782, 786, 316, 855, 780, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 856, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 777, 0, 605, 0, 444, 0, 0,
	839, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 781, 0, 402, 384, 852, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 837, 380,
	570, 603, 604, 495, 0, 851, 832, 834, 835, 838,
	842, 843, 844, 845, 846, 848, 850, 854, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 853,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 785,
	545, 546, 370, 371, 372, 373, 840, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 862, 836, 861, 863, 864,
	860, 865, 866, 847, 741, 0, 792, 858, 857, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 825, 799, 800, 801, 738, 802, 796,
	797, 739, 798, 826, 790, 822, 823, 766, 793, 803,
	821, 804, 824, 827, 828, 867, 868, 810, 794, 243,
	869, 807, 829, 820, 819, 805, 791, 830, 831, 773,
	768, 808, 809, 795, 813, 814, 815, 740, 787, 788,
	789, 811, 812, 769, 770, 771, 772, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 816, 613, 415, 783, 0, 624, 491,
	492, 625, 602, 0, 733, 382, 0, 506, 539, 528,
	612, 494, 0, 0, 1658, 0, 0, 0, 736, 0,
	0, 0, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 774, 542, 493, 411, 366, 560, 559,
	0, 0, 841, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 764, 818,
	817, 751, 761, 0, 0, 295, 215, 488, 608, 490,
	489, 752, 0, 753, 757, 760, 756, 754, 755, 0,
	833, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	737, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 730, 0, 0, 0, 0,
	784, 0, 731, 0, 0, 779, 758, 762, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 759, 782,
	786, 316, 855, 780, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 856,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	777, 0, 605, 0, 444, 0, 0, 839, 0, 0,
	0, 416, 0, 0, 349, 0, 0, 0, 781, 0,
	402, 384, 852, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 1659, 1660,
	547, 0, 463, 628, 629, 630, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 623, 837, 380, 570, 603, 604,
	495, 0, 851, 832, 834, 835, 838, 842, 843, 844,
	845, 846, 848, 850, 854, 622, 0, 549, 564, 626,
	563, 619, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 853, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 785, 545, 546, 370,
	371, 372, 373, 840, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 631, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 862, 836, 861, 863, 864, 860, 865, 866,
	847, 741, 0, 792, 858, 857, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 620, 617, 427, 621, 0,
	279, 501, 353, 0, 394, 327, 566, 567, 0, 0,
	825, 799, 800, 801, 738, 802, 796, 797, 739, 798,
	826, 790, 822, 823, 766, 793, 803, 821, 804, 824,
	827, 828, 867, 868, 810, 794, 243, 869, 807, 829,
	820, 819, 805, 791, 830, 831, 773, 768, 808, 809,
	795, 813, 814, 815, 740, 787, 788, 789, 811, 812,
	769, 770, 771, 772, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 618, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	816, 613, 415, 783, 0, 624, 491, 492, 625, 602,
	0, 733, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	774, 542, 493, 411, 366, 560, 559, 0, 0, 841,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 764, 818, 817, 751, 761,
	0, 0, 295, 215, 488, 608, 490, 489, 752, 0,
	753, 757, 760, 756, 754, 755, 0, 833, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 737, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 729, 730, 0, 0, 0, 0, 784, 0, 731,
	0, 0, 779, 758, 762, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 759, 782, 786, 316, 855,
	780, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 856, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 777, 0, 605,
	0, 444, 0, 0, 839, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 781, 0, 402, 384, 852,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 837, 380, 570, 603, 604, 495, 0, 851,
	832, 834, 835, 838, 842, 843, 844, 845, 846, 848,
	850, 854, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 853, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 785, 545, 546, 370, 371, 372, 373,
	840, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 862,
	836, 861, 863, 864, 860, 865, 866, 847, 741, 0,
	792, 858, 857, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 825, 799, 800,
	801, 738, 802, 796, 797, 739, 798, 826, 790, 822,
	823, 766, 793, 803, 821, 804, 824, 827, 828, 867,
	868, 810, 794, 243, 869, 807, 829, 820, 819, 805,
	791, 830, 831, 773, 768, 808, 809, 795, 813, 814,
	815, 740, 787, 788, 789, 811, 812, 769, 770, 771,
	772, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 816, 613, 415,
	783, 0, 624, 491, 492, 625, 602, 0, 733, 382,
	0, 506, 539, 528, 612, 494, 0, 0, 0, 0,
	0, 0, 736, 0, 0, 0, 322, 0, 0, 352,
	543, 525, 535, 526, 511, 512, 513, 520, 332, 514,
	515, 516, 486, 517, 487, 518, 519, 774, 542, 493,
	411, 366, 560, 559, 0, 0, 841, 849, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 764, 818, 817, 751, 761, 0, 0, 295,
	215, 488, 608, 490, 489, 752, 0, 753, 757, 760,
	756, 754, 755, 0, 833, 0, 0, 0, 0, 0,
	0, 720, 732, 0, 737, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 729, 730,
	0, 0, 0, 0, 784, 0, 731, 0, 0, 779,
	758, 762, 0, 0, 0, 0, 285, 417, 434, 296,
	407, 447, 301, 414, 291, 381, 404, 0, 0, 287,
	432, 413, 363, 342, 343, 286, 0, 399, 320, 334,
	317, 379, 759, 782, 786, 316, 855, 780, 442, 289,
	0, 441, 378, 428, 433, 364, 358, 288, 430, 362,
	357, 346, 324, 856, 347, 348, 338, 390, 356, 391,
	339, 368, 367, 369, 0, 0, 0, 0, 0, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 777, 0, 605, 0, 444, 0,
	0, 839, 0, 0, 0, 416, 0, 0, 349, 0,
	0, 0, 781, 0, 402, 384, 852, 0, 0, 400,
	354, 429, 392, 435, 418, 443, 396, 393, 280, 419,
	319, 365, 292, 294, 314, 321, 323, 325, 326, 374,
	375, 387, 406, 420, 421, 422, 318, 302, 401, 303,
	336, 304, 281, 310, 308, 311, 408, 312, 283, 388,
	426, 0, 331, 397, 361, 284, 360, 389, 425, 424,
	293, 451, 457, 458, 547, 0, 463, 628, 629, 630,
	472, 477, 478, 479, 481, 482, 483, 484, 548, 565,
	532, 502, 465, 556, 499, 503, 504, 568, 0, 0,
	0, 456, 350, 351, 0, 329, 277, 278, 623, 837,
	380, 570, 603, 604, 495, 0, 851, 832, 834, 835,
	838, 842, 843, 844, 845, 846, 848, 850, 854, 622,
	0, 549, 564, 626, 563, 619, 386, 0, 405, 561,
	508, 0, 553, 527, 0, 554, 523, 558, 0, 497,
	0, 412, 437, 449, 466, 469, 498, 583, 584, 585,
	282, 468, 587, 588, 589, 590, 591, 592, 593, 586,
	853, 530, 507, 533, 448, 510, 509, 0, 0, 544,
	785, 545, 546, 370, 371, 372, 373, 840, 571, 300,
	467, 395, 0, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 537, 534, 631, 0, 594, 595, 0,
	0, 461, 462, 328, 335, 480, 337, 299, 385, 330,
	446, 344, 0, 473, 538, 474, 597, 600, 598, 599,
	377, 340, 341, 409, 345, 355, 398, 445, 383, 403,
	297, 436, 410, 359, 524, 551, 862, 836, 861, 863,
	864, 860, 865, 866, 847, 741, 0, 792, 858, 857,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 578, 577, 576, 575, 574, 573, 572,
	0, 0, 521, 423, 309, 271, 305, 306, 313, 620,
	617, 427, 621, 0, 279, 501, 353, 0, 394, 327,
	566, 567, 0, 0, 825, 799, 800, 801, 738, 802,
	796, 797, 739, 798, 826, 790, 822, 823, 766, 793,
	803, 821, 804, 824, 827, 828, 867, 868, 810, 794,
	243, 869, 807, 829, 820, 819, 805, 791, 830, 831,
	773, 768, 808, 809, 795, 813, 814, 815, 740, 787,
	788, 789, 811, 812, 769, 770, 771, 772, 0, 0,
	0, 452, 453, 454, 476, 0, 438, 500, 618, 0,
	0, 0, 0, 0, 0, 0, 550, 562, 596, 0,
	606, 607, 609, 611, 816, 613, 415, 0, 0, 624,
	491, 492, 625, 602, 0, 733, 192, 60, 183, 155,
	0, 0, 0, 0, 0, 0, 382, 0, 506, 539,
	528, 612, 494, 0, 184, 0, 0, 0, 0, 0,
	0, 176, 0, 322, 0, 185, 352, 543, 525, 535,
	526, 511, 512, 513, 520, 332, 514, 515, 516, 486,
	517, 487, 518, 519, 129, 542, 493, 411, 366, 560,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 214,
	0, 0, 0, 0, 0, 0, 295, 215, 488, 608,
	490, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 417, 434, 296, 407, 447, 301,
	414, 291, 381, 404, 0, 0, 287, 432, 413, 363,
	342, 343, 286, 0, 399, 320, 334, 317, 379, 0,
	431, 459, 316, 450, 0, 442, 289, 0, 441, 378,
	428, 433, 364, 358, 288, 430, 362, 357, 346, 324,
	475, 347, 348, 338, 390, 356, 391, 339, 368, 367,
	369, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	0, 0, 0, 0, 154, 182, 190, 0, 115, 0,
	601, 0, 0, 605, 0, 444, 0, 0, 207, 0,
	0, 0, 416, 0, 0, 349, 181, 175, 174, 460,
	0, 402, 384, 219, 0, 0, 400, 354, 429, 392,
	435, 418, 443, 396, 393, 280, 419, 319, 365, 292,
	294, 314, 321, 323, 325, 326, 374, 375, 387, 406,
	420, 421, 422, 318, 302, 401, 303, 336, 304, 281,
	310, 308, 311, 408, 312, 283, 388, 426, 0, 331,
	397, 361, 284, 360, 389, 425, 424, 293, 451, 457,
	458, 547, 0, 463, 580, 581, 582, 472, 477, 478,
	479, 481, 482, 483, 484, 548, 565, 532, 502, 465,
	556, 499, 503, 504, 568, 0, 0, 0, 456, 350,
	351, 0, 329, 277, 278, 439, 315, 380, 570, 603,
	604, 495, 0, 557, 496, 505, 307, 529, 541, 540,
	376, 455, 210, 552, 555, 485, 220, 0, 549, 564,
	522, 563, 221, 386, 0, 405, 561, 508, 0, 553,
	527, 0, 554, 523, 558, 0, 497, 0, 412, 437,
	449, 466, 469, 498, 583, 584, 585, 282, 468, 587,
	588, 589, 590, 591, 592, 593, 586, 440, 530, 507,
	533, 448, 510, 509, 0, 0, 544, 464, 545, 546,
	370, 371, 372, 373, 333, 571, 300, 467, 395, 127,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	537, 534, 218, 0, 594, 595, 0, 0, 461, 462,
	328, 335, 480, 337, 299, 385, 330, 446, 344, 0,
	473, 538, 474, 597, 600, 598, 599, 377, 340, 341,
	409, 345, 355, 398, 445, 383, 403, 297, 436, 410,
	359, 524, 551, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	578, 577, 576, 575, 574, 573, 572, 0, 0, 521,
	423, 309, 271, 305, 306, 313, 225, 290, 427, 226,
	0, 279, 501, 353, 156, 394, 327, 566, 567, 57,
	0, 227, 228, 229, 230, 231, 232, 233, 234, 272,
	235, 236, 237, 238, 239, 240, 241, 244, 245, 246,
	247, 248, 249, 250, 251, 569, 242, 243, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 0, 0, 0, 273, 274, 275, 276, 0,
	0, 267, 268, 269, 270, 0, 0, 0, 452, 453,
	454, 476, 0, 438, 500, 222, 44, 208, 211, 213,
	212, 0, 58, 550, 562, 596, 5, 606, 607, 609,
	611, 610, 613, 415, 192, 132, 223, 491, 492, 224,
	602, 0, 0, 0, 382, 0, 506, 539, 528, 612,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 0, 352, 543, 525, 535, 526, 511,
	512, 513, 520, 332, 514, 515, 516, 486, 517, 487,
	518, 519, 129, 542, 493, 411, 366, 560, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 295, 215, 488, 608, 490, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	2319, 2322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 417, 434, 296, 407, 447, 301, 414, 291,
	381, 404, 0, 0, 287, 432, 413, 363, 342, 343,
	286, 0, 399, 320, 334, 317, 379, 0, 431, 459,
	316, 450, 0, 442, 289, 0, 441, 378, 428, 433,
	364, 358, 288, 430, 362, 357, 346, 324, 475, 347,
	348, 338, 390, 356, 391, 339, 368, 367, 369, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 0,
	0, 605, 2323, 444, 0, 0, 0, 2318, 0, 2317,
	416, 2315, 2320, 349, 0, 0, 0, 460, 0, 402,
	384, 627, 0, 0, 400, 354, 429, 392, 435, 418,
	443, 396, 393, 280, 419, 319, 365, 292, 294, 314,
	321, 323, 325, 326, 374, 375, 387, 406, 420, 421,
	422, 318, 302, 401, 303, 336, 304, 281, 310, 308,
	311, 408, 312, 283, 388, 426, 2321, 331, 397, 361,
	284, 360, 389, 425, 424, 293, 451, 457, 458, 547,
	0, 463, 628, 629, 630, 472, 477, 478, 479, 481,
	482, 483, 484, 548, 565, 532, 502, 465, 556, 499,
	503, 504, 568, 0, 0, 0, 456, 350, 351, 0,
	329, 277, 278, 623, 315, 380, 570, 603, 604, 495,
	0, 557, 496, 505, 307, 529, 541, 540, 376, 455,
	0, 552, 555, 485, 622, 0, 549, 564, 626, 563,
	619, 386, 0, 405, 561, 508, 0, 553, 527, 0,
	554, 523, 558, 0, 497, 0, 412, 437, 449, 466,
	469, 498, 583, 584, 585, 282, 468, 587, 588, 589,
	590, 591, 592, 593, 586, 440, 530, 507, 533, 448,
	510, 509, 0, 0, 544, 464, 545, 546, 370, 371,
	372, 373, 333, 571, 300, 467, 395, 0, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 537, 534,
	631, 0, 594, 595, 0, 0, 461, 462, 328, 335,
	480, 337, 299, 385, 330, 446, 344, 0, 473, 538,
	474, 597, 600, 598, 599, 377, 340, 341, 409, 345,
	355, 398, 445, 383, 403, 297, 436, 410, 359, 524,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 578, 577,
	576, 575, 574, 573, 572, 0, 0, 521, 423, 309,
	271, 305, 306, 313, 620, 617, 427, 621, 0, 279,
	501, 353, 156, 394, 327, 566, 567, 0, 0, 227,
	228, 229, 230, 231, 232, 233, 234, 272, 235, 236,
	237, 238, 239, 240, 241, 244, 245, 246, 247, 248,
	249, 250, 251, 569, 242, 243, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	0, 0, 0, 273, 274, 275, 276, 0, 0, 267,
	268, 269, 270, 0, 0, 0, 452, 453, 454, 476,
	0, 438, 500, 618, 0, 0, 0, 0, 0, 0,
	0, 550, 562, 596, 0, 606, 607, 609, 611, 610,
	613, 415, 0, 0, 624, 491, 492, 625, 602, 382,
	0, 506, 539, 528, 612, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 352,
	543, 525, 535, 526, 511, 512, 513, 520, 332, 514,
	515, 516, 486, 517, 487, 518, 519, 0, 542, 493,
	411, 366, 560, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1274,
	0, 0, 214, 0, 0, 751, 761, 0, 0, 295,
	215, 488, 608, 490, 489, 752, 0, 753, 757, 760,
	756, 754, 755, 0, 298, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	758, 0, 0, 0, 0, 0, 285, 417, 434, 296,
	407, 447, 301, 414, 291, 381, 404, 0, 0, 287,
	432, 413, 363, 342, 343, 286, 0, 399, 320, 334,
	317, 379, 759, 431, 459, 316, 450, 0, 442, 289,
	0, 441, 378, 428, 433, 364, 358, 288, 430, 362,
	357, 346, 324, 475, 347, 348, 338, 390, 356, 391,
	339, 368, 367, 369, 0, 0, 0, 0, 0, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 605, 0, 444, 0,
	0, 0, 0, 0, 0, 416, 0, 0, 349, 0,
	0, 0, 460, 0, 402, 384, 627, 0, 0, 400,
	354, 429, 392, 435, 418, 443, 396, 393, 280, 419,
	319, 365, 292, 294, 314, 321, 323, 325, 326, 374,
	375, 387, 406, 420, 421, 422, 318, 302, 401, 303,
	336, 304, 281, 310, 308, 311, 408, 312, 283, 388,
	426, 0, 331, 397, 361, 284, 360, 389, 425, 424,
	293, 451, 457, 458, 547, 0, 463, 628, 629, 630,
	472, 477, 478, 479, 481, 482, 483, 484, 548, 565,
	532, 502, 465, 556, 499, 503, 504, 568, 0, 0,
	0, 456, 350, 351, 0, 329, 277, 278, 623, 315,
	380, 570, 603, 604, 495, 0, 557, 496, 505, 307,
	529, 541, 540, 376, 455, 0, 552, 555, 485, 622,
	0, 549, 564, 626, 563, 619, 386, 0, 405, 561,
	508, 0, 553, 527, 0, 554, 523, 558, 0, 497,
	0, 412, 437, 449, 466, 469, 498, 583, 584, 585,
	282, 468, 587, 588, 589, 590, 591, 592, 593, 586,
	440, 530, 507, 533, 448, 510, 509, 0, 0, 544,
	464, 545, 546, 370, 371, 372, 373, 333, 571, 300,
	467, 395, 0, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 537, 534, 631, 0, 594, 595, 0,
	0, 461, 462, 328, 335, 480, 337, 299, 385, 330,
	446, 344, 0, 473, 538, 474, 597, 600, 598, 599,
	377, 340, 341, 409, 345, 355, 398, 445, 383, 403,
	297, 436, 410, 359, 524, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 578, 577, 576, 575, 574, 573, 572,
	0, 0, 521, 423, 309, 271, 305, 306, 313, 620,
	617, 427, 621, 0, 279, 501, 353, 0, 394, 327,
	566, 567, 0, 0, 227, 228, 229, 230, 231, 232,
	233, 234, 272, 235, 236, 237, 238, 239, 240, 241,
	244, 245, 246, 247, 248, 249, 250, 251, 569, 242,
	243, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 0, 0, 0, 273, 274,
	275, 276, 0, 0, 267, 268, 269, 270, 0, 0,
	0, 452, 453, 454, 476, 0, 438, 500, 618, 0,
	0, 0, 0, 0, 0, 0, 550, 562, 596, 0,
	606, 607, 609, 611, 610, 613, 415, 0, 0, 624,
	491, 492, 625, 602, 192, 60, 183, 155, 0, 0,
	0, 0, 0, 0, 382, 650, 506, 539, 528, 612,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 0, 352, 543, 525, 535, 526, 511,
	512, 513, 520, 332, 514, 515, 516, 486, 517, 487,
	518, 519, 0, 542, 493, 411, 366, 560, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 656, 0,
	0, 0, 0, 0, 655, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 295, 215, 488, 608, 490, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 417, 434, 296, 407, 447, 301, 414, 291,
	381, 404, 0, 0, 287, 432, 413, 363, 342, 343,
	286, 0, 399, 320, 334, 317, 379, 0, 431, 459,
	316, 450, 0, 442, 289, 0, 441, 378, 428, 433,
	364, 358, 288, 430, 362, 357, 346, 324, 475, 347,
	348, 338, 390, 356, 391, 339, 368, 367, 369, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 654, 0, 601, 0,
	0, 605, 0, 444, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 349, 0, 0, 0, 460, 0, 402,
	384, 627, 0, 0, 400, 354, 429, 392, 435, 418,
	443, 396, 393, 280, 419, 319, 365, 292, 294, 314,
	321, 323, 325, 326, 374, 375, 387, 406, 420, 421,
	422, 318, 302, 401, 303, 336, 304, 281, 310, 308,
	311, 408, 312, 283, 388, 426, 0, 331, 397, 361,
	284, 360, 389, 425, 424, 293, 451, 457, 458, 547,
	0, 463, 628, 629, 630, 472, 477, 478, 479, 481,
	482, 483, 484, 548, 565, 532, 502, 465, 556, 499,
	503, 504, 568, 0, 0, 0, 456, 350, 351, 0,
	329, 277, 278, 623, 315, 380, 570, 603, 604, 495,
	0, 557, 496, 505, 307, 529, 541, 540, 376, 455,
	0, 552, 555, 485, 622, 0, 549, 564, 626, 563,
	619, 386, 0, 405, 561, 508, 0, 553, 527, 0,
	554, 523, 558, 0, 497, 0, 412, 437, 449, 466,
	469, 498, 583, 584, 585, 282, 468, 587, 588, 589,
	590, 591, 592, 593, 586, 440, 530, 507, 533, 448,
	510, 509, 0, 0, 544, 464, 545, 546, 370, 371,
	372, 373, 651, 653, 300, 467, 395, 664, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 537, 534,
	631, 0, 594, 595, 0, 0, 461, 462, 328, 335,
	480, 337, 299, 385, 330, 446, 344, 0, 473, 538,
	474, 597, 600, 598, 599, 377, 340, 341, 409, 345,
	355, 398, 445, 383, 403, 297, 436, 410, 359, 524,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 578, 577,
	576, 575, 574, 573, 572, 0, 0, 521, 423, 309,
	271, 305, 306, 313, 620, 617, 427, 621, 0, 279,
	501, 353, 156, 394, 327, 566, 567, 0, 0, 227,
	228, 229, 230, 231, 232, 233, 234, 272, 235, 236,
	237, 238, 239, 240, 241, 244, 245, 246, 247, 248,
	249, 250, 251, 569, 242, 243, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	0, 0, 0, 273, 274, 275, 276, 0, 0, 267,
	268, 269, 270, 0, 0, 0, 452, 453, 454, 476,
	0, 438, 500, 618, 0, 0, 0, 0, 0, 0,
	0, 550, 562, 596, 0, 606, 607, 609, 611, 610,
	613, 415, 0, 0, 624, 491, 492, 625, 602, 382,
	0, 506, 539, 528, 612, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 352,
	543, 525, 535, 526, 511, 512, 513, 520, 332, 514,
	515, 516, 486, 517, 487, 518, 519, 0, 542, 493,
	411, 366, 560, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 0, 0, 295,
	215, 488, 608, 490, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 2319, 2322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 417, 434, 296,
	407, 447, 301, 414, 291, 381, 404, 0, 0, 287,
	432, 413, 363, 342, 343, 286, 0, 399, 320, 334,
	317, 379, 0, 431, 459, 316, 450, 0, 442, 289,
	0, 441, 378, 428, 433, 364, 358, 288, 430, 362,
	357, 346, 324, 475, 347, 348, 338, 390, 356, 391,
	339, 368, 367, 369, 0, 0, 0, 0, 0, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 605, 2323, 444, 0,
	0, 0, 2318, 0, 2317, 416, 2315, 2320, 349, 0,
	0, 0, 460, 0, 402, 384, 627, 0, 0, 400,
	354, 429, 392, 435, 418, 443, 396, 393, 280, 419,
	319, 365, 292, 294, 314, 321, 323, 325, 326, 374,
	375, 387, 406, 420, 421, 422, 318, 302, 401, 303,
	336, 304, 281, 310, 308, 311, 408, 312, 283, 388,
	426, 2321, 331, 397, 361, 284, 360, 389, 425, 424,
	293, 451, 457, 458, 547, 0, 463, 628, 629, 630,
	472, 477, 478, 479, 481, 482, 483, 484, 548, 565,
	532, 502, 465, 556, 499, 503, 504, 568, 0, 0,
	0, 456, 350, 351, 0, 329, 277, 278, 623, 315,
	380, 570, 603, 604, 495, 0, 557, 496, 505, 307,
	529, 541, 540, 376, 455, 0, 552, 555, 485, 622,
	0, 549, 564, 626, 563, 619, 386, 0, 405, 561,
	508, 0, 553, 527, 0, 554, 523, 558, 0, 497,
	0, 412, 437, 449, 466, 469, 498, 583, 584, 585,
	282, 468, 587, 588, 589, 590, 591, 592, 593, 586,
	440, 530, 507, 533, 448, 510, 509, 0, 0, 544,
	464, 545, 546, 370, 371, 372, 373, 333, 571, 300,
	467, 395, 0, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 537, 534, 631, 0, 594, 595, 0,
	0, 461, 462, 328, 335, 480, 337, 299, 385, 330,
	446, 344, 0, 473, 538, 474, 597, 600, 598, 599,
	377, 340, 341, 409, 345, 355, 398, 445, 383, 403,
	297, 436, 410, 359, 524, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 578, 577, 576, 575, 574, 573, 572,
	0, 0, 521, 423, 309, 271, 305, 306, 313, 620,
	617, 427, 621, 0, 279, 501, 353, 0, 394, 327,
	566, 567, 0, 0, 227, 228, 229, 230, 231, 232,
	233, 234, 272, 235, 236, 237, 238, 239, 240, 241,
	244, 245, 246, 247, 248, 249, 250, 251, 569, 242,
	243, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 0, 0, 0, 273, 274,
	275, 276, 0, 0, 267, 268, 269, 270, 0, 0,
	0, 452, 453, 454, 476, 0, 438, 500, 618, 0,
	0, 0, 0, 0, 0, 0, 550, 562, 596, 0,
	606, 607, 609, 611, 610, 613, 415, 0, 0, 624,
	491, 492, 625, 602, 382, 0, 506, 539, 528, 612,
	494, 0, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 0, 352, 543, 525, 535, 526, 511,
	512, 513, 520, 332, 514, 515, 516, 486, 517, 487,
	518, 519, 0, 542, 493, 411, 366, 560, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 295, 215, 488, 608, 490, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 285, 417, 434, 296, 407, 447, 301, 414, 291,
	381, 404, 0, 0, 2471, 2474, 2475, 2476, 2477, 2478,
	2479, 0, 2484, 2480, 2481, 2482, 2483, 0, 2466, 2467,
	2468, 2469, 1071, 2450, 2472, 0, 2451, 378, 2452, 2453,
	2454, 2455, 2456, 2457, 2458, 2459, 2460, 2463, 2464, 2461,
	2462, 2470, 390, 356, 391, 339, 368, 367, 369, 1098,
	1100, 1102, 1104, 1107, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 0,
	0, 605, 0, 444, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 349, 0, 0, 0, 2465, 0, 402,
	384, 627, 0, 0, 400, 354, 429, 392, 435, 418,
	443, 396, 393, 280, 419, 319, 365, 292, 294, 314,
	321, 323, 325, 326, 374, 375, 387, 406, 420, 421,
	422, 318, 302, 401, 303, 336, 304, 281, 310, 308,
	311, 408, 312, 283, 388, 426, 0, 331, 397, 361,
	284, 360, 389, 425, 424, 293, 451, 457, 458, 547,
	0, 463, 628, 629, 630, 472, 477, 478, 479, 481,
	482, 483, 484, 548, 565, 532, 502, 465, 556, 499,
	503, 504, 568, 0, 0, 0, 456, 350, 351, 0,
	329, 277, 278, 623, 315, 380, 570, 603, 604, 495,
	0, 557, 496, 505, 307, 529, 541, 540, 376, 455,
	0, 552, 555, 485, 622, 0, 549, 564, 626, 563,
	619, 386, 0, 405, 561, 508, 0, 553, 527, 0,
	554, 523, 558, 0, 497, 0, 412, 437, 449, 466,
	469, 498, 583, 584, 585, 282, 468, 587, 588, 589,
	590, 591, 592, 593, 586, 440, 530, 507, 533, 448,
	510, 509, 0, 0, 544, 464, 545, 546, 370, 371,
	372, 373, 333, 571, 300, 467, 395, 0, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 537, 534,
	631, 0, 594, 595, 0, 0, 461, 462, 328, 335,
	480, 337, 299, 385, 330, 446, 344, 0, 473, 538,
	474, 597, 600, 598, 599, 377, 340, 341, 409, 345,
	355, 398, 445, 383, 403, 297, 436, 410, 359, 524,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 578, 577,
	576, 575, 574, 573, 572, 0, 0, 521, 423, 309,
	271, 305, 306, 313, 620, 617, 427, 621, 0, 279,
	2473, 353, 0, 394, 327, 566, 567, 0, 0, 227,
	228, 229, 230, 231, 232, 233, 234, 272, 235, 236,
	237, 238, 239, 240, 241, 244, 245, 246, 247, 248,
	249, 250, 251, 569, 242, 243, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	0, 0, 0, 273, 274, 275, 276, 0, 0, 267,
	268, 269, 270, 0, 0, 0, 452, 453, 454, 476,
	0, 438, 500, 618, 0, 0, 0, 0, 0, 0,
	0, 550, 562, 596, 0, 606, 607, 609, 611, 610,
	613, 415, 0, 0, 624, 491, 492, 625, 602, 382,
	0, 506, 539, 528, 612, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 322, 0, 0, 352,
	543, 525, 535, 526, 511, 512, 513, 520, 332, 514,
	515, 516, 486, 517, 487, 518, 519, 0, 542, 493,
	411, 366, 560, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 0, 0, 0, 0, 295,
	215, 488, 608, 490, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 2340, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 417, 434, 296,
	407, 447, 301, 414, 291, 381, 404, 0, 0, 287,
	432, 413, 363, 342, 343, 286, 0, 399, 320, 334,
	317, 379, 0, 431, 459, 316, 450, 0, 442, 289,
	0, 441, 378, 428, 433, 364, 358, 288, 430, 362,
	357, 346, 324, 475, 347, 348, 338, 390, 356, 391,
	339, 368, 367, 369, 0, 0, 0, 0, 0, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 605, 2339, 444, 0,
	0, 0, 2345, 2342, 2344, 416, 0, 2343, 349, 0,
	0, 0, 460, 0, 402, 384, 627, 0, 2337, 400,
	354, 429, 392, 435, 418, 443, 396, 393, 280, 419,
	319, 365, 292, 294, 314, 321, 323, 325, 326, 374,
	375, 387, 406, 420, 421, 422, 318, 302, 401, 303,
	336, 304, 281, 310, 308, 311, 408, 312, 283, 388,
	426, 0, 331, 397, 361, 284, 360, 389, 425, 424,
	293, 451, 457, 458, 547, 0, 463, 628, 629, 630,
	472, 477, 478, 479, 481, 482, 483, 484, 548, 565,
	532, 502, 465, 556, 499, 503, 504, 568, 0, 0,
	0, 456, 350, 351, 0, 329, 277, 278, 623, 315,
	380, 570, 603, 604, 495, 0, 557, 496, 505, 307,
	529, 541, 540, 376, 455, 0, 552, 555, 485, 622,
	0, 549, 564, 626, 563, 619, 386, 0, 405, 561,
	508, 0, 553, 527, 0, 554, 523, 558, 0, 497,
	0, 412, 437, 449, 466, 469, 498, 583, 584, 585,
	282, 468, 587, 588, 589, 590, 591, 592, 593, 586,
	440, 530, 507, 533, 448, 510, 509, 0, 0, 544,
	464, 545, 546, 370, 371, 372, 373, 333, 571, 300,
	467, 395, 0, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 537, 534, 631, 0, 594, 595, 0,
	0, 461, 462, 328, 335, 480, 337, 299, 385, 330,
	446, 344, 0, 473, 538, 474, 597, 600, 598, 599,
	377, 340, 341, 409, 345, 355, 398, 445, 383, 403,
	297, 436, 410, 359, 524, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 578, 577, 576, 575, 574, 573, 572,
	0, 0, 521, 423, 309, 271, 305, 306, 313, 620,
	617, 427, 621, 0, 279, 501, 353, 0, 394, 327,
	566, 567, 0, 0, 227, 228, 229, 230, 231, 232,
	233, 234, 272, 235, 236, 237, 238, 239, 240, 241,
	244, 245, 246, 247, 248, 249, 250, 251, 569, 242,
	243, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 0, 0, 0, 273, 274,
	275, 276, 0, 0, 267, 268, 269, 270, 0, 0,
	0, 452, 453, 454, 476, 0, 438, 500, 618, 0,
	0, 0, 0, 0, 0, 0, 550, 562, 596, 0,
	606, 607, 609, 611, 610, 613, 415, 0, 0, 624,
	491, 492, 625, 602, 382, 0, 506, 539, 528, 612,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 0, 352, 543, 525, 535, 526, 511,
	512, 513, 520, 332, 514, 515, 516, 486, 517, 487,
	518, 519, 0, 542, 493, 411, 366, 560, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 295, 215, 488, 608, 490, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	0, 2340, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 417, 434, 296, 407, 447, 301, 414, 291,
	381, 404, 0, 0, 287, 432, 413, 363, 342, 343,
	286, 0, 399, 320, 334, 317, 379, 0, 431, 459,
	316, 450, 0, 442, 289, 0, 441, 378, 428, 433,
	364, 358, 288, 430, 362, 357, 346, 324, 475, 347,
	348, 338, 390, 356, 391, 339, 368, 367, 369, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 0,
	0, 605, 2339, 444, 0, 0, 0, 2345, 2342, 2344,
	416, 0, 2343, 349, 0, 0, 0, 460, 0, 402,
	384, 627, 0, 0, 400, 354, 429, 392, 435, 418,
	443, 396, 393, 280, 419, 319, 365, 292, 294, 314,
	321, 323, 325, 326, 374, 375, 387, 406, 420, 421,
	422, 318, 302, 401, 303, 336, 304, 281, 310, 308,
	311, 408, 312, 283, 388, 426, 0, 331, 397, 361,
	284, 360, 389, 425, 424, 293, 451, 457, 458, 547,
	0, 463, 628, 629, 630, 472, 477, 478, 479, 481,
	482, 483, 484, 548, 565, 532, 502, 465, 556, 499,
	503, 504, 568, 0, 0, 0, 456, 350, 351, 0,
	329, 277, 278, 623, 315, 380, 570, 603, 604, 495,
	0, 557, 496, 505, 307, 529, 541, 540, 376, 455,
	0, 552, 555, 485, 622, 0, 549, 564, 626, 563,
	619, 386, 0, 405, 561, 508, 0, 553, 527, 0,
	554, 523, 558, 0, 497, 0, 412, 437, 449, 466,
	469, 498, 583, 584, 585, 282, 468, 587, 588, 589,
	590, 591, 592, 593, 586, 440, 530, 507, 533, 448,
	510, 509, 0, 0, 544, 464, 545, 546, 370, 371,
	372, 373, 333, 571, 300, 467, 395, 0, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 537, 534,
	631, 0, 594, 595, 0, 0, 461, 462, 328, 335,
	480, 337, 299, 385, 330, 446, 344, 0, 473, 538,
	474, 597, 600, 598, 599, 377, 340, 341, 409, 345,
	355, 398, 445, 383, 403, 297, 436, 410, 359, 524,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 578, 577,
	576, 575, 574, 573, 572, 0, 0, 521, 423, 309,
	271, 305, 306, 313, 620, 617, 427, 621, 0, 279,
	501, 353, 0, 394, 327, 566, 567, 0, 0, 227,
	228, 229, 230, 231, 232, 233, 234, 272, 235, 236,
	237, 238, 239, 240, 241, 244, 245, 246, 247, 248,
	249, 250, 251, 569, 242, 243, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	0, 0, 0, 273, 274, 275, 276, 0, 0, 267,
	268, 269, 270, 0, 0, 0, 452, 453, 454, 476,
	0, 438, 500, 618, 0, 0, 0, 0, 0, 0,
	0, 550, 562, 596, 0, 606, 607, 609, 611, 610,
	613, 415, 0, 0, 624, 491, 492, 625, 602, 382,
	0, 506, 539, 528, 612, 494, 0, 0, 0, 0,
	0, 2042, 0, 0, 0, 0, 322, 0, 0, 352,
	543, 525, 535, 526, 511, 512, 513, 520, 332, 514,
	515, 516, 486, 517, 487, 518, 519, 0, 542, 493,
	411, 366, 560, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 0, 0, 2043, 0, 0, 0, 295,
	215, 488, 608, 490, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 0, 0, 1204, 1205, 1206,
	1203, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 417, 434, 296,
	407, 447, 301, 414, 291, 381, 404, 0, 0, 287,
	432, 413, 363, 342, 343, 286, 0, 399, 320, 334,
	317, 379, 0, 431, 459, 316, 450, 0, 442, 289,
	0, 441, 378, 428, 433, 364, 358, 288, 430, 362,
	357, 346, 324, 475, 347, 348, 338, 390, 356, 391,
	339, 368, 367, 369, 0, 0, 0, 0, 0, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 605, 0, 444, 0,
	0, 0, 0, 0, 0, 416, 0, 0, 349, 0,
	0, 0, 460, 0, 402, 384, 627, 0, 0, 400,
	354, 429, 392, 435, 418, 443, 396, 393, 280, 419,
	319, 365, 292, 294, 314, 321, 323, 325, 326, 374,
	375, 387, 406, 420, 421, 422, 318, 302, 401, 303,
	336, 304, 281, 310, 308, 311, 408, 312, 283, 388,
	426, 0, 331, 397, 361, 284, 360, 389, 425, 424,
	293, 451, 457, 458, 547, 0, 463, 628, 629, 630,
	472, 477, 478, 479, 481, 482, 483, 484, 548, 565,
	532, 502, 465, 556, 499, 503, 504, 568, 0, 0,
	0, 456, 350, 351, 0, 329, 277, 278, 623, 315,
	380, 570, 603, 604, 495, 0, 557, 496, 505, 307,
	529, 541, 540, 376, 455, 0, 552, 555, 485, 622,
	0, 549, 564, 626, 563, 619, 386, 0, 405, 561,
	508, 0, 553, 527, 0, 554, 523, 558, 0, 497,
	0, 412, 437, 449, 466, 469, 498, 583, 584, 585,
	282, 468, 587, 588, 589, 590, 591, 592, 593, 586,
	440, 530, 507, 533, 448, 510, 509, 0, 0, 544,
	464, 545, 546, 370, 371, 372, 373, 333, 571, 300,
	467, 395, 0, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 537, 534, 631, 0, 594, 595, 0,
	0, 461, 462, 328, 335, 480, 337, 299, 385, 330,
	446, 344, 0, 473, 538, 474, 597, 600, 598, 599,
	377, 340, 341, 409, 345, 355, 398, 445, 383, 403,
	297, 436, 410, 359, 524, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 578, 577, 576, 575, 574, 573, 572,
	0, 0, 521, 423, 309, 271, 305, 306, 313, 620,
	617, 427, 621, 0, 279, 501, 353, 0, 394, 327,
	566, 567, 0, 0, 227, 228, 229, 230, 231, 232,
	233, 234, 272, 235, 236, 237, 238, 239, 240, 241,
	244, 245, 246, 247, 248, 249, 250, 251, 569, 242,
	243, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 0, 0, 0, 273, 274,
	275, 276, 0, 0, 267, 268, 269, 270, 0, 0,
	0, 452, 453, 454, 476, 0, 438, 500, 618, 0,
	0, 0, 0, 0, 0, 0, 550, 562, 596, 0,
	606, 607, 609, 611, 610, 613, 415, 192, 0, 624,
	491, 492, 625, 602, 0, 0, 0, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 129, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 2092, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 156, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 192, 0, 624, 491, 492,
	625, 602, 0, 0, 0, 382, 0, 506, 539, 528,
	612, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 322, 0, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 129, 542, 493, 411, 366, 560, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 2078, 0, 214, 0,
	0, 0, 0, 0, 0, 295, 215, 488, 608, 490,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 0, 431,
	459, 316, 450, 0, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 475,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	0, 0, 605, 0, 444, 0, 0, 0, 0, 0,
	0, 416, 0, 0, 349, 0, 0, 0, 460, 0,
	402, 384, 627, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 628, 629, 630, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 623, 315, 380, 570, 603, 604,
	495, 0, 557, 496, 505, 307, 529, 541, 540, 376,
	455, 0, 552, 555, 485, 622, 0, 549, 564, 626,
	563, 619, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 440, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 464, 545, 546, 370,
	371, 372, 373, 333, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 631, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 620, 617, 427, 621, 0,
	279, 501, 353, 156, 394, 327, 566, 567, 0, 0,
	227, 228, 229, 230, 231, 232, 233, 234, 272, 235,
	236, 237, 238, 239, 240, 241, 244, 245, 246, 247,
	248, 249, 250, 251, 569, 242, 243, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 0, 0, 0, 273, 274, 275, 276, 0, 0,
	267, 268, 269, 270, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 618, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	610, 613, 415, 0, 0, 624, 491, 492, 625, 602,
	382, 0, 506, 539, 528, 612, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 322, 1003, 0,
	352, 543, 525, 535, 526, 511, 512, 513, 520, 332,
	514, 515, 516, 486, 517, 487, 518, 519, 0, 542,
	493, 411, 366, 560, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 214, 1010, 1011, 0, 0, 0, 0,
	295, 215, 488, 608, 490, 489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1014, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 417, 998,
	296, 407, 447, 301, 414, 291, 381, 404, 0, 0,
	287, 432, 413, 363, 342, 343, 286, 0, 399, 320,
	334, 317, 379, 0, 431, 459, 316, 450, 987, 442,
	289, 986, 441, 378, 428, 433, 364, 358, 288, 430,
	362, 357, 346, 324, 475, 347, 348, 338, 390, 356,
	391, 339, 368, 367, 369, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 601, 0, 0, 605, 0, 444,
	0, 0, 0, 0, 0, 0, 416, 0, 0, 349,
	0, 0, 0, 460, 0, 402, 384, 627, 0, 0,
	400, 354, 429, 392, 435, 418, 443, 1001, 393, 280,
	419, 319, 365, 292, 294, 314, 321, 323, 325, 326,
	374, 375, 387, 406, 420, 421, 422, 318, 302, 401,
	303, 336, 304, 281, 310, 308, 311, 408, 312, 283,
	388, 426, 0, 331, 397, 361, 284, 360, 389, 425,
	424, 293, 451, 457, 458, 547, 0, 463, 628, 629,
	630, 472, 477, 478, 479, 481, 482, 483, 484, 548,
	565, 532, 502, 465, 556, 499, 503, 504, 568, 0,
	0, 0, 456, 350, 351, 0, 329, 277, 278, 623,
	315, 380, 570, 603, 604, 495, 0, 557, 496, 505,
	307, 529, 541, 540, 376, 455, 0, 552, 555, 485,
	622, 0, 549, 564, 626, 563, 619, 386, 0, 405,
	561, 508, 0, 553, 527, 0, 554, 523, 558, 0,
	497, 0, 412, 437, 449, 466, 469, 498, 583, 584,
	585, 282, 468, 587, 588, 589, 590, 591, 592, 1002,
	586, 440, 530, 507, 533, 448, 510, 509, 0, 0,
	544, 1005, 545, 546, 370, 371, 372, 373, 333, 571,
	300, 467, 395, 0, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 537, 534, 631, 0, 594, 595,
	0, 0, 461, 462, 328, 335, 480, 337, 299, 385,
	330, 446, 344, 0, 473, 538, 474, 597, 600, 598,
	599, 1012, 999, 1008, 1000, 345, 355, 398, 445, 383,
	403, 297, 436, 410, 1009, 524, 551, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 578, 577, 576, 575, 574, 573,
	572, 0, 0, 521, 423, 309, 271, 305, 306, 313,
	620, 617, 427, 621, 0, 279, 501, 353, 0, 394,
	327, 566, 567, 0, 0, 227, 228, 229, 230, 231,
	232, 233, 234, 272, 235, 236, 237, 238, 239, 240,
	241, 244, 245, 246, 247, 248, 249, 250, 251, 569,
	242, 243, 252, 253, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 0, 0, 0, 273,
	274, 275, 276, 0, 0, 267, 268, 269, 270, 0,
	0, 0, 452, 453, 454, 476, 0, 438, 500, 618,
	0, 0, 0, 0, 0, 0, 0, 550, 562, 596,
	0, 606, 607, 609, 611, 610, 613, 415, 192, 0,
	624, 491, 492, 625, 602, 0, 0, 0, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 129, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1975, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 156, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 1010, 1011, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1014, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 987, 442, 289, 986, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 1012, 1994, 1008, 1995, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 1009, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 2846, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 2849, 0,
	0, 2848, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 1481, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 1479,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1477, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 1475, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 1479, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3867, 0, 214, 818, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 1479, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 1479,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1688, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	2414, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 2416, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 3048,
	3050, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 2435, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 1479, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 638,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 637, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 818, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3846, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 3622, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 3753, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3467, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3637, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 3555, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 3081,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1975, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3202,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 1479, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 2416,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 2769, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2113, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 2532, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 2491, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 2274, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 1832, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 1961, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 1479, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 1866, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 1508, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 638, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 648,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 937,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 1459, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 1457, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 715, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	672, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 673, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 945,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 192, 60, 183, 155, 3336, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 184, 0, 624, 491, 492, 625, 602, 176, 0,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3348, 0, 0, 942,
	943, 129, 0, 0, 0, 0, 0, 0, 0, 3339,
	985, 0, 0, 0, 0, 0, 117, 0, 0, 0,
	3334, 0, 0, 188, 0, 3356, 3357, 0, 0, 0,
	0, 3335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3340, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 0, 0, 986, 0, 0, 0,
	137, 138, 0, 139, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3355, 0, 2317, 0, 0, 0, 948, 0,
	0, 154, 182, 190, 0, 115, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3344,
	0, 0, 0, 181, 175, 174, 0, 0, 0, 0,
	66, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3341, 3345, 3343, 3342, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 968, 0, 0, 0, 0, 1948, 0, 0,
	0, 0, 1909, 0, 0, 0, 0, 0, 0, 3350,
	3351, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 177, 178, 179, 0, 941, 0, 0, 0, 0,
	0, 0, 1950, 1918, 0, 0, 947, 980, 0, 0,
	0, 0, 1951, 1952, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 3358, 0, 0,
	976, 0, 0, 0, 0, 0, 0, 0, 1917, 3337,
	0, 0, 0, 125, 0, 3349, 0, 180, 0, 126,
	0, 0, 0, 0, 1925, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 981, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 0, 962, 966,
	984, 0, 0, 0, 963, 960, 959, 0, 965, 950,
	951, 949, 952, 953, 954, 955, 127, 982, 0, 983,
	0, 694, 693, 700, 690, 0, 0, 0, 0, 59,
	978, 979, 1941, 697, 698, 0, 699, 703, 0, 0,
	684, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 1948, 0, 0, 0, 0, 1909,
	0, 0, 0, 0, 0, 0, 0, 974, 0, 0,
	0, 0, 0, 973, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 0, 3354, 0, 0, 969, 1950,
	1918, 0, 0, 0, 712, 0, 0, 714, 0, 1951,
	1952, 0, 713, 1908, 1910, 1907, 0, 1904, 0, 0,
	0, 0, 1929, 135, 189, 0, 136, 0, 0, 0,
	0, 156, 0, 1935, 0, 1917, 57, 0, 0, 0,
	0, 1920, 0, 1903, 0, 0, 0, 0, 0, 0,
	0, 1925, 0, 1923, 1957, 0, 0, 1924, 1926, 1928,
	0, 1930, 1931, 1932, 1936, 1937, 1938, 1940, 1943, 1944,
	1945, 3353, 0, 0, 0, 0, 972, 0, 1933, 1942,
	1934, 0, 944, 940, 0, 0, 0, 0, 0, 0,
	1912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 128, 44, 0, 0, 0, 0, 0, 58,
	0, 0, 1949, 5, 1204, 1205, 1206, 1203, 0, 1941,
	0, 0, 132, 133, 0, 0, 134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1905,
	1906, 0, 0, 0, 0, 0, 0, 0, 0, 685,
	687, 686, 0, 0, 0, 0, 0, 1946, 0, 692,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 696, 0, 0, 1922, 0, 0, 0, 711, 0,
	0, 1921, 0, 0, 0, 689, 0, 0, 0, 679,
	1908, 2735, 1907, 1721, 2734, 0, 0, 0, 0, 1929,
	0, 0, 0, 0, 0, 1939, 0, 0, 0, 0,
	1935, 0, 0, 0, 1927, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1954, 1953, 0,
	1923, 1957, 0, 0, 1924, 1926, 1928, 0, 1930, 1931,
	1932, 1936, 1937, 1938, 1940, 1943, 1944, 1945, 0, 0,
	694, 693, 700, 690, 0, 1933, 1942, 1934, 0, 0,
	0, 0, 697, 698, 1087, 699, 703, 1912, 0, 684,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 708,
	1914, 0, 0, 0, 0, 0, 0, 0, 0, 1949,
	0, 0, 0, 0, 0, 691, 695, 701, 0, 702,
	704, 0, 0, 705, 706, 707, 1948, 0, 709, 710,
	0, 0, 0, 192, 0, 0, 1905, 1906, 1721, 0,
	0, 0, 1956, 712, 0, 1955, 714, 0, 0, 0,
	0, 713, 0, 0, 1946, 3476, 0, 0, 0, 0,
	0, 1950, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1922, 0, 0, 0, 0, 1717, 0, 1921, 0,
	0, 0, 0, 1714, 0, 0, 0, 1716, 1713, 1715,
	1719, 1720, 0, 0, 0, 1718, 0, 0, 0, 0,
	0, 0, 1939, 188, 0, 0, 1073, 0, 0, 0,
	0, 1927, 0, 1925, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1954, 1953, 1095, 1099, 1101, 1103,
	1105, 1106, 1108, 0, 1113, 1109, 1110, 1111, 1112, 0,
	1090, 1091, 1092, 1093, 1071, 1072, 1096, 0, 1074, 0,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1086,
	1088, 1084, 1085, 1094, 0, 0, 0, 694, 693, 700,
	690, 1098, 1100, 1102, 1104, 1107, 0, 1914, 0, 697,
	698, 1941, 699, 703, 688, 0, 684, 0, 685, 687,
	686, 0, 0, 0, 0, 0, 708, 0, 692, 0,
	0, 1717, 0, 0, 0, 0, 0, 0, 1714, 1089,
	696, 0, 1716, 1713, 1715, 1719, 1720, 711, 0, 1956,
	1718, 0, 1955, 0, 689, 0, 0, 0, 1702, 1703,
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1724,
	1725, 1726, 1727, 1728, 1729, 1722, 1723, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1923, 1957, 0, 0, 1924, 1926, 1928, 0,
	1930, 1931, 1932, 1936, 1937, 1938, 1940, 1943, 1944, 1945,
	0, 1948, 0, 0, 0, 0, 0, 1933, 1942, 1934,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 691, 695, 701, 0, 702, 704,
	0, 0, 705, 706, 707, 0, 1950, 709, 710, 1948,
	0, 1949, 0, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1724, 1725, 1726, 1727, 1728, 1729,
	1722, 1723, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1950, 685, 687, 686, 3643, 0,
	0, 0, 0, 0, 0, 692, 1946, 0, 1925, 0,
	0, 0, 0, 0, 0, 0, 0, 696, 0, 0,
	0, 0, 0, 1922, 711, 0, 0, 0, 0, 0,
	1921, 689, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1925, 0, 0, 0,
	0, 0, 0, 0, 1939, 0, 0, 0, 0, 0,
	0, 0, 0, 1927, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 0,
	3614, 0, 0, 688, 1941, 0, 0, 0, 0, 0,
	0, 0, 0, 1950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 691, 695, 701, 0, 702, 704, 0, 0, 705,
	706, 707, 0, 0, 709, 710, 1929, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1935, 0, 0,
	0, 156, 0, 0, 0, 1925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1923, 1957, 0,
	0, 1924, 1926, 1928, 1929, 1930, 1931, 1932, 1936, 1937,
	1938, 1940, 1943, 1944, 1945, 1935, 0, 0, 0, 0,
	0, 0, 1933, 1942, 1934, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1923, 1957, 0, 0, 1924,
	1926, 1928, 0, 1930, 1931, 1932, 1936, 1937, 1938, 1940,
	1943, 1944, 1945, 1941, 0, 0, 1949, 0, 0, 0,
	1933, 1942, 1934, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1949, 0, 0, 0, 0, 0,
	0, 1946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1922, 0,
	688, 0, 0, 0, 0, 1921, 0, 0, 0, 0,
	0, 0, 0, 1929, 0, 0, 0, 0, 0, 1946,
	0, 0, 0, 0, 1935, 0, 0, 0, 0, 1939,
	0, 0, 0, 0, 0, 0, 1922, 0, 1927, 0,
	0, 0, 0, 1921, 1923, 1957, 0, 0, 1924, 1926,
	1928, 0, 1930, 1931, 1932, 1936, 1937, 1938, 1940, 1943,
	1944, 1945, 0, 0, 0, 0, 0, 1939, 0, 1933,
	1942, 1934, 0, 0, 0, 0, 1927, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1949, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1922, 0, 0, 0, 0,
	0, 0, 1921, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1939, 0, 0, 0,
	0, 0, 0, 0, 0, 1927,
}

var yyPact = [...]int{
	47330, -1000, -1000, -1000, -297, 12883, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 44270, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 450, 44270, -295,
	27050, 42425, -1000, -1000, 2820, -1000, 43040, 14741, 44270, 537,
	529, 44270, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 910, -1000, 46730, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 858, 47758, 46115, 9788, -204,
	-1000, 1711, -29, 2580, 470, -185, -186, 1073, 1087, 1425,
	1425, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 249, 933, 43655, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 47292, 253, 933, 19667, 116, 110, 1711, 440, -70,
	201, -1000, 1122, 393, 216, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9788, 9788, 12883, -358,
	12883, 9788, 44270, 44270, -1000, -1000, -1000, -1000, -295, 43040,
	858, 47758, 9788, 2580, 470, -185, -186, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-70, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 110,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3842, -1000, 1601, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2378, 3149, 1600, 2579, 779, 42425, 44270, -1000,
	163, 779, -1000, -1000, -1000, 1711, 3563, -1000, 44270, 44270,
	219, 1893, -1000, 530, 434, 527, 335, 1596, -1000, -1000,
	-1000, -1000, -1000, -1000, 710, 3542, -1000, 44270, 44270, 3170,
	44270, -1000, 2275, 738, -1000, 48077, 3379, 1434, 959, 3182,
	-1000, -1000, 3148, -1000, 344, 471, 419, 463, 445, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 343, -1000, 3476, -1000,
	-1000, 327, -1000, -1000, 320, -1000, -1000, -1000, 104, -1000,
	-1000, -1000, -1000, -1000, -1000, 9, -1000, -1000, 1168, 2018,
	9788, 2248, -1000, 2798, 1620, -1000, -1000, -1000, 5462, 11639,
	11639, 11639, 11639, 44270, -1000, -1000, 2965, 9788, 3147, 3146,
	3137, 3135, -1000, -1000, -1000, -1000, -1000, -1000, 1573, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2067, -1000,
	-1000, -1000, 12256, -1000, 3133, 3129, 3122, 3121, 3120, 3116,
	3114, 3113, 3107, 3104, 3103, 3101, 3100, 3093, 2819, 14116,
	3092, 2567, 2562, 3089, 3088, 3086, 2561, 3085, 3082, 3080,
	2819, 2819, 3079, 3078, 3077, 3073, 3072, 3071, 3067, 3065,
	3062, 3057, 3056, 3055, 3054, 3052, 3051, 3047, 3046, 3039,
	3036, 3033, 3032, 3017, 3016, 3010, 3009, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1327, -1000, 2996, 3555, 2903, -1000, 3448, 3446, 3439, 3433,
	-256, 2994, 2260, -1000, -1000, 122, 3541, 44270, 2560, -84,
	2559, -97, -1000, -53, -1000, -1000, 1025, -1000, 1020, -1000,
	839, 839, 839, 44270, 44270, 224, 844, 839, 839, 839,
	839, 839, 901, 839, 3491, 909, 908, 906, 904, 839,
	-21, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1892, 1883,
	3259, 1003, -1000, -1000, -1000, -1000, 1435, 44270, -1000, 2938,
	2557, 1690, 1690, 3532, 3532, 3487, 755, 747, 743, 1690,
	586, -1000, 1855, 1855, 1855, 1855, 1690, 482, 750, 3495,
	3495, 109, 1855, 62, 1690, 1690, 62, 1690, 1690, -1000,
	1831, 267, -266, -1000, -1000, -1000, -1000, 1855, 1855, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3471, 3469, 858, 858,
	44270, 858, 228, 44270, 858, 858, 858, 866, 32, 45500,
	44885, 2275, 726, 722, 1462, 1784, -1000, 1733, 44270, 44270,
	1733, 1733, 22745, 22130, -1000, 44270, -1000, 3555, 2903, 2800,
	1768, 2796, 2903, -98, 2556, 858, 858, 858, 858, 858,
	305, 858, 858, 858, 858, 858, 44270, 44270, 41810, 858,
	858, 858, 858, 7930, 7930, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12883, 2039, 2200, 213, 4, -284,
	277, -1000, -1000, 44270, 3340, 304, -1000, -1000, -1000, 2828,
	-1000, 2918, 2918, 2918, 2918, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2918, 2918, 2937, 2979, -1000, -1000,
	2917, 2917, 2917, 2828, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2919,
	2919, 2920, 2920, 2919, 44270, -113, -1000, -1000, 9788, 44270,
	3360, 399, 2974, 779, -1000, -1000, 44270, 128, 402, 3555,
	3356, 3495, 3524, -1000, -1000, 1570, 2254, 2555, -1000, 335,
	-1000, 489, 335, 1732, -1000, 1101, -1000, -1000, -1000, -1000,
	-1000, 44270, 9, 443, -1000, -1000, 2532, 2971, -1000, 651,
	1298, 1464, -1000, 255, 48274, 35045, 2275, 35045, 44270, -1000,
	-1000, -1000, -1000, -1000, -1000, 100, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	350, -1000, 9788, 9788, 9788, 9788, 9788, -1000, 767, 11022,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11639, 11639, 11639,
	11639, 11639, 11639, 11639, 11639, 11639, 11639, 11639, 11639, 2963,
	2006, 11639, 11639, 11639, 11639, 24590, 1768, 3350, 1443, 312,
	1620, 1620, 1620, 1620, 9788, -1000, 1917, 2018, 9788, 9788,
	9788, 9788, 44270, -1000, -1000, 47843, 9788, 9788, 47968, 9788,
	3422, 9788, 9788, 9788, 2794, 4163, 44270, 9788, -1000, 2793,
	2789, -1000, -1000, 2130, 9788, -1000, -1000, 9788, -1000, -1000,
	9788, 11639, 9788, -1000, 9788, 9788, 9788, -1000, -1000, 2407,
	3422, 3422, 3422, 1858, 9788, 9788, 3422, 3422, 3422, 1821,
	3422, 3422, 3422, 3422, 3422, 3422, 3422, 3422, 3422, 3422,
	2787, 2786, 2785, 9171, 3495, -204, -1000, 7313, 3356, 3495,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-260, 2969, 44270, 2552, 2549, -306, 1070, 462, 432, 2253,
	-101, 2249, 80, 1059, 1027, 1031, -1000, 2548, 1926, 44270,
	44270, 3418, -1000, 2968, 44270, 839, 839, 839, -1000, 39965,
	35045, 44270, 44270, 2275, 44270, 44270, 44270, 839, 839, 839,
	839, 44270, -1000, 3284, 35045, 3263, 866, -1000, 44270, 1435,
	3403, 44270, 432, 3532, 11639, 11639, -1000, -1000, 9788, -1000,
	41195, 1855, 1690, 1690, -1000, -1000, 44270, -1000, -1000, -1000,
	1855, 44270, 1855, 1855, 3532, 1855, -1000, -1000, -1000, 1690,
	1690, -1000, -1000, 9788, -1000, -1000, 1855, 1855, -1000, -1000,
	3532, 44270, 78, 3532, 3532, 129, -1000, -1000, -1000, 1690,
	44270, 44270, 839, 44270, -1000, 44270, 44270, -1000, -1000, 44270,
	44270, 47621, 44270, 39965, 40580, 3468, -1000, 35045, 44270, 44270,
	33200, -1000, 1398, -1000, 39, -1000, 60, 32, 1733, 32,
	1733, -1000, 650, 700, 20900, 573, 35045, 4835, -1000, -1000,
	1733, 1733, 4835, 4835, 1621, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1427, -1000, 279, 3495, -1000, -1000, -1000, -1000,
	-1000, 2245, 432, 44270, 39965, 35045, 2275, 44270, 858, 44270,
	44270, 44270, 44270, 44270, -1000, 2966, 1565, -1000, 3368, 44270,
	44270, 44270, 44270, 1318, -1000, -1000, 17816, 1556, 1318, -1000,
	1925, -1000, 9788, 12883, -234, 9788, 12883, 12883, 9788, 12883,
	-1000, 9788, 294, -1000, -1000, -1000, -1000, 2243, -1000, 2240,
	-1000, -1000, -1000, -1000, -1000, 2547, 2547, -1000, 2233, -1000,
	-1000, -1000, -1000, 2230, -1000, -1000, 2218, -1000, -1000, -1000,
	-1000, -145, 2772, 1168, -1000, 2542, 3180, -206, -1000, 19052,
	44270, 44270, 399, -309, -1000, 1882, 1873, 1872, -1000, -206,
	-1000, 18434, 44270, 3495, -1000, -210, 3356, 9788, 44270, -1000,
	3484, -1000, -1000, 335, -1000, 534, 425, -1000, -1000, -1000,
	-1000, -1000, -1000, 1551, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 442, -77, -80, 1417, -1000, 44270,
	-1000, -1000, 255, 35045, 36890, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 266, -1000, -1000, 193, -1000, 897, 264, 1730,
	-1000, -1000, 231, 225, 220, 950, 2018, -1000, 1973, 1973,
	1936, -1000, 718, -1000, -1000, -1000, -1000, 2965, -1000, -1000,
	-1000, 3130, 3280, -1000, 2078, 2078, 1633, 1633, 1633, 1633,
	1633, 1753, 1753, -1000, -1000, -1000, 5462, 2963, 11639, 11639,
	11639, 11639, 914, 914, 2964, 2942, -1000, -1000, -1000, -1000,
	9788, 190, 1916, -1000, 9788, 2716, 1559, 2487, 1530, 1547,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2769, 2763, 2455, 3540, 2761, 9788, -1000, -1000, 1727, 1720,
	1704, -1000, 2421, 8554, -1000, -1000, -1000, 2759, 1545, 2757,
	-1000, -1000, -1000, 2736, 1700, 1174, 2734, 1813, 2731, 2730,
	2714, 2710, 1410, 9788, 9788, 9788, 9788, 2706, 1694, 1685,
	9788, 9788, 9788, 9788, 2698, 9788, 9788, 9788, 9788, 9788,
	9788, 9788, 9788, 9788, 9788, 137, 137, 137, 1409, 1408,
	-1000, -1000, 1682, -1000, 2018, -1000, -1000, 3356, -1000, 2962,
	2217, 1407, -1000, -1000, -292, 2498, 44270, 1066, 44270, -1000,
	-1000, 2539, -1000, 2535, -1000, -1000, -1000, 1063, 1015, 1014,
	2534, 3366, 3483, 873, 44270, 1181, 2961, 44270, 44270, 44270,
	287, -1000, -1000, 1392, -1000, 264, 239, 535, 1195, 3169,
	3539, -115, 44270, 44270, 44270, 44270, 3402, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 39350, -1000, 2960, 1660, -1000,
	-1000, -1000, 1620, 1620, 2018, 3167, 44270, 44270, 3532, 3532,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1855, 3532, 3532,
	1365, 1690, 1855, -1000, -1000, 1855, -313, -1000, 1855, -1000,
	-313, 1539, -313, 44270, -1000, -1000, -1000, 3401, 2938, 1399,
	-1000, -1000, -1000, 3522, 1095, 829, 829, 1057, 563, 3521,
	16586, -1000, 1707, 1116, 896, 3290, 341, -1000, 1707, -142,
	798, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 704, 699,
	1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
	1707, 1085, 1707, 1707, 1707, 1707, 1707, -1000, 1707, 2959,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 728, 643, 286,
	3465, 382, -1000, 369, 1392, 3462, 428, 3420, 1340, -1000,
	-1000, -1000, -1000, 25205, 25205, 20285, 25205, -1000, 214, 32,
	44, -1000, -1000, 1398, 4835, 1398, 4835, -1000, -1000, 893,
	-1000, -1000, 1195, -1000, 44270, 44270, -1000, -1000, 2958, 1869,
	-1000, -1000, 14116, -1000, 4835, 4835, -1000, -1000, 26435, 44270,
	-1000, -1, -1000, 10, 3356, -1000, -1000, 1393, -1000, -1000,
	1394, 1195, 3177, 44270, 1393, 1393, 1393, -1000, -1000, 15971,
	44270, 44270, -1000, -1000, -1000, -1000, 3532, 7930, -1000, 33200,
	-1000, -1000, 38735, -1000, 38120, 3532, 1903, -1000, 12883, 2176,
	208, -1000, 263, -286, 207, 2077, 206, 2018, -1000, -1000,
	2694, 2693, 1655, -1000, 1626, 2686, 1624, 1622, 2205, -1000,
	68, -1000, 3331, 1219, -1000, 2955, -1000, 1613, 3246, -1000,
	1381, -1000, 1868, 1605, -1000, -1000, -1000, 9788, 37505, 9788,
	1219, 1604, 3239, 1381, 3356, 2533, -1000, 1374, -1000, 2388,
	1535, 211, -1000, -1000, -1000, 44270, 858, 2532, 1602, 36890,
	1247, -1000, 883, 1534, 1529, -1000, 35045, 329, 35045, -1000,
	35045, -1000, -1000, 404, -1000, 44270, 3354, -1000, -1000, -1000,
	2498, 1867, -312, 44270, -1000, -1000, -1000, -1000, -1000, 1598,
	-1000, 914, 914, 2964, 2926, -1000, 11639, -1000, 11639, 3346,
	-1000, 1900, -1000, 9788, 2151, 3755, 9788, 3755, 2095, 23975,
	44270, -1000, -1000, 9788, 9788, -1000, 3330, -1000, -1000, -1000,
	-1000, 9788, 9788, 2292, -1000, 44270, -1000, -1000, -1000, -1000,
	23975, -1000, 11639, -1000, -1000, -1000, -1000, 9788, 1249, 1249,
	3256, 1592, 137, 137, 137, 3241, 3203, 3184, 1591, 137,
	3172, 3127, 3110, 3068, 3030, 3014, 2947, 2921, 2883, 2837,
	-1000, 2953, -1000, -1000, 2045, 10405, 7313, -1000, -1000, 301,
	1352, 2204, 2529, 143, -1000, 1866, -1000, 44270, 1129, -1000,
	2526, -1000, -1000, -1000, 1008, 2525, -1000, 449, 2071, 186,
	310, 2684, 1348, -1000, -1000, 44270, -1000, -1000, -1000, 15971,
	2938, 2946, 2938, 181, 1707, 697, 35045, 715, -1000, 44270,
	44270, 2267, 1848, 3175, 793, 3322, 44270, 2945, 401, 2944,
	2941, 3400, 509, 48073, 44270, 1311, -1000, 1525, 393, -1000,
	44270, -1000, 2275, -1000, 1690, -1000, -1000, 3532, -1000, -1000,
	9788, 9788, 3532, 1690, 1690, -1000, 1049, 1855, -1000, 44270,
	-1000, -1000, 509, 48073, 3397, 47798, 609, 2802, -1000, 44270,
	-1000, -1000, -1000, 871, -1000, 1050, 839, 44270, 1984, 1050,
	1982, 2940, -1000, -1000, 44270, 44270, 44270, 44270, -1000, -1000,
	44270, -1000, 44270, 44270, 44270, 44270, 44270, 36275, -1000, 44270,
	44270, -1000, 44270, 1981, 44270, 1980, 3427, -1000, 1707, 1707,
	965, -1000, -1000, 631, -1000, 36275, 2199, 2196, 2175, 2171,
	2524, 2522, 2519, 1707, 1707, 2169, 2514, 35660, 2513, 1155,
	2167, 2157, 2148, 2160, 2507, 992, -1000, 2506, 2159, 2133,
	2106, 44270, 2939, 2435, -1000, -1000, 2071, 181, 1707, 380,
	44270, 1847, 1846, 697, 528, -10, 21515, 44270, 33200, 33200,
	33200, 33200, -1000, 3223, 3213, 3198, -1000, 3262, 3240, 3306,
	44270, 33200, 2938, -1000, 35660, -1000, -1000, -1000, 1768, 1576,
	2823, 1058, 9788, -1000, -1000, 36, 53, -1000, -1000, -1000,
	35045, 2505, 573, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3481, 44270, 44270, 804, 2682, 1342, -1000, -1000, -1000, 48073,
	2918, 2918, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2918, 2918, 2937, -1000, -1000, 2917, 2917, 2917, 2828,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2919, 2919, 2920, 2920, 2919, -1000, -1000, 3529, -1000, 1313,
	-1000, -1000, 1524, -1000, 3529, 1723, -301, 12883, 1906, 1687,
	-1000, 9788, 12883, 9788, -235, 351, -237, -1000, -1000, -1000,
	2502, -1000, -1000, -1000, 2146, -1000, 2145, -1000, 192, 218,
	1978, -206, 7313, 407, 44270, -206, 44270, 7313, -1000, 44270,
	178, -327, -329, 174, 400, -206, 3481, 68, 9788, 3285,
	-1000, -1000, 44270, 2138, -1000, -1000, -1000, 3538, 35045, 2275,
	1662, 34430, -1000, 326, -1000, 265, 605, 2501, -1000, 902,
	142, 2500, 2498, -1000, -1000, -1000, -1000, 11639, 1620, -1000,
	-1000, -1000, 2018, 9788, 2677, -1000, 1004, 1004, 2140, 2674,
	2672, -1000, 2918, 2918, -1000, 2828, 2917, 2828, 1004, 1004,
	2671, -1000, 2362, 2776, -1000, 2754, 2651, 9788, -1000, 2670,
	2870, 1379, -26, -174, 137, 137, -1000, -1000, -1000, -1000,
	137, 137, 137, 137, -1000, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 780, -92, -271, -96, -272,
	-1000, 2663, 1305, -1000, -1000, -1000, -1000, -1000, 47968, 1282,
	550, 550, 2498, 2497, 882, 1046, 44270, -1000, -1000, 2494,
	-1000, -1000, 44270, 2493, -1000, 639, 44270, 44270, 2492, 2489,
	1181, 48073, 2660, 3396, 15356, 3382, 2274, -1000, -1000, -1000,
	25820, 591, -1000, -1000, -1000, 707, 316, 2137, 579, -1000,
	44270, 428, 428, 3274, 1842, 2481, 44270, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3322, -1000, 891, 484, 31970, 13501,
	-1000, 431, 44270, -1000, 15356, 15356, 431, 492, 1826, -1000,
	779, 1228, 154, 33200, 44270, -1000, 32585, 2659, -1000, 1195,
	3532, -1000, 2018, 2018, -313, 3532, 3532, 1811, 1690, -1000,
	492, -1000, 431, -1000, 1213, 17201, 567, 508, 503, -1000,
	695, -1000, -1000, 778, 3335, 48073, -1000, 44270, -1000, 44270,
	-1000, 44270, 44270, 839, 9788, 3335, 44270, 876, -1000, -1000,
	1136, 504, 415, 807, 807, 1281, -1000, 3373, -1000, -1000,
	1273, -1000, -1000, -1000, -1000, 44270, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 23975, 23975, 3455, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2472,
	2471, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	44270, 1571, -1000, 1810, 2469, 2274, 25820, 1805, 1733, 2468,
	2466, 591, 2267, 1792, 2272, 44270, -1000, 1220, 44270, 44270,
	-1000, 1424, -1000, 1785, 3164, 3174, 3164, -1000, -1000, -1000,
	-1000, -1000, 3196, -1000, 3029, -1000, -1000, 1424, -1000, -1000,
	-1000, -1000, -1000, 1058, -1000, 3480, 1050, 1050, 1050, 2658,
	-1000, -1000, -1000, 1247, 2656, -1000, -1000, -1000, 3550, -1000,
	-1000, -1000, -1000, -1000, -1000, 15971, 3319, 3527, 3520, 33815,
	3527, -1000, -301, 1714, -1000, 2129, 203, 1985, 44270, -1000,
	-1000, -1000, 2632, 2626, -212, 195, 3518, 3517, 1068, -1000,
	2625, 1233, -206, -1000, -1000, 1219, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -206, -1000, 1219, -1000, 192, -1000, -1000,
	3297, -1000, -1000, 2275, -1000, 260, -1000, -1000, -1000, -1000,
	-1000, -1000, 240, -1000, 44270, -1000, 1230, 141, -1000, 2018,
	-1000, -1000, -1000, -1000, -1000, 3755, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 9788, -1000, -1000,
	-1000, 2578, -1000, -1000, 9788, 2624, 2465, 2618, 2462, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3555, -1000, 3516, 1509, 2617,
	2614, 1504, 2613, 2611, -1000, 9788, 2609, 47968, 977, 2461,
	977, -1000, -1000, 421, 44270, 3537, 2458, -1000, -1000, 2071,
	637, 664, -1000, -1000, -1000, -1000, 913, 431, 2599, 1224,
	-1000, -1000, -1000, -1000, 431, -1000, 2457, 251, -1000, -1000,
	-1000, -1000, 2447, 2442, 2134, -1000, -1000, 2094, 1572, 273,
	-1000, -1000, -1000, -1000, -1000, -1000, 2272, 2272, 2084, 1783,
	-315, -1000, 2915, -1000, 1707, 1707, 1707, 44270, 1495, -1000,
	1707, 1707, 2598, -1000, -1000, 2596, 2595, -122, 801, 1722,
	1721, -1000, 2121, 25205, 33200, 32585, 1309, -1000, 1521, -1000,
	-1000, -1000, -1000, -1000, -1000, 2440, 3532, 801, -1000, 562,
	2119, 11639, 2904, 11639, 2902, 575, 2900, 1478, -1000, 44270,
	-1000, -1000, 44270, 47306, 2885, -1000, 2879, 3166, 546, 2878,
	2877, 44270, 2521, -1000, 3335, 44270, 768, 3310, -1000, -1000,
	-1000, 444, -1000, -1000, 645, -1000, 44270, -1000, 44270, -1000,
	1615, -1000, 23975, -1000, -1000, 1475, -1000, 2435, 2434, -1000,
	-1000, 251, 2431, 4835, -1000, -1000, -1000, 3274, 2430, -1000,
	2428, -1000, 44270, 1220, 1220, 3555, 44270, 7313, -1000, -1000,
	9788, 2873, -1000, 9788, -1000, -1000, -1000, -1000, -1000, 2869,
	3429, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2359, -1000,
	9788, 9788, -1000, -1000, 832, 12883, -246, 349, -1000, -1000,
	-1000, -214, 2426, -1000, -1000, 3514, 2425, 2319, 44270, -1000,
	-1000, 1219, 1219, -212, -1000, -1000, 1195, -1000, -1000, 1124,
	708, -1000, 2590, 2427, -1000, 2395, 137, -1000, 137, -1000,
	245, 9788, -1000, 2423, -1000, -1000, -1000, 2406, -1000, -1000,
	2282, -1000, 2588, -1000, 2404, -1000, -1000, 44270, 875, 1036,
	-318, 2403, 2071, 2071, 44270, 48073, -131, -122, 15356, -131,
	-1000, -1000, 390, -1000, -1000, 408, -1000, -1000, 2064, 640,
	-1000, -1000, -1000, -1000, 1782, 2003, 2348, 30125, 23975, 24590,
	2399, -1000, -1000, 31970, 2359, 2359, 48140, 350, 48592, -1000,
	2851, 1093, 1719, -1000, 2117, -1000, 2116, -1000, 3532, 1309,
	152, -1000, -1000, 1659, -346, -1000, 1093, 2802, 3510, -1000,
	2833, 44270, 2662, 44270, 2839, 1767, 11639, -1000, 778, 3191,
	-1000, -1000, 47306, -1000, -1000, 1999, 11639, -1000, -1000, 2398,
	24590, 1009, 1760, 1755, 948, 2835, -1000, 655, 3549, -1000,
	-1000, -1000, 963, 2831, -1000, 1974, 1951, -1000, 44270, -1000,
	30125, 30125, 759, 759, 30125, 30125, 2829, 807, -1000, -1000,
	11639, -1000, -1000, 1707, -1000, -1000, -1000, 1707, 1608, -1000,
	-1000, -1000, -1000, -1000, -1000, 2084, -1000, -1000, -1000, 3495,
	-1000, -1000, 2018, 44270, 2018, 31355, -1000, 3509, 3508, -1000,
	2018, 1168, -1000, -301, 44270, 44270, -220, 2112, -1000, 2397,
	204, -1000, -1000, 1180, -214, -223, 129, 23975, 1749, -1000,
	-1000, -1000, -1000, -1000, 2583, -1000, 610, -1000, -1000, -1000,
	1168, 2460, 2400, -1000, -1000, -1000, -1000, 417, 44270, 2334,
	-1000, 2394, 2381, 611, -111, -1000, -1000, 448, -1000, -1000,
	-1000, 596, 2294, -1000, -1000, 396, -1000, -1000, 2379, -1000,
	-1000, 136, -1000, 1748, 1461, -1000, 2828, 9788, -1000, -1000,
	-1000, -1000, -1000, -1000, 774, -1000, 431, 48463, -1000, 1116,
	-1000, 1124, 774, 28895, 667, 322, -1000, 2111, -1000, -1000,
	3555, -1000, -1000, 656, -1000, 571, -1000, 1460, -1000, 1450,
	30740, 2109, 1840, -1000, 48425, 900, -1000, -1000, 2964, -1000,
	-1000, -1000, -1000, -1000, -1000, 2377, 2370, -1000, -1000, -1000,
	-1000, -1000, 2107, 2827, 86, 3442, 2368, -1000, -1000, 2825,
	1439, 1423, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1401, 1396, 30125, -1000, -1000, 2964, 2073, 23975, 1707,
	-1000, -1000, 1390, 1385, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2824, -1000, -1000, 3507, -220, -227, 2366, 170, 191,
	-1000, 2355, -1000, -1000, 923, -207, 155, 153, 151, -1000,
	-1000, -1000, 9788, -1000, -1000, 44270, 868, 124, -1000, 1710,
	-1000, -1000, 2071, 44270, 647, -1000, -1000, -1000, -1000, 232,
	-1000, -1000, -1000, -1000, -1000, 2348, 2341, -1000, 30125, 3373,
	2210, 553, 3506, -1000, 48592, -1000, 1707, -1000, 553, 1369,
	-1000, 1707, 1707, -1000, 517, -1000, 1716, -1000, 2066, -1000,
	3495, -1000, 514, -1000, 556, -1000, -1000, -1000, 1368, -1000,
	-1000, -1000, 48425, 564, -1000, 769, 2821, -1000, -1000, 2393,
	9788, 2819, 1707, 2297, -105, 30125, 3156, 3153, 3070, 2429,
	1362, -1000, -1000, 23975, -1000, -1000, 29510, 44270, 2319, -1000,
	-1000, 2338, -1000, 845, 184, 191, -1000, 3504, 194, 3502,
	3501, 1164, 1934, -1000, 157, 149, 145, -1000, -1000, -1000,
	-1000, -1000, 405, -1000, 2334, 2333, 2331, 581, -1000, 321,
	-1000, -1000, -1000, 308, -1000, -1000, 3373, -1000, 3499, 609,
	-1000, 23975, -1000, -1000, 28895, 2359, 2359, -1000, -1000, 2065,
	-1000, -1000, -1000, -1000, 2055, -1000, -1000, -1000, 1351, -1000,
	44270, 970, 6696, -1000, 2083, -1000, 44270, -1000, 2967, -1000,
	289, 1315, 308, 759, 308, 759, 308, 759, 308, 759,
	314, -1000, -1000, -1000, 1290, -1000, -1000, -1000, 2816, 2028,
	195, 179, 3498, -1000, 2319, 3497, 2319, 2319, -1000, 164,
	923, -1000, -1000, -1000, 44270, -1000, -1000, -1000, 2330, -1000,
	-1000, -1000, -1000, 1707, 1707, 2329, 2325, 476, -1000, -1000,
	-1000, 28280, 567, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	564, 48592, -1000, 6696, 1236, -1000, 2018, -1000, 807, -1000,
	-1000, 2840, 2826, 3536, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 44270, 3436, 23360, 176, -1000, -1000,
	-1000, 2324, -1000, 2319, -1000, -1000, 1706, -1000, -1000, -269,
	2025, 2014, -1000, -1000, 44270, -1000, 44270, 562, -1000, 48592,
	1227, -1000, 6696, -1000, -1000, 3547, -1000, 3545, 989, 989,
	308, 308, 308, 308, -1000, -1000, 44270, -1000, 1187, -1000,
	-1000, -1000, 1513, -1000, -1000, -1000, -1000, 2301, -1000, -1000,
	2300, -1000, -1000, -1000, 1172, 2802, -1000, -1000, -1000, -1000,
	-1000, 2081, 671, -1000, 1162, -1000, 1701, -1000, 27665, 44270,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 44270, 6079, -1000,
	1489, -1000, -1000, 2018, 44270, -1000,
}

var yyPgo = [...]int{
	0, 177, 3575, 262, 192, 4116, 106, 272, 244, 241,
	271, 4115, 4114, 4113, 4112, 3299, 3293, 4111, 4110, 4109,
	4108, 4107, 4106, 4105, 4104, 4103, 4102, 4101, 4100, 4099,
	4097, 4096, 4095, 4094, 4093, 4092, 4091, 4090, 4089, 4088,
	4087, 4086, 4085, 4084, 4083, 4082, 4081, 267, 4080, 4079,
	4078, 4077, 4076, 4075, 4074, 4073, 4072, 4071, 4070, 4069,
	4068, 4067, 4066, 4065, 4059, 4058, 4057, 4056, 4055, 4054,
	4053, 4038, 4036, 4028, 4022, 4014, 4013, 4012, 4010, 251,
	4009, 4008, 238, 4007, 3292, 4006, 4005, 4004, 4003, 4002,
	4001, 4000, 259, 3998, 3997, 3996, 3994, 3993, 3992, 3991,
	3990, 3989, 3984, 3983, 254, 3982, 3981, 3980, 3979, 230,
	3978, 252, 3969, 190, 183, 3968, 3967, 3966, 3951, 3949,
	3941, 3935, 3927, 3926, 3925, 3924, 3922, 3921, 247, 202,
	77, 3920, 51, 3919, 3918, 219, 3914, 153, 3913, 155,
	3912, 3911, 3907, 3906, 3905, 3904, 3901, 3898, 3897, 3896,
	3895, 3894, 3893, 3892, 3890, 3889, 3888, 3887, 3886, 3885,
	3884, 3883, 99, 3882, 270, 3881, 78, 3880, 184, 142,
	3879, 119, 161, 274, 172, 269, 263, 196, 179, 98,
	3878, 336, 3877, 163, 242, 164, 31, 3876, 146, 3875,
	277, 49, 43, 257, 152, 58, 194, 133, 3874, 223,
	114, 113, 3872, 3871, 151, 3866, 261, 186, 3865, 111,
	3864, 3863, 3862, 3860, 3856, 208, 203, 3855, 3854, 131,
	3853, 3852, 76, 134, 3851, 80, 129, 171, 124, 3850,
	2142, 139, 138, 125, 97, 3848, 135, 3846, 3844, 3843,
	3842, 199, 3841, 3840, 144, 70, 3839, 3838, 3837, 73,
	3836, 82, 3829, 32, 3826, 66, 3823, 3819, 3817, 3816,
	3814, 3813, 3811, 3810, 3808, 3807, 3806, 3805, 55, 3804,
	3803, 9, 11, 16, 3802, 26, 3801, 174, 3800, 3799,
	3798, 3797, 3796, 92, 89, 3794, 91, 170, 3793, 7,
	30, 79, 3790, 3789, 232, 136, 105, 166, 3784, 284,
	3781, 3779, 3773, 167, 3771, 640, 3770, 3769, 3768, 3767,
	3766, 3765, 23, 3764, 1, 217, 44, 3763, 140, 141,
	3762, 41, 33, 3761, 52, 120, 227, 147, 96, 3760,
	3759, 3758, 132, 205, 108, 38, 0, 3757, 243, 160,
	3756, 3751, 3748, 268, 3746, 255, 231, 176, 122, 279,
	250, 3743, 3742, 65, 130, 3741, 165, 36, 60, 143,
	189, 20, 224, 3740, 14, 8, 204, 3736, 215, 3735,
	318, 17, 351, 156, 3734, 3733, 35, 278, 3732, 3730,
	3729, 137, 3727, 3726, 367, 64, 3725, 3724, 3723, 3722,
	47, 3721, 42, 13, 3720, 109, 3719, 260, 3718, 323,
	145, 182, 195, 162, 236, 246, 84, 83, 3717, 1822,
	159, 104, 22, 3716, 239, 3713, 188, 126, 3711, 95,
	3709, 264, 273, 210, 3708, 198, 12, 53, 40, 29,
	50, 10, 107, 225, 3707, 3706, 24, 56, 3705, 57,
	3704, 19, 3701, 3700, 46, 3699, 71, 5, 3698, 3697,
	18, 21, 3695, 37, 228, 175, 127, 93, 74, 3694,
	3693, 54, 154, 3692, 158, 181, 180, 3691, 81, 3690,
	3689, 3688, 3686, 886, 3685, 265, 3683, 3681, 3678, 3677,
	3676, 3675, 3669, 3666, 229, 3663, 103, 48, 3662, 3661,
	3660, 3658, 102, 150, 3657, 3655, 3654, 3653, 34, 148,
	3652, 15, 3648, 27, 25, 39, 3646, 101, 3645, 3,
	207, 3640, 3638, 4, 3637, 3635, 2, 3634, 3633, 123,
	3631, 94, 28, 169, 112, 3630, 3629, 88, 218, 149,
	3628, 3627, 100, 258, 212, 3626, 86, 249, 276, 3625,
	216, 3624, 3623, 3621, 3620, 3619, 3618, 1170, 3617, 3616,
	245, 75, 90, 3615, 235, 116, 3614, 3613, 87, 168,
	121, 117, 63, 85, 3612, 115, 206, 3611, 201, 3608,
	248, 3607, 3606, 110, 3605, 3604, 3603, 3602, 197, 3601,
	3600, 200, 253, 3599, 3598, 282, 3592, 3590, 3589, 3588,
	3585, 3584, 3580, 3579, 3578, 3577, 266, 256, 3568,
}

//line mysql_sql.y:12345
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 591, 594, 594, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 119, 119,
	327, 327, 328, 328, 121, 323, 323, 322, 322, 122,
	123, 124, 570, 570, 125, 126, 155, 569, 569, 157,
	157, 157, 157, 157, 444, 120, 120, 120, 120, 120,
	120, 120, 118, 576, 576, 576, 577, 577, 115, 144,
	143, 146, 146, 145, 145, 142, 142, 138, 141, 141,
	140, 140, 139, 134, 136, 136, 135, 137, 137, 116,
	104, 117, 518, 518, 517, 517, 516, 516, 469, 469,
	470, 470, 314, 314, 314, 515, 515, 515, 514, 514,
	513, 513, 512, 512, 510, 510, 511, 509, 508, 508,
	508, 506, 506, 506, 502, 502, 504, 503, 503, 505,
	497, 497, 500, 500, 498, 498, 498, 498, 501, 496,
	496, 496, 495, 495, 103, 103, 103, 411, 411, 102,
	102, 425, 425, 425, 425, 425, 423, 423, 423, 423,
	423, 423, 422, 422, 421, 421, 426, 426, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 424, 424, 424, 424, 93,
	93, 93, 93, 93, 98, 98, 98, 582, 582, 581,
	581, 583, 583, 583, 583, 584, 584, 96, 96, 96,
	97, 420, 420, 420, 94, 95, 95, 410, 410, 415,
	415, 414, 414, 414, 414, 414, 414, 414, 414, 414,
	414, 414, 414, 414, 419, 419, 419, 417, 417, 416,
	416, 418, 418, 87, 87, 87, 90, 89, 409, 409,
	409, 409, 409, 409, 409, 409, 409, 88, 88, 88,
	88, 88, 88, 83, 83, 83, 83, 83, 82, 82,
	84, 84, 407, 407, 406, 99, 99, 100, 579, 579,
	578, 580, 580, 580, 580, 101, 107, 107, 107, 107,
	107, 107, 107, 107, 106, 106, 109, 109, 108, 110,
	92, 92, 92, 92, 92, 92, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 543,
	543, 543, 545, 545, 341, 342, 595, 344, 340, 340,
	340, 539, 539, 540, 541, 542, 542, 542, 105, 14,
	205, 205, 443, 443, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 13, 81, 86, 86, 276, 276, 281,
	281, 160, 282, 282, 282, 287, 287, 288, 288, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 263, 263, 263, 258, 258, 258, 258, 259, 259,
	260, 260, 261, 261, 261, 261, 262, 262, 333, 333,
	283, 283, 283, 285, 285, 284, 280, 278, 278, 278,
	278, 278, 278, 278, 279, 279, 279, 279, 286, 286,
	79, 85, 85, 85, 85, 557, 557, 80, 568, 568,
	473, 473, 356, 356, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	478, 479, 351, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 54, 57, 58,
	159, 53, 53, 53, 396, 396, 52, 596, 596, 326,
	326, 67, 66, 56, 68, 69, 70, 71, 72, 73,
	51, 65, 65, 65, 65, 65, 65, 65, 65, 76,
	491, 491, 598, 598, 598, 74, 75, 472, 472, 472,
	64, 63, 62, 61, 60, 60, 50, 50, 49, 49,
	55, 150, 59, 151, 151, 348, 348, 348, 350, 350,
	346, 354, 354, 597, 597, 439, 439, 349, 349, 48,
	48, 48, 48, 77, 347, 347, 325, 345, 345, 345,
	12, 12, 10, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	26, 27, 29, 404, 404, 401, 28, 20, 19, 19,
	23, 22, 18, 18, 21, 24, 25, 25, 9, 9,
	9, 9, 15, 15, 16, 178, 178, 231, 231, 551,
	551, 547, 547, 548, 548, 548, 549, 549, 550, 550,
	111, 485, 485, 485, 485, 485, 485, 8, 8, 200,
	200, 484, 484, 484, 484, 484, 484, 408, 408, 408,
	528, 528, 528, 529, 199, 199, 194, 194, 486, 486,
	373, 530, 530, 494, 494, 493, 493, 492, 492, 197,
	197, 198, 198, 181, 181, 129, 129, 499, 499, 499,
	499, 507, 507, 468, 468, 268, 268, 316, 316, 317,
	317, 171, 171, 172, 172, 172, 172, 172, 172, 585,
	585, 586, 587, 588, 588, 589, 589, 589, 590, 590,
	590, 590, 590, 536, 536, 538, 538, 537, 196, 196,
	192, 192, 193, 193, 193, 191, 191, 190, 189, 189,
	188, 186, 186, 186, 187, 187, 187, 204, 204, 174,
	174, 174, 173, 173, 173, 173, 173, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 175,
	175, 544, 544, 544, 474, 474, 474, 481, 481, 296,
	296, 297, 297, 295, 295, 176, 176, 177, 177, 177,
	177, 294, 294, 293, 179, 179, 185, 184, 184, 180,
	180, 180, 180, 304, 304, 303, 303, 303, 303, 114,
	127, 127, 128, 203, 203, 302, 301, 301, 301, 301,
	202, 202, 201, 201, 195, 195, 183, 183, 183, 183,
	300, 182, 298, 575, 575, 574, 574, 573, 571, 571,
	571, 572, 572, 572, 572, 520, 520, 520, 520, 520,
	334, 334, 334, 339, 339, 337, 337, 337, 337, 337,
	343, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 39, 214, 215, 40, 216, 216, 217,
	217, 218, 218, 219, 220, 221, 221, 221, 221, 38,
	206, 206, 207, 207, 208, 208, 209, 210, 210, 210,
	213, 211, 212, 212, 593, 593, 592, 37, 37, 30,
	163, 163, 164, 164, 164, 166, 166, 264, 264, 264,
	165, 165, 167, 167, 167, 552, 554, 554, 556, 555,
	555, 555, 558, 558, 558, 558, 558, 559, 559, 559,
	559, 560, 560, 31, 147, 147, 152, 563, 563, 563,
	562, 562, 564, 564, 565, 565, 320, 320, 321, 321,
	161, 162, 162, 154, 149, 169, 169, 169, 169, 169,
	170, 170, 148, 153, 156, 158, 553, 561, 561, 561,
	405, 405, 402, 403, 403, 400, 399, 399, 399, 567,
	567, 566, 566, 566, 335, 335, 32, 395, 395, 397,
	398, 398, 398, 389, 389, 389, 389, 36, 393, 393,
	394, 394, 394, 394, 394, 394, 394, 390, 390, 392,
	392, 388, 388, 388, 388, 388, 388, 388, 35, 168,
	168, 387, 387, 384, 384, 382, 382, 383, 383, 381,
	381, 381, 385, 385, 43, 78, 44, 45, 46, 42,
	386, 386, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 131, 130, 130, 130, 130, 130, 133, 133,
	319, 319, 318, 318, 132, 265, 265, 41, 243, 243,
	460, 460, 455, 455, 455, 455, 455, 476, 476, 476,
	456, 456, 456, 457, 457, 457, 459, 459, 459, 458,
	458, 458, 458, 458, 475, 475, 477, 477, 477, 427,
	427, 428, 428, 428, 431, 431, 447, 447, 448, 448,
	446, 446, 453, 453, 452, 452, 451, 451, 450, 450,
	449, 449, 449, 449, 442, 442, 441, 441, 429, 429,
	429, 429, 429, 430, 430, 430, 440, 440, 445, 445,
	292, 292, 291, 291, 251, 251, 252, 252, 290, 290,
	249, 249, 250, 250, 250, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	526, 526, 527, 254, 254, 266, 266, 266, 266, 266,
	266, 253, 253, 255, 255, 232, 232, 230, 230, 222,
	222, 222, 222, 222, 222, 223, 223, 224, 224, 225,
	225, 225, 229, 229, 228, 228, 228, 228, 226, 226,
	227, 227, 227, 227, 227, 227, 413, 413, 523, 523,
	524, 524, 519, 519, 519, 522, 522, 522, 522, 522,
	522, 522, 525, 525, 525, 521, 521, 233, 313, 313,
	313, 336, 336, 336, 336, 338, 312, 312, 312, 248,
	248, 247, 247, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 245, 245,
	245, 245, 245, 245, 245, 412, 412, 352, 352, 353,
	353, 275, 274, 274, 274, 274, 274, 272, 273, 271,
	271, 271, 271, 271, 270, 270, 269, 269, 269, 391,
	391, 267, 267, 257, 257, 257, 256, 256, 256, 454,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 310,
	310, 310, 311, 311, 311, 311, 311, 311, 311, 311,
	363, 363, 369, 369, 535, 535, 534, 234, 234, 234,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 244,
	244, 244, 436, 436, 436, 436, 437, 437, 437, 437,
	438, 438, 438, 434, 434, 435, 435, 374, 375, 375,
	482, 482, 483, 483, 432, 432, 433, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 490,
	490, 490, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 546, 546,
	546, 531, 531, 531, 532, 532, 532, 532, 532, 532,
	532, 532, 532, 532, 532, 532, 533, 533, 533, 533,
	533, 533, 533, 533, 533, 533, 533, 533, 533, 533,
	533, 533, 533, 308, 308, 308, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 376, 376, 377, 377, 487, 487,
	487, 487, 487, 487, 488, 488, 489, 489, 489, 489,
	480, 480, 480, 480, 480, 480, 480, 480, 480, 480,
	480, 480, 480, 480, 480, 480, 480, 480, 480, 480,
	480, 480, 480, 480, 480, 480, 480, 480, 480, 361,
	305, 305, 305, 378, 370, 370, 371, 371, 372, 372,
	364, 364, 364, 364, 364, 364, 365, 365, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 359,
	359, 359, 359, 359, 359, 359, 359, 359, 359, 359,
	366, 366, 368, 368, 380, 380, 380, 379, 379, 379,
	379, 379, 379, 379, 246, 246, 246, 246, 358, 358,
	358, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 236, 236, 236, 236, 240, 240, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 241, 241, 241, 241, 241, 239, 239,
	239, 239, 239, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 112, 113, 113, 238, 315, 315, 461, 461, 464,
	464, 462, 462, 463, 465, 465, 465, 466, 466, 466,
	467, 467, 467, 471, 471, 324, 324, 324, 332, 332,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329, 329, 329, 329, 329,
	329, 329, 329, 329, 329, 329,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 8, 8,
	0, 2, 0, 2, 11, 1, 3, 0, 3, 4,
	4, 4, 1, 2, 5, 6, 6, 1, 2, 7,
	9, 10, 10, 12, 1, 5, 6, 8, 10, 9,
	11, 13, 4, 0, 1, 1, 0, 1, 5, 2,
	2, 6, 9, 6, 9, 4, 7, 8, 0, 1,
	1, 2, 4, 6, 1, 2, 4, 0, 2, 10,
	11, 2, 0, 2, 1, 3, 3, 3, 0, 2,
	0, 2, 1, 3, 5, 0, 2, 3, 1, 3,
	1, 1, 1, 3, 1, 1, 1, 1, 0, 3,
	3, 0, 3, 3, 0, 1, 3, 0, 1, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 8, 5, 7, 0, 3, 8,
	5, 1, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 4, 1, 3, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 1, 3, 3,
	1, 2, 2, 2, 1, 2, 2, 3, 4, 4,
	6, 1, 1, 1, 2, 4, 6, 1, 4, 1,
	3, 3, 4, 4, 4, 4, 3, 3, 2, 4,
	4, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 2, 2, 0, 1,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 3, 4, 4, 1, 2,
	9, 7, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 2, 4, 3, 3,
	1, 1, 1, 1, 1, 1, 2, 3, 4, 7,
	2, 3, 3, 4, 5, 3, 4, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 1, 1, 1, 1, 6, 4,
	1, 1, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 10, 7, 4, 4, 1, 3, 1,
	6, 7, 3, 3, 3, 1, 1, 1, 3, 2,
	4, 5, 5, 6, 5, 5, 3, 2, 2, 1,
	3, 4, 3, 7, 5, 8, 2, 2, 1, 3,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 2, 1, 3, 2, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 6, 3, 3, 1, 1,
	7, 7, 7, 8, 8, 0, 4, 7, 0, 3,
	0, 2, 0, 1, 1, 1, 1, 4, 2, 2,
	3, 3, 4, 5, 3, 4, 4, 2, 2, 2,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 3,
	3, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 7, 7, 5, 4, 7, 8,
	3, 3, 2, 3, 4, 0, 2, 2, 0, 2,
	2, 0, 5, 1, 1, 1, 1, 0, 1, 5,
	5, 5, 4, 3, 1, 3, 1, 1, 3, 5,
	2, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 4, 1, 3, 1, 4, 6, 6, 4,
	4, 4, 4, 4, 3, 6, 3, 5, 1, 1,
	2, 2, 11, 8, 9, 1, 3, 2, 4, 0,
	2, 0, 1, 1, 1, 1, 0, 1, 0, 1,
	4, 2, 1, 5, 4, 4, 2, 5, 5, 1,
	3, 2, 1, 5, 4, 4, 2, 0, 5, 4,
	0, 1, 3, 3, 1, 3, 1, 3, 1, 3,
	4, 0, 1, 0, 1, 1, 3, 1, 1, 0,
	4, 1, 3, 2, 1, 0, 8, 0, 4, 7,
	4, 0, 2, 0, 2, 0, 2, 0, 4, 1,
	3, 1, 1, 6, 4, 5, 7, 4, 5, 0,
	1, 3, 8, 0, 6, 0, 4, 6, 1, 1,
	1, 1, 1, 2, 3, 1, 3, 6, 0, 3,
	0, 1, 2, 4, 4, 0, 1, 3, 1, 3,
	3, 0, 1, 1, 0, 2, 2, 0, 2, 3,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 7,
	7, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 2, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 3, 1, 1, 1, 4,
	4, 4, 3, 2, 2, 2, 3, 2, 3, 4,
	1, 3, 4, 0, 2, 1, 1, 2, 2, 2,
	0, 1, 2, 4, 1, 3, 1, 3, 2, 3,
	1, 4, 3, 0, 1, 1, 2, 5, 2, 2,
	2, 0, 2, 3, 3, 0, 1, 3, 1, 3,
	0, 1, 2, 1, 1, 0, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 1, 7, 1, 3, 0,
	1, 1, 3, 1, 3, 0, 1, 1, 1, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 0, 1, 1,
	1, 0, 2, 7, 8, 8, 8, 0, 3, 3,
	0, 3, 0, 3, 0, 5, 1, 3, 0, 3,
	3, 0, 2, 9, 7, 0, 2, 2, 3, 3,
	0, 2, 4, 4, 4, 4, 1, 0, 2, 2,
	1, 3, 2, 1, 3, 2, 1, 3, 2, 0,
	1, 3, 4, 3, 1, 1, 4, 1, 3, 1,
	1, 1, 1, 0, 1, 1, 1, 11, 0, 2,
	3, 3, 2, 2, 3, 1, 1, 1, 3, 3,
	4, 0, 2, 2, 2, 2, 2, 2, 6, 0,
	4, 1, 1, 0, 3, 0, 1, 1, 2, 4,
	4, 4, 0, 1, 8, 2, 4, 4, 4, 9,
	0, 2, 11, 9, 11, 8, 6, 9, 7, 10,
	7, 6, 2, 2, 9, 4, 5, 3, 0, 4,
	1, 3, 0, 3, 6, 0, 2, 10, 0, 2,
	0, 2, 0, 3, 2, 4, 3, 0, 2, 1,
	0, 2, 3, 0, 2, 3, 0, 2, 1, 0,
	3, 2, 4, 3, 0, 1, 0, 1, 1, 0,
	6, 0, 3, 5, 0, 4, 0, 3, 1, 3,
	4, 5, 0, 3, 1, 3, 2, 3, 1, 2,
	0, 4, 6, 5, 0, 2, 0, 2, 4, 5,
	4, 5, 1, 5, 6, 5, 0, 3, 0, 1,
	1, 3, 3, 3, 0, 4, 1, 3, 3, 3,
	0, 1, 1, 3, 2, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 5, 4,
	1, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 4, 0,
	2, 5, 5, 5, 5, 0, 1, 1, 3, 1,
	1, 1, 1, 1, 7, 9, 7, 9, 2, 1,
	7, 9, 7, 9, 8, 5, 0, 1, 0, 1,
	1, 1, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 3, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 2, 1, 2, 2, 1, 1, 2, 2,
	2, 3, 3, 2, 2, 1, 5, 6, 4, 1,
	1, 1, 5, 4, 1, 1, 2, 0, 1, 1,
	2, 5, 0, 1, 1, 2, 2, 3, 3, 1,
	1, 2, 2, 2, 0, 1, 2, 2, 2, 0,
	3, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 3, 5, 2, 2,
	2, 2, 4, 1, 1, 2, 5, 6, 8, 6,
	6, 6, 1, 1, 1, 1, 1, 1, 3, 4,
	4, 4, 7, 9, 7, 7, 7, 9, 7, 7,
	0, 2, 0, 1, 1, 2, 4, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 5, 0, 1, 3, 0, 1,
	0, 2, 0, 2, 0, 1, 6, 8, 8, 6,
	6, 5, 5, 5, 6, 6, 6, 6, 5, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 1,
	1, 1, 4, 4, 6, 8, 6, 4, 5, 4,
	4, 4, 3, 4, 6, 6, 7, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 8, 4, 2, 3, 2,
	4, 2, 2, 4, 6, 2, 2, 4, 6, 4,
	2, 4, 4, 4, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 3, 0, 1, 1, 3, 1, 3,
	3, 3, 3, 3, 2, 1, 1, 1, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 1, 3,
	4, 4, 5, 4, 5, 3, 4, 5, 6, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 2, 3, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 2,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 4,
	1, 2, 3, 5, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -591, -594, -2, -5, 623, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -171, -118, -119,
	-120, -123, -125, -126, 613, -88, -89, -90, -33, -32,
	-31, -30, -147, -152, -155, -157, -121, 546, 619, 449,
	14, 498, -15, -16, -536, -17, 260, -340, -341, -342,
	-344, -595, -48, -49, -50, -60, -61, -62, -63, -64,
	-74, -75, -76, -51, -52, -53, -56, -54, -67, -66,
	-68, -69, -70, -71, -72, -73, -55, -59, -150, -151,
	-77, -57, -78, -58, -159, -122, -80, -79, -85, -81,
	-86, -149, -154, -13, -160, 235, -84, 76, -94, -95,
	-96, -97, -98, -100, -101, 373, 379, 436, 612, 61,
	-172, -174, 632, 633, 636, 533, 536, 160, 161, 163,
	164, -34, -35, -36, -37, -38, -39, -41, -40, -42,
	-43, -44, -45, -46, 231, 16, 541, -18, -21, -19,
	-22, -20, -28, -29, -27, -24, -26, -148, -25, -153,
	-23, -156, -158, -124, 255, 254, 38, 321, 322, 323,
	377, 253, 232, 15, 31, 42, 352, -173, 83, 534,
	233, -175, 13, 638, -6, -3, -2, -134, -138, -142,
	-145, -146, -143, -144, -4, -113, 118, 245, 614, -336,
	369, 615, 617, 616, 86, 94, -329, -331, 449, 260,
	373, 379, 612, 633, 636, 533, 536, 548, 549, 550,
	551, 552, 553, 554, 555, 557, 558, 559, 560, 561,
	562, 563, 573, 574, 564, 565, 566, 567, 568, 569,
	570, 571, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 501, 598, 599, 600,
	601, 529, 556, 592, 593, 594, 595, 350, 351, 538,
	272, 296, 404, 302, 309, 160, 179, 173, 201, 193,
	534, 168, 276, 314, 277, 93, 163, 484, 108, 461,
	433, 166, 291, 293, 295, 530, 531, 363, 298, 528,
	297, 299, 301, 532, 278, 353, 189, 184, 290, 274,
	182, 279, 40, 280, 206, 281, 282, 543, 457, 349,
	463, 306, 52, 431, 183, 458, 294, 460, 210, 214,
	475, 476, 177, 178, 465, 478, 205, 208, 209, 252,
	346, 347, 43, 540, 264, 479, 212, 204, 200, 487,
	310, 308, 203, 176, 199, 275, 65, 216, 215, 217,
	427, 428, 429, 430, 283, 284, 367, 474, 196, 185,
	354, 169, 23, 482, 259, 462, 380, 285, 303, 311,
	211, 213, 266, 271, 542, 435, 270, 307, 480, 181,
	263, 292, 258, 483, 170, 382, 286, 164, 300, 477,
	486, 64, 395, 175, 167, 630, 249, 161, 268, 273,
	287, 288, 289, 527, 313, 312, 304, 535, 197, 265,
	202, 187, 174, 198, 162, 267, 485, 396, 610, 352,
	414, 195, 192, 269, 242, 481, 464, 165, 418, 397,
	190, 315, 605, 606, 607, 368, 345, 316, 317, 188,
	256, 455, 456, 320, 424, 336, 398, 434, 405, 399,
	223, 224, 324, 467, 469, 207, 608, 325, 326, 327,
	459, 328, 329, 330, 331, 372, 56, 58, 95, 98,
	97, 634, 635, 63, 29, 358, 361, 393, 400, 338,
	611, 539, 335, 339, 340, 362, 25, 416, 384, 420,
	419, 48, 49, 50, 53, 54, 55, 57, 59, 60,
	51, 526, 377, 390, 488, 45, 47, 387, 27, 364,
	415, 437, 334, 417, 448, 46, 446, 447, 468, 26,
	366, 365, 62, 44, 423, 425, 426, 318, 332, 375,
	620, 489, 370, 386, 389, 371, 337, 360, 391, 67,
	66, 383, 621, 378, 376, 333, 544, 545, 341, 572,
	355, 432, 523, 522, 521, 520, 519, 518, 517, 516,
	321, 322, 323, 401, 402, 403, 413, 406, 407, 408,
	409, 410, 411, 412, 451, 452, 622, 470, 472, 473,
	471, 237, 637, 356, 357, 240, 624, 625, 96, 626,
	628, 627, 28, 629, -418, -416, -336, 534, 612, 379,
	533, 536, 373, 352, 633, 636, 377, 260, 321, 322,
	323, 449, 350, -216, -336, 637, -181, 244, 39, -230,
	-336, -181, -84, -16, -15, -173, -174, -230, 239, -345,
	24, 431, -92, 432, 235, 83, 77, -336, -9, -104,
	-8, -111, -82, -171, 436, -343, -336, 321, 321, -343,
	239, -338, 270, 412, -336, -473, 245, -422, -395, 271,
	-421, -397, -424, -398, 32, 231, 233, 232, 546, 267,
	16, 377, 241, 14, 13, 378, 253, 25, 26, 28,
	15, 379, 381, 29, 382, 385, 386, 387, 42, 390,
	391, 260, 86, 94, 89, 278, -215, -336, -372, -364,
	115, -367, -359, -360, -362, -314, -510, -357, 83, 142,
	143, 150, 116, 639, -361, -454, 36, 118, 552, 556,
	592, 499, -306, -307, -308, -309, -310, -311, -336, -511,
	-509, 89, 99, 101, 105, 106, 104, 102, 154, 186,
	103, 90, 155, -174, 86, -531, 562, -330, 585, 598,
	599, 600, 601, 584, 61, -480, -489, 238, -487, 153,
	191, 256, 187, 14, 148, 424, 188, 593, 594, 595,
	559, 581, 501, 563, 573, 588, 554, 555, 557, 549,
	550, 551, 553, 564, 566, 580, -490, 576, 586, 587,
	572, 596, 597, 589, 590, 591, 628, 88, 87, 579,
	578, 565, 560, 561, 567, 548, 558, 568, 569, 577,
	582, 583, 361, 108, 362, 363, 491, 353, 364, 245,
	431, 70, 365, 366, 367, 368, 369, 498, 370, 71,
	371, 360, 260, 414, 372, 190, 207, 503, 502, 504,
	495, 492, 490, 493, 494, 496, 497, 570, 571, 575,
	-127, -128, 603, -585, -299, -586, 6, 7, 8, 9,
	-587, 155, -576, 433, 542, 89, 314, 350, 631, 532,
	631, 532, 165, 162, -409, 165, 114, 170, 169, -409,
	631, 167, 630, 324, 266, -386, -163, 350, 414, 328,
	95, 270, -389, -387, 530, -475, 318, 314, 290, 240,
	111, -164, 250, 249, 109, 491, 238, 388, 309, 56,
	58, -547, -548, 228, 229, 230, -538, 524, -537, -336,
	631, 363, 97, 98, 630, 27, 239, 374, 266, 469,
	467, 468, 470, 471, 472, 473, -65, -491, -472, 464,
	463, -349, 456, 462, 454, 466, 457, 351, 330, 546,
	329, 231, 624, 531, 525, -324, 398, 434, 488, 489,
	375, 435, 475, 477, 458, 108, 194, 191, 240, 242,
	239, 630, 350, 491, 414, 95, 328, -547, 162, 475,
	477, 270, 412, 41, -415, 424, -414, -416, 476, 487,
	87, 88, 474, -324, 108, 455, 455, -585, -299, -172,
	-174, -114, -536, 532, 631, 240, 350, 414, 270, 241,
	239, 527, 530, 242, 491, 238, 321, 374, 266, 328,
	95, 167, 630, -474, -544, 32, -481, 225, 226, 227,
	33, 34, -1, 122, 638, -364, -364, -6, 641, -6,
	-364, -336, -336, 157, -236, -240, -237, -239, -238, -242,
	-241, 191, 192, 153, 195, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 208, 209, 206, 31, 207, 256,
	187, 188, 189, 190, 210, 173, 193, 539, 218, 174,
	219, 175, 220, 176, 221, 177, 178, 222, 179, 182,
	183, 184, 185, 181, 156, -205, 89, 32, 83, 156,
	89, -197, 262, -181, -230, -222, 156, 639, -197, -585,
	-190, -191, 11, -230, -312, -336, 433, 125, -92, 77,
	-92, 432, 77, -539, -540, -541, -543, 235, 432, 431,
	-109, 156, 278, 17, -343, -343, 81, -230, -397, 270,
	-422, -395, 36, 80, 157, 243, 157, 80, 83, 375,
	350, 414, 376, 491, 239, 388, 242, 270, 389, 350,
	414, 239, 242, 491, 270, 350, 239, 242, 414, 270,
	389, 350, 454, 455, 242, 27, 380, 383, 384, 455,
	-495, 487, 157, 114, 111, 112, 113, -364, 132, -379,
	125, 126, 127, 128, 129, 130, 131, 139, 138, 149,
	142, 143, 144, 145, 146, 147, 148, 140, 141, 135,
	115, 133, 137, 134, 117, 152, -174, -364, -372, 61,
	-362, -362, -362, -362, -336, -454, -369, -364, 83, 83,
	83, 83, 156, 102, 89, -364, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, -488, 83,
	83, -376, -377, 83, 83, -357, -312, 83, 89, 89,
	83, 83, 83, 89, 83, 83, 83, -377, -377, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, -191, 157, -190, 83, -190, -191,
	-175, -174, 32, 33, 32, 33, 32, 33, 32, 33,
	-588, 621, 83, 99, 634, 223, 17, -336, 89, 535,
	89, 535, 480, 541, 168, 169, 170, -384, 245, -384,
	-384, -214, -336, -216, 374, 242, 527, 242, -164, -384,
	-384, -384, -384, -384, 241, -384, 24, 239, 239, 239,
	239, -384, 498, 125, 125, 59, -549, 172, 157, -538,
	-196, 83, 89, -348, 133, 137, -348, -295, 18, -295,
	24, 268, 268, 268, -348, 308, -596, -597, 17, 135,
	-346, -597, -346, -346, -348, -598, 241, 465, 43, 269,
	268, -192, -193, 22, -192, 459, 455, -439, 460, 461,
	-350, -597, -349, -348, -348, -349, -348, -348, -348, 32,
	239, 242, 491, 328, 625, -596, -596, 31, 31, -473,
	-473, -230, -473, -473, 525, -325, -336, -473, -473, -473,
	-550, 244, -582, -581, 478, -584, 480, 162, -416, 162,
	-416, -397, 270, 270, 157, 125, 24, -417, 125, 136,
	-416, -416, -417, -417, -253, 41, -335, 153, -336, 89,
	-253, 41, -579, -578, -230, -191, -175, -174, 84, 84,
	84, 535, 89, -473, -473, -473, -473, -473, -475, -473,
	-473, -473, -473, -473, -343, -206, -336, -216, 245, -473,
	-473, -473, -473, -176, -177, 144, -364, -336, -176, -3,
	-136, -135, 119, 120, 122, 615, 369, 614, 618, 612,
	-416, 41, -467, 396, 395, -461, -463, 83, -462, 83,
	-462, -462, -462, -462, -462, 83, 83, -464, 83, -464,
	-464, -461, -465, 83, -465, -466, 83, -466, -465, -336,
	-443, 541, -370, -372, -336, 39, -484, 61, -171, 83,
	31, 83, -197, -336, 640, 188, 167, 629, -485, 61,
	-171, 83, 31, -191, -129, 39, -193, 21, 156, 99,
	89, -109, -92, 77, -109, 84, 157, -542, 105, 106,
	-545, 205, 197, -336, -107, 89, -7, -8, -9, -10,
	-47, -82, -79, -171, 232, 533, 536, -512, -510, 83,
	32, 423, 80, 17, -423, 239, 491, 374, 266, 242,
	350, -421, -404, -401, -399, -335, -397, -400, -399, -426,
	-312, 455, -130, 438, 437, 320, -364, -364, -364, -364,
	-364, 104, 115, 345, 105, 106, -359, -380, 32, 316,
	317, -360, -360, -360, -360, -360, -360, -360, -360, -360,
	-360, -360, -360, -368, -378, -454, 83, 135, 133, 137,
	134, 117, -362, -362, -360, -360, -255, -335, 153, 84,
	157, -364, -535, -534, 119, -364, -364, -364, -364, -336,
	-532, -533, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 514, 515, 365, 360, 366, 364, 353, 372, 367,
	368, 190, 522, 523, 516, 517, 518, 519, 520, 521,
	-370, -370, -364, -532, -370, -305, 33, 32, -372, -372,
	-372, 84, -364, -546, 343, 342, 344, -194, -336, -370,
	84, 84, 84, 99, -372, -372, -370, -360, -370, -370,
	-370, -370, -533, -305, -305, -305, -305, 144, -372, -372,
	-305, -305, -305, -305, 144, -305, -305, -305, -305, -305,
	-305, -305, -305, -305, -305, 84, 84, 84, 144, -372,
	-192, -128, -493, -492, -364, 41, -129, -193, -589, 622,
	83, -312, -577, 89, 89, 639, 167, 17, 491, -570,
	32, 535, 99, 535, 99, 481, 482, 166, 169, 168,
	89, 115, -336, -336, 35, 83, -206, -384, -384, -384,
	-554, -336, 90, -405, -402, -399, -336, -336, -395, -336,
	-325, -230, -384, -384, -384, -384, -230, -264, 53, 54,
	55, -399, -165, 56, 57, -550, -537, 35, -195, -336,
	-570, -295, -362, -362, -364, -399, 270, -596, -348, -348,
	-326, -325, -350, -345, -350, -350, -295, -346, -348, -348,
	-364, -350, -346, -295, -336, 455, -295, -295, -439, -348,
	-347, -336, -347, -384, -325, -326, -326, -230, -230, -276,
	-281, -277, -282, 262, 236, 358, 359, 234, 232, 11,
	233, -289, 309, -385, 499, -259, -260, 77, 42, -262,
	260, 400, 393, 272, 276, 93, 277, 433, 278, 241,
	280, 281, 282, 297, 299, 252, 283, 284, 285, 424,
	286, 161, 298, 287, 288, 289, 376, -254, 6, 331,
	41, 51, 52, 447, 446, 544, 541, 273, -336, -554,
	-552, 31, -336, 31, -405, -336, -336, -184, -179, -183,
	-180, -185, -298, -300, -182, 83, -230, -174, -336, 157,
	479, 481, 482, -582, -417, -582, -417, 32, 423, -420,
	423, 32, -395, -414, 475, 477, -410, 89, 424, -400,
	-419, 80, 153, -492, -417, -417, -419, -419, 152, 157,
	-580, 480, 481, 228, -192, 99, -570, -232, -230, -554,
	-404, -395, -336, -473, -232, -232, -232, -338, -338, 83,
	156, 36, -336, -336, -336, -336, -294, 157, -293, 17,
	-337, -336, 35, 89, 156, -294, -137, -135, 121, -364,
	-6, 614, -364, -6, -6, -364, -6, -364, -471, 397,
	99, 99, -315, 89, -315, 99, 99, 99, 547, 84,
	89, -408, 80, -486, -373, -530, 603, -199, 84, -194,
	-528, -529, -194, -198, -336, -484, -222, 125, 125, 125,
	-486, -199, 84, -528, -192, 604, -129, -189, -188, -364,
	-336, 24, -109, -92, -540, 156, 350, 157, -195, -423,
	-403, -400, -425, 144, -336, -411, 157, 541, 642, 87,
	243, -567, -566, 415, 84, 157, -496, 244, 498, 89,
	639, 431, 223, 224, 104, 345, 105, 106, -454, -372,
	-368, -362, -362, -360, -360, -366, 257, -366, 114, -364,
	640, -363, -534, 121, -364, 35, 157, 35, 157, 81,
	156, 84, 84, 17, 17, 84, -364, 84, 84, 84,
	84, 17, 17, -364, 84, 156, 84, 84, 84, 84,
	81, 84, 157, 84, 84, 84, 84, 157, -372, -372,
	-364, -372, 84, 84, 84, -364, -364, -364, -372, 84,
	-364, -364, -364, -364, -364, -364, -364, -364, -364, -364,
	-433, 450, -433, -433, 157, 157, 157, 84, -129, 83,
	99, 157, 635, -319, -318, 89, -336, 167, -336, 89,
	89, 167, 170, 170, 169, 89, 36, 24, 307, 24,
	-215, -217, -218, -219, -220, -221, 135, 158, 159, 83,
	-230, -230, -230, -556, 401, -568, 157, 41, -566, 491,
	239, -161, 320, -388, 81, -168, 17, 541, -230, -230,
	-230, -230, -243, 35, 17, -178, -231, -336, 83, 84,
	157, -396, 81, -336, -326, -295, -295, -350, -295, -295,
	157, 23, -348, -350, -350, -354, 639, -346, -354, 156,
	-354, -325, -460, 35, -196, 157, 21, 262, -229, -333,
	-226, -228, 247, -353, -227, 250, -524, 248, 246, 109,
	251, 305, 110, 241, -333, -333, 247, -263, 243, 35,
	-333, -279, 241, 348, 305, 248, 21, 262, -278, 241,
	110, -336, 247, 251, 248, 246, -332, 125, -324, 152,
	243, 43, 376, -332, 545, 262, -332, -332, -332, -332,
	-332, -332, -332, 279, 279, -332, -332, -332, -332, -332,
	-332, -332, -332, -332, -332, -332, 162, -332, -332, -332,
	-332, -332, -332, 83, 274, 275, 307, -557, 401, 31,
	356, 356, 357, -568, 31, -169, 350, 31, -301, -302,
	-303, -304, 68, 72, 74, 78, 69, 70, 71, 75,
	31, 157, -334, -339, 35, -336, 89, -334, -174, -179,
	-184, -334, 83, -581, -583, 483, 480, 486, -419, -419,
	243, 83, 125, -419, -419, 41, -335, -578, 487, 481,
	-129, 157, 80, -232, -207, -208, -209, -210, -236, -312,
	192, 195, 197, 198, 199, 200, 201, 202, 203, 204,
	205, 208, 209, 206, 207, 256, 187, 188, 189, 190,
	210, 173, 193, 539, 174, 175, 176, 177, 178, 179,
	182, 183, 184, 185, 181, -336, -216, -295, -177, -179,
	-336, 89, -336, 144, -295, 122, -6, 120, -141, -140,
	-139, 123, 612, 618, 122, 122, 122, 84, 84, 84,
	157, 84, 84, 84, 157, 84, 157, 99, -499, 460,
	40, 157, 83, 84, 157, 61, 157, 125, 84, 157,
	-364, -336, 89, -364, 84, 61, -129, 89, 157, -186,
	37, 38, 156, 433, -336, -510, 84, -425, 157, 243,
	156, 156, -401, 379, -335, -403, 21, 541, -312, 39,
	-319, 125, 639, -336, 84, -366, -366, 114, -362, -359,
	84, 122, -364, 120, -234, -236, 395, 396, -364, -234,
	-235, -241, 153, 191, 256, 190, 189, 187, 395, 396,
	-253, -336, -364, -364, 84, -364, -364, 17, -336, -253,
	-360, -364, -191, -191, 84, 84, -432, -433, -432, -432,
	84, 84, 84, 84, -432, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 83, 99, 101, 99, 101,
	-492, -590, 63, 620, 62, 423, 104, 310, 157, 99,
	89, 640, 157, 125, -336, 17, 239, 89, 170, 89,
	-569, 314, 350, -444, 99, 314, 350, 491, 387, 84,
	157, -312, -207, -196, 83, -196, -559, 462, 403, 413,
	-332, -356, -355, 352, 42, -478, 424, 409, 410, -402,
	270, -336, -336, -565, 96, 125, 80, 335, 339, 340,
	336, 337, 338, -382, -383, -381, -385, -552, 83, 83,
	-171, 35, 133, -168, 83, 83, 35, -455, 325, -236,
	-230, -178, -336, 17, 157, -551, 156, -1, -336, -395,
	-348, -295, -364, -364, -295, -348, -348, 167, -350, -336,
	-455, -236, 35, -277, 236, 233, -429, 307, 308, -430,
	-445, 310, -447, 83, -233, -312, -227, -523, -524, -384,
	-336, 110, -523, 110, 83, -233, -312, -312, -280, -347,
	-312, -336, -336, -336, -336, -285, -284, -312, -287, 32,
	-288, -336, -336, -336, -336, 110, -336, 110, -258, 41,
	48, 49, 50, -332, -332, 194, -261, 41, 423, 425,
	426, -287, 99, 99, 99, 99, 89, 89, 89, -332,
	-332, 99, 89, -339, 89, -525, 169, 45, 46, 99,
	99, 99, 99, 41, 89, -266, 41, 290, 294, 291,
	292, 293, 89, 99, 41, 99, 41, 99, 41, -336,
	83, -526, -527, 89, -444, -559, -332, 356, -416, 125,
	125, -356, -564, 320, -170, 491, 32, -200, 236, 233,
	-552, -407, -406, -312, -183, -183, -183, -183, 68, 68,
	68, 68, 73, 68, 73, 68, -303, -407, -185, -196,
	-339, 84, -575, -574, -573, -571, 76, 244, 77, -370,
	480, 484, 485, -403, -351, 89, -410, -204, 24, -230,
	-230, -477, 300, 301, 84, 157, -236, -297, 19, 156,
	-297, 118, -6, -137, -139, -364, -6, -364, 614, 369,
	615, 89, 99, 99, -507, 444, 439, 441, 110, -373,
	-494, -493, 61, -171, -194, -486, -529, -492, -336, 640,
	640, 640, 640, 61, -171, -486, -204, -499, -188, -187,
	44, -336, 99, 17, -400, -395, 144, 144, -336, 380,
	-411, 89, 402, 89, 239, 640, 89, -319, -359, -364,
	84, -244, 178, 177, -244, 35, 84, 84, -462, -462,
	-461, -464, -461, -244, -244, 84, 84, 24, 84, 84,
	84, -364, 84, 84, 157, -482, 500, -483, 574, -432,
	-432, -432, -432, -432, -432, -432, -432, -432, -432, -432,
	-432, -432, -432, -432, -432, -375, -374, 262, 445, 627,
	627, 445, 627, 627, 84, 157, -532, 157, -327, 315,
	-327, -318, 89, 243, 167, -336, 89, -336, 89, 307,
	-336, -336, 89, 89, -219, -236, 84, 35, -223, -224,
	-225, -233, -226, -228, 35, -560, 93, -555, 89, -336,
	90, -561, 93, 404, 155, 354, 41, 405, 406, 421,
	349, 99, 99, 411, -553, -336, -169, -169, -563, 52,
	125, 89, -230, -381, -324, 152, 281, 328, -292, -291,
	-336, 89, -223, -171, -230, -223, -223, -171, -456, 327,
	21, 99, 143, -197, 81, 156, -179, -231, -336, 144,
	84, -295, -354, -295, -295, 125, -348, -456, -171, -441,
	311, 83, -439, 83, -439, 110, 336, -448, -446, 262,
	-283, 45, 47, -236, -521, -336, -519, -521, -336, -519,
	-519, -384, -364, -283, -233, 243, 31, 233, -286, 333,
	334, 339, -412, 306, 115, -412, 157, -186, 157, -336,
	-253, -253, 31, 89, 89, -232, 84, 157, 125, 89,
	-560, -555, 125, -417, 89, 89, -561, -565, 125, -162,
	93, -325, 157, -200, -200, -295, 157, 125, -202, -201,
	80, 81, -203, 80, -201, 68, 68, -295, -573, -572,
	24, -524, -524, -524, 84, 84, 15, -209, 41, -296,
	20, 21, 144, -296, 122, 120, 122, 122, -336, 84,
	84, -468, 605, -503, -505, 439, 21, 21, 15, 244,
	84, -486, -486, -507, 45, 46, -395, -411, 424, -230,
	157, 640, -234, -364, 84, -364, 84, 89, 84, 89,
	-191, 21, 84, 157, 84, 84, 84, 157, 84, 84,
	-364, 84, -532, -328, 188, 89, -328, 350, -336, 17,
	89, -444, 307, 307, 239, 237, -171, 84, 157, -171,
	89, -558, 415, 89, 89, 99, 41, 99, 155, 407,
	-479, -162, -162, -562, 93, 125, 639, 83, -332, -332,
	-332, -336, 84, 157, -332, -332, 84, 84, 84, -251,
	541, -457, 261, 99, 143, 99, 143, 99, -334, -179,
	-336, -295, -551, 156, 89, -295, -457, -431, 312, 99,
	-360, 83, -360, 83, -440, 309, 83, 84, 157, -336,
	-312, -248, -247, -245, 104, 115, 41, 393, -246, 93,
	152, 295, 298, 297, 273, 296, -275, -352, 80, 399,
	333, 334, -385, 605, 529, 246, 109, 110, 381, -353,
	83, 83, 81, 315, 83, 83, -521, 84, -283, -312,
	41, -286, 41, 346, 306, -284, -336, 152, -253, 84,
	-527, 89, -558, 89, -419, -563, 89, 89, -552, -191,
	-406, -492, -364, 83, -364, 83, 68, 11, 19, -357,
	-364, -372, 245, -6, 615, 369, -268, 606, 89, 21,
	89, -501, 89, -407, -468, -132, -265, -324, 278, 84,
	84, 84, -432, -432, -435, -434, -438, 445, 307, 453,
	-372, 89, 89, 84, 84, 89, -336, 243, 167, 639,
	89, -444, -444, -336, -211, -236, -166, 541, -251, -225,
	-166, 21, 541, 353, 41, 99, 41, 408, 125, 105,
	106, -320, -321, 89, -390, -392, -312, 83, -253, -255,
	89, -291, -357, -357, -249, -171, 35, -250, -289, -385,
	-131, -130, -249, 83, -458, 161, 99, 143, 99, 99,
	-295, -295, 640, -458, -447, 21, 84, -426, 84, -426,
	83, 125, -360, -446, -449, 61, -245, 104, -360, 89,
	-255, -256, 41, 294, 290, 125, 125, -257, 41, 274,
	275, -267, 83, 305, 15, 194, 83, 110, 110, -230,
	-390, -390, -522, 335, 336, 337, 341, 339, 340, 338,
	-522, -390, -390, 83, -413, -412, -360, -332, -332, 152,
	-562, -192, -195, -520, -336, 246, 21, 21, -336, -336,
	-316, 607, 99, 89, 441, -268, -469, 608, -497, -439,
	-253, 125, 84, -437, 117, 407, 411, -358, -361, 99,
	101, 186, 155, 84, 84, 350, -336, -323, -322, 89,
	89, 89, 307, 540, -167, 60, 487, 89, 90, 402,
	89, 90, 353, 89, 640, 157, 125, 84, 157, -461,
	-364, -427, 262, -171, 157, -289, -324, -132, -427, -252,
	-290, -336, 89, -476, 169, 326, 541, 99, 143, 99,
	-191, -459, 169, 326, -430, 84, 84, 84, -426, 99,
	84, -453, -450, 83, -289, 264, 135, 89, 89, 99,
	83, -487, 31, 89, -391, 83, 84, 84, 84, 84,
	-390, 99, -253, -332, 84, 84, 157, 83, 21, -316,
	-470, 609, 89, -506, 444, -500, -498, 439, 440, 441,
	442, 89, -436, -437, 411, -358, -361, 603, 451, 451,
	451, -336, 243, 640, 157, 125, -444, -213, -336, 305,
	424, -321, 89, -393, -392, -186, 84, -428, 314, 21,
	-289, -332, -428, 84, 157, -332, -332, 326, 99, 143,
	99, -192, 326, -442, 313, 84, -453, -289, -452, -451,
	312, 265, 83, 84, -364, -376, -332, 84, -270, -269,
	537, -390, -393, 81, -393, 81, -393, 81, -393, 81,
	84, -253, -336, 246, -317, -336, -501, 89, -508, 244,
	-504, -505, 443, -498, 21, 441, 21, 21, -133, 157,
	114, 452, 452, 452, 350, -322, 89, 89, -212, 35,
	446, 380, -394, 252, 346, 347, 93, 541, 333, 334,
	-186, 21, -429, -253, -290, -357, -357, 99, 99, 84,
	157, -336, 261, 83, -371, -365, -364, 261, 84, -336,
	-274, -272, -273, 80, 458, 303, 304, 84, -522, -522,
	-522, -522, -275, 84, 157, -515, 83, 99, -503, -502,
	-504, 21, -501, 21, -501, -501, 448, -436, -336, 89,
	-332, -332, 89, 89, 332, -312, 83, -441, -451, -450,
	-371, 84, 157, -412, -273, 80, -272, 80, 16, 15,
	-393, -393, -393, -393, -336, -518, 31, 84, -514, -513,
	-313, -509, -336, 444, 445, 89, -501, 125, -593, -592,
	626, 99, 99, -336, -426, -431, 84, -365, -271, 300,
	301, 31, 169, -271, -517, -516, -314, 84, 157, 156,
	89, 89, 84, -447, 104, 41, 302, 157, 125, -513,
	-336, -516, 41, -364, 156, -336,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 0, 303, 304, 305, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 0, 0, 0,
	0, 0, 678, 679, 0, 642, 0, 0, 0, 0,
	0, 0, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 0, 328, 324, 249, 250,
	251, 252, 253, 335, 336, 500, 0, 0, 0, 0,
	761, -2, 93, 0, 0, 0, 0, 317, 0, 308,
	308, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, -2, 691, 0, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 388, 389, 390, 384, 385, 387,
	386, -2, 0, 691, 0, 0, 0, 769, 0, 0,
	0, 812, 834, 23, 0, 7, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 0, 0, 19, 0,
	19, 0, 0, 0, 1341, 1342, 1343, 1344, 2125, 2095,
	-2, 1866, 1843, 2019, 2020, 1920, 1931, 2156, 2157, 2158,
	2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168,
	2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178,
	2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,
	2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198,
	2199, 2200, 2201, 2202, 2203, 2204, 2205, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832,
	1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1921, 1922, 1923, 1924, 1925,
	1926, 1927, 1928, 1929, 1930, 1933, 1934, 1935, 1936, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947,
	1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957,
	1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967,
	1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977,
	1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
	1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
	1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
	2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, -2, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
	2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	-2, -2, -2, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, 2126, 2127, 2128, 2129, 2130, 2131,
	2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141,
	2142, 2143, 2144, 2145, 0, 301, 299, 1813, 1843, 1866,
	1920, 1931, 1932, 1967, 2019, 2020, 2052, 2095, 2111, 2112,
	2113, 2125, 0, 0, 947, 0, 739, 0, 0, 744,
	1289, 739, 329, 680, 681, 769, 795, 640, 0, 366,
	0, 1857, 370, 2102, 0, 0, 0, 637, 360, 361,
	362, 363, 364, 365, 0, 0, 920, 0, 0, 356,
	0, 323, 1922, 2124, 1345, 0, 0, 0, 0, 0,
	192, 1067, 194, 1069, 198, 206, 0, 0, 0, 211,
	212, 215, 216, 217, 218, 219, 0, 223, 0, 225,
	228, 0, 230, 231, 0, 234, 235, 236, 0, 246,
	247, 248, 1070, 1071, 1072, -2, 121, 945, 1771, 1658,
	0, 1665, 1678, 1689, 1422, 1423, 1424, 1425, 0, 0,
	0, 0, 0, 0, 1433, 1434, 0, 1462, 2160, 2201,
	2202, 0, 1442, 1443, 1444, 1445, 1446, 1447, 132, 144,
	145, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 0, 1719,
	1720, 1721, 1629, 1409, 1341, 0, 2169, 0, 2191, 2196,
	2197, 2198, 2199, 2190, 0, 0, 1614, 0, 1604, 0,
	0, -2, -2, 0, 0, 1992, -2, 2203, 2204, 2205,
	2166, 2187, 2195, 2170, 2171, 2194, 2162, 2163, 2164, 2157,
	2158, 2159, 2161, 2173, 2175, 2186, 0, 2182, 2192, 2193,
	2100, 0, 0, 0, 0, 0, 2142, 146, 147, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1625, -2, -2, 1628,
	-2, 1631, -2, -2, -2, -2, 1636, 1637, -2, 1639,
	-2, -2, -2, -2, -2, -2, -2, 1616, 1617, 1618,
	1619, 1608, 1609, 1610, 1611, 1612, 1613, -2, -2, -2,
	795, 870, 0, 795, 0, 770, 817, 820, 823, 826,
	773, 0, 0, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 318, 319, 307, 309, 0, 313, 0, 306,
	1103, 1103, 1103, 0, 0, 0, 0, 1103, 1103, 1103,
	1103, 1103, 0, 1103, 0, 0, 0, 0, 0, 1103,
	0, 980, 1074, 1075, 1076, 1101, 1102, 1175, 0, 0,
	0, 696, 692, 693, 694, 695, 783, 0, 785, 788,
	0, 615, 615, 843, 843, 561, 0, 0, 0, 615,
	0, 575, 567, 0, 0, 0, 615, 0, 0, 790,
	790, 0, 618, 627, 615, 615, -2, 615, 615, 612,
	615, 0, 0, 1115, 581, 582, 583, 567, 567, 586,
	587, 588, 598, 599, 628, 1795, 0, 0, 500, 500,
	0, 500, 500, 0, 500, 500, 500, 698, 1962, 1864,
	1937, 1922, 2124, 0, 274, 1992, 279, 0, 1865, 1884,
	0, 0, 1902, 0, -2, 0, 345, 795, 0, 0,
	769, 0, 0, 0, 0, 500, 500, 500, 500, 500,
	1174, 500, 500, 500, 500, 500, 0, 0, 0, 500,
	500, 500, 500, 0, 0, 835, 836, 831, 832, 833,
	837, 838, 5, 6, 19, 0, 0, 0, 0, 0,
	0, 100, 99, 0, 1772, 1790, 1724, 1725, 1726, 1777,
	1728, 1781, 1781, 1781, 1781, 1757, 1758, 1759, 1760, 1761,
	1762, 1763, 1764, 1765, 1781, 1781, 0, 0, 1770, 1748,
	1779, 1779, 1779, 1777, 1774, 1729, 1730, 1731, 1732, 1733,
	1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1784,
	1784, 1787, 1787, 1784, 0, 402, 400, 401, 1654, 0,
	0, 0, 0, 739, 743, 1287, 0, 0, 0, 795,
	-2, 0, 0, 641, 367, 1346, 0, 0, 371, 0,
	372, 0, 0, 0, 391, 0, 394, 379, 380, 381,
	375, 0, 172, 0, 358, 359, 0, 0, 325, 0,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 203,
	199, 207, 210, 220, 227, 0, 239, 241, 244, 200,
	208, 213, 214, 221, 242, 201, 204, 205, 209, 243,
	245, 202, 222, 226, 240, 224, 229, 232, 233, 238,
	0, 173, 0, 0, 0, 0, 0, 1664, 0, 0,
	1697, 1698, 1699, 1700, 1701, 1702, 1703, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1658, 0, 0,
	1428, 1429, 1430, 1431, 0, 1435, 0, 1463, 0, 0,
	0, 0, 0, 1718, 1722, 0, 1654, 1654, 0, 1654,
	1650, 0, 0, 0, 0, 0, 0, 1654, 1587, 0,
	0, 1589, 1605, 0, 0, 1591, 1592, 0, 1595, 1596,
	1654, 0, 1654, 1600, 1654, 1654, 1654, 1583, 1584, 0,
	1650, 1650, 1650, 1650, 0, 0, 1650, 1650, 1650, 1650,
	1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650,
	0, 0, 0, 0, 790, 0, 796, 0, -2, 0,
	814, 816, 818, 819, 821, 822, 824, 825, 827, 828,
	775, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 316, 0, 0, 0,
	0, 0, 944, 0, 0, 1103, 1103, 1103, 981, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 1103, 1103,
	1103, 0, 1121, 0, 0, 0, 698, 697, 0, 784,
	0, 0, 0, 843, 0, 0, 558, 559, 0, 560,
	0, 567, 615, 615, 573, 574, 569, 568, 623, 624,
	618, 0, 618, 618, 843, 0, 592, 593, 594, 615,
	615, 600, 791, 0, 601, 602, 618, 0, 625, 626,
	843, 0, 0, 843, 843, 0, 610, 611, 613, 615,
	0, 0, 1103, 0, 633, 569, 569, 1796, 1797, 0,
	0, 1112, 0, 0, 0, 0, 636, 0, 0, 0,
	0, 699, 254, 257, 0, 260, 0, 1962, 0, 1962,
	0, 267, 0, 0, 0, 0, 0, 0, 297, 298,
	0, 0, 0, 0, 288, 291, 1281, 1282, 1064, 1065,
	292, 293, 337, 338, 0, 790, 813, 815, 809, 810,
	811, 0, 0, 0, 0, 0, 0, 0, 500, 0,
	0, 0, 0, 0, 674, 0, 960, 676, 0, 0,
	0, 0, 0, 851, 845, 847, 915, 132, 851, 8,
	117, 114, 0, 19, 0, 0, 19, 19, 0, 19,
	302, 0, 1793, 1791, 1792, 1727, 1778, 0, 1753, 0,
	1754, 1755, 1756, 1766, 1767, 0, 0, 1749, 0, 1750,
	1751, 1752, 1743, 0, 1744, 1745, 0, 1746, 1747, 300,
	399, 0, 0, 1655, 948, 0, 717, 731, 712, 0,
	720, 0, 0, 1289, 1290, 0, 0, 0, 700, 731,
	702, 0, 720, 790, 767, 0, 745, 0, 0, 368,
	0, 376, 373, 0, 377, 0, 0, 393, 395, 396,
	397, 382, 383, 638, 354, 355, 346, 347, 348, 349,
	350, 351, 352, 353, 0, 0, 0, 357, 142, 0,
	326, 327, 0, 0, 0, 186, 187, 188, 189, 190,
	191, 193, 177, 663, 665, 1056, 1068, 0, 1059, 0,
	196, 237, 169, 0, 0, 0, 1659, 1660, 1661, 1662,
	1663, 1668, 0, 1670, 1672, 1674, 1676, 0, 1694, -2,
	-2, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
	1419, 1420, 1421, 1679, 1692, 1693, 0, 0, 0, 0,
	0, 0, 1690, 1690, 1685, 0, 1448, 1283, 1284, 1426,
	0, 0, 1460, 1464, 0, 0, 0, 0, 0, 133,
	1649, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	0, 0, 1658, 0, 0, 0, 1651, 1652, 0, 0,
	0, 1542, 0, 0, 1548, 1549, 1550, 0, 726, 0,
	1615, 1588, 1606, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 871, 0, 735, 737, 738, 764, 745, 771, 0,
	0, 0, 92, 97, 0, 1142, 0, 0, 0, 70,
	72, 0, 1116, 0, 1118, 320, 321, 0, 0, 315,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 996, 997, 498, 1050, 0, 0, 0, 1066, 1091,
	1099, 0, 0, 0, 0, 0, 1148, 982, 987, 988,
	989, 983, 984, 990, 991, 0, 786, 0, 0, 884,
	69, 557, 616, 617, 844, 564, 1922, 569, 843, 843,
	576, 570, 577, 620, 578, 579, 580, 618, 843, 843,
	792, 615, 618, 603, 619, 618, 621, 607, 0, 614,
	621, 634, 621, 0, 632, 584, 585, 1150, 788, 415,
	416, 417, 419, 0, 468, 468, 468, 451, 468, 0,
	0, 439, 1798, 0, 0, 0, 0, 448, 1798, 0,
	0, 1798, 1798, 1798, 1798, 1798, 1798, 1798, 0, 0,
	1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798, 1798,
	1798, 0, 1798, 1798, 1798, 1798, 1798, 1267, 1798, 0,
	1113, 458, 459, 460, 461, 466, 467, 0, 0, 495,
	0, 0, 995, 0, 498, 0, 1035, 856, 0, 857,
	858, 854, 886, 910, 910, 0, 910, 890, 1289, 0,
	0, 265, 266, 255, 0, 256, 0, 268, 269, 0,
	271, 272, 273, 280, 1864, 1937, 275, 277, 0, 0,
	281, 294, 295, 296, 0, 0, 286, 287, 0, 0,
	340, 341, 343, 0, 745, 1117, 71, 660, 1285, 661,
	662, 666, 0, 0, 669, 670, 671, 672, 673, 962,
	0, 0, 1042, 1043, 1044, 1045, 843, 0, 852, 0,
	848, 916, 0, 918, 0, 843, 0, 115, 19, 0,
	108, 105, 0, 0, 0, 0, 0, 1773, 1723, 1794,
	0, 0, 0, 1775, 0, 0, 0, 0, 0, 98,
	747, 707, 0, 711, 728, 0, 732, 0, 0, 724,
	716, 721, 0, 0, 741, 708, 1288, 0, 0, 0,
	701, 0, 0, 706, 745, 0, 768, 797, 798, 801,
	1347, 0, 378, 374, 392, 0, 500, 0, 0, 0,
	180, 1053, 0, 181, 185, 175, 0, 0, 0, 1058,
	0, 1055, 1060, 0, 195, 0, 0, 170, 171, 1133,
	1142, 0, 0, 0, 1669, 1671, 1673, 1675, 1677, 0,
	1680, 1690, 1690, 1686, 0, 1681, 0, 1683, 0, 1659,
	1432, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	0, 1532, 1533, 0, 0, 1537, 0, 1539, 1540, 1541,
	1543, 0, 0, 0, 1547, 0, 1586, 1607, 1590, 1593,
	0, 1597, 0, 1599, 1601, 1602, 1603, 0, 795, 795,
	0, 0, 1504, 1504, 1504, 0, 0, 0, 0, 1504,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1449, 0, 1450, 1451, 0, 0, 0, 872, 765, 0,
	0, 0, 0, 0, 1140, 0, 85, 0, 0, 73,
	74, 322, 310, 312, 0, 0, 1104, 0, 0, 0,
	0, 0, 950, 951, 953, 0, 956, 957, 958, 962,
	788, 0, 788, 1007, 1798, 502, 0, 0, 1052, 0,
	0, 1024, 0, 0, 0, -2, 0, 0, 1099, 0,
	0, 0, 1152, 0, 0, 0, 685, 689, 23, 789,
	0, 562, 0, 563, 615, 571, 572, 843, 595, 596,
	0, 0, 843, 615, 615, 606, 0, 618, 629, 0,
	630, 631, 1152, 0, 0, 1112, 1218, 1186, 429, 0,
	1302, 1303, 469, 0, 1309, 1318, 1103, 1379, 0, 1318,
	0, 0, 1320, 1321, 0, 0, 0, 0, 452, 453,
	0, 438, 0, 0, 0, 0, 0, 0, 437, 0,
	0, 479, 0, 0, 0, 0, 0, 1799, 1798, 1798,
	0, 446, 447, 0, 450, 0, 0, 0, 0, 0,
	0, 0, 0, 1798, 1798, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1258, 0, 0, 0,
	0, 0, 0, 0, 1273, 1274, 0, 1007, 1798, 0,
	0, 0, 0, 502, 1022, 1040, 0, 0, 0, 0,
	0, 0, 876, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 788, 911, 0, 913, 914, 888, -2, 0,
	856, 893, 1654, 258, 259, 0, 0, 264, 282, 284,
	0, 0, 0, 283, 285, 289, 290, 339, 342, 344,
	807, 0, 0, 1176, 0, 963, 964, 966, 967, 0,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1848, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 961, 677, 841, 846, 853,
	917, 919, 133, 849, 841, 0, 118, 19, 117, 109,
	110, 0, 19, 0, 0, 0, 0, 1783, 1782, 1768,
	0, 1769, 1780, 1785, 0, 1788, 0, 403, 751, 0,
	0, 731, 733, 0, 0, 731, 0, 0, 740, 0,
	0, 0, 0, 0, 0, 731, 807, 747, 0, 804,
	802, 803, 0, 0, 639, 143, 398, 0, 0, 0,
	0, 0, 664, 0, 1057, 177, 0, 0, 197, 0,
	0, 0, 1142, 1137, 1653, 1682, 1684, 0, 1691, 1687,
	1427, 1436, 1461, 0, 0, 1467, 1479, 1479, 0, 0,
	0, 1470, 1781, 1781, 1473, 1777, 1779, 1777, 1479, 1479,
	0, 134, 0, 0, 1538, 0, 0, 0, 727, 0,
	0, 0, 1500, 1502, 1504, 1504, 1511, 1505, 1512, 1513,
	1504, 1504, 1504, 1504, 1518, 1504, 1504, 1504, 1504, 1504,
	1504, 1504, 1504, 1504, 1504, 1498, 0, 0, 1712, 1713,
	736, 0, 0, 778, 779, 780, 781, 782, 0, 0,
	60, 60, 1142, 0, 86, 0, 0, 75, 314, 0,
	76, 77, 0, 0, 84, 0, 0, 0, 0, 0,
	955, 0, 0, 0, 1295, 0, 1011, 1008, 1009, 1010,
	0, 1047, 503, 504, 505, 506, 0, 0, 0, 1051,
	0, 1035, 1035, 1017, 0, 0, 0, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, -2, 1107, 0, 0, 0, 1295,
	1126, 0, 0, 1131, 1295, 1295, 0, 1160, 0, 1149,
	739, 0, -2, 0, 0, 687, 0, 0, 885, 565,
	843, 589, 793, 794, 621, 843, 843, 0, 615, 635,
	1160, 1151, 0, 418, 468, 0, 1206, 0, 0, 1212,
	0, 1219, 422, 0, 470, 0, 1308, 1335, 1319, 1335,
	1380, 1335, 1335, 1103, 0, 470, 0, 0, 440, 476,
	0, 0, 0, 0, 0, 436, 473, 801, 423, 425,
	426, 427, 477, 478, 480, 0, 482, 483, 442, 454,
	455, 456, 457, 0, 0, 0, 449, 462, 463, 464,
	465, 424, 1235, 1236, 1237, 1240, 1241, 1242, 1243, 0,
	0, 1246, 1247, 1248, 1249, 1250, 1332, 1333, 1334, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1275, 1276, 1277, 1278,
	1279, 1280, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
	0, 0, 1270, 0, 0, 1011, 0, 0, 0, 0,
	0, 1047, 1024, 0, 1031, 0, 1036, 1037, 0, 0,
	709, 843, 332, 0, 880, 873, 0, 862, 877, 878,
	879, 865, 0, 867, 0, 863, 864, 843, 855, 887,
	912, 889, 892, 894, 895, 901, 0, 0, 0, 0,
	261, 262, 263, 270, 0, 522, 276, 763, 0, 1286,
	667, 668, 1177, 1178, 675, 0, 968, 839, 0, 0,
	839, 113, 116, 0, 111, 0, 0, 0, 0, 103,
	101, 1776, 0, 0, 753, 157, 0, 0, 0, 729,
	0, 734, 731, 715, 725, 714, 722, 723, 742, 1291,
	1292, 1293, 1294, 731, 705, 704, 766, 751, 799, 800,
	0, 1348, 369, 0, 1054, 177, 182, 183, 184, 178,
	176, 1061, 0, 1063, 0, 1135, 0, 0, 1688, 1466,
	1437, 1468, 1480, 1481, 1469, 0, 1439, 1440, 1471, 1472,
	1474, 1475, 1476, 1477, 1478, 1441, 1534, 0, 1536, 1544,
	1545, 0, 1594, 1598, 0, 0, 0, 0, 0, 1509,
	1510, 1514, 1515, 1516, 1517, 1519, 1520, 1521, 1522, 1523,
	1524, 1525, 1526, 1527, 1528, 795, 1499, 0, 0, 0,
	0, 0, 0, 0, 776, 0, 0, 0, 62, 0,
	62, 1141, 1143, 0, 0, 0, 0, 78, 79, 0,
	0, 0, 943, 946, 952, 954, 0, 0, 0, 1296,
	1297, 1299, 1300, 1301, 0, 979, 0, 0, 999, 1000,
	1001, 1013, 0, 0, 0, 508, 509, 0, 0, 0,
	521, 517, 518, 519, 499, 1046, 1031, 1031, 1020, 0,
	0, 1030, 0, 1108, 1798, 1798, 1798, 0, 0, 1220,
	1798, 1798, 0, 1128, 1130, 0, 0, 1224, 1163, 0,
	0, 1154, 0, 910, 0, 0, 843, 686, 689, 690,
	787, 566, 604, 608, 605, 0, 843, 1163, 414, 1184,
	0, 0, 0, 0, 0, 1216, 0, 0, 1188, 0,
	441, 471, 0, -2, 0, 1336, 0, 1322, 1336, 0,
	0, 1335, 0, 430, 470, 0, 0, 0, 484, 488,
	489, 0, 486, 1375, 0, 487, 0, 475, 0, 481,
	1238, 1239, 0, 1244, 1245, 0, 1269, 0, 0, 421,
	490, 0, 0, 0, 491, 492, 497, 1017, 0, 1034,
	0, 1041, 0, 1038, 1039, 795, 0, 0, 859, 881,
	0, 0, 860, 0, 861, 866, 868, 331, 896, 0,
	0, 898, 899, 900, 891, 278, 808, 965, 0, 829,
	0, 0, 850, 830, 0, 19, 0, 0, 106, 1786,
	1789, 755, 0, 752, 158, 0, 0, 0, 0, 719,
	730, 713, 703, 753, 805, 806, 179, 174, 1062, 1145,
	0, 1136, 0, 0, 1546, 0, 1504, 1501, 1504, 1503,
	1495, 0, 1452, 0, 1454, 1455, 1456, 0, 1458, 1459,
	0, 774, 0, 58, 0, 61, 59, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 985, 1224, 0, 985,
	1012, 998, 0, 1048, 1049, 0, 510, 511, 0, 514,
	520, 1014, 1015, 1016, 0, 0, 1028, 0, 0, 0,
	0, 1100, 1114, 0, 0, 0, -2, 0, -2, 1125,
	0, 1169, 0, 1161, 0, 1153, 0, 1156, 843, 843,
	-2, 683, 688, 0, 0, 609, 1169, 1186, 0, 1207,
	0, 0, 0, 0, 0, 0, 0, 1187, 0, 1200,
	472, 1337, -2, 1351, 1353, 0, 1113, 1356, 1357, 0,
	0, 0, 0, 0, 0, 1401, 1365, 0, 0, 1369,
	1370, 1371, 0, 0, 1374, 0, 1706, 1707, 0, 1378,
	0, 0, 0, 0, 0, 0, 0, 1316, 431, 432,
	0, 434, 435, 1798, 1376, 474, 428, 1798, 444, 1268,
	1271, 1272, 496, 493, 494, 1020, 1023, 1032, 710, 790,
	333, 334, 882, 0, 874, 905, 902, 0, 0, 969,
	840, 842, 107, 112, 0, 0, 757, 0, 754, 0,
	748, 750, 168, 718, 755, 128, 160, 0, 0, 1438,
	1535, 1585, 1507, 1508, 0, 1496, 0, 1490, 1491, 1492,
	1497, 0, 0, 777, 772, 63, 89, 0, 0, 67,
	80, 0, 0, 0, 0, 971, 978, 992, 1119, 1298,
	977, 0, 0, 507, 512, 0, 515, 516, 0, 1018,
	1019, 0, 1026, 0, 0, 1087, 1777, 0, 1109, 1110,
	1111, 1221, 1222, 1223, 1179, 1127, 0, -2, 1232, 0,
	1123, 1145, 1179, 0, 1157, 0, 1164, 0, 1162, 1155,
	795, 684, 622, 1166, 420, 1218, 1208, 0, 1210, 0,
	0, 0, 0, 1189, -2, 0, 1352, 1354, 1355, 1358,
	1359, 1360, 1406, 1407, 1408, 0, 0, 1363, 1403, 1404,
	1405, 1364, 0, 0, 0, 0, 0, 1704, 1705, 1399,
	0, 0, 1323, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
	1324, 0, 0, 0, 1315, 1317, 433, 0, 0, 1798,
	1033, 330, 0, 0, 906, 908, 903, 904, 102, 104,
	119, 0, 756, 159, 0, 757, 130, 0, 151, 0,
	1146, 0, 1506, 1493, 0, 0, 0, 0, 0, 1708,
	1709, 1710, 0, 1453, 1457, 0, 88, 0, 65, 0,
	81, 82, 0, 0, 0, 993, 994, 1002, 1003, 0,
	1005, 1006, 513, 1021, 1025, 1028, 0, 1078, 0, 801,
	0, 1181, 0, 1129, 1112, 1234, 1798, 1132, 1181, 0,
	1226, 1798, 1798, 1147, 0, 1159, 0, 1171, 0, 1165,
	790, 413, 0, 1168, 1204, 1209, 1211, 1213, 0, 1217,
	1215, 1190, -2, 0, 1198, 0, 0, 1361, 1362, 0,
	0, 1604, 1798, 0, 1394, 0, 1078, 1078, 1078, 1078,
	0, 485, 443, 0, 883, 897, 0, 0, 0, 746,
	120, 0, 129, 148, 0, 161, 162, 0, 0, 0,
	0, 1138, 0, 1482, 0, 0, 0, 1486, 1487, 1488,
	1489, 90, 0, 64, 67, 0, 0, 0, 970, 0,
	1004, 1027, 1029, 1077, 1088, 1089, 801, 1122, 0, 1218,
	1233, 0, 1124, 1225, 0, 0, 0, 1158, 1170, 0,
	1173, 682, 1167, 1185, 0, 1214, 1191, 1199, 0, 1194,
	0, 0, 0, 1402, 0, 1368, 0, 1373, 1382, 1395,
	0, 0, 1304, 0, 1306, 0, 1310, 0, 1312, 0,
	0, 445, 907, 909, 0, 759, 749, 131, 135, 0,
	157, 154, 0, 163, 0, 0, 0, 0, 1134, 0,
	0, 1483, 1484, 1485, 0, 66, 68, 83, 0, 972,
	973, 986, 1079, 1798, 1798, 0, 0, 0, 1085, 1086,
	1090, 0, 1206, 1238, 1227, 1228, 1229, 1172, 1205, 1193,
	0, -2, 1201, 0, 0, 1656, 1666, 1667, 1366, 1372,
	1381, 1383, 1384, 0, 1396, 1397, 1398, 1400, 1078, 1078,
	1078, 1078, 1314, 758, 0, 122, 0, 0, 152, 153,
	155, 0, 164, 0, 166, 167, 0, 1494, 91, 974,
	0, 0, 1082, 1083, 0, 1182, 0, 1184, 1195, -2,
	0, 1203, 0, 1367, 1385, 0, 1386, 0, 0, 0,
	1305, 1307, 1311, 1313, 760, 1144, 0, 136, 0, 138,
	140, 141, 1338, 149, 150, 156, 165, 0, 959, 975,
	0, 1080, 1081, 1084, 0, 1186, 1202, 1657, 1387, 1389,
	1390, 0, 0, 1388, 123, 124, 0, 137, 0, 0,
	1139, 976, 1183, 1180, 1391, 1393, 1392, 0, 0, 139,
	1339, 125, 126, 127, 0, 1340,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 641, 638,
	126, 125, 127, 3, 642, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 639, 138, 640, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:824
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:831
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:837
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:851
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:855
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:870
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:880
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:885
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:889
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:922
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:935
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:946
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:958
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:962
		{
			yyVAL.str = yyDollar[2].str
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:967
		{
			yyVAL.str = ""
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:971
		{
			yyVAL.str = yyDollar[2].str
		}
	case 64:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:977
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:991
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:995
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:999
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1003
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1010
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1019
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1028
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1050
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1059
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1068
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1078
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1088
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1100
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1110
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1120
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1131
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1142
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1156
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1164
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1172
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1180
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1189
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1208
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1218
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1231
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1251
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1257
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1264
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1272
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1278
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1287
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1297
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1305
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1313
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1321
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1331
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1339
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1349
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1356
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1365
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1375
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1379
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1385
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1389
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1395
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1404
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1414
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1418
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1424
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1433
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1437
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1443
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1485
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1489
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1495
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1499
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1505
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1512
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1520
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1524
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1536
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1540
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1554
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1558
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1563
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1570
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1574
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1578
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1584
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1593
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1604
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1608
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1614
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1618
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1624
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1628
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1634
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1658
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1677
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1681
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1685
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1690
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1694
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1703
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1713
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1720
		{
			yyVAL.str = yyDollar[3].str
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1725
		{
			yyVAL.str = "\n"
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1732
		{
			yyVAL.str = yyDollar[3].str
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1737
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1741
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1769
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1773
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1779
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1787
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1807
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1826
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1851
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1855
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1859
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1864
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1868
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1874
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1887
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1898
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1911
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1915
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1925
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1938
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1951
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1957
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1963
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1971
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1981
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1991
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1995
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1999
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2003
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2007
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2011
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2018
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2022
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2028
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2035
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2044
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2048
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2054
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2058
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2062
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2066
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2070
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2074
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2078
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2082
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2086
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2190
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2198
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2202
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2206
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2210
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2234
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2246
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2250
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2254
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2267
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2274
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2281
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2291
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2295
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2301
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2308
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2316
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2320
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2324
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2328
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2334
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2338
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2344
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2351
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2358
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2367
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2397
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2401
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2405
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2411
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2417
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2421
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2428
		{
			yyVAL.str = yyDollar[3].str
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2434
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2438
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2444
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2452
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2461
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2470
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2478
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2486
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2509
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2532
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2539
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2546
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2554
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2561
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2568
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2577
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2581
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2585
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2591
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2595
		{
			yyVAL.str = yyDollar[1].str
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2601
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2605
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2611
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2615
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2632
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2637
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2641
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2645
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2649
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2653
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2657
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2661
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2665
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2669
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2675
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2679
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2683
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2687
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2692
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2697
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2703
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2716
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2729
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2742
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2755
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2771
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2778
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2789
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2800
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2804
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2810
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2820
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2826
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2830
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2836
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2842
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2846
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2850
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2854
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2860
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2873
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2879
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2883
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2889
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2893
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2899
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2905
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2916
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2922
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2926
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2930
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2934
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2938
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2942
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2950
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2958
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2968
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2980
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2984
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2992
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3000
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3039
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3043
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3049
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3055
		{
			yyVAL.str = yyDollar[1].str
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3060
		{
			yyVAL.str = "true"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3061
		{
			yyVAL.str = "false"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3062
		{
			yyVAL.str = yyDollar[1].str
		}
	case 398:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3067
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3073
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3082
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3089
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3097
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3101
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3125
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3148
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3158
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3165
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3174
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3178
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3184
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3188
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3212
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3222
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3232
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3248
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3266
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3270
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3276
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3280
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3286
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3292
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3300
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3310
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3318
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3328
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3338
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3348
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3355
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3359
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3363
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3367
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3371
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3378
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3384
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3388
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3392
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3396
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3400
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3404
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3408
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3412
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3417
		{
			yyVAL.str = ""
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3448
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3452
		{
			yyVAL.str = string("COLUMN")
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3457
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3463
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3469
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3477
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3481
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3487
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3495
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3502
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3508
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3514
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3520
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3526
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3533
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3540
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3548
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3554
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3566
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3572
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3580
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3584
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3591
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3609
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3624
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3639
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3654
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3667
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3673
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3684
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3697
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3701
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3709
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3713
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3718
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3722
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3738
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3742
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3746
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3750
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3757
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3761
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3765
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3769
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3776
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3780
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3787
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3791
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3795
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3799
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3806
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3813
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3819
		{
			yyVAL.item = nil
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3824
		{
			yyVAL.item = nil
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3869
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3878
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3886
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3894
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3902
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3906
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3910
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3921
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3925
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3931
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3936
		{
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3940
		{
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3945
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3955
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3965
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3973
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3979
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3985
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3991
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3997
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4003
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4009
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4018
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4022
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4026
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4030
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4034
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4038
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4042
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4046
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4052
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4061
		{
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4063
		{
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4072
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4082
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4091
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4095
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4099
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4105
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4111
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4117
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4123
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4132
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4143
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4155
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4163
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4169
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4181
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4201
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4207
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4214
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4218
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4223
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4227
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4231
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4236
		{
			yyVAL.str = ""
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4240
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4246
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4251
		{
			yyVAL.str = ""
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4255
		{
			yyVAL.str = yyDollar[4].str
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4270
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4274
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4280
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4288
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4295
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4299
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4305
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4311
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4316
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4324
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4330
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4335
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4341
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4347
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4351
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4379
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4387
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4395
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4403
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4407
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4413
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4426
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4434
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4443
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4449
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4457
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4465
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4473
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4479
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4487
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4493
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4501
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4507
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4517
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4522
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4529
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4545
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4558
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4569
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4573
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4579
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4585
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4594
		{
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4596
		{
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4599
		{
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4608
		{
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4612
		{
		}
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4617
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4626
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4633
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4639
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4647
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4654
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4661
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4681
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4689
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4699
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4703
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4709
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4716
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4722
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4730
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4737
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4744
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4763
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4767
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4771
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4776
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4780
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4784
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4790
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4799
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4803
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4809
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4813
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4819
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4823
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4829
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4834
		{
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4838
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4845
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4849
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4856
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4861
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4865
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4871
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4875
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4881
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4885
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4890
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4894
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4907
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4918
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4929
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4951
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4974
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4982
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4991
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4995
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5008
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5012
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5017
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5021
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5028
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5033
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5040
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5046
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5050
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5054
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5058
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5062
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5066
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5071
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5075
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5081
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5091
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5106
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5110
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5124
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5128
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5134
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5143
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5147
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5151
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5155
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5159
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5165
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5172
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5181
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5185
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5191
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5199
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5203
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5208
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5212
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5218
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5222
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5226
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5231
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5235
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5241
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5247
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5251
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5257
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5262
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5266
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5270
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5275
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5279
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5283
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5288
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5292
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5300
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5304
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5308
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5322
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5326
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5336
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5346
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5356
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5368
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5376
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5384
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5393
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5401
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5409
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5417
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5425
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5433
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5441
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5449
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5457
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5467
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5478
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5492
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5496
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5500
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5505
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5509
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5513
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5522
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5526
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5531
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5535
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5540
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5544
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5550
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5554
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5560
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5564
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5568
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5572
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5577
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5585
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5591
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5599
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5607
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5617
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5623
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5632
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5641
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5650
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5660
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5664
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5674
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5678
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5682
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5686
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 869:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5692
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5702
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5706
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5712
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5718
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5722
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5728
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5734
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5738
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5742
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5746
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5752
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5756
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5762
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5766
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5772
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5776
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5782
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5786
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5796
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5809
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5815
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5821
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5835
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5846
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5853
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5857
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5863
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5873
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5877
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5881
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5886
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5890
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5894
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5898
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5903
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5907
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5911
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5915
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5919
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5924
		{
			yyVAL.str = ""
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5928
		{
			yyVAL.str = yyDollar[1].str
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5932
		{
			yyVAL.str = yyDollar[2].str
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5938
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5942
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5947
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5951
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5955
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5959
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5963
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5969
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 943:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6011
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6024
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6030
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 946:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6036
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6049
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6054
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6061
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6068
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6072
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6078
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6084
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6089
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6093
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6097
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6101
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6108
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6141
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6146
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6153
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6160
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6164
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6170
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6176
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6180
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6184
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6190
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6196
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6202
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6206
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6212
		{
			yyVAL.str = ""
		}
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6219
		{
			yyVAL.str = yyDollar[2].str
		}
	case 977:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6225
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6240
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6257
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6274
		{
			yyVAL.str = yyDollar[1].str
		}
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6278
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 982:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6284
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6288
		{
			yyVAL.str = "DEFINER = "
		}
	case 984:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6292
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 985:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6297
		{
			yyVAL.str = ""
		}
	case 986:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6301
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6315
		{
			yyVAL.str = ""
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6323
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6329
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6334
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6340
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6353
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6358
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6363
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6369
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6376
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6383
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6390
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6397
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6405
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6411
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6418
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6425
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6433
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6439
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6448
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6465
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6482
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6501
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6519
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6525
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6532
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6540
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6546
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6554
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6560
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6568
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6574
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6583
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6587
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6592
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6596
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6603
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6608
		{
			yyVAL.str = ""
		}
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6612
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1033:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6618
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6631
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6641
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6645
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6651
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6657
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6663
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6670
		{
			yyVAL.str = ""
		}
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6674
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1042:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6680
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6688
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6696
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6704
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6712
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6717
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6729
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6740
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6849
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6853
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6859
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6872
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6876
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6882
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6895
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6899
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6903
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6908
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6912
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6918
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6925
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6931
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6940
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6947
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6958
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6962
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6968
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6977
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6981
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6985
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6990
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6994
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6998
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7002
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7008
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7039
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7043
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7069
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7075
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7087
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7093
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7099
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7105
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7111
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7119
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7123
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7129
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7143
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7157
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7161
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7165
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7169
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7173
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7177
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7181
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7187
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7202
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7206
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7217
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7221
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7226
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7230
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7236
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7240
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7246
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7255
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7264
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7270
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7274
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7280
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7291
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7297
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7315
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7333
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7351
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7367
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7371
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7380
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7392
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7401
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7413
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7423
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7433
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7444
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7454
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7465
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7473
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7484
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7491
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7501
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7514
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7522
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7531
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7540
		{
			yyVAL.str = ""
		}
	case 1139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7544
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7550
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7554
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7559
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7563
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7570
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7582
		{
			yyVAL.str = ""
		}
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7586
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1147:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7592
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7613
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7627
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7631
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7635
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7641
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7645
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7652
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7659
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7666
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7673
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7677
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7681
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7685
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7689
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7696
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7703
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7707
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7714
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7721
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7725
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7731
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7737
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7741
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7748
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7755
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7762
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7769
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7773
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7778
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7782
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7786
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7791
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7795
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7808
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7812
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7820
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7828
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7832
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7844
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7848
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7854
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7858
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7864
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7877
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7891
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7895
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7901
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7905
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7911
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7920
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7931
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7935
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7940
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7944
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7950
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7955
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7963
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7967
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7977
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7981
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7992
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8000
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8008
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8016
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8027
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8036
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8046
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8056
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8060
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8065
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8069
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8075
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8079
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8085
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8094
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8104
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8108
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8114
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8118
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8124
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8133
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8143
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8147
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8153
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8157
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8161
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8167
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8171
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8175
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8179
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8183
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8187
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8191
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8196
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8200
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8204
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8208
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8212
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8216
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8220
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8224
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8228
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8232
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8236
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8240
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8244
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8250
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8256
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8260
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8264
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8268
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8272
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8278
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8284
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8290
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8296
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8302
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8308
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8312
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8316
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8320
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8327
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8331
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8337
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8348
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8352
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8358
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8362
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8366
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8370
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8374
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8378
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8392
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8396
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8405
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8411
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8419
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8427
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8434
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8442
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8449
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8457
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8464
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8468
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8474
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8478
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8482
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8488
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8492
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8498
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8511
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8524
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8563
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8603
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8617
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8623
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8636
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8649
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8662
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8675
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8690
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8700
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8706
		{
			yyVAL.str = ""
		}
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8710
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8720
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8726
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8732
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8753
		{
			yyVAL.str = ""
		}
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8757
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8763
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8769
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8773
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8778
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8786
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8790
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8794
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8798
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8804
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8810
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8814
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8819
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8826
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8830
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8836
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8840
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8846
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8850
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8854
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8858
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8862
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8866
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8871
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8875
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8879
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8883
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8887
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8891
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8895
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8899
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8903
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8907
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8921
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8925
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8929
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8933
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8937
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8941
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8947
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8951
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8956
		{
			yyVAL.str = ""
		}
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8960
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8966
		{
			yyVAL.str = ""
		}
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8970
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1381:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8976
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8993
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9000
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9007
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9014
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9021
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9030
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9036
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9042
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9046
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9050
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9054
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9058
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9063
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9070
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9074
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9078
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9083
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9087
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9092
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9096
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9112
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9118
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9122
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9126
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9130
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9134
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9138
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9142
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9146
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9150
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9154
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9158
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9162
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9166
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9172
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9176
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9180
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9184
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9188
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9192
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9196
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9200
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9204
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9208
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9250
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9254
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9258
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9263
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9271
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9275
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9279
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9283
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9287
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9297
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9301
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9305
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9309
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9313
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9317
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9321
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9327
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9336
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9345
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9356
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9366
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9376
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9385
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9395
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9405
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9415
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9424
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9434
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9438
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9443
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9447
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9453
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9457
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9463
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9472
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9484
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9501
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9518
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9531
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9544
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9556
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9570
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9585
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9600
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9617
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9632
		{
		}
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9639
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9643
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9647
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9653
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9657
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9661
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9665
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9671
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9675
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9679
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9685
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9693
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9703
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9707
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9714
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9719
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9723
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9728
		{
			yyVAL.str = ","
		}
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9732
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9737
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9741
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9746
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9753
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9779
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9791
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9803
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9814
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9825
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9836
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9846
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9856
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9867
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9878
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9889
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9900
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9911
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9922
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9933
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9944
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9955
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9966
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9977
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9988
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9999
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10010
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10028
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10037
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10046
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10055
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10064
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10075
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10084
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10094
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10103
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10112
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10121
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10130
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10142
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10153
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10166
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10178
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10201
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10237
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10250
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10263
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10275
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10284
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10292
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10300
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10313
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10322
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10333
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10344
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10353
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10365
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10375
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10385
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10394
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10405
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10414
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10424
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10433
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10442
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10452
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10456
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10462
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10466
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10485
		{
		}
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10487
		{
		}
	case 1649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10528
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10540
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10544
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10548
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10554
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10559
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10563
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10569
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10573
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10579
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10583
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10590
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10594
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10598
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10607
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10611
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10615
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10620
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10624
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10630
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10634
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10638
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10642
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10646
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10650
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10654
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10658
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10662
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10666
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10674
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10678
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10682
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10686
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10690
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10694
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10698
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10702
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10706
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10710
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10716
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10720
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10726
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10730
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10737
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10741
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10745
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10751
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10755
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10759
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10763
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10767
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10771
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10775
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10781
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10785
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10789
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10793
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10799
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10812
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10817
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10823
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10827
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10840
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10845
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10849
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10853
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10857
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10861
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10868
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10872
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10876
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10880
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10887
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10898
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10903
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10909
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10921
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10933
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10945
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10958
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10971
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10984
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10997
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11010
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11023
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11036
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11049
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11062
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11075
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11090
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11117
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11159
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11195
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11231
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11248
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11260
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11280
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11300
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11320
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11336
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11349
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11362
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11375
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11388
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11400
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11412
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11424
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11436
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11448
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11460
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11472
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11484
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11496
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11509
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11522
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11535
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11548
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11563
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11571
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11580
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11590
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11613
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11618
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11624
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11631
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11635
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11640
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11644
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11650
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11656
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11663
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11670
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11679
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11686
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11693
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11702
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11706
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11710
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11716
		{
		}
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11718
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11728
		{
			yyVAL.str = ""
		}
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11732
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
