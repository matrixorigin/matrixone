// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const UUID = 57532
const VECF32 = 57533
const VECF64 = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const INT1 = 57543
const INT2 = 57544
const INT3 = 57545
const INT4 = 57546
const INT8 = 57547
const S3OPTION = 57548
const STAGEOPTION = 57549
const SQL_SMALL_RESULT = 57550
const SQL_BIG_RESULT = 57551
const SQL_BUFFER_RESULT = 57552
const LOW_PRIORITY = 57553
const HIGH_PRIORITY = 57554
const DELAYED = 57555
const CREATE = 57556
const ALTER = 57557
const DROP = 57558
const RENAME = 57559
const ANALYZE = 57560
const ADD = 57561
const RETURNS = 57562
const SCHEMA = 57563
const TABLE = 57564
const SEQUENCE = 57565
const INDEX = 57566
const VIEW = 57567
const TO = 57568
const IGNORE = 57569
const IF = 57570
const PRIMARY = 57571
const COLUMN = 57572
const CONSTRAINT = 57573
const SPATIAL = 57574
const FULLTEXT = 57575
const FOREIGN = 57576
const KEY_BLOCK_SIZE = 57577
const SHOW = 57578
const DESCRIBE = 57579
const EXPLAIN = 57580
const DATE = 57581
const ESCAPE = 57582
const REPAIR = 57583
const OPTIMIZE = 57584
const TRUNCATE = 57585
const MAXVALUE = 57586
const PARTITION = 57587
const REORGANIZE = 57588
const LESS = 57589
const THAN = 57590
const PROCEDURE = 57591
const TRIGGER = 57592
const STATUS = 57593
const VARIABLES = 57594
const ROLE = 57595
const PROXY = 57596
const AVG_ROW_LENGTH = 57597
const STORAGE = 57598
const DISK = 57599
const MEMORY = 57600
const CHECKSUM = 57601
const COMPRESSION = 57602
const DATA = 57603
const DIRECTORY = 57604
const DELAY_KEY_WRITE = 57605
const ENCRYPTION = 57606
const ENGINE = 57607
const MAX_ROWS = 57608
const MIN_ROWS = 57609
const PACK_KEYS = 57610
const ROW_FORMAT = 57611
const STATS_AUTO_RECALC = 57612
const STATS_PERSISTENT = 57613
const STATS_SAMPLE_PAGES = 57614
const DYNAMIC = 57615
const COMPRESSED = 57616
const REDUNDANT = 57617
const COMPACT = 57618
const FIXED = 57619
const COLUMN_FORMAT = 57620
const AUTO_RANDOM = 57621
const ENGINE_ATTRIBUTE = 57622
const SECONDARY_ENGINE_ATTRIBUTE = 57623
const INSERT_METHOD = 57624
const RESTRICT = 57625
const CASCADE = 57626
const ACTION = 57627
const PARTIAL = 57628
const SIMPLE = 57629
const CHECK = 57630
const ENFORCED = 57631
const RANGE = 57632
const LIST = 57633
const ALGORITHM = 57634
const LINEAR = 57635
const PARTITIONS = 57636
const SUBPARTITION = 57637
const SUBPARTITIONS = 57638
const CLUSTER = 57639
const TYPE = 57640
const ANY = 57641
const SOME = 57642
const EXTERNAL = 57643
const LOCALFILE = 57644
const URL = 57645
const PREPARE = 57646
const DEALLOCATE = 57647
const RESET = 57648
const EXTENSION = 57649
const INCREMENT = 57650
const CYCLE = 57651
const MINVALUE = 57652
const PUBLICATION = 57653
const SUBSCRIPTIONS = 57654
const PUBLICATIONS = 57655
const PROPERTIES = 57656
const PARSER = 57657
const VISIBLE = 57658
const INVISIBLE = 57659
const BTREE = 57660
const HASH = 57661
const RTREE = 57662
const BSI = 57663
const IVFFLAT = 57664
const MASTER = 57665
const ZONEMAP = 57666
const LEADING = 57667
const BOTH = 57668
const TRAILING = 57669
const UNKNOWN = 57670
const LISTS = 57671
const OP_TYPE = 57672
const REINDEX = 57673
const EXPIRE = 57674
const ACCOUNT = 57675
const ACCOUNTS = 57676
const UNLOCK = 57677
const DAY = 57678
const NEVER = 57679
const PUMP = 57680
const MYSQL_COMPATIBILITY_MODE = 57681
const UNIQUE_CHECK_ON_AUTOINCR = 57682
const MODIFY = 57683
const CHANGE = 57684
const SECOND = 57685
const ASCII = 57686
const COALESCE = 57687
const COLLATION = 57688
const HOUR = 57689
const MICROSECOND = 57690
const MINUTE = 57691
const MONTH = 57692
const QUARTER = 57693
const REPEAT = 57694
const REVERSE = 57695
const ROW_COUNT = 57696
const WEEK = 57697
const REVOKE = 57698
const FUNCTION = 57699
const PRIVILEGES = 57700
const TABLESPACE = 57701
const EXECUTE = 57702
const SUPER = 57703
const GRANT = 57704
const OPTION = 57705
const REFERENCES = 57706
const REPLICATION = 57707
const SLAVE = 57708
const CLIENT = 57709
const USAGE = 57710
const RELOAD = 57711
const FILE = 57712
const TEMPORARY = 57713
const ROUTINE = 57714
const EVENT = 57715
const SHUTDOWN = 57716
const NULLX = 57717
const AUTO_INCREMENT = 57718
const APPROXNUM = 57719
const SIGNED = 57720
const UNSIGNED = 57721
const ZEROFILL = 57722
const ENGINES = 57723
const LOW_CARDINALITY = 57724
const AUTOEXTEND_SIZE = 57725
const ADMIN_NAME = 57726
const RANDOM = 57727
const SUSPEND = 57728
const ATTRIBUTE = 57729
const HISTORY = 57730
const REUSE = 57731
const CURRENT = 57732
const OPTIONAL = 57733
const FAILED_LOGIN_ATTEMPTS = 57734
const PASSWORD_LOCK_TIME = 57735
const UNBOUNDED = 57736
const SECONDARY = 57737
const RESTRICTED = 57738
const USER = 57739
const IDENTIFIED = 57740
const CIPHER = 57741
const ISSUER = 57742
const X509 = 57743
const SUBJECT = 57744
const SAN = 57745
const REQUIRE = 57746
const SSL = 57747
const NONE = 57748
const PASSWORD = 57749
const SHARED = 57750
const EXCLUSIVE = 57751
const MAX_QUERIES_PER_HOUR = 57752
const MAX_UPDATES_PER_HOUR = 57753
const MAX_CONNECTIONS_PER_HOUR = 57754
const MAX_USER_CONNECTIONS = 57755
const FORMAT = 57756
const VERBOSE = 57757
const CONNECTION = 57758
const TRIGGERS = 57759
const PROFILES = 57760
const LOAD = 57761
const INLINE = 57762
const INFILE = 57763
const TERMINATED = 57764
const OPTIONALLY = 57765
const ENCLOSED = 57766
const ESCAPED = 57767
const STARTING = 57768
const LINES = 57769
const ROWS = 57770
const IMPORT = 57771
const DISCARD = 57772
const JSONTYPE = 57773
const MODUMP = 57774
const OVER = 57775
const PRECEDING = 57776
const FOLLOWING = 57777
const GROUPS = 57778
const DATABASES = 57779
const TABLES = 57780
const SEQUENCES = 57781
const EXTENDED = 57782
const FULL = 57783
const PROCESSLIST = 57784
const FIELDS = 57785
const COLUMNS = 57786
const OPEN = 57787
const ERRORS = 57788
const WARNINGS = 57789
const INDEXES = 57790
const SCHEMAS = 57791
const NODE = 57792
const LOCKS = 57793
const ROLES = 57794
const TABLE_NUMBER = 57795
const COLUMN_NUMBER = 57796
const TABLE_VALUES = 57797
const TABLE_SIZE = 57798
const NAMES = 57799
const GLOBAL = 57800
const PERSIST = 57801
const SESSION = 57802
const ISOLATION = 57803
const LEVEL = 57804
const READ = 57805
const WRITE = 57806
const ONLY = 57807
const REPEATABLE = 57808
const COMMITTED = 57809
const UNCOMMITTED = 57810
const SERIALIZABLE = 57811
const LOCAL = 57812
const EVENTS = 57813
const PLUGINS = 57814
const CURRENT_TIMESTAMP = 57815
const DATABASE = 57816
const CURRENT_TIME = 57817
const LOCALTIME = 57818
const LOCALTIMESTAMP = 57819
const UTC_DATE = 57820
const UTC_TIME = 57821
const UTC_TIMESTAMP = 57822
const REPLACE = 57823
const CONVERT = 57824
const SEPARATOR = 57825
const TIMESTAMPDIFF = 57826
const CURRENT_DATE = 57827
const CURRENT_USER = 57828
const CURRENT_ROLE = 57829
const SECOND_MICROSECOND = 57830
const MINUTE_MICROSECOND = 57831
const MINUTE_SECOND = 57832
const HOUR_MICROSECOND = 57833
const HOUR_SECOND = 57834
const HOUR_MINUTE = 57835
const DAY_MICROSECOND = 57836
const DAY_SECOND = 57837
const DAY_MINUTE = 57838
const DAY_HOUR = 57839
const YEAR_MONTH = 57840
const SQL_TSI_HOUR = 57841
const SQL_TSI_DAY = 57842
const SQL_TSI_WEEK = 57843
const SQL_TSI_MONTH = 57844
const SQL_TSI_QUARTER = 57845
const SQL_TSI_YEAR = 57846
const SQL_TSI_SECOND = 57847
const SQL_TSI_MINUTE = 57848
const RECURSIVE = 57849
const CONFIG = 57850
const DRAINER = 57851
const SOURCE = 57852
const STREAM = 57853
const HEADERS = 57854
const CONNECTOR = 57855
const CONNECTORS = 57856
const DAEMON = 57857
const PAUSE = 57858
const CANCEL = 57859
const TASK = 57860
const RESUME = 57861
const MATCH = 57862
const AGAINST = 57863
const BOOLEAN = 57864
const LANGUAGE = 57865
const WITH = 57866
const QUERY = 57867
const EXPANSION = 57868
const WITHOUT = 57869
const VALIDATION = 57870
const UPGRADE = 57871
const RETRY = 57872
const ADDDATE = 57873
const BIT_AND = 57874
const BIT_OR = 57875
const BIT_XOR = 57876
const CAST = 57877
const COUNT = 57878
const APPROX_COUNT = 57879
const APPROX_COUNT_DISTINCT = 57880
const SERIAL_EXTRACT = 57881
const APPROX_PERCENTILE = 57882
const CURDATE = 57883
const CURTIME = 57884
const DATE_ADD = 57885
const DATE_SUB = 57886
const EXTRACT = 57887
const GROUP_CONCAT = 57888
const MAX = 57889
const MID = 57890
const MIN = 57891
const NOW = 57892
const POSITION = 57893
const SESSION_USER = 57894
const STD = 57895
const STDDEV = 57896
const MEDIAN = 57897
const CLUSTER_CENTERS = 57898
const KMEANS = 57899
const STDDEV_POP = 57900
const STDDEV_SAMP = 57901
const SUBDATE = 57902
const SUBSTR = 57903
const SUBSTRING = 57904
const SUM = 57905
const SYSDATE = 57906
const SYSTEM_USER = 57907
const TRANSLATE = 57908
const TRIM = 57909
const VARIANCE = 57910
const VAR_POP = 57911
const VAR_SAMP = 57912
const AVG = 57913
const RANK = 57914
const ROW_NUMBER = 57915
const DENSE_RANK = 57916
const BIT_CAST = 57917
const BITMAP_BIT_POSITION = 57918
const BITMAP_BUCKET_NUMBER = 57919
const BITMAP_COUNT = 57920
const BITMAP_CONSTRUCT_AGG = 57921
const BITMAP_OR_AGG = 57922
const NEXTVAL = 57923
const SETVAL = 57924
const CURRVAL = 57925
const LASTVAL = 57926
const ARROW = 57927
const ROW = 57928
const OUTFILE = 57929
const HEADER = 57930
const MAX_FILE_SIZE = 57931
const FORCE_QUOTE = 57932
const PARALLEL = 57933
const STRICT = 57934
const UNUSED = 57935
const BINDINGS = 57936
const DO = 57937
const DECLARE = 57938
const LOOP = 57939
const WHILE = 57940
const LEAVE = 57941
const ITERATE = 57942
const UNTIL = 57943
const CALL = 57944
const PREV = 57945
const SLIDING = 57946
const FILL = 57947
const SPBEGIN = 57948
const BACKEND = 57949
const SERVERS = 57950
const HANDLER = 57951
const PERCENT = 57952
const SAMPLE = 57953
const MO_TS = 57954
const KILL = 57955
const BACKUP = 57956
const FILESYSTEM = 57957
const PARALLELISM = 57958
const RESTORE = 57959
const QUERY_RESULT = 57960

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12146

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 123,
	11, 741,
	22, 741,
	-2, 734,
	-1, 144,
	239, 1143,
	241, 1042,
	-2, 1089,
	-1, 169,
	43, 564,
	241, 564,
	268, 571,
	269, 571,
	465, 564,
	-2, 601,
	-1, 210,
	639, 1901,
	-2, 477,
	-1, 511,
	639, 2020,
	-2, 365,
	-1, 569,
	639, 2079,
	-2, 363,
	-1, 570,
	639, 2080,
	-2, 364,
	-1, 571,
	639, 2081,
	-2, 366,
	-1, 704,
	320, 151,
	437, 151,
	438, 151,
	-2, 1806,
	-1, 770,
	83, 1593,
	-2, 1956,
	-1, 771,
	83, 1611,
	-2, 1927,
	-1, 775,
	83, 1612,
	-2, 1955,
	-1, 808,
	83, 1520,
	-2, 2153,
	-1, 809,
	83, 1521,
	-2, 2152,
	-1, 810,
	83, 1522,
	-2, 2142,
	-1, 811,
	83, 2114,
	-2, 2135,
	-1, 812,
	83, 2115,
	-2, 2136,
	-1, 813,
	83, 2116,
	-2, 2144,
	-1, 814,
	83, 2117,
	-2, 2124,
	-1, 815,
	83, 2118,
	-2, 2133,
	-1, 816,
	83, 2119,
	-2, 2145,
	-1, 817,
	83, 2120,
	-2, 2146,
	-1, 818,
	83, 2121,
	-2, 2151,
	-1, 819,
	83, 2122,
	-2, 2156,
	-1, 820,
	83, 2123,
	-2, 2157,
	-1, 821,
	83, 1589,
	-2, 1994,
	-1, 822,
	83, 1590,
	-2, 1790,
	-1, 823,
	83, 1591,
	-2, 2003,
	-1, 824,
	83, 1592,
	-2, 1799,
	-1, 826,
	83, 1595,
	-2, 1807,
	-1, 827,
	83, 1596,
	-2, 2027,
	-1, 829,
	83, 1599,
	-2, 1826,
	-1, 831,
	83, 1601,
	-2, 2039,
	-1, 832,
	83, 1602,
	-2, 2038,
	-1, 833,
	83, 1603,
	-2, 1870,
	-1, 834,
	83, 1604,
	-2, 1951,
	-1, 837,
	83, 1607,
	-2, 2050,
	-1, 839,
	83, 1609,
	-2, 2053,
	-1, 840,
	83, 1610,
	-2, 2055,
	-1, 841,
	83, 1613,
	-2, 2063,
	-1, 842,
	83, 1614,
	-2, 1936,
	-1, 843,
	83, 1615,
	-2, 1981,
	-1, 844,
	83, 1616,
	-2, 1946,
	-1, 845,
	83, 1617,
	-2, 1971,
	-1, 856,
	83, 1498,
	-2, 2147,
	-1, 857,
	83, 1499,
	-2, 2148,
	-1, 858,
	83, 1500,
	-2, 2149,
	-1, 947,
	460, 601,
	461, 601,
	-2, 565,
	-1, 994,
	125, 1790,
	136, 1790,
	156, 1790,
	-2, 1764,
	-1, 1110,
	22, 768,
	-2, 717,
	-1, 1216,
	11, 741,
	22, 741,
	-2, 1378,
	-1, 1298,
	22, 768,
	-2, 717,
	-1, 1628,
	83, 1664,
	-2, 1953,
	-1, 1629,
	83, 1665,
	-2, 1954,
	-1, 1786,
	84, 919,
	-2, 925,
	-1, 2219,
	108, 1081,
	152, 1081,
	191, 1081,
	194, 1081,
	281, 1081,
	-2, 1074,
	-1, 2371,
	11, 741,
	22, 741,
	-2, 862,
	-1, 2403,
	84, 1750,
	157, 1750,
	-2, 1938,
	-1, 2404,
	84, 1750,
	157, 1750,
	-2, 1937,
	-1, 2405,
	84, 1726,
	157, 1726,
	-2, 1924,
	-1, 2406,
	84, 1727,
	157, 1727,
	-2, 1929,
	-1, 2407,
	84, 1728,
	157, 1728,
	-2, 1858,
	-1, 2408,
	84, 1729,
	157, 1729,
	-2, 1852,
	-1, 2409,
	84, 1730,
	157, 1730,
	-2, 1780,
	-1, 2410,
	84, 1731,
	157, 1731,
	-2, 1926,
	-1, 2411,
	84, 1732,
	157, 1732,
	-2, 1856,
	-1, 2412,
	84, 1733,
	157, 1733,
	-2, 1851,
	-1, 2413,
	84, 1734,
	157, 1734,
	-2, 1840,
	-1, 2414,
	84, 1750,
	157, 1750,
	-2, 1841,
	-1, 2415,
	84, 1750,
	157, 1750,
	-2, 1842,
	-1, 2417,
	84, 1739,
	157, 1739,
	-2, 1971,
	-1, 2418,
	84, 1717,
	157, 1717,
	-2, 1956,
	-1, 2419,
	84, 1748,
	157, 1748,
	-2, 1927,
	-1, 2420,
	84, 1748,
	157, 1748,
	-2, 1955,
	-1, 2421,
	84, 1748,
	157, 1748,
	-2, 1808,
	-1, 2422,
	84, 1746,
	157, 1746,
	-2, 1946,
	-1, 2423,
	84, 1743,
	157, 1743,
	-2, 1831,
	-1, 2424,
	83, 1698,
	84, 1698,
	157, 1698,
	395, 1698,
	396, 1698,
	397, 1698,
	-2, 1779,
	-1, 2425,
	83, 1699,
	84, 1699,
	157, 1699,
	395, 1699,
	396, 1699,
	397, 1699,
	-2, 1781,
	-1, 2426,
	83, 1700,
	84, 1700,
	157, 1700,
	395, 1700,
	396, 1700,
	397, 1700,
	-2, 1999,
	-1, 2427,
	83, 1702,
	84, 1702,
	157, 1702,
	395, 1702,
	396, 1702,
	397, 1702,
	-2, 1928,
	-1, 2428,
	83, 1704,
	84, 1704,
	157, 1704,
	395, 1704,
	396, 1704,
	397, 1704,
	-2, 1910,
	-1, 2429,
	83, 1706,
	84, 1706,
	157, 1706,
	395, 1706,
	396, 1706,
	397, 1706,
	-2, 1857,
	-1, 2430,
	83, 1708,
	84, 1708,
	157, 1708,
	395, 1708,
	396, 1708,
	397, 1708,
	-2, 1836,
	-1, 2431,
	83, 1709,
	84, 1709,
	157, 1709,
	395, 1709,
	396, 1709,
	397, 1709,
	-2, 1837,
	-1, 2432,
	83, 1711,
	84, 1711,
	157, 1711,
	395, 1711,
	396, 1711,
	397, 1711,
	-2, 1778,
	-1, 2433,
	84, 1753,
	157, 1753,
	395, 1753,
	396, 1753,
	397, 1753,
	-2, 1813,
	-1, 2434,
	84, 1753,
	157, 1753,
	395, 1753,
	396, 1753,
	397, 1753,
	-2, 1827,
	-1, 2435,
	84, 1756,
	157, 1756,
	395, 1756,
	396, 1756,
	397, 1756,
	-2, 1809,
	-1, 2436,
	84, 1756,
	157, 1756,
	395, 1756,
	396, 1756,
	397, 1756,
	-2, 1873,
	-1, 2437,
	84, 1753,
	157, 1753,
	395, 1753,
	396, 1753,
	397, 1753,
	-2, 1894,
	-1, 2640,
	108, 1081,
	152, 1081,
	191, 1081,
	194, 1081,
	281, 1081,
	-2, 1075,
	-1, 2658,
	81, 661,
	157, 661,
	-2, 1258,
	-1, 3063,
	194, 1081,
	305, 1346,
	-2, 1318,
	-1, 3230,
	108, 1081,
	152, 1081,
	191, 1081,
	194, 1081,
	-2, 1199,
	-1, 3232,
	108, 1081,
	152, 1081,
	191, 1081,
	194, 1081,
	-2, 1199,
	-1, 3244,
	81, 661,
	157, 661,
	-2, 1258,
	-1, 3266,
	194, 1081,
	305, 1346,
	-2, 1319,
	-1, 3406,
	108, 1081,
	152, 1081,
	191, 1081,
	194, 1081,
	-2, 1200,
	-1, 3433,
	84, 1161,
	157, 1161,
	-2, 1081,
	-1, 3565,
	84, 1161,
	157, 1161,
	-2, 1081,
	-1, 3717,
	84, 1165,
	157, 1165,
	-2, 1081,
	-1, 3765,
	84, 1166,
	157, 1166,
	-2, 1081,
}

const yyPrivate = 57344

const yyLast = 49363

var yyAct = [...]int{
	737, 714, 3811, 739, 3785, 2688, 199, 1871, 3721, 3804,
	3251, 3727, 1608, 3622, 708, 3345, 3728, 3082, 3720, 3565,
	3049, 723, 3648, 3605, 3679, 3543, 3152, 2492, 3461, 2682,
	3280, 3599, 716, 1251, 3153, 3626, 3393, 3564, 3394, 3391,
	3489, 767, 605, 1383, 2685, 993, 3534, 1522, 1111, 3349,
	1389, 3606, 1819, 1445, 623, 3608, 629, 629, 3217, 3340,
	59, 3058, 629, 646, 655, 2661, 1655, 655, 3375, 3413,
	37, 2267, 1105, 1611, 3019, 3267, 3403, 2980, 3150, 3233,
	184, 2796, 2797, 3008, 1604, 1962, 3205, 2778, 3408, 2712,
	712, 3078, 3067, 2795, 3060, 3235, 3192, 2074, 2859, 2527,
	3108, 3138, 2399, 2032, 2819, 1669, 2270, 1959, 3118, 2792,
	663, 2401, 2991, 2629, 2987, 1927, 1831, 2985, 2981, 1323,
	706, 2983, 667, 1534, 3066, 2641, 2365, 3028, 2691, 1438,
	2249, 2982, 2230, 652, 2906, 2197, 2183, 1977, 2963, 122,
	2300, 2348, 2057, 711, 2471, 2041, 2978, 922, 2832, 1101,
	2182, 2040, 1761, 1518, 36, 2033, 2453, 2842, 2005, 1955,
	1523, 1930, 1526, 1356, 2366, 1511, 2069, 2070, 1928, 2612,
	2353, 987, 2617, 605, 2714, 2693, 1861, 2653, 1850, 2268,
	1795, 195, 8, 194, 7, 6, 2229, 2559, 2397, 1050,
	1602, 715, 622, 2071, 2219, 1485, 1354, 1454, 2209, 199,
	2104, 199, 1424, 1041, 1042, 1393, 2081, 705, 2560, 1593,
	629, 1035, 1036, 604, 724, 956, 1040, 2263, 1372, 1124,
	1642, 1555, 2036, 2039, 1662, 27, 1537, 713, 2021, 1492,
	1995, 1601, 15, 660, 1791, 33, 1830, 1002, 23, 986,
	1423, 2373, 641, 1368, 707, 1794, 16, 638, 14, 1392,
	921, 1421, 860, 1670, 670, 1477, 100, 669, 1484, 24,
	654, 17, 10, 1384, 898, 175, 185, 181, 919, 1360,
	1296, 1252, 666, 942, 2078, 1547, 904, 3528, 2595, 1037,
	2595, 1039, 1184, 1185, 1186, 1183, 2375, 2595, 651, 1184,
	1185, 1186, 1183, 1038, 3421, 650, 1546, 2876, 648, 1184,
	1185, 1186, 1183, 2875, 3247, 3035, 2088, 1106, 3220, 647,
	2250, 649, 2515, 1107, 3145, 2459, 999, 2457, 1774, 2456,
	2454, 1499, 1495, 1033, 1034, 634, 183, 658, 862, 863,
	624, 1001, 2181, 1315, 2956, 2953, 707, 1034, 625, 1034,
	2958, 2955, 3796, 2587, 2585, 1406, 1768, 1311, 1497, 3338,
	3270, 1184, 1185, 1186, 1183, 1184, 1185, 1186, 1183, 1106,
	2855, 1607, 2853, 2010, 3594, 8, 3496, 7, 3490, 1032,
	3341, 3151, 2054, 1246, 3610, 2035, 861, 2933, 2027, 182,
	55, 171, 145, 2308, 182, 2589, 1146, 182, 872, 3282,
	2501, 2075, 1533, 3380, 3702, 630, 182, 55, 171, 145,
	1021, 182, 3273, 182, 182, 2220, 182, 1318, 182, 3550,
	182, 3376, 3234, 3268, 2221, 2509, 1532, 3516, 3290, 3291,
	3659, 1541, 1553, 2647, 3269, 182, 55, 171, 145, 1464,
	1463, 912, 2878, 913, 1462, 121, 1005, 1003, 182, 55,
	171, 145, 182, 55, 171, 145, 1004, 665, 1329, 176,
	2931, 1538, 1550, 3551, 176, 1576, 2867, 176, 121, 1346,
	1122, 3274, 2086, 2790, 2391, 2214, 176, 1776, 1319, 1181,
	893, 2645, 1022, 1540, 1552, 2392, 176, 3518, 176, 2379,
	176, 2825, 2378, 1972, 907, 2380, 903, 1402, 1939, 1564,
	1403, 1161, 2826, 2827, 1162, 176, 1425, 873, 1427, 2472,
	1154, 965, 1119, 1156, 997, 998, 3362, 851, 176, 850,
	852, 853, 176, 854, 855, 2614, 2957, 2954, 1940, 1941,
	1380, 2648, 1164, 1778, 1779, 2615, 1390, 1391, 1388, 1845,
	1610, 1157, 1387, 1390, 1391, 1174, 1179, 996, 995, 3731,
	3732, 3613, 885, 1016, 1011, 1006, 1010, 1014, 3053, 3613,
	3692, 1594, 3612, 3699, 1598, 3289, 3611, 2271, 3612, 3691,
	3611, 3690, 3752, 2170, 3695, 3681, 3051, 2090, 3789, 3790,
	3597, 1019, 2860, 3154, 2613, 1009, 1405, 3681, 1597, 2861,
	1328, 2862, 3278, 3600, 3601, 3602, 3603, 3684, 3493, 1614,
	2496, 2590, 3154, 1498, 1496, 1127, 1116, 144, 1585, 180,
	3619, 3167, 1159, 3213, 3275, 3279, 3277, 3276, 1946, 1127,
	2620, 1150, 1589, 909, 1950, 902, 2733, 1956, 3002, 169,
	3206, 2341, 2082, 2208, 906, 905, 1017, 629, 629, 2018,
	3385, 910, 2896, 1020, 3704, 3705, 2604, 1152, 629, 1115,
	3000, 887, 3284, 3285, 3361, 894, 2992, 3700, 3701, 1155,
	1158, 3292, 3363, 1505, 1504, 1007, 3697, 655, 655, 2894,
	629, 2506, 1599, 3520, 3521, 901, 1160, 1176, 701, 168,
	1166, 703, 2306, 1167, 1149, 1151, 702, 1177, 1178, 1018,
	3339, 2782, 2854, 2343, 911, 3525, 1596, 2344, 2345, 900,
	3292, 3382, 2602, 899, 3730, 875, 2997, 2998, 3693, 886,
	3514, 1169, 3271, 892, 2588, 1002, 1613, 1612, 3283, 3196,
	3307, 2349, 2999, 652, 652, 1044, 2087, 2213, 1378, 1008,
	3508, 3081, 3509, 1224, 1187, 890, 2065, 1415, 2603, 2996,
	1171, 876, 1217, 1330, 621, 1970, 1971, 1548, 3503, 1404,
	3760, 1227, 1314, 1163, 3304, 3029, 1545, 1172, 1173, 3079,
	3080, 975, 1153, 3055, 1620, 1623, 1624, 657, 3527, 3170,
	3017, 2900, 3555, 910, 3641, 1621, 1235, 1114, 2594, 1115,
	2076, 3636, 2654, 656, 2076, 2076, 3511, 2788, 1002, 2216,
	1108, 1165, 3547, 3297, 999, 1107, 1107, 1141, 1107, 891,
	2964, 1129, 1128, 2093, 2095, 2096, 1015, 3252, 3627, 1001,
	3643, 1255, 3649, 1595, 3050, 1129, 1128, 3510, 2687, 2877,
	2683, 2684, 1367, 2687, 3259, 1121, 2874, 3084, 3308, 653,
	1170, 3618, 3452, 3807, 3822, 2318, 2109, 2077, 1034, 1034,
	2317, 1034, 1012, 1034, 3352, 1013, 1034, 1034, 3288, 2394,
	1107, 1218, 3703, 2994, 1132, 1168, 2338, 2339, 653, 2626,
	2266, 3549, 2455, 2762, 2089, 1434, 1500, 999, 1433, 1382,
	1381, 653, 1139, 1365, 2286, 653, 908, 1364, 651, 651,
	2266, 2289, 1001, 3441, 664, 650, 650, 1317, 648, 648,
	1363, 56, 3650, 3447, 1130, 1118, 1120, 1326, 623, 647,
	647, 649, 649, 861, 3535, 971, 969, 1256, 970, 177,
	178, 2586, 179, 2273, 3519, 897, 1110, 146, 1294, 3059,
	56, 1299, 146, 3381, 3287, 146, 1138, 1134, 1135, 3556,
	2619, 922, 1102, 56, 146, 1390, 1391, 56, 2288, 146,
	3003, 146, 146, 3569, 146, 2510, 146, 1140, 146, 3548,
	1225, 1777, 1379, 1390, 1391, 2897, 1220, 1221, 1222, 1223,
	3336, 3236, 1957, 146, 2952, 2309, 3719, 2993, 912, 2283,
	913, 3808, 3157, 1109, 998, 1103, 146, 3508, 1324, 3509,
	146, 2287, 629, 665, 1417, 3696, 3522, 2623, 2624, 3056,
	605, 605, 2837, 2838, 976, 1386, 2273, 2276, 3678, 605,
	605, 1215, 2622, 1449, 1449, 1622, 629, 3386, 2734, 1947,
	2735, 2736, 1422, 1590, 3615, 1949, 972, 3371, 3083, 3075,
	1333, 1334, 1335, 1336, 1337, 2968, 1339, 2502, 655, 1478,
	623, 2383, 1345, 3511, 1488, 1488, 2304, 2535, 3504, 2079,
	1338, 3454, 3505, 1146, 2094, 199, 3079, 3080, 1487, 1487,
	2272, 2598, 2995, 2276, 605, 2274, 1456, 1451, 2899, 1344,
	1343, 1267, 1268, 1342, 3510, 1093, 1089, 1090, 1091, 1092,
	1341, 2540, 3568, 2539, 2538, 2536, 659, 966, 3199, 3076,
	974, 2633, 2636, 2637, 2638, 2634, 2635, 1447, 1447, 2731,
	1327, 3462, 3463, 3464, 3468, 3466, 3467, 3465, 1359, 3193,
	1416, 1351, 3805, 3806, 1366, 1530, 2105, 1506, 966, 2275,
	1535, 1376, 2763, 2765, 2766, 2767, 2764, 1544, 914, 1395,
	1396, 3015, 1398, 1399, 2600, 1400, 3448, 3449, 2277, 1145,
	1443, 1444, 3443, 2272, 2266, 2271, 3442, 2269, 2274, 1781,
	2537, 1300, 1574, 1298, 3718, 2821, 2823, 2091, 2092, 1369,
	1373, 1373, 1373, 2189, 1331, 1322, 1449, 973, 1449, 1115,
	968, 1429, 1431, 967, 1374, 1375, 1569, 1570, 1554, 1782,
	1441, 1442, 1002, 3372, 1369, 1369, 1332, 2282, 2969, 1002,
	2673, 2280, 1539, 2188, 2277, 1780, 916, 917, 918, 1551,
	2186, 968, 2275, 1775, 967, 2908, 2907, 2753, 2754, 1353,
	877, 3158, 652, 1025, 1030, 1031, 2330, 1615, 1616, 1617,
	1618, 1619, 1407, 1408, 1584, 878, 881, 3414, 2191, 2190,
	2211, 911, 1479, 1320, 1321, 1501, 1449, 1509, 1394, 1512,
	1513, 1397, 2363, 966, 3823, 1520, 1521, 1112, 2245, 3818,
	1514, 1515, 1361, 1668, 2139, 2200, 1432, 2138, 1361, 1660,
	3016, 3813, 3688, 1664, 1665, 1666, 1667, 1717, 1573, 3802,
	3767, 1525, 1701, 1543, 1529, 1528, 1572, 880, 2201, 2202,
	1711, 883, 882, 2599, 1112, 1591, 1457, 2303, 634, 2541,
	2542, 3077, 3739, 1182, 1143, 3504, 1470, 1609, 1476, 3607,
	977, 3115, 3733, 1489, 1184, 1185, 1186, 1183, 1630, 1631,
	1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641,
	1656, 1490, 2084, 2822, 1653, 1654, 968, 1146, 2474, 967,
	1182, 2752, 1763, 1115, 3814, 1606, 1184, 1185, 1186, 1183,
	3111, 3034, 3768, 3768, 1783, 2659, 2210, 3202, 1587, 1478,
	2929, 3169, 3715, 1625, 1792, 1449, 1797, 1798, 1759, 1800,
	1417, 629, 1144, 2175, 1702, 3740, 629, 651, 2364, 1449,
	3669, 1144, 1726, 922, 650, 3531, 1820, 648, 1562, 1582,
	2501, 1565, 2244, 1449, 1563, 1707, 1708, 1709, 647, 1417,
	649, 2364, 1998, 1182, 646, 1557, 1824, 3115, 1723, 3644,
	1579, 1724, 1578, 1762, 3632, 1592, 1027, 1028, 1029, 3088,
	1583, 3086, 1716, 1581, 1844, 1580, 1577, 2660, 1737, 1738,
	1840, 1605, 1600, 1851, 1851, 3716, 1417, 2962, 1417, 1417,
	1295, 2960, 629, 629, 2118, 1792, 1921, 1758, 3588, 1449,
	1924, 1925, 1937, 3531, 1644, 1184, 1185, 1186, 1183, 2364,
	3587, 865, 866, 867, 868, 2840, 605, 3582, 1449, 1651,
	1652, 1770, 3581, 3580, 1184, 1185, 1186, 1183, 1848, 1788,
	1789, 1790, 2084, 1763, 3579, 2606, 1801, 3633, 1763, 1763,
	1799, 1803, 1804, 1805, 1806, 2660, 629, 1792, 1449, 2591,
	1982, 2115, 629, 629, 629, 663, 663, 3559, 865, 866,
	867, 868, 1992, 1993, 1994, 3558, 2491, 2479, 2000, 3530,
	2117, 3589, 2394, 3313, 3261, 199, 2075, 3226, 199, 199,
	1973, 199, 1873, 2234, 3185, 1938, 2259, 1603, 2008, 1919,
	3531, 2011, 1996, 2180, 2014, 3531, 3531, 2016, 2174, 3181,
	1765, 2173, 1854, 1731, 1853, 1146, 3096, 3531, 1828, 1829,
	1197, 1207, 1208, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1199, 1717, 1717, 2043, 2146, 1838, 1839, 2816, 1760, 2066,
	2084, 1965, 1966, 1717, 1717, 2566, 1460, 1951, 2084, 1943,
	2059, 1945, 3531, 1766, 1968, 1849, 2394, 3262, 1352, 1369,
	3227, 1963, 1964, 2058, 2558, 2009, 1659, 3186, 2012, 2013,
	870, 2015, 1852, 1373, 1787, 1822, 1823, 1704, 2517, 1820,
	1435, 1981, 3182, 1449, 2073, 1373, 1837, 2499, 2053, 3097,
	2487, 1002, 1816, 1817, 1002, 1958, 2481, 1827, 1842, 1984,
	1985, 1986, 2476, 1002, 1539, 2468, 2466, 2045, 2464, 3212,
	2364, 1833, 1832, 3830, 1834, 1835, 1821, 870, 1182, 1699,
	1700, 2462, 1703, 3815, 3247, 2844, 2662, 652, 1841, 2233,
	1718, 2067, 2176, 2153, 1855, 1856, 1836, 1182, 2504, 1918,
	2152, 2503, 2137, 1725, 2049, 1727, 2495, 1728, 1729, 1730,
	3478, 1182, 1843, 1926, 1923, 1846, 1847, 2253, 2134, 1942,
	2234, 1944, 2128, 2477, 2108, 1952, 2119, 2127, 2113, 2482,
	999, 2064, 2273, 2276, 2126, 2477, 2038, 3311, 2469, 2467,
	3824, 2463, 999, 2003, 1990, 1001, 1796, 1559, 2038, 1980,
	2083, 1979, 1232, 1215, 2463, 1131, 1002, 1001, 1987, 1988,
	1812, 1566, 2234, 1099, 1967, 2175, 1182, 1094, 1199, 2125,
	2004, 2006, 3039, 1182, 1825, 1182, 2891, 2132, 1198, 1197,
	1207, 1208, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1199,
	2102, 2103, 1439, 1706, 1705, 1182, 2023, 2141, 3030, 2149,
	1182, 1706, 1705, 1440, 2154, 2155, 2156, 1182, 3793, 2159,
	2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2098,
	2044, 1437, 3637, 2084, 1690, 2050, 2185, 2052, 2187, 2055,
	1796, 3415, 879, 1370, 1567, 999, 706, 2063, 3239, 629,
	629, 629, 651, 1202, 1203, 1204, 1205, 1206, 1199, 650,
	1001, 2068, 648, 2061, 629, 629, 629, 629, 3237, 2062,
	1401, 2301, 3529, 647, 2277, 649, 3638, 2231, 3500, 2272,
	2266, 2271, 1650, 2269, 2274, 3416, 3031, 2237, 1417, 1603,
	1357, 3445, 3240, 3444, 1358, 2261, 2454, 3430, 1647, 1649,
	1646, 2097, 1648, 3387, 1411, 1412, 3219, 1414, 3116, 1418,
	1419, 1420, 3238, 2106, 1417, 1743, 2147, 2148, 3107, 2150,
	3101, 1644, 3098, 1736, 3045, 3010, 2157, 2099, 2785, 2784,
	3032, 2295, 1436, 2631, 2596, 2100, 2101, 2514, 2275, 2480,
	2385, 1465, 1466, 1467, 1468, 1469, 2111, 1471, 1472, 1473,
	1474, 1475, 740, 750, 2048, 1481, 1482, 1483, 1210, 2047,
	1214, 1371, 741, 3143, 742, 746, 749, 745, 743, 744,
	2046, 1357, 1348, 884, 1347, 1358, 1211, 1213, 1209, 2302,
	1212, 1198, 1197, 1207, 1208, 1200, 1201, 1202, 1203, 1204,
	1205, 1206, 1199, 2368, 2368, 1937, 2368, 1686, 1117, 1184,
	1185, 1186, 1183, 2524, 1683, 2448, 2007, 1493, 1685, 1682,
	1684, 1688, 1689, 1663, 605, 605, 1687, 747, 1763, 1663,
	1763, 2112, 1115, 2169, 2171, 2172, 2846, 1784, 1449, 629,
	2255, 1184, 1185, 1186, 1183, 1493, 3689, 2007, 1763, 1763,
	1183, 2252, 3146, 2254, 629, 3457, 2265, 3456, 2177, 748,
	1115, 2438, 623, 2194, 1255, 1002, 2264, 1488, 2863, 1937,
	1186, 1183, 2443, 2212, 2445, 2246, 2723, 2721, 199, 2699,
	2697, 1487, 1184, 1185, 1186, 1183, 2550, 3388, 3389, 2307,
	3436, 3144, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 3724,
	3798, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327,
	2328, 2329, 3797, 2331, 2332, 2333, 2334, 2335, 2484, 2336,
	2372, 2381, 2389, 2382, 1373, 2258, 1184, 1185, 1186, 1183,
	2370, 2483, 2374, 2486, 2238, 2497, 1234, 2251, 2579, 2073,
	2580, 2386, 2387, 3821, 999, 3743, 1449, 3714, 1449, 1233,
	1449, 3383, 1721, 2278, 2279, 1115, 2284, 2241, 2449, 1001,
	1256, 2910, 2247, 2516, 3563, 2248, 3713, 1722, 2239, 2240,
	1693, 1694, 1695, 1696, 1697, 1698, 1691, 1692, 2242, 2243,
	1184, 1185, 1186, 1183, 2442, 3639, 3584, 3572, 2402, 1449,
	2544, 2396, 2346, 3562, 3552, 1429, 1431, 2525, 3210, 2116,
	2531, 1184, 1185, 1186, 1183, 2551, 3820, 2545, 2546, 3384,
	1449, 2376, 2458, 2493, 2494, 2548, 2549, 3491, 1198, 1197,
	1207, 1208, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1199,
	3418, 2554, 2507, 3417, 2774, 2772, 2390, 1184, 1185, 1186,
	1183, 3253, 2543, 1207, 1208, 1200, 1201, 1202, 1203, 1204,
	1205, 1206, 1199, 3241, 2439, 3209, 3211, 2597, 3001, 1615,
	1763, 2770, 2441, 2552, 2759, 2393, 2555, 2556, 2887, 2858,
	1115, 2857, 2757, 1447, 1115, 1184, 1185, 1186, 1183, 2122,
	2756, 1449, 2755, 2511, 2627, 2628, 2532, 1184, 1185, 1186,
	1183, 1921, 2773, 2771, 1447, 2747, 2528, 2741, 2528, 2658,
	2740, 2739, 2553, 2738, 2592, 2664, 1184, 1185, 1186, 1183,
	2513, 1184, 1185, 1186, 1183, 2526, 2508, 2470, 2179, 2769,
	2450, 2522, 2758, 2026, 2675, 2630, 2025, 2024, 2498, 2668,
	2669, 2583, 2500, 2020, 1115, 2440, 2505, 1184, 1185, 1186,
	1183, 2019, 2696, 1976, 2447, 2489, 1494, 1975, 1974, 1115,
	1115, 1115, 1851, 1002, 2114, 1115, 1560, 2707, 2708, 2709,
	2710, 1115, 2717, 2646, 2718, 2719, 3625, 2720, 2922, 2722,
	1313, 2518, 2519, 1184, 1185, 1186, 1183, 2534, 2642, 3218,
	2717, 3109, 2986, 1097, 2643, 1184, 1185, 1186, 1183, 3523,
	3524, 3817, 2368, 1184, 1185, 1186, 1183, 701, 2607, 3816,
	703, 3346, 2402, 2521, 3791, 702, 2775, 3759, 2689, 2655,
	2561, 2562, 3758, 3755, 605, 1983, 2567, 3676, 1873, 2616,
	1921, 1115, 1937, 1937, 1937, 1937, 3621, 3392, 2921, 2665,
	1184, 1185, 1186, 1183, 1115, 1937, 3427, 3604, 2368, 2677,
	1096, 3656, 752, 123, 3595, 3576, 2694, 3367, 123, 2130,
	2694, 3571, 2690, 3570, 1449, 1184, 1185, 1186, 1183, 3526,
	2695, 2625, 2608, 3492, 3438, 629, 629, 2701, 3399, 3369,
	3366, 2609, 2666, 2611, 1184, 1185, 1186, 1183, 2702, 2703,
	3365, 2671, 2672, 2706, 8, 2657, 7, 2649, 2663, 2713,
	1198, 1197, 1207, 1208, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1199, 635, 3344, 2676, 123, 2679, 1603, 3342, 3321,
	3320, 3317, 3315, 2729, 2730, 2812, 2129, 2692, 2779, 2698,
	3248, 199, 3208, 3207, 3204, 3194, 199, 3178, 2745, 2746,
	2705, 3176, 3104, 3103, 3094, 3093, 3011, 2973, 1935, 2850,
	3355, 2852, 2972, 1184, 1185, 1186, 1183, 2967, 1717, 2798,
	1717, 2184, 2781, 2873, 2737, 2901, 2749, 2898, 2856, 2830,
	1763, 2768, 2798, 2760, 2750, 1763, 2886, 1184, 1185, 1186,
	1183, 2674, 1449, 2748, 2744, 2893, 2058, 2743, 2742, 2593,
	2780, 2667, 807, 806, 2841, 2783, 2670, 2490, 2029, 2786,
	2799, 2800, 2801, 2802, 628, 628, 2813, 2022, 1773, 1772,
	636, 2847, 2815, 2811, 1561, 1263, 2851, 1002, 1259, 1258,
	1100, 2904, 874, 3652, 3513, 2831, 3512, 2868, 1002, 1000,
	2828, 3501, 182, 3368, 171, 145, 123, 3353, 2879, 3232,
	3231, 1762, 2814, 3230, 3201, 2926, 2872, 3190, 3188, 3187,
	1513, 123, 1796, 123, 1520, 1521, 3184, 3183, 3177, 3175,
	1514, 1515, 2870, 3159, 3149, 3354, 2915, 3148, 2917, 3134,
	3133, 3301, 2880, 3040, 2976, 1525, 2959, 2927, 1529, 1528,
	2970, 2920, 2912, 2911, 2971, 2845, 2895, 2905, 2839, 2849,
	2848, 1115, 1184, 1185, 1186, 1183, 2605, 2989, 1184, 1185,
	1186, 1183, 176, 2869, 2465, 2890, 3173, 3005, 2866, 2461,
	2864, 2871, 2460, 629, 2883, 2882, 2158, 2151, 2881, 2145,
	2144, 2143, 2142, 2925, 2140, 3020, 1115, 2136, 2135, 629,
	2133, 1115, 1115, 1184, 1185, 1186, 1183, 2924, 2124, 2121,
	1937, 2231, 2923, 3038, 2903, 2909, 2902, 2120, 2028, 2889,
	1184, 1185, 1186, 1183, 1756, 1755, 2918, 2919, 636, 1754,
	1720, 1719, 2295, 1710, 1184, 1185, 1186, 1183, 3014, 1184,
	1185, 1186, 1183, 2916, 3065, 1461, 3068, 2961, 3068, 3068,
	1459, 2913, 2914, 1115, 182, 3742, 1002, 1253, 1002, 3651,
	3590, 3578, 3573, 1002, 1508, 3072, 3472, 3455, 3023, 2975,
	3451, 3429, 3089, 3027, 3412, 3329, 3327, 3299, 3085, 2642,
	1449, 1449, 2966, 2965, 3052, 3054, 3298, 3295, 3294, 1002,
	3260, 3087, 2974, 3257, 3255, 2934, 2935, 3221, 1519, 3048,
	1510, 2936, 2937, 2938, 2939, 1524, 2940, 2941, 2942, 2943,
	2944, 2945, 2946, 2947, 2948, 2949, 3013, 1527, 2824, 3006,
	3007, 3425, 1516, 1355, 176, 3036, 2776, 629, 2700, 3773,
	2577, 2651, 2989, 3090, 3091, 999, 3064, 3125, 2650, 2644,
	2610, 1417, 3022, 3037, 1921, 1921, 3073, 3025, 3026, 2578,
	1001, 3042, 2265, 3063, 3047, 2475, 3033, 1184, 1185, 1186,
	1183, 2384, 2264, 2337, 1447, 1447, 2232, 2203, 2178, 3071,
	1645, 3074, 3069, 3070, 2928, 1198, 1197, 1207, 1208, 1200,
	1201, 1202, 1203, 1204, 1205, 1206, 1199, 176, 3046, 1989,
	1786, 1115, 1769, 1588, 1542, 2544, 1200, 1201, 1202, 1203,
	1204, 1205, 1206, 1199, 3147, 1517, 1312, 1297, 1732, 1733,
	1734, 1735, 3668, 2576, 1739, 1740, 1741, 1742, 1744, 1745,
	1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1198, 1197,
	1207, 1208, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1199,
	1184, 1185, 1186, 1183, 1293, 1292, 3100, 1291, 3099, 3105,
	629, 3106, 1290, 3112, 3113, 2575, 1289, 3110, 1288, 1287,
	3123, 1286, 1285, 3102, 3095, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1188, 3127, 2520, 1284, 1283, 1282, 3130, 3131,
	3132, 1281, 1184, 1185, 1186, 1183, 3041, 3172, 2574, 1280,
	1414, 3043, 3044, 3136, 3174, 1279, 1278, 3142, 1198, 1197,
	1207, 1208, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1199,
	1277, 3009, 2573, 1276, 1275, 1184, 1185, 1186, 1183, 2402,
	3197, 3160, 3771, 2572, 1274, 3189, 3124, 2571, 1273, 1272,
	1271, 3162, 3161, 1270, 1269, 1266, 1265, 1264, 3166, 1184,
	1185, 1186, 1183, 1262, 1261, 2805, 2570, 1260, 1257, 3179,
	1184, 1185, 1186, 1183, 1184, 1185, 1186, 1183, 1250, 1249,
	3171, 3165, 2569, 1247, 1246, 123, 123, 1000, 3225, 1245,
	1244, 1243, 2528, 1184, 1185, 1186, 1183, 1242, 3434, 2568,
	1241, 1240, 1239, 1238, 2368, 1937, 3244, 1237, 1002, 1184,
	1185, 1186, 1183, 1236, 1231, 1002, 1230, 1229, 3200, 2804,
	2565, 1228, 1148, 1098, 3666, 3203, 1184, 1185, 1186, 1183,
	3263, 3664, 3195, 1115, 3119, 3120, 3114, 3729, 3191, 3662,
	2564, 3296, 3065, 2236, 2218, 1136, 1115, 1184, 1185, 1186,
	1183, 3122, 3126, 2632, 2395, 2031, 2350, 1115, 1147, 3310,
	1216, 2563, 2803, 1449, 2488, 628, 1104, 1184, 1185, 1186,
	1183, 2478, 1349, 2885, 3246, 2808, 1113, 3215, 3216, 2806,
	2809, 2557, 1921, 3061, 2807, 3062, 1115, 1763, 1184, 1185,
	1186, 1183, 108, 2355, 2359, 2360, 2361, 2356, 1137, 2357,
	2362, 1763, 2305, 2358, 3326, 3293, 58, 3328, 1184, 1185,
	1186, 1183, 3254, 3250, 3256, 199, 3312, 57, 1814, 1815,
	3243, 2547, 3286, 3306, 3334, 3222, 3223, 3224, 1115, 3137,
	3242, 3228, 3229, 3323, 3300, 2523, 3163, 3164, 3305, 3302,
	3333, 2810, 1910, 2360, 2361, 3331, 3309, 1447, 1184, 1185,
	1186, 1183, 631, 3332, 1502, 3314, 2512, 3316, 2473, 1658,
	3319, 3264, 1184, 1185, 1186, 1183, 632, 3370, 3324, 1809,
	1810, 1811, 3325, 1115, 3303, 3322, 1556, 633, 2493, 2494,
	3318, 1536, 2193, 2984, 3351, 2713, 1184, 1185, 1186, 1183,
	1991, 2977, 1115, 1449, 1449, 3337, 2725, 1142, 3020, 2678,
	2652, 2257, 3330, 2726, 2727, 2728, 1301, 2227, 3407, 3347,
	3407, 3348, 1818, 1785, 2798, 2355, 2359, 2360, 2361, 2356,
	3782, 2357, 2362, 1706, 1705, 2358, 1115, 3423, 1115, 1308,
	1309, 3401, 3402, 3575, 3335, 1306, 1307, 3092, 3426, 2347,
	3428, 2342, 3379, 1304, 1305, 1449, 3397, 1302, 1303, 1922,
	3378, 3377, 1410, 1409, 1175, 3129, 2798, 2833, 2192, 2060,
	3398, 1002, 1362, 629, 1340, 1115, 1115, 1385, 3749, 1115,
	1115, 3404, 3400, 3747, 3364, 3410, 3245, 1447, 1656, 3411,
	3246, 3374, 3707, 3686, 3685, 3683, 3249, 2045, 3628, 3474,
	3422, 3591, 3486, 3485, 3432, 3424, 3469, 3343, 1820, 3180,
	3483, 3459, 3460, 3156, 3155, 3470, 3471, 3140, 3293, 3487,
	3488, 3439, 3435, 2290, 2260, 1558, 3139, 2843, 1361, 3198,
	3395, 3431, 1449, 3775, 3774, 3286, 2888, 2220, 2123, 1656,
	1316, 3437, 1133, 3356, 3774, 3357, 3775, 3480, 3453, 3135,
	1112, 1458, 1377, 3515, 66, 635, 186, 3, 3479, 2,
	3481, 3794, 3507, 3795, 1609, 1, 1609, 865, 866, 867,
	868, 2584, 1112, 1767, 1310, 3475, 869, 864, 1426, 2377,
	1969, 3498, 1453, 1771, 871, 3499, 2817, 123, 3494, 2818,
	3128, 3533, 3502, 3544, 3538, 2820, 3506, 2601, 2080, 2787,
	2340, 2207, 3004, 3395, 3395, 1350, 915, 3395, 3395, 1712,
	1115, 1571, 1024, 1126, 1568, 1125, 1447, 1123, 1661, 754,
	1413, 3567, 3561, 3532, 2034, 2777, 2751, 3482, 3476, 3781,
	3810, 3741, 3477, 3784, 3539, 1586, 3351, 738, 3541, 3677,
	3540, 3596, 3745, 3598, 1455, 3497, 1002, 2085, 3553, 3557,
	1180, 2865, 938, 1115, 123, 795, 3536, 765, 1449, 1248,
	1549, 123, 1198, 1197, 1207, 1208, 1200, 1201, 1202, 1203,
	1204, 1205, 1206, 1199, 123, 3574, 2932, 2930, 1026, 764,
	3214, 2621, 2836, 3546, 1023, 939, 123, 2017, 3593, 3583,
	3495, 1503, 3419, 3420, 1507, 3614, 2256, 3617, 3554, 3647,
	3433, 3057, 2107, 2686, 1531, 3609, 1235, 3642, 3258, 3360,
	3358, 3585, 1115, 3359, 671, 3592, 1948, 603, 984, 3473,
	2030, 672, 2235, 3698, 3577, 3629, 1198, 1197, 1207, 1208,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1199, 1609, 895,
	3624, 2217, 1447, 896, 888, 2640, 2639, 1626, 3620, 1189,
	3623, 1643, 2950, 3646, 2951, 1226, 710, 3631, 2110, 1115,
	2618, 3281, 2829, 65, 64, 63, 62, 1449, 3653, 1999,
	3671, 3674, 207, 3661, 3663, 3665, 3667, 3640, 756, 206,
	3390, 3395, 3673, 3645, 3786, 736, 735, 3675, 3654, 734,
	733, 732, 731, 2354, 2352, 3660, 2351, 1932, 1931, 3586,
	1997, 3018, 2716, 2711, 1862, 1860, 2704, 2285, 2292, 1859,
	3682, 1449, 3680, 3726, 3544, 3657, 3658, 3450, 2761, 3350,
	3670, 1808, 2281, 1879, 2732, 1876, 1875, 2724, 3446, 3440,
	3717, 1907, 3542, 3706, 3406, 3265, 3725, 3266, 3708, 3710,
	3395, 3272, 2226, 1049, 1045, 1047, 3722, 3711, 3712, 1048,
	1046, 1447, 2533, 2262, 2979, 2199, 2198, 2196, 2195, 1325,
	3630, 3616, 3694, 926, 3709, 3634, 3635, 3373, 2400, 2398,
	1095, 3734, 3121, 3735, 3754, 3736, 3117, 3737, 2042, 3748,
	3738, 3750, 3751, 2056, 2884, 3746, 3744, 3395, 1115, 1933,
	1929, 3609, 2789, 3753, 3517, 1447, 3655, 1813, 889, 2215,
	161, 51, 105, 159, 50, 3567, 94, 93, 104, 3763,
	157, 49, 191, 190, 3722, 193, 192, 3765, 3766, 3764,
	3772, 3780, 3769, 3788, 3770, 189, 3787, 2451, 3776, 3777,
	3778, 3779, 2452, 924, 925, 188, 1491, 187, 3687, 3409,
	859, 3799, 40, 1115, 966, 3792, 39, 38, 34, 13,
	12, 35, 22, 3646, 3801, 3800, 21, 3803, 1575, 20,
	26, 32, 31, 3722, 3812, 3809, 116, 115, 30, 114,
	113, 112, 111, 110, 1936, 29, 19, 44, 43, 42,
	9, 103, 101, 28, 102, 99, 97, 3819, 95, 1802,
	77, 76, 75, 90, 1807, 3788, 3826, 89, 3787, 3825,
	88, 87, 86, 85, 83, 3812, 3827, 84, 937, 74,
	73, 3831, 72, 71, 70, 92, 3761, 98, 96, 3829,
	3756, 3757, 81, 91, 82, 80, 79, 968, 78, 69,
	967, 68, 67, 143, 182, 55, 171, 145, 142, 141,
	140, 139, 137, 138, 136, 135, 134, 123, 133, 132,
	123, 123, 172, 123, 131, 45, 46, 47, 48, 164,
	1857, 1858, 153, 173, 152, 154, 156, 952, 158, 155,
	160, 1609, 150, 148, 151, 927, 149, 147, 60, 11,
	106, 18, 121, 25, 4, 0, 0, 1690, 0, 0,
	0, 0, 0, 1000, 0, 0, 123, 109, 0, 0,
	0, 0, 929, 0, 176, 1000, 0, 0, 0, 0,
	0, 0, 0, 0, 1978, 0, 0, 0, 0, 123,
	1978, 1978, 1978, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 182, 55,
	171, 145, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 172, 0, 0, 0,
	0, 0, 0, 164, 0, 951, 949, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 128, 0, 129, 130, 121, 948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1216, 923,
	0, 109, 0, 0, 0, 0, 0, 0, 176, 0,
	928, 961, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 957, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1686, 0, 144, 170, 180, 0, 107, 1683, 0, 0,
	0, 1685, 1682, 1684, 1688, 1689, 0, 0, 0, 1687,
	958, 962, 0, 0, 169, 163, 162, 0, 0, 0,
	0, 61, 0, 0, 0, 127, 128, 0, 129, 130,
	945, 0, 943, 947, 965, 0, 0, 0, 944, 941,
	940, 0, 946, 931, 932, 930, 933, 934, 935, 936,
	0, 963, 0, 964, 0, 0, 683, 682, 689, 679,
	0, 0, 0, 0, 959, 960, 0, 0, 686, 687,
	0, 688, 692, 0, 0, 673, 0, 0, 0, 0,
	0, 0, 165, 166, 167, 697, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 170, 180, 0,
	107, 955, 0, 0, 0, 0, 0, 954, 0, 0,
	0, 0, 0, 174, 0, 0, 0, 0, 169, 163,
	162, 0, 950, 0, 0, 61, 0, 0, 0, 701,
	0, 0, 703, 0, 117, 0, 0, 702, 168, 0,
	118, 0, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
	1679, 1680, 1681, 1693, 1694, 1695, 1696, 1697, 1698, 1691,
	1692, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2204, 2205, 2206,
	0, 0, 0, 0, 0, 0, 165, 166, 167, 0,
	0, 0, 2222, 2223, 2224, 2225, 0, 119, 0, 0,
	953, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 0, 0, 0, 0, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2371, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 168, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 676, 675, 0, 0, 0,
	0, 1908, 0, 0, 681, 0, 1869, 0, 0, 0,
	0, 1936, 0, 0, 177, 178, 685, 179, 0, 0,
	123, 119, 146, 700, 0, 0, 0, 52, 0, 0,
	678, 0, 0, 0, 54, 0, 1910, 1878, 0, 0,
	0, 0, 0, 0, 0, 0, 1911, 1912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1877, 0, 0, 0, 0, 1455, 0, 0,
	0, 0, 0, 56, 0, 0, 0, 0, 1885, 0,
	0, 0, 1978, 120, 41, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 5, 0, 0, 0, 0, 0,
	0, 124, 125, 0, 0, 126, 0, 0, 177, 178,
	0, 179, 0, 0, 0, 0, 146, 0, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 0,
	680, 684, 690, 0, 691, 693, 0, 0, 694, 695,
	696, 0, 0, 698, 699, 1908, 1901, 0, 0, 0,
	1869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1910, 1878, 0, 0, 0, 0, 0, 120, 41, 0,
	1911, 1912, 0, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 125, 0, 0, 126,
	0, 0, 0, 0, 0, 0, 1877, 1868, 1870, 1867,
	0, 1864, 0, 0, 0, 123, 1889, 0, 0, 0,
	0, 0, 1885, 0, 0, 123, 0, 1895, 0, 0,
	0, 0, 0, 0, 0, 1880, 0, 1863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1883, 1917, 0,
	0, 1884, 1886, 1888, 0, 1890, 1891, 1892, 1896, 1897,
	1898, 1900, 1903, 1904, 1905, 0, 0, 0, 0, 0,
	0, 0, 1893, 1902, 1894, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1872, 0, 0, 0, 0, 677,
	1901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1909, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2656, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1865, 1866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1936, 1936, 1936, 1936, 0, 0,
	0, 1906, 0, 0, 0, 0, 0, 1936, 0, 0,
	0, 1868, 2681, 1867, 0, 2680, 0, 0, 1882, 0,
	1889, 0, 0, 0, 0, 1881, 0, 0, 0, 0,
	0, 1895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1899,
	0, 1883, 1917, 0, 0, 1884, 1886, 1888, 1887, 1890,
	1891, 1892, 1896, 1897, 1898, 1900, 1903, 1904, 1905, 0,
	0, 1914, 1913, 0, 0, 0, 1893, 1902, 1894, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 1872, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1909, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 0, 0, 0, 1874, 0, 0, 0, 0, 0,
	123, 0, 0, 2834, 2835, 0, 0, 1865, 1866, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1906, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1916, 0, 0, 1915,
	0, 0, 1882, 0, 0, 0, 0, 0, 0, 1881,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1899, 0, 0, 0, 1053, 0, 0,
	0, 0, 1887, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1914, 1913, 1075, 1079, 1081,
	1083, 1085, 1086, 1088, 0, 1093, 1089, 1090, 1091, 1092,
	0, 1070, 1071, 1072, 1073, 1051, 1052, 1076, 0, 1054,
	0, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1066, 1068, 1064, 1065, 1074, 0, 0, 0, 0, 1067,
	0, 0, 1078, 1080, 1082, 1084, 1087, 0, 1874, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	123, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 1936, 0, 0, 0, 0, 1053, 0, 0,
	1069, 1043, 0, 0, 0, 0, 0, 0, 0, 0,
	1916, 123, 0, 1915, 0, 0, 0, 1075, 1079, 1081,
	1083, 1085, 1086, 1088, 0, 1093, 1089, 1090, 1091, 1092,
	0, 1070, 1071, 1072, 1073, 1051, 1052, 1076, 0, 1054,
	0, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1066, 1068, 1064, 1065, 1074, 0, 0, 0, 0, 0,
	0, 3012, 1078, 1080, 1082, 1084, 1087, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3024, 0, 1908,
	0, 1053, 0, 0, 0, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1069, 1075, 1079, 1081, 1083, 1085, 1086, 1088, 3405, 1093,
	1089, 1090, 1091, 1092, 1910, 1070, 1071, 1072, 1073, 1051,
	1052, 1076, 0, 1054, 0, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1066, 1068, 1064, 1065, 1074, 2529,
	2530, 0, 0, 0, 0, 0, 1078, 1080, 1082, 1084,
	1087, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1885, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1978, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1901, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 0, 0, 1889, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 1895, 0, 0, 3168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1883, 1917, 0, 0, 1884,
	1886, 1888, 0, 1890, 1891, 1892, 1896, 1897, 1898, 1900,
	1903, 1904, 1905, 0, 0, 0, 0, 1936, 0, 0,
	1893, 1902, 1894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1909, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1906,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1882, 1077, 0, 0,
	0, 0, 0, 1881, 0, 0, 0, 123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1899, 0, 772,
	0, 0, 0, 0, 0, 0, 1887, 0, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 763, 531, 482, 401,
	354, 549, 548, 0, 0, 830, 838, 0, 0, 0,
	0, 0, 0, 123, 0, 0, 0, 0, 717, 0,
	0, 753, 807, 806, 740, 750, 0, 0, 283, 205,
	477, 597, 479, 478, 741, 0, 742, 746, 749, 745,
	743, 744, 0, 822, 0, 0, 0, 0, 0, 0,
	709, 721, 0, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 719, 0,
	0, 0, 0, 773, 0, 720, 0, 0, 768, 747,
	751, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 748, 771, 775, 304, 844, 769, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 845, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3458, 590, 766, 0, 594, 0, 433, 0, 0,
	828, 0, 0, 0, 405, 0, 0, 337, 123, 0,
	0, 770, 0, 391, 372, 841, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 1714, 1713, 1715,
	445, 338, 339, 0, 317, 265, 266, 612, 826, 368,
	559, 592, 593, 484, 0, 840, 821, 823, 824, 827,
	831, 832, 833, 834, 835, 837, 839, 843, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 842,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 774,
	534, 535, 358, 359, 360, 361, 829, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 851, 825, 850, 852, 853,
	849, 854, 855, 836, 730, 0, 781, 847, 846, 848,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 814, 788, 789, 790, 727, 791, 785,
	786, 728, 787, 815, 779, 811, 812, 755, 782, 792,
	810, 793, 813, 816, 817, 856, 857, 799, 783, 231,
	858, 796, 818, 809, 808, 794, 780, 819, 820, 762,
	757, 797, 798, 784, 802, 803, 804, 729, 776, 777,
	778, 800, 801, 758, 759, 760, 761, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 805, 602, 772, 613, 480, 481, 614,
	591, 0, 722, 0, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 0, 725, 0, 0,
	0, 310, 1764, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 763, 531, 482, 401, 354, 549, 548, 0,
	0, 830, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 1960, 0, 0, 717, 0, 0, 753, 807, 806,
	740, 750, 0, 0, 283, 205, 477, 597, 479, 478,
	741, 0, 742, 746, 749, 745, 743, 744, 0, 822,
	0, 0, 0, 0, 0, 0, 709, 721, 0, 726,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 719, 0, 0, 0, 0, 773,
	0, 720, 0, 0, 1961, 747, 751, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 748, 771, 775,
	304, 844, 769, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 845, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 766,
	0, 594, 0, 433, 0, 0, 828, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 770, 0, 391,
	372, 841, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 826, 368, 559, 592, 593, 484,
	0, 840, 821, 823, 824, 827, 831, 832, 833, 834,
	835, 837, 839, 843, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 842, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 774, 534, 535, 358, 359,
	360, 361, 829, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 851, 825, 850, 852, 853, 849, 854, 855, 836,
	730, 0, 781, 847, 846, 848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 814,
	788, 789, 790, 727, 791, 785, 786, 728, 787, 815,
	779, 811, 812, 755, 782, 792, 810, 793, 813, 816,
	817, 856, 857, 799, 783, 231, 858, 796, 818, 809,
	808, 794, 780, 819, 820, 762, 757, 797, 798, 784,
	802, 803, 804, 729, 776, 777, 778, 800, 801, 758,
	759, 760, 761, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 805,
	602, 0, 613, 480, 481, 614, 591, 0, 722, 182,
	772, 0, 0, 0, 0, 0, 0, 0, 0, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 725, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 1219, 531, 482,
	401, 354, 549, 548, 0, 0, 830, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 753, 807, 806, 740, 750, 0, 0, 283,
	205, 477, 597, 479, 478, 741, 0, 742, 746, 749,
	745, 743, 744, 0, 822, 0, 0, 0, 0, 0,
	0, 709, 721, 0, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 719,
	0, 0, 0, 0, 773, 0, 720, 0, 0, 768,
	747, 751, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 748, 771, 775, 304, 844, 769, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 845, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 766, 0, 594, 0, 433, 0,
	0, 828, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 770, 0, 391, 372, 841, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 826,
	368, 559, 592, 593, 484, 0, 840, 821, 823, 824,
	827, 831, 832, 833, 834, 835, 837, 839, 843, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	842, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	774, 534, 535, 358, 359, 360, 361, 829, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 851, 825, 850, 852,
	853, 849, 854, 855, 836, 730, 0, 781, 847, 846,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 146, 382, 315,
	555, 556, 0, 0, 814, 788, 789, 790, 727, 791,
	785, 786, 728, 787, 815, 779, 811, 812, 755, 782,
	792, 810, 793, 813, 816, 817, 856, 857, 799, 783,
	231, 858, 796, 818, 809, 808, 794, 780, 819, 820,
	762, 757, 797, 798, 784, 802, 803, 804, 729, 776,
	777, 778, 800, 801, 758, 759, 760, 761, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 805, 602, 772, 613, 480, 481,
	614, 591, 0, 722, 0, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 725, 0,
	0, 0, 310, 3828, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 763, 531, 482, 401, 354, 549, 548,
	0, 0, 830, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 753, 807,
	806, 740, 750, 0, 0, 283, 205, 477, 597, 479,
	478, 741, 0, 742, 746, 749, 745, 743, 744, 0,
	822, 0, 0, 0, 0, 0, 0, 709, 721, 0,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 719, 0, 0, 0, 0,
	773, 0, 720, 0, 0, 768, 747, 751, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 748, 771,
	775, 304, 844, 769, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 845,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	766, 0, 594, 0, 433, 0, 0, 828, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 770, 0,
	391, 372, 841, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 826, 368, 559, 592, 593,
	484, 0, 840, 821, 823, 824, 827, 831, 832, 833,
	834, 835, 837, 839, 843, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 842, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 774, 534, 535, 358,
	359, 360, 361, 829, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 851, 825, 850, 852, 853, 849, 854, 855,
	836, 730, 0, 781, 847, 846, 848, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	814, 788, 789, 790, 727, 791, 785, 786, 728, 787,
	815, 779, 811, 812, 755, 782, 792, 810, 793, 813,
	816, 817, 856, 857, 799, 783, 231, 858, 796, 818,
	809, 808, 794, 780, 819, 820, 762, 757, 797, 798,
	784, 802, 803, 804, 729, 776, 777, 778, 800, 801,
	758, 759, 760, 761, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	805, 602, 772, 613, 480, 481, 614, 591, 0, 722,
	0, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 725, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 763,
	531, 482, 401, 354, 549, 548, 0, 0, 830, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 753, 807, 806, 740, 750, 0,
	0, 283, 205, 477, 597, 479, 478, 741, 0, 742,
	746, 749, 745, 743, 744, 0, 822, 0, 0, 0,
	0, 0, 0, 709, 721, 0, 726, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 719, 0, 0, 0, 0, 773, 0, 720, 0,
	0, 768, 747, 751, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 748, 771, 775, 304, 844, 769,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 845, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 766, 0, 594, 0,
	433, 0, 0, 828, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 770, 0, 391, 372, 841, 3723,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 826, 368, 559, 592, 593, 484, 0, 840, 821,
	823, 824, 827, 831, 832, 833, 834, 835, 837, 839,
	843, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 842, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 774, 534, 535, 358, 359, 360, 361, 829,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 851, 825,
	850, 852, 853, 849, 854, 855, 836, 730, 0, 781,
	847, 846, 848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 814, 788, 789, 790,
	727, 791, 785, 786, 728, 787, 815, 779, 811, 812,
	755, 782, 792, 810, 793, 813, 816, 817, 856, 857,
	799, 783, 231, 858, 796, 818, 809, 808, 794, 780,
	819, 820, 762, 757, 797, 798, 784, 802, 803, 804,
	729, 776, 777, 778, 800, 801, 758, 759, 760, 761,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 805, 602, 772, 613,
	480, 481, 614, 591, 0, 722, 0, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	725, 0, 0, 0, 310, 1764, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 763, 531, 482, 401, 354,
	549, 548, 0, 0, 830, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	753, 807, 806, 740, 750, 0, 0, 283, 205, 477,
	597, 479, 478, 741, 0, 742, 746, 749, 745, 743,
	744, 0, 822, 0, 0, 0, 0, 0, 0, 709,
	721, 0, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 719, 0, 0,
	0, 0, 773, 0, 720, 0, 0, 768, 747, 751,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	748, 771, 775, 304, 844, 769, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 845, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 766, 0, 594, 0, 433, 0, 0, 828,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	770, 0, 391, 372, 841, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 826, 368, 559,
	592, 593, 484, 0, 840, 821, 823, 824, 827, 831,
	832, 833, 834, 835, 837, 839, 843, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 842, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 774, 534,
	535, 358, 359, 360, 361, 829, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 851, 825, 850, 852, 853, 849,
	854, 855, 836, 730, 0, 781, 847, 846, 848, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 814, 788, 789, 790, 727, 791, 785, 786,
	728, 787, 815, 779, 811, 812, 755, 782, 792, 810,
	793, 813, 816, 817, 856, 857, 799, 783, 231, 858,
	796, 818, 809, 808, 794, 780, 819, 820, 762, 757,
	797, 798, 784, 802, 803, 804, 729, 776, 777, 778,
	800, 801, 758, 759, 760, 761, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 805, 602, 772, 613, 480, 481, 614, 591,
	0, 722, 0, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 763, 531, 482, 401, 354, 549, 548, 0, 0,
	830, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 753, 807, 806, 740,
	750, 0, 0, 283, 205, 477, 597, 479, 478, 741,
	0, 742, 746, 749, 745, 743, 744, 0, 822, 0,
	0, 0, 0, 0, 0, 709, 721, 0, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 718, 719, 1486, 0, 0, 0, 773, 0,
	720, 0, 0, 768, 747, 751, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 748, 771, 775, 304,
	844, 769, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 845, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 766, 0,
	594, 0, 433, 0, 0, 828, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 770, 0, 391, 372,
	841, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 826, 368, 559, 592, 593, 484, 0,
	840, 821, 823, 824, 827, 831, 832, 833, 834, 835,
	837, 839, 843, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 842, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 774, 534, 535, 358, 359, 360,
	361, 829, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	851, 825, 850, 852, 853, 849, 854, 855, 836, 730,
	0, 781, 847, 846, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 814, 788,
	789, 790, 727, 791, 785, 786, 728, 787, 815, 779,
	811, 812, 755, 782, 792, 810, 793, 813, 816, 817,
	856, 857, 799, 783, 231, 858, 796, 818, 809, 808,
	794, 780, 819, 820, 762, 757, 797, 798, 784, 802,
	803, 804, 729, 776, 777, 778, 800, 801, 758, 759,
	760, 761, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 805, 602,
	0, 613, 480, 481, 614, 591, 772, 722, 0, 2131,
	0, 0, 0, 0, 0, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 725, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 763, 531, 482, 401, 354, 549, 548,
	0, 0, 830, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 753, 807,
	806, 740, 750, 0, 0, 283, 205, 477, 597, 479,
	478, 741, 0, 742, 746, 749, 745, 743, 744, 0,
	822, 0, 0, 0, 0, 0, 0, 709, 721, 0,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 719, 0, 0, 0, 0,
	773, 0, 720, 0, 0, 768, 747, 751, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 748, 771,
	775, 304, 844, 769, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 845,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	766, 0, 594, 0, 433, 0, 0, 828, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 770, 0,
	391, 372, 841, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 826, 368, 559, 592, 593,
	484, 0, 840, 821, 823, 824, 827, 831, 832, 833,
	834, 835, 837, 839, 843, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 842, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 774, 534, 535, 358,
	359, 360, 361, 829, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 851, 825, 850, 852, 853, 849, 854, 855,
	836, 730, 0, 781, 847, 846, 848, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	814, 788, 789, 790, 727, 791, 785, 786, 728, 787,
	815, 779, 811, 812, 755, 782, 792, 810, 793, 813,
	816, 817, 856, 857, 799, 783, 231, 858, 796, 818,
	809, 808, 794, 780, 819, 820, 762, 757, 797, 798,
	784, 802, 803, 804, 729, 776, 777, 778, 800, 801,
	758, 759, 760, 761, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	805, 602, 772, 613, 480, 481, 614, 591, 0, 722,
	0, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 725, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 763,
	531, 482, 401, 354, 549, 548, 0, 0, 830, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 717, 0, 0, 753, 807, 806, 740, 750, 0,
	0, 283, 205, 477, 597, 479, 478, 741, 0, 742,
	746, 749, 745, 743, 744, 0, 822, 0, 0, 0,
	0, 0, 0, 709, 721, 0, 726, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 719, 1757, 0, 0, 0, 773, 0, 720, 0,
	0, 768, 747, 751, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 748, 771, 775, 304, 844, 769,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 845, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 766, 0, 594, 0,
	433, 0, 0, 828, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 770, 0, 391, 372, 841, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 826, 368, 559, 592, 593, 484, 0, 840, 821,
	823, 824, 827, 831, 832, 833, 834, 835, 837, 839,
	843, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 842, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 774, 534, 535, 358, 359, 360, 361, 829,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 851, 825,
	850, 852, 853, 849, 854, 855, 836, 730, 0, 781,
	847, 846, 848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 814, 788, 789, 790,
	727, 791, 785, 786, 728, 787, 815, 779, 811, 812,
	755, 782, 792, 810, 793, 813, 816, 817, 856, 857,
	799, 783, 231, 858, 796, 818, 809, 808, 794, 780,
	819, 820, 762, 757, 797, 798, 784, 802, 803, 804,
	729, 776, 777, 778, 800, 801, 758, 759, 760, 761,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 805, 602, 772, 613,
	480, 481, 614, 591, 0, 722, 0, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	725, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 763, 531, 482, 401, 354,
	549, 548, 0, 0, 830, 838, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 0,
	753, 807, 806, 740, 750, 0, 0, 283, 205, 477,
	597, 479, 478, 741, 0, 742, 746, 749, 745, 743,
	744, 0, 822, 0, 0, 0, 0, 0, 0, 709,
	721, 0, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 719, 0, 0,
	0, 0, 773, 0, 720, 0, 0, 768, 747, 751,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	748, 771, 775, 304, 844, 769, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 845, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 766, 0, 594, 0, 433, 0, 0, 828,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	770, 0, 391, 372, 841, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 826, 368, 559,
	592, 593, 484, 0, 840, 821, 823, 824, 827, 831,
	832, 833, 834, 835, 837, 839, 843, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 842, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 774, 534,
	535, 358, 359, 360, 361, 829, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 851, 825, 850, 852, 853, 849,
	854, 855, 836, 730, 0, 781, 847, 846, 848, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 814, 788, 789, 790, 727, 791, 785, 786,
	728, 787, 815, 779, 811, 812, 755, 782, 792, 810,
	793, 813, 816, 817, 856, 857, 799, 783, 231, 858,
	796, 818, 809, 808, 794, 780, 819, 820, 762, 757,
	797, 798, 784, 802, 803, 804, 729, 776, 777, 778,
	800, 801, 758, 759, 760, 761, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 805, 602, 772, 613, 480, 481, 614, 591,
	0, 722, 0, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 763, 531, 482, 401, 354, 549, 548, 0, 0,
	830, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 717, 0, 0, 753, 807, 806, 740,
	750, 0, 0, 283, 205, 477, 597, 479, 478, 2581,
	0, 2582, 746, 749, 745, 743, 744, 0, 822, 0,
	0, 0, 0, 0, 0, 709, 721, 0, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 718, 719, 0, 0, 0, 0, 773, 0,
	720, 0, 0, 768, 747, 751, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 748, 771, 775, 304,
	844, 769, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 845, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 766, 0,
	594, 0, 433, 0, 0, 828, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 770, 0, 391, 372,
	841, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 826, 368, 559, 592, 593, 484, 0,
	840, 821, 823, 824, 827, 831, 832, 833, 834, 835,
	837, 839, 843, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 842, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 774, 534, 535, 358, 359, 360,
	361, 829, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	851, 825, 850, 852, 853, 849, 854, 855, 836, 730,
	0, 781, 847, 846, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 814, 788,
	789, 790, 727, 791, 785, 786, 728, 787, 815, 779,
	811, 812, 755, 782, 792, 810, 793, 813, 816, 817,
	856, 857, 799, 783, 231, 858, 796, 818, 809, 808,
	794, 780, 819, 820, 762, 757, 797, 798, 784, 802,
	803, 804, 729, 776, 777, 778, 800, 801, 758, 759,
	760, 761, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 805, 602,
	772, 613, 480, 481, 614, 591, 0, 722, 0, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 1627, 0,
	0, 0, 725, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 763, 531, 482,
	401, 354, 549, 548, 0, 0, 830, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 717,
	0, 0, 753, 807, 806, 740, 750, 0, 0, 283,
	205, 477, 597, 479, 478, 741, 0, 742, 746, 749,
	745, 743, 744, 0, 822, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 719,
	0, 0, 0, 0, 773, 0, 720, 0, 0, 768,
	747, 751, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 748, 771, 775, 304, 844, 769, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 845, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 766, 0, 594, 0, 433, 0,
	0, 828, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 770, 0, 391, 372, 841, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 1628, 1629, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 826,
	368, 559, 592, 593, 484, 0, 840, 821, 823, 824,
	827, 831, 832, 833, 834, 835, 837, 839, 843, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	842, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	774, 534, 535, 358, 359, 360, 361, 829, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 851, 825, 850, 852,
	853, 849, 854, 855, 836, 730, 0, 781, 847, 846,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 814, 788, 789, 790, 727, 791,
	785, 786, 728, 787, 815, 779, 811, 812, 755, 782,
	792, 810, 793, 813, 816, 817, 856, 857, 799, 783,
	231, 858, 796, 818, 809, 808, 794, 780, 819, 820,
	762, 757, 797, 798, 784, 802, 803, 804, 729, 776,
	777, 778, 800, 801, 758, 759, 760, 761, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 805, 602, 772, 613, 480, 481,
	614, 591, 0, 722, 0, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 725, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 763, 531, 482, 401, 354, 549, 548,
	0, 0, 830, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 717, 0, 0, 753, 807,
	806, 740, 750, 0, 0, 283, 205, 477, 597, 479,
	478, 741, 0, 742, 746, 749, 745, 743, 744, 0,
	822, 0, 0, 0, 0, 0, 0, 0, 721, 0,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 719, 0, 0, 0, 0,
	773, 0, 720, 0, 0, 768, 747, 751, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 748, 771,
	775, 304, 844, 769, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 845,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	766, 0, 594, 0, 433, 0, 0, 828, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 770, 0,
	391, 372, 841, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 826, 368, 559, 592, 593,
	484, 0, 840, 821, 823, 824, 827, 831, 832, 833,
	834, 835, 837, 839, 843, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 842, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 774, 534, 535, 358,
	359, 360, 361, 829, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 851, 825, 850, 852, 853, 849, 854, 855,
	836, 730, 0, 781, 847, 846, 848, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	814, 788, 789, 790, 727, 791, 785, 786, 728, 787,
	815, 779, 811, 812, 755, 782, 792, 810, 793, 813,
	816, 817, 856, 857, 799, 783, 231, 858, 796, 818,
	809, 808, 794, 780, 819, 820, 762, 757, 797, 798,
	784, 802, 803, 804, 729, 776, 777, 778, 800, 801,
	758, 759, 760, 761, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	805, 602, 772, 613, 480, 481, 614, 591, 0, 722,
	0, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 725, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 763,
	531, 482, 401, 354, 549, 548, 0, 0, 830, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 753, 807, 806, 740, 750, 0,
	0, 283, 205, 477, 597, 479, 478, 741, 0, 742,
	746, 749, 745, 743, 744, 0, 822, 0, 0, 0,
	0, 0, 0, 709, 721, 0, 726, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 719, 0, 0, 0, 0, 773, 0, 720, 0,
	0, 768, 747, 751, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 748, 771, 775, 304, 844, 769,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 845, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 766, 0, 594, 0,
	433, 0, 0, 828, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 770, 0, 391, 372, 841, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 826, 368, 559, 592, 593, 484, 0, 840, 821,
	823, 824, 827, 831, 832, 833, 834, 835, 837, 839,
	843, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 842, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 774, 534, 535, 358, 359, 360, 361, 829,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 851, 825,
	850, 852, 853, 849, 854, 855, 836, 730, 0, 781,
	847, 846, 848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 814, 788, 789, 790,
	727, 791, 785, 786, 728, 787, 815, 779, 811, 812,
	755, 782, 792, 810, 793, 813, 816, 817, 856, 857,
	799, 783, 231, 858, 796, 818, 809, 808, 794, 780,
	819, 820, 762, 757, 797, 798, 784, 802, 803, 804,
	729, 776, 777, 778, 800, 801, 758, 759, 760, 761,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 805, 602, 0, 613,
	480, 481, 614, 591, 0, 722, 182, 55, 171, 145,
	0, 0, 0, 0, 0, 0, 370, 0, 495, 528,
	517, 601, 483, 0, 172, 0, 0, 0, 0, 0,
	0, 164, 0, 310, 0, 173, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 121, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 204,
	0, 0, 0, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 144, 170, 180, 0, 107, 0,
	590, 0, 0, 594, 0, 433, 0, 0, 197, 0,
	0, 0, 405, 0, 0, 337, 169, 163, 162, 449,
	0, 391, 372, 209, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 569, 570, 571, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 428, 303, 368, 559, 592,
	593, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 200, 541, 544, 474, 210, 0, 538, 553,
	511, 552, 211, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 119,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 208, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 56, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 383, 278, 416, 394,
	0, 267, 490, 341, 146, 382, 315, 555, 556, 52,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 212, 41, 198, 201, 203,
	202, 0, 53, 539, 551, 585, 5, 595, 596, 598,
	600, 599, 602, 124, 213, 480, 481, 214, 591, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 121, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 2273, 2276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 594, 2277, 433, 0,
	0, 0, 2272, 0, 2271, 405, 2269, 2274, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 2275, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 559, 592, 593, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 146, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 480, 481,
	614, 591, 370, 0, 495, 528, 517, 601, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1254, 0, 0, 204, 0, 0, 740, 750,
	0, 0, 283, 205, 477, 597, 479, 478, 741, 0,
	742, 746, 749, 745, 743, 744, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 748, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 559, 592, 593, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 611, 0, 538, 553, 615, 552, 608, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 620, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 607, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 480, 481, 614, 591, 182, 55, 171, 145, 0,
	0, 0, 0, 0, 0, 370, 639, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 645,
	0, 0, 0, 0, 0, 644, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 643, 0, 590,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 559, 592, 593,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 640, 642, 288, 456, 384, 653, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	56, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 146, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 480, 481, 614, 591, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 2273, 2276, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 2277, 433, 0, 0,
	0, 2272, 0, 2271, 405, 2269, 2274, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	2275, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 1067,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1053, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 2424, 2427, 2428, 2429, 2430, 2431, 2432, 0, 2437,
	2433, 2434, 2435, 2436, 0, 2419, 2420, 2421, 2422, 1051,
	2403, 2425, 0, 2404, 366, 2405, 2406, 2407, 2408, 2409,
	2410, 2411, 2412, 2413, 2416, 2417, 2414, 2415, 2423, 378,
	344, 379, 327, 356, 355, 357, 1078, 1080, 1082, 1084,
	1087, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 2418, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 2426, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	480, 481, 614, 591, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 2294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 2293, 433, 0, 0, 0, 2299, 2296, 2298,
	405, 0, 2297, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 2291, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 480, 481, 614, 591, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 2294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 2293, 433, 0, 0, 0,
	2299, 2296, 2298, 405, 0, 2297, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 480, 481, 614, 591,
	370, 0, 495, 528, 517, 601, 483, 0, 0, 0,
	0, 0, 2001, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 2002, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 1184, 1185,
	1186, 1183, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 559, 592, 593, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	611, 0, 538, 553, 615, 552, 608, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 620, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 607,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 595, 596, 598, 600, 599, 602, 182, 613, 480,
	481, 614, 591, 0, 0, 0, 0, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 121, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 2051, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 146, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 182, 613, 480, 481, 614, 591,
	0, 0, 0, 0, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 121, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 2037, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 146, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 480, 481, 614, 591, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 983, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 990, 991, 0, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 994, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 978, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 968, 431, 277, 967, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 981, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 982, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 985, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 992, 979,
	988, 980, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 989, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 182, 613, 480, 481, 614, 591,
	0, 0, 0, 0, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 121, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1934, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 146, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 480, 481, 614, 591, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 990, 991, 0, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 994, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 968, 431, 277, 967, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 992, 1953,
	988, 1954, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 989, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 480, 481, 614, 591,
	370, 0, 495, 528, 517, 601, 483, 0, 0, 2791,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	2794, 0, 0, 2793, 590, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 559, 592, 593, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	611, 0, 538, 553, 615, 552, 608, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 620, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 607,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 480,
	481, 614, 591, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 1452, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 1450,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1448, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 559, 592, 593, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 480, 481, 614, 591, 370, 0, 495, 528,
	517, 601, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 1446, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 1450, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1448, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 559, 592,
	593, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 611, 0, 538, 553,
	615, 552, 608, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 620, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 607, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 480, 481, 614, 591, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3783, 0, 204, 807, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 559, 592, 593, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 480, 481,
	614, 591, 370, 0, 495, 528, 517, 601, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 1450, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 559, 592, 593, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 611, 0, 538, 553, 615, 552, 608, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 620, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 607, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 480, 481, 614, 591, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 1450, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1657, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 559, 592, 593,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 480, 481, 614, 591, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	2367, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 2369, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 2988, 2990, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	480, 481, 614, 591, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 2388, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	1450, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 480, 481, 614, 591, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 0, 433, 0, 626, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 480, 481, 614, 591,
	370, 0, 495, 528, 517, 601, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 807, 0, 0, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 559, 592, 593, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	611, 0, 538, 553, 615, 552, 608, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 620, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 607,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 480,
	481, 614, 591, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3762, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 559, 592, 593, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 480, 481, 614, 591, 370, 0, 495, 528,
	517, 601, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 3545, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 559, 592,
	593, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 611, 0, 538, 553,
	615, 552, 608, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 620, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 607, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 480, 481, 614, 591, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 594, 0, 433, 0,
	0, 0, 3672, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 559, 592, 593, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 480, 481,
	614, 591, 370, 0, 495, 528, 517, 601, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3396, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 559, 592, 593, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 611, 0, 538, 553, 615, 552, 608, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 620, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 607, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 480, 481, 614, 591, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3560, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 559, 592, 593,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 480, 481, 614, 591, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 0, 433, 0, 0,
	0, 3484, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 3021, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	480, 481, 614, 591, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3039, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 480, 481, 614, 591, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1934, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 480, 481, 614, 591,
	370, 0, 495, 528, 517, 601, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 559, 592, 593, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	611, 0, 538, 553, 615, 552, 608, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 620, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 607,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 480,
	481, 614, 591, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 559, 592, 593, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 480, 481, 614, 591, 370, 0, 495, 528,
	517, 601, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 1450, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 385, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 559, 592,
	593, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 611, 0, 538, 553,
	615, 552, 608, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 620, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 607, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 480, 481, 614, 591, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 2369, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 594, 0, 433, 0,
	0, 0, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 559, 592, 593, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 480, 481,
	614, 591, 370, 0, 495, 528, 517, 601, 483, 0,
	0, 2715, 0, 0, 0, 0, 0, 0, 0, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 559, 592, 593, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 611, 0, 538, 553, 615, 552, 608, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 620, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 607, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 480, 481, 614, 591, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 0, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 559, 592, 593,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 480, 481, 614, 591, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 2485, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 0,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	480, 481, 614, 591, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	2444, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 423, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 2228, 613, 480, 481, 614, 591, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 423, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 480, 481, 614, 591,
	370, 0, 495, 528, 517, 601, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 1793, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 302, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 559, 592, 593, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	611, 0, 538, 553, 615, 552, 608, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 620, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 607,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 480,
	481, 614, 591, 370, 0, 495, 528, 517, 601, 483,
	0, 1920, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	385, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 559, 592, 593, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 582, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 480, 481, 614, 591, 370, 0, 495, 528,
	517, 601, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 340, 532, 514, 524,
	515, 500, 501, 502, 509, 320, 503, 504, 505, 475,
	506, 476, 507, 508, 0, 531, 482, 401, 354, 549,
	548, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 1450, 0, 0, 0, 283, 205, 477, 597,
	479, 478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 406, 423, 284, 397, 436, 289,
	404, 279, 369, 393, 0, 0, 275, 421, 403, 351,
	330, 331, 274, 0, 388, 308, 322, 305, 367, 0,
	420, 448, 304, 439, 0, 431, 277, 0, 430, 366,
	417, 422, 352, 346, 276, 419, 350, 345, 334, 312,
	464, 335, 336, 326, 378, 344, 379, 327, 356, 355,
	357, 0, 0, 0, 0, 0, 459, 460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 594, 0, 433, 0, 0, 0, 0,
	0, 0, 405, 0, 0, 337, 0, 0, 0, 449,
	0, 391, 372, 616, 0, 0, 389, 342, 418, 380,
	424, 407, 432, 1826, 381, 268, 408, 307, 353, 280,
	282, 302, 309, 311, 313, 314, 362, 363, 375, 396,
	409, 410, 411, 306, 290, 390, 291, 324, 292, 269,
	298, 296, 299, 398, 300, 271, 376, 415, 0, 319,
	386, 349, 272, 348, 377, 414, 413, 281, 440, 446,
	447, 536, 0, 452, 617, 618, 619, 461, 466, 467,
	468, 470, 471, 472, 473, 537, 554, 521, 491, 454,
	545, 488, 492, 493, 557, 0, 0, 0, 445, 338,
	339, 0, 317, 265, 266, 612, 303, 368, 559, 592,
	593, 484, 0, 546, 485, 494, 295, 518, 530, 529,
	364, 444, 0, 541, 544, 474, 611, 0, 538, 553,
	615, 552, 608, 374, 0, 395, 550, 497, 0, 542,
	516, 0, 543, 512, 547, 0, 486, 0, 402, 426,
	438, 455, 458, 487, 572, 573, 574, 270, 457, 576,
	577, 578, 579, 580, 581, 582, 575, 429, 519, 496,
	522, 437, 499, 498, 0, 0, 533, 453, 534, 535,
	358, 359, 360, 361, 321, 560, 288, 456, 384, 0,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 525,
	526, 523, 620, 0, 583, 584, 0, 0, 450, 451,
	316, 323, 469, 325, 287, 373, 318, 435, 332, 0,
	462, 527, 463, 586, 589, 587, 588, 365, 328, 329,
	399, 333, 343, 387, 434, 371, 392, 285, 425, 400,
	347, 513, 540, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 568,
	567, 566, 565, 564, 563, 562, 561, 0, 0, 510,
	412, 297, 259, 293, 294, 301, 609, 606, 416, 610,
	0, 267, 490, 341, 0, 382, 315, 555, 556, 0,
	0, 215, 216, 217, 218, 219, 220, 221, 222, 260,
	223, 224, 225, 226, 227, 228, 229, 232, 233, 234,
	235, 236, 237, 238, 239, 558, 230, 231, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 0, 0, 0, 261, 262, 263, 264, 0,
	0, 255, 256, 257, 258, 0, 0, 0, 441, 442,
	443, 465, 0, 427, 489, 607, 0, 0, 0, 0,
	0, 0, 0, 539, 551, 585, 0, 595, 596, 598,
	600, 599, 602, 0, 613, 480, 481, 614, 591, 370,
	0, 495, 528, 517, 601, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 310, 0, 0, 340,
	532, 514, 524, 515, 500, 501, 502, 509, 320, 503,
	504, 505, 475, 506, 476, 507, 508, 0, 531, 482,
	401, 354, 549, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 283,
	205, 477, 597, 479, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 406, 423, 284,
	397, 436, 289, 404, 279, 369, 393, 0, 0, 275,
	421, 403, 351, 330, 331, 274, 0, 388, 308, 322,
	305, 367, 0, 420, 448, 304, 439, 0, 431, 277,
	0, 430, 366, 417, 422, 352, 346, 276, 419, 350,
	345, 334, 312, 464, 335, 336, 326, 378, 344, 379,
	327, 356, 355, 357, 0, 0, 0, 0, 0, 459,
	460, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 594, 0, 433, 0,
	0, 1480, 0, 0, 0, 405, 0, 0, 337, 0,
	0, 0, 449, 0, 391, 372, 616, 0, 0, 389,
	342, 418, 380, 424, 407, 432, 385, 381, 268, 408,
	307, 353, 280, 282, 302, 309, 311, 313, 314, 362,
	363, 375, 396, 409, 410, 411, 306, 290, 390, 291,
	324, 292, 269, 298, 296, 299, 398, 300, 271, 376,
	415, 0, 319, 386, 349, 272, 348, 377, 414, 413,
	281, 440, 446, 447, 536, 0, 452, 617, 618, 619,
	461, 466, 467, 468, 470, 471, 472, 473, 537, 554,
	521, 491, 454, 545, 488, 492, 493, 557, 0, 0,
	0, 445, 338, 339, 0, 317, 265, 266, 612, 303,
	368, 559, 592, 593, 484, 0, 546, 485, 494, 295,
	518, 530, 529, 364, 444, 0, 541, 544, 474, 611,
	0, 538, 553, 615, 552, 608, 374, 0, 395, 550,
	497, 0, 542, 516, 0, 543, 512, 547, 0, 486,
	0, 402, 426, 438, 455, 458, 487, 572, 573, 574,
	270, 457, 576, 577, 578, 579, 580, 581, 582, 575,
	429, 519, 496, 522, 437, 499, 498, 0, 0, 533,
	453, 534, 535, 358, 359, 360, 361, 321, 560, 288,
	456, 384, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 526, 523, 620, 0, 583, 584, 0,
	0, 450, 451, 316, 323, 469, 325, 287, 373, 318,
	435, 332, 0, 462, 527, 463, 586, 589, 587, 588,
	365, 328, 329, 399, 333, 343, 387, 434, 371, 392,
	285, 425, 400, 347, 513, 540, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 568, 567, 566, 565, 564, 563, 562, 561,
	0, 0, 510, 412, 297, 259, 293, 294, 301, 609,
	606, 416, 610, 0, 267, 490, 341, 0, 382, 315,
	555, 556, 0, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 260, 223, 224, 225, 226, 227, 228, 229,
	232, 233, 234, 235, 236, 237, 238, 239, 558, 230,
	231, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 0, 0, 261, 262,
	263, 264, 0, 0, 255, 256, 257, 258, 0, 0,
	0, 441, 442, 443, 465, 0, 427, 489, 607, 0,
	0, 0, 0, 0, 0, 0, 539, 551, 585, 0,
	595, 596, 598, 600, 599, 602, 0, 613, 480, 481,
	614, 591, 370, 0, 495, 528, 517, 601, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 310,
	0, 0, 340, 532, 514, 524, 515, 500, 501, 502,
	509, 320, 503, 504, 505, 475, 506, 476, 507, 508,
	0, 531, 482, 401, 354, 549, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 0,
	0, 0, 283, 205, 477, 597, 479, 478, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	406, 423, 284, 397, 436, 289, 404, 279, 369, 393,
	0, 0, 275, 421, 403, 351, 330, 331, 274, 0,
	388, 308, 322, 305, 367, 0, 420, 448, 304, 439,
	0, 431, 277, 0, 430, 366, 417, 422, 352, 346,
	276, 419, 350, 345, 334, 312, 464, 335, 336, 326,
	378, 344, 379, 327, 356, 355, 357, 0, 0, 0,
	0, 0, 459, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 594,
	0, 433, 0, 0, 0, 0, 0, 0, 405, 0,
	0, 337, 0, 0, 0, 449, 0, 391, 372, 616,
	0, 0, 389, 342, 418, 380, 424, 407, 432, 385,
	381, 268, 408, 307, 353, 280, 282, 302, 309, 311,
	313, 314, 362, 363, 375, 396, 409, 410, 411, 306,
	290, 390, 291, 324, 292, 269, 298, 296, 299, 398,
	300, 271, 376, 415, 0, 319, 386, 349, 272, 348,
	377, 414, 413, 281, 440, 446, 447, 536, 0, 452,
	617, 618, 619, 461, 466, 467, 468, 470, 471, 472,
	473, 537, 554, 521, 491, 454, 545, 488, 492, 493,
	557, 0, 0, 0, 445, 338, 339, 0, 317, 265,
	266, 612, 303, 368, 559, 592, 593, 484, 0, 546,
	485, 494, 295, 518, 530, 529, 364, 444, 0, 541,
	544, 474, 611, 0, 538, 553, 615, 552, 608, 374,
	0, 395, 550, 497, 0, 542, 516, 0, 543, 512,
	547, 0, 486, 0, 402, 426, 438, 455, 458, 487,
	572, 573, 574, 270, 457, 576, 577, 578, 579, 580,
	581, 582, 575, 429, 519, 496, 522, 437, 499, 498,
	0, 0, 533, 453, 534, 535, 358, 359, 360, 361,
	321, 560, 288, 456, 384, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 525, 526, 523, 620, 0,
	583, 584, 0, 0, 450, 451, 316, 323, 469, 325,
	287, 373, 318, 435, 332, 0, 462, 527, 463, 586,
	589, 587, 588, 365, 328, 329, 399, 333, 343, 387,
	434, 371, 392, 285, 425, 400, 347, 513, 540, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 567, 566, 565, 564,
	563, 562, 561, 0, 0, 510, 412, 297, 259, 293,
	294, 301, 609, 606, 416, 610, 0, 267, 490, 341,
	0, 382, 315, 555, 556, 0, 0, 215, 216, 217,
	218, 219, 220, 221, 222, 260, 223, 224, 225, 226,
	227, 228, 229, 232, 233, 234, 235, 236, 237, 238,
	239, 558, 230, 231, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 0,
	0, 261, 262, 263, 264, 0, 0, 255, 256, 257,
	258, 0, 0, 0, 441, 442, 443, 465, 0, 427,
	489, 607, 0, 0, 0, 0, 0, 0, 0, 539,
	551, 585, 0, 595, 596, 598, 600, 599, 602, 0,
	613, 480, 481, 614, 591, 370, 0, 495, 528, 517,
	601, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 310, 0, 0, 340, 532, 514, 524, 515,
	500, 501, 502, 509, 320, 503, 504, 505, 475, 506,
	476, 507, 508, 0, 531, 482, 401, 354, 549, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 0, 0, 283, 205, 477, 597, 479,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 406, 423, 284, 397, 436, 289, 404,
	279, 369, 393, 0, 0, 275, 421, 403, 351, 330,
	331, 274, 0, 388, 308, 322, 305, 367, 0, 420,
	448, 304, 439, 0, 431, 277, 0, 430, 366, 417,
	422, 352, 346, 276, 419, 350, 345, 334, 312, 464,
	335, 336, 326, 378, 344, 379, 327, 356, 355, 357,
	0, 0, 0, 0, 0, 459, 460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 590,
	0, 637, 594, 0, 433, 0, 0, 0, 0, 0,
	0, 405, 0, 0, 337, 0, 0, 0, 449, 0,
	391, 372, 616, 0, 0, 389, 342, 418, 380, 424,
	407, 432, 385, 381, 268, 408, 307, 353, 280, 282,
	302, 309, 311, 313, 314, 362, 363, 375, 396, 409,
	410, 411, 306, 290, 390, 291, 324, 292, 269, 298,
	296, 299, 398, 300, 271, 376, 415, 0, 319, 386,
	349, 272, 348, 377, 414, 413, 281, 440, 446, 447,
	536, 0, 452, 617, 618, 619, 461, 466, 467, 468,
	470, 471, 472, 473, 537, 554, 521, 491, 454, 545,
	488, 492, 493, 557, 0, 0, 0, 445, 338, 339,
	0, 317, 265, 266, 612, 303, 368, 559, 592, 593,
	484, 0, 546, 485, 494, 295, 518, 530, 529, 364,
	444, 0, 541, 544, 474, 611, 0, 538, 553, 615,
	552, 608, 374, 0, 395, 550, 497, 0, 542, 516,
	0, 543, 512, 547, 0, 486, 0, 402, 426, 438,
	455, 458, 487, 572, 573, 574, 270, 457, 576, 577,
	578, 579, 580, 581, 582, 575, 429, 519, 496, 522,
	437, 499, 498, 0, 0, 533, 453, 534, 535, 358,
	359, 360, 361, 321, 560, 288, 456, 384, 0, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 525, 526,
	523, 620, 0, 583, 584, 0, 0, 450, 451, 316,
	323, 469, 325, 287, 373, 318, 435, 332, 0, 462,
	527, 463, 586, 589, 587, 588, 365, 328, 329, 399,
	333, 343, 387, 434, 371, 392, 285, 425, 400, 347,
	513, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 568, 567,
	566, 565, 564, 563, 562, 561, 0, 0, 510, 412,
	297, 259, 293, 294, 301, 609, 606, 416, 610, 0,
	267, 490, 341, 0, 382, 315, 555, 556, 0, 0,
	215, 216, 217, 218, 219, 220, 221, 222, 260, 223,
	224, 225, 226, 227, 228, 229, 232, 233, 234, 235,
	236, 237, 238, 239, 558, 230, 231, 240, 241, 242,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 0, 0, 0, 261, 262, 263, 264, 0, 0,
	255, 256, 257, 258, 0, 0, 0, 441, 442, 443,
	465, 0, 427, 489, 607, 0, 0, 0, 0, 0,
	0, 0, 539, 551, 585, 0, 595, 596, 598, 600,
	599, 602, 0, 613, 480, 481, 614, 591, 370, 0,
	495, 528, 517, 601, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 310, 0, 0, 340, 532,
	514, 524, 515, 500, 501, 502, 509, 320, 503, 504,
	505, 475, 506, 476, 507, 508, 0, 531, 482, 401,
	354, 549, 548, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 283, 205,
	477, 597, 479, 478, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 406, 423, 284, 397,
	436, 289, 404, 279, 369, 393, 0, 0, 275, 421,
	403, 351, 330, 331, 274, 0, 388, 308, 322, 305,
	367, 0, 420, 448, 304, 439, 0, 431, 277, 0,
	430, 366, 417, 422, 352, 346, 276, 419, 350, 345,
	334, 312, 464, 335, 336, 326, 378, 344, 379, 327,
	356, 355, 357, 0, 0, 0, 0, 0, 459, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 594, 0, 433, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 337, 0, 0,
	0, 449, 0, 391, 372, 616, 0, 0, 389, 342,
	418, 380, 424, 407, 432, 385, 381, 268, 408, 307,
	353, 280, 282, 302, 309, 311, 313, 314, 362, 363,
	375, 396, 409, 410, 411, 306, 290, 390, 291, 324,
	292, 269, 298, 296, 299, 398, 300, 271, 376, 415,
	0, 319, 386, 349, 272, 348, 377, 414, 413, 281,
	440, 446, 447, 536, 0, 452, 617, 618, 619, 461,
	466, 467, 468, 470, 471, 472, 473, 537, 554, 521,
	491, 454, 545, 488, 492, 493, 557, 0, 0, 0,
	445, 338, 339, 0, 317, 265, 266, 612, 303, 368,
	559, 592, 593, 484, 0, 546, 485, 494, 295, 518,
	530, 529, 364, 444, 0, 541, 544, 474, 611, 0,
	538, 553, 615, 552, 608, 374, 0, 395, 550, 497,
	0, 542, 516, 0, 543, 512, 547, 0, 486, 0,
	402, 426, 438, 455, 458, 487, 572, 573, 574, 270,
	457, 576, 577, 578, 579, 580, 581, 582, 575, 429,
	519, 496, 522, 437, 499, 498, 0, 0, 533, 453,
	534, 535, 358, 359, 360, 361, 321, 560, 288, 456,
	384, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 526, 523, 620, 0, 583, 584, 0, 0,
	450, 451, 316, 323, 469, 325, 287, 373, 318, 435,
	332, 0, 462, 527, 463, 586, 589, 587, 588, 365,
	328, 329, 399, 333, 343, 387, 434, 371, 392, 285,
	425, 400, 347, 513, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 568, 567, 566, 565, 564, 563, 562, 561, 920,
	0, 510, 412, 297, 259, 293, 294, 301, 609, 606,
	416, 610, 0, 267, 490, 341, 0, 382, 315, 555,
	556, 0, 0, 215, 216, 217, 218, 219, 220, 221,
	222, 260, 223, 224, 225, 226, 227, 228, 229, 232,
	233, 234, 235, 236, 237, 238, 239, 558, 230, 231,
	240, 241, 242, 243, 244, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 0, 261, 262, 263,
	264, 0, 0, 255, 256, 257, 258, 0, 0, 0,
	441, 442, 443, 465, 0, 427, 489, 607, 0, 0,
	0, 0, 0, 0, 0, 539, 551, 585, 0, 595,
	596, 598, 600, 599, 602, 0, 613, 480, 481, 614,
	591, 370, 0, 495, 528, 517, 601, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 310, 0,
	0, 340, 532, 514, 524, 515, 500, 501, 502, 509,
	320, 503, 504, 505, 475, 506, 476, 507, 508, 0,
	531, 482, 401, 354, 549, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 283, 205, 477, 597, 479, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 406,
	423, 284, 397, 436, 289, 404, 279, 369, 393, 0,
	0, 275, 421, 403, 351, 330, 331, 274, 0, 388,
	308, 322, 305, 367, 0, 420, 448, 304, 439, 0,
	431, 277, 0, 430, 366, 417, 422, 352, 346, 276,
	419, 350, 345, 334, 312, 464, 335, 336, 326, 378,
	344, 379, 327, 356, 355, 357, 0, 0, 0, 0,
	0, 459, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 590, 0, 0, 594, 0,
	433, 0, 0, 0, 0, 0, 0, 405, 0, 0,
	337, 0, 0, 0, 449, 0, 391, 372, 616, 0,
	0, 389, 342, 418, 380, 424, 407, 432, 385, 381,
	268, 408, 307, 353, 280, 282, 302, 309, 311, 313,
	314, 362, 363, 375, 396, 409, 410, 411, 306, 290,
	390, 291, 324, 292, 269, 298, 296, 299, 398, 300,
	271, 376, 415, 0, 319, 386, 349, 272, 348, 377,
	414, 413, 281, 440, 446, 447, 536, 0, 452, 617,
	618, 619, 461, 466, 467, 468, 470, 471, 472, 473,
	537, 554, 521, 491, 454, 545, 488, 492, 493, 557,
	0, 0, 0, 445, 338, 339, 0, 317, 265, 266,
	612, 303, 368, 559, 592, 593, 484, 0, 546, 485,
	494, 295, 518, 530, 529, 364, 444, 0, 541, 544,
	474, 611, 0, 538, 553, 615, 552, 608, 374, 0,
	395, 550, 497, 0, 542, 516, 0, 543, 512, 547,
	0, 486, 0, 402, 426, 438, 455, 458, 487, 572,
	573, 574, 270, 457, 576, 577, 578, 579, 580, 581,
	582, 575, 429, 519, 496, 522, 437, 499, 498, 0,
	0, 533, 453, 534, 535, 358, 359, 360, 361, 321,
	560, 288, 456, 384, 0, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 525, 526, 523, 620, 0, 583,
	584, 0, 0, 450, 451, 316, 323, 469, 325, 287,
	373, 318, 435, 332, 0, 462, 527, 463, 586, 589,
	587, 588, 365, 328, 329, 399, 333, 343, 387, 434,
	371, 392, 285, 425, 400, 347, 513, 540, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 568, 567, 566, 565, 564, 563,
	562, 561, 0, 0, 510, 412, 297, 259, 293, 294,
	301, 609, 606, 416, 610, 0, 267, 490, 341, 0,
	382, 315, 555, 556, 0, 0, 215, 216, 217, 218,
	219, 220, 221, 222, 260, 223, 224, 225, 226, 227,
	228, 229, 232, 233, 234, 235, 236, 237, 238, 239,
	558, 230, 231, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 0, 0,
	261, 262, 263, 264, 0, 0, 255, 256, 257, 258,
	0, 0, 0, 441, 442, 443, 465, 0, 427, 489,
	607, 0, 0, 0, 0, 0, 0, 0, 539, 551,
	585, 0, 595, 596, 598, 600, 599, 602, 0, 613,
	480, 481, 614, 591, 370, 0, 495, 528, 517, 601,
	483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 310, 0, 0, 340, 532, 514, 524, 515, 500,
	501, 502, 509, 320, 503, 504, 505, 475, 506, 476,
	507, 508, 0, 531, 482, 401, 354, 549, 548, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 283, 205, 477, 597, 479, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 406, 1430, 284, 397, 436, 289, 404, 279,
	369, 393, 0, 0, 275, 421, 403, 351, 330, 331,
	274, 0, 388, 308, 322, 305, 367, 0, 420, 448,
	304, 439, 0, 431, 277, 0, 430, 366, 417, 422,
	352, 346, 276, 419, 350, 345, 334, 312, 464, 335,
	336, 326, 378, 344, 379, 327, 356, 355, 357, 0,
	0, 0, 0, 0, 459, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 594, 0, 433, 0, 0, 0, 0, 0, 0,
	405, 0, 0, 337, 0, 0, 0, 449, 0, 391,
	372, 616, 0, 0, 389, 342, 418, 380, 424, 407,
	432, 385, 381, 268, 408, 307, 353, 280, 282, 302,
	309, 311, 313, 314, 362, 363, 375, 396, 409, 410,
	411, 306, 290, 390, 291, 324, 292, 269, 298, 296,
	299, 398, 300, 271, 376, 415, 0, 319, 386, 349,
	272, 348, 377, 414, 413, 281, 440, 446, 447, 536,
	0, 452, 617, 618, 619, 461, 466, 467, 468, 470,
	471, 472, 473, 537, 554, 521, 491, 454, 545, 488,
	492, 493, 557, 0, 0, 0, 445, 338, 339, 0,
	317, 265, 266, 612, 303, 368, 559, 592, 593, 484,
	0, 546, 485, 494, 295, 518, 530, 529, 364, 444,
	0, 541, 544, 474, 611, 0, 538, 553, 615, 552,
	608, 374, 0, 395, 550, 497, 0, 542, 516, 0,
	543, 512, 547, 0, 486, 0, 402, 426, 438, 455,
	458, 487, 572, 573, 574, 270, 457, 576, 577, 578,
	579, 580, 581, 582, 575, 429, 519, 496, 522, 437,
	499, 498, 0, 0, 533, 453, 534, 535, 358, 359,
	360, 361, 321, 560, 288, 456, 384, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 525, 526, 523,
	620, 0, 583, 584, 0, 0, 450, 451, 316, 323,
	469, 325, 287, 373, 318, 435, 332, 0, 462, 527,
	463, 586, 589, 587, 588, 365, 328, 329, 399, 333,
	343, 387, 434, 371, 392, 285, 425, 400, 347, 513,
	540, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 567, 566,
	565, 564, 563, 562, 561, 0, 0, 510, 412, 297,
	259, 293, 294, 301, 609, 606, 416, 610, 0, 267,
	490, 341, 0, 382, 315, 555, 556, 0, 0, 215,
	216, 217, 218, 219, 220, 221, 222, 260, 223, 224,
	225, 226, 227, 228, 229, 232, 233, 234, 235, 236,
	237, 238, 239, 558, 230, 231, 240, 241, 242, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 0, 0, 261, 262, 263, 264, 0, 0, 255,
	256, 257, 258, 0, 0, 0, 441, 442, 443, 465,
	0, 427, 489, 607, 0, 0, 0, 0, 0, 0,
	0, 539, 551, 585, 0, 595, 596, 598, 600, 599,
	602, 0, 613, 480, 481, 614, 591, 370, 0, 495,
	528, 517, 601, 483, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 340, 532, 514,
	524, 515, 500, 501, 502, 509, 320, 503, 504, 505,
	475, 506, 476, 507, 508, 0, 531, 482, 401, 354,
	549, 548, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 0, 0, 0, 283, 205, 477,
	597, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 406, 1428, 284, 397, 436,
	289, 404, 279, 369, 393, 0, 0, 275, 421, 403,
	351, 330, 331, 274, 0, 388, 308, 322, 305, 367,
	0, 420, 448, 304, 439, 0, 431, 277, 0, 430,
	366, 417, 422, 352, 346, 276, 419, 350, 345, 334,
	312, 464, 335, 336, 326, 378, 344, 379, 327, 356,
	355, 357, 0, 0, 0, 0, 0, 459, 460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 0, 594, 0, 433, 0, 0, 0,
	0, 0, 0, 405, 0, 0, 337, 0, 0, 0,
	449, 0, 391, 372, 616, 0, 0, 389, 342, 418,
	380, 424, 407, 432, 385, 381, 268, 408, 307, 353,
	280, 282, 302, 309, 311, 313, 314, 362, 363, 375,
	396, 409, 410, 411, 306, 290, 390, 291, 324, 292,
	269, 298, 296, 299, 398, 300, 271, 376, 415, 0,
	319, 386, 349, 272, 348, 377, 414, 413, 281, 440,
	446, 447, 536, 0, 452, 617, 618, 619, 461, 466,
	467, 468, 470, 471, 472, 473, 537, 554, 521, 491,
	454, 545, 488, 492, 493, 557, 0, 0, 0, 445,
	338, 339, 0, 317, 265, 266, 612, 303, 368, 559,
	592, 593, 484, 0, 546, 485, 494, 295, 518, 530,
	529, 364, 444, 0, 541, 544, 474, 611, 0, 538,
	553, 615, 552, 608, 374, 0, 395, 550, 497, 0,
	542, 516, 0, 543, 512, 547, 0, 486, 0, 402,
	426, 438, 455, 458, 487, 572, 573, 574, 270, 457,
	576, 577, 578, 579, 580, 581, 582, 575, 429, 519,
	496, 522, 437, 499, 498, 0, 0, 533, 453, 534,
	535, 358, 359, 360, 361, 321, 560, 288, 456, 384,
	0, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	525, 526, 523, 620, 0, 583, 584, 0, 0, 450,
	451, 316, 323, 469, 325, 287, 373, 318, 435, 332,
	0, 462, 527, 463, 586, 589, 587, 588, 365, 328,
	329, 399, 333, 343, 387, 434, 371, 392, 285, 425,
	400, 347, 513, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	568, 567, 566, 565, 564, 563, 562, 561, 0, 0,
	510, 412, 297, 259, 293, 294, 301, 609, 606, 416,
	610, 0, 267, 490, 341, 0, 382, 315, 555, 556,
	0, 0, 215, 216, 217, 218, 219, 220, 221, 222,
	260, 223, 224, 225, 226, 227, 228, 229, 232, 233,
	234, 235, 236, 237, 238, 239, 558, 230, 231, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 0, 0, 261, 262, 263, 264,
	0, 0, 255, 256, 257, 258, 0, 0, 0, 441,
	442, 443, 465, 0, 427, 489, 607, 0, 0, 0,
	0, 0, 0, 0, 539, 551, 585, 0, 595, 596,
	598, 600, 599, 602, 0, 613, 480, 481, 614, 591,
	370, 0, 495, 528, 517, 601, 483, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	340, 532, 514, 524, 515, 500, 501, 502, 509, 320,
	503, 504, 505, 475, 506, 476, 507, 508, 0, 531,
	482, 401, 354, 549, 548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 0, 0, 0,
	283, 205, 477, 597, 479, 478, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 406, 423,
	284, 397, 436, 289, 404, 279, 369, 393, 0, 0,
	275, 421, 403, 351, 330, 331, 274, 0, 388, 308,
	322, 305, 367, 0, 420, 448, 304, 439, 0, 431,
	277, 0, 430, 366, 417, 422, 352, 346, 276, 419,
	350, 345, 334, 312, 464, 335, 336, 326, 378, 344,
	379, 327, 356, 355, 357, 0, 0, 0, 0, 0,
	459, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 594, 0, 433,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 337,
	0, 0, 0, 449, 0, 391, 372, 616, 0, 0,
	389, 342, 418, 380, 424, 407, 432, 385, 381, 268,
	408, 307, 353, 280, 282, 704, 309, 311, 313, 314,
	362, 363, 375, 396, 409, 410, 411, 306, 290, 390,
	291, 324, 292, 269, 298, 296, 299, 398, 300, 271,
	376, 415, 0, 319, 386, 349, 272, 348, 377, 414,
	413, 281, 440, 446, 447, 536, 0, 452, 617, 618,
	619, 461, 466, 467, 468, 470, 471, 472, 473, 537,
	554, 521, 491, 454, 545, 488, 492, 493, 557, 0,
	0, 0, 445, 338, 339, 0, 317, 265, 266, 612,
	303, 368, 559, 592, 593, 484, 0, 546, 485, 494,
	295, 518, 530, 529, 364, 444, 0, 541, 544, 474,
	611, 0, 538, 553, 615, 552, 608, 374, 0, 395,
	550, 497, 0, 542, 516, 0, 543, 512, 547, 0,
	486, 0, 402, 426, 438, 455, 458, 487, 572, 573,
	574, 270, 457, 576, 577, 578, 579, 580, 581, 582,
	575, 429, 519, 496, 522, 437, 499, 498, 0, 0,
	533, 453, 534, 535, 358, 359, 360, 361, 321, 560,
	288, 456, 384, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 525, 526, 523, 620, 0, 583, 584,
	0, 0, 450, 451, 316, 323, 469, 325, 287, 373,
	318, 435, 332, 0, 462, 527, 463, 586, 589, 587,
	588, 365, 328, 329, 399, 333, 343, 387, 434, 371,
	392, 285, 425, 400, 347, 513, 540, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 567, 566, 565, 564, 563, 562,
	561, 0, 0, 510, 412, 297, 259, 293, 294, 301,
	609, 606, 416, 610, 0, 267, 490, 341, 0, 382,
	315, 555, 556, 0, 0, 215, 216, 217, 218, 219,
	220, 221, 222, 260, 223, 224, 225, 226, 227, 228,
	229, 232, 233, 234, 235, 236, 237, 238, 239, 558,
	230, 231, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 0, 0, 261,
	262, 263, 264, 0, 0, 255, 256, 257, 258, 0,
	0, 0, 441, 442, 443, 465, 0, 427, 489, 607,
	0, 0, 0, 0, 0, 0, 0, 539, 551, 585,
	0, 595, 596, 598, 600, 599, 602, 0, 613, 480,
	481, 614, 591, 370, 0, 495, 528, 517, 601, 483,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	310, 0, 0, 340, 532, 514, 524, 515, 500, 501,
	502, 509, 320, 503, 504, 505, 475, 506, 476, 507,
	508, 0, 531, 482, 401, 354, 549, 548, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	0, 0, 0, 283, 205, 477, 597, 479, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 406, 423, 284, 397, 436, 289, 404, 279, 369,
	393, 0, 0, 275, 421, 403, 351, 330, 331, 274,
	0, 388, 308, 322, 305, 367, 0, 420, 448, 304,
	439, 0, 431, 277, 0, 430, 366, 417, 422, 352,
	346, 276, 419, 350, 345, 334, 312, 464, 335, 336,
	326, 378, 344, 379, 327, 356, 355, 357, 0, 0,
	0, 0, 0, 459, 460, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	594, 0, 433, 0, 0, 0, 0, 0, 0, 405,
	0, 0, 337, 0, 0, 0, 449, 0, 391, 372,
	616, 0, 0, 389, 342, 418, 380, 424, 407, 432,
	661, 381, 268, 408, 307, 353, 280, 282, 302, 309,
	311, 313, 314, 362, 363, 375, 396, 409, 410, 411,
	306, 290, 390, 291, 324, 292, 269, 298, 296, 299,
	398, 300, 271, 376, 415, 0, 319, 386, 349, 272,
	348, 377, 414, 413, 281, 440, 446, 447, 536, 0,
	452, 617, 618, 619, 461, 466, 467, 468, 470, 471,
	472, 473, 537, 554, 521, 491, 454, 545, 488, 492,
	493, 557, 0, 0, 0, 445, 338, 339, 0, 317,
	265, 266, 612, 303, 368, 559, 592, 593, 484, 0,
	546, 485, 494, 295, 518, 530, 529, 364, 444, 0,
	541, 544, 474, 611, 0, 538, 553, 615, 552, 608,
	374, 0, 395, 550, 497, 0, 542, 516, 0, 543,
	512, 547, 0, 486, 0, 402, 426, 438, 455, 458,
	487, 572, 573, 574, 270, 457, 576, 577, 578, 579,
	580, 581, 662, 575, 429, 519, 496, 522, 437, 499,
	498, 0, 0, 533, 453, 534, 535, 358, 359, 360,
	361, 321, 560, 288, 456, 384, 0, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 525, 526, 523, 620,
	0, 583, 584, 0, 0, 450, 451, 316, 323, 469,
	325, 287, 373, 318, 435, 332, 0, 462, 527, 463,
	586, 589, 587, 588, 365, 328, 329, 399, 333, 343,
	387, 434, 371, 392, 285, 425, 400, 347, 513, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 568, 567, 566, 565,
	564, 563, 562, 561, 0, 0, 510, 412, 297, 259,
	293, 294, 301, 609, 606, 416, 610, 0, 267, 490,
	341, 0, 382, 315, 555, 556, 0, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 260, 223, 224, 225,
	226, 227, 228, 229, 232, 233, 234, 235, 236, 237,
	238, 239, 558, 230, 231, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 252, 253, 0,
	0, 0, 261, 262, 263, 264, 0, 0, 255, 256,
	257, 258, 0, 0, 0, 441, 442, 443, 465, 0,
	427, 489, 607, 0, 0, 0, 0, 0, 0, 0,
	539, 551, 585, 0, 595, 596, 598, 600, 599, 602,
	0, 613, 480, 481, 614, 591, 683, 682, 689, 679,
	0, 0, 0, 0, 0, 0, 0, 0, 686, 687,
	0, 688, 692, 0, 0, 673, 0, 0, 0, 683,
	682, 689, 679, 0, 0, 697, 1184, 1185, 1186, 1183,
	0, 686, 687, 0, 688, 692, 0, 0, 673, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 697, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 703, 0, 0, 0, 0, 702, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1690, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1908, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1910, 0,
	0, 1908, 0, 0, 674, 676, 675, 0, 0, 0,
	0, 0, 0, 0, 681, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 685, 674, 676, 675,
	0, 0, 0, 700, 0, 0, 1910, 681, 0, 0,
	678, 0, 0, 0, 668, 0, 0, 0, 0, 685,
	1885, 0, 0, 0, 0, 0, 700, 0, 1686, 0,
	0, 0, 0, 678, 0, 1683, 0, 0, 0, 1685,
	1682, 1684, 1688, 1689, 0, 0, 0, 1687, 3566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1885, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3537, 0, 0, 0, 1901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	680, 684, 690, 0, 691, 693, 1901, 0, 694, 695,
	696, 0, 0, 698, 699, 1908, 0, 0, 0, 0,
	0, 0, 0, 680, 684, 690, 0, 691, 693, 0,
	0, 694, 695, 696, 0, 0, 698, 699, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1889, 0,
	1910, 0, 0, 0, 0, 0, 0, 0, 0, 1895,
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680,
	1681, 1693, 1694, 1695, 1696, 1697, 1698, 1691, 1692, 1883,
	1917, 0, 0, 1884, 1886, 1888, 1889, 1890, 1891, 1892,
	1896, 1897, 1898, 1900, 1903, 1904, 1905, 1895, 0, 0,
	0, 0, 1885, 0, 1893, 1902, 1894, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1883, 1917, 0,
	0, 1884, 1886, 1888, 0, 1890, 1891, 1892, 1896, 1897,
	1898, 1900, 1903, 1904, 1905, 0, 0, 0, 1909, 0,
	0, 0, 1893, 1902, 1894, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 677,
	1901, 0, 0, 0, 0, 0, 1909, 0, 0, 0,
	0, 0, 0, 1906, 0, 0, 0, 0, 0, 0,
	0, 0, 677, 0, 0, 0, 0, 0, 0, 0,
	1882, 0, 0, 0, 0, 0, 0, 1881, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1899, 0, 0, 0, 0, 0, 0, 1882, 0,
	1887, 0, 0, 0, 0, 1881, 0, 0, 0, 0,
	1889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1895, 0, 0, 0, 0, 0, 0, 0, 1899,
	0, 0, 0, 0, 0, 0, 0, 0, 1887, 0,
	0, 1883, 1917, 0, 0, 1884, 1886, 1888, 0, 1890,
	1891, 1892, 1896, 1897, 1898, 1900, 1903, 1904, 1905, 0,
	0, 0, 0, 0, 0, 0, 1893, 1902, 1894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1909, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1906, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1882, 0, 0, 0, 0, 0, 0, 1881,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1899, 0, 0, 0, 0, 0, 0,
	0, 0, 1887,
}

var yyPact = [...]int{
	3841, -1000, -1000, -1000, -310, 14173, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 45468, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 384, 45468, -305, 28304, 43629, -1000, -1000, 2539,
	-1000, 44242, 16032, 45468, 452, 436, 45468, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 827, -1000, 47920,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 728, 48543, 47307,
	11084, -227, -1000, 1425, -45, 2453, 381, 1025, 1043, 1092,
	1092, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 375, 948, 44855, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3656,
	656, 948, 20944, 83, 82, 1425, 397, -95, -86, -96,
	305, -1000, 1161, 3945, 201, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11084, 11084, 14173, -346,
	14173, 11084, 45468, 45468, -1000, -1000, -1000, -1000, -305, 44242,
	728, 48543, 11084, 2453, 381, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -86, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -95, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -96, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 82, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4884, -1000, 1561, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2281, 2970, 1557, 2451, 660, 43629, 45468, -1000, 151,
	660, -1000, -1000, -1000, 1425, 3381, -1000, 45468, 45468, 163,
	1813, -1000, 425, 383, 374, 292, 1549, -1000, -1000, -1000,
	-1000, -1000, -1000, 566, 3345, -1000, 45468, 45468, 2994, 45468,
	-1000, 2241, 592, -1000, 4123, 3191, 1194, 876, 3008, -1000,
	-1000, 2969, -1000, 299, 261, 252, 431, 380, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 293, -1000, 3257, -1000, -1000,
	287, -1000, -1000, 294, -1000, -1000, -1000, 81, -1000, -1000,
	-1000, -1000, -1000, -1000, -18, -1000, -1000, 1116, 2204, 11084,
	2790, -1000, 1783, 1551, -1000, -1000, -1000, 6766, 12932, 12932,
	12932, 12932, 45468, -1000, -1000, 2754, 11084, 2968, 2964, 2963,
	2961, -1000, -1000, -1000, -1000, -1000, -1000, 1546, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1977, -1000, -1000,
	-1000, 13548, -1000, 2960, 2954, 2950, 2949, 2948, 2947, 2944,
	2938, 2937, 2936, 2931, 2930, 2926, 2925, 2624, 15409, 2915,
	2450, 2449, 2914, 2911, 2910, 2446, 2904, 2903, 2902, 2624,
	2624, 2901, 2900, 2897, 2896, 2895, 2891, 2881, 2880, 2877,
	2863, 2862, 2856, 2848, 2844, 2843, 2842, 2829, 2828, 2826,
	2825, 2823, 2819, 2814, 2812, 2811, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1253,
	-1000, 2774, 3359, 2691, -1000, 3245, 3241, 3233, 3227, -274,
	2773, 2201, -1000, -1000, 110, 3343, 45468, -1000, -73, -1000,
	-1000, 1045, -1000, 975, -1000, 723, 45468, 45468, 206, 902,
	723, 723, 723, 723, 723, 789, 723, 3270, 821, 814,
	811, 810, 723, -39, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1789, 1787, 3043, 919, -1000, -1000, -1000, -1000, 1411,
	45468, -1000, 2690, 1697, 1697, 3330, 3268, 612, 599, 595,
	1697, 504, -1000, 1766, 1766, 1766, 1766, 1697, 477, 591,
	3275, 3275, 73, 1766, 43, 1697, 1697, 43, 1697, 1697,
	-1000, 1778, 248, -280, -1000, -1000, -1000, -1000, 1766, 1766,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3252, 3251, 728,
	728, 45468, 202, 45468, 728, 728, 728, 758, 18, 46694,
	46081, 2241, 588, 585, 1433, 1747, -1000, 1617, 45468, 45468,
	1617, 1617, 24013, 23400, -1000, 45468, -1000, 3359, 2691, 2616,
	1472, 2611, 2691, -101, -105, -106, 728, 728, 728, 728,
	728, 243, 728, 728, 728, 728, 728, 45468, 45468, 43016,
	728, 728, 728, 9230, 9230, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14173, 1828, 2156, 200, -21, -297,
	244, -1000, -1000, 45468, 3143, 258, -1000, -1000, -1000, 2631,
	-1000, 2667, 2667, 2667, 2667, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2667, 2667, 2689, 2772, -1000, -1000,
	2665, 2665, 2665, 2631, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2672,
	2672, 2684, 2684, 2672, 45468, -125, -1000, -1000, 11084, 45468,
	3172, 390, 2761, 660, -1000, -1000, 45468, 108, 391, 3359,
	3167, 3275, 3324, -1000, -1000, 1541, 2187, 2445, -1000, 292,
	-1000, 412, 292, 1627, -1000, 1051, -1000, -1000, -1000, -1000,
	-1000, 45468, -18, 366, -1000, -1000, 2425, 2760, -1000, 580,
	1185, 1368, -1000, 312, 48566, 36273, 2241, 36273, 45468, -1000,
	-1000, -1000, -1000, -1000, -1000, 75, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	269, -1000, 11084, 11084, 11084, 11084, 11084, -1000, 650, 12316,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 12932, 12932, 12932,
	12932, 12932, 12932, 12932, 12932, 12932, 12932, 12932, 12932, 2737,
	1705, 12932, 12932, 12932, 12932, 25852, 1472, 3105, 1419, 290,
	1551, 1551, 1551, 1551, 11084, -1000, 1834, 2204, 11084, 11084,
	11084, 11084, 45468, -1000, -1000, 48475, 11084, 11084, 3717, 11084,
	3221, 11084, 11084, 11084, 2599, 5525, 45468, 11084, -1000, 2597,
	2596, -1000, -1000, 1998, 11084, -1000, -1000, 11084, -1000, -1000,
	11084, 12932, 11084, -1000, 11084, 11084, 11084, -1000, -1000, 1584,
	3221, 3221, 3221, 1719, 11084, 11084, 3221, 3221, 3221, 1711,
	3221, 3221, 3221, 3221, 3221, 3221, 3221, 3221, 3221, 3221,
	2595, 2591, 2590, 10468, 3275, -227, -1000, 8614, 3167, 3275,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-276, 2759, 45468, 2440, 2439, -319, 1016, 450, 42, 1009,
	960, 991, -1000, 45468, 1852, 3208, -1000, 2757, 45468, 723,
	723, 723, -1000, 41177, 36273, 45468, 45468, 2241, 45468, 45468,
	45468, 723, 723, 723, 723, 45468, -1000, 3146, 36273, 3092,
	758, -1000, 45468, 1411, 3207, 45468, 3330, 12932, 12932, -1000,
	-1000, 11084, 42403, 1766, 1697, 1697, -1000, -1000, 45468, -1000,
	-1000, -1000, 1766, 45468, 1766, 1766, 3330, 1766, -1000, -1000,
	-1000, 1697, 1697, -1000, -1000, 11084, -1000, -1000, 1766, 1766,
	-1000, -1000, 3330, 45468, 74, 3330, 3330, 66, -1000, -1000,
	-1000, 1697, 45468, 45468, 723, 45468, -1000, 45468, 45468, -1000,
	-1000, 45468, 45468, 4355, 41177, 41790, 3248, -1000, 36273, 45468,
	45468, 34434, -1000, 1348, -1000, 9, -1000, 37, 18, 1617,
	18, 1617, -1000, 576, 582, 22174, 528, 36273, 6141, -1000,
	-1000, 1617, 1617, 6141, 6141, 1562, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1407, -1000, 255, 3275, -1000, -1000, -1000,
	-1000, -1000, 2179, 2178, 2174, 45468, 41177, 36273, 2241, 45468,
	728, 45468, 45468, 45468, 45468, 45468, -1000, 2756, 1538, -1000,
	3184, 45468, 45468, 45468, 1355, -1000, -1000, 19097, 1537, 1355,
	-1000, 1856, -1000, 11084, 14173, -251, 11084, 14173, 14173, 11084,
	14173, -1000, 11084, 232, -1000, -1000, -1000, -1000, 2172, -1000,
	2164, -1000, -1000, -1000, -1000, -1000, 2438, 2438, -1000, 2158,
	-1000, -1000, -1000, -1000, 2157, -1000, -1000, 2154, -1000, -1000,
	-1000, -1000, -169, 2584, 1116, -1000, 2429, 3005, -228, -1000,
	20331, 45468, 45468, 390, -324, -1000, 1785, 1774, 1769, -1000,
	-228, -1000, 19714, 45468, 3275, -1000, -232, 3167, 11084, 45468,
	-1000, 3265, -1000, -1000, 292, -1000, 429, 360, -1000, -1000,
	-1000, -1000, -1000, -1000, 1525, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 376, 1392, -1000, 45468, -1000,
	-1000, 312, 36273, 38112, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 234, -1000, -1000, 187, -1000, 786, 207, 1616, -1000,
	-1000, 218, 217, 136, 914, 2204, -1000, 1887, 1887, 1866,
	-1000, 689, -1000, -1000, -1000, -1000, 2754, -1000, -1000, -1000,
	2033, 1391, -1000, 1649, 1649, 1569, 1569, 1569, 1569, 1569,
	2704, 2704, -1000, -1000, -1000, 6766, 2737, 12932, 12932, 12932,
	12932, 839, 839, 3344, 3408, -1000, -1000, -1000, -1000, 11084,
	188, 1840, -1000, 11084, 2249, 1314, 2094, 1333, 1520, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2583,
	2575, 2192, 3341, 2574, 11084, -1000, -1000, 1600, 1593, 1588,
	-1000, 2362, 9852, -1000, -1000, -1000, 2566, 1512, 2564, -1000,
	-1000, -1000, 2563, 1568, 1153, 2560, 1590, 2558, 2557, 2556,
	2555, 1387, 11084, 11084, 11084, 11084, 2553, 1566, 1559, 11084,
	11084, 11084, 11084, 2552, 11084, 11084, 11084, 11084, 11084, 11084,
	11084, 11084, 11084, 11084, 113, 113, 113, 1364, 1361, -1000,
	-1000, 1558, -1000, 2204, -1000, -1000, 3167, -1000, 2735, 2149,
	1356, -1000, -1000, -301, 2392, 45468, 1013, 45468, -1000, -1000,
	1006, 973, 1039, 3264, 3176, 45468, 1100, 2734, 45468, 45468,
	45468, 222, -1000, -1000, 1169, -1000, 207, 226, 459, 1150,
	2993, 3340, -127, 45468, 45468, 45468, 45468, 3202, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 40564, -1000, 2733, 1555,
	-1000, -1000, 1551, 1551, 2204, 2992, 45468, 45468, 3330, 3330,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1766, 3330, 3330,
	1205, 1697, 1766, -1000, -1000, 1766, -327, -1000, 1766, -1000,
	-327, 1511, -327, 45468, -1000, -1000, -1000, 3196, 2690, 1349,
	-1000, -1000, -1000, 3323, 1573, 603, 603, 924, 623, 3322,
	17871, -1000, 1686, 1115, 783, 3089, 296, -1000, 1686, -162,
	693, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 551, 546,
	1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686,
	1686, 1034, 1686, 1686, 1686, 1686, 1686, -1000, 1686, 2730,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 572, 220, 3240,
	327, -1000, 331, 1169, 3238, 361, 3055, 1191, -1000, -1000,
	-1000, -1000, 26465, 26465, 21561, 26465, -1000, 203, 18, -1,
	-1000, -1000, 1348, 6141, 1348, 6141, -1000, -1000, 778, -1000,
	-1000, 1150, -1000, 45468, 45468, -1000, -1000, 2728, 1755, -1000,
	-1000, 15409, -1000, 6141, 6141, -1000, -1000, 27691, 45468, -1000,
	-23, -1000, -6, 3167, -1000, -1000, -1000, 1335, -1000, -1000,
	1339, 1150, 3004, 45468, 1335, 1335, 1335, -1000, -1000, 17258,
	45468, 45468, -1000, -1000, -1000, 3330, 9230, -1000, 34434, -1000,
	-1000, 39951, -1000, 39338, 3330, 1823, -1000, 14173, 2130, 197,
	-1000, 240, -299, 195, 2020, 193, 2204, -1000, -1000, 2548,
	2545, 1547, -1000, 1534, 2540, 1532, 1531, 2148, -1000, 39,
	-1000, 3148, 1151, -1000, 2722, -1000, 1528, 3040, -1000, 1330,
	-1000, 1754, 1522, -1000, -1000, -1000, 11084, 38725, 11084, 1151,
	1516, 3033, 1330, 3167, 2428, -1000, 1329, -1000, 2106, 1500,
	157, -1000, -1000, -1000, 45468, 728, 2425, 1513, 38112, 1203,
	-1000, 774, 1495, 1492, -1000, 36273, 282, 36273, -1000, 36273,
	-1000, -1000, 394, -1000, 45468, 3147, -1000, -1000, -1000, 2392,
	1752, -325, 45468, -1000, -1000, -1000, -1000, -1000, 1504, -1000,
	839, 839, 3344, 2810, -1000, 12932, -1000, 12932, 3081, -1000,
	1821, -1000, 11084, 2125, 4784, 11084, 4784, 874, 25239, 45468,
	-1000, -1000, 11084, 11084, -1000, 3067, -1000, -1000, -1000, -1000,
	11084, 11084, 1999, -1000, 45468, -1000, -1000, -1000, -1000, 25239,
	-1000, 12932, -1000, -1000, -1000, -1000, 11084, 1216, 1216, 3027,
	1490, 113, 113, 113, 3007, 2986, 2966, 1471, 113, 2945,
	2928, 2912, 2893, 2889, 2878, 2854, 2821, 2779, 2696, -1000,
	2716, -1000, -1000, 1969, 11700, 8614, -1000, -1000, 281, 1312,
	2135, 2420, 130, -1000, 1749, -1000, 45468, 1024, -1000, -1000,
	-1000, 944, 378, -1000, 249, 2532, 1298, -1000, -1000, 45468,
	-1000, -1000, -1000, 17258, 2690, 2707, 2690, 112, 1686, 568,
	36273, 579, -1000, 45468, 45468, 2159, 1748, 3003, 736, 3131,
	45468, 2706, 388, 2705, 2698, 3195, 447, 4968, 45468, 1308,
	-1000, 1480, 3945, -1000, 45468, -1000, 2241, -1000, 1697, -1000,
	-1000, 3330, -1000, -1000, 11084, 11084, 3330, 1697, 1697, -1000,
	1003, 1766, -1000, 45468, -1000, -1000, 447, 4968, 3194, 4509,
	503, 2255, -1000, 45468, -1000, -1000, -1000, 794, -1000, 933,
	723, 45468, 1900, 933, 1899, 2695, -1000, -1000, 45468, 45468,
	45468, 45468, -1000, -1000, 45468, -1000, 45468, 45468, 45468, 45468,
	45468, 37499, -1000, 45468, 45468, -1000, 45468, 1897, 45468, 1896,
	3185, -1000, 1686, 1686, 885, -1000, -1000, 575, -1000, 37499,
	2134, 2132, 2131, 2128, 2419, 2418, 2415, 1686, 1686, 2126,
	2414, 36886, 2405, 1142, 2113, 2111, 2103, 2153, 2404, 812,
	-1000, 2402, 2150, 2124, 2123, 45468, 2693, 2359, -1000, -1000,
	112, 1686, 325, 45468, 1744, 1743, 568, 457, -28, 22787,
	45468, 34434, 34434, 34434, 34434, -1000, 3024, 2981, 2927, -1000,
	3041, 3037, 3103, 45468, 34434, 2690, -1000, 36886, -1000, -1000,
	-1000, 1472, 1463, 3177, 1059, 11084, -1000, -1000, 1, 8,
	-1000, -1000, -1000, 36273, 2400, 528, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3263, 45468, 45468, 682, 2524, 1278, -1000,
	-1000, -1000, 4968, 2667, 2667, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2667, 2667, 2689, -1000, -1000, 2665,
	2665, 2665, 2631, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2672, 2672, 2684, 2684, 2672, -1000, -1000,
	3328, -1000, 1272, -1000, -1000, 1479, -1000, 3328, 1848, -312,
	14173, 1825, 1713, -1000, 11084, 14173, 11084, -252, 313, -255,
	-1000, -1000, -1000, 2399, -1000, -1000, -1000, 2102, -1000, 2100,
	-1000, 128, 140, 1888, -228, 8614, 395, 45468, -228, 45468,
	8614, -1000, 45468, 178, -335, -341, 171, 371, -228, 3263,
	39, 11084, 3059, -1000, -1000, 45468, 2099, -1000, -1000, -1000,
	3339, 36273, 2241, 1582, 35660, -1000, 279, -1000, 233, 543,
	2398, -1000, 809, 123, 2396, 2392, -1000, -1000, -1000, -1000,
	12932, 1551, -1000, -1000, -1000, 2204, 11084, 2523, -1000, 1008,
	1008, 2056, 2519, 2518, -1000, 2667, 2667, -1000, 2631, 2665,
	2631, 1008, 1008, 2517, -1000, 2274, 2578, -1000, 2573, 2559,
	11084, -1000, 2513, 2740, 1173, -50, -197, 113, 113, -1000,
	-1000, -1000, -1000, 113, 113, 113, 113, -1000, 113, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 692, -110,
	-286, -111, -287, -1000, 2512, 1254, -1000, -1000, -1000, -1000,
	-1000, 3717, 1250, 475, 475, 2392, 2388, 772, 1001, 45468,
	-1000, -1000, -1000, 45468, 2383, 2378, 1100, 4968, 2510, 3186,
	16645, 3178, 2219, -1000, -1000, -1000, 27078, 553, -1000, -1000,
	-1000, 688, 291, 2089, 519, -1000, 45468, 361, 361, 2909,
	1740, 2377, 45468, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3131, -1000, 959, 432, 33208, 14796, -1000, 393, 45468, -1000,
	16645, 16645, 393, 418, 1727, -1000, 660, 1240, 149, 34434,
	45468, -1000, 33821, 2509, -1000, 1150, 3330, -1000, 2204, 2204,
	-327, 3330, 3330, 1739, 1697, -1000, 418, -1000, 393, -1000,
	877, 18484, 493, 483, 465, -1000, 643, -1000, -1000, 647,
	3068, 4968, -1000, 45468, -1000, 45468, -1000, 45468, 45468, 723,
	11084, 3068, 45468, 766, -1000, -1000, 1038, 416, 382, 702,
	702, 1234, -1000, 3171, -1000, -1000, 1232, -1000, -1000, -1000,
	-1000, 45468, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25239,
	25239, 3236, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2376, 2375, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 45468, 1442, -1000, 1737,
	2219, 27078, 1735, 1617, 2374, 2373, 553, 2159, 1733, 2218,
	45468, -1000, 1163, 45468, 45468, -1000, 1220, -1000, 1723, 2984,
	3001, 2984, -1000, -1000, -1000, -1000, -1000, 2908, -1000, 2719,
	-1000, -1000, 1220, -1000, -1000, -1000, -1000, -1000, 1059, -1000,
	3261, 933, 933, 933, 2506, -1000, -1000, -1000, 1203, 2505,
	-1000, -1000, -1000, 3354, -1000, -1000, -1000, -1000, -1000, -1000,
	17258, 3118, 3326, 3316, 35047, 3326, -1000, -312, 1781, -1000,
	1901, 192, 1860, 45468, -1000, -1000, -1000, 2503, 2500, -234,
	153, 3313, 3312, 947, -1000, 2499, 1186, -228, -1000, -1000,
	1151, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -228, -1000,
	1151, -1000, 128, -1000, -1000, 3121, -1000, -1000, 2241, -1000,
	229, -1000, -1000, -1000, -1000, -1000, -1000, 177, -1000, 45468,
	-1000, 1174, 121, -1000, 2204, -1000, -1000, -1000, -1000, -1000,
	4784, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11084, -1000, -1000, -1000, 2542, -1000, -1000, 11084,
	2495, 2372, 2494, 2368, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3359, -1000, 3308, 1435, 2493, 2492, 1420, 2485, 2484, -1000,
	11084, 2483, 3717, 901, 2366, 901, -1000, -1000, 359, 45468,
	3332, -1000, -1000, -1000, -1000, -1000, 831, 393, 2480, 1170,
	-1000, -1000, -1000, -1000, 393, -1000, 2365, 205, -1000, -1000,
	-1000, -1000, 2364, 2363, 2086, -1000, -1000, 2087, 1464, 196,
	-1000, -1000, -1000, -1000, -1000, -1000, 2218, 2218, 2216, 1721,
	-329, -1000, 2664, -1000, 1686, 1686, 1686, 45468, 1413, -1000,
	1686, 1686, 2479, -1000, -1000, 2476, 2475, -129, 690, 1709,
	1689, -1000, 2084, 26465, 34434, 33821, 1214, -1000, 1478, -1000,
	-1000, -1000, -1000, -1000, -1000, 2361, 3330, 690, -1000, 485,
	2072, 12932, 2661, 12932, 2660, 505, 2657, 1410, -1000, 45468,
	-1000, -1000, 45468, 309, 2655, -1000, 2654, 2990, 468, 2653,
	2644, 45468, 2507, -1000, 3068, 45468, 703, 3112, -1000, -1000,
	-1000, 364, -1000, -1000, 512, -1000, 45468, -1000, 45468, -1000,
	1535, -1000, 25239, -1000, -1000, 1409, -1000, 2359, 2353, -1000,
	205, 2352, 6141, -1000, -1000, -1000, 2909, 2351, -1000, 2350,
	-1000, 45468, 1163, 1163, 3359, 45468, 8614, -1000, -1000, 11084,
	2643, -1000, 11084, -1000, -1000, -1000, -1000, -1000, 2642, 3164,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1803, -1000, 11084,
	11084, -1000, -1000, 705, 14173, -266, 311, -1000, -1000, -1000,
	-236, 2349, -1000, -1000, 3306, 2344, 2242, 45468, -1000, -1000,
	1151, 1151, -234, -1000, -1000, 1150, -1000, -1000, 990, 556,
	-1000, 2473, 2501, -1000, 2386, 113, -1000, 113, -1000, 199,
	11084, -1000, 2321, -1000, -1000, -1000, 2311, -1000, -1000, 2293,
	-1000, 2469, -1000, 2310, -1000, -1000, 45468, 764, 996, 4968,
	-130, -129, 16645, -130, -1000, -1000, 372, -1000, -1000, 338,
	-1000, -1000, 2040, 589, -1000, -1000, -1000, -1000, 1718, 1912,
	2268, 31369, 25239, 25852, 2309, -1000, -1000, 33208, 1803, 1803,
	5113, 269, 48929, -1000, 2641, 1046, 1682, -1000, 2064, -1000,
	2061, -1000, 3330, 1214, 148, -1000, -1000, 1578, -344, -1000,
	1046, 2255, 3304, -1000, 2687, 45468, 2282, 45468, 2638, 1712,
	12932, -1000, 647, 2967, -1000, -1000, 309, -1000, -1000, 1916,
	12932, -1000, -1000, 2305, 25852, 832, 1708, 1706, 842, 2637,
	-1000, 517, 3353, -1000, -1000, -1000, 837, 2634, -1000, 1877,
	1875, -1000, 45468, -1000, 31369, 31369, 746, 746, 31369, 31369,
	2633, 702, -1000, -1000, 12932, -1000, -1000, 1686, -1000, -1000,
	-1000, 1686, 1508, -1000, -1000, -1000, -1000, -1000, -1000, 2216,
	-1000, -1000, -1000, 3275, -1000, -1000, 2204, 45468, 2204, 32595,
	-1000, 3302, 3301, -1000, 2204, 1116, -1000, -312, 45468, 45468,
	-239, 2048, -1000, 2304, 147, -1000, -1000, 1124, -236, -242,
	66, 25239, 1693, -1000, -1000, -1000, -1000, -1000, 2467, -1000,
	621, -1000, -1000, -1000, 1116, 2462, 2460, -1000, -1000, -1000,
	-1000, 350, 45468, -123, -1000, -1000, 417, -1000, -1000, -1000,
	574, 2230, -1000, -1000, 332, -1000, -1000, 2300, -1000, -1000,
	120, -1000, 1687, 1405, -1000, 2631, 11084, -1000, -1000, -1000,
	-1000, -1000, -1000, 632, -1000, 393, 48727, -1000, 1115, -1000,
	990, 632, 30143, 613, 310, -1000, 2025, -1000, -1000, 3359,
	-1000, -1000, 593, -1000, 498, -1000, 1401, -1000, 1393, 31982,
	2024, 2010, -1000, 48765, 798, -1000, -1000, 3344, -1000, -1000,
	-1000, -1000, -1000, -1000, 2294, 2292, -1000, -1000, -1000, -1000,
	-1000, 2018, 2629, 17, 3232, 2286, -1000, -1000, 2628, 1370,
	1359, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1358, 1353, 31369, -1000, -1000, 3344, 2017, 25239, 1686, -1000,
	-1000, 1346, 1334, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2627, -1000, -1000, 3300, -239, -245, 2285, 126, 144, -1000,
	2278, -1000, -1000, 868, -229, 105, 101, 90, -1000, -1000,
	-1000, 11084, -1000, -1000, 45468, 761, 45468, 516, -1000, -1000,
	-1000, -1000, 176, -1000, -1000, -1000, -1000, -1000, 2268, 2267,
	-1000, 31369, 3171, 2212, 484, 3297, -1000, 48929, -1000, 1686,
	-1000, 484, 1300, -1000, 1686, 1686, -1000, 445, -1000, 1673,
	-1000, 2016, -1000, 3275, -1000, 438, -1000, 487, -1000, -1000,
	-1000, 1295, -1000, -1000, -1000, 48765, 490, -1000, 617, 2626,
	-1000, -1000, 2459, 11084, 2624, 1686, 2287, -117, 31369, 2988,
	2980, 2973, 2781, 1266, -1000, -1000, 25239, -1000, -1000, 30756,
	45468, 2242, -1000, -1000, 2258, -1000, 744, 134, 144, -1000,
	3294, 146, 3293, 3292, 1085, 1862, -1000, 109, 107, 98,
	-1000, -1000, -1000, -1000, -1000, 348, 529, -1000, 276, -1000,
	-1000, -1000, 301, -1000, -1000, 3171, -1000, 3291, 503, -1000,
	25239, -1000, -1000, 30143, 1803, 1803, -1000, -1000, 1997, -1000,
	-1000, -1000, -1000, 1978, -1000, -1000, -1000, 1248, -1000, 45468,
	873, 7998, -1000, 1945, -1000, 45468, -1000, 2987, -1000, 236,
	1198, 301, 746, 301, 746, 301, 746, 301, 746, 270,
	-1000, -1000, -1000, 1188, -1000, -1000, -1000, 2622, 1976, 153,
	122, 3282, -1000, 2242, 3277, 2242, 2242, -1000, 114, 868,
	-1000, -1000, -1000, 45468, 2254, -1000, -1000, -1000, -1000, 1686,
	1686, 2253, 2248, 408, -1000, -1000, -1000, 29530, 493, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 490, 48929, -1000, 7998,
	1166, -1000, 2204, -1000, 702, -1000, -1000, 2892, 2699, 3338,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	45468, 3219, 24626, 124, -1000, -1000, -1000, 2245, -1000, 2242,
	-1000, -1000, 1633, -1000, -1000, -284, 1943, 1931, -1000, -1000,
	45468, -1000, 45468, 485, -1000, 48929, 1165, -1000, 7998, -1000,
	-1000, 3351, -1000, 3348, 792, 792, 301, 301, 301, 301,
	-1000, -1000, 45468, -1000, 1157, -1000, -1000, -1000, 1477, -1000,
	-1000, -1000, -1000, 2240, -1000, -1000, 2232, -1000, -1000, -1000,
	1145, 2255, -1000, -1000, -1000, -1000, -1000, 2032, 522, -1000,
	1067, -1000, 1565, -1000, 28917, 45468, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45468, 7382, -1000, 1467, -1000, -1000, 2204,
	45468, -1000,
}

var yyPgo = [...]int{
	0, 185, 3376, 266, 183, 3904, 80, 262, 248, 246,
	261, 3903, 3901, 3900, 3899, 3147, 3136, 3898, 3897, 3896,
	3894, 3893, 3892, 3890, 3889, 3888, 3886, 3885, 3884, 3882,
	3878, 3877, 3876, 3875, 3874, 3869, 3868, 3866, 3865, 3864,
	3863, 3862, 3861, 3860, 3859, 3858, 3853, 259, 3852, 3851,
	3849, 3848, 3846, 3845, 3844, 3843, 3842, 3838, 3837, 3835,
	3834, 3833, 3832, 3830, 3829, 3828, 3827, 3824, 3823, 3822,
	3821, 3820, 3817, 3813, 3812, 3811, 3810, 3808, 3806, 256,
	3805, 3804, 225, 3803, 3122, 3802, 3801, 3800, 3799, 3798,
	3797, 3796, 242, 3795, 3793, 3792, 3791, 3790, 3789, 3788,
	3787, 3786, 3782, 3781, 235, 3780, 3779, 3778, 3776, 238,
	3772, 232, 3771, 181, 154, 3770, 3769, 3768, 3767, 3766,
	3762, 3760, 252, 221, 73, 3759, 49, 3758, 3757, 229,
	3756, 158, 3755, 156, 3752, 3747, 3745, 3736, 3735, 3733,
	3732, 3731, 3730, 3728, 3727, 3726, 3724, 3723, 3722, 3721,
	3720, 3719, 100, 3718, 276, 3717, 68, 3714, 194, 141,
	3712, 70, 139, 265, 2372, 267, 258, 195, 186, 115,
	3710, 338, 3709, 168, 241, 161, 27, 3704, 142, 3703,
	270, 48, 43, 263, 145, 52, 196, 149, 3698, 222,
	109, 108, 3696, 3692, 148, 3690, 255, 188, 3689, 102,
	3688, 3687, 3682, 3681, 3679, 207, 192, 3678, 3677, 135,
	3676, 3675, 72, 146, 3674, 77, 131, 179, 121, 3673,
	2468, 132, 137, 118, 99, 3672, 111, 3670, 3669, 3665,
	3664, 189, 3663, 3662, 134, 75, 3661, 3657, 3655, 76,
	3654, 79, 3652, 53, 3651, 66, 3649, 3648, 3647, 3646,
	3645, 3644, 3643, 3642, 3641, 3639, 3638, 3637, 59, 3636,
	3635, 9, 11, 16, 3633, 30, 3629, 176, 3628, 3627,
	3626, 3625, 3624, 94, 89, 3623, 91, 174, 3622, 7,
	25, 74, 3621, 3620, 230, 269, 101, 157, 3618, 329,
	3617, 3616, 3614, 170, 3613, 1587, 3612, 3611, 3610, 3609,
	3606, 3605, 128, 3604, 1, 228, 40, 3602, 136, 150,
	3600, 39, 45, 116, 236, 138, 96, 3599, 3598, 3592,
	140, 217, 126, 84, 0, 3589, 233, 164, 3586, 3585,
	3584, 260, 3583, 247, 218, 178, 163, 273, 249, 3582,
	3581, 71, 130, 3580, 172, 32, 55, 143, 90, 21,
	227, 3578, 14, 8, 200, 3576, 220, 3575, 392, 18,
	123, 155, 3574, 3572, 33, 271, 3571, 3569, 3567, 125,
	3566, 3565, 119, 88, 3564, 3563, 3561, 3559, 36, 3544,
	38, 13, 3543, 122, 3542, 254, 3541, 361, 167, 190,
	180, 166, 231, 245, 82, 81, 3540, 1782, 159, 97,
	17, 3539, 239, 3538, 171, 129, 3537, 107, 3536, 257,
	272, 209, 3534, 193, 12, 46, 35, 29, 44, 10,
	187, 208, 3533, 3530, 23, 51, 3529, 50, 3528, 20,
	3527, 3524, 3523, 61, 5, 3521, 3520, 19, 22, 3519,
	37, 214, 177, 127, 95, 69, 3518, 3516, 47, 165,
	3514, 153, 160, 162, 3511, 78, 3510, 3508, 3507, 3505,
	874, 3504, 264, 3503, 3502, 3501, 3500, 3499, 3498, 3497,
	3496, 226, 3480, 103, 41, 3479, 3477, 3475, 3472, 85,
	152, 3471, 3470, 3467, 3465, 31, 144, 3463, 15, 3462,
	26, 24, 34, 3461, 98, 3459, 3, 191, 3457, 3455,
	4, 3453, 3451, 2, 3450, 3449, 124, 3447, 92, 28,
	175, 106, 3446, 3445, 87, 223, 151, 3444, 3439, 105,
	253, 224, 3438, 60, 250, 268, 3437, 219, 3435, 3434,
	3433, 3432, 3431, 3429, 1108, 3426, 3425, 251, 65, 93,
	3422, 234, 114, 3421, 3420, 86, 169, 117, 112, 58,
	83, 3419, 113, 206, 3418, 198, 3417, 3415, 3410, 104,
	3409, 3406, 3404, 3403, 197, 3402, 3400, 202, 240, 3399,
	3398, 328, 3397, 3396, 3394, 3393, 3391, 3385, 3383, 3381,
	3379, 3374, 243, 205, 3372,
}

//line mysql_sql.y:12146
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 577, 580, 580, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 119, 119, 315, 315, 316,
	316, 149, 556, 556, 120, 120, 120, 120, 120, 120,
	120, 118, 562, 562, 562, 563, 563, 115, 138, 137,
	140, 140, 139, 139, 136, 136, 132, 135, 135, 134,
	134, 133, 128, 130, 130, 129, 131, 131, 116, 104,
	117, 505, 505, 504, 504, 503, 503, 456, 456, 457,
	457, 304, 304, 304, 502, 502, 502, 501, 501, 500,
	500, 499, 499, 497, 497, 498, 496, 495, 495, 495,
	493, 493, 493, 489, 489, 491, 490, 490, 492, 484,
	484, 487, 487, 485, 485, 485, 485, 488, 483, 483,
	483, 482, 482, 103, 103, 103, 399, 399, 102, 102,
	413, 413, 413, 413, 413, 411, 411, 411, 411, 411,
	411, 410, 410, 409, 409, 414, 414, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 412, 412, 412, 93, 93,
	93, 93, 93, 98, 98, 98, 568, 568, 567, 567,
	569, 569, 569, 569, 570, 570, 96, 96, 96, 97,
	408, 408, 408, 94, 95, 95, 398, 398, 403, 403,
	402, 402, 402, 402, 402, 402, 402, 402, 402, 402,
	402, 402, 402, 407, 407, 407, 405, 405, 404, 404,
	406, 406, 87, 87, 87, 90, 89, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 88, 88, 88, 88,
	88, 88, 83, 83, 83, 83, 83, 82, 82, 84,
	84, 395, 395, 394, 99, 99, 100, 565, 565, 564,
	566, 566, 566, 566, 101, 107, 107, 107, 107, 107,
	107, 107, 107, 106, 106, 109, 109, 108, 110, 92,
	92, 92, 92, 92, 92, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 530, 530,
	530, 532, 532, 329, 330, 581, 332, 328, 328, 328,
	526, 526, 527, 528, 529, 529, 529, 105, 14, 195,
	195, 431, 431, 11, 11, 11, 11, 11, 11, 11,
	11, 13, 81, 86, 86, 266, 266, 271, 271, 272,
	272, 272, 277, 277, 278, 278, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 253, 253,
	253, 248, 248, 248, 248, 249, 249, 250, 250, 251,
	251, 251, 251, 252, 252, 321, 321, 273, 273, 273,
	275, 275, 274, 270, 268, 268, 268, 268, 268, 268,
	268, 269, 269, 269, 269, 276, 276, 79, 85, 85,
	85, 85, 544, 544, 80, 555, 555, 460, 460, 344,
	344, 343, 343, 343, 343, 343, 343, 343, 343, 343,
	343, 343, 343, 343, 343, 343, 343, 465, 466, 339,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 54, 57, 58, 53, 53, 53, 384, 384,
	52, 582, 582, 314, 314, 67, 66, 56, 68, 69,
	70, 71, 72, 73, 51, 65, 65, 65, 65, 65,
	65, 65, 65, 76, 478, 478, 584, 584, 584, 74,
	75, 459, 459, 459, 64, 63, 62, 61, 60, 60,
	50, 50, 49, 49, 55, 144, 59, 145, 145, 336,
	336, 336, 338, 338, 334, 342, 342, 583, 583, 427,
	427, 337, 337, 48, 48, 48, 48, 77, 335, 335,
	313, 333, 333, 333, 12, 12, 10, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 26, 27, 29, 392, 392, 389, 28, 20,
	19, 19, 23, 22, 18, 18, 21, 24, 25, 25,
	9, 9, 9, 9, 15, 15, 16, 168, 168, 221,
	221, 538, 538, 534, 534, 535, 535, 535, 536, 536,
	537, 537, 111, 472, 472, 472, 472, 472, 472, 8,
	8, 190, 190, 471, 471, 471, 471, 471, 471, 396,
	396, 396, 515, 515, 515, 516, 189, 189, 184, 184,
	473, 473, 361, 517, 517, 481, 481, 480, 480, 479,
	479, 187, 187, 188, 188, 171, 171, 123, 123, 486,
	486, 486, 486, 494, 494, 455, 455, 258, 258, 306,
	306, 307, 307, 161, 161, 162, 162, 162, 162, 162,
	162, 571, 571, 572, 573, 574, 574, 575, 575, 575,
	576, 576, 576, 576, 576, 523, 523, 525, 525, 524,
	186, 186, 182, 182, 183, 183, 183, 181, 181, 180,
	179, 179, 178, 176, 176, 176, 177, 177, 177, 194,
	194, 164, 164, 164, 163, 163, 163, 163, 163, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 165, 165, 531, 531, 531, 461, 461, 461, 468,
	468, 286, 286, 287, 287, 285, 285, 166, 166, 167,
	167, 167, 167, 284, 284, 283, 169, 169, 175, 174,
	174, 170, 170, 170, 170, 294, 294, 293, 293, 293,
	293, 114, 121, 121, 122, 193, 193, 292, 291, 291,
	291, 291, 192, 192, 191, 191, 185, 185, 173, 173,
	173, 173, 290, 172, 288, 561, 561, 560, 560, 559,
	557, 557, 557, 558, 558, 558, 558, 507, 507, 507,
	507, 507, 322, 322, 322, 327, 327, 325, 325, 325,
	325, 325, 331, 7, 7, 7, 7, 7, 7, 7,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 39, 204, 205, 40, 206, 206, 207,
	207, 208, 208, 209, 210, 211, 211, 211, 211, 38,
	196, 196, 197, 197, 198, 198, 199, 200, 200, 200,
	203, 201, 202, 202, 579, 579, 578, 37, 37, 30,
	153, 153, 154, 154, 154, 156, 156, 254, 254, 254,
	155, 155, 157, 157, 157, 539, 541, 541, 543, 542,
	542, 542, 545, 545, 545, 545, 545, 546, 546, 546,
	546, 547, 547, 31, 141, 141, 146, 550, 550, 550,
	549, 549, 551, 551, 552, 552, 310, 310, 311, 311,
	151, 152, 152, 148, 143, 159, 159, 159, 159, 159,
	160, 160, 142, 147, 150, 540, 548, 548, 548, 393,
	393, 390, 391, 391, 388, 387, 387, 387, 554, 554,
	553, 553, 553, 323, 323, 32, 383, 383, 385, 386,
	386, 386, 377, 377, 377, 377, 36, 381, 381, 382,
	382, 382, 382, 382, 382, 382, 378, 378, 380, 380,
	376, 376, 376, 376, 376, 376, 376, 35, 158, 158,
	375, 375, 372, 372, 370, 370, 371, 371, 369, 369,
	369, 373, 373, 43, 78, 44, 45, 46, 42, 374,
	374, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 125, 124, 124, 124, 124, 124, 127, 127, 309,
	309, 308, 308, 126, 255, 255, 41, 233, 233, 447,
	447, 442, 442, 442, 442, 442, 463, 463, 463, 443,
	443, 443, 444, 444, 444, 446, 446, 446, 445, 445,
	445, 445, 445, 462, 462, 464, 464, 464, 415, 415,
	416, 416, 416, 419, 419, 434, 434, 435, 435, 433,
	433, 440, 440, 439, 439, 438, 438, 437, 437, 436,
	436, 436, 436, 430, 430, 429, 429, 417, 417, 417,
	417, 417, 418, 418, 418, 428, 428, 432, 432, 282,
	282, 281, 281, 241, 241, 242, 242, 280, 280, 239,
	239, 240, 240, 240, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 513,
	513, 514, 244, 244, 256, 256, 256, 256, 256, 256,
	243, 243, 245, 245, 222, 222, 220, 220, 212, 212,
	212, 212, 212, 212, 213, 213, 214, 214, 215, 215,
	215, 219, 219, 218, 218, 218, 218, 216, 216, 217,
	217, 217, 217, 217, 217, 401, 401, 510, 510, 511,
	511, 506, 506, 506, 509, 509, 509, 509, 509, 509,
	509, 512, 512, 512, 508, 508, 223, 303, 303, 303,
	324, 324, 324, 324, 326, 302, 302, 302, 238, 238,
	237, 237, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 400, 400, 340, 340, 341, 341,
	265, 264, 264, 264, 264, 264, 262, 263, 261, 261,
	261, 261, 261, 260, 260, 259, 259, 259, 379, 379,
	257, 257, 247, 247, 247, 246, 246, 246, 441, 348,
	348, 348, 348, 348, 348, 348, 348, 348, 348, 348,
	348, 348, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 300, 300,
	300, 301, 301, 301, 301, 301, 301, 301, 301, 351,
	351, 357, 357, 522, 522, 521, 224, 224, 224, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 234, 234,
	234, 424, 424, 424, 424, 425, 425, 425, 425, 426,
	426, 426, 422, 422, 423, 423, 362, 363, 363, 469,
	469, 470, 470, 420, 420, 421, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 477, 477,
	477, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 533, 533, 533,
	518, 518, 518, 519, 519, 519, 519, 519, 519, 519,
	519, 519, 519, 519, 519, 520, 520, 520, 520, 520,
	520, 520, 520, 520, 520, 520, 520, 520, 520, 520,
	520, 520, 298, 298, 298, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 364, 364, 365, 365, 474, 474, 474,
	474, 474, 474, 475, 475, 476, 476, 476, 476, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 467, 467,
	467, 467, 467, 467, 467, 467, 467, 467, 349, 295,
	295, 295, 366, 358, 358, 359, 359, 360, 360, 352,
	352, 352, 352, 352, 352, 353, 353, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 354,
	354, 356, 356, 368, 368, 368, 367, 367, 367, 367,
	367, 367, 367, 236, 236, 236, 236, 346, 346, 346,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 226, 226, 226, 226, 230, 230, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 231, 231, 231, 231, 231, 229, 229, 229,
	229, 229, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	112, 113, 113, 228, 305, 305, 448, 448, 451, 451,
	449, 449, 450, 452, 452, 452, 453, 453, 453, 454,
	454, 454, 458, 458, 312, 312, 312, 320, 320, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 8, 8, 0, 2, 0,
	2, 6, 1, 2, 5, 6, 8, 10, 9, 11,
	13, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 1, 3, 3, 1,
	2, 2, 2, 1, 2, 2, 3, 4, 4, 6,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 4, 3, 3, 2, 4, 4,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 2, 2, 0, 1, 4,
	2, 4, 1, 5, 3, 2, 1, 2, 2, 4,
	4, 5, 2, 1, 3, 4, 4, 1, 2, 9,
	7, 1, 3, 3, 1, 1, 3, 1, 3, 2,
	1, 2, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 6, 4, 1,
	1, 0, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 10, 7, 4, 4, 1, 3, 1, 6, 3,
	3, 3, 1, 1, 1, 3, 2, 4, 5, 5,
	6, 5, 5, 3, 2, 2, 1, 3, 4, 3,
	7, 5, 8, 2, 2, 1, 3, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 2,
	1, 3, 2, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 6, 3, 3, 1, 1, 7, 7, 7,
	8, 8, 0, 4, 7, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 3, 2, 5, 5, 0, 2,
	7, 0, 1, 0, 1, 5, 5, 3, 3, 2,
	4, 4, 4, 4, 4, 1, 1, 1, 3, 3,
	1, 1, 1, 6, 0, 1, 1, 1, 1, 5,
	5, 0, 1, 1, 3, 3, 3, 4, 7, 7,
	5, 4, 7, 8, 3, 3, 2, 3, 4, 0,
	2, 2, 0, 2, 2, 0, 5, 1, 1, 1,
	1, 0, 1, 5, 5, 5, 4, 3, 1, 3,
	1, 1, 3, 5, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 4, 1, 3, 1, 4, 6,
	6, 4, 4, 4, 4, 4, 3, 6, 3, 5,
	1, 1, 2, 2, 11, 8, 9, 1, 3, 2,
	4, 0, 2, 0, 1, 1, 1, 1, 0, 1,
	0, 1, 4, 2, 1, 5, 4, 4, 2, 5,
	5, 1, 3, 2, 1, 5, 4, 4, 2, 0,
	5, 4, 0, 1, 3, 3, 1, 3, 1, 3,
	1, 3, 4, 0, 1, 0, 1, 1, 3, 1,
	1, 0, 4, 1, 3, 2, 1, 0, 8, 0,
	4, 7, 4, 0, 2, 0, 2, 0, 2, 0,
	4, 1, 3, 1, 1, 6, 4, 5, 7, 4,
	5, 0, 1, 3, 8, 0, 6, 0, 4, 6,
	1, 1, 1, 1, 1, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 3, 0, 1, 1, 0, 2, 2, 0,
	2, 3, 3, 3, 1, 3, 3, 3, 3, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 7, 7, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 2, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 3, 1, 1,
	1, 4, 4, 4, 3, 2, 2, 2, 3, 2,
	3, 4, 1, 3, 4, 0, 2, 1, 1, 2,
	2, 2, 0, 1, 2, 4, 1, 3, 1, 3,
	2, 3, 1, 4, 3, 0, 1, 1, 2, 5,
	2, 2, 2, 0, 2, 3, 3, 0, 1, 3,
	1, 3, 0, 1, 2, 1, 1, 0, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 1, 7, 1, 3, 0,
	1, 1, 3, 1, 3, 0, 1, 1, 1, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 0, 1, 1,
	1, 0, 2, 7, 8, 8, 8, 0, 3, 3,
	0, 3, 0, 3, 0, 5, 1, 3, 0, 3,
	3, 0, 2, 9, 7, 0, 2, 2, 3, 3,
	0, 2, 4, 4, 4, 1, 0, 2, 2, 1,
	3, 2, 1, 3, 2, 1, 3, 2, 0, 1,
	3, 4, 3, 1, 1, 4, 1, 3, 1, 1,
	1, 1, 0, 1, 1, 1, 11, 0, 2, 3,
	3, 2, 2, 3, 1, 1, 1, 3, 3, 4,
	0, 2, 2, 2, 2, 2, 2, 6, 0, 4,
	1, 1, 0, 3, 0, 1, 1, 2, 4, 4,
	4, 0, 1, 8, 2, 4, 4, 4, 9, 0,
	2, 11, 9, 11, 8, 6, 9, 7, 10, 7,
	6, 2, 2, 9, 4, 5, 3, 0, 4, 1,
	3, 0, 3, 6, 0, 2, 10, 0, 2, 0,
	2, 0, 3, 2, 4, 3, 0, 2, 1, 0,
	2, 3, 0, 2, 3, 0, 2, 1, 0, 3,
	2, 4, 3, 0, 1, 0, 1, 1, 0, 6,
	0, 3, 5, 0, 4, 0, 3, 1, 3, 4,
	5, 0, 3, 1, 3, 2, 3, 1, 2, 0,
	4, 6, 5, 0, 2, 0, 2, 4, 5, 4,
	5, 1, 5, 6, 5, 0, 3, 0, 1, 1,
	3, 3, 3, 0, 4, 1, 3, 3, 3, 0,
	1, 1, 3, 2, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 5, 4, 1,
	3, 3, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 2,
	5, 5, 5, 5, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 2, 1, 2, 2, 1, 1, 2, 2, 2,
	3, 3, 2, 2, 1, 5, 6, 4, 1, 1,
	1, 5, 4, 1, 1, 2, 0, 1, 1, 2,
	5, 0, 1, 1, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 2, 2, 2, 0, 3,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 5, 2, 2, 2,
	2, 4, 1, 1, 2, 5, 6, 8, 6, 6,
	6, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	4, 7, 9, 7, 7, 7, 9, 7, 7, 0,
	2, 0, 1, 1, 2, 4, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 2, 2, 2, 0, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 5, 0, 1, 3, 0, 1, 0,
	2, 0, 2, 0, 1, 6, 8, 8, 6, 6,
	5, 5, 5, 6, 6, 6, 6, 5, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 1, 1,
	1, 4, 4, 6, 8, 6, 4, 5, 4, 4,
	4, 3, 4, 6, 6, 7, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 8, 4, 2, 3, 2, 4,
	2, 2, 4, 6, 2, 2, 4, 6, 4, 2,
	4, 4, 4, 0, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 1, 1, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 1, 3, 4,
	4, 5, 4, 5, 3, 4, 5, 6, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 2, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 4, 4, 1,
	2, 3, 5, 1, 1, 3, 0, 1, 0, 3,
	0, 3, 3, 0, 3, 5, 0, 3, 5, 0,
	1, 1, 0, 1, 1, 2, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -577, -580, -2, -5, 623, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -161, -118, -119,
	-120, 613, -88, -89, -90, -33, -32, -31, -30, -141,
	-146, -149, 546, 619, 449, 14, 498, -15, -16, -523,
	-17, 260, -328, -329, -330, -332, -581, -48, -49, -50,
	-60, -61, -62, -63, -64, -74, -75, -76, -51, -52,
	-53, -56, -54, -67, -66, -68, -69, -70, -71, -72,
	-73, -55, -59, -144, -145, -77, -57, -78, -58, -80,
	-79, -85, -81, -86, -143, -148, -13, 235, -84, 76,
	-94, -95, -96, -97, -98, -100, -101, 373, 379, 436,
	612, 61, -162, -164, 630, 631, 634, 160, 161, 163,
	164, -34, -35, -36, -37, -38, -39, -41, -40, -42,
	-43, -44, -45, -46, 231, 16, 541, -18, -21, -19,
	-22, -20, -28, -29, -27, -24, -26, -142, -25, -147,
	-23, -150, 255, 254, 38, 321, 322, 323, 377, 253,
	232, 15, 31, 42, 352, -163, 83, 533, 534, 536,
	233, -165, 13, 636, -6, -3, -2, -128, -132, -136,
	-139, -140, -137, -138, -4, -113, 118, 245, 614, -324,
	369, 615, 617, 616, 86, 94, -317, -319, 449, 260,
	373, 379, 612, 631, 634, 548, 549, 550, 551, 552,
	553, 554, 555, 557, 558, 559, 560, 561, 562, 563,
	573, 574, 564, 565, 566, 567, 568, 569, 570, 571,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 501, 598, 599, 600, 601, 529,
	556, 592, 593, 594, 595, 350, 351, 538, 272, 296,
	404, 302, 309, 160, 179, 173, 201, 193, 534, 168,
	276, 314, 277, 93, 163, 484, 108, 461, 433, 166,
	291, 293, 295, 530, 531, 363, 298, 528, 297, 299,
	301, 532, 278, 353, 189, 184, 290, 274, 182, 279,
	40, 280, 206, 281, 282, 543, 457, 349, 463, 306,
	52, 431, 183, 458, 294, 460, 210, 214, 475, 476,
	177, 178, 465, 478, 205, 208, 209, 252, 346, 347,
	43, 540, 264, 479, 212, 204, 200, 487, 310, 308,
	203, 176, 199, 275, 65, 216, 215, 217, 427, 428,
	429, 430, 283, 284, 367, 474, 196, 185, 354, 169,
	23, 482, 259, 462, 380, 285, 303, 311, 211, 213,
	266, 271, 542, 533, 435, 270, 307, 480, 181, 263,
	292, 258, 483, 170, 536, 382, 286, 164, 300, 477,
	486, 64, 395, 175, 167, 249, 161, 268, 273, 287,
	288, 289, 527, 313, 312, 304, 535, 197, 265, 202,
	187, 174, 198, 162, 267, 485, 396, 610, 352, 414,
	195, 192, 269, 242, 481, 464, 165, 418, 397, 190,
	315, 605, 606, 607, 368, 345, 316, 317, 188, 256,
	455, 456, 320, 424, 336, 398, 434, 405, 399, 223,
	224, 324, 467, 469, 207, 608, 325, 326, 327, 459,
	328, 329, 330, 331, 372, 56, 58, 95, 98, 97,
	632, 633, 63, 29, 358, 361, 393, 400, 338, 611,
	539, 335, 339, 340, 362, 25, 416, 384, 420, 419,
	48, 49, 50, 53, 54, 55, 57, 59, 60, 51,
	526, 377, 390, 488, 45, 47, 387, 27, 364, 415,
	437, 334, 417, 448, 46, 446, 447, 468, 26, 366,
	365, 62, 44, 423, 425, 426, 318, 332, 375, 620,
	489, 370, 386, 389, 371, 337, 360, 391, 67, 66,
	383, 621, 378, 376, 333, 544, 545, 341, 572, 355,
	432, 523, 522, 521, 520, 519, 518, 517, 516, 321,
	322, 323, 401, 402, 403, 413, 406, 407, 408, 409,
	410, 411, 412, 451, 452, 622, 470, 472, 473, 471,
	237, 635, 356, 357, 240, 624, 625, 96, 626, 628,
	627, 28, 629, -406, -404, -324, 534, 612, 379, 533,
	536, 373, 352, 631, 634, 377, 260, 321, 322, 323,
	449, 350, -206, -324, 635, -171, 244, 39, -220, -324,
	-171, -84, -16, -15, -163, -164, -220, 239, -333, 24,
	431, -92, 432, 235, 83, 77, -324, -9, -104, -8,
	-111, -82, -161, 436, -331, -324, 321, 321, -331, 239,
	-326, 270, 412, -324, -460, 245, -410, -383, 271, -409,
	-385, -412, -386, 32, 231, 233, 232, 546, 267, 16,
	377, 241, 14, 13, 378, 253, 25, 26, 28, 15,
	379, 381, 29, 382, 385, 386, 387, 42, 390, 391,
	260, 86, 94, 89, 278, -205, -324, -360, -352, 115,
	-355, -347, -348, -350, -304, -497, -345, 83, 142, 143,
	150, 116, 637, -349, -441, 36, 118, 552, 556, 592,
	499, -296, -297, -298, -299, -300, -301, -324, -498, -496,
	89, 99, 101, 105, 106, 104, 102, 154, 186, 103,
	90, 155, -164, 86, -518, 562, -318, 585, 598, 599,
	600, 601, 584, 61, -467, -476, 238, -474, 153, 191,
	256, 187, 14, 148, 424, 188, 593, 594, 595, 559,
	581, 501, 563, 573, 588, 554, 555, 557, 549, 550,
	551, 553, 564, 566, 580, -477, 576, 586, 587, 572,
	596, 597, 589, 590, 591, 628, 88, 87, 579, 578,
	565, 560, 561, 567, 548, 558, 568, 569, 577, 582,
	583, 361, 108, 362, 363, 491, 353, 364, 245, 431,
	70, 365, 366, 367, 368, 369, 498, 370, 71, 371,
	360, 260, 414, 372, 190, 207, 503, 502, 504, 495,
	492, 490, 493, 494, 496, 497, 570, 571, 575, -121,
	-122, 603, -571, -289, -572, 6, 7, 8, 9, -573,
	155, -562, 433, 542, 89, 314, 350, 165, 162, -397,
	165, 114, 170, 169, -397, 167, 324, 266, -374, -153,
	350, 414, 328, 95, 270, -377, -375, 530, -462, 318,
	314, 290, 240, 111, -154, 250, 249, 109, 491, 238,
	388, 309, 56, 58, -534, -535, 228, 229, 230, -525,
	524, -524, -324, 363, 97, 98, 27, 239, 374, 266,
	469, 467, 468, 470, 471, 472, 473, -65, -478, -459,
	464, 463, -337, 456, 462, 454, 466, 457, 351, 330,
	546, 329, 231, 624, 531, 525, -312, 398, 434, 488,
	489, 375, 435, 475, 477, 458, 108, 194, 191, 240,
	242, 239, 350, 491, 414, 95, 328, -534, 162, 475,
	477, 270, 412, 41, -403, 424, -402, -404, 476, 487,
	87, 88, 474, -312, 108, 455, 455, -571, -289, -162,
	-164, -114, -523, 532, 532, 532, 240, 350, 414, 270,
	241, 239, 527, 530, 242, 491, 238, 321, 374, 266,
	328, 95, 167, -461, -531, 32, -468, 225, 226, 227,
	33, 34, -1, 122, 636, -352, -352, -6, 639, -6,
	-352, -324, -324, 157, -226, -230, -227, -229, -228, -232,
	-231, 191, 192, 153, 195, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 208, 209, 206, 31, 207, 256,
	187, 188, 189, 190, 210, 173, 193, 539, 218, 174,
	219, 175, 220, 176, 221, 177, 178, 222, 179, 182,
	183, 184, 185, 181, 156, -195, 89, 32, 83, 156,
	89, -187, 262, -171, -220, -212, 156, 637, -187, -571,
	-180, -181, 11, -220, -302, -324, 433, 125, -92, 77,
	-92, 432, 77, -526, -527, -528, -530, 235, 432, 431,
	-109, 156, 278, 17, -331, -331, 81, -220, -385, 270,
	-410, -383, 36, 80, 157, 243, 157, 80, 83, 375,
	350, 414, 376, 491, 239, 388, 242, 270, 389, 350,
	414, 239, 242, 491, 270, 350, 239, 242, 414, 270,
	389, 350, 454, 455, 242, 27, 380, 383, 384, 455,
	-482, 487, 157, 114, 111, 112, 113, -352, 132, -367,
	125, 126, 127, 128, 129, 130, 131, 139, 138, 149,
	142, 143, 144, 145, 146, 147, 148, 140, 141, 135,
	115, 133, 137, 134, 117, 152, -164, -352, -360, 61,
	-350, -350, -350, -350, -324, -441, -357, -352, 83, 83,
	83, 83, 156, 102, 89, -352, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, -475, 83,
	83, -364, -365, 83, 83, -345, -302, 83, 89, 89,
	83, 83, 83, 89, 83, 83, 83, -365, -365, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, -181, 157, -180, 83, -180, -181,
	-165, -164, 32, 33, 32, 33, 32, 33, 32, 33,
	-574, 621, 83, 99, 632, 223, 17, -324, 480, 541,
	168, 169, 170, -372, 245, -204, -324, -206, 374, 242,
	527, 242, -154, -372, -372, -372, -372, -372, 241, -372,
	24, 239, 239, 239, 239, -372, 498, 125, 125, 59,
	-536, 172, 157, -525, -186, 83, -336, 133, 137, -336,
	-285, 18, 24, 268, 268, 268, -336, 308, -582, -583,
	17, 135, -334, -583, -334, -334, -336, -584, 241, 465,
	43, 269, 268, -182, -183, 22, -182, 459, 455, -427,
	460, 461, -338, -583, -337, -336, -336, -337, -336, -336,
	-336, 32, 239, 242, 491, 328, 625, -582, -582, 31,
	31, -460, -460, -220, -460, 525, -313, -324, -460, -460,
	-460, -537, 244, -568, -567, 478, -570, 480, 162, -404,
	162, -404, -385, 270, 270, 157, 125, 24, -405, 125,
	136, -404, -404, -405, -405, -243, 41, -323, 153, -324,
	89, -243, 41, -565, -564, -220, -181, -165, -164, 84,
	84, 84, 535, 535, 535, -460, -460, -460, -460, -460,
	-462, -460, -460, -460, -460, -460, -331, -196, -324, -206,
	245, -460, -460, -460, -166, -167, 144, -352, -324, -166,
	-3, -130, -129, 119, 120, 122, 615, 369, 614, 618,
	612, -404, 41, -454, 396, 395, -448, -450, 83, -449,
	83, -449, -449, -449, -449, -449, 83, 83, -451, 83,
	-451, -451, -448, -452, 83, -452, -453, 83, -453, -452,
	-324, -431, 541, -358, -360, -324, 39, -471, 61, -161,
	83, 31, 83, -187, -324, 638, 188, 167, 629, -472,
	61, -161, 83, 31, -181, -123, 39, -183, 21, 156,
	99, 89, -109, -92, 77, -109, 84, 157, -529, 105,
	106, -532, 205, 197, -324, -107, 89, -7, -8, -9,
	-10, -47, -82, -79, -161, 232, -499, -497, 83, 32,
	423, 80, 17, -411, 239, 491, 374, 266, 242, 350,
	-409, -392, -389, -387, -323, -385, -388, -387, -414, -302,
	455, -124, 438, 437, 320, -352, -352, -352, -352, -352,
	104, 115, 345, 105, 106, -347, -368, 32, 316, 317,
	-348, -348, -348, -348, -348, -348, -348, -348, -348, -348,
	-348, -348, -356, -366, -441, 83, 135, 133, 137, 134,
	117, -350, -350, -348, -348, -245, -323, 153, 84, 157,
	-352, -522, -521, 119, -352, -352, -352, -352, -324, -519,
	-520, 505, 506, 507, 508, 509, 510, 511, 512, 513,
	514, 515, 365, 360, 366, 364, 353, 372, 367, 368,
	190, 522, 523, 516, 517, 518, 519, 520, 521, -358,
	-358, -352, -519, -358, -295, 33, 32, -360, -360, -360,
	84, -352, -533, 343, 342, 344, -184, -324, -358, 84,
	84, 84, 99, -360, -360, -358, -348, -358, -358, -358,
	-358, -520, -295, -295, -295, -295, 144, -360, -360, -295,
	-295, -295, -295, 144, -295, -295, -295, -295, -295, -295,
	-295, -295, -295, -295, 84, 84, 84, 144, -360, -182,
	-122, -480, -479, -352, 41, -123, -183, -575, 622, 83,
	-302, -563, 89, 89, 637, 167, 17, 491, 481, 482,
	166, 169, 168, -324, 115, 35, 83, -196, -372, -372,
	-372, -541, -324, 90, -393, -390, -387, -324, -324, -383,
	-324, -313, -220, -372, -372, -372, -372, -220, -254, 53,
	54, 55, -387, -155, 56, 57, -537, -524, 35, -185,
	-324, -285, -350, -350, -352, -387, 270, -582, -336, -336,
	-314, -313, -338, -333, -338, -338, -285, -334, -336, -336,
	-352, -338, -334, -285, -324, 455, -285, -285, -427, -336,
	-335, -324, -335, -372, -313, -314, -314, -220, -220, -266,
	-271, -267, -272, 262, 236, 358, 359, 234, 232, 11,
	233, -279, 309, -373, 499, -249, -250, 77, 42, -252,
	260, 400, 393, 272, 276, 93, 277, 433, 278, 241,
	280, 281, 282, 297, 299, 252, 283, 284, 285, 424,
	286, 161, 298, 287, 288, 289, 376, -244, 6, 331,
	41, 51, 52, 447, 446, 544, 541, 273, -541, -539,
	31, -324, 31, -393, -324, -324, -174, -169, -173, -170,
	-175, -288, -290, -172, 83, -220, -164, -324, 157, 479,
	481, 482, -568, -405, -568, -405, 32, 423, -408, 423,
	32, -383, -402, 475, 477, -398, 89, 424, -388, -407,
	80, 153, -479, -405, -405, -407, -407, 152, 157, -566,
	480, 481, 228, -182, 99, 99, 99, -222, -220, -541,
	-392, -383, -324, -460, -222, -222, -222, -326, -326, 83,
	156, 36, -324, -324, -324, -284, 157, -283, 17, -325,
	-324, 35, 89, 156, -284, -131, -129, 121, -352, -6,
	614, -352, -6, -6, -352, -6, -352, -458, 397, 99,
	99, -305, 89, -305, 99, 99, 99, 547, 84, 89,
	-396, 80, -473, -361, -517, 603, -189, 84, -184, -515,
	-516, -184, -188, -324, -471, -212, 125, 125, 125, -473,
	-189, 84, -515, -182, 604, -123, -179, -178, -352, -324,
	24, -109, -92, -527, 156, 350, 157, -185, -411, -391,
	-388, -413, 144, -324, -399, 157, 541, 640, 87, 243,
	-554, -553, 415, 84, 157, -483, 244, 498, 89, 637,
	431, 223, 224, 104, 345, 105, 106, -441, -360, -356,
	-350, -350, -348, -348, -354, 257, -354, 114, -352, 638,
	-351, -521, 121, -352, 35, 157, 35, 157, 81, 156,
	84, 84, 17, 17, 84, -352, 84, 84, 84, 84,
	17, 17, -352, 84, 156, 84, 84, 84, 84, 81,
	84, 157, 84, 84, 84, 84, 157, -360, -360, -352,
	-360, 84, 84, 84, -352, -352, -352, -360, 84, -352,
	-352, -352, -352, -352, -352, -352, -352, -352, -352, -421,
	450, -421, -421, 157, 157, 157, 84, -123, 83, 99,
	157, 633, -309, -308, 89, -324, 167, -324, 167, 170,
	170, 169, 24, 36, -205, -207, -208, -209, -210, -211,
	135, 158, 159, 83, -220, -220, -220, -543, 401, -555,
	157, 41, -553, 491, 239, -151, 320, -376, 81, -158,
	17, 541, -220, -220, -220, -220, -233, 35, 17, -168,
	-221, -324, 83, 84, 157, -384, 81, -324, -314, -285,
	-285, -338, -285, -285, 157, 23, -336, -338, -338, -342,
	637, -334, -342, 156, -342, -313, -447, 35, -186, 157,
	21, 262, -219, -321, -216, -218, 247, -341, -217, 250,
	-511, 248, 246, 109, 251, 305, 110, 241, -321, -321,
	247, -253, 243, 35, -321, -269, 241, 348, 305, 248,
	21, 262, -268, 241, 110, -324, 247, 251, 248, 246,
	-320, 125, -312, 152, 243, 43, 376, -320, 545, 262,
	-320, -320, -320, -320, -320, -320, -320, 279, 279, -320,
	-320, -320, -320, -320, -320, -320, -320, -320, -320, -320,
	162, -320, -320, -320, -320, -320, -320, 83, 274, 275,
	-544, 401, 31, 356, 356, 357, -555, 31, -159, 350,
	31, -291, -292, -293, -294, 68, 72, 74, 78, 69,
	70, 71, 75, 31, 157, -322, -327, 35, -324, 89,
	-322, -164, -169, -174, -322, 83, -567, -569, 483, 480,
	486, -407, -407, 243, 83, 125, -407, -407, 41, -323,
	-564, 487, 481, -123, 157, 80, -222, -197, -198, -199,
	-200, -226, -302, 192, 195, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 208, 209, 206, 207, 256, 187,
	188, 189, 190, 210, 173, 193, 539, 174, 175, 176,
	177, 178, 179, 182, 183, 184, 185, 181, -324, -206,
	-285, -167, -169, -324, 89, -324, 144, -285, 122, -6,
	120, -135, -134, -133, 123, 612, 618, 122, 122, 122,
	84, 84, 84, 157, 84, 84, 84, 157, 84, 157,
	99, -486, 460, 40, 157, 83, 84, 157, 61, 157,
	125, 84, 157, -352, -324, 89, -352, 84, 61, -123,
	89, 157, -176, 37, 38, 156, 433, -324, -497, 84,
	-413, 157, 243, 156, 156, -389, 379, -323, -391, 21,
	541, -302, 39, -309, 125, 637, -324, 84, -354, -354,
	114, -350, -347, 84, 122, -352, 120, -224, -226, 395,
	396, -352, -224, -225, -231, 153, 191, 256, 190, 189,
	187, 395, 396, -243, -324, -352, -352, 84, -352, -352,
	17, -324, -243, -348, -352, -181, -181, 84, 84, -420,
	-421, -420, -420, 84, 84, 84, 84, -420, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 83, 99,
	101, 99, 101, -479, -576, 63, 620, 62, 423, 104,
	310, 157, 99, 89, 638, 157, 125, -324, 17, 239,
	170, -556, 314, 350, 387, 84, 157, -302, -197, -186,
	83, -186, -546, 462, 403, 413, -320, -344, -343, 352,
	42, -465, 424, 409, 410, -390, 270, -324, -324, -552,
	96, 125, 80, 335, 339, 340, 336, 337, 338, -370,
	-371, -369, -373, -539, 83, 83, -161, 35, 133, -158,
	83, 83, 35, -442, 325, -226, -220, -168, -324, 17,
	157, -538, 156, -1, -324, -383, -336, -285, -352, -352,
	-285, -336, -336, 167, -338, -324, -442, -226, 35, -267,
	236, 233, -417, 307, 308, -418, -432, 310, -434, 83,
	-223, -302, -217, -510, -511, -372, -324, 110, -510, 110,
	83, -223, -302, -302, -270, -335, -302, -324, -324, -324,
	-324, -275, -274, -302, -277, 32, -278, -324, -324, -324,
	-324, 110, -324, 110, -248, 41, 48, 49, 50, -320,
	-320, 194, -251, 41, 423, 425, 426, -277, 99, 99,
	99, 99, 89, 89, 89, -320, -320, 99, 89, -327,
	89, -512, 169, 45, 46, 99, 99, 99, 99, 41,
	89, -256, 41, 290, 294, 291, 292, 293, 89, 99,
	41, 99, 41, 99, 41, -324, 83, -513, -514, 89,
	-546, -320, 356, -404, 125, 125, -344, -551, 320, -160,
	491, 32, -190, 236, 233, -539, -395, -394, -302, -173,
	-173, -173, -173, 68, 68, 68, 68, 73, 68, 73,
	68, -293, -395, -175, -186, -327, 84, -561, -560, -559,
	-557, 76, 244, 77, -358, 480, 484, 485, -391, -339,
	89, -398, -194, 24, -220, -220, -464, 300, 301, 84,
	157, -226, -287, 19, 156, -287, 118, -6, -131, -133,
	-352, -6, -352, 614, 369, 615, 89, 99, 99, -494,
	444, 439, 441, 110, -361, -481, -480, 61, -161, -184,
	-473, -516, -479, -324, 638, 638, 638, 638, 61, -161,
	-473, -194, -486, -178, -177, 44, -324, 99, 17, -388,
	-383, 144, 144, -324, 380, -399, 89, 402, 89, 239,
	638, 89, -309, -347, -352, 84, -234, 178, 177, -234,
	35, 84, 84, -449, -449, -448, -451, -448, -234, -234,
	84, 84, 24, 84, 84, 84, -352, 84, 84, 157,
	-469, 500, -470, 574, -420, -420, -420, -420, -420, -420,
	-420, -420, -420, -420, -420, -420, -420, -420, -420, -420,
	-363, -362, 262, 445, 627, 627, 445, 627, 627, 84,
	157, -519, 157, -315, 315, -315, -308, 89, 243, 167,
	-324, -324, 89, 89, -209, -226, 84, 35, -213, -214,
	-215, -223, -216, -218, 35, -547, 93, -542, 89, -324,
	90, -548, 93, 404, 155, 354, 41, 405, 406, 421,
	349, 99, 99, 411, -540, -324, -159, -159, -550, 52,
	125, 89, -220, -369, -312, 152, 281, 328, -282, -281,
	-324, 89, -213, -161, -220, -213, -213, -161, -443, 327,
	21, 99, 143, -187, 81, 156, -169, -221, -324, 144,
	84, -285, -342, -285, -285, 125, -336, -443, -161, -429,
	311, 83, -427, 83, -427, 110, 336, -435, -433, 262,
	-273, 45, 47, -226, -508, -324, -506, -508, -324, -506,
	-506, -372, -352, -273, -223, 243, 31, 233, -276, 333,
	334, 339, -400, 306, 115, -400, 157, -176, 157, -324,
	-243, -243, 31, 89, 89, -222, 84, 157, 125, -547,
	-542, 125, -405, 89, 89, -548, -552, 125, -152, 93,
	-313, 157, -190, -190, -285, 157, 125, -192, -191, 80,
	81, -193, 80, -191, 68, 68, -285, -559, -558, 24,
	-511, -511, -511, 84, 84, 15, -199, 41, -286, 20,
	21, 144, -286, 122, 120, 122, 122, -324, 84, 84,
	-455, 605, -490, -492, 439, 21, 21, 15, 244, 84,
	-473, -473, -494, 45, 46, -383, -399, 424, -220, 157,
	638, -224, -352, 84, -352, 84, 89, 84, 89, -181,
	21, 84, 157, 84, 84, 84, 157, 84, 84, -352,
	84, -519, -316, 188, 89, -316, 350, -324, 17, 237,
	-161, 84, 157, -161, 89, -545, 415, 89, 89, 99,
	41, 99, 155, 407, -466, -152, -152, -549, 93, 125,
	637, 83, -320, -320, -320, -324, 84, 157, -320, -320,
	84, 84, 84, -241, 541, -444, 261, 99, 143, 99,
	143, 99, -322, -169, -324, -285, -538, 156, 89, -285,
	-444, -419, 312, 99, -348, 83, -348, 83, -428, 309,
	83, 84, 157, -324, -302, -238, -237, -235, 104, 115,
	41, 393, -236, 93, 152, 295, 298, 297, 273, 296,
	-265, -340, 80, 399, 333, 334, -373, 605, 529, 246,
	109, 110, 381, -341, 83, 83, 81, 315, 83, 83,
	-508, 84, -273, -302, 41, -276, 41, 346, 306, -274,
	-324, 152, -243, 84, -514, 89, -545, 89, -407, -550,
	89, 89, -539, -181, -394, -479, -352, 83, -352, 83,
	68, 11, 19, -345, -352, -360, 245, -6, 615, 369,
	-258, 606, 89, 21, 89, -488, 89, -395, -455, -126,
	-255, -312, 278, 84, 84, 84, -420, -420, -423, -422,
	-426, 445, 307, 453, -360, 89, 89, 84, 84, 89,
	-324, 243, 167, -201, -226, -156, 541, -241, -215, -156,
	21, 541, 353, 41, 99, 41, 408, 125, 105, 106,
	-310, -311, 89, -378, -380, -302, 83, -243, -245, 89,
	-281, -345, -345, -239, -161, 35, -240, -279, -373, -125,
	-124, -239, 83, -445, 161, 99, 143, 99, 99, -285,
	-285, 638, -445, -434, 21, 84, -414, 84, -414, 83,
	125, -348, -433, -436, 61, -235, 104, -348, 89, -245,
	-246, 41, 294, 290, 125, 125, -247, 41, 274, 275,
	-257, 83, 305, 15, 194, 83, 110, 110, -220, -378,
	-378, -509, 335, 336, 337, 341, 339, 340, 338, -509,
	-378, -378, 83, -401, -400, -348, -320, -320, 152, -549,
	-182, -185, -507, -324, 246, 21, 21, -324, -324, -306,
	607, 99, 89, 441, -258, -456, 608, -484, -427, -243,
	125, 84, -425, 117, 407, 411, -346, -349, 99, 101,
	186, 155, 84, 84, 350, -324, 540, -157, 60, 487,
	89, 90, 402, 89, 90, 353, 89, 638, 157, 125,
	84, 157, -448, -352, -415, 262, -161, 157, -279, -312,
	-126, -415, -242, -280, -324, 89, -463, 169, 326, 541,
	99, 143, 99, -181, -446, 169, 326, -418, 84, 84,
	84, -414, 99, 84, -440, -437, 83, -279, 264, 135,
	89, 89, 99, 83, -474, 31, 89, -379, 83, 84,
	84, 84, 84, -378, 99, -243, -320, 84, 84, 157,
	83, 21, -306, -457, 609, 89, -493, 444, -487, -485,
	439, 440, 441, 442, 89, -424, -425, 411, -346, -349,
	603, 451, 451, 451, -324, 243, -203, -324, 305, 424,
	-311, 89, -381, -380, -176, 84, -416, 314, 21, -279,
	-320, -416, 84, 157, -320, -320, 326, 99, 143, 99,
	-182, 326, -430, 313, 84, -440, -279, -439, -438, 312,
	265, 83, 84, -352, -364, -320, 84, -260, -259, 537,
	-378, -381, 81, -381, 81, -381, 81, -381, 81, 84,
	-243, -324, 246, -307, -324, -488, 89, -495, 244, -491,
	-492, 443, -485, 21, 441, 21, 21, -127, 157, 114,
	452, 452, 452, 350, -202, 35, 446, 380, -382, 252,
	346, 347, 93, 541, 333, 334, -176, 21, -417, -243,
	-280, -345, -345, 99, 99, 84, 157, -324, 261, 83,
	-359, -353, -352, 261, 84, -324, -264, -262, -263, 80,
	458, 303, 304, 84, -509, -509, -509, -509, -265, 84,
	157, -502, 83, 99, -490, -489, -491, 21, -488, 21,
	-488, -488, 448, -424, -324, 89, -320, -320, 89, 89,
	332, -302, 83, -429, -438, -437, -359, 84, 157, -400,
	-263, 80, -262, 80, 16, 15, -381, -381, -381, -381,
	-324, -505, 31, 84, -501, -500, -303, -496, -324, 444,
	445, 89, -488, 125, -579, -578, 626, 99, 99, -324,
	-414, -419, 84, -353, -261, 300, 301, 31, 169, -261,
	-504, -503, -304, 84, 157, 156, 89, 89, 84, -434,
	104, 41, 302, 157, 125, -500, -324, -503, 41, -352,
	156, -324,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 0, 282, 283, 284, 893, 894, 895, 896, 897,
	898, 899, 0, 0, 0, 0, 0, 650, 651, 0,
	616, 0, 0, 0, 0, 0, 0, 500, 501, 502,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 514, 515, 516, 517, 518, 519, 520, 521, 522,
	523, 524, 525, 526, 527, 528, 529, 530, 531, 383,
	384, 385, 386, 387, 388, 389, 390, 0, 307, 303,
	228, 229, 230, 231, 232, 314, 315, 477, 0, 0,
	0, 0, 733, -2, 72, 0, 0, 296, 0, 287,
	287, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, -2, 663, 0, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 367, 368, 369, 363, 364, 366, 365, -2,
	0, 663, 0, 0, 0, 741, 0, 0, 0, 0,
	0, 784, 806, 23, 0, 7, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 0, 0, 19, 0,
	19, 0, 0, 0, 1310, 1311, 1312, 1313, 2093, 2063,
	-2, 1835, 1812, 1987, 1988, 2124, 2125, 2126, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138,
	2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148,
	2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158,
	2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168,
	2169, 2170, 2171, 2172, 2173, 1769, 1770, 1771, 1772, 1773,
	1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855,
	1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
	1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895,
	1896, 1897, 1898, 1899, 1900, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
	1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
	1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
	2019, -2, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028,
	2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, -2,
	-2, -2, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 0, 280, 278, 1782, 1812, 1835, 1889,
	1900, 1901, 1935, 1987, 1988, 2020, 2063, 2079, 2080, 2081,
	2093, 0, 0, 917, 0, 711, 0, 0, 716, 1258,
	711, 308, 652, 653, 741, 767, 614, 0, 345, 0,
	1826, 349, 2070, 0, 0, 0, 611, 339, 340, 341,
	342, 343, 344, 0, 0, 892, 0, 0, 335, 0,
	302, 1891, 2092, 1314, 0, 0, 0, 0, 0, 171,
	1036, 173, 1038, 177, 185, 0, 0, 0, 190, 191,
	194, 195, 196, 197, 198, 0, 202, 0, 204, 207,
	0, 209, 210, 0, 213, 214, 215, 0, 225, 226,
	227, 1039, 1040, 1041, -2, 100, 915, 1740, 1627, 0,
	1634, 1647, 1658, 1391, 1392, 1393, 1394, 0, 0, 0,
	0, 0, 0, 1402, 1403, 0, 1431, 2128, 2169, 2170,
	0, 1411, 1412, 1413, 1414, 1415, 1416, 111, 123, 124,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 0, 1688, 1689,
	1690, 1598, 1378, 1310, 0, 2137, 0, 2159, 2164, 2165,
	2166, 2167, 2158, 0, 0, 1583, 0, 1573, 0, 0,
	-2, -2, 0, 0, 1960, -2, 2171, 2172, 2173, 2134,
	2155, 2163, 2138, 2139, 2162, 2130, 2131, 2132, 2125, 2126,
	2127, 2129, 2141, 2143, 2154, 0, 2150, 2160, 2161, 2068,
	0, 0, 0, 0, 0, 2110, 125, 126, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1594, -2, -2, 1597, -2,
	1600, -2, -2, -2, -2, 1605, 1606, -2, 1608, -2,
	-2, -2, -2, -2, -2, -2, 1585, 1586, 1587, 1588,
	1577, 1578, 1579, 1580, 1581, 1582, -2, -2, -2, 767,
	842, 0, 767, 0, 742, 789, 792, 795, 798, 745,
	0, 0, 73, 74, 0, 0, 0, 297, 298, 286,
	288, 0, 292, 0, 285, 1072, 0, 0, 0, 0,
	1072, 1072, 1072, 1072, 1072, 0, 1072, 0, 0, 0,
	0, 0, 1072, 0, 950, 1043, 1044, 1045, 1070, 1071,
	1144, 0, 0, 0, 668, 664, 665, 666, 667, 755,
	0, 757, 760, 589, 589, 815, 535, 0, 0, 0,
	589, 0, 549, 541, 0, 0, 0, 589, 0, 0,
	762, 762, 0, 592, 601, 589, 589, -2, 589, 589,
	586, 589, 0, 0, 1084, 555, 556, 557, 541, 541,
	560, 561, 562, 572, 573, 602, 1764, 0, 0, 477,
	477, 0, 477, 0, 477, 477, 477, 670, 1930, 1833,
	1906, 1891, 2092, 0, 253, 1960, 258, 0, 1834, 1853,
	0, 0, 1871, 0, -2, 0, 324, 767, 0, 0,
	741, 0, 0, 0, 0, 0, 477, 477, 477, 477,
	477, 1143, 477, 477, 477, 477, 477, 0, 0, 0,
	477, 477, 477, 0, 0, 807, 808, 803, 804, 805,
	809, 810, 5, 6, 19, 0, 0, 0, 0, 0,
	0, 79, 78, 0, 1741, 1759, 1693, 1694, 1695, 1746,
	1697, 1750, 1750, 1750, 1750, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1750, 1750, 0, 0, 1739, 1717,
	1748, 1748, 1748, 1746, 1743, 1698, 1699, 1700, 1701, 1702,
	1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1753,
	1753, 1756, 1756, 1753, 0, 381, 379, 380, 1623, 0,
	0, 0, 0, 711, 715, 1256, 0, 0, 0, 767,
	-2, 0, 0, 615, 346, 1315, 0, 0, 350, 0,
	351, 0, 0, 0, 370, 0, 373, 358, 359, 360,
	354, 0, 151, 0, 337, 338, 0, 0, 304, 0,
	0, 0, 478, 0, 0, 0, 0, 0, 0, 182,
	178, 186, 189, 199, 206, 0, 218, 220, 223, 179,
	187, 192, 193, 200, 221, 180, 183, 184, 188, 222,
	224, 181, 201, 205, 219, 203, 208, 211, 212, 217,
	0, 152, 0, 0, 0, 0, 0, 1633, 0, 0,
	1666, 1667, 1668, 1669, 1670, 1671, 1672, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1627, 0, 0,
	1397, 1398, 1399, 1400, 0, 1404, 0, 1432, 0, 0,
	0, 0, 0, 1687, 1691, 0, 1623, 1623, 0, 1623,
	1619, 0, 0, 0, 0, 0, 0, 1623, 1556, 0,
	0, 1558, 1574, 0, 0, 1560, 1561, 0, 1564, 1565,
	1623, 0, 1623, 1569, 1623, 1623, 1623, 1552, 1553, 0,
	1619, 1619, 1619, 1619, 0, 0, 1619, 1619, 1619, 1619,
	1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
	0, 0, 0, 0, 762, 0, 768, 0, -2, 0,
	786, 788, 790, 791, 793, 794, 796, 797, 799, 800,
	747, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	290, 0, 295, 0, 0, 0, 914, 0, 0, 1072,
	1072, 1072, 951, 0, 0, 0, 0, 0, 0, 0,
	0, 1072, 1072, 1072, 1072, 0, 1090, 0, 0, 0,
	670, 669, 0, 756, 0, 0, 815, 0, 0, 533,
	534, 0, 0, 541, 589, 589, 547, 548, 543, 542,
	597, 598, 592, 0, 592, 592, 815, 0, 566, 567,
	568, 589, 589, 574, 763, 0, 575, 576, 592, 0,
	599, 600, 815, 0, 0, 815, 815, 0, 584, 585,
	587, 589, 0, 0, 1072, 0, 607, 543, 543, 1765,
	1766, 0, 0, 1081, 0, 0, 0, 610, 0, 0,
	0, 0, 671, 233, 236, 0, 239, 0, 1930, 0,
	1930, 0, 246, 0, 0, 0, 0, 0, 0, 276,
	277, 0, 0, 0, 0, 267, 270, 1250, 1251, 1033,
	1034, 271, 272, 316, 317, 0, 762, 785, 787, 781,
	782, 783, 0, 0, 0, 0, 0, 0, 0, 0,
	477, 0, 0, 0, 0, 0, 646, 0, 930, 648,
	0, 0, 0, 0, 823, 817, 819, 887, 111, 823,
	8, 96, 93, 0, 19, 0, 0, 19, 19, 0,
	19, 281, 0, 1762, 1760, 1761, 1696, 1747, 0, 1722,
	0, 1723, 1724, 1725, 1735, 1736, 0, 0, 1718, 0,
	1719, 1720, 1721, 1712, 0, 1713, 1714, 0, 1715, 1716,
	279, 378, 0, 0, 1624, 918, 0, 689, 703, 684,
	0, 692, 0, 0, 1258, 1259, 0, 0, 0, 672,
	703, 674, 0, 692, 762, 739, 0, 717, 0, 0,
	347, 0, 355, 352, 0, 356, 0, 0, 372, 374,
	375, 376, 361, 362, 612, 333, 334, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 336, 121, 0, 305,
	306, 0, 0, 0, 165, 166, 167, 168, 169, 170,
	172, 156, 635, 637, 1025, 1037, 0, 1028, 0, 175,
	216, 148, 0, 0, 0, 1628, 1629, 1630, 1631, 1632,
	1637, 0, 1639, 1641, 1643, 1645, 0, 1663, -2, -2,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1648, 1661, 1662, 0, 0, 0, 0, 0,
	0, 1659, 1659, 1654, 0, 1417, 1252, 1253, 1395, 0,
	0, 1429, 1433, 0, 0, 0, 0, 0, 112, 1618,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 0,
	0, 1627, 0, 0, 0, 1620, 1621, 0, 0, 0,
	1511, 0, 0, 1517, 1518, 1519, 0, 698, 0, 1584,
	1557, 1575, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	843, 0, 707, 709, 710, 736, 717, 743, 0, 0,
	0, 71, 76, 0, 1111, 0, 0, 0, 299, 300,
	0, 0, 294, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 966, 967, 475, 1019, 0, 0, 0, 1035,
	1060, 1068, 0, 0, 0, 0, 0, 1117, 952, 957,
	958, 959, 953, 954, 960, 961, 0, 758, 0, 0,
	856, 532, 590, 591, 816, 538, 1891, 543, 815, 815,
	550, 544, 551, 594, 552, 553, 554, 592, 815, 815,
	764, 589, 592, 577, 593, 592, 595, 581, 0, 588,
	595, 608, 595, 0, 606, 558, 559, 1119, 760, 393,
	394, 395, 397, 0, 445, 445, 445, 428, 445, 0,
	0, 416, 1767, 0, 0, 0, 0, 425, 1767, 0,
	0, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 0, 0,
	1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
	1767, 0, 1767, 1767, 1767, 1767, 1767, 1236, 1767, 0,
	1082, 435, 436, 437, 438, 443, 444, 0, 472, 0,
	0, 965, 0, 475, 0, 1005, 828, 0, 829, 830,
	826, 858, 882, 882, 0, 882, 862, 1258, 0, 0,
	244, 245, 234, 0, 235, 0, 247, 248, 0, 250,
	251, 252, 259, 1833, 1906, 254, 256, 0, 0, 260,
	273, 274, 275, 0, 0, 265, 266, 0, 0, 319,
	320, 322, 0, 717, 1085, 1086, 1087, 632, 1254, 633,
	634, 638, 0, 0, 641, 642, 643, 644, 645, 932,
	0, 0, 1012, 1013, 1014, 815, 0, 824, 0, 820,
	888, 0, 890, 0, 815, 0, 94, 19, 0, 87,
	84, 0, 0, 0, 0, 0, 1742, 1692, 1763, 0,
	0, 0, 1744, 0, 0, 0, 0, 0, 77, 719,
	679, 0, 683, 700, 0, 704, 0, 0, 696, 688,
	693, 0, 0, 713, 680, 1257, 0, 0, 0, 673,
	0, 0, 678, 717, 0, 740, 769, 770, 773, 1316,
	0, 357, 353, 371, 0, 477, 0, 0, 0, 159,
	1022, 0, 160, 164, 154, 0, 0, 0, 1027, 0,
	1024, 1029, 0, 174, 0, 0, 149, 150, 1102, 1111,
	0, 0, 0, 1638, 1640, 1642, 1644, 1646, 0, 1649,
	1659, 1659, 1655, 0, 1650, 0, 1652, 0, 1628, 1401,
	0, 1434, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 1502, 0, 0, 1506, 0, 1508, 1509, 1510, 1512,
	0, 0, 0, 1516, 0, 1555, 1576, 1559, 1562, 0,
	1566, 0, 1568, 1570, 1571, 1572, 0, 767, 767, 0,
	0, 1473, 1473, 1473, 0, 0, 0, 0, 1473, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1418,
	0, 1419, 1420, 0, 0, 0, 844, 737, 0, 0,
	0, 0, 0, 1109, 0, 64, 0, 0, 301, 289,
	291, 0, 0, 1073, 0, 0, 920, 921, 923, 0,
	926, 927, 928, 932, 760, 0, 760, 977, 1767, 479,
	0, 0, 1021, 0, 0, 994, 0, 0, 0, -2,
	0, 0, 1068, 0, 0, 0, 1121, 0, 0, 0,
	657, 661, 23, 761, 0, 536, 0, 537, 589, 545,
	546, 815, 569, 570, 0, 0, 815, 589, 589, 580,
	0, 592, 603, 0, 604, 605, 1121, 0, 0, 1081,
	1187, 1155, 406, 0, 1271, 1272, 446, 0, 1278, 1287,
	1072, 1348, 0, 1287, 0, 0, 1289, 1290, 0, 0,
	0, 0, 429, 430, 0, 415, 0, 0, 0, 0,
	0, 0, 414, 0, 0, 456, 0, 0, 0, 0,
	0, 1768, 1767, 1767, 0, 423, 424, 0, 427, 0,
	0, 0, 0, 0, 0, 0, 0, 1767, 1767, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1227, 0, 0, 0, 0, 0, 0, 0, 1242, 1243,
	977, 1767, 0, 0, 0, 0, 479, 992, 1010, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 847,
	0, 0, 0, 0, 0, 760, 883, 0, 885, 886,
	860, -2, 0, 828, 865, 1623, 237, 238, 0, 0,
	243, 261, 263, 0, 0, 0, 262, 264, 268, 269,
	318, 321, 323, 779, 0, 0, 1145, 0, 933, 934,
	936, 937, 0, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1817, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 931, 649,
	813, 818, 825, 889, 891, 112, 821, 813, 0, 97,
	19, 96, 88, 89, 0, 19, 0, 0, 0, 0,
	1752, 1751, 1737, 0, 1738, 1749, 1754, 0, 1757, 0,
	382, 723, 0, 0, 703, 705, 0, 0, 703, 0,
	0, 712, 0, 0, 0, 0, 0, 0, 703, 779,
	719, 0, 776, 774, 775, 0, 0, 613, 122, 377,
	0, 0, 0, 0, 0, 636, 0, 1026, 156, 0,
	0, 176, 0, 0, 0, 1111, 1106, 1622, 1651, 1653,
	0, 1660, 1656, 1396, 1405, 1430, 0, 0, 1436, 1448,
	1448, 0, 0, 0, 1439, 1750, 1750, 1442, 1746, 1748,
	1746, 1448, 1448, 0, 113, 0, 0, 1507, 0, 0,
	0, 699, 0, 0, 0, 1469, 1471, 1473, 1473, 1480,
	1474, 1481, 1482, 1473, 1473, 1473, 1473, 1487, 1473, 1473,
	1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1467, 0,
	0, 1681, 1682, 708, 0, 0, 750, 751, 752, 753,
	754, 0, 0, 57, 57, 1111, 0, 65, 0, 0,
	293, 61, 62, 0, 0, 0, 925, 0, 0, 0,
	1264, 0, 981, 978, 979, 980, 0, 1016, 480, 481,
	482, 483, 0, 0, 0, 1020, 0, 1005, 1005, 987,
	0, 0, 0, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	-2, 1076, 0, 0, 0, 1264, 1095, 0, 0, 1100,
	1264, 1264, 0, 1129, 0, 1118, 711, 0, -2, 0,
	0, 659, 0, 0, 857, 539, 815, 563, 765, 766,
	595, 815, 815, 0, 589, 609, 1129, 1120, 0, 396,
	445, 0, 1175, 0, 0, 1181, 0, 1188, 399, 0,
	447, 0, 1277, 1304, 1288, 1304, 1349, 1304, 1304, 1072,
	0, 447, 0, 0, 417, 453, 0, 0, 0, 0,
	0, 413, 450, 773, 400, 402, 403, 404, 454, 455,
	457, 0, 459, 460, 419, 431, 432, 433, 434, 0,
	0, 0, 426, 439, 440, 441, 442, 401, 1204, 1205,
	1206, 1209, 1210, 1211, 1212, 0, 0, 1215, 1216, 1217,
	1218, 1219, 1301, 1302, 1303, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1244, 1245, 1246, 1247, 1248, 1249, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 0, 0, 1239, 0,
	981, 0, 0, 0, 0, 0, 1016, 994, 0, 1001,
	0, 1006, 1007, 0, 0, 681, 815, 311, 0, 852,
	845, 0, 834, 849, 850, 851, 837, 0, 839, 0,
	835, 836, 815, 827, 859, 884, 861, 864, 866, 867,
	873, 0, 0, 0, 0, 240, 241, 242, 249, 0,
	499, 255, 735, 0, 1255, 639, 640, 1146, 1147, 647,
	0, 938, 811, 0, 0, 811, 92, 95, 0, 90,
	0, 0, 0, 0, 82, 80, 1745, 0, 0, 725,
	136, 0, 0, 0, 701, 0, 706, 703, 687, 697,
	686, 694, 695, 714, 1260, 1261, 1262, 1263, 703, 677,
	676, 738, 723, 771, 772, 0, 1317, 348, 0, 1023,
	156, 161, 162, 163, 157, 155, 1030, 0, 1032, 0,
	1104, 0, 0, 1657, 1435, 1406, 1437, 1449, 1450, 1438,
	0, 1408, 1409, 1440, 1441, 1443, 1444, 1445, 1446, 1447,
	1410, 1503, 0, 1505, 1513, 1514, 0, 1563, 1567, 0,
	0, 0, 0, 0, 1478, 1479, 1483, 1484, 1485, 1486,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	767, 1468, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 59, 0, 59, 1110, 1112, 0, 0,
	0, 63, 913, 916, 922, 924, 0, 0, 0, 1265,
	1266, 1268, 1269, 1270, 0, 949, 0, 0, 969, 970,
	971, 983, 0, 0, 0, 485, 486, 0, 0, 0,
	498, 494, 495, 496, 476, 1015, 1001, 1001, 990, 0,
	0, 1000, 0, 1077, 1767, 1767, 1767, 0, 0, 1189,
	1767, 1767, 0, 1097, 1099, 0, 0, 1193, 1132, 0,
	0, 1123, 0, 882, 0, 0, 815, 658, 661, 662,
	759, 540, 578, 582, 579, 0, 815, 1132, 392, 1153,
	0, 0, 0, 0, 0, 1185, 0, 0, 1157, 0,
	418, 448, 0, -2, 0, 1305, 0, 1291, 1305, 0,
	0, 1304, 0, 407, 447, 0, 0, 0, 461, 465,
	466, 0, 463, 1344, 0, 464, 0, 452, 0, 458,
	1207, 1208, 0, 1213, 1214, 0, 1238, 0, 0, 467,
	0, 0, 0, 468, 469, 474, 987, 0, 1004, 0,
	1011, 0, 1008, 1009, 767, 0, 0, 831, 853, 0,
	0, 832, 0, 833, 838, 840, 310, 868, 0, 0,
	870, 871, 872, 863, 257, 780, 935, 0, 801, 0,
	0, 822, 802, 0, 19, 0, 0, 85, 1755, 1758,
	727, 0, 724, 137, 0, 0, 0, 0, 691, 702,
	685, 675, 725, 777, 778, 158, 153, 1031, 1114, 0,
	1105, 0, 0, 1515, 0, 1473, 1470, 1473, 1472, 1464,
	0, 1421, 0, 1423, 1424, 1425, 0, 1427, 1428, 0,
	746, 0, 55, 0, 58, 56, 0, 66, 0, 0,
	955, 1193, 0, 955, 982, 968, 0, 1017, 1018, 0,
	487, 488, 0, 491, 497, 984, 985, 986, 0, 0,
	998, 0, 0, 0, 0, 1069, 1083, 0, 0, 0,
	-2, 0, -2, 1094, 0, 1138, 0, 1130, 0, 1122,
	0, 1125, 815, 815, -2, 655, 660, 0, 0, 583,
	1138, 1155, 0, 1176, 0, 0, 0, 0, 0, 0,
	0, 1156, 0, 1169, 449, 1306, -2, 1320, 1322, 0,
	1082, 1325, 1326, 0, 0, 0, 0, 0, 0, 1370,
	1334, 0, 0, 1338, 1339, 1340, 0, 0, 1343, 0,
	1675, 1676, 0, 1347, 0, 0, 0, 0, 0, 0,
	0, 1285, 408, 409, 0, 411, 412, 1767, 1345, 451,
	405, 1767, 421, 1237, 1240, 1241, 473, 470, 471, 990,
	993, 1002, 682, 762, 312, 313, 854, 0, 846, 877,
	874, 0, 0, 939, 812, 814, 86, 91, 0, 0,
	729, 0, 726, 0, 720, 722, 147, 690, 727, 107,
	139, 0, 0, 1407, 1504, 1554, 1476, 1477, 0, 1465,
	0, 1459, 1460, 1461, 1466, 0, 0, 749, 744, 60,
	68, 0, 0, 0, 941, 948, 962, 1088, 1267, 947,
	0, 0, 484, 489, 0, 492, 493, 0, 988, 989,
	0, 996, 0, 0, 1056, 1746, 0, 1078, 1079, 1080,
	1190, 1191, 1192, 1148, 1096, 0, -2, 1201, 0, 1092,
	1114, 1148, 0, 1126, 0, 1133, 0, 1131, 1124, 767,
	656, 596, 1135, 398, 1187, 1177, 0, 1179, 0, 0,
	0, 0, 1158, -2, 0, 1321, 1323, 1324, 1327, 1328,
	1329, 1375, 1376, 1377, 0, 0, 1332, 1372, 1373, 1374,
	1333, 0, 0, 0, 0, 0, 1673, 1674, 1368, 0,
	0, 1292, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1293,
	0, 0, 0, 1284, 1286, 410, 0, 0, 1767, 1003,
	309, 0, 0, 878, 880, 875, 876, 81, 83, 98,
	0, 728, 138, 0, 729, 109, 0, 130, 0, 1115,
	0, 1475, 1462, 0, 0, 0, 0, 0, 1677, 1678,
	1679, 0, 1422, 1426, 0, 67, 0, 0, 963, 964,
	972, 973, 0, 975, 976, 490, 991, 995, 998, 0,
	1047, 0, 773, 0, 1150, 0, 1098, 1081, 1203, 1767,
	1101, 1150, 0, 1195, 1767, 1767, 1116, 0, 1128, 0,
	1140, 0, 1134, 762, 391, 0, 1137, 1173, 1178, 1180,
	1182, 0, 1186, 1184, 1159, -2, 0, 1167, 0, 0,
	1330, 1331, 0, 0, 1573, 1767, 0, 1363, 0, 1047,
	1047, 1047, 1047, 0, 462, 420, 0, 855, 869, 0,
	0, 0, 718, 99, 0, 108, 127, 0, 140, 141,
	0, 0, 0, 0, 1107, 0, 1451, 0, 0, 0,
	1455, 1456, 1457, 1458, 69, 0, 0, 940, 0, 974,
	997, 999, 1046, 1057, 1058, 773, 1091, 0, 1187, 1202,
	0, 1093, 1194, 0, 0, 0, 1127, 1139, 0, 1142,
	654, 1136, 1154, 0, 1183, 1160, 1168, 0, 1163, 0,
	0, 0, 1371, 0, 1337, 0, 1342, 1351, 1364, 0,
	0, 1273, 0, 1275, 0, 1279, 0, 1281, 0, 0,
	422, 879, 881, 0, 731, 721, 110, 114, 0, 136,
	133, 0, 142, 0, 0, 0, 0, 1103, 0, 0,
	1452, 1453, 1454, 0, 0, 942, 943, 956, 1048, 1767,
	1767, 0, 0, 0, 1054, 1055, 1059, 0, 1175, 1207,
	1196, 1197, 1198, 1141, 1174, 1162, 0, -2, 1170, 0,
	0, 1625, 1635, 1636, 1335, 1341, 1350, 1352, 1353, 0,
	1365, 1366, 1367, 1369, 1047, 1047, 1047, 1047, 1283, 730,
	0, 101, 0, 0, 131, 132, 134, 0, 143, 0,
	145, 146, 0, 1463, 70, 944, 0, 0, 1051, 1052,
	0, 1151, 0, 1153, 1164, -2, 0, 1172, 0, 1336,
	1354, 0, 1355, 0, 0, 0, 1274, 1276, 1280, 1282,
	732, 1113, 0, 115, 0, 117, 119, 120, 1307, 128,
	129, 135, 144, 0, 929, 945, 0, 1049, 1050, 1053,
	0, 1155, 1171, 1626, 1356, 1358, 1359, 0, 0, 1357,
	102, 103, 0, 116, 0, 0, 1108, 946, 1152, 1149,
	1360, 1362, 1361, 0, 0, 118, 1308, 104, 105, 106,
	0, 1309,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 639, 636,
	126, 125, 127, 3, 640, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 637, 138, 638, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:814
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:821
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:827
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:835
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:841
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:860
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:864
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:870
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:875
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:879
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:912
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:922
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:933
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:945
		{
			yyVAL.str = ""
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:949
		{
			yyVAL.str = yyDollar[2].str
		}
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:954
		{
			yyVAL.str = ""
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:958
		{
			yyVAL.str = yyDollar[2].str
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:966
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:976
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:986
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:999
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1007
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1015
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1024
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1043
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1053
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1066
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1086
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1092
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1099
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1107
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1113
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1122
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1132
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1140
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1148
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1156
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1166
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1174
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1184
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1191
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1214
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1220
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1224
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1239
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1249
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1253
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1268
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1272
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1278
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1299
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1313
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1320
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1324
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1330
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1334
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1340
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1347
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1355
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1359
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1371
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1375
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1389
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1393
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1398
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1405
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1409
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1413
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1419
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1428
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1439
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1443
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1449
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1453
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1459
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1463
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1469
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1493
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1512
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1516
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1520
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1525
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1529
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1538
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1548
		{
			yyVAL.str = ""
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1555
		{
			yyVAL.str = yyDollar[3].str
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1560
		{
			yyVAL.str = "\n"
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1567
		{
			yyVAL.str = yyDollar[3].str
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1572
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1576
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1604
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1608
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1614
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1622
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1642
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1661
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1686
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1690
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1694
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1699
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1703
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1709
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1722
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1733
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1746
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1750
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1760
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1773
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1786
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1792
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1798
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1806
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1816
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1826
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1830
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1834
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1838
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1842
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1846
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1853
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1857
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1863
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1870
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1879
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1883
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1889
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1893
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1897
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1901
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1905
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1909
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1913
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1917
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1921
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1925
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1929
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1933
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1937
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1941
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1945
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1949
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1953
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1957
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1961
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1965
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1969
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1973
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1977
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1981
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1985
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1989
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1993
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1997
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2001
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2005
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2009
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2013
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2017
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2021
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2025
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2029
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2033
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2037
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2041
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2045
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2049
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2053
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2057
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2061
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2065
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2069
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2073
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2077
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2081
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2085
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2089
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2102
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2109
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2116
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2126
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2130
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2136
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2143
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2169
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2179
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2186
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2193
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2202
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2232
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2236
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2240
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2246
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2252
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2256
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2263
		{
			yyVAL.str = yyDollar[3].str
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2269
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2273
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2279
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2287
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2296
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2305
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2313
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2321
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2344
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2367
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2374
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2381
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2389
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2396
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2403
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2412
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2416
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2420
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2426
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2430
		{
			yyVAL.str = yyDollar[1].str
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2436
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2440
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2446
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2450
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2461
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2472
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2476
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2480
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2484
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2488
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2492
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2496
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2500
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2504
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2510
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2514
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2518
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2522
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2527
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2532
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2538
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2551
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2564
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2577
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2590
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2606
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2613
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2624
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2635
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2639
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2645
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2655
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2661
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2665
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2671
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2677
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2681
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2685
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2689
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2695
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2708
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2714
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2724
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2728
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2734
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2740
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2751
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2757
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2761
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2765
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2769
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2773
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2777
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2785
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2793
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2803
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2815
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2819
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2827
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2835
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2874
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2878
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2884
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2890
		{
			yyVAL.str = yyDollar[1].str
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2895
		{
			yyVAL.str = "true"
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2896
		{
			yyVAL.str = "false"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2897
		{
			yyVAL.str = yyDollar[1].str
		}
	case 377:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2902
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2908
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2917
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:2924
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2932
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2936
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2959
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2982
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2992
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3008
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3012
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3018
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3022
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3046
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3056
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3072
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3090
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3094
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3100
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3104
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3110
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3116
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3124
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3134
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3142
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3152
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3162
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3172
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3179
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3183
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3187
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3191
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3195
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3202
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3208
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3212
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3216
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3220
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3224
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3228
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3232
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3236
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3241
		{
			yyVAL.str = ""
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3272
		{
			yyVAL.str = ""
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3276
		{
			yyVAL.str = string("COLUMN")
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3281
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3287
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3293
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3301
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3305
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3311
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3319
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3326
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3332
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3338
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3344
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3350
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3357
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3364
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3372
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3378
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3390
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3396
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3404
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3408
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3415
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3433
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3448
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3463
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3478
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3491
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3497
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3508
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3521
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3525
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3533
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3537
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3542
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3546
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3562
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3566
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3570
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3574
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3581
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3585
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3589
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3593
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3600
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3604
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3611
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3615
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3619
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3623
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3630
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3637
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3643
		{
			yyVAL.item = nil
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3648
		{
			yyVAL.item = nil
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3691
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3700
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3708
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3716
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3720
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3724
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3735
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3739
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3745
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3750
		{
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3754
		{
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3759
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3769
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3779
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3787
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3793
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3799
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3805
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3811
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3817
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3823
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3832
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3836
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3840
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3844
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3848
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3852
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3856
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3860
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3866
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3875
		{
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3877
		{
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3886
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3896
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3905
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3909
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3913
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3919
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3925
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3931
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3937
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3946
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3957
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3969
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3977
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3983
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3995
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4009
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4015
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4021
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4028
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4032
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4037
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4041
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4045
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4050
		{
			yyVAL.str = ""
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4054
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4060
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4065
		{
			yyVAL.str = ""
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4069
		{
			yyVAL.str = yyDollar[4].str
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4084
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4088
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4094
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4102
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4109
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4113
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4119
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4125
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4130
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4138
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4144
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4149
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4155
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4161
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4165
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4191
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4199
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4207
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4215
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4219
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4225
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4238
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4246
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4255
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4261
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4269
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4277
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4285
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4291
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4299
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4305
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4313
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4319
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4329
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4334
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4341
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4357
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4370
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4381
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4385
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4391
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4397
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4406
		{
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4408
		{
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4411
		{
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4420
		{
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4424
		{
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4429
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4438
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4445
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4451
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4459
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4466
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4473
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4493
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4501
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4511
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4515
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4521
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4528
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4534
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4542
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4549
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4556
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4575
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4579
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4583
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4588
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4592
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4596
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4602
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4611
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4615
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4621
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4625
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4631
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4635
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4641
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4646
		{
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4650
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4657
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4661
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4668
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4673
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4677
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4683
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4687
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4693
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4697
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4702
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4706
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4719
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4730
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4741
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4763
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4786
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4794
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4803
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4807
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4820
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4824
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4829
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4833
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4840
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4845
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4852
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4858
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4862
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4866
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4870
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4874
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4878
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4883
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4887
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4893
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4903
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4918
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4922
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4936
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4940
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4946
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4955
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4959
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4963
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4967
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4971
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4977
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4984
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4993
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4997
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5003
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5011
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5015
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5020
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5024
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5030
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5034
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5038
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5043
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5047
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5053
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5059
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5063
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5069
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5074
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5078
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5082
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5087
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5091
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5095
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5100
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5104
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5112
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5116
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5120
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5134
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5138
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5148
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5158
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5168
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5180
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5188
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5196
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5205
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5213
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5221
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5229
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5237
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5245
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5253
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5261
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5269
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5279
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5290
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5304
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5308
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5312
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5317
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5321
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5325
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5334
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5338
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5343
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5347
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5352
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5356
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5362
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5366
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5372
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5376
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5380
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5384
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5389
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5397
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5403
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5411
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5419
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5429
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5435
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5444
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5453
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5462
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5472
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5476
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5486
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5490
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5494
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5498
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5504
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5514
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5518
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5524
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5530
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5534
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5540
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5546
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5550
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5554
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5558
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5564
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5568
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5574
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5578
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5584
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5588
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5594
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5598
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5608
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5621
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5627
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5633
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5647
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5658
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5665
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5669
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5675
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5685
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5689
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5693
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5698
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5702
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5706
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5710
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5715
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5719
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5723
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5727
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5731
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5736
		{
			yyVAL.str = ""
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5740
		{
			yyVAL.str = yyDollar[1].str
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5744
		{
			yyVAL.str = yyDollar[2].str
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5750
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5754
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5759
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5763
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5767
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5771
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5775
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5781
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 913:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5821
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5834
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5840
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 916:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5846
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5859
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5864
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5871
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5878
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5882
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5888
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5894
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5899
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5903
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5907
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5911
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5918
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5951
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5956
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5963
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5970
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5974
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5980
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5986
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5990
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5994
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6000
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6006
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6012
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6016
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6022
		{
			yyVAL.str = ""
		}
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6029
		{
			yyVAL.str = yyDollar[2].str
		}
	case 947:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6035
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6050
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6067
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6084
		{
			yyVAL.str = yyDollar[1].str
		}
	case 951:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6088
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6094
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6098
		{
			yyVAL.str = "DEFINER = "
		}
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6102
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6107
		{
			yyVAL.str = ""
		}
	case 956:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6111
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6125
		{
			yyVAL.str = ""
		}
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6133
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6139
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6144
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6150
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6163
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6168
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6173
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6179
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6186
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6193
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6200
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6207
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6215
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6221
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6228
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6235
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6243
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6249
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6258
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6275
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var Table = tree.Identifier("")
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6292
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier("")
			var Table = tree.Identifier(yyDollar[6].cstrUnion().Compare())
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6311
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6329
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6335
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6342
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6350
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6356
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6364
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6370
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6378
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6384
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6393
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6397
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6402
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6406
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6413
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1001:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6418
		{
			yyVAL.str = ""
		}
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6422
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1003:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6428
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6441
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var comment = yyDollar[7].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, comment)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6451
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6455
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6461
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6467
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6473
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6480
		{
			yyVAL.str = ""
		}
	case 1011:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6484
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1012:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6490
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6498
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6506
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6514
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6519
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6531
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6542
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6651
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6655
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6661
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6674
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6678
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6684
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6697
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6701
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6705
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6710
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6714
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6720
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6727
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6733
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6742
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1035:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6749
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6760
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6764
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6770
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6779
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6783
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6787
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6792
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6796
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6800
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6804
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6810
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6841
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6845
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6871
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6877
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6889
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6895
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6901
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6907
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6913
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6921
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6925
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6931
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6945
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6959
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6963
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6967
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6971
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6975
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6979
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6983
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6989
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7004
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7008
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7019
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7023
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7028
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7032
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7038
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7042
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7048
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7057
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7066
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7072
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7076
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7082
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7093
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7099
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7117
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7135
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7153
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7169
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7173
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7182
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7194
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7203
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7215
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7225
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7235
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7246
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7256
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7267
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7275
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7286
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7293
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7303
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7316
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7324
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7333
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7342
		{
			yyVAL.str = ""
		}
	case 1108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7346
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7352
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7356
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7361
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7365
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7372
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7384
		{
			yyVAL.str = ""
		}
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7388
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1116:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7394
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7415
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7429
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7433
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7437
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7443
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7447
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7454
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7461
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7468
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7475
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7479
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7483
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7487
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7491
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7498
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7505
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7509
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7516
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7523
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7527
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7533
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7539
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7543
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7550
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7557
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7564
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7571
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7575
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7580
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7584
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7588
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7593
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7597
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7610
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7614
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7622
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7630
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7634
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7646
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7650
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7656
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7660
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7666
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7679
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7693
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7697
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7703
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7707
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7713
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7722
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7733
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7737
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7742
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7746
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7752
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7757
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7765
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7769
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7779
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7783
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7794
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7802
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7810
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7818
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7829
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7838
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7848
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7858
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7862
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7867
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7871
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7877
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7881
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7887
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7896
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7906
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7910
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7916
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7920
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7926
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7935
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7945
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7949
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7955
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7959
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7963
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7969
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7973
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7977
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7981
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7985
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7989
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7993
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7998
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8002
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8006
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8010
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8014
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8018
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8022
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8026
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8030
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8034
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8038
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8042
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8046
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8052
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8058
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8062
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8066
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8070
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8074
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8080
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8086
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8092
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8098
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8104
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8110
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8114
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8118
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8122
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8129
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8133
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8139
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8150
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8154
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8160
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8164
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8168
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8172
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8176
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8180
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8194
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8198
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8207
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8213
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8221
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8225
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8229
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8236
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8244
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8251
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8259
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8266
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8270
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8276
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8280
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8284
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8290
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8294
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8300
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8313
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8326
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8365
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8405
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8419
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8425
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8438
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8451
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8464
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8477
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8492
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8502
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8508
		{
			yyVAL.str = ""
		}
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8512
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8522
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8528
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8534
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8555
		{
			yyVAL.str = ""
		}
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8559
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8565
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8571
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8575
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8580
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8588
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8592
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8596
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8600
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8606
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8612
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8616
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8621
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8628
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8632
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8638
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8642
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8648
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8652
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8656
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8660
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8664
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8668
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8673
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8677
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8681
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8685
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8689
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8693
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8697
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8701
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8705
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8709
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8723
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8727
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8731
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8735
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8739
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8743
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8749
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8753
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8758
		{
			yyVAL.str = ""
		}
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8762
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8768
		{
			yyVAL.str = ""
		}
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8772
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1350:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:8778
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8795
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8802
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8809
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8816
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:8823
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8832
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8838
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8844
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8848
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8852
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8856
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:8860
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8865
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8872
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8876
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:8880
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8885
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:8889
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8894
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8898
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:8914
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8920
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8924
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8928
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8932
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8936
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8940
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8944
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8948
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8952
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8956
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8960
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8964
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8968
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8974
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8978
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8982
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8986
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8990
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8994
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8998
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9002
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9006
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9010
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9052
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9056
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9060
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9065
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9073
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9077
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9081
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9085
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9089
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9099
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9103
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9107
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9111
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9115
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9119
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9123
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9129
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9138
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9147
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9158
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9168
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9178
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9187
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9197
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9207
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9217
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9226
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9236
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9240
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9245
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9249
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9255
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9259
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9265
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9274
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9286
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9303
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9320
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9333
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9346
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9358
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9372
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9387
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9402
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9419
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9434
		{
		}
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9441
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9445
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9449
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9455
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9459
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9463
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9467
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9473
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9477
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9481
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9487
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9495
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9505
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9509
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9516
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9521
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9525
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9530
		{
			yyVAL.str = ","
		}
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9534
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9539
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9543
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1473:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9548
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9555
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9581
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9593
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9605
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9616
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9627
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9638
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9648
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9658
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9669
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9680
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9691
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9702
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9713
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9724
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9735
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9746
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9757
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9768
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9779
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9790
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9801
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9812
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9830
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9839
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9848
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9857
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9866
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9877
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9886
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9896
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9905
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9914
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9923
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9932
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9944
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9955
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9968
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9980
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10003
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10039
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10052
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10065
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10077
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10086
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10094
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10102
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10115
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10124
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10135
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10146
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10155
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10167
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10177
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10187
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10196
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10207
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10216
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10226
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10235
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10244
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10254
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10258
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10264
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10268
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10287
		{
		}
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10289
		{
		}
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10330
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10342
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10346
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10350
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10356
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10361
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10365
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10371
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10375
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10381
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10385
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10392
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10396
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10400
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10409
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10413
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10417
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10422
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10426
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10432
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10436
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10440
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10444
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10448
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10452
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10456
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10460
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10464
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10468
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10476
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10480
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10484
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10488
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10492
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10496
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10500
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10504
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10508
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10512
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10518
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10522
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10528
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10532
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10539
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10543
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10547
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10553
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10557
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10561
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10565
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10569
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10573
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10577
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10583
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10587
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10591
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10595
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10601
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10614
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10619
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10625
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10629
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10642
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10647
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10651
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10655
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10659
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10663
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10670
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10674
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10678
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10682
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10689
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10700
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10705
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10711
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10723
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10735
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10747
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10760
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10773
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10786
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10799
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10812
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10825
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10838
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10851
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10864
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10877
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10892
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10919
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10961
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10997
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11033
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11050
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11062
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11082
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11102
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11122
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11138
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11151
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11164
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11177
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11190
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11202
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11214
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11226
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11238
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11250
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11262
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11274
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11286
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11298
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11311
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11324
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11337
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11350
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11365
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11373
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11382
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11392
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11415
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11420
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11426
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11433
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11437
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11442
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11446
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11452
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11458
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11465
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11472
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11481
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11488
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11495
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11504
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11508
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11512
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11518
		{
		}
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11520
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11530
		{
			yyVAL.str = ""
		}
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11534
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
