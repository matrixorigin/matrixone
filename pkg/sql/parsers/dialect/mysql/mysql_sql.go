// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const SELECT = 57349
const STREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const LOWER_THAN_SET = 57363
const SET = 57364
const ALL = 57365
const DISTINCT = 57366
const DISTINCTROW = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const DEFAULT = 57374
const LOCK = 57375
const KEYS = 57376
const VALUES = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const SUBQUERY_AS_EXPR = 57396
const LOWER_THAN_STRING = 57397
const ID = 57398
const AT_ID = 57399
const AT_AT_ID = 57400
const STRING = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const INTEGRAL = 57406
const HEX = 57407
const BIT_LITERAL = 57408
const FLOAT = 57409
const HEXNUM = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const LOWER_THAN_CHARSET = 57414
const CHARSET = 57415
const UNIQUE = 57416
const KEY = 57417
const OR = 57418
const PIPE_CONCAT = 57419
const XOR = 57420
const AND = 57421
const NOT = 57422
const BETWEEN = 57423
const CASE = 57424
const WHEN = 57425
const THEN = 57426
const ELSE = 57427
const END = 57428
const LE = 57429
const GE = 57430
const NE = 57431
const NULL_SAFE_EQUAL = 57432
const IS = 57433
const LIKE = 57434
const REGEXP = 57435
const IN = 57436
const ASSIGNMENT = 57437
const SHIFT_LEFT = 57438
const SHIFT_RIGHT = 57439
const DIV = 57440
const MOD = 57441
const UNARY = 57442
const COLLATE = 57443
const BINARY = 57444
const UNDERSCORE_BINARY = 57445
const INTERVAL = 57446
const BEGIN = 57447
const START = 57448
const TRANSACTION = 57449
const COMMIT = 57450
const ROLLBACK = 57451
const WORK = 57452
const CONSISTENT = 57453
const SNAPSHOT = 57454
const CHAIN = 57455
const NO = 57456
const RELEASE = 57457
const PRIORITY = 57458
const QUICK = 57459
const BIT = 57460
const TINYINT = 57461
const SMALLINT = 57462
const MEDIUMINT = 57463
const INT = 57464
const INTEGER = 57465
const BIGINT = 57466
const INTNUM = 57467
const REAL = 57468
const DOUBLE = 57469
const FLOAT_TYPE = 57470
const DECIMAL = 57471
const NUMERIC = 57472
const DECIMAL_VALUE = 57473
const TIME = 57474
const TIMESTAMP = 57475
const DATETIME = 57476
const YEAR = 57477
const CHAR = 57478
const VARCHAR = 57479
const BOOL = 57480
const CHARACTER = 57481
const VARBINARY = 57482
const NCHAR = 57483
const TEXT = 57484
const TINYTEXT = 57485
const MEDIUMTEXT = 57486
const LONGTEXT = 57487
const BLOB = 57488
const TINYBLOB = 57489
const MEDIUMBLOB = 57490
const LONGBLOB = 57491
const JSON = 57492
const ENUM = 57493
const GEOMETRY = 57494
const POINT = 57495
const LINESTRING = 57496
const POLYGON = 57497
const GEOMETRYCOLLECTION = 57498
const MULTIPOINT = 57499
const MULTILINESTRING = 57500
const MULTIPOLYGON = 57501
const INT1 = 57502
const INT2 = 57503
const INT3 = 57504
const INT4 = 57505
const INT8 = 57506
const SQL_SMALL_RESULT = 57507
const SQL_BIG_RESULT = 57508
const SQL_BUFFER_RESULT = 57509
const LOW_PRIORITY = 57510
const HIGH_PRIORITY = 57511
const DELAYED = 57512
const CREATE = 57513
const ALTER = 57514
const DROP = 57515
const RENAME = 57516
const ANALYZE = 57517
const ADD = 57518
const SCHEMA = 57519
const TABLE = 57520
const INDEX = 57521
const VIEW = 57522
const TO = 57523
const IGNORE = 57524
const IF = 57525
const PRIMARY = 57526
const COLUMN = 57527
const CONSTRAINT = 57528
const SPATIAL = 57529
const FULLTEXT = 57530
const FOREIGN = 57531
const KEY_BLOCK_SIZE = 57532
const SHOW = 57533
const DESCRIBE = 57534
const EXPLAIN = 57535
const DATE = 57536
const ESCAPE = 57537
const REPAIR = 57538
const OPTIMIZE = 57539
const TRUNCATE = 57540
const MAXVALUE = 57541
const PARTITION = 57542
const REORGANIZE = 57543
const LESS = 57544
const THAN = 57545
const PROCEDURE = 57546
const TRIGGER = 57547
const STATUS = 57548
const VARIABLES = 57549
const ROLE = 57550
const PROXY = 57551
const AVG_ROW_LENGTH = 57552
const STORAGE = 57553
const DISK = 57554
const MEMORY = 57555
const CHECKSUM = 57556
const COMPRESSION = 57557
const DATA = 57558
const DIRECTORY = 57559
const DELAY_KEY_WRITE = 57560
const ENCRYPTION = 57561
const ENGINE = 57562
const MAX_ROWS = 57563
const MIN_ROWS = 57564
const PACK_KEYS = 57565
const ROW_FORMAT = 57566
const STATS_AUTO_RECALC = 57567
const STATS_PERSISTENT = 57568
const STATS_SAMPLE_PAGES = 57569
const DYNAMIC = 57570
const COMPRESSED = 57571
const REDUNDANT = 57572
const COMPACT = 57573
const FIXED = 57574
const COLUMN_FORMAT = 57575
const AUTO_RANDOM = 57576
const RESTRICT = 57577
const CASCADE = 57578
const ACTION = 57579
const PARTIAL = 57580
const SIMPLE = 57581
const CHECK = 57582
const ENFORCED = 57583
const RANGE = 57584
const LIST = 57585
const ALGORITHM = 57586
const LINEAR = 57587
const PARTITIONS = 57588
const SUBPARTITION = 57589
const SUBPARTITIONS = 57590
const TYPE = 57591
const ANY = 57592
const SOME = 57593
const PREPARE = 57594
const DEALLOCATE = 57595
const PROPERTIES = 57596
const PARSER = 57597
const VISIBLE = 57598
const INVISIBLE = 57599
const BTREE = 57600
const HASH = 57601
const RTREE = 57602
const BSI = 57603
const ZONEMAP = 57604
const LEADING = 57605
const BOTH = 57606
const TRAILING = 57607
const UNKNOWN = 57608
const EXPIRE = 57609
const ACCOUNT = 57610
const UNLOCK = 57611
const DAY = 57612
const NEVER = 57613
const SECOND = 57614
const ASCII = 57615
const COALESCE = 57616
const COLLATION = 57617
const HOUR = 57618
const MICROSECOND = 57619
const MINUTE = 57620
const MONTH = 57621
const QUARTER = 57622
const REPEAT = 57623
const REVERSE = 57624
const ROW_COUNT = 57625
const WEEK = 57626
const REVOKE = 57627
const FUNCTION = 57628
const PRIVILEGES = 57629
const TABLESPACE = 57630
const EXECUTE = 57631
const SUPER = 57632
const GRANT = 57633
const OPTION = 57634
const REFERENCES = 57635
const REPLICATION = 57636
const SLAVE = 57637
const CLIENT = 57638
const USAGE = 57639
const RELOAD = 57640
const FILE = 57641
const TEMPORARY = 57642
const ROUTINE = 57643
const EVENT = 57644
const SHUTDOWN = 57645
const NULLX = 57646
const AUTO_INCREMENT = 57647
const APPROXNUM = 57648
const SIGNED = 57649
const UNSIGNED = 57650
const ZEROFILL = 57651
const USER = 57652
const IDENTIFIED = 57653
const CIPHER = 57654
const ISSUER = 57655
const X509 = 57656
const SUBJECT = 57657
const SAN = 57658
const REQUIRE = 57659
const SSL = 57660
const NONE = 57661
const PASSWORD = 57662
const MAX_QUERIES_PER_HOUR = 57663
const MAX_UPDATES_PER_HOUR = 57664
const MAX_CONNECTIONS_PER_HOUR = 57665
const MAX_USER_CONNECTIONS = 57666
const FORMAT = 57667
const VERBOSE = 57668
const CONNECTION = 57669
const LOAD = 57670
const INFILE = 57671
const TERMINATED = 57672
const OPTIONALLY = 57673
const ENCLOSED = 57674
const ESCAPED = 57675
const STARTING = 57676
const LINES = 57677
const DATABASES = 57678
const TABLES = 57679
const EXTENDED = 57680
const FULL = 57681
const PROCESSLIST = 57682
const FIELDS = 57683
const COLUMNS = 57684
const OPEN = 57685
const ERRORS = 57686
const WARNINGS = 57687
const INDEXES = 57688
const SCHEMAS = 57689
const NAMES = 57690
const GLOBAL = 57691
const SESSION = 57692
const ISOLATION = 57693
const LEVEL = 57694
const READ = 57695
const WRITE = 57696
const ONLY = 57697
const REPEATABLE = 57698
const COMMITTED = 57699
const UNCOMMITTED = 57700
const SERIALIZABLE = 57701
const LOCAL = 57702
const EXCEPT = 57703
const CURRENT_TIMESTAMP = 57704
const DATABASE = 57705
const CURRENT_TIME = 57706
const LOCALTIME = 57707
const LOCALTIMESTAMP = 57708
const UTC_DATE = 57709
const UTC_TIME = 57710
const UTC_TIMESTAMP = 57711
const REPLACE = 57712
const CONVERT = 57713
const SEPARATOR = 57714
const CURRENT_DATE = 57715
const CURRENT_USER = 57716
const CURRENT_ROLE = 57717
const SECOND_MICROSECOND = 57718
const MINUTE_MICROSECOND = 57719
const MINUTE_SECOND = 57720
const HOUR_MICROSECOND = 57721
const HOUR_SECOND = 57722
const HOUR_MINUTE = 57723
const DAY_MICROSECOND = 57724
const DAY_SECOND = 57725
const DAY_MINUTE = 57726
const DAY_HOUR = 57727
const YEAR_MONTH = 57728
const SQL_TSI_HOUR = 57729
const SQL_TSI_DAY = 57730
const SQL_TSI_WEEK = 57731
const SQL_TSI_MONTH = 57732
const SQL_TSI_QUARTER = 57733
const SQL_TSI_YEAR = 57734
const SQL_TSI_SECOND = 57735
const SQL_TSI_MINUTE = 57736
const RECURSIVE = 57737
const CONFIG = 57738
const MATCH = 57739
const AGAINST = 57740
const BOOLEAN = 57741
const LANGUAGE = 57742
const WITH = 57743
const QUERY = 57744
const EXPANSION = 57745
const ADDDATE = 57746
const BIT_AND = 57747
const BIT_OR = 57748
const BIT_XOR = 57749
const CAST = 57750
const COUNT = 57751
const APPROX_COUNT_DISTINCT = 57752
const APPROX_PERCENTILE = 57753
const CURDATE = 57754
const CURTIME = 57755
const DATE_ADD = 57756
const DATE_SUB = 57757
const EXTRACT = 57758
const GROUP_CONCAT = 57759
const MAX = 57760
const MID = 57761
const MIN = 57762
const NOW = 57763
const POSITION = 57764
const SESSION_USER = 57765
const STD = 57766
const STDDEV = 57767
const STDDEV_POP = 57768
const STDDEV_SAMP = 57769
const SUBDATE = 57770
const SUBSTR = 57771
const SUBSTRING = 57772
const SUM = 57773
const SYSDATE = 57774
const SYSTEM_USER = 57775
const TRANSLATE = 57776
const TRIM = 57777
const VARIANCE = 57778
const VAR_POP = 57779
const VAR_SAMP = 57780
const AVG = 57781
const ROW = 57782
const OUTFILE = 57783
const HEADER = 57784
const MAX_FILE_SIZE = 57785
const FORCE_QUOTE = 57786
const UNUSED = 57787

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PREPARE",
	"DEALLOCATE",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6750

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	18, 407,
	-2, 388,
	-1, 66,
	196, 557,
	-2, 593,
	-1, 81,
	223, 273,
	224, 273,
	-2, 294,
	-1, 333,
	60, 1380,
	464, 1380,
	-2, 97,
	-1, 352,
	60, 718,
	464, 718,
	-2, 555,
	-1, 353,
	60, 548,
	464, 548,
	-2, 556,
	-1, 359,
	18, 408,
	-2, 371,
	-1, 428,
	91, 1260,
	102, 1260,
	121, 1260,
	-2, 1083,
	-1, 456,
	18, 408,
	-2, 371,
	-1, 603,
	55, 1409,
	-2, 1416,
	-1, 611,
	55, 1410,
	-2, 1424,
	-1, 613,
	55, 1406,
	-2, 1426,
	-1, 614,
	55, 1407,
	-2, 1427,
	-1, 619,
	55, 1408,
	-2, 1433,
	-1, 620,
	55, 1411,
	-2, 1434,
	-1, 621,
	55, 1412,
	-2, 1435,
	-1, 622,
	55, 847,
	-2, 1436,
	-1, 623,
	55, 848,
	-2, 1437,
	-1, 624,
	55, 849,
	-2, 1438,
	-1, 626,
	55, 1413,
	-2, 1440,
	-1, 627,
	55, 866,
	-2, 1441,
	-1, 628,
	55, 865,
	-2, 1442,
	-1, 631,
	55, 1414,
	-2, 1445,
	-1, 632,
	55, 1415,
	-2, 1446,
	-1, 638,
	55, 928,
	-2, 1260,
	-1, 639,
	55, 937,
	-2, 1286,
	-1, 640,
	55, 941,
	-2, 1325,
	-1, 641,
	55, 952,
	-2, 1385,
	-1, 642,
	55, 954,
	-2, 1395,
	-1, 643,
	55, 942,
	-2, 1400,
	-1, 644,
	55, 950,
	-2, 1404,
	-1, 645,
	55, 931,
	-2, 1405,
	-1, 795,
	1, 583,
	57, 583,
	463, 583,
	-2, 590,
	-1, 932,
	18, 407,
	-2, 776,
	-1, 978,
	121, 1093,
	-2, 1091,
	-1, 980,
	121, 497,
	-2, 1088,
	-1, 981,
	121, 498,
	-2, 1089,
	-1, 1169,
	1, 584,
	57, 584,
	463, 584,
	-2, 590,
	-1, 1256,
	55, 995,
	-2, 1402,
	-1, 1257,
	55, 996,
	-2, 1403,
	-1, 1418,
	53, 328,
	56, 328,
	-2, 682,
	-1, 1733,
	76, 590,
	117, 590,
	153, 590,
	156, 590,
	-2, 630,
	-1, 1735,
	257, 743,
	-2, 724,
	-1, 1759,
	53, 328,
	56, 328,
	-2, 683,
	-1, 1843,
	76, 590,
	117, 590,
	153, 590,
	156, 590,
	-2, 631,
	-1, 1871,
	257, 743,
	-2, 725,
	-1, 2255,
	56, 605,
	57, 605,
	-2, 590,
	-1, 2259,
	56, 605,
	57, 605,
	-2, 590,
	-1, 2271,
	56, 609,
	57, 609,
	-2, 590,
	-1, 2274,
	56, 610,
	57, 610,
	-2, 590,
}

const yyPrivate = 57344

const yyLast = 23312

var yyAct = [...]int{
	782, 1259, 2266, 2261, 2259, 2232, 2258, 648, 2206, 1901,
	771, 2097, 666, 2177, 2221, 1216, 1883, 2158, 2071, 2159,
	1839, 2074, 2052, 537, 1727, 1156, 1899, 98, 863, 574,
	2007, 582, 312, 318, 2059, 318, 1260, 1900, 1212, 829,
	360, 1914, 316, 22, 101, 1891, 1753, 1788, 799, 359,
	322, 646, 1558, 1872, 801, 1582, 1454, 1890, 354, 354,
	426, 516, 1554, 1421, 1542, 525, 97, 1799, 849, 383,
	1803, 1791, 602, 1433, 1781, 1599, 823, 1570, 1211, 1559,
	960, 1629, 1402, 1619, 1162, 1563, 1496, 1739, 1175, 427,
	1637, 1608, 647, 451, 766, 975, 978, 98, 969, 961,
	1343, 1459, 657, 1329, 970, 1247, 826, 842, 1432, 1396,
	1198, 1174, 3, 60, 824, 808, 1170, 1258, 1847, 784,
	527, 767, 1273, 649, 595, 305, 315, 15, 434, 29,
	429, 1261, 313, 6, 846, 809, 453, 22, 466, 431,
	314, 5, 385, 324, 810, 865, 1138, 769, 308, 1214,
	868, 899, 418, 566, 1238, 382, 550, 758, 326, 325,
	29, 504, 94, 1925, 1145, 483, 12, 7, 4, 1835,
	1726, 779, 963, 1543, 594, 317, 583, 93, 2124, 1141,
	1378, 92, 1397, 93, 89, 26, 83, 67, 552, 2114,
	514, 1385, 544, 93, 93, 26, 83, 67, 678, 61,
	836, 380, 356, 419, 432, 329, 329, 450, 548, 93,
	320, 26, 83, 67, 303, 503, 1388, 438, 437, 404,
	372, 15, 1521, 29, 93, 90, 812, 6, 304, 774,
	61, 90, 831, 832, 498, 5, 553, 494, 747, 727,
	536, 90, 90, 535, 538, 539, 2181, 436, 2005, 2146,
	93, 2144, 724, 538, 539, 2162, 2163, 90, 2008, 2009,
	2010, 2011, 1546, 2085, 390, 1547, 2088, 1548, 1928, 1728,
	778, 1370, 726, 1571, 1572, 1573, 1574, 460, 1600, 1603,
	1143, 469, 843, 1405, 1403, 405, 1404, 1406, 489, 433,
	1911, 440, 485, 61, 1141, 1787, 1786, 1832, 90, 496,
	497, 1405, 1403, 1400, 1404, 1406, 459, 1399, 1398, 1888,
	495, 1723, 759, 484, 1991, 458, 490, 1770, 1766, 2123,
	318, 2172, 98, 1769, 319, 1250, 1251, 1252, 2148, 1980,
	1602, 1464, 1251, 1252, 2251, 2267, 1248, 374, 761, 2060,
	2061, 2062, 2064, 2063, 455, 457, 2186, 371, 370, 435,
	2143, 2121, 2099, 431, 456, 2193, 2161, 2073, 1974, 1943,
	361, 476, 2095, 2096, 66, 2099, 91, 2242, 366, 1942,
	358, 401, 1408, 1409, 1410, 1411, 2105, 545, 562, 1386,
	2150, 2151, 383, 492, 81, 2126, 2127, 2268, 396, 534,
	533, 2262, 2233, 493, 1931, 452, 487, 1497, 517, 549,
	2083, 1382, 439, 551, 480, 1225, 1149, 515, 488, 491,
	1567, 1767, 786, 396, 519, 354, 1724, 321, 486, 1452,
	760, 427, 427, 427, 522, 432, 354, 354, 518, 1414,
	520, 471, 470, 1221, 1575, 469, 1783, 1782, 29, 29,
	556, 318, 598, 598, 834, 377, 378, 379, 410, 835,
	430, 1220, 1965, 833, 1969, 729, 579, 2246, 462, 463,
	369, 1223, 1222, 554, 555, 398, 407, 408, 397, 1592,
	365, 2210, 1762, 745, 1588, 1549, 1461, 1422, 597, 597,
	354, 354, 459, 354, 1376, 1375, 1369, 730, 1364, 1190,
	398, 772, 1154, 397, 725, 474, 1135, 412, 411, 880,
	733, 354, 354, 581, 2037, 472, 529, 454, 61, 61,
	433, 857, 917, 541, 542, 1537, 754, 354, 1535, 354,
	528, 795, 530, 373, 383, 395, 2149, 800, 1568, 464,
	2125, 98, 2072, 399, 2228, 791, 1249, 506, 2219, 567,
	2224, 1543, 1463, 508, 781, 817, 500, 785, 1415, 354,
	568, 98, 538, 539, 538, 539, 1583, 844, 561, 2109,
	509, 565, 329, 354, 427, 1536, 354, 815, 1144, 482,
	805, 1765, 1164, 576, 576, 1606, 787, 572, 573, 1768,
	1366, 1379, 858, 524, 804, 471, 470, 1227, 68, 354,
	354, 862, 98, 29, 68, 776, 813, 814, 877, 756,
	753, 461, 29, 850, 68, 68, 750, 818, 866, 850,
	850, 788, 584, 736, 749, 1697, 593, 722, 731, 303,
	68, 803, 531, 777, 569, 570, 571, 1140, 329, 585,
	773, 864, 564, 304, 732, 68, 881, 867, 762, 770,
	752, 751, 748, 819, 588, 589, 590, 591, 592, 2225,
	61, 1970, 1971, 934, 806, 807, 540, 775, 1344, 543,
	1502, 68, 790, 61, 430, 1967, 329, 409, 780, 1966,
	740, 741, 61, 811, 1344, 1564, 1567, 1139, 796, 797,
	1976, 1405, 1403, 860, 1404, 1406, 1394, 845, 933, 396,
	392, 789, 394, 404, 873, 375, 941, 391, 389, 388,
	400, 393, 1975, 402, 403, 822, 840, 855, 856, 1743,
	329, 532, 1263, 1262, 943, 1738, 841, 2038, 2040, 2041,
	2042, 2039, 2241, 852, 853, 854, 1960, 967, 967, 972,
	1937, 876, 873, 861, 2257, 2238, 2203, 329, 920, 921,
	922, 923, 924, 917, 859, 935, 936, 937, 938, 980,
	384, 874, 875, 876, 873, 413, 744, 1840, 800, 2182,
	1699, 939, 2240, 2187, 743, 432, 398, 2048, 2133, 397,
	2222, 2223, 2046, 1825, 443, 448, 449, 1336, 981, 406,
	1271, 2081, 907, 957, 2080, 2054, 2044, 98, 98, 1702,
	1272, 1334, 1335, 1333, 1568, 2034, 2032, 1176, 1268, 1561,
	2031, 2171, 2047, 1562, 1565, 2030, 1137, 2045, 2027, 2021,
	1824, 2018, 312, 2017, 1676, 1673, 1674, 1675, 2154, 1192,
	1707, 2043, 1706, 1705, 1703, 866, 1159, 1161, 1926, 1919,
	2033, 966, 874, 875, 876, 873, 951, 354, 1918, 1180,
	432, 918, 919, 920, 921, 922, 923, 924, 917, 1917,
	932, 1484, 1913, 1912, 867, 1566, 1905, 1749, 354, 1748,
	1181, 1182, 1183, 1747, 1746, 1533, 29, 734, 2053, 2103,
	598, 2102, 98, 959, 1217, 2079, 2035, 1134, 2028, 1243,
	2024, 1245, 1704, 979, 2023, 2022, 1133, 1962, 1927, 850,
	850, 850, 973, 1915, 974, 1455, 1483, 1838, 1836, 1269,
	1270, 792, 793, 794, 1193, 1756, 597, 1580, 1579, 1578,
	1239, 1240, 1241, 1242, 1171, 1577, 693, 692, 874, 875,
	876, 873, 1148, 1235, 1151, 433, 1186, 1150, 1188, 1184,
	953, 914, 1266, 445, 446, 447, 61, 1187, 913, 735,
	2271, 957, 2249, 1511, 1218, 1308, 1467, 1510, 1237, 1467,
	2276, 811, 2130, 323, 1353, 1185, 1253, 1157, 1158, 2129,
	1189, 2270, 2269, 2110, 1652, 1147, 2252, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1345,
	1224, 1348, 1338, 1339, 329, 1998, 2227, 1228, 1229, 1230,
	1505, 2248, 2247, 1504, 1236, 1708, 1709, 1147, 2236, 2272,
	2239, 874, 875, 876, 873, 1232, 1994, 1355, 874, 875,
	876, 873, 355, 1993, 1358, 1826, 874, 875, 876, 873,
	1147, 2235, 1337, 2209, 2208, 1264, 1265, 1823, 1267, 1219,
	1331, 1987, 2169, 1815, 1303, 1304, 1305, 1306, 1307, 1987,
	2164, 1313, 1314, 1315, 1316, 2155, 916, 915, 925, 926,
	918, 919, 920, 921, 922, 923, 924, 917, 1234, 2152,
	1640, 1780, 1347, 1349, 1350, 1733, 1346, 874, 875, 876,
	873, 1716, 1354, 1618, 1356, 2141, 2140, 1659, 1663, 1665,
	1667, 1669, 1670, 1672, 1593, 1676, 1673, 1674, 1675, 1514,
	1357, 1654, 1655, 1656, 1657, 1638, 1639, 1660, 1512, 1641,
	802, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650,
	1651, 1658, 2216, 1987, 2119, 1153, 2077, 1471, 1509, 1662,
	1664, 1666, 1668, 1671, 916, 915, 925, 926, 918, 919,
	920, 921, 922, 923, 924, 917, 1371, 1508, 874, 875,
	876, 873, 354, 1208, 363, 354, 1587, 2218, 459, 1420,
	354, 1506, 1152, 1653, 362, 1391, 1476, 1381, 916, 915,
	925, 926, 918, 919, 920, 921, 922, 923, 924, 917,
	874, 875, 876, 873, 1418, 874, 875, 876, 873, 2003,
	1424, 884, 885, 886, 887, 888, 889, 890, 882, 1389,
	1390, 1429, 785, 1987, 2118, 587, 459, 98, 98, 98,
	98, 874, 875, 876, 873, 1434, 1985, 1473, 459, 98,
	1449, 1987, 2117, 1416, 1987, 2116, 802, 1434, 1920, 1466,
	22, 2108, 2107, 1811, 1451, 1393, 354, 1431, 874, 875,
	876, 873, 1413, 1352, 98, 98, 2002, 2001, 1875, 1425,
	874, 875, 876, 873, 1383, 874, 875, 876, 873, 2000,
	1999, 1351, 1450, 1996, 1997, 1996, 1995, 1810, 1217, 1605,
	1372, 1179, 1992, 1377, 1987, 1986, 1630, 1631, 586, 1472,
	2212, 1809, 1878, 1457, 1458, 1392, 1467, 1691, 1873, 874,
	875, 876, 873, 1886, 1887, 1417, 1412, 499, 1171, 1874,
	1423, 478, 1380, 874, 875, 876, 873, 1467, 1468, 1467,
	1677, 1469, 1470, 1430, 15, 1428, 29, 1426, 1359, 1427,
	6, 1435, 1436, 1437, 1438, 1448, 1447, 1446, 5, 1734,
	1453, 1467, 1475, 1879, 925, 926, 918, 919, 920, 921,
	922, 923, 924, 917, 1491, 1456, 2194, 1714, 1467, 1474,
	1478, 1479, 1480, 1481, 1482, 477, 1486, 2191, 1696, 478,
	1487, 1488, 1489, 1490, 1462, 1179, 1373, 1465, 1661, 874,
	875, 876, 873, 967, 1207, 1525, 967, 1690, 1141, 1528,
	874, 875, 876, 873, 1717, 354, 61, 1689, 1499, 354,
	354, 1503, 1208, 354, 1419, 1531, 480, 1494, 1495, 874,
	875, 876, 873, 1688, 1515, 1365, 459, 850, 1208, 874,
	875, 876, 873, 850, 1522, 1557, 1686, 1885, 98, 1560,
	1368, 1367, 1362, 1361, 1532, 874, 875, 876, 873, 871,
	98, 1176, 1341, 1591, 1179, 1178, 1687, 1493, 1420, 1520,
	1683, 1507, 1147, 1146, 1881, 1527, 1331, 1492, 738, 737,
	1234, 1155, 479, 1501, 1524, 1136, 432, 1581, 874, 875,
	876, 873, 874, 875, 876, 873, 1880, 1882, 523, 1517,
	1516, 563, 1622, 869, 1526, 1529, 1530, 1523, 1682, 1534,
	1584, 1585, 2189, 874, 875, 876, 873, 1541, 2132, 2069,
	2057, 1594, 1595, 2055, 1576, 93, 480, 1604, 83, 67,
	874, 875, 876, 873, 93, 1681, 1589, 2050, 874, 875,
	876, 873, 1616, 2012, 1624, 1790, 354, 1983, 1982, 1590,
	1586, 1981, 354, 1978, 1678, 1617, 1888, 874, 875, 876,
	873, 1684, 1685, 1680, 1973, 1958, 1538, 1540, 1876, 1613,
	1979, 932, 1679, 90, 526, 1710, 1800, 1792, 1804, 1698,
	354, 1712, 90, 1807, 1711, 874, 875, 876, 873, 1596,
	1622, 1627, 98, 1797, 874, 875, 876, 873, 1796, 1776,
	61, 1737, 1751, 1744, 1332, 1713, 90, 1395, 1360, 1226,
	1194, 1695, 1177, 874, 875, 876, 873, 958, 956, 955,
	1692, 954, 952, 354, 1167, 354, 1626, 900, 98, 1759,
	1694, 1732, 475, 1731, 1625, 1701, 949, 948, 946, 945,
	1715, 944, 1718, 2199, 942, 1340, 459, 912, 874, 875,
	876, 873, 1752, 911, 910, 1434, 874, 875, 876, 873,
	909, 908, 906, 1779, 905, 1741, 1722, 874, 875, 876,
	873, 1217, 904, 903, 902, 901, 898, 897, 1736, 1735,
	896, 895, 2197, 1774, 1760, 1772, 1775, 1745, 1740, 1777,
	1740, 1763, 1742, 576, 431, 1761, 894, 1778, 1750, 576,
	893, 892, 891, 757, 1758, 1757, 728, 481, 2160, 1693,
	1609, 1610, 1612, 1407, 1764, 1233, 501, 1443, 1441, 1773,
	1615, 1614, 1444, 1442, 1440, 1439, 2256, 1719, 1794, 1795,
	916, 915, 925, 926, 918, 919, 920, 921, 922, 923,
	924, 917, 1798, 1363, 1172, 1802, 1784, 1445, 1544, 1204,
	1205, 1793, 1200, 1203, 1204, 1205, 1201, 505, 1202, 1206,
	1551, 354, 354, 1812, 1801, 98, 1157, 1158, 48, 28,
	576, 27, 1754, 1165, 821, 459, 1814, 1844, 1929, 1892,
	1894, 1550, 1892, 1892, 1557, 1805, 1210, 1808, 1720, 61,
	1816, 798, 459, 1818, 850, 1820, 2174, 1721, 300, 301,
	547, 302, 1263, 1262, 1833, 546, 1813, 511, 512, 1195,
	1132, 507, 2213, 2137, 1819, 1817, 2135, 800, 2090, 2089,
	2087, 1898, 2015, 1821, 1822, 1893, 1828, 1831, 1889, 1200,
	1203, 1204, 1205, 1201, 2013, 1202, 1206, 1869, 1841, 1895,
	1896, 1837, 1771, 1730, 1908, 1897, 1729, 1621, 363, 510,
	362, 1620, 1903, 1904, 1460, 2200, 802, 1477, 362, 2201,
	2200, 2201, 1374, 1761, 473, 1909, 1209, 386, 1907, 34,
	1, 521, 376, 1309, 513, 742, 442, 468, 739, 1916,
	467, 465, 1342, 1274, 679, 962, 968, 1933, 2051, 2173,
	2205, 2131, 2176, 755, 665, 2082, 1545, 1923, 2004, 2084,
	2006, 1387, 1921, 1922, 1384, 502, 1518, 1519, 1829, 1830,
	691, 682, 947, 684, 723, 444, 681, 1906, 1601, 364,
	354, 441, 387, 1910, 1725, 1785, 1806, 1789, 2265, 98,
	2255, 2231, 2211, 2098, 2250, 2142, 2192, 2185, 1894, 2094,
	1930, 1934, 1935, 327, 1938, 1939, 1940, 1941, 1936, 837,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1889, 1959, 1963, 1961, 1977, 557,
	416, 2070, 1569, 1401, 1163, 1142, 2016, 768, 928, 1989,
	931, 328, 2122, 1984, 1990, 2056, 367, 1166, 368, 1988,
	1169, 1168, 1254, 431, 929, 930, 927, 2049, 916, 915,
	925, 926, 918, 919, 920, 921, 922, 923, 924, 917,
	883, 1330, 2014, 950, 940, 600, 1500, 656, 650, 459,
	1598, 1597, 459, 459, 459, 2029, 1884, 816, 459, 33,
	32, 1217, 2019, 2020, 31, 872, 976, 680, 2025, 2026,
	100, 1191, 977, 2091, 1924, 2058, 2178, 664, 2066, 2067,
	2068, 663, 662, 2092, 2076, 2065, 661, 1199, 1197, 1196,
	354, 354, 2078, 828, 827, 2075, 870, 1754, 2157, 2156,
	2112, 2113, 1834, 1972, 2093, 2036, 1968, 2086, 915, 925,
	926, 918, 919, 920, 921, 922, 923, 924, 917, 2100,
	2101, 98, 1964, 2104, 1843, 1842, 1870, 1871, 459, 1877,
	1636, 1632, 1634, 1635, 1633, 1700, 1628, 1555, 1556, 1553,
	459, 1552, 1611, 1607, 964, 971, 783, 95, 825, 2106,
	11, 10, 746, 9, 2115, 14, 21, 20, 19, 56,
	864, 55, 2111, 54, 53, 18, 2120, 8, 52, 51,
	2214, 50, 17, 2128, 16, 46, 44, 43, 2136, 2134,
	2138, 2139, 42, 41, 40, 39, 38, 45, 37, 2145,
	2147, 36, 35, 65, 64, 63, 62, 23, 61, 24,
	25, 2153, 74, 2180, 73, 70, 72, 71, 2165, 2166,
	2167, 2168, 2184, 69, 30, 2179, 916, 915, 925, 926,
	918, 919, 920, 921, 922, 923, 924, 917, 2183, 13,
	2, 0, 0, 0, 0, 0, 0, 576, 576, 0,
	0, 0, 0, 0, 2195, 0, 0, 2198, 2196, 2170,
	0, 0, 2207, 0, 0, 0, 2202, 0, 2204, 0,
	459, 0, 459, 0, 0, 0, 2188, 0, 2190, 772,
	2215, 772, 2217, 0, 0, 0, 0, 0, 0, 0,
	2180, 2230, 0, 0, 0, 0, 2226, 0, 0, 459,
	0, 0, 2179, 2229, 0, 2234, 0, 0, 772, 2237,
	0, 0, 0, 0, 0, 2207, 2243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2220, 2253, 0, 0,
	0, 0, 0, 0, 2254, 0, 0, 0, 0, 0,
	0, 0, 0, 2264, 0, 2245, 2263, 0, 0, 0,
	0, 0, 0, 2273, 2275, 0, 2274, 0, 2264, 1090,
	1077, 0, 1039, 1092, 1013, 1028, 1100, 1029, 1030, 1064,
	992, 1048, 225, 1026, 0, 1080, 984, 1016, 1017, 986,
	1023, 987, 1014, 1041, 169, 1012, 1051, 195, 1098, 0,
	0, 254, 209, 0, 0, 1044, 1082, 1046, 1069, 1038,
	1065, 1000, 1058, 1093, 1027, 1062, 1094, 0, 0, 0,
	0, 0, 792, 793, 794, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 1061, 1087, 1025, 0, 154,
	1091, 1045, 1063, 0, 0, 985, 1059, 0, 990, 993,
	1099, 1085, 1020, 1021, 0, 0, 0, 0, 0, 0,
	0, 1042, 1047, 1066, 1035, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1018, 0, 1055, 0, 0, 0,
	995, 991, 0, 1040, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 1131, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 1089, 298, 163, 289, 994, 281, 147, 1126,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	1110, 1111, 1112, 1113, 1114, 1122, 1123, 0, 1127, 1128,
	1129, 999, 0, 1019, 1067, 0, 983, 1075, 1083, 1037,
	283, 1086, 1034, 1033, 1117, 0, 1116, 258, 1118, 1119,
	194, 1081, 1015, 1024, 299, 1022, 244, 227, 1088, 1054,
	1130, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	1115, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1124, 0, 1125, 295, 176, 982, 278,
	0, 223, 1078, 988, 998, 996, 1031, 1056, 1057, 219,
	294, 1071, 1074, 1072, 1101, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 989, 0, 255, 276, 288,
	279, 1032, 1006, 1043, 287, 1009, 1007, 1070, 1008, 1060,
	1103, 213, 214, 215, 216, 180, 0, 156, 1052, 1036,
	1104, 1105, 1106, 1107, 1108, 1109, 1011, 1084, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 1076, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 1005, 1010, 1004, 1049, 1050, 1095, 1096, 1097,
	1068, 997, 1079, 1001, 1003, 1002, 0, 0, 0, 0,
	0, 0, 0, 1498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1073, 0, 1053, 138, 0,
	196, 1102, 237, 174, 916, 915, 925, 926, 918, 919,
	920, 921, 922, 923, 924, 917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 687, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 0,
	1120, 1121, 291, 292, 293, 277, 658, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	1827, 0, 0, 701, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 0, 0, 0, 601, 693,
	692, 667, 676, 0, 0, 151, 668, 0, 675, 669,
	673, 672, 670, 671, 0, 638, 0, 0, 0, 0,
	0, 0, 599, 655, 0, 659, 916, 915, 925, 926,
	918, 919, 920, 921, 922, 923, 924, 917, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 653, 0, 0,
	0, 0, 688, 0, 654, 0, 0, 690, 0, 677,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 1513, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 674, 686, 644,
	163, 642, 685, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 916,
	915, 925, 926, 918, 919, 920, 921, 922, 923, 924,
	917, 0, 0, 683, 0, 0, 283, 0, 0, 700,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	645, 0, 244, 227, 710, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	1310, 1312, 295, 176, 0, 278, 698, 223, 709, 694,
	695, 696, 699, 702, 703, 640, 643, 704, 706, 708,
	711, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 641, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 689, 213, 214, 215,
	216, 639, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 717, 697,
	716, 718, 719, 715, 720, 721, 705, 660, 0, 713,
	712, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 117, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 0, 0, 291, 292,
	293, 277, 93, 0, 687, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 658, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 701,
	707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	651, 0, 0, 0, 601, 693, 692, 667, 676, 0,
	0, 151, 668, 0, 675, 669, 673, 672, 670, 671,
	0, 638, 0, 0, 0, 0, 0, 0, 599, 655,
	0, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 653, 0, 0, 0, 0, 688, 0,
	654, 0, 0, 690, 0, 677, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 674, 686, 644, 163, 642, 685, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 683,
	0, 0, 283, 0, 0, 700, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 645, 0, 244, 227,
	710, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 698, 223, 709, 694, 695, 696, 699, 702,
	703, 640, 643, 704, 706, 708, 711, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 641, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 689, 213, 214, 215, 216, 639, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 717, 697, 716, 718, 719, 715,
	720, 721, 705, 660, 0, 713, 712, 714, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 68, 237, 174, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 117, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 687, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	658, 0, 0, 0, 169, 851, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 701, 707, 0,
	0, 0, 0, 0, 0, 847, 0, 0, 651, 0,
	0, 0, 601, 693, 692, 667, 676, 0, 0, 151,
	668, 0, 675, 669, 673, 672, 670, 671, 0, 638,
	0, 0, 0, 0, 0, 0, 599, 655, 0, 659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	652, 653, 0, 0, 0, 0, 688, 0, 654, 0,
	0, 848, 0, 677, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 674, 686, 644, 163, 642, 685, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 683, 0, 0,
	283, 0, 0, 700, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 645, 0, 244, 227, 710, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	698, 223, 709, 694, 695, 696, 699, 702, 703, 640,
	643, 704, 706, 708, 711, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	641, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	689, 213, 214, 215, 216, 639, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 717, 697, 716, 718, 719, 715, 720, 721,
	705, 660, 0, 713, 712, 714, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 603, 604, 605, 606, 607, 608,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 117,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	687, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 658, 0,
	0, 0, 169, 2244, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 701, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 651, 0, 0, 0,
	601, 693, 692, 667, 676, 0, 0, 151, 668, 0,
	675, 669, 673, 672, 670, 671, 0, 638, 0, 0,
	0, 0, 0, 0, 599, 655, 0, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 653,
	0, 0, 0, 0, 688, 0, 654, 0, 0, 690,
	0, 677, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 674,
	686, 644, 163, 642, 685, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 683, 0, 0, 283, 0,
	0, 700, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 645, 0, 244, 227, 710, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 698, 223,
	709, 694, 695, 696, 699, 702, 703, 640, 643, 704,
	706, 708, 711, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 641, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 689, 213,
	214, 215, 216, 639, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	717, 697, 716, 718, 719, 715, 720, 721, 705, 660,
	0, 713, 712, 714, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 117, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 687, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 658, 0, 0, 0,
	169, 851, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 701, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 0, 0, 0, 601, 693,
	692, 667, 676, 0, 0, 151, 668, 0, 675, 669,
	673, 672, 670, 671, 0, 638, 0, 0, 0, 0,
	0, 0, 599, 655, 0, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 653, 0, 0,
	0, 0, 688, 0, 654, 0, 0, 690, 0, 677,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 674, 686, 644,
	163, 642, 685, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 283, 0, 0, 700,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	645, 0, 244, 227, 710, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 698, 223, 709, 694,
	695, 696, 699, 702, 703, 640, 643, 704, 706, 708,
	711, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 641, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 689, 213, 214, 215,
	216, 639, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 717, 697,
	716, 718, 719, 715, 720, 721, 705, 660, 0, 713,
	712, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 117, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 0, 0, 291, 292,
	293, 277, 687, 0, 0, 1485, 0, 0, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	658, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 701, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 651, 0,
	0, 0, 601, 693, 692, 667, 676, 0, 0, 151,
	668, 0, 675, 669, 673, 672, 670, 671, 0, 638,
	0, 0, 0, 0, 0, 0, 599, 655, 0, 659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	652, 653, 0, 0, 0, 0, 688, 0, 654, 0,
	0, 690, 0, 677, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 674, 686, 644, 163, 642, 685, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 683, 0, 0,
	283, 0, 0, 700, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 645, 0, 244, 227, 710, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	698, 223, 709, 694, 695, 696, 699, 702, 703, 640,
	643, 704, 706, 708, 711, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	641, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	689, 213, 214, 215, 216, 639, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 717, 697, 716, 718, 719, 715, 720, 721,
	705, 660, 0, 713, 712, 714, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 603, 604, 605, 606, 607, 608,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 117,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	687, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 0, 0, 0, 658, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 701, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 651, 0, 0, 0,
	601, 693, 692, 667, 676, 0, 0, 151, 668, 0,
	675, 669, 673, 672, 670, 671, 0, 638, 0, 0,
	0, 0, 0, 0, 599, 655, 0, 659, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 653,
	596, 0, 0, 0, 688, 0, 654, 0, 0, 690,
	0, 677, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 674,
	686, 644, 163, 642, 685, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 683, 0, 0, 283, 0,
	0, 700, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 645, 0, 244, 227, 710, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 698, 223,
	709, 694, 695, 696, 699, 702, 703, 640, 643, 704,
	706, 708, 711, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 641, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 689, 213,
	214, 215, 216, 639, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	717, 697, 716, 718, 719, 715, 720, 721, 705, 660,
	0, 713, 712, 714, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 117, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 687, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 658, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 701, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 651, 0, 0, 0, 601, 693,
	692, 667, 676, 0, 0, 151, 668, 0, 675, 669,
	673, 672, 670, 671, 0, 638, 0, 0, 0, 0,
	0, 0, 599, 655, 0, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 653, 0, 0,
	0, 0, 688, 0, 654, 0, 0, 690, 0, 677,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 674, 686, 644,
	163, 642, 685, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 283, 0, 0, 700,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	645, 0, 244, 227, 710, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 698, 223, 709, 694,
	695, 696, 699, 702, 703, 640, 643, 704, 706, 708,
	711, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 641, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 689, 213, 214, 215,
	216, 639, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 717, 697,
	716, 718, 719, 715, 720, 721, 705, 660, 0, 713,
	712, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 117, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 687, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 225, 0, 0, 0,
	1255, 0, 0, 0, 658, 0, 0, 0, 169, 0,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 701, 707, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 651, 0, 0, 0, 601, 693, 692, 667,
	676, 0, 0, 151, 668, 0, 675, 669, 673, 672,
	670, 671, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 655, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 653, 0, 0, 0, 0,
	688, 0, 654, 0, 0, 690, 0, 677, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 674, 686, 644, 163, 642,
	685, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 683, 0, 0, 283, 0, 0, 700, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 645, 0,
	244, 227, 710, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 1256, 1257, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 698, 223, 709, 694, 695, 696,
	699, 702, 703, 640, 643, 704, 706, 708, 711, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 641, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 689, 213, 214, 215, 216, 639,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 717, 697, 716, 718,
	719, 715, 720, 721, 705, 660, 0, 713, 712, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 117, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 687, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 658, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 701,
	707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	651, 0, 0, 0, 601, 693, 692, 667, 676, 0,
	0, 151, 668, 0, 675, 669, 673, 672, 670, 671,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 655,
	0, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 653, 0, 0, 0, 0, 688, 0,
	654, 0, 0, 690, 0, 677, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 674, 686, 644, 163, 642, 685, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 683,
	0, 0, 283, 0, 0, 700, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 645, 0, 244, 227,
	710, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 698, 223, 709, 694, 695, 696, 699, 702,
	703, 640, 643, 704, 706, 708, 711, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 641, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 689, 213, 214, 215, 216, 639, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 717, 697, 716, 718, 719, 715,
	720, 721, 705, 660, 0, 713, 712, 714, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 0, 237, 174, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 612, 613, 614, 615, 616,
	617, 117, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 687, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
	658, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 701, 707, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 693, 692, 667, 676, 0, 0, 151,
	668, 0, 675, 669, 673, 672, 670, 671, 0, 638,
	0, 0, 0, 0, 0, 0, 599, 655, 0, 659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	652, 653, 0, 0, 0, 0, 688, 0, 654, 0,
	0, 690, 0, 677, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 674, 686, 644, 163, 642, 685, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 683, 0, 0,
	283, 0, 0, 700, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 645, 0, 244, 227, 710, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	698, 223, 709, 694, 695, 696, 699, 702, 703, 640,
	643, 704, 706, 708, 711, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	641, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	689, 213, 214, 215, 216, 639, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 717, 697, 716, 718, 719, 715, 720, 721,
	705, 660, 0, 713, 712, 714, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 603, 604, 605, 606, 607, 608,
	609, 610, 611, 612, 613, 614, 615, 616, 617, 117,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	0, 0, 291, 292, 293, 277, 339, 0, 338, 342,
	334, 0, 0, 0, 0, 0, 0, 0, 225, 0,
	0, 0, 330, 0, 0, 0, 0, 0, 0, 0,
	169, 0, 349, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 352, 0,
	0, 353, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 338,
	342, 334, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 332, 331, 335,
	0, 0, 0, 0, 0, 337, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 341, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 333, 260, 282, 238, 357, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 332, 331,
	335, 0, 0, 0, 0, 0, 337, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 0, 223, 341, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 763, 0, 0, 336, 340, 343, 229, 344,
	345, 0, 0, 346, 347, 348, 0, 0, 350, 351,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 180, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 340, 764, 0,
	344, 765, 0, 0, 346, 347, 348, 0, 0, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 0, 0, 291, 292,
	293, 277, 339, 0, 338, 342, 334, 0, 0, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 330, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 349, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 0, 353, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 332, 331, 335, 0, 0, 0, 0,
	0, 337, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 341, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 333, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 336, 340, 343, 229, 344, 345, 0, 0, 346,
	347, 348, 0, 0, 350, 351, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 0, 237, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 0, 0, 291, 292, 293, 277, 93, 0,
	26, 83, 67, 0, 0, 0, 0, 0, 0, 0,
	225, 306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	99, 0, 0, 0, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	0, 298, 163, 289, 0, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 310, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 307, 309, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 68,
	237, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 225, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 1564, 1567, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1568, 283, 0, 0, 0,
	1561, 0, 1560, 258, 1562, 1565, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 1566, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 180, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 225, 0, 291, 292,
	293, 277, 0, 878, 0, 0, 0, 0, 169, 0,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 879,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 874, 875, 876, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 0, 0, 298, 163, 289,
	0, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 0, 169, 415, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 423, 424, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 398, 281,
	147, 397, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	414, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 874, 875,
	876, 873, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 417, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	425, 420, 421, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 422, 177, 0, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 0, 237, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 93, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 0, 965, 0, 99, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 1290, 0, 1287, 0,
	0, 154, 1289, 1286, 1288, 1292, 1293, 0, 0, 0,
	1291, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1283, 1284, 1285, 1297, 1298, 1299, 1300, 1301, 1302, 1295,
	1296, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 68, 237, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 225, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 423, 424, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 398, 281, 147, 397,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 425, 420,
	421, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	422, 177, 0, 1294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	0, 0, 291, 292, 293, 277, 225, 0, 0, 0,
	558, 0, 0, 0, 0, 0, 0, 0, 169, 559,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 352, 0, 0, 353,
	0, 0, 0, 151, 0, 0, 0, 0, 1290, 0,
	1287, 0, 0, 154, 1289, 1286, 1288, 1292, 1293, 0,
	0, 0, 1291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 0, 0, 298, 163, 289,
	0, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 1275, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 1297, 1298, 1299, 1300, 1301,
	1302, 1295, 1296, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 560, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 0, 0, 291, 292, 293, 277,
	225, 0, 0, 0, 839, 0, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 353, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	0, 298, 163, 289, 0, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 838, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 225, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 0,
	169, 580, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 578, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 180, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 225, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 0, 169, 575,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 578,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 577, 0, 0, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 0, 0, 298, 163, 289,
	0, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2175, 0, 99, 693, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 0, 237, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 225, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 578, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 577, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 0, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	225, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 578, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1755,
	0, 0, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	0, 298, 163, 289, 0, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 225, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 578, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 1539, 213, 214, 215,
	216, 180, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 225, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 0, 169, 1231,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 0, 0, 578,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 0, 0, 298, 163, 289,
	0, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 693, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 0, 237, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 225, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1902, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 0, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	225, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 578, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	0, 298, 163, 289, 0, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 225, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1592, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 180, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 225, 0, 291, 292,
	293, 277, 0, 0, 0, 0, 0, 0, 169, 0,
	0, 195, 0, 0, 0, 254, 209, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 830, 0, 0, 0, 99, 0, 0, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	259, 273, 152, 250, 286, 157, 257, 148, 224, 246,
	0, 0, 145, 271, 256, 206, 189, 190, 144, 0,
	241, 167, 181, 164, 222, 0, 0, 298, 163, 289,
	0, 281, 147, 0, 280, 221, 268, 272, 207, 201,
	146, 270, 205, 200, 193, 171, 185, 233, 199, 234,
	186, 211, 210, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 258, 0, 0, 194, 0, 0, 0, 299, 0,
	244, 227, 0, 0, 0, 242, 197, 269, 235, 274,
	260, 282, 238, 236, 139, 261, 166, 208, 149, 150,
	162, 168, 170, 172, 173, 217, 218, 230, 249, 262,
	263, 264, 165, 158, 243, 159, 183, 160, 140, 251,
	161, 141, 231, 267, 0, 179, 239, 204, 142, 203,
	232, 266, 265, 290, 296, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 176, 0, 278, 0, 223, 0, 0, 0, 0,
	0, 0, 0, 219, 294, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 188, 229, 0, 248, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 276, 288, 279, 0, 0, 0, 287, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 180,
	0, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 175, 182, 0, 184, 155, 228, 178, 285,
	191, 0, 220, 187, 252, 192, 198, 240, 284, 226,
	245, 153, 275, 253, 202, 177, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 196, 0, 237, 174, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 135, 136, 137, 225, 0, 291, 292, 293, 277,
	0, 0, 0, 0, 0, 0, 169, 0, 0, 195,
	0, 0, 0, 254, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 0, 0, 0, 0, 0,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 259, 273,
	152, 250, 286, 157, 257, 148, 224, 246, 0, 0,
	145, 271, 256, 206, 189, 190, 144, 0, 241, 167,
	181, 164, 222, 0, 0, 298, 163, 289, 0, 281,
	147, 0, 280, 221, 268, 272, 207, 201, 146, 270,
	205, 200, 193, 171, 185, 233, 199, 234, 186, 211,
	210, 212, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 194, 0, 0, 0, 299, 0, 244, 227,
	0, 0, 0, 242, 197, 269, 235, 274, 260, 282,
	238, 236, 139, 261, 166, 208, 149, 150, 162, 168,
	170, 172, 173, 217, 218, 230, 249, 262, 263, 264,
	165, 158, 243, 159, 183, 160, 140, 251, 161, 141,
	231, 267, 0, 179, 239, 204, 142, 203, 232, 266,
	265, 290, 296, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 176,
	0, 278, 0, 223, 0, 0, 0, 0, 0, 0,
	0, 219, 294, 0, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 188, 229, 0, 248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 255,
	276, 288, 279, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 180, 0, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 182, 0, 184, 155, 228, 178, 285, 191, 0,
	220, 187, 252, 192, 198, 240, 284, 226, 245, 153,
	275, 253, 202, 177, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 196, 0, 237, 174, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 225, 0, 291, 292, 293, 277, 0, 0,
	0, 0, 0, 0, 169, 0, 0, 195, 0, 0,
	0, 254, 209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 0, 0, 0, 0, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1246, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 259, 273, 152, 250,
	286, 157, 257, 148, 224, 246, 0, 0, 145, 271,
	256, 206, 189, 190, 144, 0, 241, 167, 181, 164,
	222, 0, 0, 298, 163, 289, 0, 281, 147, 0,
	280, 221, 268, 272, 207, 201, 146, 270, 205, 200,
	193, 171, 185, 233, 199, 234, 186, 211, 210, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	194, 0, 0, 0, 299, 0, 244, 227, 0, 0,
	0, 242, 197, 269, 235, 274, 260, 282, 238, 236,
	139, 261, 166, 208, 149, 150, 162, 168, 170, 172,
	173, 217, 218, 230, 249, 262, 263, 264, 165, 158,
	243, 159, 183, 160, 140, 251, 161, 141, 231, 267,
	0, 179, 239, 204, 142, 203, 232, 266, 265, 290,
	296, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 176, 0, 278,
	0, 223, 0, 0, 0, 0, 0, 0, 0, 219,
	294, 0, 0, 0, 0, 247, 0, 0, 0, 0,
	0, 188, 229, 0, 248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 276, 288,
	279, 0, 0, 0, 287, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 180, 0, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 182,
	0, 184, 155, 228, 178, 285, 191, 0, 220, 187,
	252, 192, 198, 240, 284, 226, 245, 153, 275, 253,
	202, 177, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	196, 0, 237, 174, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	225, 0, 291, 292, 293, 277, 0, 0, 0, 0,
	0, 0, 169, 0, 0, 195, 0, 0, 0, 254,
	209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 0, 1244, 0, 0, 0, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 259, 273, 152, 250, 286, 157,
	257, 148, 224, 246, 0, 0, 145, 271, 256, 206,
	189, 190, 144, 0, 241, 167, 181, 164, 222, 0,
	0, 298, 163, 289, 0, 281, 147, 0, 280, 221,
	268, 272, 207, 201, 146, 270, 205, 200, 193, 171,
	185, 233, 199, 234, 186, 211, 210, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 258, 0, 0, 194, 0,
	0, 0, 299, 0, 244, 227, 0, 0, 0, 242,
	197, 269, 235, 274, 260, 282, 238, 236, 139, 261,
	166, 208, 149, 150, 162, 168, 170, 172, 173, 217,
	218, 230, 249, 262, 263, 264, 165, 158, 243, 159,
	183, 160, 140, 251, 161, 141, 231, 267, 0, 179,
	239, 204, 142, 203, 232, 266, 265, 290, 296, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 295, 176, 0, 278, 0, 223,
	0, 0, 0, 0, 0, 0, 0, 219, 294, 0,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 188,
	229, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 276, 288, 279, 0,
	0, 0, 287, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 180, 0, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 175, 182, 0, 184,
	155, 228, 178, 285, 191, 0, 220, 187, 252, 192,
	198, 240, 284, 226, 245, 153, 275, 253, 202, 177,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 196, 0,
	237, 174, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 132, 133, 134, 135, 136, 137, 225, 0,
	291, 292, 293, 277, 0, 0, 0, 0, 0, 0,
	169, 0, 0, 195, 0, 0, 0, 254, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 352, 0,
	0, 353, 0, 0, 0, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 259, 273, 152, 250, 286, 157, 257, 148,
	224, 246, 0, 0, 145, 271, 256, 206, 189, 190,
	144, 0, 241, 167, 181, 164, 222, 0, 0, 298,
	163, 289, 0, 281, 147, 0, 280, 221, 268, 272,
	207, 201, 146, 270, 205, 200, 193, 171, 185, 233,
	199, 234, 186, 211, 210, 212, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 258, 0, 0, 194, 0, 0, 0,
	299, 0, 244, 227, 0, 0, 0, 242, 197, 269,
	235, 274, 260, 282, 238, 236, 139, 261, 166, 208,
	149, 150, 162, 168, 170, 172, 173, 217, 218, 230,
	249, 262, 263, 264, 165, 158, 243, 159, 183, 160,
	140, 251, 161, 141, 231, 267, 0, 179, 239, 204,
	142, 203, 232, 266, 265, 290, 296, 297, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 295, 176, 0, 278, 0, 223, 0, 0,
	0, 0, 0, 0, 0, 219, 294, 0, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 188, 229, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 255, 276, 288, 279, 0, 0, 0,
	287, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 180, 0, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 182, 0, 184, 155, 228,
	178, 285, 191, 0, 220, 187, 252, 192, 198, 240,
	284, 226, 245, 153, 275, 253, 202, 177, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 196, 0, 237, 174,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 1173, 0, 291, 292,
	293, 277, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 225, 0, 291, 292, 293, 277, 0, 0, 0,
	0, 0, 0, 169, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 0, 0, 0, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 0, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 1160, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 225,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 0,
	0, 169, 0, 0, 195, 0, 0, 0, 254, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	0, 0, 578, 0, 0, 0, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 143, 259, 273, 152, 250, 286, 157, 257,
	148, 224, 246, 0, 0, 145, 271, 256, 206, 189,
	190, 144, 0, 241, 167, 181, 164, 222, 0, 0,
	298, 163, 289, 0, 281, 147, 0, 280, 221, 268,
	272, 207, 201, 146, 270, 205, 200, 193, 171, 185,
	233, 199, 234, 186, 211, 210, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 258, 0, 0, 194, 0, 0,
	0, 299, 0, 244, 227, 0, 0, 0, 242, 197,
	269, 235, 274, 260, 282, 238, 236, 139, 261, 166,
	208, 149, 150, 162, 168, 170, 172, 173, 217, 218,
	230, 249, 262, 263, 264, 165, 158, 243, 159, 183,
	160, 140, 251, 161, 141, 231, 267, 0, 179, 239,
	204, 142, 203, 232, 266, 265, 290, 296, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 176, 0, 278, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 219, 294, 0, 0,
	0, 0, 247, 0, 0, 0, 0, 0, 188, 229,
	0, 248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 255, 276, 288, 820, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 180, 0, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 182, 0, 184, 155,
	228, 178, 285, 191, 0, 220, 187, 252, 192, 198,
	240, 284, 226, 245, 153, 275, 253, 202, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 196, 0, 237,
	174, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 225, 0, 291,
	292, 293, 277, 0, 0, 0, 0, 0, 0, 169,
	0, 0, 195, 0, 0, 0, 254, 209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 0, 0,
	0, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 259, 273, 152, 250, 286, 157, 257, 148, 224,
	246, 0, 0, 145, 271, 256, 206, 189, 190, 144,
	0, 241, 167, 181, 164, 222, 0, 0, 298, 163,
	289, 0, 281, 147, 0, 280, 221, 268, 272, 207,
	201, 146, 270, 205, 200, 193, 171, 185, 233, 199,
	234, 186, 211, 210, 212, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 258, 0, 0, 194, 0, 0, 0, 299,
	0, 244, 227, 0, 0, 0, 242, 197, 269, 235,
	274, 260, 282, 238, 236, 139, 261, 166, 208, 149,
	150, 162, 168, 170, 172, 173, 217, 218, 230, 249,
	262, 263, 264, 165, 158, 243, 159, 183, 160, 140,
	251, 161, 141, 231, 267, 0, 179, 239, 204, 142,
	203, 232, 266, 265, 290, 296, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 176, 0, 278, 0, 223, 0, 0, 0,
	0, 0, 0, 0, 219, 294, 0, 0, 0, 0,
	247, 0, 0, 0, 0, 0, 188, 229, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 276, 288, 279, 0, 0, 0, 287,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	180, 0, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 182, 0, 184, 155, 228, 178,
	285, 191, 0, 220, 187, 252, 192, 198, 240, 284,
	226, 245, 153, 275, 253, 202, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	381, 0, 0, 138, 0, 196, 0, 237, 174, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 135, 136, 137, 225, 0, 291, 292, 293,
	277, 0, 0, 0, 0, 0, 96, 169, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 0, 0, 298, 163, 289, 0,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 0, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 180, 0,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	135, 136, 137, 225, 0, 291, 292, 293, 277, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 0, 0, 0, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 225, 0, 291, 292, 293, 277, 0, 1213, 0,
	0, 0, 0, 169, 0, 0, 195, 0, 0, 0,
	254, 209, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 792, 793, 794, 1215, 0, 0, 0, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 143, 259, 273, 152, 250, 286,
	157, 257, 148, 224, 246, 0, 0, 145, 271, 256,
	206, 189, 190, 144, 0, 241, 167, 181, 164, 222,
	0, 0, 298, 163, 289, 0, 281, 147, 0, 280,
	221, 268, 272, 207, 201, 146, 270, 205, 200, 193,
	171, 185, 233, 199, 234, 186, 211, 210, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 258, 0, 0, 194,
	0, 0, 0, 299, 0, 244, 227, 0, 0, 0,
	242, 197, 269, 235, 274, 260, 282, 238, 236, 139,
	261, 166, 208, 149, 150, 162, 168, 170, 172, 173,
	217, 218, 230, 249, 262, 263, 264, 165, 158, 243,
	159, 183, 160, 140, 251, 161, 141, 231, 267, 0,
	179, 239, 204, 142, 203, 232, 266, 265, 290, 296,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 295, 176, 0, 278, 0,
	223, 0, 0, 0, 0, 0, 0, 0, 219, 294,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	188, 229, 0, 248, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 255, 276, 288, 279,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 180, 0, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 182, 0,
	184, 155, 228, 178, 285, 191, 0, 220, 187, 252,
	192, 198, 240, 284, 226, 245, 153, 275, 253, 202,
	177, 0, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 169, 0, 0, 195, 0,
	0, 0, 254, 209, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 196,
	0, 237, 174, 792, 793, 794, 1215, 0, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 292, 293, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 259, 273, 152,
	250, 286, 157, 257, 148, 224, 246, 0, 0, 145,
	271, 256, 206, 189, 190, 144, 0, 241, 167, 181,
	164, 222, 0, 0, 298, 163, 289, 0, 281, 147,
	0, 280, 221, 268, 272, 207, 201, 146, 270, 205,
	200, 193, 171, 185, 233, 199, 234, 186, 211, 210,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 258, 0,
	0, 194, 0, 0, 0, 299, 0, 244, 227, 0,
	0, 0, 242, 197, 269, 235, 274, 260, 282, 238,
	236, 139, 261, 166, 208, 149, 150, 162, 168, 170,
	172, 173, 217, 218, 230, 249, 262, 263, 264, 165,
	158, 243, 159, 183, 160, 140, 251, 161, 141, 231,
	267, 0, 179, 239, 204, 142, 203, 232, 266, 265,
	290, 296, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 295, 176, 0,
	278, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	219, 294, 0, 0, 0, 0, 247, 0, 0, 0,
	0, 0, 188, 229, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 255, 276,
	288, 279, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 180, 0, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 175,
	182, 0, 184, 155, 228, 178, 285, 191, 0, 220,
	187, 252, 192, 198, 240, 284, 226, 245, 153, 275,
	253, 202, 177, 0, 0, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	195, 0, 0, 0, 254, 209, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 196, 0, 237, 174, 792, 793, 794, 0, 0,
	0, 0, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 291, 292, 293, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 259,
	273, 152, 250, 286, 157, 257, 148, 224, 246, 0,
	0, 145, 271, 256, 206, 189, 190, 144, 0, 241,
	167, 181, 164, 222, 0, 0, 298, 163, 289, 0,
	281, 147, 0, 280, 221, 268, 272, 207, 201, 146,
	270, 205, 200, 193, 171, 185, 233, 199, 234, 186,
	211, 210, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	258, 0, 0, 194, 0, 0, 0, 299, 0, 244,
	227, 0, 0, 0, 242, 197, 269, 235, 274, 260,
	282, 238, 236, 139, 261, 166, 208, 149, 150, 162,
	168, 170, 172, 173, 217, 218, 230, 249, 262, 263,
	264, 165, 158, 243, 159, 183, 160, 140, 251, 161,
	141, 231, 267, 0, 179, 239, 204, 142, 203, 232,
	266, 265, 290, 296, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	176, 0, 278, 1867, 223, 0, 0, 0, 0, 0,
	0, 0, 219, 294, 0, 0, 0, 0, 247, 0,
	0, 0, 0, 0, 188, 229, 1652, 248, 0, 1172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 276, 288, 279, 0, 0, 0, 287, 0, 0,
	0, 0, 2260, 0, 213, 214, 215, 216, 180, 0,
	156, 0, 0, 1849, 0, 0, 0, 0, 0, 0,
	0, 175, 182, 0, 184, 155, 228, 178, 285, 191,
	0, 220, 187, 252, 192, 198, 240, 284, 226, 245,
	153, 275, 253, 202, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 26, 83, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 1640, 0, 0, 77, 0, 0, 0, 0,
	0, 138, 0, 196, 0, 237, 174, 0, 0, 1659,
	1663, 1665, 1667, 1669, 1670, 1672, 49, 1676, 1673, 1674,
	1675, 90, 0, 1654, 1655, 1656, 1657, 1638, 1639, 1660,
	0, 1641, 0, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1658, 0, 291, 292, 293, 277, 0,
	0, 1662, 1664, 1666, 1668, 1671, 0, 0, 0, 0,
	0, 0, 0, 1853, 0, 0, 0, 0, 0, 0,
	1867, 0, 0, 0, 1857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1653, 0, 0, 84, 85,
	0, 86, 87, 1867, 1846, 0, 1172, 0, 1848, 1850,
	1852, 0, 1854, 1855, 1856, 1858, 1859, 1860, 1862, 1863,
	1864, 1865, 0, 0, 0, 0, 0, 0, 0, 1172,
	1932, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1849, 0, 0, 0, 0, 0, 0, 0, 1868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1849, 66, 82, 91, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1866, 0, 81, 76, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1845,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1861, 0, 0, 0, 0, 0,
	0, 1851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1853, 0, 0, 0, 0, 0, 0, 0, 57, 0,
	0, 1857, 80, 0, 58, 0, 0, 0, 0, 0,
	0, 0, 0, 1853, 0, 0, 0, 0, 0, 0,
	1661, 1846, 0, 0, 1857, 1848, 1850, 1852, 0, 1854,
	1855, 1856, 1858, 1859, 1860, 1862, 1863, 1864, 1865, 0,
	0, 59, 0, 0, 1846, 0, 0, 0, 1848, 1850,
	1852, 0, 1854, 1855, 1856, 1858, 1859, 1860, 1862, 1863,
	1864, 1865, 0, 0, 0, 1868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 0, 1845, 0, 0, 0,
	0, 0, 1866, 0, 0, 0, 0, 0, 0, 0,
	0, 1861, 0, 0, 0, 0, 0, 0, 1851, 1845,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1861, 0, 0, 0, 0, 0,
	0, 1851,
}

var yyPact = [...]int{
	22846, -1000, -301, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 20866, -1000, -1000, 1478,
	-1000, 8571, 21304, 55, 21304, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 222, -1000, 21304,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8115, 7659, 137,
	-1000, 1802, -1000, -1000, -1000, -1000, 143, 260, 20428, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 337, -42, 260, 339, 343, 366, 366, 9885, 1802,
	170, 22, -1000, 751, 22846, 178, 21304, -1000, 386, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1802, 1802, 21304, -67, 510, -1000, 202,
	186, 243, 384, -1000, -1000, -1000, -1000, 1812, -1000, 21304,
	1539, 21304, -1000, 1293, 1430, -1000, -1000, 1612, -1000, 105,
	9, -26, 91, -1000, -1000, 158, -1000, -1000, -1000, -1000,
	-1000, 40, -1000, 1, -1000, -13, -1000, -1000, -1000, -120,
	-1000, -1000, -1000, -1000, -1000, 1235, 348, 1624, -162, 1687,
	1753, 1487, 1792, 1744, -5, 198, 198, 218, 198, -1000,
	-1000, -1000, -1000, -1000, -1000, 290, -1000, -1000, -1000, -1000,
	1402, 21304, -1000, 1479, 421, 421, 610, 166, -1000, -1000,
	-114, -137, 421, 421, -137, -3, -1000, 1743, 1738, -1000,
	-1000, -1000, -1000, -1000, -1000, 199, 204, -1000, -182, -1000,
	333, -1000, 308, -1000, 11217, 153, 1405, 541, -1000, 448,
	21304, 21304, 21304, 448, 448, 12537, 12099, 382, -1000, 1753,
	1487, -1000, 1211, 1138, 1487, 199, 199, 199, 199, 199,
	21304, 5411, 5411, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 217, 1611, -1000, 21304, 1753, 1687, 1753, -1000, 379,
	800, 877, -1000, -1000, 202, 1382, -1000, 597, -1000, -1000,
	-1000, -1000, 21304, 176, -1000, 856, 1608, 117, 7740, 16041,
	18669, 21304, 16041, -1000, -1000, -1000, -1000, -1000, -125, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 117,
	16041, 16041, -76, -1000, -1000, -287, 1687, 5859, -1000, -1000,
	5859, -1000, -1000, 215, 198, -1000, 16041, 608, 18669, 842,
	21304, 204, -1000, 21304, 1402, 1725, 21304, 1803, 6755, 1803,
	21304, -1000, -1000, 421, 421, -1000, 610, 610, -1000, -1000,
	-128, 1803, 1803, -105, 21304, 198, -1000, -1000, 19990, 1707,
	16917, -1000, -139, 325, 313, 319, -1000, -1000, -178, -1000,
	-1000, 1330, 11661, 10773, 220, 16041, 3613, -1000, -1000, 448,
	448, 448, 3613, 3613, 394, -1000, -1000, -1000, -1000, -1000,
	-1000, 21304, 1687, -1000, -1000, -1000, -1000, -1000, 16041, 18669,
	21304, 21304, 22466, -1000, 1407, -1000, -1000, 9447, 378, 5859,
	1090, 1607, -1000, -1000, 1606, 1605, 1601, 1586, 1585, 1582,
	1581, -1000, 1532, -1000, -1000, 1580, 1579, 1578, 1577, -1000,
	-1000, -1000, -1000, -1000, -1000, 1569, -1000, -1000, -1000, 1567,
	1532, -1000, -1000, 1566, 1565, 1559, 1558, 1552, -1000, -1000,
	-1000, -1000, -1000, -1000, 876, 869, 1855, -1000, -1000, -1000,
	-1000, 3165, 6755, 6755, 6755, 6755, -1000, -1000, 1511, 5859,
	1549, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7203, -1000, 1546,
	1544, 1543, 1542, 1541, 1532, 1527, 868, 1526, 1524, 1523,
	6755, 1522, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1407, -1000, -285, -1000, 10335, 21304, 21304, -1000,
	1687, -1000, 1687, 2273, -1000, 1750, -1000, 202, 89, -1000,
	-1000, -1000, -1000, -1000, -1000, 375, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1389, -1000, 21304, 568, -1000,
	-1000, -1000, -1000, -1000, 1, -13, 1312, -1000, -48, 104,
	-1000, 1376, -1000, -1000, -1000, 568, 1312, 208, 865, 862,
	-1000, 1096, 371, 1385, -1000, 929, 19552, 21304, 238, 1706,
	1330, 1531, -1000, -1000, -1000, 1672, 19114, -1000, 1517, 1368,
	-1000, -1000, 5859, -1000, -1000, 1803, 1803, 1803, 421, 22466,
	610, 21304, 610, -1000, -1000, 610, -1000, 368, 21304, 238,
	1515, -1000, 1747, 1342, -1000, -1000, -1000, -1000, 1720, 21742,
	170, -1000, -1000, 322, 301, 330, 18669, 207, -1000, -1000,
	1330, -1000, -1000, -1000, 1514, 496, -1000, -1000, 6755, -1000,
	922, -1000, 3613, 3613, 3613, -1000, -1000, 14727, -1000, -1000,
	1312, 1330, 1623, 1384, -1000, -1000, -1000, -1000, 1803, 5411,
	-1000, 16917, -1000, 5859, 5859, 5859, 5859, -1000, 18231, -1000,
	17793, -1000, 253, 6307, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5859, 1739, 1739, 1739, 5859, 689, 5859, 5859, -1000,
	723, 11001, 1739, 1739, 1739, 1739, 1739, -1000, 2709, 1739,
	1739, 1739, 1739, -1000, -1000, 6755, 6755, 6755, 6755, 6755,
	6755, 6755, 6755, 6755, 6755, 6755, 6755, 1509, 692, 6755,
	6755, 6755, 1138, 1548, 1366, -1000, -1000, -1000, -1000, -1000,
	587, 922, 5859, 10119, 5859, 5859, 5859, -1000, 1194, 1176,
	-1000, -1000, 5859, -1000, 5859, 6755, 5859, -1000, 1739, 1803,
	1252, -1000, 1513, -1000, 1356, 1668, -1000, 367, 1339, -1000,
	489, 1354, -1000, -1000, -1000, -1000, 365, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -73, -1000, -1000, 21304, 856, 1299, 1810, 364,
	363, 16041, -1000, 163, 16041, -1000, -1000, 21304, 203, 16041,
	-8, -142, 5859, 5859, 21304, 5859, -1000, -1000, -1000, 1479,
	603, 1512, -236, -1000, -28, -1000, 1621, 97, -1000, 1672,
	-1000, 312, -1000, 21304, 1372, -1000, 356, 22846, -1000, 21304,
	922, -1000, -1000, -1000, 1803, -1000, 421, -1000, 421, 610,
	21304, -1000, -1000, -236, 1170, 21304, 16917, 16917, 16917, 16917,
	-1000, 1643, 1642, -1000, 1636, 1635, 1665, 21304, 16917, 21304,
	-1000, -1000, -1000, 22104, -1000, -1000, -1000, -1000, 1167, 1802,
	-1000, -1000, -1000, 287, 1330, 16041, 833, 220, -1000, -1000,
	-1000, -1000, -1000, 21304, 21304, 1800, -1000, 1326, 1670, -1000,
	650, 650, 612, -1000, -1000, 355, -1000, -1000, 259, -1000,
	-1000, -1000, -1000, -1000, 1511, -1000, -1000, -1000, 1162, 1241,
	922, 5859, -1000, -1000, 5859, 5859, 1091, 5859, 1150, 1282,
	1265, -1000, 1099, 1805, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 5859, 5859, 5859, 5859, 5859, 839, 4963,
	-1000, -1000, -1000, 5859, 5859, 5859, 5859, 1219, 1934, -1000,
	629, 629, 398, 398, 398, 398, 398, 734, 734, -1000,
	-1000, -1000, 3165, 1509, 6755, 6755, 6755, 185, 1021, 2591,
	-1000, 5859, 571, -1000, 5859, 937, -1000, 1094, 1419, 1080,
	1061, -1000, -1000, 890, 1041, 2786, 1032, 5859, 1800, -285,
	4509, 187, 21304, -285, 21304, 21304, 4509, -1000, 21304, 2273,
	798, -1000, -1000, -1000, 16041, 409, 456, -1000, 14289, 16041,
	-1000, -1000, 16041, 123, 1678, -1000, -1000, -90, -82, 922,
	922, 354, -1000, 1715, 1693, 9009, -1000, -65, -1000, -1000,
	-1000, 352, -1000, 853, 847, 846, 845, 21304, -1000, -1000,
	-1000, -1000, -1000, 465, 465, 465, 178, 1093, 353, 16917,
	21304, -1000, 16479, 1027, -1000, -1000, 1803, 1803, 421, -1000,
	-7, -49, 1203, -1000, 484, 1618, 1620, 1618, -1000, -1000,
	-1000, -1000, 1639, -1000, 1638, -1000, -1000, 1203, -1000, 1479,
	-1000, -1000, -1000, 1312, 1016, -1000, -1000, -1000, -1000, 1796,
	1790, 17355, -1000, -1000, -1000, -1000, -1000, 5859, 1537, 1529,
	1494, 942, 1243, -1000, -1000, -1000, -1000, 5859, 1475, 1466,
	1438, 1411, 1373, -1000, 5859, 5859, 1394, 1369, 1336, 1320,
	1310, 1220, -1000, 185, 1021, 1587, -1000, 6755, 6755, 1291,
	525, -1000, 5859, 672, 671, 13413, -1000, 5859, -1000, -1000,
	-1000, 13413, -1000, 6755, -1000, 1280, 1796, -1000, 1014, 1318,
	-1000, -285, -1000, -1000, 1252, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1312, -1000, -1000, -1000, -1000, 16041,
	1731, 238, -1000, 3, 221, -289, -78, 1789, 1786, 21304,
	170, 21304, 1008, 1263, -1000, -1000, -1000, 22754, 598, -1000,
	21304, 637, 332, 198, 332, 631, 1508, -1000, -1000, -65,
	-1000, 797, 796, 792, 790, -46, -1000, -1000, -1000, -1000,
	-1000, 1507, 13413, -1000, 13851, 843, 21742, 16917, 16479, 1087,
	-1000, 351, -1000, -1000, -1000, -1000, 1803, -1000, -7, -1000,
	285, 291, 33, 1785, 1794, 21304, 5859, -1000, -1000, 5859,
	1504, -1000, 5859, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5859, 5859, -1000, -1000, 922, -1000, -1000, -1000, 1004, -1000,
	297, 297, -29, -1000, -1000, -1000, 1450, -1000, 1482, 1482,
	1450, 1450, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1503, 1498, -1000, 1450, 1481, 1481, 1450, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1483, 1483, 1488, 1483, -1000, 1214, -1000,
	-1000, -1000, -1000, -1000, 1200, 1166, 5859, -1000, -1000, -1000,
	-1000, -1000, -1000, 6755, -1000, -1000, -1000, -1000, 922, 5859,
	976, -1000, 1450, 1482, -1000, 1450, 1481, 1450, 297, 297,
	970, 753, 958, 2693, -1000, -1000, -1000, 4509, 1252, -1000,
	16041, 16041, -245, -12, 21304, -291, 836, -1000, 1784, 835,
	695, -1000, 1479, 22967, 9009, 1206, -1000, -1000, 21304, 21304,
	-1000, 21304, 21304, 198, 5859, -1000, -1000, -1000, -1000, -1000,
	-1000, 15603, -1000, -1000, -1000, -1000, -1000, 1803, 1087, 351,
	-1000, -1000, 360, -1000, -1000, -1000, -1000, 789, -1000, -1000,
	-1000, 833, 1753, -1000, 922, 922, 21304, 922, 922, 1241,
	-1000, -1000, -1000, -1000, -1000, -36, -1000, -1000, -1000, -1000,
	786, -1000, 785, -1000, -1000, -1000, 831, 831, -1000, -1000,
	782, -1000, -1000, -1000, 771, -1000, -1000, 762, -1000, -1000,
	-1000, -1000, 1161, -1000, 922, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5859, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -105, -298, 761, -1000, 826, -81, -1000,
	-1000, 1712, 177, 22944, -1000, 465, 465, 613, 465, 465,
	465, 465, 135, 125, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 1470, -1000,
	-1000, 1206, -1000, -1000, 654, 6755, -1000, -1000, 825, 13851,
	420, 422, 1469, -1000, 101, 624, 602, -1000, 21304, -1000,
	1458, 1477, 63, 1456, -1000, 1453, 1452, 21304, 1149, 1208,
	-1000, 1450, 5859, 1794, -1000, 27, -1000, -1000, -1000, 1205,
	-1000, -1000, 956, 949, 1199, -1000, 1197, 928, 1193, 1180,
	-1000, 1122, -104, -89, -1000, 1448, -1000, -1000, 1777, 170,
	-1000, 1765, 22967, -1000, 746, 744, 465, 465, 742, 823,
	822, 818, 465, 465, 741, 816, 22104, 738, 733, 729,
	763, 814, 472, 754, 740, 735, 21304, 1442, 806, -1000,
	-1000, 1021, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 718, 1428, -1000, -1000, 1425, 15603, 64,
	64, 15603, 15603, 15603, 1424, 274, -1000, 15603, 1698, 1059,
	1753, -1000, -1000, -1000, -1000, -1000, 813, -1000, -1000, -1000,
	717, -1000, 714, -1000, 201, -88, -89, -1000, 1763, -83,
	1762, 1761, 21304, 695, -1000, 103, -1000, -1000, -1000, 13413,
	13413, -1000, -1000, -1000, -1000, 809, 807, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 148,
	21304, 1165, -1000, 468, 906, 5859, -225, 15603, 1158, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1155, 1137, 1057, 15603,
	-1000, -1000, -1000, 93, 112, -1000, -1000, 1698, -1000, -1000,
	902, 895, 1423, 701, -78, 1759, -1000, 695, 1756, 695,
	695, 1019, -1000, -1000, 87, 196, 194, -1000, 250, -1000,
	-1000, -1000, -1000, -1000, -1000, 151, 1002, -1000, 806, 756,
	-1000, 988, 1616, -1000, 0, 983, -1000, -1000, -1000, -1000,
	975, -1000, -1000, 465, 739, 49, -1000, -1000, -1000, -1000,
	-1000, 1734, 12975, -106, -1000, 697, -1000, 695, -1000, -1000,
	-1000, 21304, 82, 696, 6755, 1417, 6755, 1292, 94, 1281,
	-1000, -1000, -1000, -1000, -1000, 274, -1000, -1000, 1590, 1551,
	1809, -1000, -1000, -1000, -1000, 112, 112, 112, 112, -1,
	669, -1000, 842, -1000, 21304, -1000, 967, -1000, -1000, -1000,
	350, -1000, -1000, -1000, -1000, 1215, 1755, -1000, 2043, 21304,
	1055, 21304, 1092, 447, 6755, -1000, -1000, 1811, -1000, 1804,
	518, 518, -1000, -1000, -1000, 930, -1000, 443, -1000, 15165,
	21304, -1000, 175, 90, -1000, 964, -1000, 941, 21304, 668,
	943, -1000, -1000, -1000, 690, 113, -1000, 21304, 4061, -1000,
	336, 935, -1000, 883, 69, -1000, -1000, 909, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 922, 21304, -1000, 175, 1651,
	-1000, 667, -1000, -1000, -1000, 22747, 172, -1000, -1000, 22747,
	71, -1000, 167, -1000, -1000, 905, -1000, 881, 944, -1000,
	71, 22967, 5859, -1000, 22967, 893, -1000,
}

var yyPgo = [...]int{
	0, 112, 2160, 168, 140, 132, 167, 2159, 1731, 1729,
	2144, 2143, 2137, 2136, 2135, 2134, 2132, 2130, 2129, 2127,
	2126, 2125, 2124, 2123, 166, 2122, 2121, 2118, 2117, 2116,
	2115, 2114, 2113, 2112, 2107, 2106, 2105, 126, 2104, 1728,
	2102, 2101, 2099, 2098, 2097, 148, 2095, 2094, 2093, 2091,
	2089, 2088, 2087, 2086, 2085, 2083, 2082, 2081, 2080, 161,
	42, 113, 184, 198, 181, 174, 124, 76, 111, 154,
	114, 2078, 2077, 106, 25, 119, 2076, 49, 40, 31,
	176, 104, 48, 65, 93, 2075, 2074, 91, 2073, 2072,
	2071, 2069, 62, 2068, 79, 39, 88, 28, 2067, 2066,
	2065, 81, 2064, 2063, 2062, 2061, 90, 2060, 74, 53,
	2059, 2057, 2056, 2055, 2054, 29, 2053, 46, 2052, 2036,
	2035, 2033, 2032, 2031, 2030, 14, 17, 19, 2029, 2028,
	16, 3, 2026, 150, 54, 83, 101, 2024, 360, 2023,
	2019, 2018, 110, 2017, 131, 2016, 2012, 2011, 2007, 9,
	2006, 41, 2004, 2003, 2002, 60, 2001, 2000, 1997, 96,
	44, 55, 95, 1996, 1995, 78, 149, 15, 147, 0,
	145, 38, 1994, 1990, 1989, 175, 125, 144, 1987, 120,
	264, 115, 56, 1986, 52, 75, 1981, 1980, 1978, 105,
	72, 51, 1977, 92, 1976, 36, 86, 1975, 103, 1974,
	117, 1, 99, 1973, 151, 1971, 1970, 1952, 116, 1951,
	1950, 61, 118, 1948, 1947, 1946, 26, 1945, 37, 21,
	1942, 143, 158, 1941, 1937, 1935, 121, 94, 84, 1934,
	1933, 82, 1932, 109, 77, 73, 108, 667, 107, 64,
	18, 1931, 152, 1930, 203, 153, 134, 1929, 1909, 159,
	953, 157, 1903, 146, 10, 1900, 1899, 11, 1897, 23,
	1896, 1895, 1894, 1893, 5, 1892, 1891, 1890, 4, 2,
	1888, 6, 102, 47, 71, 1887, 67, 70, 1886, 1885,
	1884, 1883, 1882, 208, 1881, 1879, 1878, 1877, 1876, 1875,
	1874, 80, 1873, 1872, 1871, 1870, 68, 1867, 1866, 1865,
	1864, 1863, 30, 1861, 1860, 20, 1859, 24, 1858, 1856,
	1855, 12, 123, 1854, 1853, 13, 1852, 1851, 7, 8,
	1850, 1849, 57, 45, 34, 87, 85, 1848, 22, 1846,
	98, 1845, 1844, 122, 1843, 100, 1842, 128, 155, 201,
	1841, 138, 1840, 1838, 1837, 1836, 1835, 1834, 1833, 695,
	1832, 1831, 156, 63, 1830, 1829, 1827, 135, 1826,
}

//line mysql_sql.y:6750
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 354, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 53, 321, 321, 320, 320, 319,
	319, 318, 318, 318, 317, 317, 317, 316, 316, 315,
	315, 314, 314, 312, 312, 313, 311, 310, 310, 308,
	308, 306, 306, 307, 307, 301, 301, 304, 304, 302,
	302, 302, 302, 305, 300, 300, 300, 299, 299, 52,
	52, 52, 239, 239, 51, 51, 253, 253, 253, 253,
	253, 251, 251, 251, 251, 250, 250, 249, 249, 254,
	254, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 46, 46, 46, 46, 49, 50,
	247, 247, 247, 247, 247, 248, 248, 248, 47, 48,
	48, 238, 238, 243, 243, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 246, 246, 246,
	245, 245, 244, 244, 40, 40, 40, 43, 42, 237,
	237, 237, 237, 237, 237, 237, 237, 41, 41, 41,
	41, 41, 41, 38, 38, 37, 37, 39, 39, 236,
	236, 235, 56, 56, 56, 56, 56, 56, 56, 55,
	55, 58, 58, 57, 45, 45, 45, 45, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 344, 344, 344,
	346, 346, 173, 174, 355, 172, 172, 172, 340, 340,
	341, 342, 343, 343, 343, 54, 7, 36, 36, 283,
	283, 186, 186, 187, 187, 185, 185, 185, 185, 185,
	185, 286, 287, 182, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 28, 28, 35, 356, 356,
	356, 33, 34, 282, 282, 282, 32, 31, 30, 29,
	29, 27, 27, 26, 26, 179, 179, 181, 181, 177,
	357, 357, 259, 259, 180, 180, 25, 25, 178, 178,
	156, 176, 176, 176, 6, 10, 10, 10, 10, 10,
	10, 16, 15, 13, 12, 11, 14, 5, 5, 5,
	5, 8, 8, 9, 68, 68, 96, 96, 353, 353,
	349, 349, 350, 350, 350, 351, 351, 352, 352, 4,
	290, 290, 290, 290, 290, 290, 329, 329, 329, 330,
	86, 86, 81, 81, 291, 291, 202, 331, 331, 298,
	298, 297, 297, 296, 296, 84, 84, 85, 85, 72,
	72, 59, 59, 303, 303, 303, 303, 309, 309, 280,
	280, 122, 122, 152, 152, 153, 153, 60, 60, 61,
	61, 61, 61, 61, 61, 337, 337, 339, 339, 338,
	83, 83, 79, 79, 80, 80, 80, 78, 78, 77,
	76, 76, 75, 74, 74, 74, 63, 63, 62, 62,
	62, 62, 62, 138, 138, 138, 64, 64, 345, 345,
	345, 284, 284, 284, 289, 289, 135, 135, 136, 136,
	134, 134, 65, 65, 66, 66, 66, 66, 133, 133,
	132, 67, 67, 73, 69, 69, 71, 71, 71, 71,
	143, 143, 142, 142, 142, 142, 89, 89, 141, 140,
	140, 140, 88, 88, 87, 87, 82, 82, 70, 70,
	139, 358, 358, 137, 165, 165, 165, 171, 171, 164,
	164, 164, 164, 164, 175, 170, 170, 166, 166, 167,
	167, 167, 3, 3, 3, 19, 19, 19, 19, 23,
	23, 347, 347, 17, 233, 233, 232, 232, 234, 234,
	234, 234, 228, 228, 229, 229, 229, 229, 230, 230,
	230, 231, 231, 231, 231, 227, 227, 226, 224, 224,
	224, 225, 225, 225, 225, 225, 225, 168, 168, 18,
	221, 221, 222, 222, 222, 223, 223, 215, 215, 215,
	215, 22, 219, 219, 220, 220, 220, 220, 220, 216,
	216, 218, 218, 214, 214, 214, 214, 214, 21, 213,
	213, 211, 211, 209, 209, 210, 210, 208, 208, 208,
	212, 212, 20, 285, 285, 255, 255, 258, 258, 265,
	265, 266, 266, 264, 264, 271, 271, 270, 270, 269,
	269, 268, 268, 267, 267, 262, 262, 261, 261, 256,
	256, 256, 256, 256, 257, 257, 260, 260, 263, 263,
	113, 113, 114, 114, 114, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 327, 327, 328, 116, 116, 116,
	120, 120, 120, 120, 120, 120, 115, 115, 117, 117,
	97, 97, 95, 95, 90, 90, 91, 91, 92, 92,
	93, 93, 94, 94, 94, 94, 94, 94, 241, 241,
	325, 325, 326, 326, 322, 322, 322, 324, 324, 324,
	324, 324, 323, 323, 98, 150, 150, 150, 169, 169,
	169, 149, 149, 149, 112, 112, 111, 111, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 240, 240, 183, 183, 184, 184, 130, 128, 128,
	129, 129, 129, 129, 126, 127, 125, 125, 125, 125,
	125, 124, 124, 123, 123, 123, 217, 217, 121, 121,
	119, 119, 119, 118, 118, 118, 272, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	194, 194, 199, 199, 336, 336, 335, 99, 99, 99,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 108,
	108, 108, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 295, 295, 295,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 348, 348, 348, 332, 332, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 334, 334,
	334, 334, 334, 334, 334, 334, 147, 147, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 203, 203, 204, 204, 292, 292, 292, 292, 292,
	292, 293, 293, 294, 294, 294, 294, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 192, 144, 144, 144, 205,
	200, 200, 201, 201, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 197, 197, 197, 197, 197, 189,
	189, 190, 190, 190, 190, 190, 190, 190, 190, 190,
	196, 196, 198, 198, 207, 207, 207, 206, 206, 206,
	206, 206, 206, 206, 110, 110, 110, 110, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 101, 101,
	101, 101, 105, 105, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 106, 106,
	106, 106, 104, 104, 104, 104, 104, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 103, 151, 151, 273, 273, 276, 276, 274,
	274, 275, 277, 277, 277, 278, 278, 278, 279, 279,
	279, 281, 281, 155, 155, 155, 161, 161, 154, 154,
	162, 162, 163, 163, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 14, 0, 2, 1, 3, 3,
	3, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 0,
	3, 0, 3, 0, 3, 0, 2, 1, 2, 3,
	4, 3, 3, 1, 0, 1, 1, 0, 1, 9,
	4, 7, 0, 3, 7, 4, 1, 3, 3, 3,
	1, 0, 1, 1, 1, 1, 3, 1, 4, 1,
	3, 1, 2, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 2,
	2, 1, 1, 1, 3, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 6,
	3, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 0,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 1, 2, 9, 7, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 2, 4, 3, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 1, 1, 1, 1, 6, 1, 7, 9, 0,
	2, 0, 1, 1, 2, 2, 2, 1, 4, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 5, 1, 1,
	1, 5, 5, 0, 1, 1, 2, 2, 3, 6,
	7, 4, 4, 7, 8, 0, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 4, 5, 1, 3,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 6, 4, 4, 3, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 0, 1, 3, 3,
	1, 3, 1, 3, 1, 3, 4, 0, 1, 0,
	1, 1, 3, 1, 1, 0, 4, 1, 3, 2,
	1, 0, 8, 0, 4, 7, 4, 0, 2, 0,
	2, 0, 2, 0, 4, 1, 3, 1, 1, 4,
	3, 4, 5, 4, 5, 2, 3, 1, 3, 6,
	0, 3, 0, 1, 2, 4, 4, 0, 1, 3,
	1, 3, 2, 0, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 2, 7, 7, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 2, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 3, 1, 1, 1, 4, 4, 4, 3,
	2, 2, 2, 3, 2, 3, 0, 2, 1, 1,
	2, 2, 0, 1, 2, 4, 1, 3, 1, 4,
	3, 0, 1, 2, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	11, 0, 1, 6, 0, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 2, 2, 2, 2, 1, 3,
	2, 2, 2, 2, 2, 1, 3, 2, 1, 3,
	2, 0, 3, 3, 5, 5, 4, 1, 1, 4,
	1, 3, 1, 3, 2, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 2, 3, 1, 1, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 5, 1,
	1, 0, 3, 0, 1, 1, 2, 4, 4, 4,
	0, 1, 10, 0, 1, 0, 6, 0, 4, 0,
	3, 1, 3, 4, 5, 0, 3, 1, 3, 2,
	3, 1, 2, 0, 6, 0, 2, 0, 2, 4,
	5, 4, 5, 1, 6, 5, 0, 3, 0, 1,
	0, 1, 1, 3, 2, 3, 3, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 5, 4, 1, 3, 3, 0, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 0, 1, 1, 3, 1, 1,
	2, 1, 7, 7, 7, 7, 8, 5, 0, 1,
	0, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 0, 1, 3, 1, 3, 5, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 2, 1, 2,
	2, 1, 1, 2, 2, 2, 2, 2, 1, 5,
	6, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 1, 2, 2, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 2, 2, 2, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 1,
	1, 1, 1, 3, 5, 2, 2, 2, 2, 1,
	1, 2, 5, 6, 6, 6, 1, 1, 1, 1,
	0, 2, 0, 1, 1, 2, 4, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 2, 2, 2, 0,
	1, 1, 5, 4, 4, 5, 5, 5, 5, 4,
	5, 5, 5, 5, 5, 5, 5, 1, 1, 1,
	4, 4, 6, 8, 6, 4, 5, 5, 4, 6,
	6, 7, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 2,
	3, 2, 4, 6, 2, 2, 4, 6, 4, 2,
	2, 0, 1, 2, 3, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 3,
	0, 1, 1, 3, 3, 3, 3, 3, 2, 3,
	4, 3, 4, 1, 3, 4, 3, 4, 1, 1,
	1, 3, 4, 4, 5, 3, 4, 5, 6, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 1, 1, 3, 0, 1, 0, 3, 0,
	3, 3, 0, 3, 5, 0, 3, 5, 0, 1,
	1, 0, 1, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -354, -2, -1, -3, -4, -5, -6, -44, -55,
	-57, -58, -24, -7, -54, -37, -38, -40, -46, -51,
	-52, -53, -60, -19, -18, -17, 9, -8, -9, -337,
	-10, -172, -173, -174, -355, -25, -26, -27, -29, -30,
	-31, -32, -33, -34, -35, -28, -36, 192, -39, 50,
	-41, -42, -43, -47, -48, -49, -50, 302, 308, 345,
	-61, -63, -20, -21, -22, -23, 188, 11, 418, -11,
	-14, -12, -13, -15, -16, 210, 209, 29, 269, 270,
	306, 208, 189, 10, 122, 123, 125, 126, 22, -62,
	55, 190, -64, 7, 463, -72, 30, -95, -169, 59,
	-157, -160, 421, 422, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 415, 227,
	251, 254, 261, 122, 141, 135, 163, 155, 130, 231,
	232, 66, 125, 374, 76, 359, 344, 128, 246, 248,
	250, 253, 233, 151, 146, 245, 229, 144, 234, 31,
	235, 168, 236, 237, 420, 355, 284, 378, 361, 258,
	342, 145, 356, 249, 358, 169, 173, 366, 308, 139,
	140, 363, 368, 167, 207, 34, 417, 219, 369, 171,
	166, 162, 377, 262, 260, 165, 138, 161, 230, 39,
	175, 174, 176, 338, 339, 340, 341, 238, 239, 296,
	365, 158, 147, 288, 131, 19, 372, 214, 360, 309,
	240, 255, 263, 170, 172, 221, 226, 419, 225, 259,
	370, 143, 218, 247, 213, 373, 132, 302, 311, 241,
	126, 252, 367, 376, 38, 324, 137, 129, 204, 123,
	223, 228, 242, 243, 244, 265, 264, 256, 159, 220,
	164, 136, 160, 124, 222, 375, 325, 462, 286, 327,
	157, 154, 224, 197, 371, 362, 127, 331, 326, 152,
	266, 459, 460, 461, 297, 283, 267, 268, 150, 211,
	-39, -9, -8, -62, -63, -176, 20, 342, -45, 343,
	192, 55, -169, -5, -4, -37, -60, -175, -169, 269,
	-175, 195, -169, -250, -221, -249, -222, -252, -223, -168,
	23, 189, 188, 222, 11, 190, 306, 196, 9, 7,
	307, 208, 10, 308, 310, 311, 314, 315, 316, 33,
	319, 320, 59, 62, -169, -250, -221, 226, 233, -77,
	-78, -138, 16, 6, -285, 327, 225, -215, -213, 317,
	205, 204, 77, 380, 194, -349, -350, 185, 186, 187,
	-339, 412, -338, -169, 413, -155, -356, -282, 362, 361,
	-180, 360, 353, 364, 355, 188, 76, 156, 153, 196,
	363, 34, 366, 367, 356, 327, -349, 127, 124, -237,
	82, 132, 131, -237, 225, 32, -243, 337, -242, -244,
	366, 367, 377, 60, 61, 365, -155, -169, 76, -78,
	-138, -77, -61, -63, -337, 327, 225, 196, 195, 380,
	269, -284, -345, 23, -289, 182, 183, 184, 24, 25,
	-1, -84, 217, -95, 121, -78, -77, -78, -149, -169,
	344, 91, -45, -45, 343, -340, -341, -342, -344, 192,
	343, 342, 121, 12, -175, 53, -95, 52, 56, 12,
	56, 55, 464, 60, 304, 318, 327, 305, 317, 197,
	225, 318, 225, 353, 197, 309, 312, 313, 354, 52,
	198, 52, -299, 377, -59, 30, -80, 18, -64, -63,
	17, 23, 24, -347, 195, 412, -211, 200, -211, 196,
	-211, -351, 134, 56, -339, -83, 55, -179, 99, -179,
	-357, 12, 101, 224, 223, 357, 354, -259, 358, 359,
	-180, -179, -179, -180, 195, 380, 22, 22, -283, 200,
	-352, 199, 370, 418, 130, 131, 132, -247, 23, 32,
	336, -221, 225, 56, 91, 20, -245, 91, 102, -244,
	-244, -244, -245, -245, -115, 32, -168, 118, 62, -115,
	32, 121, -79, -80, -64, -63, 57, 57, -283, -283,
	-283, -283, -283, -175, -65, -66, 109, -195, -169, 83,
	-197, 59, -190, 421, 422, 423, 424, 425, 426, 427,
	428, 429, 430, 431, 432, 433, 434, 435, 437, 438,
	439, 440, 441, 442, 443, 444, 445, 446, 447, 448,
	449, 450, 451, 452, 453, 454, 455, 456, 76, 342,
	296, 327, 152, 297, 150, 211, -191, -193, -318, -312,
	-188, 55, 107, 108, 115, 84, -192, -272, 27, 86,
	388, -145, -146, -147, -148, -313, -311, 62, 67, 70,
	73, 74, 72, 71, 148, 69, 63, 120, -63, -332,
	-158, -288, -294, 194, -292, 153, 149, 9, 113, 337,
	118, -295, 61, 60, 290, 291, 292, 380, 287, 293,
	200, 44, 294, 295, 298, 387, 299, 45, 300, 289,
	215, 301, 391, 390, 392, 384, 381, 379, 382, 383,
	385, 386, -65, -290, 35, -60, 55, 22, 55, -169,
	-79, -59, -80, 121, 67, 62, -45, 57, 56, -343,
	73, 74, -346, 167, 159, -169, -56, 62, -3, -4,
	-5, -6, -24, -37, -60, -314, -312, 55, -251, 195,
	303, 221, -249, 222, 308, 311, -227, -226, -224, -168,
	-222, -254, -149, -168, 354, -251, -227, -226, 346, 458,
	-59, -195, -169, -76, -75, -195, 197, -211, -227, 83,
	-221, -167, 59, 60, 61, -169, -352, -338, 26, -82,
	-169, -134, 13, -193, -134, -95, -179, -179, -181, -357,
	-177, -357, 354, -134, -134, -259, -178, -169, -211, -227,
	327, 27, -69, -67, -70, -71, -73, -137, -139, -95,
	55, 371, 372, 128, 131, 130, 378, -248, 336, 23,
	-221, -242, -238, 62, 337, -226, -246, 52, 118, -296,
	-195, 32, -245, -245, -245, -246, -246, 117, -169, -59,
	-227, -221, -169, -97, -95, -170, -167, -160, -133, 56,
	-132, 12, -164, 82, 79, 80, 81, -169, 26, 62,
	121, -195, 98, -206, 91, 92, 93, 94, 95, 96,
	97, 55, 55, 55, 55, 55, 55, 55, 55, -204,
	55, 55, 55, 55, 55, 55, 55, -204, 55, 55,
	55, 55, 55, 62, 62, 104, 103, 114, 107, 108,
	109, 110, 111, 112, 113, 105, 106, 101, 83, 99,
	100, 85, -63, -195, -201, -193, -193, -193, -193, -272,
	-199, -195, 55, -195, 55, 55, 55, -293, 55, 55,
	-203, -204, 55, 62, 55, 55, 55, -193, 55, -133,
	-291, -202, -331, 457, -86, 57, -81, -169, -329, -330,
	-81, -85, -169, -59, -59, -162, -163, -154, -159, -166,
	-167, -160, 285, 193, 23, 82, 26, 28, 290, 322,
	85, 118, 17, 86, 153, 117, 292, 388, 291, 188,
	48, 390, 392, 391, 381, 379, 329, 333, 335, 332,
	380, 353, 32, 11, 29, 209, 24, 25, 111, 190,
	89, 90, 212, 27, 210, 74, 20, 51, 12, 14,
	15, 293, 328, 200, 199, 101, 346, 196, 46, 9,
	120, 30, 98, 330, 42, 78, 44, 99, 18, 382,
	383, 33, 345, 414, 216, 113, 294, 295, 49, 83,
	336, 72, 52, 79, 16, 47, 100, 191, 387, 45,
	334, 298, 300, 412, 299, 194, 364, 7, 289, 389,
	22, 208, 43, 195, 354, 88, 198, 73, 215, 149,
	6, 77, 10, 50, 53, 384, 385, 386, 35, 87,
	13, 301, 418, 337, 347, 348, 349, 350, 351, 352,
	177, 178, 179, 180, 181, 257, 203, 201, 205, 206,
	457, 458, 182, 183, 280, 282, 156, 185, 186, 187,
	217, 134, 20, -45, -341, 121, 56, -82, -253, 109,
	59, 56, -225, 328, 464, 60, 57, 56, -253, 198,
	62, 62, 56, 19, 121, 56, -74, 28, 29, -95,
	200, -95, -228, -229, 334, 27, -214, 53, -209, -210,
	-208, -212, 32, 12, -68, -96, -169, 55, 57, 56,
	-195, -134, -134, -134, -179, -170, -181, -176, -181, -177,
	121, -156, -169, -228, 55, 22, -140, -141, -142, -143,
	42, 46, 48, 43, 44, 45, 49, 22, 56, -358,
	26, -165, -171, 26, -166, 62, -167, -160, -61, -63,
	129, 132, 132, 131, -221, 198, 55, 91, -246, -246,
	-246, 32, -168, 52, 56, -134, -66, -67, -69, -195,
	-195, -195, -195, -169, 62, -169, 109, -189, 83, 283,
	72, 73, 74, -190, -207, 23, 267, 268, -200, -201,
	-195, -144, 24, 23, -144, -144, -195, -144, 109, -201,
	-201, 57, 67, -333, -334, 393, 394, 395, 396, 397,
	398, 399, 400, 401, 402, 403, 294, 289, 295, 293,
	287, 301, 296, 297, 152, 410, 411, 404, 405, 406,
	407, 408, 409, -144, -144, -144, -144, -144, -195, -348,
	281, 280, 282, -144, -144, -144, -144, -191, -191, -191,
	-191, -191, -191, -191, -191, -191, -191, -191, -191, -198,
	-205, -272, 55, 101, 99, 100, 85, -193, -191, -191,
	57, 56, -336, -335, 87, -195, -333, -200, -195, -200,
	-200, 57, 57, -201, -200, -191, -200, -144, -134, 56,
	55, 57, 56, 35, 121, 56, 91, 57, 56, 121,
	344, -169, -312, 57, 12, 121, 121, -226, 17, 418,
	-168, -149, 198, -227, -300, 199, 387, -303, 358, -195,
	-195, -169, -75, -83, 83, 55, -233, 418, 336, 335,
	331, -230, -231, 330, 332, 329, 333, 52, 275, 276,
	277, 278, -208, -155, 117, 236, -95, -68, -169, 12,
	56, -353, 121, -1, -169, -134, -179, -179, -181, -169,
	-233, 57, -236, -235, -149, -70, -70, -70, -70, 42,
	42, 42, 47, 42, 47, 42, -142, -236, -73, -169,
	-171, 57, 132, -227, -182, 62, -238, -95, -95, -136,
	14, 121, -189, 283, 72, -272, 57, 56, -195, -195,
	-195, 26, -201, 57, 57, 57, 57, 12, -195, -195,
	-195, -195, -195, 57, 12, 12, -195, -195, -195, -195,
	-195, -201, -198, -193, -191, -191, -196, 212, 82, -195,
	-194, -335, 89, -195, 56, 53, 57, 12, 57, 57,
	57, 53, 57, 56, 57, -195, -136, -202, -298, -297,
	-296, 35, -60, -81, -291, -169, -330, -296, -169, -162,
	-159, -167, -160, 67, -227, 109, 109, 59, -168, 337,
	-168, -227, -239, 418, 30, -309, 352, 347, 349, 121,
	26, 27, -90, -91, -92, -98, -93, -149, -184, -94,
	203, 201, 205, -326, 77, 206, 257, 78, 196, -232,
	-234, 338, 339, 340, 341, 82, -231, 62, 62, 62,
	62, -95, -161, 91, -161, -161, -84, 53, 121, -67,
	-96, -169, 109, 57, -134, -134, -179, -186, -187, -185,
	285, -286, 337, 328, -134, 56, 91, -88, -87, 52,
	53, -89, 52, -87, 42, 42, -134, -83, 57, -135,
	15, 17, -169, 109, -195, 57, 57, 57, -99, -101,
	324, 325, -105, -102, -104, -103, -107, -106, 153, 154,
	118, 157, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 22, 211, 149, 150, 151, 152, 169, 135,
	155, 416, 177, 136, 178, 137, 179, 138, 180, 139,
	140, 181, 141, 144, 145, 146, 143, 57, -195, 57,
	57, 57, 57, 57, -195, -195, 12, 57, 57, 57,
	57, 57, -196, 82, -193, -190, 57, 90, -195, 88,
	-100, -106, 118, 153, 211, 152, 151, 149, 324, 325,
	-115, -195, -115, -191, 57, -135, 57, 56, -291, -168,
	17, 26, -228, 308, 195, -280, 459, -307, 347, 17,
	17, -60, -95, 57, 56, -101, -94, -169, 78, -325,
	-326, -211, -325, 78, 55, -234, 67, 67, 67, 67,
	-231, 55, -115, -117, -168, 118, 62, -165, -67, -169,
	-134, -353, 121, -134, -185, 286, 33, 120, 288, 32,
	284, 17, -78, -235, -195, -195, 55, -195, -195, -201,
	57, -108, 140, 139, -108, -279, 325, 324, -273, -275,
	55, -274, 55, -274, -273, -273, 55, 55, -273, -276,
	55, -276, -273, -277, 55, -277, -278, 55, -277, 57,
	57, 57, -195, -190, -195, 57, -273, -274, -273, -276,
	-273, -108, -108, 57, 57, 20, 57, 57, -296, -168,
	-168, -239, 309, -95, -122, 460, 62, 17, 62, -305,
	62, -83, -113, -114, -131, 322, 227, -212, 231, 66,
	232, 344, 233, 196, 235, 236, 237, 207, 238, 239,
	240, 337, 241, 242, 243, 244, 305, 6, 271, -92,
	-112, -111, -109, 72, 83, 32, 322, -110, 66, 117,
	250, 228, 251, -130, -183, 201, 77, 78, 310, -184,
	-322, -323, -169, -323, -169, -322, -322, -211, -195, -216,
	-218, -149, 55, -134, -134, 67, -287, -182, -79, -82,
	-281, 326, 67, 67, -151, 62, -151, 67, 67, 67,
	57, -195, -301, -259, -152, 461, 67, 62, 349, 26,
	-255, 217, 56, -131, -161, -161, -155, 117, -161, -161,
	-161, -161, 234, 234, -161, -161, -161, -161, -161, -161,
	-161, -161, -161, -161, -161, -161, -161, -161, 55, -109,
	72, -191, 62, -117, -118, 32, 249, 245, -119, 32,
	229, 230, -121, 55, 257, 78, 78, -95, 55, 53,
	266, 55, 55, 55, -323, 57, 57, 56, -273, -195,
	-78, 287, 57, 57, 57, 57, 56, 57, 57, 57,
	56, 57, 56, 57, -308, 352, -304, -302, 347, 348,
	349, 350, 55, 17, -60, 17, -131, 67, 67, -161,
	-161, 67, 62, 62, 62, -161, -161, 67, 62, -171,
	67, 67, 67, 67, 32, 62, -120, 32, 245, 249,
	246, 247, 248, 67, 32, 67, 32, 67, 32, -169,
	55, -327, -328, 62, 67, 55, -217, 55, -216, -324,
	275, 276, 277, 279, 278, -324, -216, -216, -216, 55,
	-241, -240, 258, 83, -219, -218, -74, 57, -79, 62,
	67, 67, -310, 199, -306, 351, -302, 17, 349, 17,
	17, -153, -169, -305, -256, 259, 260, -257, -263, 262,
	-115, -115, 62, 62, -116, 228, -97, 57, 56, 91,
	57, -195, -124, -123, 414, -216, 57, 57, 57, 57,
	-216, 258, -220, 207, 66, 418, 273, 274, -74, 57,
	57, -317, 55, 67, -307, 17, -305, 17, -305, -305,
	57, 56, -261, 263, 55, -259, 55, -259, 78, 276,
	229, 230, 57, -328, 62, 57, -128, -129, -126, -127,
	52, 356, 255, 256, 57, -219, -219, -219, -219, 57,
	-161, 62, 272, -321, 22, 57, -316, -315, -150, -311,
	-169, 352, 62, -305, -169, -258, 264, 67, -191, 55,
	-191, 55, -260, 261, 55, -240, -127, 52, -126, 52,
	11, 10, -130, 67, -167, -320, -319, -318, 57, 56,
	121, -265, 55, 17, 57, -254, 57, -254, 55, 91,
	-191, -125, 252, 253, 22, 131, -125, 56, 91, -315,
	-169, -266, -264, 217, -257, 57, 57, -254, 67, 57,
	72, 32, 254, -319, 32, -195, 121, 57, 56, 59,
	-262, 265, 57, -169, -264, -267, 35, 67, -271, -268,
	55, -131, 219, -271, -131, -270, -269, 264, 220, 57,
	56, 59, 55, -269, -268, -201, 57,
}

var yyDef = [...]int{
	23, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 502, 503, 504, 0, 317, 318, 0,
	304, 0, 0, 0, 0, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 236, 0, 185, 184,
	164, 165, 166, 124, 125, 126, 127, 0, 0, 0,
	387, -2, 505, 506, 507, 508, -2, 330, 0, 305,
	306, 307, 308, 309, 310, 225, 226, 227, 222, 223,
	224, -2, 0, 330, 177, 0, 169, 169, 0, 407,
	0, 0, 418, 431, 23, 365, 0, 370, 682, 718,
	719, 720, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	186, 319, 320, 407, 407, 208, 0, 1286, 212, 0,
	0, 0, 301, 204, 205, 206, 207, 0, 494, 0,
	201, 0, 183, 0, 0, 85, 550, 87, 552, 0,
	91, 93, 94, -2, 98, 99, 100, 101, 102, 103,
	104, 0, 106, 1294, 108, 1354, 111, 112, 113, 0,
	122, 123, -2, -2, 547, 0, 0, 1342, 67, -2,
	0, 0, 0, 423, 511, 581, 581, 0, 581, 594,
	558, 559, 560, 579, 580, 335, 331, 332, 333, 334,
	395, 0, 397, 400, 285, 285, 0, 0, 276, 277,
	0, 294, 285, 285, 294, 0, 1083, 0, 0, 268,
	269, 270, 274, 275, 295, 239, 337, 178, 179, 168,
	0, 173, 0, 167, 1344, 0, 138, 0, 143, 0,
	1293, 1358, 1308, 0, 0, 1326, 0, 162, -2, 402,
	0, 408, 0, 407, 0, 239, 239, 239, 239, 239,
	0, 0, 0, 432, 433, 428, 429, 430, 434, 435,
	3, 0, 0, 369, 0, 402, -2, 0, 209, 721,
	0, 0, 213, 214, 0, 0, 228, 0, 231, 217,
	218, 219, 0, 0, 203, 0, 0, 81, 0, 0,
	0, 0, 0, 554, 92, 121, 95, 96, 0, 116,
	118, 120, 119, 105, 117, 107, 109, 110, 115, 81,
	0, 0, 0, 68, 390, 0, 371, 0, 420, 422,
	0, 424, 425, 0, 581, 512, 0, 0, 0, 0,
	0, 337, 336, 0, 396, 0, 0, 440, 0, 440,
	0, 290, 291, 285, 285, 278, 287, 0, 292, 293,
	0, 440, 440, 0, 0, 581, 1084, 1085, 0, 0,
	0, 338, 0, 0, 171, 0, 176, 128, 133, 131,
	132, 134, 0, 0, 0, 0, 0, 160, 161, 0,
	0, 0, 0, 0, 151, 154, 676, 677, 548, 155,
	156, 0, 371, 403, 419, 421, 416, 417, 0, 0,
	0, 0, 0, 316, 448, 442, 444, 489, 31, 0,
	973, 718, 978, -2, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, -2, 1425, -2, -2, 1428, 1429, 1430, 1432, -2,
	-2, -2, -2, -2, -2, 1439, -2, -2, -2, 1443,
	1444, -2, -2, 1447, 1448, 1449, 1450, 1451, -2, -2,
	-2, -2, -2, -2, -2, -2, 989, 789, 790, 791,
	792, 0, 0, 0, 0, 0, 799, 800, 0, 812,
	0, 806, 807, 808, 809, 43, 44, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 936, 776, 0,
	0, 0, 921, 0, 911, 0, 949, 0, 0, 0,
	0, 0, 45, 46, 927, 929, 930, 932, 933, 934,
	935, 938, 939, 940, 943, 944, 945, 946, 947, 948,
	951, 953, 923, 924, 925, 926, 915, 916, 917, 918,
	919, 920, 448, 339, 357, 341, 0, 346, 0, 683,
	371, 393, 371, 0, 210, 0, 215, 0, 0, 230,
	232, 233, 234, 220, 221, 302, 199, 200, 192, 193,
	194, 195, 196, 197, 198, 202, 41, 0, 0, 82,
	83, 84, 86, 97, 0, 0, 75, 535, 541, 538,
	551, 0, 89, 553, 114, 0, 70, 0, 0, 0,
	391, 404, 31, 409, 410, 413, 0, 0, 522, 0,
	549, 573, 499, 500, 501, -2, 0, 398, 0, 0,
	476, 265, 0, 286, 266, 440, 440, 440, 285, 0,
	287, 0, 287, 281, 282, 0, 296, 298, 0, 522,
	1385, 240, 453, 0, 454, 455, 451, 478, 481, 484,
	0, 180, 181, 0, 0, 175, 0, 0, 135, 136,
	137, 144, 139, 141, 0, 0, 145, 157, 158, 159,
	363, 364, 0, 0, 0, 149, 150, 0, 163, 389,
	311, 312, 0, 314, 680, 315, 495, 496, 440, 0,
	449, 0, 445, 0, 0, 0, 0, 490, 0, 492,
	0, 968, 0, 0, 997, 998, 999, 1000, 1001, 1002,
	1003, 960, 956, 956, 956, 0, 956, 0, 0, 896,
	0, 0, 956, 956, 956, 956, 956, 897, 0, 956,
	956, 956, 956, 910, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 962, 0, 795, 796, 797, 798, 801,
	0, 813, 0, 0, 960, 960, 960, 899, 0, 0,
	901, 912, 0, 905, 960, 0, 960, 909, 956, 440,
	340, 354, 0, 358, 0, 0, 350, 352, 345, 347,
	0, 0, 367, 392, 394, 722, 0, 1090, -2, 1092,
	-2, -2, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
	1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
	1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131,
	1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
	1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
	1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,
	1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1243, 0, 216, 229, 0, 0, 0, 0, 76,
	80, 0, 537, 0, 0, 540, 88, 0, 0, 0,
	64, 373, 0, 0, 0, 0, 412, 414, 415, 400,
	0, 0, 514, 523, 0, 582, 0, 0, 578, -2,
	585, 0, 591, 0, 0, 324, 328, 23, 401, 0,
	441, 267, 271, 272, 440, 288, 285, 289, 285, 287,
	0, 297, 300, 514, 0, 0, 0, 0, 0, 0,
	469, 0, 0, 468, 0, 0, 0, 0, 0, 0,
	482, 483, 485, 0, 487, 488, 497, 498, 0, 407,
	182, 170, 172, 0, 130, 0, 0, 0, 146, 147,
	148, 152, 153, 0, 0, 438, 443, 450, 453, 964,
	965, 966, 967, 491, 493, 32, 446, 969, 0, 971,
	974, 979, 980, 976, 0, 994, -2, -2, 0, 961,
	962, 0, 957, 958, 0, 0, 0, 0, 0, 0,
	0, 913, 0, 0, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 0, 0, 0, 0, 0, 0, 0,
	862, 863, 864, 0, 0, 0, 0, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 981,
	992, 993, 0, 0, 0, 0, 0, 990, 985, 0,
	793, 0, 810, 814, 0, 0, 955, 0, 962, 0,
	0, 922, 900, 0, 0, 0, 0, 0, 438, 357,
	359, 0, 0, 357, 0, 0, 0, 366, 0, 0,
	0, 303, 42, 235, 0, 0, 0, 536, 0, 0,
	539, 90, 0, 72, 0, 65, 66, 377, 0, 405,
	406, 32, 411, 0, 0, 684, 513, 0, 524, 525,
	526, 527, 528, 0, 0, 0, 0, 0, 574, 575,
	576, 577, 586, 1086, 1086, 1086, 365, 0, -2, 0,
	0, 326, 0, 0, 477, 279, 440, 440, 285, 299,
	241, 0, 440, 189, 0, 472, 466, 0, 459, 470,
	471, 462, 0, 464, 0, 460, 461, 440, 452, 400,
	486, 480, 174, 129, 0, 253, 140, 313, 681, 436,
	0, 0, 970, 972, 975, 977, 850, 0, 0, 0,
	0, 0, 0, 839, 833, 834, 914, 0, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	0, 0, 982, 990, 986, 0, 983, 0, 0, 963,
	0, 815, 0, 0, 0, 0, 851, 0, 855, 898,
	902, 0, 906, 0, 908, 0, 436, 355, 0, 360,
	361, 357, 344, 351, 343, 353, 348, 349, 368, 723,
	1091, 1088, 1089, 211, 74, 77, 78, 79, 542, 0,
	543, 522, 71, 0, 0, 379, 53, 0, 0, 0,
	0, 0, 0, 685, 686, 688, 689, 0, 0, 691,
	745, 0, 700, 581, 700, 0, 0, 702, 703, 515,
	516, 0, 0, 0, 0, 0, 530, 531, 532, 533,
	534, 0, 0, 1087, 0, 0, 484, 0, 0, 440,
	325, 328, 329, 399, 283, 280, 440, 237, 242, 243,
	0, 247, 0, 0, 407, 0, 0, 456, 473, 0,
	0, 457, 0, 458, 463, 465, 188, 479, 142, 426,
	0, 0, 33, 447, 963, 835, 836, 837, 0, 817,
	829, 829, 1078, 1019, 1020, 1021, 1065, 1023, 1069, 1069,
	1065, 1065, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 0, 0, 1042, 1065, 1067, 1067, 1065, 1062, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1072, 1072, 1075, 1072, 838, 0, 857,
	840, 841, 844, 842, 0, 0, 0, 856, 845, 846,
	832, 959, 984, 0, 991, 987, 794, 802, 811, 0,
	0, 820, 1065, 1069, 823, 1065, 1067, 1065, 829, 829,
	0, 0, 0, 0, 843, 427, 356, 0, 342, 546,
	0, 0, 72, 0, 0, 381, 0, 378, 0, 0,
	0, 509, 400, -2, 0, -2, 690, 746, 712, 712,
	701, 712, 712, 581, 0, 517, 518, 519, 520, 521,
	529, 0, 587, 588, 678, 679, 589, 440, 440, -2,
	322, 327, 0, 284, 244, 245, 246, 0, 249, 250,
	252, 0, 402, 190, 191, 474, 0, 467, 437, 439,
	803, 818, 830, 831, 819, 1081, 1079, 1080, 1022, 1066,
	0, 1047, 0, 1048, 1049, 1050, 0, 0, 1043, 1044,
	0, 1045, 1046, 1038, 0, 1039, 1040, 0, 1041, 854,
	859, 860, 0, 988, 816, 804, 821, 822, 824, 825,
	826, 827, 828, 805, 852, 0, 903, 907, 362, 544,
	545, 69, 73, 55, 383, 0, 380, 0, 374, 376,
	63, 0, 595, -2, 632, 1086, 1086, 0, 1086, 1086,
	1086, 1086, 0, 0, 1086, 1086, 1086, 1086, 1086, 1086,
	1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 0, 687,
	714, -2, 726, 728, 0, 0, 731, 732, 0, 0,
	0, 0, 768, 738, 0, 0, 1006, 1007, 0, 744,
	0, 704, 713, 0, 713, 0, 0, 712, 0, 0,
	569, 1065, 0, 407, 323, 0, 251, 238, 187, 0,
	1018, 1082, 0, 0, 0, 1063, 0, 0, 0, 0,
	861, 0, 49, 0, 372, 0, 382, 54, 0, 0,
	592, 0, 590, 634, 0, 0, 1086, 1086, 0, 0,
	0, 0, 1086, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	729, 730, 733, 734, 735, 773, 774, 775, 736, 770,
	771, 772, 737, 0, 0, 1004, 1005, 766, 0, 0,
	0, 0, 0, 0, 0, 698, 562, 0, 413, 0,
	402, 248, 475, 1071, 1070, 1060, 0, 1061, 1068, 1073,
	0, 1076, 0, 853, 47, 51, 56, 57, 0, 0,
	0, 0, 0, 0, 510, 628, 633, 635, 636, 0,
	0, 639, 640, 641, 642, 0, 0, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 670, 671, 672,
	673, 674, 675, 655, 656, 657, 658, 659, 660, 667,
	0, 0, 664, 0, 0, 0, 761, 0, 0, 705,
	707, 708, 709, 710, 711, 706, 0, 0, 0, 0,
	697, 699, 741, 0, 561, 570, 571, 413, 321, 1064,
	0, 0, 34, 0, 53, 0, 58, 0, 0, 0,
	0, 0, 385, 375, 617, 0, 0, 623, 0, 629,
	637, 638, 643, 644, 661, 0, 0, 663, 0, 0,
	769, 0, 748, 762, 0, 0, 562, 562, 562, 562,
	0, 742, 563, 1086, 0, 0, 567, 568, 572, 1074,
	1077, 25, 0, 0, 50, 0, 59, 0, 61, 62,
	384, 0, 597, 0, 0, 0, 0, 0, 626, 0,
	668, 669, 662, 665, 666, 739, 747, 749, 750, 751,
	0, 763, 764, 765, 767, 692, 693, 694, 695, 0,
	0, 565, 0, 24, 0, 35, 0, 37, 39, 40,
	715, 48, 52, 60, 386, 599, 0, 618, 0, 0,
	0, 0, 0, 0, 0, 740, 752, 0, 753, 0,
	0, 0, 696, 564, 566, 26, 27, 0, 36, 0,
	0, 596, 0, 628, 619, 0, 621, 0, 0, 0,
	0, 754, 756, 757, 0, 0, 755, 0, 0, 38,
	716, 0, 601, 0, 615, 620, 622, 0, 627, 625,
	758, 760, 759, 28, 29, 30, 0, 600, 0, 613,
	598, 0, 624, 717, 602, -2, 0, 616, 603, -2,
	0, 611, 0, 604, 612, 0, 607, 0, 0, 606,
	0, -2, 0, 608, -2, 0, 614,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 84, 3, 3, 3, 112, 104, 3,
	55, 57, 109, 107, 56, 108, 121, 110, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 463,
	92, 91, 93, 3, 464, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 114, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 115,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 85,
	86, 87, 88, 89, 90, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 105, 106, 111, 113, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:514
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:520
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:546
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:550
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:556
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:571
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:575
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:581
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:585
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:591
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:598
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:607
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:611
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:615
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:620
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:624
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:628
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:634
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:643
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:654
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:658
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:664
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:668
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:674
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:678
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:684
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:708
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:727
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:731
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:736
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:740
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:748
		{
			yyVAL.str = ""
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:752
		{
			yyVAL.str = yyDollar[3].str
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:757
		{
			yyVAL.str = "\n"
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:761
		{
			yyVAL.str = yyDollar[3].str
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:766
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:770
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:794
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:798
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:804
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:810
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:828
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:845
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:868
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:872
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:876
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:881
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:885
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:909
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:919
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:923
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:933
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:943
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:953
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:959
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:965
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:972
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:980
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:988
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:992
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:996
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1000
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1006
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1010
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1016
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1023
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1032
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1036
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1042
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1046
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1050
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1054
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1058
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1062
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1066
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1070
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1074
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1078
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1082
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1086
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1182
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1188
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1196
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1200
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1208
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1218
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1222
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1226
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1232
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1238
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1249
		{
			yyVAL.str = yyDollar[3].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1255
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1259
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1265
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1273
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1282
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1290
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1298
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1321
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1344
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1351
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1358
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1366
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1373
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1380
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1389
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1393
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1397
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1403
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1407
		{
			yyVAL.str = yyDollar[1].str
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1414
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1425
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1431
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1436
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1440
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1444
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1448
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1452
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1456
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1460
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1464
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1470
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1474
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1482
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1487
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1492
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1498
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1509
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1516
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1527
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: yyDollar[4].tableExprsUnion(),
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1538
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1542
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1548
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1560
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1566
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1570
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1576
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1580
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1586
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1595
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1601
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1606
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1611
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1615
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1619
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1623
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1631
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1639
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1649
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1681
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1685
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1691
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1697
		{
			yyVAL.str = yyDollar[1].str
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1702
		{
			yyVAL.str = "true"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1703
		{
			yyVAL.str = "false"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1704
		{
			yyVAL.str = yyDollar[1].str
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1709
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1719
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1730
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1743
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1747
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1752
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1756
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1762
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1766
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1772
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1776
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1780
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1784
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1788
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1792
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1798
		{
			yyVAL.item = nil
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1803
		{
			yyVAL.item = nil
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1825
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1829
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1835
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1849
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1859
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1868
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1872
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1876
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1882
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1888
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1894
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1900
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1910
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1922
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1926
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1932
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1944
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1957
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1961
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1966
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1970
		{
			yyVAL.str = yyDollar[2].str
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1976
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1989
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1993
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1999
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2003
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2009
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2013
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2022
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2026
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:2030
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2047
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2056
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2075
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2081
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2087
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2095
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2100
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2107
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2123
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: yyDollar[7].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2136
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: yyDollar[8].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2151
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2157
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:2162
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2169
		{
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2171
		{
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2174
		{
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2183
		{
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2187
		{
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2192
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2201
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2208
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2214
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2222
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2229
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2236
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2255
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2259
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2263
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2269
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2282
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2288
		{
			yyVAL.str = yyDollar[1].str
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2292
		{
			yyVAL.str = yyDollar[3].str
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2298
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2302
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2308
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2313
		{
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2317
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2324
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2328
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2335
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2340
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2344
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2350
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2354
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2360
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2364
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2369
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2373
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2386
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2393
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2400
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2418
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2437
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2443
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2450
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2454
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2467
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2471
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2476
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2480
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2487
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2492
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2499
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2505
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2509
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2525
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2531
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2538
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2547
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2551
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2557
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2565
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2569
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2574
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2578
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2584
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2588
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2592
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2597
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2601
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2607
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2613
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2617
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2623
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2628
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2632
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2636
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2643
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2647
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2653
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2657
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2667
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2677
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2687
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2699
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2707
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2715
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2725
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2736
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2754
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2758
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2762
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2771
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2775
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2780
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2784
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2789
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2793
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2799
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2803
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2809
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2813
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2817
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2821
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2826
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2834
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2840
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2848
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2852
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2865
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2874
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2884
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2893
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2903
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2907
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2917
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2921
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2925
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2929
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2935
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2939
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2945
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2951
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2955
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2959
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2965
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2969
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2975
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2979
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2985
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2989
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2995
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2999
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:3012
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3017
		{
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3018
		{
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:3022
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3034
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3038
		{
			yyVAL.str = yyDollar[1].str
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3042
		{
			yyVAL.str = yyDollar[2].str
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3051
		{
			yyVAL.str = ""
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3055
		{
			yyVAL.str = yyDollar[1].str
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3059
		{
			yyVAL.str = yyDollar[2].str
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3063
		{
			yyVAL.str = yyDollar[1].str
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3067
		{
			yyVAL.str = yyDollar[2].str
		}
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3100
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3110
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3121
		{
		}
	case 513:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3126
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3136
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3140
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3146
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:3150
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3156
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3160
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3164
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:3168
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3174
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3181
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3186
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3191
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3196
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3202
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3206
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3210
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3216
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3220
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3224
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3228
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3234
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3238
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3244
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3257
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3261
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3265
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3270
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3274
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3281
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3287
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3295
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3302
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3314
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3323
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3327
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3333
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3337
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3341
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3350
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3354
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3358
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3362
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3368
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3387
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3391
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3413
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3417
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3421
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3425
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3429
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3435
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3439
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3445
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3450
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3455
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3459
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3463
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3467
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3471
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3477
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3491
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3495
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3500
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3504
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3510
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3514
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3520
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3524
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3528
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3533
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3537
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3543
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3555
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3559
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3564
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3568
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3578
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3582
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3591
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3595
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3601
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3605
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3611
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3620
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3630
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3634
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3640
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3644
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3650
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3657
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3666
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3670
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3675
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3679
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3684
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3688
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3698
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3702
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3713
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3721
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3729
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3737
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3748
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3758
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3768
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3772
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3777
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3781
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3786
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3790
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3796
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3800
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3804
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3810
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3814
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3818
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3822
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3826
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3830
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3834
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3838
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3842
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3846
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3850
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3854
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3858
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3862
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3866
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3870
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3874
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3878
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3882
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3886
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3890
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3894
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3898
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3902
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3906
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3910
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3914
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3918
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3922
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3929
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3933
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3939
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3944
		{
			yyVAL.str = ""
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3948
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3952
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3958
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3962
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3966
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3970
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3974
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3978
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3992
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3996
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4005
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4010
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4016
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4023
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:4027
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4033
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4037
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4043
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4053
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4059
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4068
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4077
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4100
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4109
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:4119
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4127
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4133
		{
			yyVAL.str = ""
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4137
		{
			yyVAL.str = yyDollar[1].str
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4147
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4153
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4159
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4173
		{
			yyVAL.str = ""
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4180
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4186
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4190
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4194
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4205
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4209
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4213
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4218
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4222
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4228
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4232
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4238
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4242
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4246
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4250
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4254
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4258
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4262
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4266
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4270
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4274
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4278
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4282
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4286
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4296
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4300
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4305
		{
			yyVAL.str = ""
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4309
		{
			yyVAL.str = yyDollar[1].str
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4315
		{
			yyVAL.str = ""
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4319
		{
			yyVAL.str = yyDollar[2].str
		}
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4325
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4336
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4346
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4353
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4360
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4367
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4376
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4382
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4388
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4392
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4396
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4400
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4404
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4409
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4416
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4420
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4424
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4429
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4433
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4438
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4442
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4458
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4464
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4468
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4472
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4476
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4480
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4484
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4488
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4492
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4496
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4500
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4504
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4508
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4512
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4518
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4522
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4526
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4530
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4534
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4538
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4542
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4546
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4550
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4554
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4558
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4562
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4567
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4575
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4579
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4583
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4592
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4596
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4600
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4604
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4609
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4613
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4618
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4622
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4628
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4632
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4638
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4648
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4665
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4682
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4695
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4708
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4720
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4734
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4749
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4764
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4781
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4796
		{
		}
	case 832:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4802
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4811
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4819
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4827
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4836
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4845
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4854
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4863
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4872
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4881
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4890
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4899
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4908
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4917
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4926
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4942
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4950
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4958
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4966
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4974
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4983
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4991
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5000
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5009
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5017
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5025
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5034
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5054
		{
			yyVAL.str = yyDollar[1].str
		}
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5090
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5102
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5116
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5124
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5131
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5138
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5150
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5158
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5169
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5178
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5187
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5195
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5205
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5213
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5221
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5231
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5235
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5241
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5245
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5264
		{
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5266
		{
		}
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5306
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5316
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5320
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5324
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5330
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5335
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5339
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5345
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5349
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5356
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5360
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5364
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5372
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5376
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5380
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5384
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5388
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5393
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5398
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5404
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5408
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5412
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5416
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5423
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5433
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5437
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5441
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5445
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5449
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5453
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5457
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5461
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5467
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5471
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5477
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5481
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5488
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5492
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5496
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5502
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5506
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5510
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5514
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5518
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5522
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5526
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5532
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5536
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5540
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5544
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5550
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5554
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5567
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5572
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5576
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5580
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5584
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5598
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5602
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5616
		{
			yyLOCAL = tree.NewParamExpr(yyp)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5622
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5633
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5638
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5644
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5656
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5668
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5680
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5693
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5706
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5719
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5732
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5745
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5758
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5771
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5784
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5797
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5810
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5825
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5848
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5885
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5933
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5950
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5962
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5977
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5997
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6017
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6033
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6046
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6059
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6072
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6085
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6097
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6109
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6121
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6133
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6145
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6157
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6169
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6181
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6193
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6206
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6221
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6244
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6249
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6255
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6262
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6266
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6271
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6275
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6281
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6287
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6294
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6301
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6310
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6317
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6324
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6333
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6337
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6341
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6347
		{
		}
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6349
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6359
		{
			yyVAL.str = ""
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6363
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
