// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CROSS_L2 = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const INCREMENT = 57659
const CYCLE = 57660
const MINVALUE = 57661
const PUBLICATION = 57662
const SUBSCRIPTIONS = 57663
const PUBLICATIONS = 57664
const PROPERTIES = 57665
const PARSER = 57666
const VISIBLE = 57667
const INVISIBLE = 57668
const BTREE = 57669
const HASH = 57670
const RTREE = 57671
const BSI = 57672
const IVFFLAT = 57673
const MASTER = 57674
const ZONEMAP = 57675
const LEADING = 57676
const BOTH = 57677
const TRAILING = 57678
const UNKNOWN = 57679
const LISTS = 57680
const OP_TYPE = 57681
const REINDEX = 57682
const EXPIRE = 57683
const ACCOUNT = 57684
const ACCOUNTS = 57685
const UNLOCK = 57686
const DAY = 57687
const NEVER = 57688
const PUMP = 57689
const MYSQL_COMPATIBILITY_MODE = 57690
const UNIQUE_CHECK_ON_AUTOINCR = 57691
const MODIFY = 57692
const CHANGE = 57693
const SECOND = 57694
const ASCII = 57695
const COALESCE = 57696
const COLLATION = 57697
const HOUR = 57698
const MICROSECOND = 57699
const MINUTE = 57700
const MONTH = 57701
const QUARTER = 57702
const REPEAT = 57703
const REVERSE = 57704
const ROW_COUNT = 57705
const WEEK = 57706
const REVOKE = 57707
const FUNCTION = 57708
const PRIVILEGES = 57709
const TABLESPACE = 57710
const EXECUTE = 57711
const SUPER = 57712
const GRANT = 57713
const OPTION = 57714
const REFERENCES = 57715
const REPLICATION = 57716
const SLAVE = 57717
const CLIENT = 57718
const USAGE = 57719
const RELOAD = 57720
const FILE = 57721
const TEMPORARY = 57722
const ROUTINE = 57723
const EVENT = 57724
const SHUTDOWN = 57725
const NULLX = 57726
const AUTO_INCREMENT = 57727
const APPROXNUM = 57728
const SIGNED = 57729
const UNSIGNED = 57730
const ZEROFILL = 57731
const ENGINES = 57732
const LOW_CARDINALITY = 57733
const AUTOEXTEND_SIZE = 57734
const ADMIN_NAME = 57735
const RANDOM = 57736
const SUSPEND = 57737
const ATTRIBUTE = 57738
const HISTORY = 57739
const REUSE = 57740
const CURRENT = 57741
const OPTIONAL = 57742
const FAILED_LOGIN_ATTEMPTS = 57743
const PASSWORD_LOCK_TIME = 57744
const UNBOUNDED = 57745
const SECONDARY = 57746
const RESTRICTED = 57747
const USER = 57748
const IDENTIFIED = 57749
const CIPHER = 57750
const ISSUER = 57751
const X509 = 57752
const SUBJECT = 57753
const SAN = 57754
const REQUIRE = 57755
const SSL = 57756
const NONE = 57757
const PASSWORD = 57758
const SHARED = 57759
const EXCLUSIVE = 57760
const MAX_QUERIES_PER_HOUR = 57761
const MAX_UPDATES_PER_HOUR = 57762
const MAX_CONNECTIONS_PER_HOUR = 57763
const MAX_USER_CONNECTIONS = 57764
const FORMAT = 57765
const VERBOSE = 57766
const CONNECTION = 57767
const TRIGGERS = 57768
const PROFILES = 57769
const LOAD = 57770
const INLINE = 57771
const INFILE = 57772
const TERMINATED = 57773
const OPTIONALLY = 57774
const ENCLOSED = 57775
const ESCAPED = 57776
const STARTING = 57777
const LINES = 57778
const ROWS = 57779
const IMPORT = 57780
const DISCARD = 57781
const JSONTYPE = 57782
const MODUMP = 57783
const OVER = 57784
const PRECEDING = 57785
const FOLLOWING = 57786
const GROUPS = 57787
const DATABASES = 57788
const TABLES = 57789
const SEQUENCES = 57790
const EXTENDED = 57791
const FULL = 57792
const PROCESSLIST = 57793
const FIELDS = 57794
const COLUMNS = 57795
const OPEN = 57796
const ERRORS = 57797
const WARNINGS = 57798
const INDEXES = 57799
const SCHEMAS = 57800
const NODE = 57801
const LOCKS = 57802
const ROLES = 57803
const TABLE_NUMBER = 57804
const COLUMN_NUMBER = 57805
const TABLE_VALUES = 57806
const TABLE_SIZE = 57807
const NAMES = 57808
const GLOBAL = 57809
const PERSIST = 57810
const SESSION = 57811
const ISOLATION = 57812
const LEVEL = 57813
const READ = 57814
const WRITE = 57815
const ONLY = 57816
const REPEATABLE = 57817
const COMMITTED = 57818
const UNCOMMITTED = 57819
const SERIALIZABLE = 57820
const LOCAL = 57821
const EVENTS = 57822
const PLUGINS = 57823
const CURRENT_TIMESTAMP = 57824
const DATABASE = 57825
const CURRENT_TIME = 57826
const LOCALTIME = 57827
const LOCALTIMESTAMP = 57828
const UTC_DATE = 57829
const UTC_TIME = 57830
const UTC_TIMESTAMP = 57831
const REPLACE = 57832
const CONVERT = 57833
const SEPARATOR = 57834
const TIMESTAMPDIFF = 57835
const CURRENT_DATE = 57836
const CURRENT_USER = 57837
const CURRENT_ROLE = 57838
const SECOND_MICROSECOND = 57839
const MINUTE_MICROSECOND = 57840
const MINUTE_SECOND = 57841
const HOUR_MICROSECOND = 57842
const HOUR_SECOND = 57843
const HOUR_MINUTE = 57844
const DAY_MICROSECOND = 57845
const DAY_SECOND = 57846
const DAY_MINUTE = 57847
const DAY_HOUR = 57848
const YEAR_MONTH = 57849
const SQL_TSI_HOUR = 57850
const SQL_TSI_DAY = 57851
const SQL_TSI_WEEK = 57852
const SQL_TSI_MONTH = 57853
const SQL_TSI_QUARTER = 57854
const SQL_TSI_YEAR = 57855
const SQL_TSI_SECOND = 57856
const SQL_TSI_MINUTE = 57857
const RECURSIVE = 57858
const CONFIG = 57859
const DRAINER = 57860
const SOURCE = 57861
const STREAM = 57862
const HEADERS = 57863
const CONNECTOR = 57864
const CONNECTORS = 57865
const DAEMON = 57866
const PAUSE = 57867
const CANCEL = 57868
const TASK = 57869
const RESUME = 57870
const MATCH = 57871
const AGAINST = 57872
const BOOLEAN = 57873
const LANGUAGE = 57874
const WITH = 57875
const QUERY = 57876
const EXPANSION = 57877
const WITHOUT = 57878
const VALIDATION = 57879
const UPGRADE = 57880
const RETRY = 57881
const ADDDATE = 57882
const BIT_AND = 57883
const BIT_OR = 57884
const BIT_XOR = 57885
const CAST = 57886
const COUNT = 57887
const APPROX_COUNT = 57888
const APPROX_COUNT_DISTINCT = 57889
const SERIAL_EXTRACT = 57890
const APPROX_PERCENTILE = 57891
const CURDATE = 57892
const CURTIME = 57893
const DATE_ADD = 57894
const DATE_SUB = 57895
const EXTRACT = 57896
const GROUP_CONCAT = 57897
const MAX = 57898
const MID = 57899
const MIN = 57900
const NOW = 57901
const POSITION = 57902
const SESSION_USER = 57903
const STD = 57904
const STDDEV = 57905
const MEDIAN = 57906
const CLUSTER_CENTERS = 57907
const KMEANS = 57908
const STDDEV_POP = 57909
const STDDEV_SAMP = 57910
const SUBDATE = 57911
const SUBSTR = 57912
const SUBSTRING = 57913
const SUM = 57914
const SYSDATE = 57915
const SYSTEM_USER = 57916
const TRANSLATE = 57917
const TRIM = 57918
const VARIANCE = 57919
const VAR_POP = 57920
const VAR_SAMP = 57921
const AVG = 57922
const RANK = 57923
const ROW_NUMBER = 57924
const DENSE_RANK = 57925
const BIT_CAST = 57926
const BITMAP_BIT_POSITION = 57927
const BITMAP_BUCKET_NUMBER = 57928
const BITMAP_COUNT = 57929
const BITMAP_CONSTRUCT_AGG = 57930
const BITMAP_OR_AGG = 57931
const NEXTVAL = 57932
const SETVAL = 57933
const CURRVAL = 57934
const LASTVAL = 57935
const ARROW = 57936
const ROW = 57937
const OUTFILE = 57938
const HEADER = 57939
const MAX_FILE_SIZE = 57940
const FORCE_QUOTE = 57941
const PARALLEL = 57942
const STRICT = 57943
const UNUSED = 57944
const BINDINGS = 57945
const DO = 57946
const DECLARE = 57947
const LOOP = 57948
const WHILE = 57949
const LEAVE = 57950
const ITERATE = 57951
const UNTIL = 57952
const CALL = 57953
const PREV = 57954
const SLIDING = 57955
const FILL = 57956
const SPBEGIN = 57957
const BACKEND = 57958
const SERVERS = 57959
const HANDLER = 57960
const PERCENT = 57961
const SAMPLE = 57962
const MO_TS = 57963
const PITR = 57964
const RECOVERY_WINDOW = 57965
const CDC = 57966
const GROUPING = 57967
const SETS = 57968
const CUBE = 57969
const ROLLUP = 57970
const LOGSERVICE = 57971
const REPLICAS = 57972
const STORES = 57973
const SETTINGS = 57974
const KILL = 57975
const BACKUP = 57976
const FILESYSTEM = 57977
const PARALLELISM = 57978
const RESTORE = 57979
const QUERY_RESULT = 57980

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12871

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	11, 810,
	22, 810,
	-2, 803,
	-1, 167,
	246, 1237,
	248, 1136,
	-2, 1183,
	-1, 194,
	44, 633,
	248, 633,
	275, 640,
	276, 640,
	474, 633,
	-2, 668,
	-1, 234,
	659, 2009,
	-2, 532,
	-1, 543,
	659, 2133,
	-2, 412,
	-1, 601,
	659, 2192,
	-2, 410,
	-1, 602,
	659, 2193,
	-2, 411,
	-1, 603,
	659, 2194,
	-2, 413,
	-1, 743,
	327, 181,
	446, 181,
	447, 181,
	-2, 1911,
	-1, 810,
	86, 1696,
	-2, 2069,
	-1, 811,
	86, 1715,
	-2, 2040,
	-1, 815,
	86, 1716,
	-2, 2068,
	-1, 849,
	86, 1623,
	-2, 2272,
	-1, 850,
	86, 1624,
	-2, 2271,
	-1, 851,
	86, 1625,
	-2, 2261,
	-1, 852,
	86, 2233,
	-2, 2254,
	-1, 853,
	86, 2234,
	-2, 2255,
	-1, 854,
	86, 2235,
	-2, 2263,
	-1, 855,
	86, 2236,
	-2, 2243,
	-1, 856,
	86, 2237,
	-2, 2252,
	-1, 857,
	86, 2238,
	-2, 2264,
	-1, 858,
	86, 2239,
	-2, 2265,
	-1, 859,
	86, 2240,
	-2, 2270,
	-1, 860,
	86, 2241,
	-2, 2275,
	-1, 861,
	86, 2242,
	-2, 2276,
	-1, 862,
	86, 1692,
	-2, 2107,
	-1, 863,
	86, 1693,
	-2, 1895,
	-1, 864,
	86, 1694,
	-2, 2116,
	-1, 865,
	86, 1695,
	-2, 1904,
	-1, 867,
	86, 1698,
	-2, 1912,
	-1, 869,
	86, 1700,
	-2, 2140,
	-1, 871,
	86, 1703,
	-2, 1931,
	-1, 873,
	86, 1705,
	-2, 2152,
	-1, 874,
	86, 1706,
	-2, 2151,
	-1, 875,
	86, 1707,
	-2, 1976,
	-1, 876,
	86, 1708,
	-2, 2064,
	-1, 879,
	86, 1711,
	-2, 2163,
	-1, 881,
	86, 1713,
	-2, 2166,
	-1, 882,
	86, 1714,
	-2, 2168,
	-1, 883,
	86, 1717,
	-2, 2176,
	-1, 884,
	86, 1718,
	-2, 2049,
	-1, 885,
	86, 1719,
	-2, 2094,
	-1, 886,
	86, 1720,
	-2, 2059,
	-1, 887,
	86, 1721,
	-2, 2084,
	-1, 898,
	86, 1601,
	-2, 2266,
	-1, 899,
	86, 1602,
	-2, 2267,
	-1, 900,
	86, 1603,
	-2, 2268,
	-1, 1005,
	469, 668,
	470, 668,
	-2, 634,
	-1, 1056,
	128, 1895,
	139, 1895,
	159, 1895,
	-2, 1869,
	-1, 1177,
	22, 837,
	-2, 786,
	-1, 1287,
	11, 810,
	22, 810,
	-2, 1478,
	-1, 1371,
	22, 837,
	-2, 786,
	-1, 1731,
	86, 1768,
	-2, 2066,
	-1, 1732,
	86, 1769,
	-2, 2067,
	-1, 1907,
	87, 1008,
	-2, 1014,
	-1, 2363,
	111, 1175,
	155, 1175,
	195, 1175,
	198, 1175,
	288, 1175,
	-2, 1168,
	-1, 2527,
	11, 810,
	22, 810,
	-2, 949,
	-1, 2561,
	87, 1855,
	160, 1855,
	-2, 2051,
	-1, 2562,
	87, 1855,
	160, 1855,
	-2, 2050,
	-1, 2563,
	87, 1831,
	160, 1831,
	-2, 2037,
	-1, 2564,
	87, 1832,
	160, 1832,
	-2, 2042,
	-1, 2565,
	87, 1833,
	160, 1833,
	-2, 1964,
	-1, 2566,
	87, 1834,
	160, 1834,
	-2, 1958,
	-1, 2567,
	87, 1835,
	160, 1835,
	-2, 1885,
	-1, 2568,
	87, 1836,
	160, 1836,
	-2, 2039,
	-1, 2569,
	87, 1837,
	160, 1837,
	-2, 1962,
	-1, 2570,
	87, 1838,
	160, 1838,
	-2, 1957,
	-1, 2571,
	87, 1839,
	160, 1839,
	-2, 1945,
	-1, 2572,
	87, 1855,
	160, 1855,
	-2, 1946,
	-1, 2573,
	87, 1855,
	160, 1855,
	-2, 1947,
	-1, 2575,
	87, 1844,
	160, 1844,
	-2, 2084,
	-1, 2576,
	87, 1821,
	160, 1821,
	-2, 2069,
	-1, 2577,
	87, 1853,
	160, 1853,
	-2, 2040,
	-1, 2578,
	87, 1853,
	160, 1853,
	-2, 2068,
	-1, 2579,
	87, 1853,
	160, 1853,
	-2, 1913,
	-1, 2580,
	87, 1851,
	160, 1851,
	-2, 2059,
	-1, 2581,
	87, 1848,
	160, 1848,
	-2, 1936,
	-1, 2582,
	86, 1802,
	87, 1802,
	160, 1802,
	404, 1802,
	405, 1802,
	406, 1802,
	-2, 1884,
	-1, 2583,
	86, 1803,
	87, 1803,
	160, 1803,
	404, 1803,
	405, 1803,
	406, 1803,
	-2, 1886,
	-1, 2584,
	86, 1804,
	87, 1804,
	160, 1804,
	404, 1804,
	405, 1804,
	406, 1804,
	-2, 2112,
	-1, 2585,
	86, 1806,
	87, 1806,
	160, 1806,
	404, 1806,
	405, 1806,
	406, 1806,
	-2, 2041,
	-1, 2586,
	86, 1808,
	87, 1808,
	160, 1808,
	404, 1808,
	405, 1808,
	406, 1808,
	-2, 2019,
	-1, 2587,
	86, 1810,
	87, 1810,
	160, 1810,
	404, 1810,
	405, 1810,
	406, 1810,
	-2, 1963,
	-1, 2588,
	86, 1812,
	87, 1812,
	160, 1812,
	404, 1812,
	405, 1812,
	406, 1812,
	-2, 1941,
	-1, 2589,
	86, 1813,
	87, 1813,
	160, 1813,
	404, 1813,
	405, 1813,
	406, 1813,
	-2, 1942,
	-1, 2590,
	86, 1815,
	87, 1815,
	160, 1815,
	404, 1815,
	405, 1815,
	406, 1815,
	-2, 1883,
	-1, 2591,
	87, 1858,
	160, 1858,
	404, 1858,
	405, 1858,
	406, 1858,
	-2, 1918,
	-1, 2592,
	87, 1858,
	160, 1858,
	404, 1858,
	405, 1858,
	406, 1858,
	-2, 1932,
	-1, 2593,
	87, 1861,
	160, 1861,
	404, 1861,
	405, 1861,
	406, 1861,
	-2, 1914,
	-1, 2594,
	87, 1861,
	160, 1861,
	404, 1861,
	405, 1861,
	406, 1861,
	-2, 1979,
	-1, 2595,
	87, 1858,
	160, 1858,
	404, 1858,
	405, 1858,
	406, 1858,
	-2, 2001,
	-1, 2815,
	111, 1175,
	155, 1175,
	195, 1175,
	198, 1175,
	288, 1175,
	-2, 1169,
	-1, 2833,
	84, 730,
	160, 730,
	-2, 1353,
	-1, 3262,
	198, 1175,
	312, 1441,
	-2, 1413,
	-1, 3447,
	111, 1175,
	155, 1175,
	195, 1175,
	198, 1175,
	-2, 1293,
	-1, 3449,
	111, 1175,
	155, 1175,
	195, 1175,
	198, 1175,
	-2, 1293,
	-1, 3461,
	84, 730,
	160, 730,
	-2, 1353,
	-1, 3482,
	198, 1175,
	312, 1441,
	-2, 1414,
	-1, 3636,
	111, 1175,
	155, 1175,
	195, 1175,
	198, 1175,
	-2, 1294,
	-1, 3664,
	87, 1255,
	160, 1255,
	-2, 1175,
	-1, 3809,
	87, 1255,
	160, 1255,
	-2, 1175,
	-1, 3974,
	87, 1259,
	160, 1259,
	-2, 1175,
	-1, 4025,
	87, 1260,
	160, 1260,
	-2, 1175,
}

const yyPrivate = 57344

const yyLast = 55228

var yyAct = [...]int{
	777, 753, 4075, 779, 4047, 2864, 223, 4067, 1632, 1995,
	3978, 3984, 3467, 3985, 1711, 3566, 3977, 3281, 3876, 3809,
	3248, 3899, 762, 3856, 3934, 3692, 3355, 3496, 2858, 1707,
	755, 1544, 3756, 3787, 3847, 1323, 3808, 3356, 3877, 3624,
	1771, 3725, 807, 1055, 2861, 37, 643, 1178, 3570, 1476,
	3778, 2778, 3429, 3857, 3859, 1482, 3434, 1940, 3561, 1758,
	3645, 3257, 2413, 661, 1773, 667, 667, 3633, 3219, 1714,
	3483, 667, 685, 694, 3205, 1172, 694, 3606, 3450, 2836,
	3181, 3353, 3638, 2977, 208, 751, 68, 3208, 3421, 2976,
	2090, 2106, 2559, 2093, 2975, 2953, 2887, 1776, 3277, 3259,
	3266, 2685, 3452, 2972, 2129, 2055, 3044, 2521, 2557, 3398,
	2416, 3004, 3321, 2204, 1955, 2804, 2161, 691, 2964, 3182,
	3188, 3184, 3186, 3183, 1168, 3265, 1537, 702, 3228, 2374,
	2816, 706, 141, 2650, 36, 2342, 3179, 2318, 750, 745,
	3092, 3152, 2628, 1869, 1633, 2187, 3018, 1621, 1610, 2317,
	1617, 2170, 2169, 935, 2200, 2134, 2162, 2610, 2199, 2522,
	1441, 2505, 1625, 1622, 2086, 2059, 2793, 2788, 2889, 2500,
	976, 2414, 219, 8, 218, 7, 2363, 2373, 6, 1916,
	1710, 1116, 2555, 2869, 2234, 1705, 754, 1584, 2201, 1408,
	660, 1553, 1772, 1522, 1516, 1765, 2354, 1654, 2409, 643,
	1954, 1049, 2828, 2722, 1985, 763, 1745, 744, 2056, 2357,
	1696, 15, 2168, 1194, 2165, 2150, 1636, 1485, 1912, 1591,
	699, 33, 1704, 223, 1048, 223, 2529, 1107, 1108, 1521,
	1915, 975, 1575, 676, 667, 2501, 1477, 1518, 1014, 708,
	752, 902, 1777, 209, 115, 1465, 679, 642, 1087, 201,
	709, 693, 24, 952, 23, 1461, 17, 973, 10, 705,
	958, 1369, 205, 904, 2208, 905, 1393, 3866, 1324, 3775,
	2758, 2758, 1000, 2758, 2531, 663, 2721, 1104, 1447, 1255,
	1256, 1257, 1254, 689, 746, 1255, 1256, 1257, 1254, 1064,
	27, 3464, 3364, 687, 1255, 1256, 1257, 1254, 3235, 3061,
	3060, 2218, 966, 1173, 967, 984, 3597, 1103, 3437, 1105,
	3348, 16, 1174, 2673, 1882, 2616, 2614, 2613, 672, 2611,
	1598, 1594, 1099, 1100, 207, 662, 2316, 697, 1444, 1445,
	1446, 1520, 3834, 14, 1034, 1061, 1388, 1063, 1362, 924,
	922, 668, 1647, 947, 3162, 2322, 1100, 1173, 2326, 1100,
	1391, 1883, 3145, 3142, 3147, 3144, 4059, 961, 1499, 957,
	2750, 2748, 690, 1876, 1384, 1596, 3559, 1255, 1256, 1257,
	1254, 1255, 1256, 1257, 1254, 3040, 3038, 980, 981, 2139,
	8, 746, 7, 686, 3842, 3732, 1098, 3726, 1024, 1082,
	3562, 3354, 2184, 3861, 1318, 2164, 903, 3121, 2156, 2454,
	4081, 3855, 4056, 914, 2752, 688, 206, 3740, 1253, 3576,
	2364, 3794, 1399, 206, 1217, 938, 206, 3611, 206, 64,
	197, 168, 206, 3960, 4013, 2659, 3607, 2667, 3451, 2822,
	2365, 206, 206, 64, 197, 168, 2205, 1631, 3853, 923,
	921, 1640, 3762, 3738, 2703, 1561, 3910, 206, 1398, 1394,
	1652, 206, 64, 197, 168, 3795, 1397, 1396, 206, 1486,
	206, 1083, 3064, 924, 704, 1059, 922, 1060, 1811, 1065,
	1433, 1637, 1026, 1400, 3119, 1025, 1645, 2216, 1948, 2820,
	1649, 1697, 1029, 1027, 1701, 1028, 202, 3764, 2970, 202,
	963, 202, 956, 1416, 1885, 1639, 3052, 2358, 1644, 2549,
	1252, 960, 959, 2550, 1651, 202, 919, 140, 1700, 140,
	2777, 1677, 915, 1523, 1010, 1525, 1189, 3011, 941, 2069,
	202, 2103, 948, 985, 202, 206, 64, 197, 168, 2823,
	3252, 202, 2773, 202, 3146, 3143, 1077, 1072, 1067, 1071,
	1075, 893, 955, 892, 894, 895, 2629, 896, 897, 1495,
	987, 1023, 1496, 206, 64, 197, 168, 2536, 3012, 3013,
	2535, 965, 2790, 2537, 1080, 3586, 954, 1969, 1070, 1713,
	953, 2446, 2791, 1035, 1232, 1473, 940, 1233, 206, 64,
	197, 168, 946, 2070, 2071, 2775, 3957, 1894, 1895, 1250,
	1663, 1946, 1483, 1484, 1702, 1031, 3250, 1481, 202, 1058,
	1057, 1480, 1483, 1484, 944, 1235, 3864, 2770, 3864, 3948,
	1597, 1595, 1451, 3863, 2753, 1009, 1007, 3862, 1699, 1078,
	2305, 2789, 1245, 2774, 3863, 3947, 202, 1415, 1081, 3953,
	3988, 3989, 3862, 3946, 4012, 4051, 4052, 1006, 3873, 3845,
	1498, 3936, 964, 1186, 2654, 2771, 3046, 3045, 3047, 979,
	1068, 202, 3848, 3849, 3850, 3851, 167, 1686, 204, 1033,
	986, 1019, 1183, 3357, 3939, 667, 667, 3936, 945, 3962,
	3963, 3729, 3357, 2220, 1079, 1717, 667, 1182, 2908, 194,
	3371, 2087, 3958, 3959, 1015, 2796, 3422, 1230, 1197, 1200,
	2212, 3616, 2077, 1692, 3201, 3427, 694, 694, 2489, 667,
	2965, 2147, 2353, 2495, 3082, 3585, 1197, 1200, 3766, 3767,
	964, 1604, 1603, 3587, 1069, 2780, 1248, 1249, 2664, 3508,
	1016, 1020, 3955, 3080, 1247, 193, 691, 691, 691, 2751,
	2452, 1220, 1947, 2217, 1110, 1698, 1032, 3560, 3039, 2959,
	1003, 1181, 1001, 1005, 1023, 962, 1509, 2491, 1002, 999,
	998, 1231, 1004, 989, 990, 988, 991, 992, 993, 994,
	1387, 1021, 1295, 1022, 2776, 3865, 2212, 3774, 3374, 3086,
	1064, 2757, 3771, 703, 1017, 1018, 2101, 2102, 3280, 1471,
	1417, 1192, 2492, 2493, 951, 3613, 2772, 3987, 3748, 1174,
	3749, 1076, 3195, 1175, 1716, 1715, 1174, 2552, 3719, 2081,
	3402, 1174, 2498, 1497, 2206, 2195, 3743, 1242, 3199, 1182,
	917, 1013, 3206, 659, 2323, 2206, 1061, 1012, 1063, 3523,
	1884, 3577, 3254, 3062, 3520, 4020, 2206, 1073, 1234, 3059,
	1074, 3217, 1008, 3229, 2207, 1212, 1243, 1244, 2239, 1327,
	3799, 1100, 3791, 1064, 3751, 1174, 1100, 1100, 918, 1100,
	692, 3892, 1100, 1100, 1237, 740, 3887, 1238, 742, 3793,
	3278, 3279, 2829, 741, 3196, 3197, 2219, 2955, 2484, 1225,
	696, 695, 1227, 1328, 2612, 1030, 3750, 3961, 1599, 1188,
	3198, 2968, 2360, 692, 939, 1240, 937, 1199, 1198, 1061,
	3513, 1063, 689, 689, 689, 3720, 1723, 1726, 1727, 3153,
	1228, 1289, 687, 687, 687, 1199, 1198, 1724, 3193, 3878,
	1011, 3894, 65, 1483, 1484, 3739, 982, 983, 977, 1390,
	903, 1392, 3765, 978, 3468, 3207, 2749, 1185, 1187, 1190,
	1084, 3249, 1066, 1404, 3900, 1177, 1176, 1407, 1060, 1201,
	1170, 1413, 661, 169, 1646, 65, 3612, 1205, 1206, 1367,
	169, 1209, 1372, 169, 3475, 169, 2668, 692, 2863, 169,
	1395, 1687, 203, 1211, 1688, 1460, 3413, 1236, 169, 169,
	1296, 690, 690, 690, 2337, 976, 2419, 1886, 3283, 1483,
	1484, 1191, 1221, 3524, 169, 692, 3760, 3603, 169, 920,
	3410, 3169, 686, 686, 686, 169, 3207, 169, 1291, 1292,
	1293, 1294, 3800, 2795, 3792, 1472, 1241, 2487, 1223, 3872,
	692, 3748, 3202, 3749, 688, 688, 688, 2966, 2432, 65,
	1226, 1229, 2088, 3083, 2412, 2435, 3683, 3768, 4087, 2464,
	667, 1239, 2463, 1511, 3412, 2859, 2860, 667, 2863, 3573,
	1203, 643, 643, 966, 2552, 967, 1222, 65, 3954, 1479,
	2802, 643, 643, 3672, 3255, 1548, 1548, 3678, 667, 1458,
	2799, 2800, 169, 2223, 2225, 2226, 3617, 3751, 2909, 1533,
	2910, 2911, 65, 1532, 4070, 2798, 1210, 1024, 1457, 694,
	1576, 661, 2434, 1456, 1546, 1546, 1587, 1550, 1339, 1340,
	169, 2078, 1693, 2808, 2811, 2812, 2813, 2809, 2810, 3750,
	3901, 223, 3744, 2485, 2486, 3779, 3745, 1555, 1475, 1474,
	643, 3976, 3813, 3194, 3258, 169, 1169, 2418, 3141, 2693,
	2937, 3215, 2420, 1224, 3278, 3279, 2455, 2433, 1410, 1411,
	3453, 2412, 1414, 3557, 1420, 1421, 1422, 1423, 1424, 1286,
	1426, 3006, 3008, 1725, 929, 3360, 1432, 1510, 1160, 1156,
	1157, 1158, 1159, 1409, 2698, 704, 2697, 2696, 2694, 3933,
	3274, 1026, 1629, 1519, 1025, 3157, 1371, 1634, 1373, 2429,
	1217, 2660, 2541, 3282, 1643, 2450, 2421, 2209, 2076, 1542,
	1543, 3693, 3694, 3695, 3699, 3697, 3698, 3696, 2053, 1406,
	1425, 3023, 3024, 3312, 3085, 933, 2422, 1431, 2080, 1430,
	931, 930, 2763, 1675, 1419, 1888, 1429, 1428, 1036, 3415,
	698, 3275, 3685, 3399, 1638, 4071, 1024, 1548, 2906, 1548,
	1182, 1650, 2221, 2222, 1653, 2644, 2695, 970, 971, 972,
	1438, 968, 1440, 2767, 691, 1418, 2330, 691, 691, 1467,
	1468, 1403, 1527, 1529, 1443, 3812, 1670, 1671, 2235, 1897,
	1685, 1898, 1540, 1541, 3216, 1064, 3094, 3093, 936, 1450,
	1216, 3595, 1064, 1605, 2338, 3159, 1608, 1459, 1611, 1612,
	2329, 1577, 1500, 1501, 1469, 1487, 1896, 932, 1490, 925,
	1613, 1614, 1488, 1489, 1712, 1491, 1492, 1548, 1493, 1619,
	1620, 2332, 2331, 3975, 1531, 1642, 3679, 3680, 2928, 2929,
	1026, 2476, 965, 1025, 1182, 1775, 1401, 1402, 3674, 926,
	2224, 1600, 3673, 3646, 672, 3007, 1759, 1806, 1807, 1824,
	1810, 1624, 1627, 1556, 1628, 3744, 1568, 1452, 1825, 3858,
	1574, 2423, 4083, 1562, 4089, 1588, 3943, 2519, 1452, 1674,
	1253, 1832, 3318, 1834, 1589, 1835, 1836, 1837, 1673, 4068,
	4069, 1095, 1096, 1097, 1733, 1734, 1735, 1736, 1737, 1738,
	1739, 1740, 1741, 1742, 1743, 1744, 2345, 2699, 2700, 4077,
	1756, 1757, 2552, 1709, 4065, 2938, 2940, 2941, 2942, 2939,
	2356, 3361, 3314, 2428, 2834, 1094, 1182, 2426, 1091, 2346,
	2347, 1179, 1887, 2128, 1690, 1217, 1890, 1706, 1892, 1728,
	689, 1024, 4027, 689, 689, 2214, 1899, 1901, 1809, 1902,
	687, 1904, 1905, 687, 687, 1656, 1576, 1867, 3276, 1833,
	3999, 1913, 1548, 1918, 1919, 2927, 1921, 1511, 667, 1037,
	1694, 2764, 2631, 667, 1889, 1662, 1548, 1179, 1665, 1666,
	976, 1661, 4078, 1941, 1664, 2449, 3418, 4028, 747, 1684,
	1878, 1462, 1466, 1466, 1466, 1703, 1548, 1682, 1814, 1815,
	1816, 1681, 1511, 1678, 1870, 2520, 2392, 685, 1708, 2520,
	1823, 1830, 1695, 3373, 1831, 4028, 1462, 1462, 2273, 690,
	3318, 2272, 690, 690, 1214, 1026, 1747, 1968, 1025, 3996,
	3990, 1844, 1845, 4000, 3972, 1683, 1975, 1975, 2355, 1511,
	686, 1511, 1511, 686, 686, 667, 667, 1215, 2042, 1913,
	2046, 1866, 2248, 1548, 2050, 2051, 1680, 2310, 2659, 2066,
	3927, 643, 688, 1754, 1755, 688, 688, 2835, 3926, 1255,
	1256, 1257, 1254, 3287, 929, 643, 2126, 1548, 1679, 3920,
	1253, 1922, 1255, 1256, 1257, 1254, 1972, 3285, 1088, 1089,
	1090, 1093, 3151, 1092, 1253, 3234, 1920, 1255, 1256, 1257,
	1254, 1215, 3997, 2249, 667, 1913, 1548, 3973, 2111, 1873,
	667, 667, 667, 702, 702, 3117, 1255, 1256, 1257, 1254,
	2121, 2122, 2123, 2124, 1838, 928, 1368, 2130, 2247, 1997,
	931, 930, 3149, 1253, 223, 1453, 2520, 223, 223, 3895,
	223, 1253, 1917, 2391, 2044, 2104, 1909, 1910, 1911, 1874,
	1868, 3026, 2249, 1978, 2782, 1217, 1933, 2754, 1924, 1925,
	1926, 1927, 2245, 907, 908, 909, 910, 907, 908, 909,
	910, 2835, 3883, 2096, 2097, 3832, 1949, 3831, 3826, 2649,
	1824, 1824, 2172, 2636, 3825, 3824, 2205, 3823, 1908, 2068,
	3803, 3802, 1824, 1824, 2073, 2405, 2075, 3777, 2315, 2189,
	3529, 2113, 2114, 2115, 2309, 2082, 3477, 2094, 2095, 1101,
	1102, 1938, 2214, 2308, 1106, 1937, 2280, 3443, 2138, 3391,
	2196, 2141, 2142, 1956, 2144, 1958, 1959, 1977, 1638, 1943,
	1944, 2089, 1941, 2049, 3387, 3295, 1548, 2203, 2110, 1965,
	1957, 1979, 1980, 2183, 1559, 3884, 2099, 3001, 3833, 2740,
	2378, 2249, 1951, 691, 2728, 2052, 1961, 2249, 2249, 2174,
	2249, 1439, 2067, 2214, 2214, 2720, 1064, 2043, 1966, 1064,
	2249, 1974, 1976, 2552, 1762, 1534, 1952, 1953, 1064, 3478,
	4096, 4079, 2675, 2048, 3464, 2054, 1706, 3030, 2837, 2197,
	3444, 3426, 3392, 1962, 1963, 2662, 2072, 2661, 2074, 2083,
	2657, 2645, 2653, 2638, 2633, 2399, 2179, 3388, 3296, 2268,
	2253, 2194, 1061, 1973, 1063, 912, 1270, 2133, 2119, 912,
	2520, 3239, 2378, 2108, 1061, 1658, 1063, 1253, 2109, 1304,
	2625, 2167, 1202, 2116, 2117, 2623, 1166, 3709, 1253, 2621,
	2619, 1504, 1505, 2167, 1507, 1508, 1161, 1512, 1513, 1514,
	2135, 1839, 1840, 1841, 1842, 1253, 3527, 1846, 1847, 1848,
	1849, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 2152, 2378, 2634, 1064, 2639, 2634, 2232, 2233,
	2377, 1563, 1564, 1565, 1566, 1567, 1286, 1569, 1570, 1571,
	1572, 1573, 2098, 3077, 2185, 1579, 1580, 1581, 1582, 2173,
	2311, 2287, 1941, 2626, 2286, 2182, 2180, 4090, 2624, 2419,
	2422, 2271, 2620, 2620, 1813, 1812, 4055, 2419, 2422, 689,
	2262, 1061, 2193, 1063, 2320, 2321, 2261, 2324, 927, 687,
	2327, 2447, 3888, 2228, 1273, 1274, 1275, 1276, 1277, 1270,
	1463, 2333, 2260, 2250, 2213, 2198, 3647, 745, 1667, 3867,
	667, 667, 667, 2378, 2192, 3776, 1462, 3230, 2191, 2303,
	2211, 2251, 3736, 3676, 3675, 667, 667, 667, 667, 3661,
	1466, 1813, 1812, 2310, 1253, 2227, 3889, 1253, 2375, 3456,
	2236, 1494, 1466, 1536, 1253, 3454, 1538, 2379, 2380, 2381,
	3648, 2384, 1511, 1253, 3620, 1747, 2229, 1539, 690, 1253,
	2241, 1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1270, 3807, 3436, 1253, 2249, 2214, 1511, 686,
	2275, 1668, 3319, 3457, 2281, 2282, 1753, 2284, 1850, 3455,
	3310, 2230, 2231, 1448, 2291, 2441, 3302, 1449, 3231, 3297,
	3210, 688, 1750, 1752, 1749, 2423, 1751, 2962, 2961, 2806,
	2418, 2412, 2417, 2423, 2415, 2420, 2759, 2672, 2418, 2412,
	2417, 1464, 2415, 2420, 3346, 2637, 2407, 1269, 1268, 1278,
	1279, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1270, 2543,
	934, 2448, 3232, 2177, 1448, 1843, 2396, 1535, 1449, 2176,
	2398, 2175, 2400, 667, 1975, 1435, 1434, 1184, 2611, 2682,
	1942, 2605, 2524, 2524, 2066, 2524, 2304, 2306, 2307, 2421,
	2136, 1766, 2312, 1255, 1256, 1257, 1254, 2421, 1255, 1256,
	1257, 1254, 1960, 3031, 3349, 643, 643, 1903, 1766, 2615,
	2242, 3945, 2401, 1182, 1255, 1256, 1257, 1254, 1967, 1548,
	667, 1970, 1971, 3347, 1257, 1254, 1255, 1256, 1257, 1254,
	2411, 3688, 2410, 667, 2339, 2684, 1592, 1254, 2136, 1182,
	2596, 661, 3687, 1327, 2651, 2652, 3048, 1587, 2547, 2066,
	2898, 3981, 2601, 2896, 2603, 2875, 2873, 223, 1255, 1256,
	1257, 1254, 4086, 2404, 3621, 3622, 3430, 2607, 3667, 2742,
	1064, 2743, 2385, 1255, 1256, 1257, 1254, 1328, 1255, 1256,
	1257, 1254, 1593, 4061, 2538, 1306, 2539, 3110, 2264, 2528,
	2526, 3614, 2530, 1255, 1256, 1257, 1254, 2641, 1305, 2388,
	4060, 1592, 3424, 2560, 2394, 2544, 2545, 2395, 2424, 2425,
	4003, 2430, 2949, 3971, 2532, 2655, 1061, 1258, 1063, 2203,
	1255, 1256, 1257, 1254, 2554, 1288, 1548, 4085, 1548, 2712,
	1548, 3970, 780, 790, 1298, 1182, 2947, 1828, 2397, 3890,
	2779, 2606, 781, 2674, 782, 786, 789, 785, 783, 784,
	3109, 3615, 1829, 3828, 2600, 3816, 3806, 2665, 2263, 3796,
	1307, 3727, 3425, 3591, 2393, 2494, 3650, 2499, 3649, 1548,
	1182, 2805, 2948, 2945, 2706, 3579, 3469, 1255, 1256, 1257,
	1254, 3458, 2533, 3423, 3298, 1255, 1256, 1257, 1254, 2713,
	1255, 1256, 1257, 1254, 1548, 2934, 2946, 787, 1546, 2669,
	2701, 3200, 1255, 1256, 1257, 1254, 1527, 1529, 3073, 3043,
	3042, 2548, 1278, 1279, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1270, 2551, 1546, 3578, 2714, 1255, 1256, 1257, 1254,
	788, 2597, 2932, 2944, 2599, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1270, 2761, 2762, 3517, 2931, 2765, 2930, 2717,
	2718, 1255, 1256, 1257, 1254, 2933, 2922, 2686, 2916, 2686,
	1530, 2915, 2112, 3096, 2914, 1182, 2913, 2755, 2690, 1182,
	2627, 2540, 1255, 1256, 1257, 1254, 1548, 2314, 2155, 1511,
	2154, 2715, 2153, 2256, 2149, 2046, 4082, 2148, 2666, 2671,
	2105, 1893, 1891, 2833, 1659, 1386, 2680, 3435, 3379, 2839,
	3187, 2647, 2840, 2656, 4080, 2704, 1706, 2658, 3769, 3770,
	3567, 2663, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1259,
	2850, 4053, 4019, 4018, 2746, 1255, 1256, 1257, 1254, 2783,
	1182, 740, 2821, 2560, 742, 2676, 2677, 4015, 2872, 741,
	3113, 1255, 1256, 1257, 1254, 1182, 1182, 1182, 1975, 2692,
	3951, 1182, 1466, 2882, 2883, 2884, 2885, 1182, 2892, 1164,
	2893, 2894, 2702, 2895, 3950, 2897, 2817, 1255, 1256, 1257,
	1254, 3112, 3757, 1064, 3931, 3875, 2892, 3111, 3625, 2818,
	1255, 1256, 1257, 1254, 2830, 3869, 3852, 3843, 2524, 1255,
	1256, 1257, 1254, 2803, 2867, 3820, 2679, 2851, 1255, 1256,
	1257, 1254, 2950, 3815, 1255, 1256, 1257, 1254, 1997, 2867,
	2878, 2879, 643, 3814, 3773, 2881, 2853, 3759, 1163, 2046,
	3758, 2888, 3728, 1182, 2066, 2066, 2066, 2066, 2066, 2066,
	2785, 3669, 2787, 3629, 3618, 2841, 3600, 3598, 2739, 3596,
	1182, 2066, 3593, 2865, 2524, 3590, 2870, 3589, 3565, 2866,
	2870, 2784, 2738, 3563, 1586, 2801, 1917, 4088, 3537, 2956,
	3009, 2246, 1548, 2824, 2877, 1255, 1256, 1257, 1254, 8,
	2832, 7, 2244, 667, 667, 2838, 3534, 3531, 2954, 1255,
	1256, 1257, 1254, 2723, 2724, 2386, 2387, 2978, 3420, 2729,
	3407, 3400, 3384, 3382, 2453, 2389, 2390, 2456, 2457, 2458,
	2459, 2460, 2461, 2462, 2978, 2868, 2465, 2466, 2467, 2468,
	2469, 2470, 2471, 2472, 2473, 2474, 2475, 2880, 2477, 2478,
	2479, 2480, 2481, 2874, 2482, 2852, 2871, 3377, 223, 2997,
	2855, 3308, 3307, 223, 3305, 2849, 3304, 2678, 3299, 1255,
	1256, 1257, 1254, 3010, 2912, 3293, 3292, 2924, 3211, 3174,
	1255, 1256, 1257, 1254, 3173, 1824, 3172, 1824, 2737, 3163,
	3058, 1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1270, 3027, 3072, 3161, 2957, 3158, 3156, 2319,
	1548, 2963, 3087, 3079, 2842, 1255, 1256, 1257, 1254, 3084,
	3063, 3041, 3016, 2847, 2848, 2943, 2935, 2925, 2994, 3053,
	2923, 2919, 2999, 3000, 2918, 2917, 2998, 2768, 2760, 2756,
	2648, 3065, 3032, 2960, 848, 847, 4040, 3036, 2334, 2328,
	3014, 2325, 1718, 1719, 1720, 1721, 1722, 2736, 3017, 2158,
	2151, 1612, 2979, 2980, 2981, 2982, 2983, 2984, 1881, 1880,
	1064, 1613, 1614, 1660, 1335, 1331, 1870, 1330, 1167, 1619,
	1620, 3057, 1064, 916, 1255, 1256, 1257, 1254, 2598, 4041,
	206, 2735, 197, 168, 1763, 2064, 3907, 3903, 1767, 1768,
	1769, 1770, 3055, 3753, 2734, 3752, 1624, 1627, 1808, 1628,
	3741, 3737, 3592, 3066, 3033, 3160, 1818, 3034, 1255, 1256,
	1257, 1254, 3164, 3165, 3166, 3168, 3051, 3170, 3171, 3574,
	3081, 1255, 1256, 1257, 1254, 3449, 3054, 1182, 3049, 3056,
	3448, 3068, 3076, 3190, 3067, 3069, 3447, 3417, 3396, 3394,
	3393, 3390, 3389, 3204, 2733, 3383, 3381, 3362, 667, 3352,
	666, 666, 3351, 202, 3075, 3338, 674, 3089, 3337, 1871,
	3220, 1182, 3240, 3088, 667, 3177, 1182, 1182, 3148, 3095,
	3115, 1255, 1256, 1257, 1254, 2066, 2375, 2732, 3238, 3108,
	3104, 3105, 3099, 3100, 3101, 3106, 3103, 3098, 3102, 3097,
	3091, 2867, 3150, 2731, 3025, 2781, 2622, 2618, 2441, 2730,
	2617, 3214, 2292, 2285, 1255, 1256, 1257, 1254, 3223, 2279,
	3264, 2278, 3267, 3227, 3267, 3267, 3176, 2277, 2276, 1182,
	1255, 1256, 1257, 1254, 2274, 2867, 1255, 1256, 1257, 1254,
	2867, 2867, 2270, 2269, 2267, 2258, 3155, 3288, 2817, 3154,
	3247, 1945, 2727, 3284, 2255, 1548, 1548, 1064, 2254, 1064,
	2157, 1864, 3192, 1863, 1064, 3251, 3253, 1862, 3175, 1827,
	2726, 1826, 3242, 1817, 1560, 2792, 1558, 1964, 4002, 1255,
	1256, 1257, 1254, 3925, 1546, 1546, 3289, 3290, 1325, 3902,
	3236, 1064, 3838, 2867, 3835, 206, 3213, 1255, 1256, 1257,
	1254, 3822, 667, 1061, 3817, 1063, 3233, 3222, 3722, 3190,
	3262, 3721, 3225, 3226, 3703, 3237, 3686, 3682, 3660, 1508,
	3263, 1511, 3644, 3547, 2046, 2046, 3545, 3272, 2411, 674,
	2410, 3246, 3515, 3514, 3511, 3510, 1871, 3476, 3473, 3471,
	3438, 1871, 1871, 3107, 1607, 1618, 3122, 3123, 3273, 3268,
	3269, 2843, 3124, 3125, 3126, 3127, 2846, 3128, 3129, 3130,
	3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 202, 1609,
	2904, 2905, 3286, 1623, 1626, 1615, 1442, 1182, 2725, 2951,
	2876, 2706, 2826, 2825, 2819, 2920, 2921, 2786, 2741, 3350,
	2632, 2137, 2542, 3294, 2140, 2483, 2376, 2143, 2348, 2313,
	2145, 1748, 202, 792, 142, 1255, 1256, 1257, 1254, 142,
	2118, 2958, 1907, 1877, 1691, 3270, 1268, 1278, 1279, 1271,
	1272, 1273, 1274, 1275, 1276, 1277, 1270, 3315, 3316, 3301,
	3300, 2719, 3306, 3309, 1641, 3313, 667, 3303, 1616, 1385,
	1370, 2560, 1366, 1365, 3326, 1364, 3327, 1363, 1362, 1361,
	1360, 1359, 1358, 1357, 1356, 1355, 2188, 1354, 1255, 1256,
	1257, 1254, 1353, 1352, 1281, 3331, 1285, 3334, 3335, 3336,
	1351, 1350, 673, 2709, 1349, 142, 3919, 2705, 3245, 1348,
	1347, 1346, 1282, 1284, 1280, 3340, 1283, 1269, 1268, 1278,
	1279, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1270, 2681,
	1255, 1256, 1257, 1254, 1255, 1256, 1257, 1254, 1345, 2130,
	3404, 1344, 1343, 3406, 1761, 1342, 1341, 3408, 1338, 3363,
	1337, 1336, 3414, 1334, 1333, 3366, 1255, 1256, 1257, 1254,
	1332, 3365, 1329, 1322, 1321, 1319, 1318, 3385, 1317, 2686,
	3370, 1255, 1256, 1257, 1254, 1316, 1315, 1314, 3375, 1313,
	1312, 2502, 1311, 1310, 1309, 1308, 3369, 667, 2046, 1303,
	1302, 2238, 1301, 1300, 1299, 2243, 1219, 1165, 3442, 3409,
	3917, 3411, 3915, 2252, 3416, 3322, 3323, 3913, 3512, 2383,
	2362, 3419, 1207, 4033, 2524, 2066, 3461, 4031, 2509, 2513,
	2514, 2515, 2510, 2518, 2511, 2516, 3986, 1797, 2512, 3397,
	2517, 3325, 3329, 2807, 2553, 2160, 1062, 1218, 2987, 3479,
	2259, 142, 1182, 3403, 3401, 1064, 2996, 3328, 2266, 2986,
	2995, 3264, 1064, 2988, 2991, 1182, 142, 2989, 142, 2992,
	2985, 2993, 2990, 2514, 2515, 3549, 1182, 125, 3526, 67,
	2283, 66, 1548, 3550, 3944, 2288, 2289, 2290, 3431, 3854,
	2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302,
	3665, 3433, 2646, 667, 2635, 2046, 1436, 3209, 3463, 1182,
	3522, 1546, 3260, 3528, 3261, 3509, 3480, 1935, 1936, 1930,
	1931, 1932, 3367, 3368, 3071, 2451, 3470, 3341, 3472, 3519,
	3460, 3459, 2035, 3548, 2900, 3502, 1601, 2630, 223, 3466,
	2888, 2901, 2902, 2903, 2651, 2652, 669, 2670, 670, 1655,
	671, 1182, 1635, 2335, 3538, 3541, 2120, 1213, 3185, 3178,
	2854, 3516, 3551, 3518, 3521, 2827, 2403, 2371, 1939, 1906,
	1813, 1812, 3525, 2978, 1381, 1382, 1379, 1380, 1377, 1378,
	3533, 4044, 3530, 3819, 3535, 3291, 3532, 3536, 1375, 1376,
	2496, 2490, 3542, 3594, 3539, 2047, 1503, 1502, 1246, 3540,
	666, 1171, 2178, 3543, 3602, 1793, 3572, 3333, 3019, 1182,
	2336, 1180, 1790, 2190, 1455, 2978, 1792, 1789, 1791, 1795,
	1796, 1454, 3558, 1427, 1794, 1478, 4009, 4007, 3964, 1182,
	1548, 1548, 3941, 3940, 1208, 3220, 3938, 3879, 3569, 3839,
	3568, 3717, 3716, 3655, 3564, 3241, 3386, 3637, 3359, 3637,
	3243, 3244, 3599, 3358, 3601, 3344, 2436, 2406, 1657, 1546,
	1759, 3627, 1182, 3654, 1182, 3343, 3631, 3632, 3029, 3626,
	1452, 4035, 4034, 2867, 3405, 3074, 3657, 4034, 3659, 3553,
	2766, 1548, 2364, 3634, 2257, 1389, 3608, 3610, 1204, 3609,
	3628, 4035, 3684, 3339, 1179, 1470, 3619, 75, 3605, 667,
	2, 1182, 1182, 3630, 4057, 1182, 1182, 3642, 3641, 4058,
	1759, 1, 1871, 2747, 1871, 210, 3, 3653, 1875, 1383,
	911, 3588, 906, 1524, 1064, 3705, 1712, 2174, 1712, 3700,
	3663, 3463, 2534, 1871, 1871, 3509, 1941, 2100, 3714, 1552,
	3670, 3690, 3691, 3666, 1879, 3701, 3702, 3658, 913, 3002,
	3723, 3724, 3662, 3003, 3332, 3502, 907, 908, 909, 910,
	3005, 1179, 3668, 1548, 2769, 1586, 2210, 2967, 1800, 1801,
	1802, 1803, 1804, 1805, 1798, 1799, 2488, 2352, 3203, 3317,
	1437, 3711, 969, 3710, 1819, 1672, 3754, 1196, 1669, 1195,
	1193, 1764, 1546, 3712, 3735, 794, 3706, 3747, 2163, 2952,
	3330, 1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1270, 2926, 2640, 3713, 2643, 3734, 3730, 4043,
	4074, 4001, 4046, 1689, 778, 3932, 3844, 4005, 3742, 3746,
	976, 3846, 3733, 2215, 1251, 3788, 3782, 2509, 2513, 2514,
	2515, 2510, 2518, 2511, 2516, 3761, 3050, 2512, 3580, 2517,
	3581, 1182, 996, 835, 805, 1320, 1648, 3120, 3118, 804,
	3428, 2797, 3772, 3718, 3811, 3805, 3022, 3790, 997, 2146,
	3841, 3780, 3783, 3731, 1602, 3572, 1606, 2402, 3798, 3898,
	3784, 2683, 3656, 3785, 2689, 3664, 3256, 2862, 1630, 3797,
	3801, 3893, 3474, 3584, 1182, 2707, 2708, 3582, 3583, 1548,
	710, 2079, 641, 2710, 2711, 1046, 3704, 2159, 711, 2382,
	3956, 3821, 1064, 949, 2361, 1712, 950, 3818, 942, 2716,
	2815, 2814, 1729, 1260, 142, 142, 142, 1062, 1546, 1746,
	3829, 3139, 3140, 1297, 3827, 749, 1269, 1268, 1278, 1279,
	1271, 1272, 1273, 1274, 1275, 1276, 1277, 1270, 1718, 1871,
	2240, 2794, 3497, 3871, 3015, 74, 3860, 73, 72, 71,
	231, 796, 3840, 230, 3755, 1506, 3623, 3928, 4048, 775,
	774, 773, 1517, 772, 771, 770, 3439, 3440, 3441, 2507,
	2508, 3880, 3445, 3446, 2506, 2504, 2503, 2061, 2060, 3028,
	3342, 2125, 2127, 1554, 3218, 2891, 2886, 1986, 1984, 1515,
	1287, 2431, 3868, 2438, 3116, 3874, 1983, 3983, 3376, 3897,
	3575, 3908, 3909, 1182, 3882, 3681, 2936, 3571, 1929, 2427,
	2003, 1548, 2907, 2000, 3922, 1999, 2899, 3677, 3671, 3929,
	2844, 2845, 3912, 3914, 3916, 3918, 3896, 3891, 2031, 3462,
	3786, 3636, 3481, 3482, 3905, 3930, 3488, 2370, 3465, 1115,
	1546, 1111, 3921, 3911, 1113, 1114, 3836, 3837, 1269, 1268,
	1278, 1279, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1270,
	1112, 3937, 1548, 3935, 2691, 3788, 3311, 2408, 3180, 2344,
	2343, 2341, 2340, 1412, 3870, 2237, 3952, 3604, 2558, 3949,
	2556, 3974, 1162, 3324, 3320, 2171, 2186, 3982, 3965, 3070,
	2062, 1546, 2058, 3966, 2057, 1086, 3968, 3969, 3967, 1269,
	1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
	1270, 1085, 1583, 2969, 3998, 2497, 3763, 1934, 943, 3991,
	2359, 3992, 109, 3993, 41, 3994, 122, 108, 3995, 185,
	59, 184, 58, 120, 4008, 182, 4010, 4011, 57, 1374,
	4006, 4004, 103, 102, 119, 1182, 180, 56, 3860, 4014,
	215, 214, 217, 216, 213, 2608, 2609, 212, 1590, 211,
	3942, 1871, 3640, 3924, 3811, 901, 4023, 44, 43, 186,
	42, 110, 60, 4026, 4025, 4024, 40, 4032, 4030, 4029,
	39, 4042, 38, 4050, 34, 13, 4049, 12, 35, 22,
	4036, 4037, 4038, 4039, 21, 1676, 20, 26, 32, 31,
	135, 4062, 134, 1182, 30, 4054, 133, 132, 131, 4021,
	130, 129, 128, 127, 29, 3897, 4064, 4063, 19, 4066,
	51, 50, 49, 4072, 48, 47, 4076, 46, 9, 4073,
	123, 118, 116, 28, 117, 114, 113, 112, 111, 106,
	3035, 104, 3037, 86, 85, 84, 3486, 99, 98, 97,
	4084, 96, 3651, 3652, 95, 94, 92, 93, 995, 4050,
	4092, 1871, 4049, 4091, 83, 82, 1871, 1712, 81, 80,
	79, 4076, 4093, 101, 107, 3707, 105, 4097, 2188, 3708,
	90, 100, 91, 89, 88, 87, 78, 3498, 77, 76,
	166, 165, 164, 163, 1557, 162, 160, 161, 673, 159,
	3489, 158, 157, 156, 155, 154, 52, 53, 54, 55,
	176, 3484, 175, 3090, 177, 179, 3506, 3507, 181, 178,
	183, 173, 3485, 171, 174, 206, 64, 197, 168, 172,
	170, 69, 11, 121, 142, 18, 25, 4, 0, 0,
	0, 3114, 0, 0, 198, 0, 0, 0, 0, 0,
	0, 189, 0, 1923, 0, 199, 0, 0, 1928, 3490,
	1269, 1268, 1278, 1279, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1270, 2032, 0, 140, 206, 64, 197, 168, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 198, 0, 0, 0, 202, 0,
	0, 189, 142, 0, 0, 199, 0, 0, 2035, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 142, 0, 140, 142, 142, 0, 0, 0,
	1981, 1982, 0, 0, 0, 0, 0, 0, 142, 126,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 3810, 0, 0, 0, 0, 3505, 0, 2417,
	0, 3830, 2009, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 0, 150, 151,
	0, 0, 0, 152, 3494, 0, 153, 0, 0, 2107,
	0, 0, 0, 0, 0, 2107, 2107, 2107, 0, 0,
	0, 0, 0, 0, 0, 3271, 3491, 3495, 3493, 3492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 149, 0, 150, 151,
	2025, 0, 0, 152, 0, 3881, 153, 0, 0, 0,
	3885, 3886, 0, 0, 0, 0, 3500, 3501, 0, 167,
	195, 204, 196, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3906, 194, 188, 187, 0, 0, 0, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3508, 0, 0, 0, 0, 167,
	195, 204, 196, 124, 0, 0, 3487, 0, 0, 0,
	0, 0, 3499, 0, 2013, 0, 0, 0, 0, 0,
	0, 0, 194, 188, 187, 2019, 0, 0, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 191, 192, 0, 0, 2007, 2041, 0, 0, 2008,
	2010, 2012, 0, 2014, 2015, 2016, 2020, 2021, 2022, 2024,
	2027, 2028, 2029, 0, 0, 0, 0, 0, 0, 0,
	2017, 2026, 2018, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	190, 191, 192, 0, 136, 0, 0, 0, 193, 0,
	137, 0, 0, 0, 0, 0, 2033, 0, 0, 4016,
	4017, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3378,
	0, 0, 3504, 0, 136, 0, 3380, 0, 193, 0,
	137, 2030, 2065, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 2032, 0, 2006, 0,
	63, 1993, 0, 0, 0, 2005, 0, 0, 3395, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2023,
	0, 0, 2035, 2002, 0, 0, 0, 138, 2011, 0,
	0, 0, 2036, 2037, 0, 0, 0, 0, 3503, 65,
	63, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	142, 142, 0, 142, 0, 2349, 2350, 2351, 2001, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2366, 2367, 2368, 2369, 146, 203, 2009, 147, 0, 0,
	0, 0, 169, 0, 0, 0, 0, 61, 0, 65,
	0, 0, 0, 1062, 0, 0, 142, 0, 0, 722,
	721, 728, 718, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 725, 726, 0, 727, 731, 0, 0, 712,
	0, 142, 0, 0, 146, 203, 0, 147, 0, 736,
	0, 0, 169, 0, 0, 0, 3643, 61, 0, 0,
	0, 0, 0, 0, 2025, 0, 0, 0, 0, 0,
	0, 0, 1871, 139, 45, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 5, 0, 0, 0, 1871, 0,
	0, 3544, 0, 0, 3546, 0, 0, 0, 0, 0,
	0, 0, 143, 144, 0, 0, 145, 0, 0, 0,
	0, 0, 3552, 0, 0, 0, 0, 0, 1517, 0,
	0, 0, 1287, 139, 45, 0, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 0, 0, 0, 1992, 1994,
	1991, 0, 0, 1988, 0, 0, 0, 0, 2013, 0,
	0, 0, 143, 144, 0, 0, 145, 0, 0, 2019,
	0, 0, 0, 0, 0, 1554, 0, 2004, 0, 1987,
	0, 0, 0, 0, 0, 0, 0, 0, 2107, 2007,
	2041, 2032, 0, 2008, 2010, 2012, 1993, 2014, 2015, 2016,
	2020, 2021, 2022, 2024, 2027, 2028, 2029, 0, 0, 0,
	0, 0, 0, 0, 2017, 2026, 2018, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1996, 2035, 2002, 0,
	0, 0, 0, 0, 0, 0, 0, 2036, 2037, 0,
	0, 0, 0, 0, 1255, 1256, 1257, 1254, 0, 0,
	2033, 0, 0, 713, 715, 714, 0, 0, 0, 0,
	0, 0, 0, 2001, 720, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 724, 1989, 1990, 0,
	0, 2009, 0, 739, 0, 0, 0, 0, 0, 0,
	717, 0, 0, 0, 0, 2030, 0, 722, 721, 728,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	725, 726, 2006, 727, 731, 0, 0, 712, 0, 2005,
	0, 0, 0, 0, 1797, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2023, 0, 0, 0, 0, 0, 2025,
	0, 0, 2011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2039, 2038, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 742, 0, 0, 0,
	0, 741, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 719, 723, 729, 0, 730, 732, 0, 0,
	733, 734, 735, 0, 0, 737, 738, 0, 1998, 0,
	0, 0, 0, 1992, 2857, 1991, 0, 0, 2856, 0,
	0, 0, 0, 2013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2019, 0, 0, 2527, 2831, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2034, 0, 0, 2040, 2007, 2041, 0, 0, 2008, 2010,
	2012, 0, 2014, 2015, 2016, 2020, 2021, 2022, 2024, 2027,
	2028, 2029, 0, 0, 0, 0, 0, 0, 0, 2017,
	2026, 2018, 1793, 0, 0, 0, 0, 0, 0, 1790,
	0, 1996, 0, 1792, 1789, 1791, 1795, 1796, 0, 0,
	0, 1794, 2065, 0, 0, 0, 0, 0, 0, 0,
	142, 713, 715, 714, 0, 2033, 0, 0, 0, 0,
	1307, 0, 720, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 0, 1134,
	0, 739, 1989, 1990, 0, 0, 0, 0, 717, 0,
	0, 0, 707, 0, 0, 0, 0, 0, 0, 0,
	2030, 716, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2006, 0, 0,
	0, 0, 0, 0, 2005, 0, 3904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2023, 0,
	0, 0, 0, 0, 0, 0, 0, 2011, 3020, 3021,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1134,
	2039, 2038, 0, 0, 1778, 1779, 1780, 1781, 1782, 1783,
	1784, 1785, 1786, 1787, 1788, 1800, 1801, 1802, 1803, 1804,
	1805, 1798, 1799, 0, 0, 0, 0, 0, 0, 0,
	719, 723, 729, 1119, 730, 732, 0, 0, 733, 734,
	735, 3979, 0, 737, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 1998, 1142, 1146, 1148, 1150, 1152, 1153,
	1155, 0, 1160, 1156, 1157, 1158, 1159, 0, 1137, 1138,
	1139, 1140, 1117, 1118, 1143, 0, 1120, 0, 1122, 1123,
	1124, 1125, 1121, 1126, 1127, 1128, 1129, 1130, 1133, 1135,
	1131, 1132, 1141, 0, 0, 2034, 0, 0, 2040, 0,
	1145, 1147, 1149, 1151, 1154, 0, 0, 0, 0, 0,
	142, 0, 0, 0, 0, 3979, 0, 0, 0, 0,
	142, 0, 0, 1119, 0, 0, 0, 1109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1134, 0,
	1136, 0, 0, 0, 1142, 1146, 1148, 1150, 1152, 1153,
	1155, 0, 1160, 1156, 1157, 1158, 1159, 0, 1137, 1138,
	1139, 1140, 1117, 1118, 1143, 0, 1120, 3979, 1122, 1123,
	1124, 1125, 1121, 1126, 1127, 1128, 1129, 1130, 1133, 1135,
	1131, 1132, 1141, 0, 0, 0, 0, 0, 2032, 0,
	1145, 1147, 1149, 1151, 1154, 206, 0, 0, 0, 716,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3635, 0,
	0, 0, 0, 0, 2035, 0, 0, 0, 0, 4095,
	1136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3212, 0, 0, 0, 2065, 2065, 2065,
	2065, 2065, 2065, 0, 2032, 0, 0, 0, 0, 3224,
	0, 0, 1119, 0, 2065, 0, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2009, 0,
	0, 2687, 2688, 1142, 1146, 1148, 1150, 1152, 1153, 1155,
	2035, 1160, 1156, 1157, 1158, 1159, 0, 1137, 1138, 1139,
	1140, 1117, 1118, 1143, 0, 1120, 0, 1122, 1123, 1124,
	1125, 1121, 1126, 1127, 1128, 1129, 1130, 1133, 1135, 1131,
	1132, 1141, 722, 721, 728, 718, 0, 0, 0, 1145,
	1147, 1149, 1151, 1154, 0, 725, 726, 0, 727, 731,
	0, 0, 712, 0, 2009, 0, 2025, 0, 0, 0,
	0, 142, 736, 0, 0, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1136,
	0, 0, 0, 0, 0, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2107, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 742, 0, 0, 0, 0, 741, 0, 3781, 0,
	0, 0, 2025, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1144, 0, 0, 0, 0,
	2013, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2019, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2007, 2041, 0, 0, 2008, 2010, 2012, 0, 2014,
	2015, 2016, 2020, 2021, 2022, 2024, 2027, 2028, 2029, 0,
	2032, 0, 0, 0, 0, 0, 2017, 2026, 2018, 0,
	0, 0, 0, 0, 0, 1797, 2013, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2019, 0, 0,
	0, 0, 0, 0, 0, 1144, 2035, 0, 0, 0,
	0, 3372, 2033, 0, 0, 0, 0, 2007, 2041, 0,
	0, 2008, 2010, 2012, 0, 2014, 2015, 2016, 2020, 2021,
	2022, 2024, 2027, 2028, 2029, 0, 713, 715, 714, 0,
	0, 0, 2017, 2026, 2018, 0, 0, 720, 0, 0,
	0, 0, 0, 0, 1062, 0, 142, 2030, 0, 724,
	2009, 142, 0, 0, 0, 0, 739, 0, 2065, 0,
	0, 0, 0, 717, 2006, 0, 0, 0, 2033, 0,
	0, 2005, 0, 0, 0, 0, 0, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2023, 0, 0, 0, 0,
	0, 0, 0, 0, 2011, 0, 0, 0, 0, 0,
	0, 0, 0, 2030, 0, 0, 0, 0, 2025, 0,
	0, 0, 2107, 0, 0, 0, 0, 0, 0, 0,
	2006, 0, 0, 0, 1144, 0, 0, 2005, 0, 0,
	0, 0, 0, 1793, 0, 0, 0, 0, 0, 0,
	1790, 0, 0, 0, 1792, 1789, 1791, 1795, 1796, 0,
	0, 2023, 1794, 0, 0, 0, 0, 0, 0, 0,
	2011, 0, 0, 0, 0, 719, 723, 729, 0, 730,
	732, 0, 0, 733, 734, 735, 0, 0, 737, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2013, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3639, 2019, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2107, 0,
	0, 0, 0, 2007, 2041, 0, 0, 2008, 2010, 2012,
	0, 2014, 2015, 2016, 2020, 2021, 2022, 2024, 2027, 2028,
	2029, 0, 0, 0, 0, 0, 0, 0, 2017, 2026,
	2018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3643, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2033, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1800, 1801, 1802, 1803,
	1804, 1805, 1798, 1799, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2030,
	0, 0, 0, 0, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2006, 0, 0, 0,
	0, 0, 0, 2005, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2023, 0, 0,
	0, 0, 0, 0, 0, 0, 2011, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3689, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 0, 0,
	0, 0, 0, 0, 0, 0, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 0,
	764, 142, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 803, 563, 514, 429, 381,
	581, 580, 0, 0, 872, 880, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 756,
	0, 0, 793, 848, 847, 780, 790, 0, 0, 309,
	229, 509, 629, 511, 510, 781, 0, 782, 786, 789,
	785, 783, 784, 0, 863, 0, 0, 0, 0, 0,
	0, 748, 760, 0, 765, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 0, 0, 757, 758,
	0, 0, 0, 0, 813, 0, 759, 0, 0, 808,
	787, 791, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 788, 811, 815, 330, 886, 809, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 887, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 806, 0,
	626, 0, 465, 0, 0, 870, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 810, 0, 418, 399,
	883, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 142,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 1821, 1820, 1822, 477, 364, 365,
	0, 343, 291, 292, 650, 867, 395, 591, 624, 625,
	516, 0, 882, 862, 864, 865, 869, 873, 874, 875,
	876, 877, 879, 881, 885, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 884, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 814, 566, 567, 385,
	386, 387, 388, 871, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 893, 866, 892, 894, 895, 891, 896, 897,
	878, 769, 0, 821, 889, 888, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 776,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	855, 828, 829, 830, 766, 831, 825, 826, 767, 827,
	856, 819, 852, 853, 795, 822, 832, 851, 833, 854,
	857, 858, 898, 899, 839, 823, 257, 900, 836, 859,
	850, 849, 834, 820, 860, 861, 802, 797, 837, 838,
	824, 843, 844, 845, 768, 816, 817, 818, 840, 841,
	798, 799, 800, 801, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	846, 634, 433, 434, 0, 842, 637, 638, 635, 371,
	420, 439, 427, 812, 651, 512, 513, 652, 623, 0,
	761, 0, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 0, 0, 0, 0, 764, 0, 0, 0,
	336, 1872, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 803, 563, 514, 429, 381, 581, 580, 0, 0,
	872, 880, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 2091, 0, 0, 756, 0, 0, 793, 848,
	847, 780, 790, 0, 0, 309, 229, 509, 629, 511,
	510, 781, 0, 782, 786, 789, 785, 783, 784, 0,
	863, 0, 0, 0, 0, 0, 0, 748, 760, 0,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 757, 758, 0, 0, 0, 0,
	813, 0, 759, 0, 0, 2092, 787, 791, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 788,
	811, 815, 330, 886, 809, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 887, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 806, 0, 626, 0, 465, 0,
	0, 870, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 810, 0, 418, 399, 883, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 867, 395, 591, 624, 625, 516, 0, 882, 862,
	864, 865, 869, 873, 874, 875, 876, 877, 879, 881,
	885, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 884, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 814, 566, 567, 385, 386, 387, 388, 871,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 893, 866,
	892, 894, 895, 891, 896, 897, 878, 769, 0, 821,
	889, 888, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 776, 293, 522, 367, 0,
	410, 341, 587, 588, 0, 639, 855, 828, 829, 830,
	766, 831, 825, 826, 767, 827, 856, 819, 852, 853,
	795, 822, 832, 851, 833, 854, 857, 858, 898, 899,
	839, 823, 257, 900, 836, 859, 850, 849, 834, 820,
	860, 861, 802, 797, 837, 838, 824, 843, 844, 845,
	768, 816, 817, 818, 840, 841, 798, 799, 800, 801,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 846, 634, 433, 434,
	0, 842, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 0, 761, 206, 812, 0,
	0, 0, 0, 0, 0, 0, 0, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 1290, 563, 514, 429,
	381, 581, 580, 0, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	756, 0, 0, 793, 848, 847, 780, 790, 0, 0,
	309, 229, 509, 629, 511, 510, 781, 0, 782, 786,
	789, 785, 783, 784, 0, 863, 0, 0, 0, 0,
	0, 0, 748, 760, 0, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	758, 0, 0, 0, 0, 813, 0, 759, 0, 0,
	808, 787, 791, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 788, 811, 815, 330, 886, 809,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 887, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 806,
	0, 626, 0, 465, 0, 0, 870, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 810, 0, 418,
	399, 883, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 867, 395, 591, 624,
	625, 516, 0, 882, 862, 864, 865, 869, 873, 874,
	875, 876, 877, 879, 881, 885, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 884, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 814, 566, 567,
	385, 386, 387, 388, 871, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 893, 866, 892, 894, 895, 891, 896,
	897, 878, 769, 0, 821, 889, 888, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	776, 293, 522, 367, 169, 410, 341, 587, 588, 0,
	639, 855, 828, 829, 830, 766, 831, 825, 826, 767,
	827, 856, 819, 852, 853, 795, 822, 832, 851, 833,
	854, 857, 858, 898, 899, 839, 823, 257, 900, 836,
	859, 850, 849, 834, 820, 860, 861, 802, 797, 837,
	838, 824, 843, 844, 845, 768, 816, 817, 818, 840,
	841, 798, 799, 800, 801, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 846, 634, 433, 434, 0, 842, 637, 638, 635,
	371, 420, 439, 427, 812, 651, 512, 513, 652, 623,
	0, 761, 0, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 336, 4094, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 803, 563, 514, 429, 381, 581, 580, 0,
	0, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 756, 0, 0, 793,
	848, 847, 780, 790, 0, 0, 309, 229, 509, 629,
	511, 510, 781, 0, 782, 786, 789, 785, 783, 784,
	0, 863, 0, 0, 0, 0, 0, 0, 748, 760,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 758, 0, 0, 0,
	0, 813, 0, 759, 0, 0, 808, 787, 791, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	788, 811, 815, 330, 886, 809, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 887, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 806, 0, 626, 0, 465,
	0, 0, 870, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 810, 0, 418, 399, 883, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 867, 395, 591, 624, 625, 516, 0, 882,
	862, 864, 865, 869, 873, 874, 875, 876, 877, 879,
	881, 885, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 884, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 814, 566, 567, 385, 386, 387, 388,
	871, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 893,
	866, 892, 894, 895, 891, 896, 897, 878, 769, 0,
	821, 889, 888, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 776, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 855, 828, 829,
	830, 766, 831, 825, 826, 767, 827, 856, 819, 852,
	853, 795, 822, 832, 851, 833, 854, 857, 858, 898,
	899, 839, 823, 257, 900, 836, 859, 850, 849, 834,
	820, 860, 861, 802, 797, 837, 838, 824, 843, 844,
	845, 768, 816, 817, 818, 840, 841, 798, 799, 800,
	801, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 846, 634, 433,
	434, 0, 842, 637, 638, 635, 371, 420, 439, 427,
	812, 651, 512, 513, 652, 623, 0, 761, 0, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 803, 563,
	514, 429, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 756, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 229, 509, 629, 511, 510, 781, 0,
	782, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 748, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 0, 0, 0, 0, 813, 0, 759,
	0, 0, 808, 787, 791, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 418, 399, 883, 3980, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 776, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 257,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 433, 434, 0, 842, 637,
	638, 635, 371, 420, 439, 427, 812, 651, 512, 513,
	652, 623, 0, 761, 0, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 764,
	0, 0, 0, 336, 1872, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 803, 563, 514, 429, 381, 581,
	580, 0, 0, 872, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 756, 0,
	0, 793, 848, 847, 780, 790, 0, 0, 309, 229,
	509, 629, 511, 510, 781, 0, 782, 786, 789, 785,
	783, 784, 0, 863, 0, 0, 0, 0, 0, 0,
	748, 760, 0, 765, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 757, 758, 0,
	0, 0, 0, 813, 0, 759, 0, 0, 808, 787,
	791, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 788, 811, 815, 330, 886, 809, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 887, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 806, 0, 626,
	0, 465, 0, 0, 870, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 810, 0, 418, 399, 883,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 867, 395, 591, 624, 625, 516,
	0, 882, 862, 864, 865, 869, 873, 874, 875, 876,
	877, 879, 881, 885, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 884, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 814, 566, 567, 385, 386,
	387, 388, 871, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 893, 866, 892, 894, 895, 891, 896, 897, 878,
	769, 0, 821, 889, 888, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 776, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 855,
	828, 829, 830, 766, 831, 825, 826, 767, 827, 856,
	819, 852, 853, 795, 822, 832, 851, 833, 854, 857,
	858, 898, 899, 839, 823, 257, 900, 836, 859, 850,
	849, 834, 820, 860, 861, 802, 797, 837, 838, 824,
	843, 844, 845, 768, 816, 817, 818, 840, 841, 798,
	799, 800, 801, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 846,
	634, 433, 434, 0, 842, 637, 638, 635, 371, 420,
	439, 427, 812, 651, 512, 513, 652, 623, 0, 761,
	0, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 764, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	803, 563, 514, 429, 381, 581, 580, 0, 0, 872,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 756, 0, 0, 793, 848, 847,
	780, 790, 0, 0, 309, 229, 509, 629, 511, 510,
	781, 0, 782, 786, 789, 785, 783, 784, 0, 863,
	0, 0, 0, 0, 0, 0, 748, 760, 0, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 757, 758, 1585, 0, 0, 0, 813,
	0, 759, 0, 0, 808, 787, 791, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 788, 811,
	815, 330, 886, 809, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	887, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 806, 0, 626, 0, 465, 0, 0,
	870, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 810, 0, 418, 399, 883, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	867, 395, 591, 624, 625, 516, 0, 882, 862, 864,
	865, 869, 873, 874, 875, 876, 877, 879, 881, 885,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 884, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 814, 566, 567, 385, 386, 387, 388, 871, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 893, 866, 892,
	894, 895, 891, 896, 897, 878, 769, 0, 821, 889,
	888, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 776, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 855, 828, 829, 830, 766,
	831, 825, 826, 767, 827, 856, 819, 852, 853, 795,
	822, 832, 851, 833, 854, 857, 858, 898, 899, 839,
	823, 257, 900, 836, 859, 850, 849, 834, 820, 860,
	861, 802, 797, 837, 838, 824, 843, 844, 845, 768,
	816, 817, 818, 840, 841, 798, 799, 800, 801, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 846, 634, 433, 434, 0,
	842, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 812, 761, 0, 2265, 0, 0,
	0, 0, 0, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 803, 563, 514, 429, 381, 581, 580, 0,
	0, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 756, 0, 0, 793,
	848, 847, 780, 790, 0, 0, 309, 229, 509, 629,
	511, 510, 781, 0, 782, 786, 789, 785, 783, 784,
	0, 863, 0, 0, 0, 0, 0, 0, 748, 760,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 758, 0, 0, 0,
	0, 813, 0, 759, 0, 0, 808, 787, 791, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	788, 811, 815, 330, 886, 809, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 887, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 806, 0, 626, 0, 465,
	0, 0, 870, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 810, 0, 418, 399, 883, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 867, 395, 591, 624, 625, 516, 0, 882,
	862, 864, 865, 869, 873, 874, 875, 876, 877, 879,
	881, 885, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 884, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 814, 566, 567, 385, 386, 387, 388,
	871, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 893,
	866, 892, 894, 895, 891, 896, 897, 878, 769, 0,
	821, 889, 888, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 776, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 855, 828, 829,
	830, 766, 831, 825, 826, 767, 827, 856, 819, 852,
	853, 795, 822, 832, 851, 833, 854, 857, 858, 898,
	899, 839, 823, 257, 900, 836, 859, 850, 849, 834,
	820, 860, 861, 802, 797, 837, 838, 824, 843, 844,
	845, 768, 816, 817, 818, 840, 841, 798, 799, 800,
	801, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 846, 634, 433,
	434, 0, 842, 637, 638, 635, 371, 420, 439, 427,
	812, 651, 512, 513, 652, 623, 0, 761, 0, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 803, 563,
	514, 429, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 756, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 229, 509, 629, 511, 510, 781, 0,
	782, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 748, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 1865, 0, 0, 0, 813, 0, 759,
	0, 0, 808, 787, 791, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 418, 399, 883, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 776, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 257,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 433, 434, 0, 842, 637,
	638, 635, 371, 420, 439, 427, 812, 651, 512, 513,
	652, 623, 0, 761, 0, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 764,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 803, 563, 514, 429, 381, 581,
	580, 0, 0, 872, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 756, 0,
	0, 793, 848, 847, 780, 790, 0, 0, 309, 229,
	509, 629, 511, 510, 781, 0, 782, 786, 789, 785,
	783, 784, 0, 863, 0, 0, 0, 0, 0, 0,
	748, 760, 0, 765, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 757, 758, 0,
	0, 0, 0, 813, 0, 759, 0, 0, 808, 787,
	791, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 788, 811, 815, 330, 886, 809, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 887, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 806, 0, 626,
	0, 465, 0, 0, 870, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 810, 0, 418, 399, 883,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 867, 395, 591, 624, 625, 516,
	0, 882, 862, 864, 865, 869, 873, 874, 875, 876,
	877, 879, 881, 885, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 884, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 814, 566, 567, 385, 386,
	387, 388, 871, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 893, 866, 892, 894, 895, 891, 896, 897, 878,
	769, 0, 821, 889, 888, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 776, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 855,
	828, 829, 830, 766, 831, 825, 826, 767, 827, 856,
	819, 852, 853, 795, 822, 832, 851, 833, 854, 857,
	858, 898, 899, 839, 823, 257, 900, 836, 859, 850,
	849, 834, 820, 860, 861, 802, 797, 837, 838, 824,
	843, 844, 845, 768, 816, 817, 818, 840, 841, 798,
	799, 800, 801, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 846,
	634, 433, 434, 0, 842, 637, 638, 635, 371, 420,
	439, 427, 812, 651, 512, 513, 652, 623, 0, 761,
	0, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 764, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	803, 563, 514, 429, 381, 581, 580, 0, 0, 872,
	880, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 756, 0, 0, 793, 848, 847,
	780, 790, 0, 0, 309, 229, 509, 629, 511, 510,
	781, 0, 782, 786, 789, 785, 783, 784, 0, 863,
	0, 0, 0, 0, 0, 0, 748, 760, 0, 765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 757, 758, 0, 0, 0, 0, 813,
	0, 759, 0, 0, 808, 787, 791, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 788, 811,
	815, 330, 886, 809, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	887, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 806, 0, 626, 0, 465, 0, 0,
	870, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 810, 0, 418, 399, 883, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	867, 395, 591, 624, 625, 516, 0, 882, 862, 864,
	865, 869, 873, 874, 875, 876, 877, 879, 881, 885,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 884, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 814, 566, 567, 385, 386, 387, 388, 871, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 893, 866, 892,
	894, 895, 891, 896, 897, 878, 769, 0, 821, 889,
	888, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 776, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 855, 828, 829, 830, 766,
	831, 825, 826, 767, 827, 856, 819, 852, 853, 795,
	822, 832, 851, 833, 854, 857, 858, 898, 899, 839,
	823, 257, 900, 836, 859, 850, 849, 834, 820, 860,
	861, 802, 797, 837, 838, 824, 843, 844, 845, 768,
	816, 817, 818, 840, 841, 798, 799, 800, 801, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 846, 634, 433, 434, 0,
	3554, 637, 3555, 3556, 371, 420, 439, 427, 812, 651,
	512, 513, 652, 623, 0, 761, 0, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 764, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 803, 563, 514, 429,
	381, 581, 580, 0, 0, 872, 880, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	756, 0, 0, 793, 848, 847, 780, 790, 0, 0,
	309, 229, 509, 629, 511, 510, 2744, 0, 2745, 786,
	789, 785, 783, 784, 0, 863, 0, 0, 0, 0,
	0, 0, 748, 760, 0, 765, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	758, 0, 0, 0, 0, 813, 0, 759, 0, 0,
	808, 787, 791, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 788, 811, 815, 330, 886, 809,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 887, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 806,
	0, 626, 0, 465, 0, 0, 870, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 810, 0, 418,
	399, 883, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 867, 395, 591, 624,
	625, 516, 0, 882, 862, 864, 865, 869, 873, 874,
	875, 876, 877, 879, 881, 885, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 884, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 814, 566, 567,
	385, 386, 387, 388, 871, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 893, 866, 892, 894, 895, 891, 896,
	897, 878, 769, 0, 821, 889, 888, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	776, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 855, 828, 829, 830, 766, 831, 825, 826, 767,
	827, 856, 819, 852, 853, 795, 822, 832, 851, 833,
	854, 857, 858, 898, 899, 839, 823, 257, 900, 836,
	859, 850, 849, 834, 820, 860, 861, 802, 797, 837,
	838, 824, 843, 844, 845, 768, 816, 817, 818, 840,
	841, 798, 799, 800, 801, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 846, 634, 433, 434, 0, 842, 637, 638, 635,
	371, 420, 439, 427, 812, 651, 512, 513, 652, 623,
	0, 761, 0, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 1730, 0, 0, 0, 764, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 803, 563, 514, 429, 381, 581, 580, 0,
	0, 872, 880, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 756, 0, 0, 793,
	848, 847, 780, 790, 0, 0, 309, 229, 509, 629,
	511, 510, 781, 0, 782, 786, 789, 785, 783, 784,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 760,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 757, 758, 0, 0, 0,
	0, 813, 0, 759, 0, 0, 808, 787, 791, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	788, 811, 815, 330, 886, 809, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 887, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 806, 0, 626, 0, 465,
	0, 0, 870, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 810, 0, 418, 399, 883, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 1731, 1732, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 867, 395, 591, 624, 625, 516, 0, 882,
	862, 864, 865, 869, 873, 874, 875, 876, 877, 879,
	881, 885, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 884, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 814, 566, 567, 385, 386, 387, 388,
	871, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 893,
	866, 892, 894, 895, 891, 896, 897, 878, 769, 0,
	821, 889, 888, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 776, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 855, 828, 829,
	830, 766, 831, 825, 826, 767, 827, 856, 819, 852,
	853, 795, 822, 832, 851, 833, 854, 857, 858, 898,
	899, 839, 823, 257, 900, 836, 859, 850, 849, 834,
	820, 860, 861, 802, 797, 837, 838, 824, 843, 844,
	845, 768, 816, 817, 818, 840, 841, 798, 799, 800,
	801, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 846, 634, 433,
	434, 0, 842, 637, 638, 635, 371, 420, 439, 427,
	812, 651, 512, 513, 652, 623, 0, 761, 0, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 764, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 803, 563,
	514, 429, 381, 581, 580, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 756, 0, 0, 793, 848, 847, 780, 790,
	0, 0, 309, 229, 509, 629, 511, 510, 781, 0,
	782, 786, 789, 785, 783, 784, 0, 863, 0, 0,
	0, 0, 0, 0, 0, 760, 0, 765, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 757, 758, 0, 0, 0, 0, 813, 0, 759,
	0, 0, 808, 787, 791, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 788, 811, 815, 330,
	886, 809, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 887, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 806, 0, 626, 0, 465, 0, 0, 870, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 810,
	0, 418, 399, 883, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 867, 395,
	591, 624, 625, 516, 0, 882, 862, 864, 865, 869,
	873, 874, 875, 876, 877, 879, 881, 885, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 884,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 814,
	566, 567, 385, 386, 387, 388, 871, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 893, 866, 892, 894, 895,
	891, 896, 897, 878, 769, 0, 821, 889, 888, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 776, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 855, 828, 829, 830, 766, 831, 825,
	826, 767, 827, 856, 819, 852, 853, 795, 822, 832,
	851, 833, 854, 857, 858, 898, 899, 839, 823, 257,
	900, 836, 859, 850, 849, 834, 820, 860, 861, 802,
	797, 837, 838, 824, 843, 844, 845, 768, 816, 817,
	818, 840, 841, 798, 799, 800, 801, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 846, 634, 433, 434, 0, 842, 637,
	638, 635, 371, 420, 439, 427, 812, 651, 512, 513,
	652, 623, 0, 761, 0, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 764,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 803, 563, 514, 429, 381, 581,
	580, 0, 0, 872, 880, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 0,
	0, 793, 848, 847, 780, 790, 0, 0, 309, 229,
	509, 629, 511, 510, 781, 0, 782, 786, 789, 785,
	783, 784, 0, 863, 0, 0, 0, 0, 0, 0,
	748, 760, 0, 765, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 757, 758, 0,
	0, 0, 0, 813, 0, 759, 0, 0, 808, 787,
	791, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 788, 811, 815, 330, 886, 809, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 887, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 806, 0, 626,
	0, 465, 0, 0, 870, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 810, 0, 418, 399, 883,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 867, 395, 591, 624, 625, 516,
	0, 882, 862, 864, 865, 869, 873, 874, 875, 876,
	877, 879, 881, 885, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 884, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 814, 566, 567, 385, 386,
	387, 388, 871, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 893, 866, 892, 894, 895, 891, 896, 897, 878,
	769, 0, 821, 889, 888, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 776, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 855,
	828, 829, 830, 766, 831, 825, 826, 767, 827, 856,
	819, 852, 853, 795, 822, 832, 851, 833, 854, 857,
	858, 898, 899, 839, 823, 257, 900, 836, 859, 850,
	849, 834, 820, 860, 861, 802, 797, 837, 838, 824,
	843, 844, 845, 768, 816, 817, 818, 840, 841, 798,
	799, 800, 801, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 846,
	634, 433, 434, 0, 842, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 0, 761,
	206, 64, 197, 168, 0, 0, 0, 0, 0, 0,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 198,
	0, 0, 0, 0, 0, 0, 189, 0, 336, 0,
	199, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 140,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 220, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 167, 195, 204, 196, 124, 0,
	0, 622, 0, 0, 626, 0, 465, 0, 0, 221,
	0, 0, 0, 435, 0, 0, 363, 194, 188, 187,
	481, 0, 418, 399, 233, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 601, 602, 603, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 460, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 224, 573, 576, 506, 234,
	0, 570, 585, 543, 584, 235, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 138, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 232, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 239,
	304, 448, 240, 0, 293, 522, 367, 169, 410, 341,
	587, 588, 61, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 236, 45,
	222, 225, 227, 226, 0, 62, 571, 583, 617, 5,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 143, 237, 512,
	513, 238, 623, 206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 140, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 2419, 2422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 2423, 465,
	0, 0, 0, 2418, 0, 2417, 435, 2415, 2420, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 2421, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	169, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1326,
	0, 0, 228, 0, 0, 780, 790, 0, 0, 309,
	229, 509, 629, 511, 510, 781, 0, 782, 786, 789,
	785, 783, 784, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	787, 0, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 788, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 0, 651, 512, 513, 652, 623, 206,
	64, 197, 168, 0, 0, 0, 0, 0, 0, 397,
	677, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 684, 0, 0, 0, 0, 0,
	0, 0, 683, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 681, 682, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 678, 680, 314, 488,
	411, 692, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 169, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 1134, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 0, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1119, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 2582, 2585, 2586, 2587,
	2588, 2589, 2590, 0, 2595, 2591, 2592, 2593, 2594, 0,
	2577, 2578, 2579, 2580, 1117, 2561, 2583, 0, 2562, 393,
	2563, 2564, 2565, 2566, 1121, 2567, 2568, 2569, 2570, 2571,
	2574, 2575, 2572, 2573, 2581, 405, 370, 406, 353, 383,
	382, 384, 1145, 1147, 1149, 1151, 1154, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 0, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 2576, 0, 418, 399, 654, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 0, 573, 576,
	506, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 0, 293, 2584, 367, 0,
	410, 341, 587, 588, 0, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 2419, 2422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	2423, 465, 0, 0, 0, 2418, 0, 2417, 435, 2415,
	2420, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 2421, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 0, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 2440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 2439, 465, 0, 0, 0, 2445, 2442,
	2444, 435, 0, 2443, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 2437, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 2440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 2439, 465, 0, 0,
	0, 2445, 2442, 2444, 435, 0, 2443, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 2131, 0, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 2132, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 1255, 1256, 1257, 1254, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 0, 452, 480, 330, 471, 0, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 496, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 626, 0,
	465, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 481, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 206, 651, 512, 513, 652, 623, 0, 0, 0,
	0, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	140, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 2181, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 169, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 206, 651,
	512, 513, 652, 623, 0, 0, 0, 0, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 140, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 2166, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 0, 465, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 169, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	1045, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 1052, 1053,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 1039, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 1026, 463, 303, 1025, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 1043, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 1044,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 1047, 566, 567, 385, 386, 387, 388, 347, 592,
	1042, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 1054, 1040, 1050, 1041, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 1051, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 1038, 420, 439, 427, 206, 651,
	512, 513, 652, 623, 0, 0, 0, 0, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 140, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2063, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 0, 465, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 169, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 1052, 1053,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 1026, 463, 303, 1025, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 1054, 2084, 1050, 2085, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 1051, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 2971, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 0, 452, 480, 330, 471, 0, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 496, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	2974, 0, 0, 0, 2973, 622, 0, 0, 626, 0,
	465, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 481, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 1551, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 1549, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1547, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 1545,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 0,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 1549,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1547, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 626, 0, 465, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 0, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 4045, 0, 228,
	848, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 1549, 0, 0, 0, 309,
	229, 509, 629, 511, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1547,
	0, 0, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 0, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 0, 651, 512, 513, 652, 623, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 2484, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 974,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 0, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 1549, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1760, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 0,
	452, 480, 330, 471, 0, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 496, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 0, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 481, 0, 418, 399, 654, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 0, 573, 576,
	506, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 0, 293, 522, 367, 0,
	410, 341, 587, 588, 0, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 2523, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 2525, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 2131, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 0, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 2132, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 0, 465, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3189, 3191, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 2546, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 1549, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 0, 452, 480, 330, 471, 0, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 496, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 626, 0,
	465, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 481, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 665, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 664, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 0,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 848, 0, 0,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 626, 0, 465, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 0, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4022, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 3789, 0, 0, 0, 309,
	229, 509, 629, 511, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 0, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 0, 651, 512, 513, 652, 623, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 3923,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 0, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1774, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 0,
	452, 480, 330, 471, 0, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 496, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 0, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 481, 0, 418, 399, 654, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 0, 573, 576,
	506, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 0, 293, 522, 367, 0,
	410, 341, 587, 588, 0, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3804,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 0, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 0, 465, 0, 0, 0, 3715, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	3221, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 0, 452, 480, 330, 471, 0, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 496, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 626, 0,
	465, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 481, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2063, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	3432, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 0,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 626, 0, 465, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 0, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 509, 629, 511, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 0, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 0, 651, 512, 513, 652, 623, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1549, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 0, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 2525, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 0,
	452, 480, 330, 471, 0, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 496, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 0, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 481, 0, 418, 399, 654, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 0, 573, 576,
	506, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 0, 293, 522, 367, 0,
	410, 341, 587, 588, 0, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 2890, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 0, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2202, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 0, 626, 0, 465, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	2642, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 0, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 0, 452, 480, 330, 471, 0, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 496, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 626, 0,
	465, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 481, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2602, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 413, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 2372, 651, 512, 513, 652, 623,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 0,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 447, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 626, 0, 465, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 0, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 1914, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 455, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 2045, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 509, 629, 511, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 436, 455, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 0, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 0, 651, 512, 513, 652, 623, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1549, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 447, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 1950, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 0, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 0,
	452, 480, 330, 471, 0, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 496, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 1578, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 481, 0, 418, 399, 654, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 328, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 0, 573, 576,
	506, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 0, 293, 522, 367, 0,
	410, 341, 587, 588, 0, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 665, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 412,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 614, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623, 397, 0,
	0, 527, 560, 549, 633, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 366,
	564, 546, 556, 547, 532, 533, 534, 541, 346, 535,
	536, 537, 507, 538, 508, 539, 540, 0, 563, 514,
	429, 381, 581, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 509, 629, 511, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 436,
	455, 310, 424, 468, 315, 432, 447, 305, 396, 421,
	0, 0, 301, 453, 431, 378, 356, 357, 300, 0,
	415, 334, 348, 331, 394, 0, 452, 480, 330, 471,
	0, 463, 303, 0, 462, 393, 449, 454, 379, 373,
	0, 302, 451, 377, 372, 360, 338, 496, 361, 362,
	352, 405, 370, 406, 353, 383, 382, 384, 0, 0,
	0, 0, 0, 491, 492, 0, 0, 640, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 622,
	0, 675, 626, 0, 465, 0, 0, 0, 0, 0,
	0, 435, 0, 0, 363, 0, 0, 0, 481, 0,
	418, 399, 654, 0, 0, 416, 368, 450, 407, 456,
	437, 464, 412, 408, 294, 438, 333, 380, 306, 308,
	328, 335, 337, 339, 340, 389, 390, 402, 423, 440,
	441, 442, 332, 316, 417, 317, 350, 318, 295, 324,
	322, 325, 425, 326, 297, 403, 446, 0, 345, 413,
	376, 298, 375, 404, 445, 444, 307, 472, 478, 479,
	568, 0, 484, 655, 656, 657, 493, 0, 409, 498,
	499, 500, 502, 503, 504, 505, 569, 586, 553, 523,
	486, 577, 520, 524, 525, 589, 0, 0, 0, 477,
	364, 365, 0, 343, 291, 292, 650, 329, 395, 591,
	624, 625, 516, 0, 578, 517, 526, 321, 550, 562,
	561, 391, 476, 0, 573, 576, 506, 649, 0, 570,
	585, 653, 584, 646, 401, 0, 422, 582, 529, 0,
	574, 548, 0, 575, 544, 579, 0, 518, 0, 430,
	458, 470, 487, 490, 519, 604, 605, 606, 296, 489,
	608, 609, 610, 611, 612, 613, 614, 607, 461, 551,
	528, 554, 469, 531, 530, 0, 0, 565, 485, 566,
	567, 385, 386, 387, 388, 347, 592, 314, 488, 411,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 0,
	557, 558, 555, 658, 0, 615, 616, 0, 0, 482,
	483, 342, 349, 501, 351, 313, 400, 344, 467, 358,
	0, 494, 559, 495, 618, 621, 619, 620, 392, 354,
	355, 426, 359, 369, 414, 466, 398, 419, 311, 457,
	428, 374, 545, 572, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 599, 598, 597, 596, 595, 594, 593, 0, 0,
	542, 443, 323, 285, 319, 320, 327, 647, 644, 448,
	648, 0, 293, 522, 367, 0, 410, 341, 587, 588,
	0, 639, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 590, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 473,
	474, 475, 497, 0, 459, 521, 645, 0, 0, 0,
	0, 0, 0, 0, 571, 583, 617, 0, 627, 628,
	630, 632, 631, 634, 433, 434, 0, 636, 637, 638,
	635, 371, 420, 439, 427, 0, 651, 512, 513, 652,
	623, 397, 0, 0, 527, 560, 549, 633, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 366, 564, 546, 556, 547, 532, 533, 534,
	541, 346, 535, 536, 537, 507, 538, 508, 539, 540,
	0, 563, 514, 429, 381, 581, 580, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 509, 629, 511, 510,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 436, 455, 310, 424, 468, 315, 432, 447,
	305, 396, 421, 0, 0, 301, 453, 431, 378, 356,
	357, 300, 0, 415, 334, 348, 331, 394, 0, 452,
	480, 330, 471, 0, 463, 303, 0, 462, 393, 449,
	454, 379, 373, 0, 302, 451, 377, 372, 360, 338,
	496, 361, 362, 352, 405, 370, 406, 353, 383, 382,
	384, 0, 0, 0, 0, 0, 491, 492, 0, 0,
	640, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 622, 0, 0, 626, 0, 465, 0, 0,
	0, 0, 0, 0, 435, 0, 0, 363, 0, 0,
	0, 481, 0, 418, 399, 654, 0, 0, 416, 368,
	450, 407, 456, 437, 464, 412, 408, 294, 438, 333,
	380, 306, 308, 328, 335, 337, 339, 340, 389, 390,
	402, 423, 440, 441, 442, 332, 316, 417, 317, 350,
	318, 295, 324, 322, 325, 425, 326, 297, 403, 446,
	0, 345, 413, 376, 298, 375, 404, 445, 444, 307,
	472, 478, 479, 568, 0, 484, 655, 656, 657, 493,
	0, 409, 498, 499, 500, 502, 503, 504, 505, 569,
	586, 553, 523, 486, 577, 520, 524, 525, 589, 0,
	0, 0, 477, 364, 365, 0, 343, 291, 292, 650,
	329, 395, 591, 624, 625, 516, 0, 578, 517, 526,
	321, 550, 562, 561, 391, 476, 0, 573, 576, 506,
	649, 0, 570, 585, 653, 584, 646, 401, 0, 422,
	582, 529, 0, 574, 548, 0, 575, 544, 579, 0,
	518, 0, 430, 458, 470, 487, 490, 519, 604, 605,
	606, 296, 489, 608, 609, 610, 611, 612, 613, 614,
	607, 461, 551, 528, 554, 469, 531, 530, 0, 0,
	565, 485, 566, 567, 385, 386, 387, 388, 347, 592,
	314, 488, 411, 0, 552, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 558, 555, 658, 0, 615, 616,
	0, 0, 482, 483, 342, 349, 501, 351, 313, 400,
	344, 467, 358, 0, 494, 559, 495, 618, 621, 619,
	620, 392, 354, 355, 426, 359, 369, 414, 466, 398,
	419, 311, 457, 428, 374, 545, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 600, 599, 598, 597, 596, 595, 594,
	593, 974, 0, 542, 443, 323, 285, 319, 320, 327,
	647, 644, 448, 648, 0, 293, 522, 367, 0, 410,
	341, 587, 588, 0, 639, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 590,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 473, 474, 475, 497, 0, 459, 521, 645,
	0, 0, 0, 0, 0, 0, 0, 571, 583, 617,
	0, 627, 628, 630, 632, 631, 634, 433, 434, 0,
	636, 637, 638, 635, 371, 420, 439, 427, 0, 651,
	512, 513, 652, 623, 397, 0, 0, 527, 560, 549,
	633, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 366, 564, 546, 556, 547,
	532, 533, 534, 541, 346, 535, 536, 537, 507, 538,
	508, 539, 540, 0, 563, 514, 429, 381, 581, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 509,
	629, 511, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 436, 455, 310, 424, 468,
	315, 432, 447, 305, 396, 421, 0, 0, 301, 453,
	431, 378, 356, 357, 300, 0, 415, 334, 348, 331,
	394, 0, 452, 480, 330, 471, 0, 463, 303, 0,
	462, 393, 449, 454, 379, 373, 0, 302, 451, 377,
	372, 360, 338, 496, 361, 362, 352, 405, 370, 406,
	353, 383, 382, 384, 0, 0, 0, 0, 0, 491,
	492, 0, 0, 640, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 622, 0, 0, 626, 0,
	465, 0, 0, 0, 0, 0, 0, 435, 0, 0,
	363, 0, 0, 0, 481, 0, 418, 399, 654, 0,
	0, 416, 368, 450, 407, 456, 437, 464, 412, 408,
	294, 438, 333, 380, 306, 308, 328, 335, 337, 339,
	340, 389, 390, 402, 423, 440, 441, 442, 332, 316,
	417, 317, 350, 318, 295, 324, 322, 325, 425, 326,
	297, 403, 446, 0, 345, 413, 376, 298, 375, 404,
	445, 444, 307, 472, 478, 479, 568, 0, 484, 655,
	656, 657, 493, 0, 409, 498, 499, 500, 502, 503,
	504, 505, 569, 586, 553, 523, 486, 577, 520, 524,
	525, 589, 0, 0, 0, 477, 364, 365, 0, 343,
	291, 292, 650, 329, 395, 591, 624, 625, 516, 0,
	578, 517, 526, 321, 550, 562, 561, 391, 476, 0,
	573, 576, 506, 649, 0, 570, 585, 653, 584, 646,
	401, 0, 422, 582, 529, 0, 574, 548, 0, 575,
	544, 579, 0, 518, 0, 430, 458, 470, 487, 490,
	519, 604, 605, 606, 296, 489, 608, 609, 610, 611,
	612, 613, 614, 607, 461, 551, 528, 554, 469, 531,
	530, 0, 0, 565, 485, 566, 567, 385, 386, 387,
	388, 347, 592, 314, 488, 411, 0, 552, 0, 0,
	0, 0, 0, 0, 0, 0, 557, 558, 555, 658,
	0, 615, 616, 0, 0, 482, 483, 342, 349, 501,
	351, 313, 400, 344, 467, 358, 0, 494, 559, 495,
	618, 621, 619, 620, 392, 354, 355, 426, 359, 369,
	414, 466, 398, 419, 311, 457, 428, 374, 545, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 600, 599, 598, 597,
	596, 595, 594, 593, 0, 0, 542, 443, 323, 285,
	319, 320, 327, 647, 644, 448, 648, 0, 293, 522,
	367, 0, 410, 341, 587, 588, 0, 639, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 590, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 473, 474, 475, 497, 0,
	459, 521, 645, 0, 0, 0, 0, 0, 0, 0,
	571, 583, 617, 0, 627, 628, 630, 632, 631, 634,
	433, 434, 0, 636, 637, 638, 635, 371, 420, 439,
	427, 0, 651, 512, 513, 652, 623, 397, 0, 0,
	527, 560, 549, 633, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 366, 564,
	546, 556, 547, 532, 533, 534, 541, 346, 535, 536,
	537, 507, 538, 508, 539, 540, 0, 563, 514, 429,
	381, 581, 580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 509, 629, 511, 510, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 436, 455,
	310, 424, 468, 315, 432, 447, 305, 396, 421, 0,
	0, 301, 453, 431, 378, 356, 357, 300, 0, 415,
	334, 348, 331, 394, 0, 452, 480, 330, 471, 0,
	463, 303, 0, 462, 393, 449, 454, 379, 373, 0,
	302, 451, 377, 372, 360, 338, 496, 361, 362, 352,
	405, 370, 406, 353, 383, 382, 384, 0, 0, 0,
	0, 0, 491, 492, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 626, 0, 465, 0, 0, 0, 0, 0, 0,
	435, 0, 0, 363, 0, 0, 0, 481, 0, 418,
	399, 654, 0, 0, 416, 368, 450, 407, 456, 437,
	464, 412, 408, 294, 438, 333, 380, 306, 308, 328,
	335, 337, 339, 340, 389, 390, 402, 423, 440, 441,
	442, 332, 316, 417, 317, 350, 318, 295, 324, 322,
	325, 425, 326, 297, 403, 446, 0, 345, 3167, 376,
	298, 375, 404, 445, 444, 307, 472, 478, 479, 568,
	0, 484, 655, 656, 657, 493, 0, 409, 498, 499,
	500, 502, 503, 504, 505, 569, 586, 553, 523, 486,
	577, 520, 524, 525, 589, 0, 0, 0, 477, 364,
	365, 0, 343, 291, 292, 650, 329, 395, 591, 624,
	625, 516, 0, 578, 517, 526, 321, 550, 562, 561,
	391, 476, 0, 573, 576, 506, 649, 0, 570, 585,
	653, 584, 646, 401, 0, 422, 582, 529, 0, 574,
	548, 0, 575, 544, 579, 0, 518, 0, 430, 458,
	470, 487, 490, 519, 604, 605, 606, 296, 489, 608,
	609, 610, 611, 612, 613, 614, 607, 461, 551, 528,
	554, 469, 531, 530, 0, 0, 565, 485, 566, 567,
	385, 386, 387, 388, 347, 592, 314, 488, 411, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	558, 555, 658, 0, 615, 616, 0, 0, 482, 483,
	342, 349, 501, 351, 313, 400, 344, 467, 358, 0,
	494, 559, 495, 618, 621, 619, 620, 392, 354, 355,
	426, 359, 369, 414, 466, 398, 419, 311, 457, 428,
	374, 545, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	599, 598, 597, 596, 595, 594, 593, 0, 0, 542,
	443, 323, 285, 319, 320, 327, 647, 644, 448, 648,
	0, 293, 522, 367, 0, 410, 341, 587, 588, 0,
	639, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 590, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 473, 474,
	475, 497, 0, 459, 521, 645, 0, 0, 0, 0,
	0, 0, 0, 571, 583, 617, 0, 627, 628, 630,
	632, 631, 634, 433, 434, 0, 636, 637, 638, 635,
	371, 420, 439, 427, 0, 651, 512, 513, 652, 623,
	397, 0, 0, 527, 560, 549, 633, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 366, 564, 546, 556, 547, 532, 533, 534, 541,
	346, 535, 536, 537, 507, 538, 508, 539, 540, 0,
	563, 514, 429, 381, 581, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 509, 629, 511, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 436, 455, 310, 424, 468, 315, 432, 1900, 305,
	396, 421, 0, 0, 301, 453, 431, 378, 356, 357,
	300, 0, 415, 334, 348, 331, 394, 0, 452, 480,
	330, 471, 0, 463, 303, 0, 462, 393, 449, 454,
	379, 373, 0, 302, 451, 377, 372, 360, 338, 496,
	361, 362, 352, 405, 370, 406, 353, 383, 382, 384,
	0, 0, 0, 0, 0, 491, 492, 0, 0, 640,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 622, 0, 0, 626, 0, 465, 0, 0, 0,
	0, 0, 0, 435, 0, 0, 363, 0, 0, 0,
	481, 0, 418, 399, 654, 0, 0, 416, 368, 450,
	407, 456, 437, 464, 412, 408, 294, 438, 333, 380,
	306, 308, 328, 335, 337, 339, 340, 389, 390, 402,
	423, 440, 441, 442, 332, 316, 417, 317, 350, 318,
	295, 324, 322, 325, 425, 326, 297, 403, 446, 0,
	345, 413, 376, 298, 375, 404, 445, 444, 307, 472,
	478, 479, 568, 0, 484, 655, 656, 657, 493, 0,
	409, 498, 499, 500, 502, 503, 504, 505, 569, 586,
	553, 523, 486, 577, 520, 524, 525, 589, 0, 0,
	0, 477, 364, 365, 0, 343, 291, 292, 650, 329,
	395, 591, 624, 625, 516, 0, 578, 517, 526, 321,
	550, 562, 561, 391, 476, 0, 573, 576, 506, 649,
	0, 570, 585, 653, 584, 646, 401, 0, 422, 582,
	529, 0, 574, 548, 0, 575, 544, 579, 0, 518,
	0, 430, 458, 470, 487, 490, 519, 604, 605, 606,
	296, 489, 608, 609, 610, 611, 612, 613, 614, 607,
	461, 551, 528, 554, 469, 531, 530, 0, 0, 565,
	485, 566, 567, 385, 386, 387, 388, 347, 592, 314,
	488, 411, 0, 552, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 555, 658, 0, 615, 616, 0,
	0, 482, 483, 342, 349, 501, 351, 313, 400, 344,
	467, 358, 0, 494, 559, 495, 618, 621, 619, 620,
	392, 354, 355, 426, 359, 369, 414, 466, 398, 419,
	311, 457, 428, 374, 545, 572, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 600, 599, 598, 597, 596, 595, 594, 593,
	0, 0, 542, 443, 323, 285, 319, 320, 327, 647,
	644, 448, 648, 0, 293, 522, 367, 0, 410, 341,
	587, 588, 0, 639, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 590, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 473, 474, 475, 497, 0, 459, 521, 645, 0,
	0, 0, 0, 0, 0, 0, 571, 583, 617, 0,
	627, 628, 630, 632, 631, 634, 433, 434, 0, 636,
	637, 638, 635, 371, 420, 439, 427, 0, 651, 512,
	513, 652, 623, 397, 0, 0, 527, 560, 549, 633,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 366, 564, 546, 556, 547, 532,
	533, 534, 541, 346, 535, 536, 537, 507, 538, 508,
	539, 540, 0, 563, 514, 429, 381, 581, 580, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 509, 629,
	511, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 436, 1528, 310, 424, 468, 315,
	432, 447, 305, 396, 421, 0, 0, 301, 453, 431,
	378, 356, 357, 300, 0, 415, 334, 348, 331, 394,
	0, 452, 480, 330, 471, 0, 463, 303, 0, 462,
	393, 449, 454, 379, 373, 0, 302, 451, 377, 372,
	360, 338, 496, 361, 362, 352, 405, 370, 406, 353,
	383, 382, 384, 0, 0, 0, 0, 0, 491, 492,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 622, 0, 0, 626, 0, 465,
	0, 0, 0, 0, 0, 0, 435, 0, 0, 363,
	0, 0, 0, 481, 0, 418, 399, 654, 0, 0,
	416, 368, 450, 407, 456, 437, 464, 412, 408, 294,
	438, 333, 380, 306, 308, 328, 335, 337, 339, 340,
	389, 390, 402, 423, 440, 441, 442, 332, 316, 417,
	317, 350, 318, 295, 324, 322, 325, 425, 326, 297,
	403, 446, 0, 345, 413, 376, 298, 375, 404, 445,
	444, 307, 472, 478, 479, 568, 0, 484, 655, 656,
	657, 493, 0, 409, 498, 499, 500, 502, 503, 504,
	505, 569, 586, 553, 523, 486, 577, 520, 524, 525,
	589, 0, 0, 0, 477, 364, 365, 0, 343, 291,
	292, 650, 329, 395, 591, 624, 625, 516, 0, 578,
	517, 526, 321, 550, 562, 561, 391, 476, 0, 573,
	576, 506, 649, 0, 570, 585, 653, 584, 646, 401,
	0, 422, 582, 529, 0, 574, 548, 0, 575, 544,
	579, 0, 518, 0, 430, 458, 470, 487, 490, 519,
	604, 605, 606, 296, 489, 608, 609, 610, 611, 612,
	613, 614, 607, 461, 551, 528, 554, 469, 531, 530,
	0, 0, 565, 485, 566, 567, 385, 386, 387, 388,
	347, 592, 314, 488, 411, 0, 552, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 558, 555, 658, 0,
	615, 616, 0, 0, 482, 483, 342, 349, 501, 351,
	313, 400, 344, 467, 358, 0, 494, 559, 495, 618,
	621, 619, 620, 392, 354, 355, 426, 359, 369, 414,
	466, 398, 419, 311, 457, 428, 374, 545, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 600, 599, 598, 597, 596,
	595, 594, 593, 0, 0, 542, 443, 323, 285, 319,
	320, 327, 647, 644, 448, 648, 0, 293, 522, 367,
	0, 410, 341, 587, 588, 0, 639, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 590, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 473, 474, 475, 497, 0, 459,
	521, 645, 0, 0, 0, 0, 0, 0, 0, 571,
	583, 617, 0, 627, 628, 630, 632, 631, 634, 433,
	434, 0, 636, 637, 638, 635, 371, 420, 439, 427,
	0, 651, 512, 513, 652, 623, 397, 0, 0, 527,
	560, 549, 633, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 366, 564, 546,
	556, 547, 532, 533, 534, 541, 346, 535, 536, 537,
	507, 538, 508, 539, 540, 0, 563, 514, 429, 381,
	581, 580, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 509, 629, 511, 510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 436, 1526, 310,
	424, 468, 315, 432, 447, 305, 396, 421, 0, 0,
	301, 453, 431, 378, 356, 357, 300, 0, 415, 334,
	348, 331, 394, 0, 452, 480, 330, 471, 0, 463,
	303, 0, 462, 393, 449, 454, 379, 373, 0, 302,
	451, 377, 372, 360, 338, 496, 361, 362, 352, 405,
	370, 406, 353, 383, 382, 384, 0, 0, 0, 0,
	0, 491, 492, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 622, 0, 0,
	626, 0, 465, 0, 0, 0, 0, 0, 0, 435,
	0, 0, 363, 0, 0, 0, 481, 0, 418, 399,
	654, 0, 0, 416, 368, 450, 407, 456, 437, 464,
	412, 408, 294, 438, 333, 380, 306, 308, 328, 335,
	337, 339, 340, 389, 390, 402, 423, 440, 441, 442,
	332, 316, 417, 317, 350, 318, 295, 324, 322, 325,
	425, 326, 297, 403, 446, 0, 345, 413, 376, 298,
	375, 404, 445, 444, 307, 472, 478, 479, 568, 0,
	484, 655, 656, 657, 493, 0, 409, 498, 499, 500,
	502, 503, 504, 505, 569, 586, 553, 523, 486, 577,
	520, 524, 525, 589, 0, 0, 0, 477, 364, 365,
	0, 343, 291, 292, 650, 329, 395, 591, 624, 625,
	516, 0, 578, 517, 526, 321, 550, 562, 561, 391,
	476, 0, 573, 576, 506, 649, 0, 570, 585, 653,
	584, 646, 401, 0, 422, 582, 529, 0, 574, 548,
	0, 575, 544, 579, 0, 518, 0, 430, 458, 470,
	487, 490, 519, 604, 605, 606, 296, 489, 608, 609,
	610, 611, 612, 613, 614, 607, 461, 551, 528, 554,
	469, 531, 530, 0, 0, 565, 485, 566, 567, 385,
	386, 387, 388, 347, 592, 314, 488, 411, 0, 552,
	0, 0, 0, 0, 0, 0, 0, 0, 557, 558,
	555, 658, 0, 615, 616, 0, 0, 482, 483, 342,
	349, 501, 351, 313, 400, 344, 467, 358, 0, 494,
	559, 495, 618, 621, 619, 620, 392, 354, 355, 426,
	359, 369, 414, 466, 398, 419, 311, 457, 428, 374,
	545, 572, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 599,
	598, 597, 596, 595, 594, 593, 0, 0, 542, 443,
	323, 285, 319, 320, 327, 647, 644, 448, 648, 0,
	293, 522, 367, 0, 410, 341, 587, 588, 0, 639,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 590, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 473, 474, 475,
	497, 0, 459, 521, 645, 0, 0, 0, 0, 0,
	0, 0, 571, 583, 617, 0, 627, 628, 630, 632,
	631, 634, 433, 434, 0, 636, 637, 638, 635, 371,
	420, 439, 427, 0, 651, 512, 513, 652, 623, 397,
	0, 0, 527, 560, 549, 633, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	366, 564, 546, 556, 547, 532, 533, 534, 541, 346,
	535, 536, 537, 507, 538, 508, 539, 540, 0, 563,
	514, 429, 381, 581, 580, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 509, 629, 511, 510, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	436, 455, 310, 424, 468, 315, 432, 1405, 305, 396,
	421, 0, 0, 301, 453, 431, 378, 356, 357, 300,
	0, 415, 334, 348, 331, 394, 0, 452, 480, 330,
	471, 0, 463, 303, 0, 462, 393, 449, 454, 379,
	373, 0, 302, 451, 377, 372, 360, 338, 496, 361,
	362, 352, 405, 370, 406, 353, 383, 382, 384, 0,
	0, 0, 0, 0, 491, 492, 0, 0, 640, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	622, 0, 0, 626, 0, 465, 0, 0, 0, 0,
	0, 0, 435, 0, 0, 363, 0, 0, 0, 481,
	0, 418, 399, 654, 0, 0, 416, 368, 450, 407,
	456, 437, 464, 412, 408, 294, 438, 333, 380, 306,
	308, 328, 335, 337, 339, 340, 389, 390, 402, 423,
	440, 441, 442, 332, 316, 417, 317, 350, 318, 295,
	324, 322, 325, 425, 326, 297, 403, 446, 0, 345,
	413, 376, 298, 375, 404, 445, 444, 307, 472, 478,
	479, 568, 0, 484, 655, 656, 657, 493, 0, 409,
	498, 499, 500, 502, 503, 504, 505, 569, 586, 553,
	523, 486, 577, 520, 524, 525, 589, 0, 0, 0,
	477, 364, 365, 0, 343, 291, 292, 650, 329, 395,
	591, 624, 625, 516, 0, 578, 517, 526, 321, 550,
	562, 561, 391, 476, 0, 573, 576, 506, 649, 0,
	570, 585, 653, 584, 646, 401, 0, 422, 582, 529,
	0, 574, 548, 0, 575, 544, 579, 0, 518, 0,
	430, 458, 470, 487, 490, 519, 604, 605, 606, 296,
	489, 608, 609, 610, 611, 612, 613, 614, 607, 461,
	551, 528, 554, 469, 531, 530, 0, 0, 565, 485,
	566, 567, 385, 386, 387, 388, 347, 592, 314, 488,
	411, 0, 552, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 558, 555, 658, 0, 615, 616, 0, 0,
	482, 483, 342, 349, 501, 351, 313, 400, 344, 467,
	358, 0, 494, 559, 495, 618, 621, 619, 620, 392,
	354, 355, 426, 359, 369, 414, 466, 398, 419, 311,
	457, 428, 374, 545, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 600, 599, 598, 597, 596, 595, 594, 593, 0,
	0, 542, 443, 323, 285, 319, 320, 327, 647, 644,
	448, 648, 0, 293, 522, 367, 0, 410, 341, 587,
	588, 0, 639, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 590, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	473, 474, 475, 497, 0, 459, 521, 645, 0, 0,
	0, 0, 0, 0, 0, 571, 583, 617, 0, 627,
	628, 630, 632, 631, 634, 433, 434, 0, 636, 637,
	638, 635, 371, 420, 439, 427, 0, 651, 512, 513,
	652, 623, 397, 0, 0, 527, 560, 549, 633, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 366, 564, 546, 556, 547, 532, 533,
	534, 541, 346, 535, 536, 537, 507, 538, 508, 539,
	540, 0, 563, 514, 429, 381, 581, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 509, 629, 511,
	510, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 436, 455, 310, 424, 468, 315, 432,
	447, 305, 396, 421, 0, 0, 301, 453, 431, 378,
	356, 357, 300, 0, 415, 334, 348, 331, 394, 0,
	452, 480, 330, 471, 0, 463, 303, 0, 462, 393,
	449, 454, 379, 373, 0, 302, 451, 377, 372, 360,
	338, 496, 361, 362, 352, 405, 370, 406, 353, 383,
	382, 384, 0, 0, 0, 0, 0, 491, 492, 0,
	0, 640, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 622, 0, 0, 626, 0, 465, 0,
	0, 0, 0, 0, 0, 435, 0, 0, 363, 0,
	0, 0, 481, 0, 418, 399, 654, 0, 0, 416,
	368, 450, 407, 456, 437, 464, 412, 408, 294, 438,
	333, 380, 306, 308, 743, 335, 337, 339, 340, 389,
	390, 402, 423, 440, 441, 442, 332, 316, 417, 317,
	350, 318, 295, 324, 322, 325, 425, 326, 297, 403,
	446, 0, 345, 413, 376, 298, 375, 404, 445, 444,
	307, 472, 478, 479, 568, 0, 484, 655, 656, 657,
	493, 0, 409, 498, 499, 500, 502, 503, 504, 505,
	569, 586, 553, 523, 486, 577, 520, 524, 525, 589,
	0, 0, 0, 477, 364, 365, 0, 343, 291, 292,
	650, 329, 395, 591, 624, 625, 516, 0, 578, 517,
	526, 321, 550, 562, 561, 391, 476, 0, 573, 576,
	506, 649, 0, 570, 585, 653, 584, 646, 401, 0,
	422, 582, 529, 0, 574, 548, 0, 575, 544, 579,
	0, 518, 0, 430, 458, 470, 487, 490, 519, 604,
	605, 606, 296, 489, 608, 609, 610, 611, 612, 613,
	614, 607, 461, 551, 528, 554, 469, 531, 530, 0,
	0, 565, 485, 566, 567, 385, 386, 387, 388, 347,
	592, 314, 488, 411, 0, 552, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 555, 658, 0, 615,
	616, 0, 0, 482, 483, 342, 349, 501, 351, 313,
	400, 344, 467, 358, 0, 494, 559, 495, 618, 621,
	619, 620, 392, 354, 355, 426, 359, 369, 414, 466,
	398, 419, 311, 457, 428, 374, 545, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 600, 599, 598, 597, 596, 595,
	594, 593, 0, 0, 542, 443, 323, 285, 319, 320,
	327, 647, 644, 448, 648, 0, 293, 522, 367, 0,
	410, 341, 587, 588, 0, 639, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	590, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 473, 474, 475, 497, 0, 459, 521,
	645, 0, 0, 0, 0, 0, 0, 0, 571, 583,
	617, 0, 627, 628, 630, 632, 631, 634, 433, 434,
	0, 636, 637, 638, 635, 371, 420, 439, 427, 0,
	651, 512, 513, 652, 623, 397, 0, 0, 527, 560,
	549, 633, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 366, 564, 546, 556,
	547, 532, 533, 534, 541, 346, 535, 536, 537, 507,
	538, 508, 539, 540, 0, 563, 514, 429, 381, 581,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	509, 629, 511, 510, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 436, 455, 310, 424,
	468, 315, 432, 447, 305, 396, 421, 0, 0, 301,
	453, 431, 378, 356, 357, 300, 0, 415, 334, 348,
	331, 394, 0, 452, 480, 330, 471, 0, 463, 303,
	0, 462, 393, 449, 454, 379, 373, 0, 302, 451,
	377, 372, 360, 338, 496, 361, 362, 352, 405, 370,
	406, 353, 383, 382, 384, 0, 0, 0, 0, 0,
	491, 492, 0, 0, 640, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 626,
	0, 465, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 363, 0, 0, 0, 481, 0, 418, 399, 654,
	0, 0, 416, 368, 450, 407, 456, 437, 464, 700,
	408, 294, 438, 333, 380, 306, 308, 328, 335, 337,
	339, 340, 389, 390, 402, 423, 440, 441, 442, 332,
	316, 417, 317, 350, 318, 295, 324, 322, 325, 425,
	326, 297, 403, 446, 0, 345, 413, 376, 298, 375,
	404, 445, 444, 307, 472, 478, 479, 568, 0, 484,
	655, 656, 657, 493, 0, 409, 498, 499, 500, 502,
	503, 504, 505, 569, 586, 553, 523, 486, 577, 520,
	524, 525, 589, 0, 0, 0, 477, 364, 365, 0,
	343, 291, 292, 650, 329, 395, 591, 624, 625, 516,
	0, 578, 517, 526, 321, 550, 562, 561, 391, 476,
	0, 573, 576, 506, 649, 0, 570, 585, 653, 584,
	646, 401, 0, 422, 582, 529, 0, 574, 548, 0,
	575, 544, 579, 0, 518, 0, 430, 458, 470, 487,
	490, 519, 604, 605, 606, 296, 489, 608, 609, 610,
	611, 612, 613, 701, 607, 461, 551, 528, 554, 469,
	531, 530, 0, 0, 565, 485, 566, 567, 385, 386,
	387, 388, 347, 592, 314, 488, 411, 0, 552, 0,
	0, 0, 0, 0, 0, 0, 0, 557, 558, 555,
	658, 0, 615, 616, 0, 0, 482, 483, 342, 349,
	501, 351, 313, 400, 344, 467, 358, 0, 494, 559,
	495, 618, 621, 619, 620, 392, 354, 355, 426, 359,
	369, 414, 466, 398, 419, 311, 457, 428, 374, 545,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 599, 598,
	597, 596, 595, 594, 593, 0, 0, 542, 443, 323,
	285, 319, 320, 327, 647, 644, 448, 648, 0, 293,
	522, 367, 0, 410, 341, 587, 588, 0, 639, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 590, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 473, 474, 475, 497,
	0, 459, 521, 645, 0, 0, 0, 0, 0, 0,
	0, 571, 583, 617, 0, 627, 628, 630, 632, 631,
	634, 433, 434, 0, 636, 637, 638, 635, 371, 420,
	439, 427, 0, 651, 512, 513, 652, 623,
}

var yyPact = [...]int{
	4132, -1000, -1000, -1000, -332, 15927, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 50141, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 454, 50141, -330, 31784, 48242, -1000, -1000, 2727, -1000,
	48875, 17846, 50141, 543, 542, 50141, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 964, -1000, 54572, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 903, 4954, 53939, 12102,
	-216, -1000, 1621, -39, 2641, 489, -201, -202, 1111, 1144,
	1417, 1027, 50141, 1087, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 245, 993, 49508,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 277, 236, 962, 993, 22918, 136,
	135, 1621, 445, -72, 291, -1000, 1318, 4182, 197, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12102, 12102, 15927, -382, 15927, 12102, 50141, 50141, -1000, -1000,
	-1000, -1000, -330, 48875, 903, 4954, 12102, 2641, 489, -201,
	-202, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -72, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	135, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5277, -1000, 1647, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2406,
	3131, 1637, 2636, 847, 48242, 50141, -1000, 144, 847, -1000,
	-1000, -1000, 1621, 3560, -1000, 50141, 50141, 220, 1929, -1000,
	565, 438, 540, 447, 339, 1633, -1000, -1000, -1000, -1000,
	-1000, -1000, 755, 3481, -1000, 50141, 50141, 3148, 50141, -1000,
	2322, 799, -1000, 5619, 3330, 1401, 1010, 3174, -1000, -1000,
	3130, -1000, 347, 623, 328, 608, 448, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 373, -1000, 3380, -1000, -1000, 335,
	-1000, -1000, 324, -1000, -1000, -1000, 125, -1000, -1000, -1000,
	-1000, -1000, -1000, 4, -1000, -1000, 1180, 2355, 12102, 2264,
	-1000, 2996, 1691, -1000, -1000, -1000, 7644, 14646, 14646, 14646,
	14646, 50141, -1000, -1000, 2966, 12102, 3128, 3127, 3126, 3124,
	-1000, -1000, -1000, -1000, -1000, -1000, 3123, 1630, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2073, -1000, -1000,
	-1000, 15282, -1000, 3119, 3118, 3117, 3116, 3114, 3113, 3111,
	3110, 3109, 3102, 3100, 3099, 3098, 3097, 2852, 17203, 3096,
	2635, 2633, 3094, 3088, 3087, 2632, 3085, 3084, 3082, 2852,
	2852, 3080, 3079, 3076, 3075, 3072, 3045, 3044, 3043, 3038,
	3035, 3034, 3027, 3026, 3021, 3019, 3018, 3017, 3016, 3015,
	3014, 3013, 3012, 3011, 3009, 3007, 3006, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1426, -1000, 3004, 3493, 2932, -1000, 3365, 3355, 3353,
	3351, -266, 3003, 2273, -1000, -1000, 108, 3478, 50141, -289,
	50141, 416, -87, -88, -96, -1000, -77, -1000, -1000, 1134,
	-1000, 1067, 53306, 939, -1000, -1000, 50141, 901, 901, 901,
	50141, 50141, 244, 986, 901, 901, 901, 901, 901, 942,
	901, 3409, 961, 960, 953, 951, 901, -37, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1928, 1927, 3256, 1054, -1000,
	-1000, -1000, -1000, 1561, 50141, -1000, 2940, 416, -319, 1857,
	1857, 3462, 3462, 3407, 3400, 808, 803, 784, 1857, 650,
	-1000, 1883, 1883, 1883, 1883, 1857, 531, 833, 3413, 3413,
	133, 1883, 84, 1857, 1857, 84, 1857, 1857, -1000, 1908,
	303, -276, -1000, -1000, -1000, -1000, 1883, 1883, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3375, 3374, 903, 903, 50141,
	903, 212, 50141, 903, 903, 903, 50141, 912, -318, 26,
	52673, 52040, 2251, 2322, 796, 792, 1575, 1919, -1000, 1818,
	50141, 50141, 1818, 1818, 26087, 25454, -1000, 50141, -1000, 3493,
	2932, 2839, 1617, 2837, 2932, -99, 416, 903, 903, 903,
	903, 903, 313, 903, 903, 903, 903, 903, 50141, 50141,
	47609, 903, 903, 903, 903, 10188, 1318, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15927, 2059, 2039, 196, -13, -307, 257, -1000, -1000, 50141,
	3304, 307, -1000, -1000, -1000, 2908, -1000, 2933, 2933, 2933,
	2933, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2933, 2933, 2939, 3002, -1000, -1000, 2909, 2909, 2909,
	2908, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2937, 2937, 2938, 2938,
	2937, 50141, -113, -1000, -1000, 12102, 50141, 3322, 409, 2998,
	847, -1000, -1000, 50141, 306, 418, 3493, 3319, 3413, 3447,
	-1000, -1000, 1626, 2272, 2631, -1000, 339, -1000, 512, 339,
	-1000, 405, 405, 1821, -1000, 1138, -1000, -1000, -1000, -1000,
	-1000, -1000, 50141, 4, 419, -1000, -1000, 2604, 2978, -1000,
	660, 1347, 1455, -1000, 235, 4686, 40646, 2322, 40646, 50141,
	-1000, -1000, -1000, -1000, -1000, -1000, 105, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 348, -1000, 12102, 12102, 12102, 12102, 12102, -1000, 789,
	14010, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14646, 14646,
	14646, 14646, 14646, 14646, 14646, 14646, 14646, 14646, 14646, 14646,
	2965, 1866, 14646, 14646, 14646, 14646, 28619, 1617, 3077, 1574,
	308, 1691, 1691, 1691, 1691, 12102, -1000, 1949, 2355, 12102,
	12102, 12102, 12102, 34949, 50141, -1000, -1000, 4800, 12102, 12102,
	5611, 12102, 3347, 12102, 12102, 12102, 2836, 6363, 50141, 12102,
	-1000, 2834, 2832, -1000, -1000, 2130, 12102, -1000, -1000, 12102,
	-1000, -1000, 12102, 14646, 12102, -1000, 12102, 12102, 12102, -1000,
	-1000, 3053, 3347, 3347, 3347, 1898, 12102, 12102, 3347, 3347,
	3347, 1841, 3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347,
	3347, 3347, 3347, 2830, 2826, 2824, 11466, 3413, -216, -1000,
	9552, 3319, 3413, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -268, 2977, 50141, 2627, 2626, -343, 181,
	477, 50141, 1188, -1000, -1000, 50141, 2270, 50141, 2269, 97,
	1107, 1076, 1079, -1000, -1000, 50141, 51407, -1000, 50141, 1969,
	50141, 50141, 3343, -1000, 2976, 50141, 901, 901, 901, -1000,
	45710, 40646, 50141, 50141, 2322, 50141, 50141, 50141, 901, 901,
	901, 901, 50141, -1000, 3275, 40646, 3270, 912, -1000, 50141,
	1561, 3342, 50141, -1000, -1000, -1000, -1000, 3462, 14646, 14646,
	-1000, -1000, 12102, -1000, 232, 46976, 1883, 1857, 1857, -1000,
	-1000, 50141, -1000, -1000, -1000, 1883, 50141, 1883, 1883, 3462,
	1883, -1000, -1000, -1000, 1857, 1857, -1000, -1000, 12102, -1000,
	-1000, 1883, 1883, -1000, -1000, 3462, 50141, 103, 3462, 3462,
	123, -1000, -1000, -1000, 1857, 50141, 50141, 901, 50141, -1000,
	50141, 50141, -1000, -1000, 50141, 50141, 4580, 50141, 45710, 46343,
	3373, -1000, 40646, 50141, 50141, 1555, -1000, 938, 38114, -1000,
	50141, 1489, -1000, 31, -1000, 93, 26, 1818, 26, 1818,
	928, -1000, 659, 766, 24188, 589, 40646, 6999, -1000, -1000,
	1818, 1818, 6999, 6999, 1697, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1546, -1000, 287, 3413, -1000, -1000, -1000, -1000,
	-1000, 2268, -1000, 50141, 45710, 40646, 2322, 50141, 903, 50141,
	50141, 50141, 50141, 50141, -1000, 2974, 1619, -1000, 3329, 50141,
	50141, 50141, 50141, 1376, -1000, -1000, 21011, 1618, -1000, -1000,
	1994, -1000, 12102, 15927, -244, 12102, 15927, 15927, 12102, 15927,
	-1000, 12102, 295, -1000, -1000, -1000, -1000, 2265, -1000, 2262,
	-1000, -1000, -1000, -1000, -1000, 2618, 2618, -1000, 2260, -1000,
	-1000, -1000, -1000, 2258, -1000, -1000, 2256, -1000, -1000, -1000,
	-1000, -158, 2823, 1180, -1000, 2617, 3172, -217, -1000, 22285,
	50141, 50141, 409, -345, 1923, 1921, 1915, 3387, -1000, -217,
	-1000, 21648, 50141, 3413, -1000, -221, 3319, 12102, 50141, -1000,
	3399, -1000, -1000, 339, -1000, -1000, -1000, 405, 465, -1000,
	-1000, -1000, -1000, -1000, -1000, 1612, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 446, -75, -78, 1520,
	-1000, 50141, -1000, -1000, 235, 40646, 42545, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 276, -1000, -1000, 174, -1000, 927,
	266, 1817, -1000, -1000, 226, 209, 233, 994, 2355, -1000,
	1988, 1988, 2000, -1000, 956, -1000, -1000, -1000, -1000, 2966,
	-1000, -1000, -1000, 2149, 2924, -1000, 1747, 1747, 1624, 1624,
	1624, 1624, 1624, 2170, 2170, -1000, -1000, -1000, 7644, 2965,
	14646, 14646, 14646, 14646, 984, 984, 4039, 3778, -1000, -1000,
	-1000, -1000, 12102, 180, 1966, -1000, 12102, 2516, 1462, 2505,
	1428, 1816, -1000, 2908, 12102, 1611, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2821, 2817, 2346, 3477,
	2808, 12102, -1000, -1000, 1815, 1799, 1793, -1000, 2151, 10830,
	-1000, -1000, -1000, 2807, 1610, 2806, -1000, -1000, -1000, 2805,
	1784, 1394, 2797, 1820, 2791, 2790, 2784, 2782, 1516, 12102,
	12102, 12102, 12102, 2776, 1777, 1774, 12102, 12102, 12102, 12102,
	2775, 12102, 12102, 12102, 12102, 12102, 12102, 12102, 12102, 12102,
	12102, 50141, 161, 161, 161, 1513, 1504, -1000, -1000, 1773,
	-1000, 2355, -1000, -1000, 3319, -1000, 2963, 2255, 1498, -1000,
	-1000, -327, 2567, 50141, 50141, 175, 50141, 2609, -291, 50141,
	-1000, -1000, 2607, -1000, -1000, -1000, 1100, 1062, 1118, -1000,
	50141, -1000, 2606, 3326, 3396, 950, 50141, 1228, 2962, 50141,
	50141, 50141, 292, -1000, -1000, 1338, -1000, 266, -3, 555,
	1235, 3146, 3475, -120, 50141, 50141, 50141, 50141, 3341, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 45077, -1000, 2960,
	1753, -1000, -1000, 1691, 1691, 2355, 50141, 50141, 50141, 3145,
	50141, 50141, 3462, 3462, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1883, 3462, 3462, 1443, 1857, 1883, -1000, -1000, 1883,
	-345, -1000, 1883, -1000, -345, 1606, -345, 50141, -1000, -1000,
	-1000, 3340, 2940, 1495, -1000, -1000, -1000, 3446, 1757, 877,
	877, 1133, 770, 3445, 19745, -1000, 1763, 1290, 925, 3291,
	345, -1000, 1763, -155, 857, 1763, 1763, 1763, 1763, 1763,
	1763, 1763, 746, 743, 1763, 1763, 1763, 1763, 1763, 1763,
	1763, 1763, 1763, 1763, 1763, 1136, 1763, 1763, 1763, 1763,
	1763, -1000, 1763, 2959, 536, -1000, -1000, -1000, -1000, -1000,
	-1000, 822, 693, 288, 3369, 382, -1000, 417, 1338, 342,
	3368, 443, 50141, 50141, 3169, 1305, -1000, -1000, -1000, -1000,
	-1000, 29252, 29252, 23555, 29252, -1000, 188, 1818, 26, 68,
	-1000, -1000, 1489, 6999, 1489, 6999, 2249, -1000, -1000, 922,
	-1000, -1000, 1235, -1000, 50141, 50141, -1000, -1000, 2956, 1911,
	-1000, -1000, 17203, -1000, 6999, 6999, -1000, -1000, 31151, 50141,
	-1000, 3, -1000, 13, 3319, -1000, 1212, -1000, -1000, 1486,
	1235, 3171, 50141, 1212, 1212, 1212, -1000, -1000, 18479, 50141,
	50141, -1000, -1000, -1000, -1000, 3462, 10188, -1000, 38114, -1000,
	-1000, 44444, -1000, 43811, 1936, -1000, 15927, 2024, 193, -1000,
	253, -310, 191, 1964, 190, 2355, -1000, -1000, 2773, 2770,
	1713, -1000, 1712, 2769, 1708, 1703, 2248, -1000, 77, -1000,
	3306, 1272, -1000, 2954, -1000, 1677, 3252, -1000, 1483, -1000,
	1897, 1676, -1000, -1000, -1000, 12102, 43178, 12102, 1033, 1272,
	1674, 3250, 1483, 3319, 2598, -1000, 1479, -1000, 2086, 1603,
	202, -1000, -1000, -1000, 50141, 903, 2604, 1673, 42545, 1358,
	-1000, 921, 1598, 1596, -1000, 40646, 330, 40646, -1000, 40646,
	-1000, -1000, 406, -1000, 50141, 3317, -1000, -1000, -1000, 2567,
	1889, -344, 50141, -1000, -1000, -1000, -1000, -1000, 1655, -1000,
	984, 984, 4039, 2500, -1000, 14646, -1000, 14646, 3062, -1000,
	1934, -1000, 12102, 1992, 5187, 12102, 5187, 963, 27353, 34949,
	-103, 3316, 3040, 50141, -1000, -1000, 12102, 12102, -1000, 3036,
	-1000, -1000, -1000, -1000, 12102, 12102, 2192, -1000, 50141, -1000,
	-1000, -1000, -1000, 27353, -1000, 14646, -1000, -1000, -1000, -1000,
	12102, 1380, 1380, 2994, 1638, 161, 161, 161, 2941, 2833,
	2815, 1627, 161, 2772, 2766, 2750, 2717, 2667, 2654, 2620,
	2551, 2445, 2431, 1622, -1000, 2952, -1000, -1000, 2047, 13374,
	9552, -1000, -1000, 297, 1457, 2245, 2597, 113, -1000, 1888,
	-1000, 2596, 50141, 50141, 1185, -1000, 50141, 3473, -1000, -1000,
	-1000, -1000, 1059, -1000, 2595, -1000, 286, 264, 2118, 319,
	2768, 1454, -1000, -1000, 50141, -1000, -1000, -1000, 18479, 2940,
	2951, 2940, 150, 1763, 642, 40646, 773, -1000, 50141, 2152,
	1881, 3170, 749, 3300, 50141, 2948, 393, 2947, 2946, 3339,
	528, 5416, 50141, 1367, -1000, 1589, 4182, -1000, 50141, -1000,
	-1000, 50141, -1000, 2322, -1000, 1857, -1000, -1000, 3462, -1000,
	-1000, 12102, 12102, 3462, 1857, 1857, -1000, 1883, -1000, 50141,
	-1000, -345, 528, 5416, 3334, 4855, 721, 2437, -1000, 50141,
	-1000, -1000, -1000, 864, -1000, 1083, 901, 50141, 2023, 1083,
	2022, 2944, -1000, -1000, 50141, 50141, 50141, 50141, -1000, -1000,
	50141, -1000, 50141, 50141, 50141, 50141, 50141, 41912, -1000, 50141,
	50141, -1000, 50141, 2020, 50141, 2017, 3302, -1000, 1763, 1763,
	1020, -1000, -1000, 636, -1000, 41912, 2244, 2242, 2239, 2236,
	2593, 2592, 2589, 1763, 1763, 2234, 2588, 41279, 2585, 1252,
	2226, 2224, 2210, 2233, 2584, 1078, -1000, 2583, 2211, 2174,
	2150, 50141, 2943, 2466, 534, -1000, -1000, 2118, 150, 1763,
	374, 50141, 1880, 1879, 642, 604, 554, -12, 24821, -1000,
	-1000, -1000, 50141, 38114, 38114, 38114, 38114, 38114, 38114, -1000,
	3211, 3189, 3204, -1000, 3208, 3205, 3212, 3201, 3186, 50141,
	38114, 2940, -1000, 41279, -1000, -1000, -1000, 1617, 1620, 3578,
	1064, 12102, 6999, -1000, -1000, 28, 65, -1000, -1000, -1000,
	-1000, 40646, 2580, 589, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3394, 50141, 50141, 884, 2767, 1451, -1000, -1000, -1000,
	5416, 2933, 2933, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2933, 2933, 2939, -1000, -1000, 2909, 2909, 2909,
	2908, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2937, 2937, 2938, 2938, 2937, -1000, -1000, 3459, -1000,
	1436, -1000, -1000, 1588, -1000, 1962, -333, 15927, 1946, 1932,
	-1000, 12102, 15927, 12102, -247, 360, -249, -1000, -1000, -1000,
	2579, -1000, -1000, -1000, 2188, -1000, 2187, -1000, 194, 198,
	2013, -217, 9552, 434, 50141, -217, 50141, 9552, -1000, 50141,
	171, -358, -359, 165, 2578, 400, -217, 3394, 77, 12102,
	3289, -1000, -1000, 50141, 2186, -1000, -1000, -1000, 3468, 40646,
	2322, 1706, 40013, -1000, 334, -1000, 265, 612, 2577, -1000,
	948, 111, 2570, 2567, -1000, -1000, -1000, -1000, 14646, 1691,
	-1000, -1000, -1000, 2355, 12102, 2763, -1000, 1075, 1075, 2307,
	2762, 2760, -1000, 2933, 2933, -1000, 2908, 2909, 2908, 1075,
	1075, 2758, -1000, 2907, -1000, 3316, -1000, 2143, 2370, -1000,
	2364, 2333, 12102, -1000, 2743, 3727, 1415, -35, -186, 161,
	161, -1000, -1000, -1000, -1000, 161, 161, 161, 161, -1000,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 849, -101, -281, -102, -282, -1000, 2741, 1432, -1000,
	-1000, -1000, -1000, -1000, 5611, 1392, 577, 577, 2567, 2566,
	-1000, 915, 2565, 1095, 50141, 2563, -295, -1000, 2547, -1000,
	-1000, 50141, 50141, 50141, 50774, 677, 50141, 50141, 2544, -1000,
	2542, 2537, 1228, 5416, 2738, 3333, 19112, 3332, 2284, -1000,
	-1000, -1000, 30518, 604, -1000, -1000, -1000, 750, 450, 2179,
	592, -1000, 50141, 566, 3264, 1872, 2536, 50141, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3300, -1000, 966, 494, 36848,
	16570, -1000, 403, 50141, -1000, 19112, 19112, 403, 497, 1896,
	-1000, 847, 1471, 139, 38114, 50141, -1000, 37481, 2735, -1000,
	-1000, 1235, 3462, -1000, 2355, 2355, -345, 3462, 3462, 1857,
	-1000, -1000, 497, -1000, 403, -1000, 1765, 20378, 613, 510,
	444, -1000, 709, -1000, -1000, 845, 3276, 5416, -1000, 50141,
	-1000, 50141, -1000, 50141, 50141, 901, 12102, 3276, 50141, 910,
	-1000, 1179, 518, 430, 860, 860, 1387, -1000, 3316, -1000,
	-1000, 1373, -1000, -1000, -1000, -1000, 50141, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 27353, 27353, 3363, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2534, 2533, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 50141, 1608, -1000, 1871, 2162, 2526, 2284, 30518, 1868,
	1818, 2524, 2522, 604, -1000, 2520, 2519, 2152, 1862, 947,
	50141, -1000, 1222, 50141, 50141, -1000, 1320, -1000, 1854, 3142,
	3168, 3142, -1000, 3142, -1000, -1000, -1000, -1000, -1000, -1000,
	3198, -1000, 3183, -1000, -1000, -1000, -1000, 1320, -1000, -1000,
	-1000, -1000, -1000, 1064, -1000, 3393, 1083, 1083, 1083, 2731,
	-1000, -1000, -1000, -1000, 1358, 2728, -1000, -1000, -1000, 3488,
	-1000, -1000, -1000, -1000, -1000, -1000, 18479, 3295, 3455, 3444,
	39380, -1000, -333, 1899, -1000, 1980, 185, 1959, 50141, -1000,
	-1000, -1000, 2725, 2722, -223, 224, 3442, 3437, 1130, -1000,
	2720, 1357, -217, -1000, -1000, 1272, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -366, -217, -1000, 1272, -1000, 194, -1000,
	-1000, 3286, -1000, -1000, 2322, -1000, 254, -1000, -1000, -1000,
	-1000, -1000, -1000, 247, -1000, 50141, -1000, 1313, 110, -1000,
	2355, -1000, -1000, -1000, -1000, -1000, 5187, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2515, -1000, -1000,
	12102, -1000, -1000, -1000, 2291, -1000, -1000, 12102, 2719, 2481,
	2718, 2480, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3493,
	-1000, 3435, 1607, 2715, 2714, 1592, 2713, 2712, -1000, 12102,
	2711, 5611, 1021, 2479, 1021, -1000, -1000, 441, 29885, 50141,
	3467, -1000, 50141, 2478, -1000, -1000, 50141, 2118, 676, 2118,
	720, 50141, -1000, -1000, -1000, -1000, -1000, 965, 403, 2710,
	1286, -1000, -1000, -1000, -1000, 403, -1000, 2476, 262, -1000,
	-1000, -1000, -1000, 2161, -1000, -1000, 2140, 1593, 279, -1000,
	-1000, -1000, -1000, -1000, -1000, 2050, 50141, 38747, 2281, 1846,
	-349, -1000, 2904, -1000, 1763, 1763, 1763, 50141, 1590, -1000,
	1763, 1763, 2709, -1000, -1000, 2703, 2698, -122, 862, 1843,
	1837, -1000, 2159, 29252, 38114, 37481, 1309, -1000, 1585, -1000,
	-1000, -1000, -1000, -1000, -1000, 3462, 862, -1000, 605, 2154,
	14646, 2903, 14646, 2902, 638, 2901, 1579, -1000, 50141, -1000,
	-1000, 50141, 4024, 2899, -1000, 2898, 3144, 568, 2897, 2896,
	50141, 2238, -1000, 3276, 50141, 782, 3278, -1000, -1000, -1000,
	464, -1000, -1000, 670, -1000, 50141, -1000, 50141, -1000, 1661,
	-1000, 27353, -1000, -1000, 1573, -1000, 2466, 2465, 5611, -1000,
	-1000, 262, 2464, 6999, -1000, -1000, -1000, -1000, -1000, 3264,
	2446, 2050, 50141, -1000, 50141, 1222, 1222, 3493, 50141, 9552,
	-1000, -1000, 12102, 2890, -1000, 12102, -1000, -1000, -1000, -1000,
	-1000, -1000, 2887, 3274, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2120, -1000, 12102, 12738, -1000, 881, 15927, -258, 359,
	-1000, -1000, -1000, -225, 2441, -1000, -1000, 3433, 2436, 2298,
	50141, -1000, -1000, 1272, -1000, 1272, -223, -1000, -1000, 1235,
	-1000, -1000, 1105, 754, -1000, 2692, 271, -1000, 2217, -1000,
	2168, 161, -1000, 161, -1000, 251, 12102, -1000, 2435, -1000,
	-1000, -1000, 2433, -1000, -1000, 2156, -1000, 2675, -1000, 2430,
	-1000, -1000, 50141, -1000, -1000, 1091, 2427, -351, -1000, 2425,
	2118, 2424, 2118, 50141, 673, 5416, -124, -122, 19112, -124,
	-1000, -1000, 396, 423, -1000, -1000, 2129, 649, -1000, -1000,
	2422, 637, -1000, 1222, -1000, 1826, 2036, 2366, 34949, 27353,
	28619, 2421, -1000, -1000, 36848, 2120, 2120, 5492, 348, 5784,
	-1000, 2886, 1149, 1804, -1000, 2146, -1000, 2144, -1000, 3462,
	1309, 132, -1000, -1000, 1634, -1000, 1149, 2437, 3432, -1000,
	3605, 50141, 3470, 50141, 2882, 1801, 14646, -1000, 845, 3248,
	-1000, -1000, 4024, -1000, -1000, 2041, 14646, -1000, -1000, 2419,
	28619, 1011, 1796, 1795, 1015, 2881, -1000, 714, 3487, -1000,
	-1000, -1000, 1014, 2880, -1000, 2009, 1998, -1000, 50141, -1000,
	34949, 34949, 837, 837, 34949, 34949, 2878, 860, -1000, -1000,
	14646, -1000, -1000, 1763, -1000, -1000, -1000, 1763, 1642, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2281, -1000, -1000, 1212,
	-1000, 3413, -1000, -1000, 2355, 50141, 2355, 36215, -1000, 3431,
	3430, -1000, 2355, 248, 252, 2875, 2872, -1000, -333, 50141,
	50141, -229, 2139, -1000, 2410, 221, -1000, -1000, 1182, -225,
	-232, 123, 27353, 1794, -1000, 2674, 367, -144, -1000, -1000,
	-1000, -1000, 2673, -1000, 686, -1000, -1000, -1000, 1180, 2668,
	2666, -1000, -1000, -1000, -1000, 50141, -1000, 2360, -1000, 2408,
	-1000, 2405, 672, 2118, -107, -1000, -1000, 426, -1000, -1000,
	-1000, 616, 2296, -1000, -1000, 410, -1000, -1000, -1000, 2050,
	2402, -1000, -1000, 109, -1000, 1787, 1570, -1000, -1000, -1000,
	-1000, -1000, -1000, 836, -1000, 403, 5558, -1000, 1290, 27986,
	-1000, 1105, 836, 536, 33683, 669, 309, -1000, 2137, -1000,
	-1000, 3493, -1000, 667, -1000, 641, -1000, 1564, -1000, 1563,
	35582, 2134, 1886, -1000, 4186, 974, -1000, -1000, 4039, -1000,
	-1000, -1000, -1000, -1000, -1000, 2401, 2391, -1000, -1000, -1000,
	-1000, -1000, 2133, 2868, 42, 3361, 2383, -1000, -1000, 2865,
	1560, 1558, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1557, 1551, 34949, -1000, -1000, 4039, 2131, 27353, 1763,
	-1000, -1000, 1550, 1548, -1000, -1000, -1000, -1000, -1000, -313,
	2858, 12102, 12102, -1000, -1000, -1000, 2856, -1000, -1000, 3428,
	-229, -234, 2375, 186, 204, -1000, 2374, -1000, -111, 3233,
	-151, -1000, -1000, 909, -219, 157, 153, 146, -1000, -1000,
	-1000, 12102, -1000, -1000, -1000, 107, -1000, 1781, -1000, -1000,
	2118, 2373, 50141, 697, -1000, -1000, -1000, -1000, 205, -1000,
	-1000, -1000, -1000, -1000, -1000, 2366, 2363, -1000, 588, 3426,
	-1000, 5784, -1000, 1763, -1000, 588, 1545, -1000, 1763, 1763,
	-1000, 521, -1000, 1790, -1000, 2117, -1000, 3413, -1000, 516,
	-1000, 591, -1000, -1000, -1000, 1512, -1000, -1000, -1000, 4186,
	615, -1000, 828, 2853, -1000, -1000, 2660, 12102, 2852, 1763,
	2659, -100, 34949, 3143, 3138, 3136, 3042, 1452, -1000, -1000,
	27353, -1000, -1000, 34316, -1000, 2847, 1441, 1433, 50141, 2298,
	-1000, -1000, 2362, -1000, 908, 215, 204, -1000, 3425, 214,
	3422, 3421, 1176, 3228, -1000, -1000, 1974, -1000, 172, 164,
	148, -1000, -1000, -1000, -1000, -1000, 2360, 2352, 2338, -1000,
	593, -1000, 333, -1000, -1000, -1000, 327, -1000, 3417, 721,
	-1000, 27353, -1000, -1000, 33683, 2120, 2120, -1000, -1000, 2109,
	-1000, -1000, -1000, -1000, 2091, -1000, -1000, -1000, 1407, -1000,
	50141, 1025, 8916, -1000, 2044, -1000, 50141, -1000, 3163, -1000,
	320, 1403, 327, 837, 327, 837, 327, 837, 327, 837,
	329, -1000, -1000, -1000, 1402, 12102, -1000, -1000, 1333, -1000,
	-1000, -1000, 2842, 2088, 224, 189, 3416, -1000, 2298, 3415,
	2298, 2298, -1000, 177, -126, 909, -1000, -1000, -1000, -1000,
	-1000, -1000, 2325, -1000, -1000, -1000, -1000, 1763, 1763, 2311,
	2310, 484, -1000, -1000, 33050, 613, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 615, 5784, -1000, 8916, 1315, -1000, 2355,
	-1000, 860, -1000, -1000, 3154, 3150, 3466, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2610, 2652, -1000,
	50141, 3359, 26720, 182, -1000, -1000, -1000, 2309, -1000, 2298,
	-1000, -1000, 1748, -149, -1000, -279, 2078, 2061, -1000, -1000,
	50141, -1000, 50141, 605, -1000, 5784, 1287, -1000, 8916, -1000,
	-1000, 3486, -1000, 3471, 1042, 1042, 327, 327, 327, 327,
	12102, -1000, -1000, -1000, 50141, -1000, 1282, -1000, -1000, -1000,
	1582, -1000, -1000, -1000, -1000, 2292, -152, -1000, -1000, 2274,
	-1000, -1000, -1000, 1245, 2437, -1000, -1000, -1000, -1000, -1000,
	2100, 719, -1000, 2450, 1174, -1000, 1739, -1000, 32417, 50141,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 50141,
	8280, -1000, 1581, -1000, -1000, 2355, 50141, -1000,
}

var yyPgo = [...]int{
	0, 178, 3525, 243, 174, 4157, 84, 258, 333, 311,
	256, 4156, 4155, 4153, 4152, 3291, 3289, 4151, 4150, 4149,
	4144, 4143, 4141, 4140, 4139, 4138, 4135, 4134, 4132, 4130,
	4129, 4128, 4127, 4126, 4125, 4124, 4123, 4122, 4121, 4119,
	4117, 4116, 4115, 4113, 4112, 4111, 4110, 252, 4109, 4108,
	4106, 4105, 4104, 4103, 4102, 4101, 4100, 4096, 4094, 4093,
	4090, 4089, 4088, 4085, 4084, 4078, 4077, 4076, 4075, 4074,
	4071, 4069, 4068, 4067, 4065, 4064, 4063, 4061, 4059, 4058,
	4057, 4056, 244, 4055, 4054, 290, 4053, 3287, 4052, 4051,
	4050, 4048, 4047, 4045, 4044, 4042, 4041, 4040, 4038, 246,
	4034, 4033, 4032, 4031, 4030, 4028, 4027, 4026, 4024, 4022,
	4020, 4019, 4018, 221, 4017, 4016, 4015, 4014, 254, 4009,
	211, 4008, 172, 134, 4007, 4005, 4004, 4002, 4000, 3996,
	3992, 3991, 3990, 3989, 3988, 3987, 3985, 3983, 241, 197,
	69, 3982, 48, 3980, 3979, 219, 3978, 155, 3977, 157,
	3976, 3975, 3974, 3973, 3972, 3971, 3970, 3967, 3966, 3964,
	3963, 3962, 3958, 3955, 3953, 3952, 3951, 3950, 3949, 3947,
	3946, 3944, 3942, 3940, 52, 3938, 260, 3937, 77, 3936,
	176, 3935, 74, 3933, 45, 132, 249, 3053, 262, 3932,
	187, 3931, 3915, 248, 177, 3914, 3912, 275, 3910, 208,
	226, 165, 105, 133, 3909, 145, 3906, 261, 47, 49,
	236, 151, 57, 160, 124, 3905, 214, 103, 112, 3904,
	3903, 146, 3902, 232, 182, 3900, 108, 3898, 3897, 3896,
	3894, 3893, 207, 190, 3892, 3891, 135, 3890, 3889, 75,
	136, 3888, 80, 123, 171, 121, 3887, 2745, 129, 91,
	3886, 119, 101, 3884, 92, 3880, 3865, 3864, 3861, 181,
	3859, 3857, 140, 70, 3856, 3853, 3852, 67, 3851, 78,
	3850, 31, 3848, 59, 3838, 3837, 3836, 3835, 3833, 3832,
	3830, 3829, 3828, 3827, 3826, 3825, 58, 3822, 3821, 3820,
	3818, 7, 11, 13, 3817, 27, 3816, 204, 3813, 3811,
	169, 3809, 194, 3808, 3807, 99, 96, 3806, 98, 168,
	3805, 9, 33, 68, 3804, 3802, 3801, 612, 3800, 3799,
	3798, 265, 3797, 3796, 3795, 161, 3794, 3790, 3789, 468,
	3785, 3784, 3783, 3781, 3780, 3779, 64, 3778, 1, 215,
	41, 3777, 137, 149, 3776, 39, 32, 3774, 43, 114,
	200, 141, 109, 3773, 3771, 3770, 571, 198, 107, 29,
	0, 104, 220, 159, 3769, 3768, 3767, 251, 3765, 233,
	245, 235, 278, 272, 217, 3764, 3762, 62, 3761, 166,
	30, 54, 138, 85, 22, 240, 3760, 1448, 10, 184,
	3745, 206, 3743, 8, 16, 144, 156, 3742, 3741, 35,
	268, 3739, 3733, 3732, 130, 3731, 3730, 189, 82, 3728,
	3726, 3724, 3723, 40, 3721, 192, 18, 3720, 131, 3719,
	250, 3718, 180, 154, 185, 179, 158, 222, 230, 83,
	89, 3717, 1888, 164, 113, 17, 3716, 224, 3715, 201,
	126, 3712, 90, 3711, 239, 259, 210, 3710, 188, 14,
	50, 38, 28, 44, 12, 276, 203, 3708, 3707, 23,
	53, 3703, 55, 3702, 20, 3701, 3698, 51, 3697, 61,
	5, 3696, 3695, 19, 21, 3689, 36, 205, 202, 128,
	102, 60, 3688, 3687, 147, 148, 3686, 150, 163, 162,
	3684, 81, 3683, 3680, 3679, 3678, 773, 253, 3677, 3676,
	3673, 3671, 3670, 3669, 3668, 3667, 216, 3666, 116, 42,
	3665, 3664, 3663, 3662, 93, 143, 3656, 3644, 3643, 3642,
	34, 142, 3641, 15, 3637, 26, 24, 37, 3636, 106,
	3635, 3, 186, 3634, 3633, 4, 3632, 3631, 2, 3630,
	3629, 125, 3625, 100, 25, 183, 110, 3623, 3609, 95,
	212, 152, 3608, 3605, 97, 242, 195, 3601, 86, 231,
	257, 3600, 213, 3599, 3598, 3597, 3595, 3594, 1231, 3592,
	3590, 237, 79, 94, 3588, 218, 120, 3587, 3586, 88,
	167, 122, 118, 56, 87, 3577, 115, 209, 3576, 196,
	3574, 266, 3570, 3564, 111, 3563, 3559, 3558, 3554, 191,
	3549, 3547, 193, 229, 3542, 3533, 263, 3532, 3530, 3529,
	3528, 3523, 3521, 3519, 3514, 3510, 3507, 255, 459, 3505,
}

//line mysql_sql.y:12871
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 612, 615, 615, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 351, 351, 352, 352, 130, 347, 347, 346, 346,
	131, 132, 133, 591, 591, 134, 135, 165, 590, 590,
	590, 590, 590, 167, 167, 167, 167, 167, 167, 167,
	467, 129, 129, 129, 129, 129, 171, 171, 171, 171,
	171, 127, 597, 597, 597, 598, 598, 124, 154, 153,
	156, 156, 155, 155, 152, 152, 148, 151, 151, 150,
	150, 149, 144, 146, 146, 145, 147, 147, 125, 113,
	126, 540, 540, 539, 539, 538, 538, 492, 492, 493,
	493, 338, 338, 338, 537, 537, 537, 536, 536, 535,
	535, 534, 534, 532, 532, 533, 531, 530, 530, 530,
	528, 528, 528, 524, 524, 526, 525, 525, 527, 519,
	519, 522, 522, 520, 520, 520, 520, 523, 518, 518,
	518, 517, 517, 112, 112, 112, 434, 434, 111, 111,
	448, 448, 448, 448, 448, 446, 446, 446, 446, 446,
	446, 445, 445, 444, 444, 449, 449, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 447, 447,
	447, 447, 447, 447, 447, 447, 447, 447, 100, 100,
	100, 100, 100, 100, 100, 107, 105, 105, 105, 106,
	603, 603, 602, 602, 604, 604, 604, 604, 605, 605,
	103, 103, 103, 104, 443, 443, 443, 101, 102, 102,
	433, 433, 438, 438, 437, 437, 437, 437, 437, 437,
	437, 437, 437, 437, 437, 437, 437, 442, 442, 442,
	440, 440, 439, 439, 441, 441, 91, 91, 91, 91,
	91, 91, 95, 96, 97, 97, 97, 97, 94, 93,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 92,
	92, 92, 92, 92, 92, 86, 86, 86, 86, 86,
	85, 85, 87, 87, 430, 430, 429, 108, 108, 109,
	600, 600, 599, 601, 601, 601, 601, 110, 116, 116,
	116, 116, 116, 116, 116, 116, 115, 115, 118, 118,
	117, 119, 99, 99, 99, 99, 99, 99, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 565, 565, 565, 565, 566, 566,
	365, 366, 616, 368, 364, 364, 364, 561, 561, 562,
	563, 564, 564, 564, 114, 14, 222, 222, 466, 466,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 84, 89, 89, 90, 301, 301, 302, 296, 296,
	303, 303, 170, 304, 304, 304, 309, 309, 310, 310,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 281, 281, 281, 276, 276, 276, 276, 277,
	277, 278, 278, 279, 279, 279, 279, 280, 280, 357,
	357, 305, 305, 305, 307, 307, 306, 300, 298, 298,
	298, 298, 298, 298, 298, 299, 299, 299, 299, 308,
	308, 82, 88, 88, 88, 88, 578, 578, 83, 83,
	589, 589, 496, 496, 379, 379, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 501, 502, 375, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 79, 80, 81, 54, 57, 58, 169,
	172, 172, 172, 172, 53, 53, 53, 419, 419, 52,
	617, 617, 350, 350, 67, 66, 56, 68, 69, 70,
	71, 72, 73, 51, 65, 65, 65, 65, 65, 65,
	65, 65, 76, 513, 513, 619, 619, 619, 74, 75,
	495, 495, 495, 64, 63, 62, 61, 60, 60, 50,
	50, 49, 49, 55, 160, 59, 161, 161, 372, 372,
	372, 374, 374, 370, 618, 618, 462, 462, 373, 373,
	48, 48, 48, 48, 77, 371, 371, 349, 369, 369,
	369, 12, 12, 10, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 26, 27, 29, 427, 427, 424, 28, 20, 19,
	19, 23, 22, 18, 18, 21, 24, 25, 25, 9,
	9, 9, 9, 15, 15, 16, 194, 194, 248, 248,
	572, 572, 568, 568, 569, 569, 569, 570, 570, 571,
	571, 120, 507, 507, 507, 507, 507, 507, 8, 8,
	217, 217, 506, 506, 506, 506, 506, 506, 431, 431,
	431, 550, 550, 550, 551, 216, 216, 211, 211, 508,
	508, 396, 552, 552, 516, 516, 515, 515, 514, 514,
	214, 214, 215, 215, 197, 197, 139, 139, 521, 521,
	521, 521, 529, 529, 491, 491, 286, 286, 340, 340,
	341, 341, 184, 184, 185, 185, 185, 185, 185, 185,
	606, 606, 607, 608, 609, 609, 610, 610, 610, 611,
	611, 611, 611, 611, 558, 558, 560, 560, 559, 213,
	213, 209, 209, 210, 210, 210, 208, 208, 207, 206,
	206, 205, 203, 203, 203, 204, 204, 204, 221, 221,
	187, 187, 187, 186, 186, 186, 186, 186, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	188, 191, 191, 192, 192, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 318, 318, 319, 319, 319,
	319, 319, 137, 137, 500, 500, 317, 317, 189, 189,
	190, 190, 190, 190, 316, 316, 315, 202, 202, 201,
	200, 200, 200, 195, 195, 195, 195, 195, 196, 327,
	327, 326, 326, 325, 325, 325, 325, 328, 123, 136,
	136, 138, 220, 220, 324, 323, 323, 323, 323, 219,
	219, 218, 218, 212, 212, 199, 199, 199, 199, 322,
	198, 320, 596, 596, 595, 595, 594, 592, 592, 592,
	593, 593, 593, 593, 542, 542, 542, 542, 542, 358,
	358, 358, 363, 363, 361, 361, 361, 361, 361, 367,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 39, 231, 232, 40, 233, 233, 234, 234,
	235, 235, 236, 237, 238, 238, 238, 238, 38, 223,
	223, 224, 224, 225, 225, 226, 227, 227, 227, 230,
	228, 229, 229, 614, 614, 613, 37, 37, 30, 175,
	175, 176, 176, 176, 178, 178, 282, 282, 282, 177,
	177, 179, 179, 179, 573, 575, 575, 577, 576, 576,
	576, 579, 579, 579, 579, 579, 580, 580, 580, 580,
	581, 581, 31, 157, 157, 182, 182, 162, 584, 584,
	584, 583, 583, 585, 585, 586, 586, 344, 344, 345,
	345, 173, 174, 174, 164, 159, 181, 181, 181, 181,
	181, 183, 183, 250, 250, 158, 163, 166, 168, 574,
	582, 582, 582, 428, 428, 425, 426, 426, 423, 422,
	422, 422, 588, 588, 587, 587, 587, 359, 359, 32,
	418, 418, 420, 421, 421, 421, 412, 412, 412, 412,
	36, 416, 416, 417, 417, 417, 417, 417, 417, 417,
	413, 413, 415, 415, 411, 411, 411, 411, 411, 411,
	411, 35, 180, 180, 410, 410, 407, 407, 405, 405,
	406, 406, 404, 404, 404, 408, 408, 43, 78, 44,
	45, 46, 42, 409, 409, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 141, 140, 140, 140, 140,
	140, 143, 143, 343, 343, 342, 342, 142, 283, 283,
	41, 261, 261, 483, 483, 478, 478, 478, 478, 478,
	498, 498, 498, 479, 479, 479, 480, 480, 480, 482,
	482, 482, 481, 481, 481, 481, 481, 497, 497, 499,
	499, 499, 450, 450, 451, 451, 451, 454, 454, 470,
	470, 471, 471, 469, 469, 476, 476, 475, 475, 474,
	474, 473, 473, 472, 472, 472, 472, 465, 465, 464,
	464, 452, 452, 452, 452, 452, 453, 453, 453, 463,
	463, 468, 468, 314, 314, 313, 313, 269, 269, 270,
	270, 312, 312, 267, 267, 268, 268, 268, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 548, 548, 549, 272, 272, 284,
	284, 284, 284, 284, 284, 271, 271, 273, 273, 249,
	249, 247, 247, 239, 239, 239, 239, 239, 239, 240,
	240, 241, 241, 242, 242, 242, 246, 246, 245, 245,
	245, 245, 243, 243, 244, 244, 244, 244, 244, 244,
	436, 436, 545, 545, 546, 546, 541, 541, 541, 544,
	544, 544, 544, 544, 544, 544, 547, 547, 547, 543,
	543, 251, 337, 337, 337, 360, 360, 360, 360, 362,
	336, 336, 336, 266, 266, 265, 265, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 263,
	263, 263, 263, 263, 263, 263, 263, 263, 263, 435,
	435, 376, 376, 377, 377, 295, 294, 294, 294, 294,
	294, 292, 293, 291, 291, 291, 291, 291, 288, 288,
	287, 287, 287, 289, 289, 289, 289, 289, 414, 414,
	285, 285, 275, 275, 275, 274, 274, 274, 477, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 290,
	334, 334, 334, 335, 335, 335, 335, 335, 335, 335,
	335, 386, 386, 392, 392, 557, 557, 556, 252, 252,
	252, 253, 253, 253, 253, 253, 253, 253, 253, 253,
	262, 262, 262, 459, 459, 459, 459, 460, 460, 460,
	460, 461, 461, 461, 457, 457, 458, 458, 397, 398,
	398, 504, 504, 505, 505, 455, 455, 456, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 512, 512, 512, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	567, 567, 567, 553, 553, 553, 554, 554, 554, 554,
	554, 554, 554, 554, 554, 554, 554, 554, 555, 555,
	555, 555, 555, 555, 555, 555, 555, 555, 555, 555,
	555, 555, 555, 555, 555, 332, 332, 332, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 399, 399, 400, 400,
	509, 509, 509, 509, 509, 509, 510, 510, 511, 511,
	511, 511, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 384, 329, 329, 329, 401, 393, 393, 394,
	394, 395, 395, 387, 387, 387, 387, 387, 387, 388,
	388, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 389, 389, 391, 391, 403, 403, 403,
	402, 402, 402, 402, 402, 402, 402, 264, 264, 264,
	264, 381, 381, 381, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 254, 254, 254, 254,
	258, 258, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 259, 259, 259, 259,
	259, 257, 257, 257, 257, 257, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 121, 122, 122, 256, 339,
	339, 484, 484, 487, 487, 485, 485, 486, 488, 488,
	488, 489, 489, 489, 490, 490, 490, 494, 494, 348,
	348, 348, 356, 356, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353, 353, 353, 353, 353, 353, 353, 353,
	353, 353, 353,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	1, 2, 3, 9, 9, 10, 10, 11, 7, 12,
	1, 5, 6, 8, 10, 9, 5, 7, 9, 8,
	6, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 3, 4, 4, 5,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 4, 5, 4, 2, 2,
	0, 1, 4, 2, 4, 1, 5, 3, 2, 1,
	2, 2, 4, 4, 5, 2, 1, 3, 4, 4,
	1, 2, 9, 7, 1, 3, 3, 1, 1, 3,
	1, 3, 2, 1, 2, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 3, 4, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 1,
	1, 7, 7, 7, 8, 8, 0, 4, 7, 6,
	0, 3, 0, 2, 0, 1, 1, 1, 1, 4,
	2, 2, 3, 3, 4, 5, 3, 4, 4, 2,
	2, 2, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 4, 3, 3, 3,
	4, 5, 6, 5, 2, 5, 5, 0, 2, 7,
	0, 1, 0, 1, 5, 5, 3, 3, 2, 4,
	4, 4, 4, 4, 1, 1, 1, 3, 3, 1,
	1, 1, 6, 0, 1, 1, 1, 1, 5, 5,
	0, 1, 1, 3, 3, 3, 4, 7, 7, 5,
	4, 7, 8, 3, 3, 2, 3, 4, 0, 2,
	2, 0, 2, 2, 1, 1, 1, 1, 0, 1,
	5, 5, 6, 4, 3, 1, 3, 1, 1, 3,
	5, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 4, 1, 3, 1, 4, 6, 6,
	4, 4, 4, 4, 4, 3, 6, 3, 5, 1,
	1, 2, 2, 11, 8, 9, 1, 3, 2, 4,
	0, 2, 0, 1, 1, 1, 1, 0, 1, 0,
	1, 4, 2, 1, 5, 4, 4, 2, 5, 5,
	1, 3, 2, 1, 5, 4, 4, 2, 0, 5,
	4, 0, 1, 3, 3, 1, 3, 1, 3, 1,
	3, 4, 0, 1, 0, 1, 1, 3, 1, 1,
	0, 4, 1, 3, 2, 1, 0, 8, 0, 4,
	7, 4, 0, 2, 0, 2, 0, 2, 0, 4,
	1, 3, 1, 1, 6, 4, 5, 7, 4, 5,
	0, 1, 3, 8, 0, 6, 0, 4, 6, 1,
	1, 1, 1, 1, 2, 3, 1, 3, 6, 0,
	3, 0, 1, 2, 4, 4, 0, 1, 3, 1,
	3, 3, 0, 1, 1, 0, 2, 2, 0, 2,
	3, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	7, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 4, 7,
	6, 6, 3, 5, 0, 2, 0, 2, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 3, 1,
	1, 1, 1, 4, 4, 4, 3, 4, 3, 2,
	2, 2, 2, 2, 3, 2, 3, 2, 4, 1,
	3, 4, 0, 2, 1, 1, 2, 2, 2, 0,
	1, 2, 4, 1, 3, 1, 3, 2, 3, 1,
	4, 3, 0, 1, 1, 2, 5, 2, 2, 2,
	0, 2, 3, 3, 0, 1, 3, 1, 3, 0,
	1, 2, 1, 1, 0, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 1, 7, 1, 3, 0, 1,
	1, 3, 1, 3, 0, 1, 1, 1, 14, 1,
	3, 0, 1, 1, 3, 1, 1, 2, 4, 1,
	1, 1, 1, 0, 1, 2, 9, 9, 7, 1,
	2, 3, 3, 3, 0, 4, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 4, 1, 1,
	1, 3, 3, 4, 3, 3, 0, 1, 1, 1,
	0, 2, 7, 8, 10, 2, 2, 8, 0, 3,
	3, 0, 3, 0, 3, 0, 5, 1, 3, 0,
	3, 3, 0, 2, 9, 8, 0, 2, 2, 3,
	3, 0, 2, 0, 2, 4, 4, 4, 4, 1,
	0, 2, 2, 1, 3, 2, 1, 3, 2, 1,
	3, 2, 0, 1, 3, 4, 3, 1, 1, 4,
	1, 3, 1, 1, 1, 1, 0, 1, 1, 1,
	11, 0, 2, 3, 3, 2, 2, 3, 1, 1,
	1, 3, 3, 4, 0, 2, 2, 2, 2, 2,
	2, 6, 0, 4, 1, 1, 0, 3, 0, 1,
	1, 2, 4, 4, 4, 0, 1, 8, 2, 4,
	4, 4, 9, 0, 2, 11, 9, 11, 8, 6,
	9, 7, 10, 7, 6, 2, 2, 9, 4, 5,
	3, 0, 4, 1, 3, 0, 3, 6, 0, 2,
	10, 0, 2, 0, 2, 0, 3, 2, 4, 3,
	0, 2, 1, 0, 2, 3, 0, 2, 3, 0,
	2, 1, 0, 3, 2, 4, 3, 0, 1, 0,
	1, 1, 0, 6, 0, 3, 5, 0, 4, 0,
	3, 1, 3, 4, 5, 0, 3, 1, 3, 2,
	3, 1, 2, 0, 4, 6, 5, 0, 2, 0,
	2, 4, 5, 4, 5, 1, 5, 6, 5, 0,
	3, 0, 1, 1, 3, 3, 3, 0, 4, 1,
	3, 3, 3, 0, 1, 1, 3, 2, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 5, 4, 5, 1, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 4, 0, 5, 5, 5, 5, 6, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 7, 9,
	7, 9, 2, 1, 7, 9, 7, 9, 8, 5,
	0, 1, 0, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 3, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 2, 1, 2, 2,
	1, 1, 2, 2, 2, 3, 3, 2, 2, 1,
	5, 6, 4, 1, 1, 1, 5, 4, 1, 1,
	2, 0, 1, 1, 2, 5, 0, 1, 1, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	2, 2, 2, 0, 4, 7, 3, 3, 0, 3,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 5, 2, 2, 2,
	2, 4, 1, 1, 2, 5, 6, 8, 6, 6,
	6, 1, 1, 1, 1, 1, 1, 3, 9, 1,
	4, 4, 4, 7, 9, 7, 7, 7, 9, 7,
	7, 0, 2, 0, 1, 1, 2, 4, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 2, 2, 2,
	0, 1, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 5, 0, 1, 3, 0,
	1, 0, 2, 0, 2, 0, 1, 6, 8, 8,
	6, 6, 5, 5, 5, 6, 6, 6, 6, 5,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 1, 1, 1, 4, 4, 6, 8, 6, 4,
	5, 4, 4, 4, 3, 4, 6, 6, 7, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 8, 4, 2,
	3, 2, 4, 2, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 4, 4, 4, 0, 1, 2, 3,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 0, 1, 1,
	3, 1, 3, 3, 3, 3, 3, 2, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 1, 3, 4, 4, 5, 4, 5, 3, 4,
	5, 6, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 2, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 4, 1, 2, 3, 5, 1, 1,
	3, 0, 1, 0, 3, 0, 3, 3, 0, 3,
	5, 0, 3, 5, 0, 1, 1, 0, 1, 1,
	2, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -612, -615, -2, -5, 632, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -184, -127, -128,
	-129, -171, -132, -134, -135, 622, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 555, 628, 458, 14, 507, -15, -16, -558, -17,
	267, -364, -365, -366, -368, -616, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -172,
	-131, -79, -80, -81, -83, -82, -88, -84, -89, -159,
	-164, -13, -170, -90, 241, -87, 77, -101, -102, -103,
	-104, -105, -106, -107, -109, -110, 382, 388, 445, 621,
	62, -185, -187, 650, 651, 654, 542, 545, 163, 164,
	166, 167, 171, 174, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 237, 16, 550,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-158, -25, -163, -23, -166, -168, -133, 262, 261, 39,
	328, 329, 330, 386, 260, 238, 240, 15, 32, 43,
	361, -186, 86, 543, 239, -188, 13, 656, -6, -3,
	-2, -144, -148, -152, -155, -156, -153, -154, -4, -122,
	121, 252, 623, -360, 378, 624, 626, 625, 89, 97,
	-353, -355, 458, 267, 382, 388, 621, 651, 654, 542,
	545, 557, 558, 559, 560, 561, 562, 563, 564, 566,
	567, 568, 569, 570, 571, 572, 582, 583, 573, 574,
	575, 576, 577, 578, 579, 580, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
	510, 607, 608, 609, 610, 538, 565, 601, 602, 603,
	604, 359, 360, 547, 279, 303, 413, 309, 316, 163,
	183, 177, 206, 197, 543, 172, 283, 321, 284, 96,
	166, 493, 111, 470, 442, 169, 298, 300, 302, 539,
	540, 372, 305, 537, 304, 306, 308, 541, 285, 362,
	193, 188, 297, 281, 186, 286, 41, 287, 211, 288,
	289, 552, 466, 358, 472, 313, 53, 440, 187, 467,
	301, 469, 215, 219, 484, 485, 181, 182, 474, 487,
	210, 213, 214, 259, 355, 356, 44, 549, 271, 488,
	217, 646, 209, 204, 496, 317, 315, 208, 180, 203,
	282, 66, 221, 220, 222, 436, 437, 438, 439, 290,
	291, 376, 483, 200, 189, 363, 173, 23, 491, 266,
	471, 389, 292, 310, 318, 216, 218, 273, 278, 333,
	551, 444, 277, 314, 489, 185, 270, 299, 265, 492,
	647, 174, 391, 293, 167, 307, 486, 649, 495, 65,
	404, 179, 170, 639, 640, 256, 164, 275, 280, 648,
	294, 295, 296, 536, 320, 319, 311, 171, 544, 201,
	272, 207, 191, 178, 202, 165, 274, 494, 405, 619,
	361, 423, 199, 196, 276, 249, 490, 473, 168, 427,
	406, 194, 322, 614, 615, 616, 377, 354, 323, 324,
	192, 263, 464, 465, 327, 433, 345, 407, 443, 414,
	408, 228, 229, 331, 476, 478, 212, 617, 334, 335,
	336, 468, 337, 338, 339, 340, 381, 57, 59, 98,
	101, 100, 652, 653, 64, 30, 367, 370, 402, 409,
	347, 620, 548, 344, 348, 349, 371, 26, 425, 393,
	429, 428, 49, 50, 51, 54, 55, 56, 58, 60,
	61, 52, 535, 386, 399, 497, 46, 48, 396, 28,
	373, 424, 446, 343, 426, 457, 47, 455, 456, 477,
	27, 375, 374, 63, 45, 432, 434, 435, 325, 341,
	384, 629, 498, 379, 395, 398, 380, 346, 369, 400,
	68, 67, 392, 630, 387, 385, 342, 553, 554, 350,
	581, 364, 441, 532, 531, 530, 529, 528, 527, 526,
	525, 328, 329, 330, 410, 411, 412, 422, 415, 416,
	417, 418, 419, 420, 421, 460, 461, 631, 479, 481,
	482, 480, 244, 655, 365, 366, 247, 633, 634, 99,
	635, 637, 636, 29, 638, 645, 642, 643, 644, 556,
	232, -441, -439, -360, 543, 621, 388, 542, 545, 382,
	361, 651, 654, 386, 267, 328, 329, 330, 458, 359,
	-233, -360, 655, -197, 251, 40, -247, -360, -197, -87,
	-16, -15, -186, -187, -247, 246, -369, 24, 440, -99,
	441, 241, 242, 86, 78, -360, -9, -113, -8, -120,
	-85, -184, 445, -367, -360, 328, 328, -367, 246, -362,
	277, 421, -360, -496, 252, -445, -418, 278, -444, -420,
	-447, -421, 33, 237, 239, 238, 555, 274, 16, 386,
	248, 14, 13, 387, 260, 26, 27, 29, 15, 388,
	390, 30, 391, 394, 395, 396, 43, 399, 400, 267,
	89, 97, 92, 285, -232, -360, -395, -387, 118, -390,
	-382, -383, -385, -338, -532, -380, 86, 145, 146, 153,
	119, 657, -384, -477, 37, 121, 561, 565, 601, 508,
	-330, -331, -332, -333, -334, -335, 546, -360, -533, -531,
	92, 102, 104, 108, 109, 107, 105, 157, 190, 106,
	93, 158, -187, 89, -553, 571, -354, 594, 607, 608,
	609, 610, 593, 62, -503, -511, 245, -509, 156, 195,
	263, 191, 14, 151, 433, 192, 602, 603, 604, 568,
	590, 510, 572, 582, 597, 563, 564, 566, 558, 559,
	560, 562, 573, 575, 589, -512, 585, 595, 596, 581,
	605, 606, 642, 598, 599, 600, 637, 91, 90, 588,
	587, 574, 569, 570, 576, 557, 567, 577, 578, 586,
	591, 592, 370, 111, 371, 372, 500, 362, 81, 373,
	252, 440, 71, 374, 375, 376, 377, 378, 507, 379,
	72, 380, 369, 267, 423, 381, 194, 212, 512, 511,
	513, 504, 501, 499, 502, 503, 505, 506, 579, 580,
	584, -136, -138, 612, -606, -321, -607, 6, 7, 8,
	9, -608, 158, -597, 442, 551, 92, 321, 359, 17,
	500, 641, 541, 641, 541, 168, 165, -432, 168, 117,
	174, 173, 250, 168, -432, -360, 171, 641, 170, 639,
	331, 273, -409, -175, 359, 423, 337, 98, 277, -412,
	-410, 539, -497, 325, 321, 297, 247, 114, -176, 257,
	256, 112, 500, 245, 397, 316, 57, 59, -568, -569,
	234, 235, 236, -560, 533, -559, -360, 641, 646, 372,
	100, 101, 639, 640, 28, 246, 383, 273, 478, 476,
	477, 479, 480, 481, 482, -65, -513, -495, 473, 472,
	-373, 465, 471, 463, 475, 466, 360, 339, 555, 338,
	237, 633, 540, 534, -348, 407, 443, 497, 498, 384,
	444, 484, 486, 467, 111, 198, 195, 247, 249, 246,
	639, 359, 500, 423, 98, 337, 246, -568, 646, 165,
	484, 486, 442, 277, 421, 42, -438, 433, -437, -439,
	485, 496, 90, 91, 483, -348, 111, 464, 464, -606,
	-321, -185, -187, -123, -558, 541, 641, 247, 359, 423,
	277, 248, 246, 536, 539, 249, 500, 245, 328, 383,
	273, 337, 98, 170, 639, -191, -192, -193, 230, 231,
	232, 70, 235, 233, 67, 33, 34, 35, -1, 125,
	656, -387, -387, -6, 659, -6, -387, -360, -360, 160,
	-254, -258, -255, -257, -256, -260, -259, 195, 196, 156,
	199, 205, 201, 202, 203, 204, 206, 207, 208, 209,
	210, 213, 214, 211, 32, 212, 263, 191, 192, 193,
	194, 215, 177, 197, 548, 223, 178, 224, 179, 225,
	180, 226, 181, 182, 227, 183, 186, 187, 188, 189,
	185, 159, -222, 92, 33, 86, 159, 92, -214, 269,
	-197, -247, -239, 159, 657, -214, -606, -207, -208, 11,
	-247, -336, -360, 442, 128, -99, 78, -99, 441, 78,
	-99, 441, 241, -561, -562, -563, -565, 241, 441, 440,
	242, -118, 159, 285, 17, -367, -367, 84, -247, -420,
	277, -445, -418, 37, 83, 160, 250, 160, 83, 86,
	384, 359, 423, 385, 500, 246, 397, 249, 277, 398,
	359, 423, 246, 249, 500, 277, 359, 246, 249, 423,
	277, 398, 359, 463, 464, 249, 28, 389, 392, 393,
	464, -517, 496, 160, 117, 114, 115, 116, -387, 135,
	-402, 128, 129, 130, 131, 132, 133, 134, 142, 141,
	152, 145, 146, 147, 148, 149, 150, 151, 143, 144,
	138, 118, 136, 140, 137, 120, 155, -187, -387, -395,
	62, -385, -385, -385, -385, -360, -477, -392, -387, 86,
	86, 86, 86, 86, 159, 105, 92, -387, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	-510, 86, 86, -399, -400, 86, 86, -380, -336, 86,
	92, 92, 86, 86, 86, 92, 86, 86, 86, -400,
	-400, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, -208, 160, -207,
	86, -207, -208, -188, -187, 33, 34, 33, 34, 33,
	34, 33, 34, -609, 630, 86, 102, 652, 228, 17,
	-360, 639, -360, -591, 33, 544, 544, 544, 544, 489,
	550, 172, 173, 174, -360, 171, 250, -360, -407, 252,
	-407, -407, -231, -360, -233, 383, 249, 536, 249, -176,
	-407, -407, -407, -407, -407, 248, -407, 24, 246, 246,
	246, 246, -407, 507, 128, 128, 60, -570, 176, 160,
	-560, -213, 86, -591, 647, 648, 649, -372, 136, 140,
	-372, -317, 18, -317, 24, 24, 275, 275, 275, -372,
	315, -617, -618, 17, 138, -370, -618, -370, -370, -372,
	-619, 248, 474, 44, 276, 275, -209, -210, 22, -209,
	468, 464, -462, 469, 470, -374, -618, -373, -372, -372,
	-373, -372, -372, -372, 33, 246, 249, 500, 337, 634,
	-617, -617, 32, 32, -496, -496, -247, -496, -496, 534,
	-349, -360, -496, -496, -496, -301, -302, -247, -571, 251,
	649, -603, -602, 487, -605, 489, 165, -439, 165, -439,
	89, -420, 277, 277, 160, 128, 24, -440, 128, 139,
	-439, -439, -440, -440, -271, 42, -359, 156, -360, 92,
	-271, 42, -600, -599, -247, -208, -188, -187, 87, 87,
	87, 544, -591, -496, -496, -496, -496, -496, -497, -496,
	-496, -496, -496, -496, -367, -223, -360, -233, 252, -496,
	-496, -496, -496, -189, -190, 147, -387, -360, -193, -3,
	-146, -145, 122, 123, 125, 624, 378, 623, 627, 621,
	-439, 42, -490, 405, 404, -484, -486, 86, -485, 86,
	-485, -485, -485, -485, -485, 86, 86, -487, 86, -487,
	-487, -484, -488, 86, -488, -489, 86, -489, -488, -360,
	-466, 550, -393, -395, -360, 40, -506, 62, -184, 86,
	32, 86, -214, -360, 192, 170, 638, 36, -507, 62,
	-184, 86, 32, -208, -139, 40, -210, 21, 159, 102,
	92, -118, -99, 78, -118, -99, -99, 87, 160, -564,
	108, 109, -566, 210, 201, -360, -116, 92, -7, -8,
	-9, -10, -47, -85, -82, -184, 238, 542, 545, -534,
	-532, 86, 33, 432, 83, 17, -446, 246, 500, 383,
	273, 249, 359, -444, -427, -424, -422, -359, -420, -423,
	-422, -449, -336, 464, -140, 447, 446, 327, -387, -387,
	-387, -387, -387, 107, 118, 354, 108, 109, -382, -403,
	33, 323, 324, -383, -383, -383, -383, -383, -383, -383,
	-383, -383, -383, -383, -383, -391, -401, -477, 86, 138,
	136, 140, 137, 120, -385, -385, -383, -383, -273, -359,
	156, 87, 160, -387, -557, -556, 122, -387, -387, -387,
	-387, -413, -415, -336, 86, -360, -554, -555, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 524, 374,
	369, 375, 373, 362, 381, 376, 377, 194, 531, 532,
	525, 526, 527, 528, 529, 530, -393, -393, -387, -554,
	-393, -329, 34, 33, -395, -395, -395, 87, -387, -567,
	352, 351, 353, -211, -360, -393, 87, 87, 87, 102,
	-395, -395, -393, -383, -393, -393, -393, -393, -555, -329,
	-329, -329, -329, 147, -395, -395, -329, -329, -329, -329,
	147, -329, -329, -329, -329, -329, -329, -329, -329, -329,
	-329, -329, 87, 87, 87, 147, -395, -209, -138, -515,
	-514, -387, 42, -139, -210, -610, 631, 86, -336, -598,
	92, 92, 657, 170, 639, 17, 500, -360, 17, 246,
	-360, 102, -360, 102, 490, 491, 169, 173, 172, -360,
	171, -360, -360, 118, -360, -360, 36, 86, -223, -407,
	-407, -407, -575, -360, 93, -428, -425, -422, -360, -360,
	-418, -360, -349, -247, -407, -407, -407, -407, -247, -282,
	54, 55, 56, -422, -177, 57, 58, -571, -559, 36,
	-212, -360, -317, -385, -385, -387, 359, 500, 246, -422,
	277, -617, -372, -372, -350, -349, -374, -369, -374, -374,
	-317, -370, -372, -372, -387, -374, -370, -317, -360, 464,
	-317, -317, -462, -372, -371, -360, -371, -407, -349, -350,
	-350, -247, -247, -296, -303, -297, -304, 269, 243, 367,
	368, 240, 238, 11, 239, -311, 316, -408, 508, -277,
	-278, 78, 43, -280, 267, 409, 402, 279, 283, 96,
	284, 442, 285, 248, 287, 288, 289, 304, 306, 259,
	290, 291, 292, 433, 293, 164, 305, 294, 295, 296,
	385, -272, 6, 340, 550, 42, 52, 53, 456, 455,
	553, 280, -360, -575, -573, 32, -360, 32, -428, -422,
	-360, -360, 160, 250, -200, -202, -199, -195, -196, -201,
	-320, -322, -198, 86, -247, -187, -360, -439, 160, 488,
	490, 491, -603, -440, -603, -440, 250, 33, 432, -443,
	432, 33, -418, -437, 484, 486, -433, 92, 433, -423,
	-442, 83, 156, -514, -440, -440, -442, -442, 155, 160,
	-601, 489, 490, 234, -209, 102, -249, -247, -575, -427,
	-418, -360, -496, -249, -249, -249, -362, -362, 86, 159,
	37, -360, -360, -360, -360, -316, 160, -315, 17, -361,
	-360, 36, 92, 159, -147, -145, 124, -387, -6, 623,
	-387, -6, -6, -387, -6, -387, -494, 406, 102, 102,
	-339, 92, -339, 102, 102, 102, 556, 87, 92, -431,
	83, -508, -396, -552, 612, -216, 87, -211, -550, -551,
	-211, -215, -360, -506, -239, 128, 128, 128, 25, -508,
	-216, 87, -550, -209, 613, -139, -206, -205, -387, -360,
	24, -118, -99, -562, 159, 359, 160, -212, -446, -426,
	-423, -448, 147, -360, -434, 160, 550, 660, 90, 250,
	-588, -587, 424, 87, 160, -518, 251, 507, 92, 657,
	440, 228, 229, 107, 354, 108, 109, -477, -395, -391,
	-385, -385, -383, -383, -389, 264, -389, 117, -387, 658,
	-386, -556, 124, -387, 36, 160, 36, 160, 84, 160,
	87, -484, -387, 159, 87, 87, 17, 17, 87, -387,
	87, 87, 87, 87, 17, 17, -387, 87, 159, 87,
	87, 87, 87, 84, 87, 160, 87, 87, 87, 87,
	160, -395, -395, -387, -395, 87, 87, 87, -387, -387,
	-387, -395, 87, -387, -387, -387, -387, -387, -387, -387,
	-387, -387, -387, -212, -456, 459, -456, -456, 160, 160,
	160, 87, -139, 86, 102, 160, 653, -343, -342, 92,
	-360, -360, 170, 639, -360, 92, 639, -360, 92, 170,
	174, 174, 173, -360, 92, 37, 24, 24, 314, -232,
	-234, -235, -236, -237, -238, 138, 161, 162, 86, -247,
	-247, -247, -577, 410, -589, 160, 42, -587, 500, -173,
	327, -411, 84, -180, 17, 550, -247, -247, -247, -247,
	-261, 36, 17, -194, -248, -360, 86, 87, 160, -360,
	-360, -360, -419, 84, -360, -350, -317, -317, -374, -317,
	-317, 160, 23, -372, -374, -374, -239, -370, -239, 159,
	-239, -349, -483, 36, -213, 160, 21, 269, -246, -357,
	-243, -245, 254, -377, -244, 257, -546, 255, 253, 112,
	258, 312, 113, 248, -357, -357, 254, -281, 250, 36,
	-357, -299, 248, 357, 312, 255, 21, 269, -298, 248,
	113, -360, 254, 258, 255, 253, -356, 128, -348, 155,
	250, 44, 385, -356, 554, 269, -356, -356, -356, -356,
	-356, -356, -356, 286, 286, -356, -356, -356, -356, -356,
	-356, -356, -356, -356, -356, -356, 165, -356, -356, -356,
	-356, -356, -356, 86, 332, 281, 282, 314, -578, 410,
	32, 365, 365, 366, -589, 361, 32, -181, 359, -302,
	-300, -371, 32, -323, -324, -325, -326, -328, -327, 69,
	73, 75, 79, 70, 71, 72, 76, 81, 74, 32,
	160, -358, -363, 36, -360, 92, -358, -187, -202, -200,
	-358, 86, -440, -602, -604, 492, 489, 495, -442, -442,
	102, 250, 86, 128, -442, -442, 42, -359, -599, 496,
	490, -139, 160, 83, -249, -224, -225, -226, -227, -254,
	-336, 196, 199, 201, 202, 203, 204, 206, 207, 208,
	209, 210, 213, 214, 211, 212, 263, 191, 192, 193,
	194, 215, 177, 197, 548, 178, 179, 180, 181, 182,
	183, 186, 187, 188, 189, 185, -360, -233, -317, -190,
	-202, -360, 92, -360, 147, 125, -6, 123, -151, -150,
	-149, 126, 621, 627, 125, 125, 125, 87, 87, 87,
	160, 87, 87, 87, 160, 87, 160, 102, -521, 469,
	41, 160, 86, 87, 160, 62, 160, 128, 87, 160,
	-387, -360, 92, -387, 192, 87, 62, -139, 92, 160,
	-203, 38, 39, 159, 442, -360, -532, 87, -448, 160,
	250, 159, 159, -424, 388, -359, -426, 21, 550, -336,
	40, -343, 128, 657, -360, 87, -389, -389, 117, -385,
	-382, 87, 125, -387, 123, -252, -254, 404, 405, -387,
	-252, -253, -259, 156, 195, 263, 194, 193, 191, 404,
	405, -271, -415, 547, -203, 87, -360, -387, -387, 87,
	-387, -387, 17, -360, -271, -383, -387, -208, -208, 87,
	87, -455, -456, -455, -455, 87, 87, 87, 87, -455,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 86, 102, 104, 102, 104, -514, -611, 64, 629,
	63, 432, 107, 317, 160, 102, 92, 658, 160, 128,
	92, -360, -360, 17, 246, -360, 17, 174, 92, -590,
	321, 359, 500, 246, 359, 321, 500, 246, -467, 102,
	396, 87, 160, -336, -224, -213, 86, -213, -580, 471,
	412, 422, -356, -379, -378, 361, 43, -501, 433, 418,
	419, -425, 277, -349, -586, 99, 128, 83, 344, 348,
	349, 345, 346, 347, -405, -406, -404, -408, -573, 86,
	86, -184, 36, 136, -180, 86, 86, 36, -478, 334,
	-254, -247, -194, -360, 17, 160, -572, 159, -1, -360,
	-360, -418, -372, -317, -387, -387, -317, -372, -372, -374,
	-360, -239, -478, -254, 36, -297, 243, 239, -452, 314,
	315, -453, -468, 317, -470, 86, -251, -336, -244, -545,
	-546, -407, -360, 113, -545, 113, 86, -251, -336, -336,
	-300, -336, -360, -360, -360, -360, -307, -306, -336, -309,
	33, -310, -360, -360, -360, -360, 113, -360, 113, -276,
	42, 49, 50, 51, -356, -356, 198, -279, 42, 432,
	434, 435, -309, 102, 102, 102, 102, 92, 92, 92,
	-356, -356, 102, 92, -363, 92, -547, 173, 46, 47,
	102, 102, 102, 102, 42, 92, -284, 42, 297, 301,
	298, 299, 300, 92, 102, 42, 102, 42, 102, 42,
	-360, 86, -548, -549, 92, 333, -467, -580, -356, 365,
	-439, 128, 128, -379, -582, 96, 413, -585, 327, -183,
	500, 33, -217, 243, 239, -573, -430, -429, -336, -199,
	-199, -199, -199, -199, -199, 69, 80, 69, 69, 69,
	74, 69, 74, 69, -325, 69, 80, -430, -201, -213,
	-363, 87, -596, -595, -594, -592, 77, 251, 78, -393,
	-442, 489, 493, 494, -426, -375, 92, -433, -221, 24,
	-247, -247, -499, 307, 308, 87, 160, -254, -319, 19,
	159, 121, -6, -147, -149, -387, -6, -387, 623, 378,
	624, 92, 102, 102, -529, 453, 448, 450, 113, -396,
	-516, -515, 62, -184, -211, -508, -551, -514, -360, 658,
	658, 658, 658, 92, 62, -184, -508, -221, -521, -205,
	-204, 45, -360, 102, 17, -423, -418, 147, 147, -360,
	389, -434, 92, 411, 92, 246, 658, 92, -343, -382,
	-387, 87, -262, 182, 181, -262, 36, 87, 87, -485,
	-485, -484, -487, -484, -262, -262, 87, 86, -203, 87,
	24, 87, 87, 87, -387, 87, 87, 160, -504, 509,
	-505, 583, -455, -455, -455, -455, -455, -455, -455, -455,
	-455, -455, -455, -455, -455, -455, -455, -455, -455, -398,
	-397, 269, 454, 636, 636, 454, 636, 636, 87, 160,
	-554, 160, -351, 322, -351, -342, 92, 250, 92, 170,
	-360, 92, 639, 92, -360, -360, -360, 314, -360, 314,
	-360, -360, 92, 92, 92, -236, -254, 87, 36, -240,
	-241, -242, -251, -243, -245, 36, -581, 96, -576, 92,
	-360, 93, -582, 158, 363, 42, 414, 415, 430, 358,
	102, 102, 420, -574, -360, -182, 246, 359, -584, 53,
	128, 92, -247, -404, -348, 155, 288, 337, -314, -313,
	-360, 92, -240, -184, -247, -240, -240, -184, -479, 336,
	21, 102, 146, -214, 84, 159, -202, -248, -360, 147,
	87, -317, -239, -317, -317, -372, -479, -184, -464, 318,
	86, -462, 86, -462, 113, 345, -471, -469, 269, -305,
	46, 48, -254, -543, -360, -541, -543, -360, -541, -541,
	-407, -387, -305, -251, 250, 32, 239, -308, 342, 343,
	348, -435, 313, 118, -435, 160, -203, 160, -360, -271,
	-271, 32, 92, 92, -249, 87, 160, 128, 102, 92,
	-581, -576, 128, -440, 92, 92, -582, 92, 92, -586,
	128, -250, 246, -349, 160, -217, -217, -317, 160, 128,
	-219, -218, 83, 84, -220, 83, -218, -218, 69, 69,
	-317, -594, -593, 24, -546, -546, -546, 87, 87, 15,
	-226, 42, -318, 20, 21, 147, 125, 123, 125, 125,
	-360, 87, 87, -491, 614, -525, -527, 448, 21, 21,
	15, 251, 87, -508, 658, -508, -529, 46, 47, -418,
	-434, 433, -247, 160, 658, -252, -290, 92, -387, 87,
	-387, 87, 92, 87, 92, -208, 21, 87, 160, 87,
	87, 87, 160, 87, 87, -387, 87, -554, -352, 192,
	92, -352, 359, -361, -360, 17, -360, 92, -360, -467,
	314, -467, 314, 246, -360, 244, -184, 87, 160, -184,
	92, -579, 424, 102, 42, 102, 158, 416, -502, -174,
	96, -249, 33, -217, -583, 96, 128, 657, 86, -356,
	-356, -356, -360, 87, 160, -356, -356, 87, 87, 87,
	-269, 550, -480, 268, 102, 146, 102, 146, 102, -358,
	-202, -360, -317, -572, 159, -317, -480, -454, 319, 102,
	-383, 86, -383, 86, -463, 316, 86, 87, 160, -360,
	-336, -266, -265, -263, 107, 118, 42, 402, -264, 96,
	155, 302, 305, 304, 280, 303, -295, -376, 83, 408,
	342, 343, -408, 614, 538, 253, 112, 113, 390, -377,
	86, 86, 84, 322, 86, 86, -543, 87, -305, -336,
	42, -308, 42, 355, 313, -306, -360, 155, -271, 87,
	-549, 92, -554, -579, 92, -442, -584, 92, -174, -249,
	-573, -208, -429, -514, -387, 86, -387, 86, 69, 11,
	19, -380, -387, -395, 642, 644, 645, 252, -6, 624,
	378, -286, 615, 92, 21, 92, -523, 92, -430, -491,
	-142, -283, -348, 285, 87, -289, 138, 550, 87, 87,
	-455, -455, -458, -457, -461, 454, 314, 462, -395, 92,
	92, 87, 87, 92, -360, 170, 92, 657, 92, -467,
	92, -467, -360, 314, -228, -254, -178, 550, -269, -242,
	-178, 21, 550, 362, 42, 102, 42, 417, 92, -182,
	128, 108, 109, -344, -345, 92, -413, -271, -273, 92,
	-313, -380, -380, -267, -184, 36, -268, -311, -408, 550,
	-141, -140, -267, 550, 86, -481, 164, 102, 146, 102,
	102, -317, -317, -481, -470, 21, 87, -449, 87, -449,
	86, 128, -383, -469, -472, 62, -263, 107, -383, 92,
	-273, -274, 42, 301, 297, 128, 128, -275, 42, 281,
	282, -285, 86, 312, 15, 198, 86, 113, 113, -247,
	-413, -413, -544, 344, 345, 346, 350, 348, 349, 347,
	-544, -413, -413, 86, -436, -435, -383, -356, -356, 155,
	-583, -209, -212, -542, -360, 253, 21, 21, -500, 550,
	643, 86, 86, -360, -360, -340, 616, 102, 92, 450,
	-286, -492, 617, -519, -462, -271, 128, 87, 76, 548,
	551, 87, -460, 120, 416, 420, -381, -384, 102, 104,
	190, 158, 87, 87, -360, -347, -346, 92, 92, 92,
	314, -467, 549, -179, 61, 496, 92, 93, 411, 92,
	93, 362, -174, 92, 658, 160, 128, 87, -450, 269,
	-184, 160, -311, -348, -142, -450, -270, -312, -360, 92,
	-498, 173, 335, 550, 102, 146, 102, -208, -482, 173,
	335, -453, 87, 87, 87, -449, 102, 87, -476, -473,
	86, -311, 271, 138, 92, 92, 102, 86, -509, 32,
	92, -414, 86, 87, 87, 87, 87, -413, 102, -271,
	-356, 87, 87, 160, 645, 86, -395, -395, 86, 21,
	-340, -493, 618, 92, -528, 453, -522, -520, 448, 449,
	450, 451, 92, 549, 66, 552, -459, -460, 420, -381,
	-384, 612, 460, 460, 460, 658, 160, 128, -467, 92,
	-230, -360, 312, 433, -345, 92, -416, -451, 321, 21,
	-311, -356, -451, 87, 160, -356, -356, 335, 102, 146,
	102, -209, 335, -465, 320, 87, -476, -311, -475, -474,
	319, 272, 86, 87, -387, -399, -356, 87, -288, -287,
	546, -413, -416, 84, -416, 84, -416, 84, -416, 84,
	87, -271, -360, 253, -137, 86, 87, 87, -341, -360,
	-523, 92, -530, 251, -526, -527, 452, -520, 21, 450,
	21, 21, -143, 160, 66, 117, 461, 461, 461, -346,
	92, 92, -229, 36, 455, 389, -417, 259, 355, 356,
	96, 550, 342, 343, 21, -452, -271, -312, -380, -380,
	102, 102, 87, 160, -360, 268, 86, -394, -388, -387,
	268, 87, -360, -294, -292, -293, 83, 467, 310, 311,
	87, -544, -544, -544, -544, -295, 87, 160, -393, 87,
	160, -537, 86, 102, -525, -524, -526, 21, -523, 21,
	-523, -523, 457, 550, -459, 92, -356, -356, 92, 92,
	341, -336, 86, -464, -474, -473, -394, 87, 160, -435,
	-293, 83, -292, 83, 16, 15, -416, -416, -416, -416,
	86, 87, -360, -540, 32, 87, -536, -535, -337, -531,
	-360, 453, 454, 92, -523, 128, 551, -614, -613, 635,
	102, 102, -360, -449, -454, 87, -388, -291, 307, 308,
	32, 173, -291, -393, -539, -538, -338, 87, 160, 159,
	92, 552, 92, 87, -470, 107, 42, 309, 87, 160,
	128, -535, -360, -538, 42, -387, 159, -360,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 316, 317, 318, 319,
	320, 321, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 0, 0, 0, 0, 0, 719, 720, 0, 683,
	0, 0, 0, 0, 0, 0, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, 592, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 350, 346, 258, 259, 260,
	261, 262, 263, 264, 357, 358, 532, 0, 0, 0,
	0, 802, -2, 102, 0, 0, 0, 0, 339, 0,
	330, 330, 0, 0, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, -2, 732, 0,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 414, 415, 416,
	410, 411, 413, 412, -2, 0, 0, 732, 0, 0,
	0, 810, 0, 0, 0, 853, 871, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1405, 1406,
	1407, 1408, 2206, 2176, -2, 1940, 1917, 2100, 2101, 1996,
	2008, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251,
	2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261,
	2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271,
	2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281,
	2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291,
	2292, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882,
	1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892,
	1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902,
	1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1941, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
	2006, 2007, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027,
	2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047,
	2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067,
	2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077,
	2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087,
	2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097,
	2098, 2099, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109,
	2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
	2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129,
	2130, 2131, 2132, -2, 2134, 2135, 2136, 2137, 2138, 2139,
	2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149,
	2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159,
	2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169,
	2170, 2171, 2172, 2173, 2174, 2175, 2177, 2178, 2179, 2180,
	2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190,
	2191, -2, -2, -2, 2195, 2196, 2197, 2198, 2199, 2200,
	2201, 2202, 2203, 2204, 2205, 2207, 2208, 2209, 2210, 2211,
	2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
	2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231,
	2232, 0, 314, 312, 1887, 1917, 1940, 1996, 2008, 2009,
	2048, 2100, 2101, 2133, 2176, 2192, 2193, 2194, 2206, 0,
	0, 1006, 0, 780, 0, 0, 785, 1353, 780, 351,
	721, 722, 810, 836, 681, 0, 388, 0, 1931, 392,
	2183, 0, 0, 0, 0, 678, 382, 383, 384, 385,
	386, 387, 0, 0, 979, 0, 0, 378, 0, 345,
	1998, 2205, 1409, 0, 0, 0, 0, 0, 201, 1130,
	203, 1132, 207, 215, 0, 0, 0, 220, 221, 224,
	225, 226, 227, 228, 0, 232, 0, 234, 237, 0,
	239, 240, 0, 243, 244, 245, 0, 255, 256, 257,
	1133, 1134, 1135, -2, 130, 1004, 1845, 1731, 0, 1738,
	1751, 1762, 1491, 1492, 1493, 1494, 0, 0, 0, 0,
	0, 0, 1502, 1503, 0, 1533, 2247, 2288, 2289, 0,
	1511, 1512, 1513, 1514, 1515, 1516, 0, 141, 153, 154,
	1784, 1785, 1786, 1787, 1788, 1789, 1790, 0, 1792, 1793,
	1794, 1702, 1478, 1405, 0, 2256, 0, 2278, 2283, 2284,
	2285, 2286, 2277, 0, 0, 1686, 0, 1676, 0, 0,
	-2, -2, 0, 0, 2073, -2, 2290, 2291, 2292, 2253,
	2274, 2282, 2257, 2258, 2281, 2249, 2250, 2251, 2244, 2245,
	2246, 2248, 2260, 2262, 2273, 0, 2269, 2279, 2280, 2181,
	0, 0, 2228, 0, 0, 0, 2223, 155, 156, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1697, -2, 1699, -2,
	1701, -2, 1704, -2, -2, -2, -2, 1709, 1710, -2,
	1712, -2, -2, -2, -2, -2, -2, -2, 1688, 1689,
	1690, 1691, 1680, 1681, 1682, 1683, 1684, 1685, -2, -2,
	-2, 836, 929, 0, 836, 0, 811, 858, 861, 864,
	867, 814, 0, 0, 103, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 340, 341, 329, 331, 0,
	335, 0, 0, 331, 328, 322, 0, 1166, 1166, 1166,
	0, 0, 0, 0, 1166, 1166, 1166, 1166, 1166, 0,
	1166, 0, 0, 0, 0, 0, 1166, 0, 1039, 1137,
	1138, 1139, 1164, 1165, 1238, 0, 0, 0, 737, 733,
	734, 735, 736, 824, 0, 826, 829, 0, 0, 658,
	658, 896, 896, 0, 604, 0, 0, 0, 658, 0,
	618, 610, 0, 0, 0, 658, 0, 0, 831, 831,
	0, 661, 668, 658, 658, -2, 658, 658, 655, 658,
	0, 0, 1178, 624, 625, 626, 610, 610, 629, 630,
	631, 641, 642, 669, 1869, 0, 0, 532, 532, 0,
	532, 532, 0, 532, 532, 532, 0, 739, 1956, 2043,
	1938, 2014, 1897, 1998, 2205, 0, 287, 2073, 292, 0,
	1939, 1959, 0, 0, 1977, 0, -2, 0, 367, 836,
	0, 0, 810, 0, 0, 0, 0, 532, 532, 532,
	532, 532, 1237, 532, 532, 532, 532, 532, 0, 0,
	0, 532, 532, 532, 532, 0, 872, 873, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 5, 6,
	19, 0, 0, 0, 0, 0, 0, 109, 108, 0,
	1846, 1864, 1797, 1798, 1799, 1851, 1801, 1855, 1855, 1855,
	1855, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1855, 1855, 0, 0, 1844, 1821, 1853, 1853, 1853,
	1851, 1848, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1811, 1812, 1813, 1814, 1815, 1858, 1858, 1861, 1861,
	1858, 0, 428, 426, 427, 1727, 0, 0, 0, 0,
	780, 784, 1351, 0, 0, 0, 836, -2, 0, 0,
	682, 389, 1410, 0, 0, 393, 0, 394, 0, 0,
	396, 0, 0, 0, 417, 0, 420, 404, 405, 406,
	407, 400, 0, 181, 0, 380, 381, 0, 0, 347,
	0, 0, 0, 533, 0, 0, 0, 0, 0, 0,
	212, 208, 216, 219, 229, 236, 0, 248, 250, 253,
	209, 217, 222, 223, 230, 251, 210, 213, 214, 218,
	252, 254, 211, 231, 235, 249, 233, 238, 241, 242,
	247, 0, 182, 0, 0, 0, 0, 0, 1737, 0,
	0, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 1731, 0,
	0, 1497, 1498, 1499, 1500, 0, 1504, 0, 1534, 0,
	0, 0, 0, 0, 0, 1791, 1795, 0, 1727, 1727,
	0, 1727, 1723, 0, 0, 0, 0, 0, 0, 1727,
	1659, 0, 0, 1661, 1677, 0, 0, 1663, 1664, 0,
	1667, 1668, 1727, 0, 1727, 1672, 1727, 1727, 1727, 1655,
	1656, 0, 1723, 1723, 1723, 1723, 0, 0, 1723, 1723,
	1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
	1723, 1723, 1723, 0, 0, 0, 0, 831, 0, 837,
	0, -2, 0, 855, 857, 859, 860, 862, 863, 865,
	866, 868, 869, 816, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 71, 73, 0, 0, 0, 0, 0,
	0, 333, 0, 338, 324, 2035, 0, 323, 0, 0,
	0, 0, 0, 1003, 0, 0, 1166, 1166, 1166, 1040,
	0, 0, 0, 0, 0, 0, 0, 0, 1166, 1166,
	1166, 1166, 0, 1184, 0, 0, 0, 739, 738, 0,
	825, 0, 0, 70, 593, 594, 595, 896, 0, 0,
	597, 598, 0, 599, 0, 0, 610, 658, 658, 616,
	617, 612, 611, 664, 665, 661, 0, 661, 661, 896,
	0, 635, 636, 637, 658, 658, 643, 832, 0, 644,
	645, 661, 0, 666, 667, 896, 0, 0, 896, 896,
	0, 653, 654, 656, 658, 0, 0, 1166, 0, 674,
	612, 612, 1870, 1871, 0, 0, 1175, 0, 0, 0,
	0, 677, 0, 0, 0, 444, 445, 0, 0, 740,
	0, 266, 270, 0, 273, 0, 2043, 0, 2043, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 310, 311,
	0, 0, 0, 0, 301, 304, 1345, 1346, 1127, 1128,
	305, 306, 359, 360, 0, 831, 854, 856, 850, 851,
	852, 0, 72, 0, 0, 0, 0, 0, 532, 0,
	0, 0, 0, 0, 715, 0, 1019, 717, 0, 0,
	0, 0, 0, 904, 898, 900, 974, 141, 874, 8,
	126, 123, 0, 19, 0, 0, 19, 19, 0, 19,
	315, 0, 1867, 1865, 1866, 1800, 1852, 0, 1826, 0,
	1827, 1828, 1829, 1840, 1841, 0, 0, 1822, 0, 1823,
	1824, 1825, 1816, 0, 1817, 1818, 0, 1819, 1820, 313,
	425, 0, 0, 1728, 1007, 0, 758, 772, 753, 0,
	761, 0, 0, 1353, 0, 0, 0, 0, 741, 772,
	743, 0, 761, 831, 808, 0, 786, 0, 0, 390,
	0, 401, 395, 0, 402, 397, 398, 0, 0, 419,
	421, 422, 423, 408, 409, 679, 376, 377, 368, 369,
	370, 371, 372, 373, 374, 375, 0, 0, 0, 379,
	151, 0, 348, 349, 0, 0, 0, 195, 196, 197,
	198, 199, 200, 202, 186, 704, 706, 1119, 1131, 0,
	1122, 0, 205, 246, 178, 0, 0, 0, 1732, 1733,
	1734, 1735, 1736, 1741, 0, 1743, 1745, 1747, 1749, 0,
	1767, -2, -2, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1752, 1765, 1766, 0, 0,
	0, 0, 0, 0, 1763, 1763, 1758, 0, 1517, 1347,
	1348, 1495, 0, 0, 1531, 1535, 0, 0, 0, 0,
	0, 0, 1150, 1851, 0, 142, 1722, 1626, 1627, 1628,
	1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638,
	1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648,
	1649, 1650, 1651, 1652, 1653, 1654, 0, 0, 1731, 0,
	0, 0, 1724, 1725, 0, 0, 0, 1614, 0, 0,
	1620, 1621, 1622, 0, 767, 0, 1687, 1660, 1678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 928, 930, 0,
	776, 778, 779, 805, 786, 812, 0, 0, 0, 101,
	106, 0, 1205, 0, 0, 0, 0, 0, 0, 0,
	74, 1179, 75, 1181, 342, 343, 0, 0, 337, 325,
	2035, 327, 0, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 1055, 1056, 530, 1113, 0, 0, 0,
	1129, 1154, 1162, 0, 0, 0, 0, 0, 1211, 1041,
	1046, 1047, 1048, 1042, 1043, 1049, 1050, 0, 827, 0,
	0, 943, 596, 659, 660, 897, 600, 0, 0, 607,
	1998, 612, 896, 896, 619, 613, 620, 663, 621, 622,
	623, 661, 896, 896, 833, 658, 661, 646, 662, 661,
	1353, 650, 0, 657, 1353, 675, 1353, 0, 673, 627,
	628, 1213, 829, 442, 443, 448, 450, 0, 499, 499,
	499, 482, 499, 0, 0, 470, 1872, 0, 0, 0,
	0, 479, 1872, 0, 0, 1872, 1872, 1872, 1872, 1872,
	1872, 1872, 0, 0, 1872, 1872, 1872, 1872, 1872, 1872,
	1872, 1872, 1872, 1872, 1872, 0, 1872, 1872, 1872, 1872,
	1872, 1330, 1872, 0, 498, 1176, 489, 490, 491, 492,
	497, 0, 0, 526, 0, 0, 1054, 0, 530, 0,
	0, 1096, 0, 0, 909, 0, 910, 911, 912, 907,
	945, 969, 969, 0, 969, 949, 1353, 0, 0, 0,
	278, 279, 267, 0, 268, 0, 0, 281, 282, 0,
	284, 285, 286, 293, 1938, 2014, 288, 290, 0, 0,
	294, 307, 308, 309, 0, 0, 299, 300, 0, 0,
	362, 363, 365, 0, 786, 1180, 701, 1349, 702, 703,
	707, 0, 0, 710, 711, 712, 713, 714, 1021, 0,
	0, 1105, 1106, 1107, 1108, 896, 0, 905, 0, 901,
	975, 0, 977, 0, 0, 124, 19, 0, 117, 114,
	0, 0, 0, 0, 0, 1847, 1796, 1868, 0, 0,
	0, 1849, 0, 0, 0, 0, 0, 107, 788, 748,
	0, 752, 769, 0, 773, 0, 0, 765, 757, 762,
	0, 0, 782, 749, 1352, 0, 0, 0, 0, 742,
	0, 0, 747, 786, 0, 809, 838, 839, 842, 1411,
	0, 403, 399, 418, 0, 532, 0, 0, 0, 189,
	1116, 0, 190, 194, 184, 0, 0, 0, 1121, 0,
	1118, 1123, 0, 204, 0, 0, 179, 180, 1196, 1205,
	0, 0, 0, 1742, 1744, 1746, 1748, 1750, 0, 1753,
	1763, 1763, 1759, 0, 1754, 0, 1756, 0, 1732, 1501,
	0, 1536, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 1604, 1605, 0, 0, 1609, 0,
	1611, 1612, 1613, 1615, 0, 0, 0, 1619, 0, 1658,
	1679, 1662, 1665, 0, 1669, 0, 1671, 1673, 1674, 1675,
	0, 836, 836, 0, 0, 1575, 1575, 1575, 0, 0,
	0, 0, 1575, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1520, 0, 1521, 1522, 0, 0,
	0, 931, 806, 0, 0, 0, 0, 0, 1203, 0,
	91, 0, 0, 0, 0, 96, 0, 0, 76, 344,
	332, 334, 0, 326, 0, 1167, 0, 0, 0, 0,
	0, 1009, 1010, 1012, 0, 1015, 1016, 1017, 1021, 829,
	0, 829, 1066, 1872, 534, 0, 0, 1115, 0, 1085,
	0, 0, 0, -2, 0, 0, 1162, 0, 0, 0,
	1215, 0, 0, 0, 726, 730, 23, 830, 0, 603,
	601, 0, 605, 0, 606, 658, 614, 615, 896, 638,
	639, 0, 0, 896, 658, 658, 649, 661, 670, 0,
	671, 1353, 1215, 0, 0, 1175, 1281, 1249, 460, 0,
	1366, 1367, 500, 0, 1373, 1382, 1166, 1443, 0, 1382,
	0, 0, 1384, 1385, 0, 0, 0, 0, 483, 484,
	0, 469, 0, 0, 0, 0, 0, 0, 468, 0,
	0, 510, 0, 0, 0, 0, 0, 1873, 1872, 1872,
	0, 477, 478, 0, 481, 0, 0, 0, 0, 0,
	0, 0, 0, 1872, 1872, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 1338, 0, 1066, 1872,
	0, 0, 0, 0, 534, 1110, 1083, 1101, 0, 446,
	447, 507, 0, 0, 0, 0, 0, 0, 0, 935,
	0, 0, 0, 934, 0, 0, 0, 0, 0, 0,
	0, 829, 970, 0, 972, 973, 947, -2, 0, 909,
	952, 1727, 0, 271, 272, 0, 0, 277, 295, 297,
	269, 0, 0, 0, 296, 298, 302, 303, 361, 364,
	366, 848, 0, 0, 1239, 0, 1022, 1023, 1025, 1026,
	0, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1922, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1020, 718, 887, 899,
	906, 976, 978, 142, 902, 0, 127, 19, 126, 118,
	119, 0, 19, 0, 0, 0, 0, 1857, 1856, 1842,
	0, 1843, 1854, 1859, 0, 1862, 0, 429, 792, 0,
	0, 772, 774, 0, 0, 772, 0, 0, 781, 0,
	0, 0, 0, 0, 0, 0, 772, 848, 788, 0,
	845, 843, 844, 0, 0, 680, 152, 424, 0, 0,
	0, 0, 0, 705, 0, 1120, 186, 0, 0, 206,
	0, 0, 0, 1205, 1200, 1726, 1755, 1757, 0, 1764,
	1760, 1496, 1505, 1532, 0, 0, 1538, 1550, 1550, 0,
	0, 0, 1541, 1855, 1855, 1544, 1851, 1853, 1851, 1550,
	1550, 0, 1151, 0, 1152, 842, 143, 0, 0, 1610,
	0, 0, 0, 768, 0, 0, 0, 1571, 1573, 1575,
	1575, 1582, 1576, 1583, 1584, 1575, 1575, 1575, 1575, 1589,
	1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
	1575, 1569, 0, 0, 1785, 1786, 777, 0, 0, 819,
	820, 821, 822, 823, 0, 0, 61, 61, 1205, 0,
	100, 92, 0, 0, 0, 0, 0, 336, 0, 77,
	78, 80, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 1014, 0, 0, 0, 1359, 0, 1070, 1067,
	1068, 1069, 0, 1110, 535, 536, 537, 538, 0, 0,
	0, 1114, 0, 0, 1078, 0, 0, 0, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, -2, 1170, 0, 0, 0,
	1359, 1189, 0, 0, 1194, 1359, 1359, 0, 1223, 0,
	1212, 780, 0, -2, 0, 0, 728, 0, 0, 944,
	602, 608, 896, 632, 834, 835, 1353, 896, 896, 658,
	676, 672, 1223, 1214, 0, 449, 499, 0, 1269, 0,
	0, 1275, 0, 1282, 453, 0, 501, 0, 1372, 1399,
	1383, 1399, 1444, 1399, 1399, 1166, 0, 501, 0, 0,
	471, 0, 0, 0, 0, 0, 467, 504, 842, 454,
	456, 457, 458, 508, 509, 511, 0, 513, 514, 473,
	485, 486, 487, 488, 0, 0, 0, 480, 493, 494,
	495, 496, 455, 1298, 1299, 1300, 1303, 1304, 1305, 1306,
	0, 0, 1309, 1310, 1311, 1312, 1313, 1396, 1397, 1398,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1339, 1340, 1341,
	1342, 1343, 1344, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 0, 0, 1334, 0, 0, 0, 1070, 0, 0,
	0, 0, 0, 1110, 529, 0, 0, 1085, 0, 1103,
	0, 1097, 1098, 0, 0, 750, 896, 354, 0, 939,
	932, 0, 916, 0, 918, 936, 919, 937, 938, 923,
	0, 925, 0, 921, 922, 927, 920, 896, 908, 946,
	971, 948, 951, 953, 954, 960, 0, 0, 0, 0,
	265, 274, 275, 276, 283, 0, 554, 289, 804, 0,
	1350, 708, 709, 1240, 1241, 716, 0, 1027, 885, 0,
	0, 122, 125, 0, 120, 0, 0, 0, 0, 112,
	110, 1850, 0, 0, 794, 166, 0, 0, 0, 770,
	0, 775, 772, 756, 766, 755, 763, 764, 783, 1354,
	1355, 1356, 1357, 0, 772, 746, 745, 807, 792, 840,
	841, 0, 1412, 391, 0, 1117, 186, 191, 192, 193,
	187, 185, 1124, 0, 1126, 0, 1198, 0, 0, 1761,
	1537, 1506, 1539, 1551, 1552, 1540, 0, 1508, 1509, 1542,
	1543, 1545, 1546, 1547, 1548, 1549, 1510, 0, 1153, 1606,
	0, 1608, 1616, 1617, 0, 1666, 1670, 0, 0, 0,
	0, 0, 1580, 1581, 1585, 1586, 1587, 1588, 1590, 1591,
	1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 836,
	1570, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 63, 0, 63, 1204, 1206, 0, 974, 0,
	0, 97, 0, 0, 79, 81, 0, 1999, 0, 0,
	0, 0, 88, 1002, 1005, 1011, 1013, 0, 0, 0,
	1360, 1361, 1363, 1364, 1365, 0, 1038, 0, 0, 1058,
	1059, 1060, 1072, 0, 540, 541, 0, 0, 0, 553,
	549, 550, 551, 531, 1109, 1092, 0, 0, 1081, 0,
	0, 1091, 0, 1171, 1872, 1872, 1872, 0, 0, 1283,
	1872, 1872, 0, 1191, 1193, 0, 0, 1287, 1226, 0,
	0, 1217, 0, 969, 0, 0, 896, 727, 730, 731,
	828, 609, 647, 651, 648, 896, 1226, 441, 1247, 0,
	0, 0, 0, 0, 1279, 0, 0, 1251, 0, 472,
	502, 0, -2, 0, 1400, 0, 1386, 1400, 0, 0,
	1399, 0, 461, 501, 0, 0, 0, 515, 519, 520,
	0, 517, 1439, 0, 518, 0, 506, 0, 512, 1301,
	1302, 0, 1307, 1308, 0, 1332, 0, 0, 0, 452,
	521, 0, 0, 0, 522, 523, 528, 1111, 1112, 1078,
	0, 1092, 0, 1102, 0, 1099, 1100, 836, 0, 0,
	913, 940, 0, 0, 914, 0, 915, 917, 924, 926,
	353, 955, 0, 0, 957, 958, 959, 950, 291, 849,
	1024, 0, 870, 0, 0, 903, 0, 19, 0, 0,
	115, 1860, 1863, 796, 0, 793, 167, 0, 0, 0,
	0, 760, 771, 754, 1358, 744, 794, 846, 847, 188,
	183, 1125, 1208, 0, 1199, 0, 1463, 1519, 0, 1618,
	0, 1575, 1572, 1575, 1574, 1566, 0, 1523, 0, 1525,
	1526, 1527, 0, 1529, 1530, 0, 815, 0, 59, 0,
	62, 60, 0, 99, 93, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 1044, 1287, 0, 1044,
	1071, 1057, 0, 0, 542, 543, 0, 546, 552, 1073,
	0, 0, 1075, 1076, 1077, 0, 0, 1089, 0, 0,
	0, 0, 1163, 1177, 0, 0, 0, -2, 0, -2,
	1188, 0, 1232, 0, 1224, 0, 1216, 0, 1219, 896,
	896, -2, 724, 729, 0, 652, 1232, 1249, 0, 1270,
	0, 0, 0, 0, 0, 0, 0, 1250, 0, 1263,
	503, 1401, -2, 1415, 1417, 0, 1176, 1420, 1421, 0,
	0, 0, 0, 0, 0, 1470, 1429, 0, 0, 1433,
	1434, 1435, 0, 0, 1438, 0, 1779, 1780, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 1380, 462, 463,
	0, 465, 466, 1872, 1440, 505, 459, 1872, 475, 1331,
	1335, 1336, 1333, 527, 524, 525, 1081, 1084, 1095, 1104,
	751, 831, 355, 356, 941, 0, 933, 964, 961, 0,
	0, 1028, 886, 894, 2228, 2230, 2227, 116, 121, 0,
	0, 798, 0, 795, 0, 789, 791, 177, 759, 796,
	137, 169, 0, 0, 1507, 0, 0, 0, 1607, 1657,
	1578, 1579, 0, 1567, 0, 1561, 1562, 1563, 1568, 0,
	0, 818, 813, 64, 95, 0, 98, 68, 83, 0,
	84, 0, 0, 0, 0, 1030, 1037, 1051, 1182, 1362,
	1036, 0, 0, 539, 544, 0, 547, 548, 1093, 1092,
	0, 1079, 1080, 0, 1087, 0, 0, 1172, 1173, 1174,
	1284, 1285, 1286, 1242, 1190, 0, -2, 1295, 0, 0,
	1186, 1208, 1242, 0, 0, 1220, 0, 1227, 0, 1225,
	1218, 836, 725, 1229, 451, 1281, 1271, 0, 1273, 0,
	0, 0, 0, 1252, -2, 0, 1416, 1418, 1419, 1422,
	1423, 1424, 1475, 1476, 1477, 0, 0, 1427, 1472, 1473,
	1474, 1428, 0, 0, 0, 0, 0, 1777, 1778, 1468,
	0, 0, 1387, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1388, 0, 0, 0, 1379, 1381, 464, 0, 0, 1872,
	1094, 352, 0, 0, 965, 967, 962, 963, 888, 0,
	0, 0, 0, 111, 113, 128, 0, 797, 168, 0,
	798, 139, 0, 160, 0, 1209, 0, 1518, 0, 0,
	0, 1577, 1564, 0, 0, 0, 0, 0, 1781, 1782,
	1783, 0, 1524, 1528, 94, 0, 66, 0, 85, 86,
	0, 0, 0, 0, 1052, 1053, 1061, 1062, 0, 1064,
	1065, 545, 1074, 1082, 1086, 1089, 0, 1141, 1244, 0,
	1192, 1175, 1297, 1872, 1195, 1244, 0, 1289, 1872, 1872,
	1210, 0, 1222, 0, 1234, 0, 1228, 831, 440, 0,
	1231, 1267, 1272, 1274, 1276, 0, 1280, 1278, 1253, -2,
	0, 1261, 0, 0, 1425, 1426, 0, 0, 1676, 1872,
	0, 1458, 0, 1141, 1141, 1141, 1141, 0, 516, 474,
	0, 942, 956, 0, 895, 0, 0, 0, 0, 0,
	787, 129, 0, 138, 157, 0, 170, 171, 0, 0,
	0, 0, 1201, 0, 1466, 1467, 0, 1553, 0, 0,
	0, 1557, 1558, 1559, 1560, 65, 68, 0, 0, 87,
	0, 1029, 0, 1063, 1088, 1090, 1140, 1185, 0, 1281,
	1296, 0, 1187, 1288, 0, 0, 0, 1221, 1233, 0,
	1236, 723, 1230, 1248, 0, 1277, 1254, 1262, 0, 1257,
	0, 0, 0, 1471, 0, 1432, 0, 1437, 1446, 1459,
	0, 0, 1368, 0, 1370, 0, 1374, 0, 1376, 0,
	0, 476, 966, 968, 0, 1727, 890, 891, 0, 800,
	790, 140, 144, 0, 166, 163, 0, 172, 0, 0,
	0, 0, 1197, 0, 1464, 0, 1554, 1555, 1556, 67,
	69, 89, 0, 1031, 1032, 1045, 1142, 1872, 1872, 0,
	0, 0, 1148, 1149, 0, 1269, 1301, 1290, 1291, 1292,
	1235, 1268, 1256, 0, -2, 1264, 0, 0, 1729, 1739,
	1740, 1430, 1436, 1445, 1447, 1448, 0, 1460, 1461, 1462,
	1469, 1141, 1141, 1141, 1141, 1378, 889, 0, 0, 799,
	0, 131, 0, 0, 161, 162, 164, 0, 173, 0,
	175, 176, 0, 0, 1565, 1033, 0, 0, 1145, 1146,
	0, 1245, 0, 1247, 1258, -2, 0, 1266, 0, 1431,
	1449, 0, 1450, 0, 0, 0, 1369, 1371, 1375, 1377,
	1727, 892, 801, 1207, 0, 145, 0, 147, 149, 150,
	1402, 158, 159, 165, 174, 0, 0, 1018, 1034, 0,
	1143, 1144, 1147, 0, 1249, 1265, 1730, 1451, 1453, 1454,
	0, 0, 1452, 0, 132, 133, 0, 146, 0, 0,
	1202, 1465, 1035, 1246, 1243, 1455, 1457, 1456, 893, 0,
	0, 148, 1403, 134, 135, 136, 0, 1404,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 659, 656,
	129, 128, 130, 3, 660, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 657, 141, 658, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:845
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:852
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:858
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:866
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:876
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:895
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:943
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:957
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:968
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:984
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:989
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:993
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:999
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1021
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1025
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1032
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1040
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1048
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1054
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1061
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1070
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1078
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1086
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1096
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1106
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1116
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1126
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1136
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1148
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1158
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1168
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1179
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1190
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1202
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1212
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1227
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1235
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1243
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1251
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1260
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1270
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1282
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1290
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1299
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1309
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1319
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1329
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1349
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1355
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1362
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1370
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1376
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1385
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1395
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1403
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1411
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1419
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1429
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1437
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1447
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1454
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1463
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1473
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1477
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1483
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1487
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1493
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1502
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1512
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1516
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1522
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1531
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1535
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1541
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1562
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1576
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1583
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1587
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1593
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1597
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1603
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1610
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1618
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1622
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1634
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1638
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1652
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1656
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1661
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1668
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1672
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1676
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1682
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1691
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1702
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1706
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1712
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1716
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1722
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1726
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1732
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1752
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1771
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1775
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1779
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1788
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1797
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1807
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1814
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1819
		{
			yyVAL.str = "\n"
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1826
		{
			yyVAL.str = yyDollar[3].str
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1831
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1835
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1863
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1867
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1873
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1881
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1901
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1920
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1945
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1949
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1953
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1958
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1962
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1968
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1981
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1992
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2005
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2009
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2019
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2032
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2045
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2051
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2057
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2065
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2075
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2085
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2089
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2093
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2097
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2101
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2105
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2112
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2116
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2122
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2129
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2138
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2142
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2148
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2152
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2156
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2160
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2164
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2172
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2176
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2180
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2184
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2188
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2192
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2196
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2200
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2204
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2208
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2212
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2216
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2220
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2224
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2228
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2232
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2236
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2240
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2244
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2248
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2252
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2256
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2260
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2264
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2268
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2272
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2276
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2280
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2284
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2288
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2292
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2296
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2300
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2304
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2308
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2312
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2316
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2320
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2324
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2328
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2332
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2336
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2340
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2344
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2348
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2363
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2372
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2379
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2386
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2395
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2413
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2417
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2423
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2430
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2438
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2442
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2446
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2450
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2456
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2460
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2473
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2480
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2489
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2519
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2523
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2527
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2539
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2550
		{
			yyVAL.str = yyDollar[3].str
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2556
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2560
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2566
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2574
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2583
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2592
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2600
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2608
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2631
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2650
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2657
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2664
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2672
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2679
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2686
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2695
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2699
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2703
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2709
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2713
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2719
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2723
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2729
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2733
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2747
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2753
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2759
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2764
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2769
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2774
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2780
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2786
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2791
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2795
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2799
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2803
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2807
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2811
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2815
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2819
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2823
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2829
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2833
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2837
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2841
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2846
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2851
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2857
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2870
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2883
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2896
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2909
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2925
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2932
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2943
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2954
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2958
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2964
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2974
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2980
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2984
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2990
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2996
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3000
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3008
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3014
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3027
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3033
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3037
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3043
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3047
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3053
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3059
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3070
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3076
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3080
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3084
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3088
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3092
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3096
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3104
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3112
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3122
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3130
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3140
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3150
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3166
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3170
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3178
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3186
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3226
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3230
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3236
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3242
		{
			yyVAL.str = yyDollar[1].str
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3247
		{
			yyVAL.str = "true"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3248
		{
			yyVAL.str = "false"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3249
		{
			yyVAL.str = yyDollar[1].str
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3254
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3260
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3269
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3276
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3284
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3288
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3313
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3336
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3346
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3353
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3362
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3370
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3374
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3380
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3391
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3395
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3401
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3405
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3429
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3439
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3449
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3465
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3483
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3487
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3493
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3497
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3503
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3509
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3517
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3527
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3535
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3545
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3555
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3565
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3572
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3576
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3580
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3584
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3588
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3595
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3601
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3605
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3609
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3613
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3617
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3621
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3625
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3629
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3634
		{
			yyVAL.str = ""
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3665
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3669
		{
			yyVAL.str = string("COLUMN")
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3674
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3680
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3686
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3694
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3698
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3704
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3712
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3719
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3725
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3731
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3737
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3743
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3750
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3757
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3765
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3771
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3783
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3789
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3797
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3801
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3808
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3826
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3841
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3856
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3871
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3884
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3890
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3901
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3913
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3926
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3930
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3938
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3942
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3947
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3951
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3967
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3971
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3975
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3979
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3986
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3990
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3994
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3998
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4005
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4009
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4016
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4020
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4024
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4028
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4035
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4042
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4048
		{
			yyVAL.item = nil
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4053
		{
			yyVAL.item = nil
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4102
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4108
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4114
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4120
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4129
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4137
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4145
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4153
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4159
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4166
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4174
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4187
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4191
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4202
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4206
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4212
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4217
		{
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4221
		{
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4226
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4236
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4246
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4254
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4260
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4266
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4272
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4278
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4284
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4290
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4299
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4303
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4307
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4311
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4315
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4319
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4323
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4327
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4333
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4342
		{
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4344
		{
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4353
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4363
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4372
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4376
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4380
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4386
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4392
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4398
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4404
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4413
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4424
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4436
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4444
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4450
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4462
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4476
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4482
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4488
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4499
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4504
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4508
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4512
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4517
		{
			yyVAL.str = ""
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4521
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4527
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4542
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4546
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4552
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4560
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4567
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4575
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4581
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4587
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4592
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4600
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4606
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4611
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4617
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4623
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4627
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4655
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4663
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4671
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4679
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4683
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4689
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4702
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4710
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4719
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4725
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4733
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4741
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4749
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4755
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4763
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4769
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4777
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4783
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4793
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4798
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4805
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4821
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4834
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4845
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4849
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4855
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4861
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4870
		{
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4872
		{
		}
	case 732:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4875
		{
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4884
		{
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4888
		{
		}
	case 741:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4893
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4902
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4909
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4915
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4923
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4930
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4937
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4957
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4965
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4975
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4979
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4985
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4992
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4998
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5006
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5013
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5020
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5039
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5043
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5047
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5052
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5056
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5060
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5066
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5075
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5079
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5085
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5089
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5095
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5099
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5105
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5110
		{
		}
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5114
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5121
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5125
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5132
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5137
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5141
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5147
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5151
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5157
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5161
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5166
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5170
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5183
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5194
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5205
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5227
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5250
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5258
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5267
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5271
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5284
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5288
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5293
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5297
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5304
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5309
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5316
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5322
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5326
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5330
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5334
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5338
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5342
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5347
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5351
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5357
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5367
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5382
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5386
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5400
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5404
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5410
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5419
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5423
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5431
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5435
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5441
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5448
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5457
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5461
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5467
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5475
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5479
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5488
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5494
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5498
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5502
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5507
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5511
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5517
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5523
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5527
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5533
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5538
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5542
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5546
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5551
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5555
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5559
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5564
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5568
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5576
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5580
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5584
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5598
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5602
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5612
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5622
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5632
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5644
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5652
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5660
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5669
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5677
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5685
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5693
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5701
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5709
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5717
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5725
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5733
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5743
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5756
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5760
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5766
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5770
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5776
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5780
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5784
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5788
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5792
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5796
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5800
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5804
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5808
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5812
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5834
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5838
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5843
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5847
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5857
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5866
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5875
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5886
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5890
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5895
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5899
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5904
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5908
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5914
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5918
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5924
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5928
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5932
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5936
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5941
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5949
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5955
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5963
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5973
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5983
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5987
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5993
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6002
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6011
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6020
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6028
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6039
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6049
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6053
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6059
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6063
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6073
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6077
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6081
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 926:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6085
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6091
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 928:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6097
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6108
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6112
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6118
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6124
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6128
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6134
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6140
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6144
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 937:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6148
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6152
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6158
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6162
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6168
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6172
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6178
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6182
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6188
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6192
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6202
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6215
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6221
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6227
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6241
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6252
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6259
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6263
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6269
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6279
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6283
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6287
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6292
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6296
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6300
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6304
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6309
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6313
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6317
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6321
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6325
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6330
		{
			yyVAL.str = ""
		}
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6334
		{
			yyVAL.str = yyDollar[1].str
		}
	case 971:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6338
		{
			yyVAL.str = yyDollar[2].str
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6344
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6348
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 974:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6353
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6357
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6361
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6365
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6369
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6375
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1002:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6417
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6430
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6436
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1005:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6442
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6455
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6460
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6467
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6474
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6478
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6484
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6490
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6495
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6499
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6503
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6507
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6514
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6547
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6552
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6559
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6566
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6570
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6576
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6582
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6586
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6590
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6596
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6602
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6608
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6612
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6618
		{
			yyVAL.str = ""
		}
	case 1035:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6625
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1036:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6631
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6646
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6663
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6680
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6684
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6690
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6694
		{
			yyVAL.str = "DEFINER = "
		}
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6698
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6703
		{
			yyVAL.str = ""
		}
	case 1045:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6707
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6721
		{
			yyVAL.str = ""
		}
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6729
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1055:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6735
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6740
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6746
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6759
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6764
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6769
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6775
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6782
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6789
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6796
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6803
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6811
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6817
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6824
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6831
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6839
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6845
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6854
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6871
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6887
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6906
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6912
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6921
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6939
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6945
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6952
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6960
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6966
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6974
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6980
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6988
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6994
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7003
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7007
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7012
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7016
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7023
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7028
		{
			yyVAL.str = ""
		}
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7032
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1094:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7038
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7051
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7062
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7066
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7072
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7078
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7084
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7091
		{
			yyVAL.str = ""
		}
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7095
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7100
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7104
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7110
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7118
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7126
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7134
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7142
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7147
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7159
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7170
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7279
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7283
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7289
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7302
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7306
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7312
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7325
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7329
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7333
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7338
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7342
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7348
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7355
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7361
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7370
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7377
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7388
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7392
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7398
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7407
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7411
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7415
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7420
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7424
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7428
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7432
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7438
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7469
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7473
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7499
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7505
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7517
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7523
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7529
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7535
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7541
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7549
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7553
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7559
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7573
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7587
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7591
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7595
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7599
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7603
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7607
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7611
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7617
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7632
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7636
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7647
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7651
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7656
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7660
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7666
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7670
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7676
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7685
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7694
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7700
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7704
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7710
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7721
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7727
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7745
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7763
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7781
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7797
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7801
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7810
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7822
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7831
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7843
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7853
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7863
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7874
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7884
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7895
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7903
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7914
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7921
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7931
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7944
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7952
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7961
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7970
		{
			yyVAL.str = ""
		}
	case 1202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7974
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7980
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7984
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7989
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7993
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8000
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8012
		{
			yyVAL.str = ""
		}
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8016
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1210:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8022
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8043
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8057
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8061
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8065
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8071
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8075
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8082
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8089
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8096
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8103
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8107
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8111
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8115
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8119
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8126
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8133
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8137
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8144
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8151
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8155
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8161
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8167
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8171
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8178
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8185
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8192
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8199
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8203
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8208
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8212
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8216
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8221
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8225
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8242
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8250
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8258
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8262
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8274
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8278
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8284
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8288
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8294
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8307
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8321
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8325
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8331
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8335
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8341
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8350
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8361
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8365
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8370
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8374
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8380
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8385
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8393
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8397
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8407
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8411
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8422
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8430
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8438
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8446
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8457
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8466
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8476
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8486
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8490
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8495
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8499
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8505
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8509
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8515
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8524
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8534
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8538
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8544
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8548
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8554
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8563
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8573
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8577
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8583
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8587
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8591
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8597
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8601
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8605
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8609
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8613
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8617
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8621
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8626
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8630
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8634
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8638
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8642
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8646
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8650
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8654
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8658
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8662
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8666
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8670
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8674
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8680
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8686
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8690
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8694
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8698
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8702
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8708
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8714
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8720
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8726
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8732
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8738
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8742
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8746
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8750
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8755
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8766
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8770
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8776
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8787
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8791
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8797
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8801
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8805
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8809
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8813
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8817
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8831
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8835
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8844
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8850
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8858
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8862
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8869
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8878
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8886
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8893
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8901
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8908
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8912
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8918
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8922
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8926
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8932
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8936
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8942
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8955
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8968
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9007
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9047
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9061
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9067
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9080
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9093
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9106
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9119
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9134
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9144
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9150
		{
			yyVAL.str = ""
		}
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9154
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9164
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9170
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9176
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9197
		{
			yyVAL.str = ""
		}
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9201
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9207
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9213
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9217
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9222
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9230
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9234
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9238
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9242
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9248
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9254
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9258
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9263
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9270
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9274
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9280
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9284
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9290
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9294
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9298
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9302
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9306
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9310
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9315
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9319
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9323
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9327
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9331
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9335
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9339
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9343
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9347
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9351
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9365
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9369
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9373
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9377
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9381
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9385
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9391
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9395
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9400
		{
			yyVAL.str = ""
		}
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9404
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9410
		{
			yyVAL.str = ""
		}
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9414
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1445:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9420
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9437
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9444
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9451
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9458
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9465
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9474
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9480
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9486
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9490
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9494
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9498
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9502
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9507
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9514
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9518
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9522
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9527
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9531
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9535
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9539
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9543
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9548
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9552
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9557
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9561
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9577
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9583
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9587
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9591
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9595
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9599
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9603
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9607
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9611
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9615
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9619
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9623
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9627
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9631
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9637
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9641
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9645
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9649
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9653
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9657
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9661
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9665
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9669
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9673
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9715
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9719
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9723
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9728
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9736
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9740
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9744
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9748
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9752
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9762
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9766
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9770
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9774
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9778
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9782
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9786
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9790
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9803
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9809
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9818
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9827
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9838
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9848
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9858
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9867
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9877
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9887
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9897
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9906
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9916
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9920
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9925
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9929
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9935
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9939
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9945
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9954
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9966
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9983
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10000
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10013
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10026
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10038
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10052
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10067
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10082
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10099
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10114
		{
		}
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10121
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10125
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10129
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10135
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10139
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10143
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10147
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10153
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10157
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10161
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10167
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10175
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10185
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10189
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10196
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10201
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10205
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10210
		{
			yyVAL.str = ","
		}
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10214
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1573:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10219
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10223
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1575:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10228
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10235
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10261
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10273
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10285
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10296
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10307
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10318
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10328
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10338
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10349
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10360
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10371
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10382
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10393
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10404
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10415
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10426
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10437
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10448
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10459
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10470
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10481
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10492
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10503
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10527
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10536
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10545
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10554
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10563
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10574
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10583
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10593
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10602
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10611
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10620
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10629
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10641
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10652
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10665
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10677
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10700
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1655:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10736
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10749
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10762
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10774
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10783
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10791
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10799
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10812
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10821
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10832
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10843
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10852
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10864
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10874
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10884
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10893
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10904
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10913
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10923
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10932
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10941
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10951
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10955
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10961
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10965
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10984
		{
		}
	case 1687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10986
		{
		}
	case 1722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11028
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11040
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11044
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11048
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11054
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11059
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11063
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11069
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11073
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11079
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11083
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11090
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11094
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11098
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11107
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11111
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11115
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11120
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11124
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11130
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11134
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11138
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11142
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11146
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11150
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11154
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11158
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11162
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11166
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11174
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11178
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11182
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11186
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11190
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11194
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11198
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11202
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11206
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11210
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11216
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11220
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11226
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11230
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11237
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11241
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11245
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11251
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11255
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11259
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11263
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11267
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11271
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11275
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11281
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11285
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11289
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11293
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11299
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11312
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11317
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11323
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11327
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11340
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11345
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11349
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11353
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11357
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11361
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11368
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11372
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11376
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11380
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11387
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11398
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11403
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11409
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11421
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11433
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11445
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11458
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11471
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11484
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11497
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11510
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11523
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11536
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11549
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11562
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11575
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11590
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11617
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11659
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11695
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11731
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11748
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11760
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11780
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11800
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11820
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11836
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11849
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11862
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11875
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11888
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11900
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11912
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11924
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11936
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11948
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11960
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11972
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11984
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11996
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12008
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12021
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12034
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12047
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12060
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12075
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12083
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12092
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12102
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12125
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12130
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12136
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12143
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12147
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12152
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12156
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12162
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12168
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12175
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12182
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12191
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12198
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12205
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12214
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12218
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12222
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12228
		{
		}
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12230
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12240
		{
			yyVAL.str = ""
		}
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12244
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
