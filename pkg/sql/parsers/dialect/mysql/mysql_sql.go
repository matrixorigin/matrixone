// Code generated by goyacc -o mysql_sql.go -c mysql mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const DISTINCTROW = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const SUBQUERY_AS_EXPR = 57394
const LOWER_THAN_STRING = 57395
const ID = 57396
const AT_ID = 57397
const AT_AT_ID = 57398
const STRING = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const INTEGRAL = 57404
const HEX = 57405
const BIT_LITERAL = 57406
const FLOAT = 57407
const HEXNUM = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const LOWER_THAN_CHARSET = 57412
const CHARSET = 57413
const UNIQUE = 57414
const KEY = 57415
const OR = 57416
const PIPE_CONCAT = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const ASSIGNMENT = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const BEGIN = 57445
const START = 57446
const TRANSACTION = 57447
const COMMIT = 57448
const ROLLBACK = 57449
const WORK = 57450
const CONSISTENT = 57451
const SNAPSHOT = 57452
const CHAIN = 57453
const NO = 57454
const RELEASE = 57455
const BIT = 57456
const TINYINT = 57457
const SMALLINT = 57458
const MEDIUMINT = 57459
const INT = 57460
const INTEGER = 57461
const BIGINT = 57462
const INTNUM = 57463
const REAL = 57464
const DOUBLE = 57465
const FLOAT_TYPE = 57466
const DECIMAL = 57467
const NUMERIC = 57468
const DECIMAL_VALUE = 57469
const TIME = 57470
const TIMESTAMP = 57471
const DATETIME = 57472
const YEAR = 57473
const CHAR = 57474
const VARCHAR = 57475
const BOOL = 57476
const CHARACTER = 57477
const VARBINARY = 57478
const NCHAR = 57479
const TEXT = 57480
const TINYTEXT = 57481
const MEDIUMTEXT = 57482
const LONGTEXT = 57483
const BLOB = 57484
const TINYBLOB = 57485
const MEDIUMBLOB = 57486
const LONGBLOB = 57487
const JSON = 57488
const ENUM = 57489
const GEOMETRY = 57490
const POINT = 57491
const LINESTRING = 57492
const POLYGON = 57493
const GEOMETRYCOLLECTION = 57494
const MULTIPOINT = 57495
const MULTILINESTRING = 57496
const MULTIPOLYGON = 57497
const INT1 = 57498
const INT2 = 57499
const INT3 = 57500
const INT4 = 57501
const INT8 = 57502
const SQL_SMALL_RESULT = 57503
const SQL_BIG_RESULT = 57504
const SQL_BUFFER_RESULT = 57505
const CREATE = 57506
const ALTER = 57507
const DROP = 57508
const RENAME = 57509
const ANALYZE = 57510
const ADD = 57511
const SCHEMA = 57512
const TABLE = 57513
const INDEX = 57514
const VIEW = 57515
const TO = 57516
const IGNORE = 57517
const IF = 57518
const PRIMARY = 57519
const COLUMN = 57520
const CONSTRAINT = 57521
const SPATIAL = 57522
const FULLTEXT = 57523
const FOREIGN = 57524
const KEY_BLOCK_SIZE = 57525
const SHOW = 57526
const DESCRIBE = 57527
const EXPLAIN = 57528
const DATE = 57529
const ESCAPE = 57530
const REPAIR = 57531
const OPTIMIZE = 57532
const TRUNCATE = 57533
const MAXVALUE = 57534
const PARTITION = 57535
const REORGANIZE = 57536
const LESS = 57537
const THAN = 57538
const PROCEDURE = 57539
const TRIGGER = 57540
const STATUS = 57541
const VARIABLES = 57542
const ROLE = 57543
const PROXY = 57544
const AVG_ROW_LENGTH = 57545
const STORAGE = 57546
const DISK = 57547
const MEMORY = 57548
const CHECKSUM = 57549
const COMPRESSION = 57550
const DATA = 57551
const DIRECTORY = 57552
const DELAY_KEY_WRITE = 57553
const ENCRYPTION = 57554
const ENGINE = 57555
const MAX_ROWS = 57556
const MIN_ROWS = 57557
const PACK_KEYS = 57558
const ROW_FORMAT = 57559
const STATS_AUTO_RECALC = 57560
const STATS_PERSISTENT = 57561
const STATS_SAMPLE_PAGES = 57562
const DYNAMIC = 57563
const COMPRESSED = 57564
const REDUNDANT = 57565
const COMPACT = 57566
const FIXED = 57567
const COLUMN_FORMAT = 57568
const AUTO_RANDOM = 57569
const RESTRICT = 57570
const CASCADE = 57571
const ACTION = 57572
const PARTIAL = 57573
const SIMPLE = 57574
const CHECK = 57575
const ENFORCED = 57576
const RANGE = 57577
const LIST = 57578
const ALGORITHM = 57579
const LINEAR = 57580
const PARTITIONS = 57581
const SUBPARTITION = 57582
const SUBPARTITIONS = 57583
const TYPE = 57584
const ANY = 57585
const SOME = 57586
const PROPERTIES = 57587
const PARSER = 57588
const VISIBLE = 57589
const INVISIBLE = 57590
const BTREE = 57591
const HASH = 57592
const RTREE = 57593
const BSI = 57594
const ZONEMAP = 57595
const LEADING = 57596
const BOTH = 57597
const TRAILING = 57598
const UNKNOWN = 57599
const EXPIRE = 57600
const ACCOUNT = 57601
const UNLOCK = 57602
const DAY = 57603
const NEVER = 57604
const SECOND = 57605
const ASCII = 57606
const COALESCE = 57607
const COLLATION = 57608
const HOUR = 57609
const MICROSECOND = 57610
const MINUTE = 57611
const MONTH = 57612
const QUARTER = 57613
const REPEAT = 57614
const REVERSE = 57615
const ROW_COUNT = 57616
const WEEK = 57617
const REVOKE = 57618
const FUNCTION = 57619
const PRIVILEGES = 57620
const TABLESPACE = 57621
const EXECUTE = 57622
const SUPER = 57623
const GRANT = 57624
const OPTION = 57625
const REFERENCES = 57626
const REPLICATION = 57627
const SLAVE = 57628
const CLIENT = 57629
const USAGE = 57630
const RELOAD = 57631
const FILE = 57632
const TEMPORARY = 57633
const ROUTINE = 57634
const EVENT = 57635
const SHUTDOWN = 57636
const NULLX = 57637
const AUTO_INCREMENT = 57638
const APPROXNUM = 57639
const SIGNED = 57640
const UNSIGNED = 57641
const ZEROFILL = 57642
const USER = 57643
const IDENTIFIED = 57644
const CIPHER = 57645
const ISSUER = 57646
const X509 = 57647
const SUBJECT = 57648
const SAN = 57649
const REQUIRE = 57650
const SSL = 57651
const NONE = 57652
const PASSWORD = 57653
const MAX_QUERIES_PER_HOUR = 57654
const MAX_UPDATES_PER_HOUR = 57655
const MAX_CONNECTIONS_PER_HOUR = 57656
const MAX_USER_CONNECTIONS = 57657
const FORMAT = 57658
const VERBOSE = 57659
const CONNECTION = 57660
const LOAD = 57661
const INFILE = 57662
const TERMINATED = 57663
const OPTIONALLY = 57664
const ENCLOSED = 57665
const ESCAPED = 57666
const STARTING = 57667
const LINES = 57668
const DATABASES = 57669
const TABLES = 57670
const EXTENDED = 57671
const FULL = 57672
const PROCESSLIST = 57673
const FIELDS = 57674
const COLUMNS = 57675
const OPEN = 57676
const ERRORS = 57677
const WARNINGS = 57678
const INDEXES = 57679
const SCHEMAS = 57680
const NAMES = 57681
const GLOBAL = 57682
const SESSION = 57683
const ISOLATION = 57684
const LEVEL = 57685
const READ = 57686
const WRITE = 57687
const ONLY = 57688
const REPEATABLE = 57689
const COMMITTED = 57690
const UNCOMMITTED = 57691
const SERIALIZABLE = 57692
const LOCAL = 57693
const EXCEPT = 57694
const CURRENT_TIMESTAMP = 57695
const DATABASE = 57696
const CURRENT_TIME = 57697
const LOCALTIME = 57698
const LOCALTIMESTAMP = 57699
const UTC_DATE = 57700
const UTC_TIME = 57701
const UTC_TIMESTAMP = 57702
const REPLACE = 57703
const CONVERT = 57704
const SEPARATOR = 57705
const CURRENT_DATE = 57706
const CURRENT_USER = 57707
const CURRENT_ROLE = 57708
const SECOND_MICROSECOND = 57709
const MINUTE_MICROSECOND = 57710
const MINUTE_SECOND = 57711
const HOUR_MICROSECOND = 57712
const HOUR_SECOND = 57713
const HOUR_MINUTE = 57714
const DAY_MICROSECOND = 57715
const DAY_SECOND = 57716
const DAY_MINUTE = 57717
const DAY_HOUR = 57718
const YEAR_MONTH = 57719
const SQL_TSI_HOUR = 57720
const SQL_TSI_DAY = 57721
const SQL_TSI_WEEK = 57722
const SQL_TSI_MONTH = 57723
const SQL_TSI_QUARTER = 57724
const SQL_TSI_YEAR = 57725
const SQL_TSI_SECOND = 57726
const SQL_TSI_MINUTE = 57727
const RECURSIVE = 57728
const CONFIG = 57729
const MATCH = 57730
const AGAINST = 57731
const BOOLEAN = 57732
const LANGUAGE = 57733
const WITH = 57734
const QUERY = 57735
const EXPANSION = 57736
const ADDDATE = 57737
const BIT_AND = 57738
const BIT_OR = 57739
const BIT_XOR = 57740
const CAST = 57741
const COUNT = 57742
const APPROX_COUNT_DISTINCT = 57743
const APPROX_PERCENTILE = 57744
const CURDATE = 57745
const CURTIME = 57746
const DATE_ADD = 57747
const DATE_SUB = 57748
const EXTRACT = 57749
const GROUP_CONCAT = 57750
const MAX = 57751
const MID = 57752
const MIN = 57753
const NOW = 57754
const POSITION = 57755
const SESSION_USER = 57756
const STD = 57757
const STDDEV = 57758
const STDDEV_POP = 57759
const STDDEV_SAMP = 57760
const SUBDATE = 57761
const SUBSTR = 57762
const SUBSTRING = 57763
const SUM = 57764
const SYSDATE = 57765
const SYSTEM_USER = 57766
const TRANSLATE = 57767
const TRIM = 57768
const VARIANCE = 57769
const VAR_POP = 57770
const VAR_SAMP = 57771
const AVG = 57772
const JSON_EXTRACT = 57773
const ROW = 57774
const OUTFILE = 57775
const HEADER = 57776
const MAX_FILE_SIZE = 57777
const FORCE_QUOTE = 57778
const UNUSED = 57779

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"JSON_EXTRACT",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6555

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	17, 361,
	-2, 342,
	-1, 58,
	189, 511,
	-2, 547,
	-1, 67,
	216, 250,
	217, 250,
	-2, 271,
	-1, 320,
	58, 1328,
	456, 1328,
	-2, 92,
	-1, 339,
	58, 672,
	456, 672,
	-2, 509,
	-1, 340,
	58, 502,
	456, 502,
	-2, 510,
	-1, 346,
	17, 362,
	-2, 325,
	-1, 405,
	89, 1207,
	100, 1207,
	119, 1207,
	-2, 1035,
	-1, 581,
	17, 362,
	-2, 325,
	-1, 603,
	53, 1357,
	-2, 1364,
	-1, 611,
	53, 1358,
	-2, 1372,
	-1, 613,
	53, 1354,
	-2, 1374,
	-1, 614,
	53, 1355,
	-2, 1375,
	-1, 619,
	53, 1356,
	-2, 1381,
	-1, 620,
	53, 1359,
	-2, 1382,
	-1, 621,
	53, 1360,
	-2, 1383,
	-1, 622,
	53, 799,
	-2, 1384,
	-1, 623,
	53, 800,
	-2, 1385,
	-1, 624,
	53, 801,
	-2, 1386,
	-1, 626,
	53, 1361,
	-2, 1388,
	-1, 627,
	53, 819,
	-2, 1389,
	-1, 628,
	53, 818,
	-2, 1390,
	-1, 631,
	53, 1362,
	-2, 1393,
	-1, 632,
	53, 1363,
	-2, 1394,
	-1, 638,
	53, 881,
	-2, 1207,
	-1, 639,
	53, 890,
	-2, 1233,
	-1, 640,
	53, 894,
	-2, 1272,
	-1, 641,
	53, 905,
	-2, 1333,
	-1, 642,
	53, 907,
	-2, 1343,
	-1, 643,
	53, 895,
	-2, 1348,
	-1, 644,
	53, 903,
	-2, 1352,
	-1, 645,
	53, 884,
	-2, 1353,
	-1, 799,
	1, 537,
	55, 537,
	455, 537,
	-2, 544,
	-1, 928,
	17, 361,
	-2, 730,
	-1, 975,
	119, 1045,
	-2, 1043,
	-1, 977,
	119, 449,
	-2, 1040,
	-1, 978,
	119, 450,
	-2, 1041,
	-1, 1173,
	1, 538,
	55, 538,
	455, 538,
	-2, 544,
	-1, 1232,
	53, 948,
	-2, 1350,
	-1, 1233,
	53, 949,
	-2, 1351,
	-1, 1633,
	74, 544,
	115, 544,
	149, 544,
	152, 544,
	-2, 584,
	-1, 1635,
	250, 697,
	-2, 678,
	-1, 1757,
	74, 544,
	115, 544,
	149, 544,
	152, 544,
	-2, 585,
	-1, 1785,
	250, 697,
	-2, 679,
	-1, 2176,
	54, 559,
	55, 559,
	-2, 544,
	-1, 2180,
	54, 559,
	55, 559,
	-2, 544,
	-1, 2192,
	54, 563,
	55, 563,
	-2, 544,
	-1, 2195,
	54, 564,
	55, 564,
	-2, 544,
}

const yyPrivate = 57344

const yyLast = 21922

var yyAct = [...]int{
	789, 2180, 1235, 2182, 2179, 2187, 2153, 648, 2127, 1829,
	778, 2017, 667, 2098, 2142, 1797, 472, 2079, 1993, 2080,
	1753, 1996, 1971, 533, 85, 646, 855, 296, 1627, 1160,
	1827, 1926, 1828, 1694, 568, 468, 1981, 1519, 88, 1819,
	1409, 85, 309, 1786, 1899, 403, 1818, 1716, 300, 19,
	341, 341, 1515, 592, 307, 1710, 1552, 518, 838, 1713,
	1723, 1719, 1386, 1531, 1524, 1503, 1680, 1520, 1166, 776,
	602, 1559, 1543, 957, 404, 1569, 1570, 1454, 84, 972,
	421, 678, 53, 862, 85, 647, 576, 975, 1416, 958,
	966, 302, 1236, 1319, 773, 657, 1305, 1223, 3, 52,
	967, 299, 12, 297, 6, 831, 731, 1380, 53, 298,
	5, 1174, 791, 363, 1761, 806, 748, 774, 1234, 316,
	316, 347, 1249, 346, 595, 857, 506, 1133, 311, 470,
	19, 835, 1142, 292, 445, 1237, 864, 895, 434, 289,
	420, 807, 808, 577, 395, 560, 765, 456, 313, 81,
	1149, 485, 312, 1844, 1749, 1626, 786, 410, 412, 303,
	960, 594, 348, 53, 418, 523, 80, 2045, 23, 40,
	24, 1145, 546, 1504, 1362, 80, 411, 80, 1381, 343,
	431, 2034, 516, 12, 1369, 6, 66, 825, 540, 505,
	73, 5, 1372, 78, 820, 821, 406, 80, 408, 23,
	40, 24, 1480, 2067, 80, 1656, 532, 382, 41, 531,
	534, 535, 810, 76, 2065, 80, 781, 23, 40, 24,
	547, 500, 76, 368, 76, 396, 534, 535, 728, 416,
	415, 725, 2102, 496, 1924, 1507, 2005, 407, 80, 1927,
	1928, 1929, 1930, 359, 76, 2083, 2084, 544, 1508, 2008,
	1509, 727, 1847, 1628, 785, 1349, 439, 448, 1556, 414,
	832, 1553, 76, 1532, 1533, 1534, 1535, 1389, 1387, 1384,
	1388, 1390, 1147, 1383, 1382, 1389, 1387, 383, 1388, 1390,
	69, 70, 1145, 71, 72, 76, 1898, 1806, 1805, 85,
	438, 1644, 487, 498, 499, 1623, 1802, 486, 1746, 437,
	1704, 497, 85, 2044, 1914, 1701, 1663, 1667, 1669, 1671,
	1673, 1674, 1676, 1555, 1582, 1579, 1580, 1581, 2069, 1705,
	1658, 1659, 1660, 1661, 1642, 1643, 1664, 766, 1645, 2093,
	1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
	1662, 58, 68, 77, 2082, 39, 473, 1904, 1666, 1668,
	1670, 1672, 1675, 768, 2172, 361, 452, 2188, 2107, 413,
	2064, 67, 65, 64, 2019, 358, 357, 2047, 2048, 1893,
	1370, 541, 2114, 2042, 1995, 53, 53, 412, 2163, 1657,
	436, 1982, 1983, 1984, 1986, 1985, 353, 495, 2145, 1702,
	478, 1862, 341, 2015, 2016, 411, 2019, 517, 404, 404,
	404, 1861, 345, 341, 341, 450, 449, 2025, 477, 2071,
	2072, 520, 417, 522, 556, 1888, 2183, 448, 530, 529,
	421, 494, 1455, 598, 598, 2189, 2154, 441, 442, 1536,
	511, 1850, 433, 767, 519, 2003, 730, 545, 573, 1366,
	1196, 1153, 1422, 1227, 1228, 1392, 1393, 1394, 1395, 1528,
	793, 521, 745, 49, 438, 85, 85, 85, 85, 50,
	1624, 316, 1407, 749, 301, 823, 762, 1226, 1227, 1228,
	1721, 1720, 570, 570, 482, 1192, 356, 550, 1224, 1194,
	1193, 726, 341, 341, 438, 341, 352, 2146, 1884, 579,
	824, 508, 1191, 779, 548, 549, 51, 822, 2167, 534,
	535, 384, 385, 341, 341, 763, 526, 1956, 473, 2070,
	534, 535, 2046, 2131, 53, 597, 597, 379, 1510, 341,
	555, 341, 1419, 799, 1360, 53, 1504, 85, 833, 525,
	1359, 580, 582, 408, 581, 1348, 537, 538, 798, 360,
	1342, 815, 510, 443, 1994, 341, 566, 567, 1148, 484,
	1703, 1700, 316, 1168, 780, 1186, 1158, 341, 404, 374,
	341, 1127, 1529, 813, 876, 450, 449, 1363, 733, 79,
	387, 575, 407, 451, 794, 435, 847, 736, 79, 846,
	79, 803, 1665, 913, 591, 723, 341, 341, 854, 85,
	316, 421, 1498, 536, 863, 524, 539, 783, 873, 816,
	79, 578, 788, 2143, 2144, 792, 858, 79, 1889, 1890,
	801, 502, 761, 795, 750, 751, 752, 753, 79, 389,
	388, 784, 1496, 563, 564, 565, 316, 561, 859, 1144,
	800, 777, 802, 769, 376, 787, 2149, 375, 562, 817,
	2140, 79, 1497, 856, 811, 812, 1421, 374, 782, 797,
	1239, 1238, 1544, 839, 930, 2029, 316, 527, 1571, 839,
	839, 585, 586, 587, 588, 589, 373, 849, 1344, 1389,
	1387, 1225, 1388, 1390, 377, 809, 1198, 834, 491, 1143,
	852, 1582, 1579, 1580, 1581, 829, 374, 1576, 1398, 1575,
	1574, 1572, 877, 559, 1131, 804, 805, 1886, 844, 845,
	440, 1885, 830, 848, 1603, 1320, 492, 1460, 850, 841,
	842, 843, 1320, 872, 869, 853, 1957, 1959, 1960, 1961,
	1958, 1378, 376, 740, 741, 375, 851, 1856, 964, 964,
	969, 860, 796, 928, 424, 429, 430, 1244, 931, 932,
	933, 934, 869, 1312, 929, 528, 1573, 863, 1895, 1894,
	977, 411, 937, 1684, 935, 1525, 1528, 1310, 1311, 1309,
	1679, 376, 386, 558, 375, 74, 1879, 2162, 903, 1967,
	939, 2178, 978, 1247, 2159, 2124, 953, 916, 917, 918,
	919, 920, 913, 1248, 489, 870, 871, 872, 869, 870,
	871, 872, 869, 2108, 85, 85, 490, 493, 1605, 2192,
	2054, 2001, 1399, 1754, 2000, 1966, 488, 744, 2161, 412,
	296, 870, 871, 872, 869, 743, 1141, 1188, 1973, 53,
	1951, 1950, 947, 1738, 858, 971, 341, 411, 963, 370,
	1128, 372, 382, 1949, 1965, 390, 369, 367, 366, 378,
	371, 409, 380, 381, 1946, 1940, 859, 341, 1163, 1165,
	1937, 1592, 2160, 970, 1129, 408, 1270, 1577, 1578, 1737,
	956, 1936, 2148, 976, 1845, 1838, 598, 1837, 85, 1529,
	1964, 1125, 1836, 1126, 1522, 1219, 1835, 1221, 1523, 1526,
	1138, 870, 871, 872, 869, 1963, 1189, 1834, 1831, 362,
	1690, 1953, 426, 427, 428, 316, 1245, 1246, 912, 911,
	921, 922, 914, 915, 916, 917, 918, 919, 920, 913,
	1177, 1178, 1179, 1442, 1175, 1152, 1203, 870, 871, 872,
	869, 1962, 1689, 953, 1182, 1688, 1184, 1952, 1687, 1492,
	1527, 734, 2103, 1181, 839, 839, 839, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1183,
	1229, 1329, 1314, 1315, 1195, 809, 1185, 1441, 597, 1214,
	1161, 1162, 1215, 1216, 1217, 1218, 474, 475, 476, 2170,
	2092, 1211, 1180, 1199, 1200, 1201, 1204, 1331, 1205, 870,
	871, 872, 869, 2075, 1242, 1972, 1266, 2036, 1263, 2023,
	1212, 2022, 1265, 1262, 1264, 1268, 1269, 1284, 1954, 2076,
	1267, 921, 922, 914, 915, 916, 917, 918, 919, 920,
	913, 1313, 870, 871, 872, 869, 1947, 1943, 1942, 1307,
	1941, 870, 871, 872, 869, 1240, 1241, 1900, 1243, 1881,
	1846, 1321, 1410, 1324, 1279, 1280, 1281, 1282, 1283, 1752,
	1750, 1289, 1290, 1291, 1292, 911, 921, 922, 914, 915,
	916, 917, 918, 919, 920, 913, 924, 1347, 927, 1323,
	1325, 1326, 1322, 1336, 1697, 2137, 1613, 1541, 1540, 1330,
	1429, 1332, 925, 926, 923, 1539, 912, 911, 921, 922,
	914, 915, 916, 917, 918, 919, 920, 913, 1538, 1335,
	1333, 1155, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1273, 1274, 1275, 1276, 1277, 1278, 1271,
	1272, 912, 911, 921, 922, 914, 915, 916, 917, 918,
	919, 920, 913, 2135, 870, 871, 872, 869, 1350, 1154,
	949, 438, 914, 915, 916, 917, 918, 919, 920, 913,
	749, 1999, 910, 909, 735, 2051, 341, 1465, 2050, 341,
	350, 2030, 438, 1469, 341, 1463, 1425, 1468, 1462, 1375,
	349, 1365, 1917, 870, 871, 872, 869, 1425, 2197, 912,
	911, 921, 922, 914, 915, 916, 917, 918, 919, 920,
	913, 870, 871, 872, 869, 1740, 1916, 1404, 880, 881,
	882, 883, 884, 885, 886, 878, 1915, 341, 2191, 2190,
	584, 1151, 2173, 2169, 2168, 1151, 2157, 85, 85, 1157,
	1741, 1415, 1739, 870, 871, 872, 869, 1377, 1364, 1151,
	2156, 1397, 2130, 2129, 1354, 1736, 1471, 1355, 1911, 2090,
	1357, 912, 911, 921, 922, 914, 915, 916, 917, 918,
	919, 920, 913, 1911, 2085, 1156, 1430, 1353, 1367, 1373,
	1374, 1352, 792, 408, 1207, 2073, 1735, 19, 2062, 2061,
	1709, 1412, 1413, 1361, 1911, 2040, 1911, 2039, 870, 871,
	872, 869, 1376, 912, 911, 921, 922, 914, 915, 916,
	917, 918, 919, 920, 913, 1396, 1633, 1400, 1175, 1615,
	53, 1408, 1922, 1911, 2038, 1911, 2037, 1405, 2028, 2027,
	1558, 1403, 1978, 1979, 1411, 1978, 1977, 1414, 1921, 1920,
	12, 1449, 6, 1557, 870, 871, 872, 869, 5, 1919,
	1918, 1472, 1420, 1911, 1910, 1470, 1423, 1210, 1618, 1909,
	1426, 1425, 1597, 1427, 1428, 1425, 1583, 1452, 1453, 1425,
	1433, 964, 1467, 1484, 964, 1466, 1839, 1487, 1401, 1464,
	1402, 870, 871, 872, 869, 1425, 1432, 863, 1434, 341,
	1210, 1351, 1431, 341, 341, 1490, 1424, 341, 870, 871,
	872, 869, 1436, 1437, 1438, 1439, 1440, 1731, 1444, 1406,
	438, 1328, 1445, 1446, 1447, 1448, 1327, 1491, 1481, 1518,
	928, 764, 85, 1346, 1345, 867, 1451, 1479, 583, 870,
	871, 872, 869, 1486, 481, 1307, 1450, 501, 411, 1425,
	1457, 480, 1459, 1461, 732, 1483, 1340, 1339, 1337, 85,
	1563, 53, 1210, 1209, 1634, 1475, 1473, 1476, 1488, 1151,
	1150, 839, 1499, 1501, 1485, 1730, 1489, 839, 865, 1493,
	1494, 1482, 80, 1729, 1789, 1145, 1542, 482, 1537, 738,
	737, 1611, 1616, 1495, 1474, 1418, 1130, 870, 871, 872,
	869, 1502, 482, 1343, 341, 870, 871, 872, 869, 2193,
	341, 1545, 1546, 870, 871, 872, 869, 479, 1317, 1792,
	1207, 480, 1159, 590, 557, 1787, 2139, 2133, 2115, 76,
	1800, 1801, 1602, 2112, 2110, 2053, 1788, 1610, 1607, 1991,
	1976, 341, 1974, 1969, 1609, 1931, 1712, 1907, 1547, 1548,
	1562, 1563, 1906, 85, 870, 871, 872, 869, 1565, 1905,
	1902, 1892, 1678, 1877, 1903, 1717, 1596, 1601, 1584, 1598,
	1793, 1813, 1812, 570, 1714, 1590, 1591, 593, 1606, 570,
	1724, 1600, 1727, 1692, 341, 1685, 341, 1614, 870, 871,
	872, 869, 1595, 1604, 1617, 1308, 76, 1379, 1608, 1171,
	1631, 1594, 1356, 1338, 1708, 1208, 1197, 1632, 1190, 1549,
	1619, 1622, 955, 954, 870, 871, 872, 869, 1693, 1593,
	952, 951, 1682, 870, 871, 872, 869, 1677, 1681, 950,
	1681, 948, 1683, 53, 1686, 1641, 896, 945, 944, 1691,
	942, 870, 871, 872, 869, 941, 940, 938, 1699, 1799,
	908, 1521, 907, 570, 906, 1695, 905, 904, 902, 901,
	900, 341, 341, 1589, 899, 85, 898, 1588, 897, 894,
	1715, 893, 1718, 892, 891, 438, 1795, 1758, 1587, 890,
	1722, 1725, 1586, 1728, 1518, 870, 871, 872, 869, 870,
	871, 872, 869, 1707, 889, 888, 1698, 887, 1794, 1796,
	870, 871, 872, 869, 870, 871, 872, 869, 746, 729,
	1733, 483, 2120, 1803, 310, 1742, 1134, 1135, 2118, 1747,
	1820, 1822, 2081, 1820, 1820, 1732, 1755, 1783, 1745, 1391,
	1743, 1744, 1206, 438, 2177, 1137, 1807, 1140, 1734, 1585,
	1810, 1811, 1808, 1809, 503, 1139, 758, 1815, 1816, 839,
	1568, 759, 755, 756, 1814, 1567, 1802, 1817, 757, 754,
	1821, 870, 871, 872, 869, 342, 1341, 1599, 1790, 1823,
	1824, 2095, 870, 871, 872, 869, 543, 870, 871, 872,
	869, 1566, 1825, 542, 1176, 1316, 1505, 1833, 912, 911,
	921, 922, 914, 915, 916, 917, 918, 919, 920, 913,
	1512, 1852, 507, 870, 871, 872, 869, 870, 871, 872,
	869, 1842, 1169, 458, 461, 462, 463, 459, 1826, 460,
	464, 760, 819, 462, 463, 326, 1620, 325, 329, 321,
	732, 1161, 1162, 1621, 341, 1848, 1511, 861, 466, 317,
	1239, 1238, 1124, 85, 513, 514, 509, 1855, 2134, 2058,
	336, 2056, 2010, 2009, 2007, 1880, 1934, 1932, 458, 461,
	462, 463, 459, 1803, 460, 464, 1822, 1882, 1751, 1878,
	1706, 1840, 1853, 1854, 1630, 1857, 1858, 1859, 1860, 1629,
	1561, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871,
	1872, 1873, 1874, 1875, 1876, 1935, 453, 1896, 1901, 512,
	349, 350, 1560, 1695, 1417, 1908, 458, 461, 462, 463,
	459, 349, 460, 464, 732, 1435, 1968, 2122, 2121, 465,
	1358, 288, 2121, 2122, 364, 1912, 1, 1285, 515, 742,
	423, 447, 739, 446, 444, 75, 1318, 1933, 1250, 679,
	959, 1948, 965, 438, 473, 1970, 438, 438, 438, 2094,
	2126, 2052, 438, 2097, 666, 649, 2002, 1506, 1923, 2004,
	1925, 1371, 1841, 1913, 1368, 504, 1477, 1478, 1938, 1939,
	53, 691, 2012, 1980, 1944, 1945, 1988, 1989, 1990, 341,
	341, 1987, 1998, 682, 1997, 943, 684, 724, 425, 681,
	1832, 1554, 351, 2013, 422, 365, 1897, 2006, 1625, 1804,
	319, 318, 322, 1726, 1711, 2186, 2176, 2152, 324, 2132,
	85, 2018, 2171, 2020, 2021, 2063, 2113, 438, 2106, 2014,
	328, 1849, 314, 826, 551, 393, 1992, 747, 1530, 1456,
	1385, 1167, 438, 1146, 770, 775, 2026, 315, 2043, 1975,
	354, 1170, 355, 1173, 1172, 1230, 879, 2035, 570, 570,
	912, 911, 921, 922, 914, 915, 916, 917, 918, 919,
	920, 913, 2041, 1306, 856, 946, 936, 600, 2057, 2049,
	2059, 2060, 1458, 2055, 656, 650, 1551, 1550, 1798, 2066,
	2068, 814, 26, 1612, 1334, 467, 868, 973, 680, 87,
	1187, 2074, 974, 2011, 2101, 1843, 2099, 665, 664, 2086,
	2087, 2088, 2089, 2105, 663, 662, 2100, 2031, 661, 457,
	455, 454, 306, 305, 866, 2078, 323, 327, 771, 2104,
	331, 772, 2077, 2032, 333, 334, 335, 2033, 1748, 337,
	338, 2109, 1891, 2111, 1955, 2116, 1887, 1883, 2119, 2117,
	2024, 1757, 1756, 2128, 1784, 1785, 2123, 1791, 1640, 1636,
	2125, 438, 1638, 438, 1639, 1637, 1635, 2091, 1516, 1517,
	779, 2136, 779, 2138, 1514, 1513, 1136, 1132, 961, 968,
	432, 2101, 2151, 790, 82, 304, 1213, 2147, 11, 18,
	438, 2141, 17, 2100, 2150, 16, 2155, 48, 47, 779,
	2158, 46, 45, 15, 8, 44, 2128, 2164, 43, 42,
	14, 13, 38, 36, 35, 34, 33, 32, 2174, 31,
	30, 37, 29, 28, 27, 9, 2175, 57, 56, 55,
	54, 20, 21, 22, 2185, 2184, 63, 62, 61, 60,
	59, 25, 10, 7, 2195, 4, 2196, 2194, 2, 2185,
	0, 0, 0, 0, 0, 0, 0, 0, 1087, 1074,
	0, 1036, 1089, 1010, 1025, 1097, 1026, 1027, 1061, 989,
	1045, 212, 1023, 981, 1013, 1014, 983, 1020, 984, 1011,
	1038, 156, 1009, 1077, 1048, 182, 1095, 0, 0, 242,
	196, 0, 2166, 1041, 1079, 1043, 1066, 1035, 1062, 997,
	1055, 1090, 1024, 1059, 1091, 0, 0, 0, 0, 0,
	474, 475, 476, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 1058, 1084, 1022, 0, 141, 1088, 1042,
	1060, 0, 0, 982, 1056, 0, 987, 990, 1096, 1082,
	1017, 1018, 0, 0, 0, 0, 0, 0, 0, 1039,
	1044, 1063, 1032, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1015, 0, 1052, 0, 0, 0, 992, 988,
	0, 1037, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 1086, 286,
	150, 277, 991, 269, 134, 1123, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 1107, 1108, 1109, 1110,
	1111, 1119, 1120, 0, 996, 0, 1016, 1064, 0, 980,
	1072, 1080, 1034, 271, 1083, 1031, 1030, 1114, 0, 1113,
	246, 1115, 1116, 181, 1078, 1012, 1021, 287, 1019, 232,
	214, 1085, 1051, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 1112, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1121, 0, 1122, 283, 163, 979,
	266, 0, 210, 1075, 985, 995, 993, 1028, 1053, 1054,
	206, 282, 1068, 1071, 1069, 1098, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 986, 0, 243, 264,
	276, 267, 1029, 1003, 1040, 275, 1006, 1004, 1067, 1005,
	1057, 1100, 200, 201, 202, 203, 167, 0, 143, 1049,
	1033, 1101, 1102, 1103, 1104, 1105, 1106, 1008, 1081, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 1073, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 1002, 1007, 1001, 1046, 1047, 1092, 1093,
	1094, 1065, 994, 1076, 998, 1000, 999, 912, 911, 921,
	922, 914, 915, 916, 917, 918, 919, 920, 913, 0,
	0, 0, 0, 0, 0, 0, 1070, 0, 1050, 125,
	0, 183, 1099, 225, 161, 687, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 0, 0, 0, 0,
	0, 658, 0, 0, 0, 156, 0, 0, 0, 182,
	0, 0, 0, 242, 196, 0, 0, 0, 0, 702,
	708, 0, 1117, 1118, 279, 280, 281, 265, 0, 0,
	651, 0, 0, 0, 601, 694, 693, 668, 0, 0,
	0, 138, 669, 0, 676, 670, 674, 673, 671, 672,
	0, 638, 0, 0, 0, 0, 0, 0, 599, 655,
	0, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 653, 0, 0, 0, 0, 688, 0,
	654, 0, 0, 690, 0, 677, 0, 130, 247, 261,
	139, 238, 274, 144, 245, 135, 211, 234, 132, 259,
	244, 193, 176, 177, 131, 0, 229, 154, 168, 151,
	209, 675, 686, 644, 150, 642, 685, 269, 134, 0,
	268, 208, 256, 260, 194, 188, 133, 258, 192, 187,
	180, 158, 172, 221, 186, 222, 173, 198, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 683, 0, 0, 271, 0, 0,
	701, 0, 0, 0, 246, 0, 0, 181, 0, 0,
	0, 645, 0, 232, 214, 711, 0, 219, 230, 184,
	257, 223, 262, 248, 270, 226, 224, 126, 249, 153,
	195, 136, 137, 149, 155, 157, 159, 160, 204, 205,
	217, 237, 250, 251, 252, 152, 145, 231, 146, 170,
	147, 127, 239, 148, 128, 218, 255, 0, 166, 227,
	191, 129, 190, 220, 254, 253, 278, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1287, 1286,
	1288, 283, 163, 0, 266, 699, 210, 710, 695, 696,
	697, 700, 703, 704, 640, 643, 705, 707, 709, 712,
	235, 0, 0, 0, 0, 0, 175, 216, 0, 236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 264, 276, 641, 0, 0, 0, 275,
	0, 0, 0, 0, 0, 689, 200, 201, 202, 203,
	639, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 169, 0, 171, 142, 215, 165,
	273, 178, 0, 207, 174, 240, 179, 185, 228, 272,
	213, 233, 140, 263, 241, 189, 164, 718, 698, 717,
	719, 720, 716, 721, 722, 706, 660, 0, 714, 713,
	715, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 183, 0, 225, 161, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 104, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 692, 0, 0, 279, 280,
	281, 265, 80, 0, 687, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 0, 0, 0,
	658, 0, 0, 0, 156, 0, 0, 0, 182, 0,
	0, 0, 242, 196, 0, 0, 0, 0, 702, 708,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 651,
	0, 0, 0, 601, 694, 693, 668, 0, 0, 0,
	138, 669, 0, 676, 670, 674, 673, 671, 672, 0,
	638, 0, 0, 0, 0, 0, 0, 599, 655, 0,
	659, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 652, 653, 0, 0, 0, 0, 688, 0, 654,
	0, 0, 690, 0, 677, 0, 130, 247, 261, 139,
	238, 274, 144, 245, 135, 211, 234, 132, 259, 244,
	193, 176, 177, 131, 0, 229, 154, 168, 151, 209,
	675, 686, 644, 150, 642, 685, 269, 134, 0, 268,
	208, 256, 260, 194, 188, 133, 258, 192, 187, 180,
	158, 172, 221, 186, 222, 173, 198, 197, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 271, 0, 0, 701,
	0, 0, 0, 246, 0, 0, 181, 0, 0, 0,
	645, 0, 232, 214, 711, 0, 219, 230, 184, 257,
	223, 262, 248, 270, 226, 224, 126, 249, 153, 195,
	136, 137, 149, 155, 157, 159, 160, 204, 205, 217,
	237, 250, 251, 252, 152, 145, 231, 146, 170, 147,
	127, 239, 148, 128, 218, 255, 0, 166, 227, 191,
	129, 190, 220, 254, 253, 278, 284, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 163, 0, 266, 699, 210, 710, 695, 696, 697,
	700, 703, 704, 640, 643, 705, 707, 709, 712, 235,
	0, 0, 0, 0, 0, 175, 216, 0, 236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 264, 276, 641, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 689, 200, 201, 202, 203, 639,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 169, 0, 171, 142, 215, 165, 273,
	178, 0, 207, 174, 240, 179, 185, 228, 272, 213,
	233, 140, 263, 241, 189, 164, 718, 698, 717, 719,
	720, 716, 721, 722, 706, 660, 0, 714, 713, 715,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 183, 79, 225, 161, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 104, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 692, 687, 0, 279, 280, 281,
	265, 0, 0, 0, 0, 212, 0, 0, 0, 0,
	0, 658, 0, 0, 0, 156, 840, 0, 0, 182,
	0, 0, 0, 242, 196, 0, 0, 0, 0, 702,
	708, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	651, 0, 0, 0, 601, 694, 693, 668, 0, 0,
	0, 138, 669, 0, 676, 670, 674, 673, 671, 672,
	0, 638, 0, 0, 0, 0, 0, 0, 599, 655,
	0, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 653, 0, 0, 0, 0, 688, 0,
	654, 0, 0, 837, 0, 677, 0, 130, 247, 261,
	139, 238, 274, 144, 245, 135, 211, 234, 132, 259,
	244, 193, 176, 177, 131, 0, 229, 154, 168, 151,
	209, 675, 686, 644, 150, 642, 685, 269, 134, 0,
	268, 208, 256, 260, 194, 188, 133, 258, 192, 187,
	180, 158, 172, 221, 186, 222, 173, 198, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 683, 0, 0, 271, 0, 0,
	701, 0, 0, 0, 246, 0, 0, 181, 0, 0,
	0, 645, 0, 232, 214, 711, 0, 219, 230, 184,
	257, 223, 262, 248, 270, 226, 224, 126, 249, 153,
	195, 136, 137, 149, 155, 157, 159, 160, 204, 205,
	217, 237, 250, 251, 252, 152, 145, 231, 146, 170,
	147, 127, 239, 148, 128, 218, 255, 0, 166, 227,
	191, 129, 190, 220, 254, 253, 278, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 163, 0, 266, 699, 210, 710, 695, 696,
	697, 700, 703, 704, 640, 643, 705, 707, 709, 712,
	235, 0, 0, 0, 0, 0, 175, 216, 0, 236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 264, 276, 641, 0, 0, 0, 275,
	0, 0, 0, 0, 0, 689, 200, 201, 202, 203,
	639, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 169, 0, 171, 142, 215, 165,
	273, 178, 0, 207, 174, 240, 179, 185, 228, 272,
	213, 233, 140, 263, 241, 189, 164, 718, 698, 717,
	719, 720, 716, 721, 722, 706, 660, 0, 714, 713,
	715, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 183, 0, 225, 161, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 104, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 692, 687, 0, 279, 280,
	281, 265, 0, 0, 0, 0, 212, 0, 0, 0,
	0, 0, 658, 0, 0, 0, 156, 2165, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	702, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 651, 0, 0, 0, 601, 694, 693, 668, 0,
	0, 0, 138, 669, 0, 676, 670, 674, 673, 671,
	672, 0, 638, 0, 0, 0, 0, 0, 0, 599,
	655, 0, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 652, 653, 0, 0, 0, 0, 688,
	0, 654, 0, 0, 690, 0, 677, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 675, 686, 644, 150, 642, 685, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 683, 0, 0, 271, 0,
	0, 701, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 645, 0, 232, 214, 711, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 699, 210, 710, 695,
	696, 697, 700, 703, 704, 640, 643, 705, 707, 709,
	712, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 641, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 689, 200, 201, 202,
	203, 639, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 0, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 718, 698,
	717, 719, 720, 716, 721, 722, 706, 660, 0, 714,
	713, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 104, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 692, 687, 0, 279,
	280, 281, 265, 0, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 658, 0, 0, 0, 156, 840, 0,
	0, 182, 0, 0, 0, 242, 196, 0, 0, 0,
	0, 702, 708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 651, 0, 0, 0, 601, 694, 693, 668,
	0, 0, 0, 138, 669, 0, 676, 670, 674, 673,
	671, 672, 0, 638, 0, 0, 0, 0, 0, 0,
	599, 655, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 653, 0, 0, 0, 0,
	688, 0, 654, 0, 0, 690, 0, 677, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 675, 686, 644, 150, 642, 685, 269,
	134, 0, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 683, 0, 0, 271,
	0, 0, 701, 0, 0, 0, 246, 0, 0, 181,
	0, 0, 0, 645, 0, 232, 214, 711, 0, 219,
	230, 184, 257, 223, 262, 248, 270, 226, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 699, 210, 710,
	695, 696, 697, 700, 703, 704, 640, 643, 705, 707,
	709, 712, 235, 0, 0, 0, 0, 0, 175, 216,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 264, 276, 641, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 689, 200, 201,
	202, 203, 639, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 0, 207, 174, 240, 179, 185,
	228, 272, 213, 233, 140, 263, 241, 189, 164, 718,
	698, 717, 719, 720, 716, 721, 722, 706, 660, 0,
	714, 713, 715, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 183, 0, 225,
	161, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 104, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 692, 0, 0,
	279, 280, 281, 265, 687, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 0, 0, 0,
	658, 0, 0, 0, 156, 0, 0, 0, 182, 0,
	0, 0, 242, 196, 0, 0, 0, 0, 702, 708,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 651,
	0, 0, 0, 601, 694, 693, 668, 0, 0, 0,
	138, 669, 0, 676, 670, 674, 673, 671, 672, 0,
	638, 0, 0, 0, 0, 0, 0, 599, 655, 0,
	659, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 652, 653, 0, 0, 0, 0, 688, 0, 654,
	0, 0, 690, 0, 677, 0, 130, 247, 261, 139,
	238, 274, 144, 245, 135, 211, 234, 132, 259, 244,
	193, 176, 177, 131, 0, 229, 154, 168, 151, 209,
	675, 686, 644, 150, 642, 685, 269, 134, 0, 268,
	208, 256, 260, 194, 188, 133, 258, 192, 187, 180,
	158, 172, 221, 186, 222, 173, 198, 197, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 683, 0, 0, 271, 0, 0, 701,
	0, 0, 0, 246, 0, 0, 181, 0, 0, 0,
	645, 0, 232, 214, 711, 0, 219, 230, 184, 257,
	223, 262, 248, 270, 226, 224, 126, 249, 153, 195,
	136, 137, 149, 155, 157, 159, 160, 204, 205, 217,
	237, 250, 251, 252, 152, 145, 231, 146, 170, 147,
	127, 239, 148, 128, 218, 255, 0, 166, 227, 191,
	129, 190, 220, 254, 253, 278, 284, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 163, 0, 266, 699, 210, 710, 695, 696, 697,
	700, 703, 704, 640, 643, 705, 707, 709, 712, 235,
	0, 0, 0, 0, 0, 175, 216, 0, 236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 264, 276, 641, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 689, 200, 201, 202, 203, 639,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 169, 0, 171, 142, 215, 165, 273,
	178, 0, 207, 174, 240, 179, 185, 228, 272, 213,
	233, 140, 263, 241, 189, 164, 718, 698, 717, 719,
	720, 716, 721, 722, 706, 660, 0, 714, 713, 715,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 183, 0, 225, 161, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 104, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 692, 687, 0, 279, 280, 281,
	265, 0, 0, 0, 0, 212, 0, 0, 0, 0,
	0, 658, 0, 0, 0, 156, 0, 0, 0, 182,
	0, 0, 0, 242, 196, 0, 0, 0, 0, 702,
	708, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	651, 0, 0, 0, 601, 694, 693, 668, 0, 0,
	0, 138, 669, 0, 676, 670, 674, 673, 671, 672,
	0, 638, 0, 0, 0, 0, 0, 0, 599, 655,
	0, 659, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 653, 596, 0, 0, 0, 688, 0,
	654, 0, 0, 690, 0, 677, 0, 130, 247, 261,
	139, 238, 274, 144, 245, 135, 211, 234, 132, 259,
	244, 193, 176, 177, 131, 0, 229, 154, 168, 151,
	209, 675, 686, 644, 150, 642, 685, 269, 134, 0,
	268, 208, 256, 260, 194, 188, 133, 258, 192, 187,
	180, 158, 172, 221, 186, 222, 173, 198, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 683, 0, 0, 271, 0, 0,
	701, 0, 0, 0, 246, 0, 0, 181, 0, 0,
	0, 645, 0, 232, 214, 711, 0, 219, 230, 184,
	257, 223, 262, 248, 270, 226, 224, 126, 249, 153,
	195, 136, 137, 149, 155, 157, 159, 160, 204, 205,
	217, 237, 250, 251, 252, 152, 145, 231, 146, 170,
	147, 127, 239, 148, 128, 218, 255, 0, 166, 227,
	191, 129, 190, 220, 254, 253, 278, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 163, 0, 266, 699, 210, 710, 695, 696,
	697, 700, 703, 704, 640, 643, 705, 707, 709, 712,
	235, 0, 0, 0, 0, 0, 175, 216, 0, 236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 264, 276, 641, 0, 0, 0, 275,
	0, 0, 0, 0, 0, 689, 200, 201, 202, 203,
	639, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 169, 0, 171, 142, 215, 165,
	273, 178, 0, 207, 174, 240, 179, 185, 228, 272,
	213, 233, 140, 263, 241, 189, 164, 718, 698, 717,
	719, 720, 716, 721, 722, 706, 660, 0, 714, 713,
	715, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 183, 0, 225, 161, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 104, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 692, 687, 0, 279, 280,
	281, 265, 0, 0, 0, 0, 212, 0, 0, 0,
	0, 0, 658, 0, 0, 0, 156, 0, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	702, 708, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 651, 0, 0, 0, 601, 694, 693, 668, 0,
	0, 0, 138, 669, 0, 676, 670, 674, 673, 671,
	672, 0, 638, 0, 0, 0, 0, 0, 0, 599,
	655, 0, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 652, 653, 0, 0, 0, 0, 688,
	0, 654, 0, 0, 690, 0, 677, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 675, 686, 644, 150, 642, 685, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 683, 0, 0, 271, 0,
	0, 701, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 645, 0, 232, 214, 711, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 699, 210, 710, 695,
	696, 697, 700, 703, 704, 640, 643, 705, 707, 709,
	712, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 641, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 689, 200, 201, 202,
	203, 639, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 0, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 718, 698,
	717, 719, 720, 716, 721, 722, 706, 660, 0, 714,
	713, 715, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 104, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 692, 687, 0, 279,
	280, 281, 265, 0, 0, 0, 0, 212, 0, 1231,
	0, 0, 0, 658, 0, 0, 0, 156, 0, 0,
	0, 182, 0, 0, 0, 242, 196, 0, 0, 0,
	0, 702, 708, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 651, 0, 0, 0, 601, 694, 693, 668,
	0, 0, 0, 138, 669, 0, 676, 670, 674, 673,
	671, 672, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 655, 0, 659, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 652, 653, 0, 0, 0, 0,
	688, 0, 654, 0, 0, 690, 0, 677, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 675, 686, 644, 150, 642, 685, 269,
	134, 0, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 683, 0, 0, 271,
	0, 0, 701, 0, 0, 0, 246, 0, 0, 181,
	0, 0, 0, 645, 0, 232, 214, 711, 0, 219,
	230, 184, 257, 223, 262, 248, 270, 226, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 1232,
	1233, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 699, 210, 710,
	695, 696, 697, 700, 703, 704, 640, 643, 705, 707,
	709, 712, 235, 0, 0, 0, 0, 0, 175, 216,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 264, 276, 641, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 689, 200, 201,
	202, 203, 639, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 0, 207, 174, 240, 179, 185,
	228, 272, 213, 233, 140, 263, 241, 189, 164, 718,
	698, 717, 719, 720, 716, 721, 722, 706, 660, 0,
	714, 713, 715, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 183, 0, 225,
	161, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 104, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 692, 687, 0,
	279, 280, 281, 265, 0, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 658, 0, 0, 0, 156, 0,
	0, 0, 182, 0, 0, 0, 242, 196, 0, 0,
	0, 0, 702, 708, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 0, 0, 0, 601, 694, 693,
	668, 0, 0, 0, 138, 669, 0, 676, 670, 674,
	673, 671, 672, 0, 638, 0, 0, 0, 0, 0,
	0, 0, 655, 0, 659, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 652, 653, 0, 0, 0,
	0, 688, 0, 654, 0, 0, 690, 0, 677, 0,
	130, 247, 261, 139, 238, 274, 144, 245, 135, 211,
	234, 132, 259, 244, 193, 176, 177, 131, 0, 229,
	154, 168, 151, 209, 675, 686, 644, 150, 642, 685,
	269, 134, 0, 268, 208, 256, 260, 194, 188, 133,
	258, 192, 187, 180, 158, 172, 221, 186, 222, 173,
	198, 197, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 683, 0, 0,
	271, 0, 0, 701, 0, 0, 0, 246, 0, 0,
	181, 0, 0, 0, 645, 0, 232, 214, 711, 0,
	219, 230, 184, 257, 223, 262, 248, 270, 226, 224,
	126, 249, 153, 195, 136, 137, 149, 155, 157, 159,
	160, 204, 205, 217, 237, 250, 251, 252, 152, 145,
	231, 146, 170, 147, 127, 239, 148, 128, 218, 255,
	0, 166, 227, 191, 129, 190, 220, 254, 253, 278,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 163, 0, 266, 699, 210,
	710, 695, 696, 697, 700, 703, 704, 640, 643, 705,
	707, 709, 712, 235, 0, 0, 0, 0, 0, 175,
	216, 0, 236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 264, 276, 641, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 689, 200,
	201, 202, 203, 639, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 169, 0, 171,
	142, 215, 165, 273, 178, 0, 207, 174, 240, 179,
	185, 228, 272, 213, 233, 140, 263, 241, 189, 164,
	718, 698, 717, 719, 720, 716, 721, 722, 706, 660,
	0, 714, 713, 715, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 183, 0,
	225, 161, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 104, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 692, 687,
	0, 279, 280, 281, 265, 0, 0, 0, 0, 212,
	0, 0, 0, 0, 0, 658, 0, 0, 0, 156,
	0, 0, 0, 182, 0, 0, 0, 242, 196, 0,
	0, 0, 0, 702, 708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 694,
	693, 668, 0, 0, 0, 138, 669, 0, 676, 670,
	674, 673, 671, 672, 0, 638, 0, 0, 0, 0,
	0, 0, 599, 655, 0, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 652, 653, 0, 0,
	0, 0, 688, 0, 654, 0, 0, 690, 0, 677,
	0, 130, 247, 261, 139, 238, 274, 144, 245, 135,
	211, 234, 132, 259, 244, 193, 176, 177, 131, 0,
	229, 154, 168, 151, 209, 675, 686, 644, 150, 642,
	685, 269, 134, 0, 268, 208, 256, 260, 194, 188,
	133, 258, 192, 187, 180, 158, 172, 221, 186, 222,
	173, 198, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 683, 0,
	0, 271, 0, 0, 701, 0, 0, 0, 246, 0,
	0, 181, 0, 0, 0, 645, 0, 232, 214, 711,
	0, 219, 230, 184, 257, 223, 262, 248, 270, 226,
	224, 126, 249, 153, 195, 136, 137, 149, 155, 157,
	159, 160, 204, 205, 217, 237, 250, 251, 252, 152,
	145, 231, 146, 170, 147, 127, 239, 148, 128, 218,
	255, 0, 166, 227, 191, 129, 190, 220, 254, 253,
	278, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 163, 0, 266, 699,
	210, 710, 695, 696, 697, 700, 703, 704, 640, 643,
	705, 707, 709, 712, 235, 0, 0, 0, 0, 0,
	175, 216, 0, 236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 264, 276, 641,
	0, 0, 0, 275, 0, 0, 0, 0, 0, 689,
	200, 201, 202, 203, 639, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 169, 0,
	171, 142, 215, 165, 273, 178, 0, 207, 174, 240,
	179, 185, 228, 272, 213, 233, 140, 263, 241, 189,
	164, 718, 698, 717, 719, 720, 716, 721, 722, 706,
	660, 0, 714, 713, 715, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 183,
	0, 225, 161, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 104, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 637, 692,
	0, 0, 279, 280, 281, 265, 326, 0, 325, 329,
	321, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	317, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 336, 182, 0, 0, 0, 242, 196, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	340, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 247, 261, 139, 238, 274, 144, 245, 135, 211,
	234, 132, 259, 244, 193, 176, 177, 131, 0, 229,
	154, 168, 151, 209, 0, 0, 286, 150, 277, 0,
	269, 134, 0, 268, 208, 256, 260, 194, 188, 133,
	258, 192, 187, 180, 158, 172, 221, 186, 222, 173,
	198, 197, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 319, 318, 322, 0, 0, 0, 0, 0, 324,
	271, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	181, 328, 0, 0, 287, 0, 232, 214, 0, 0,
	219, 230, 184, 257, 223, 320, 248, 270, 226, 344,
	126, 249, 153, 195, 136, 137, 149, 155, 157, 159,
	160, 204, 205, 217, 237, 250, 251, 252, 152, 145,
	231, 146, 170, 147, 127, 239, 148, 128, 218, 255,
	0, 166, 227, 191, 129, 190, 220, 254, 253, 278,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 163, 0, 266, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 206, 282, 0,
	0, 0, 0, 235, 0, 0, 0, 323, 327, 330,
	216, 331, 332, 0, 0, 333, 334, 335, 0, 0,
	337, 338, 0, 0, 0, 243, 264, 276, 267, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 0, 200,
	201, 202, 203, 167, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 169, 0, 171,
	142, 215, 165, 273, 178, 0, 207, 174, 240, 179,
	185, 228, 272, 213, 233, 140, 263, 241, 189, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 183, 0,
	225, 161, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 0, 0,
	0, 279, 280, 281, 265, 326, 0, 325, 329, 321,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 317,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	336, 182, 0, 0, 0, 242, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 340,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 0, 0, 286, 150, 277, 0, 269,
	134, 0, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 318, 322, 0, 0, 0, 0, 0, 324, 271,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 181,
	328, 0, 0, 287, 0, 232, 214, 0, 0, 219,
	230, 184, 257, 223, 320, 248, 270, 226, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 206, 282, 0, 0,
	0, 0, 235, 0, 0, 0, 323, 327, 330, 216,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 337,
	338, 0, 0, 0, 243, 264, 276, 267, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 200, 201,
	202, 203, 167, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 0, 207, 174, 240, 179, 185,
	228, 272, 213, 233, 140, 263, 241, 189, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 183, 0, 225,
	161, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 0, 0, 0,
	279, 280, 281, 265, 80, 0, 23, 40, 24, 0,
	0, 0, 0, 0, 0, 0, 212, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 0, 0, 286, 150, 277, 0, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 287, 0, 232, 214, 0, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 206, 282, 0, 0, 0,
	0, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 267, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 200, 201, 202,
	203, 291, 293, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 0, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 79, 225, 161,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 212, 0, 0, 279,
	280, 281, 265, 0, 0, 0, 156, 0, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 1525, 1528, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 0, 0, 286, 150, 277, 0, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1529, 271, 0,
	0, 0, 1522, 0, 1521, 246, 1523, 1526, 181, 0,
	0, 0, 287, 0, 232, 214, 0, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 1527, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 206, 282, 0, 0, 0,
	0, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 267, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 200, 201, 202,
	203, 167, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 0, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 0, 0, 212, 279,
	280, 281, 265, 874, 0, 0, 0, 0, 156, 0,
	0, 0, 182, 0, 0, 0, 242, 196, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	875, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 870, 871, 872,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 247, 261, 139, 238, 274, 144, 245, 135, 211,
	234, 132, 259, 244, 193, 176, 177, 131, 0, 229,
	154, 168, 151, 209, 0, 0, 286, 150, 277, 0,
	269, 134, 0, 268, 208, 256, 260, 194, 188, 133,
	258, 192, 187, 180, 158, 172, 221, 186, 222, 173,
	198, 197, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	181, 0, 0, 0, 287, 0, 232, 214, 0, 0,
	219, 230, 184, 257, 223, 262, 248, 270, 226, 224,
	126, 249, 153, 195, 136, 137, 149, 155, 157, 159,
	160, 204, 205, 217, 237, 250, 251, 252, 152, 145,
	231, 146, 170, 147, 127, 239, 148, 128, 218, 255,
	0, 166, 227, 191, 129, 190, 220, 254, 253, 278,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 163, 0, 266, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 206, 282, 0,
	0, 0, 0, 235, 0, 0, 0, 0, 0, 175,
	216, 0, 236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 264, 276, 267, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 0, 200,
	201, 202, 203, 167, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 169, 0, 171,
	142, 215, 165, 273, 178, 0, 207, 174, 240, 179,
	185, 228, 272, 213, 233, 140, 263, 241, 189, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 183, 0,
	225, 161, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 212, 0,
	0, 279, 280, 281, 265, 0, 0, 0, 156, 392,
	0, 0, 182, 0, 0, 0, 242, 196, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 400, 401,
	0, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 405, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 247, 261, 139, 238, 274, 144, 245, 135, 211,
	234, 132, 259, 244, 193, 176, 177, 131, 0, 229,
	154, 168, 151, 209, 0, 0, 286, 150, 277, 376,
	269, 134, 375, 268, 208, 256, 260, 194, 188, 133,
	258, 192, 187, 180, 158, 172, 221, 186, 222, 173,
	198, 197, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	181, 0, 0, 0, 287, 0, 232, 214, 0, 0,
	219, 230, 184, 257, 223, 262, 248, 270, 391, 224,
	126, 249, 153, 195, 136, 137, 149, 155, 157, 159,
	160, 204, 205, 217, 237, 250, 251, 252, 152, 145,
	231, 146, 170, 147, 127, 239, 148, 128, 218, 255,
	0, 166, 227, 191, 129, 190, 220, 254, 253, 278,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 163, 0, 266, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 206, 282, 0,
	0, 0, 0, 235, 0, 0, 0, 0, 0, 175,
	216, 0, 236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 264, 276, 267, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 394, 200,
	201, 202, 203, 167, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 169, 0, 171,
	142, 215, 165, 273, 178, 0, 402, 397, 398, 179,
	185, 228, 272, 213, 233, 140, 263, 241, 399, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 183, 0,
	225, 161, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 80, 0,
	0, 279, 280, 281, 265, 0, 0, 0, 0, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 962, 0, 86,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 79, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	400, 401, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 405, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 376, 269, 134, 375, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 402, 397,
	398, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	399, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 552, 279, 280, 281, 265, 0, 0, 0,
	156, 553, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 340, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 554,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 828, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 340, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 827,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 574, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 572, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 571, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 569, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 572, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 571, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2096, 0, 86,
	694, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 572, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 571, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 572, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1696, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 572, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	1500, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 1202, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 572, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	694, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1830, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 572, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 308, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 1220, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 340, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 1164, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 572, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	818, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 83,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 0, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	0, 0, 212, 279, 280, 281, 265, 469, 0, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 474, 475, 476, 471, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 0, 0,
	286, 150, 277, 0, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 287, 0,
	232, 214, 0, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 206, 282, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 267, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 200, 201, 202, 203, 167, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 0,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	0, 182, 0, 0, 0, 242, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 474, 475, 476, 471,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 281, 265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 0, 0, 286, 150, 277, 0, 269,
	134, 0, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 181,
	0, 0, 0, 287, 0, 232, 214, 0, 0, 219,
	230, 184, 257, 223, 262, 248, 270, 226, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 206, 282, 0, 0,
	0, 0, 235, 0, 0, 0, 0, 0, 175, 216,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 264, 276, 267, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 200, 201,
	202, 203, 167, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 0, 207, 174, 240, 179, 185,
	228, 272, 213, 233, 140, 263, 241, 189, 164, 0,
	0, 0, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 183, 0, 225,
	161, 474, 475, 476, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 281, 265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 0, 0,
	286, 150, 277, 0, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 287, 0,
	232, 214, 0, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 1270, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 206, 282, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 267, 0, 0, 0, 275, 0, 1781, 0,
	0, 0, 0, 200, 201, 202, 203, 167, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 1176, 171, 142, 215, 165, 273, 178, 0,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 0, 0, 2181, 1781, 0, 0,
	0, 0, 0, 0, 1266, 0, 1263, 1763, 0, 0,
	1265, 1262, 1264, 1268, 1269, 0, 0, 0, 1267, 0,
	0, 1176, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1781, 0, 0, 0, 279, 280, 281, 265, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
	1261, 1273, 1274, 1275, 1276, 1277, 1278, 1271, 1272, 0,
	1763, 0, 1767, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1771, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1760, 0, 0, 0, 1762, 1764, 1766,
	0, 1768, 1769, 1770, 1772, 1773, 1774, 1776, 1777, 1778,
	1779, 1767, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1771, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1782, 0, 0, 0, 0,
	0, 0, 1760, 0, 0, 0, 1762, 1764, 1766, 0,
	1768, 1769, 1770, 1772, 1773, 1774, 1776, 1777, 1778, 1779,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1780,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1782, 1767, 1759, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1771, 0, 0, 0,
	0, 1775, 0, 0, 0, 0, 0, 0, 1765, 0,
	0, 0, 0, 0, 0, 0, 1760, 0, 1780, 0,
	1762, 1764, 1766, 0, 1768, 1769, 1770, 1772, 1773, 1774,
	1776, 1777, 1778, 1779, 0, 1759, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1775, 0, 0, 0, 0, 0, 0, 1765, 1782, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1780, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1759,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1775, 0, 0, 0, 0, 0,
	0, 1765,
}

var yyPact = [...]int{
	160, -1000, -306, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19572, 1870, -1000, 8378, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 276,
	16562, 20002, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7929,
	7480, 176, -1000, 1856, -1000, -1000, -1000, -1000, 168, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 485, -41, 376,
	380, 490, 490, 9670, 1856, 1436, 171, 41, -1000, 19142,
	714, 160, 222, 20002, -1000, 456, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16562, 20002,
	-79, 611, -1000, 191, 209, 232, 454, -1000, -1000, -1000,
	-1000, 20002, 1826, -1000, -1000, -1000, 1775, 20434, 171, -1000,
	1427, 1393, -1000, -1000, 1618, -1000, 93, 2, -17, 488,
	-1000, -1000, 203, -1000, -1000, -1000, -1000, -1000, 43, -1000,
	1, -1000, -10, -1000, -1000, -1000, -124, -1000, -1000, -1000,
	-1000, -1000, 1357, 420, 1654, -179, 1735, 1789, 1436, 1843,
	1784, -6, 241, 241, 262, 241, -1000, -1000, -1000, -1000,
	-1000, -1000, 498, 498, 646, 202, -1000, -1000, -139, -140,
	498, 498, -140, 0, -1000, 1713, 1706, -1000, -1000, -1000,
	-1000, -1000, -1000, 244, -1000, -189, -1000, 366, -1000, 347,
	-1000, 10972, 196, 1430, 674, -1000, 538, 20002, 20002, 20002,
	538, 538, 12262, 11832, 452, -1000, 1789, 1436, -1000, 1856,
	1856, 1343, 1145, 244, 244, 244, 244, 244, 1429, 20002,
	-1000, 1484, 5267, 5267, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 198, 1616, -1000, 20002, 1778, -1000, 449, 866,
	1084, -1000, -1000, 191, 1395, -1000, 652, -1000, -1000, -1000,
	-1000, 20002, 1615, 20002, 16562, 16562, 16562, 16562, -1000, 1679,
	1672, -1000, 1673, 1666, 1741, 20002, -1000, -1000, -1000, 20789,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1336, 1856, 139,
	1779, 15702, 17852, 20002, 15702, -1000, -1000, -1000, -1000, -1000,
	-129, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 139, 15702, 15702, -83, -1000, -1000, -294, 1735, 5708,
	-1000, -1000, 5708, -1000, -1000, 260, 241, -1000, 15702, 651,
	17852, 909, 20002, 1862, 6590, 1862, 20002, -1000, -1000, 498,
	498, -1000, 646, 646, -1000, -1000, -133, 1862, 1862, -123,
	20002, 241, -1000, -1000, 18712, 1758, -168, 371, 336, 362,
	-1000, -1000, -182, -1000, -1000, 1408, 11402, 10542, 200, 15702,
	3497, -1000, -1000, 538, 538, 538, 3497, 3497, 464, -1000,
	-1000, -1000, -1000, -1000, -1000, 20002, 1735, -1000, -1000, -1000,
	1789, 1735, 1789, -1000, -1000, 15702, 17852, 20002, 20002, 21144,
	20002, 1429, 1774, 20002, 1384, -1000, -1000, 9240, 445, 5708,
	1099, 1604, -1000, -1000, 1602, 1601, 1586, 1581, 1580, 1578,
	1576, -1000, 1543, -1000, -1000, 1575, 1573, 1571, 1567, -1000,
	-1000, -1000, -1000, -1000, -1000, 1566, -1000, -1000, -1000, 1565,
	1543, -1000, -1000, 1564, 1563, 1561, 1559, 1557, -1000, -1000,
	-1000, -1000, -1000, -1000, 1083, 1082, 975, -1000, -1000, -1000,
	-1000, 3056, 6590, 6590, 6590, 6590, -1000, -1000, 1503, 5708,
	1554, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7031, -1000, 1553,
	1552, 1547, 1545, 1544, 1543, 1538, 1070, 1536, 1528, 1527,
	6590, 1520, 1519, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1384, -1000, -289, -1000, 10112, 20002, 20002,
	-1000, 1845, 5708, 2203, -1000, 1783, -1000, 191, 72, -1000,
	-1000, -1000, -1000, -1000, -1000, 442, 20002, 1402, -1000, 605,
	1626, 1645, 1626, -1000, -1000, -1000, -1000, 1665, -1000, 1657,
	-1000, -1000, 1484, -1000, -1000, 572, -1000, -1000, -1000, -1000,
	-1000, 1, -10, 1391, -1000, -47, 92, -1000, 1375, -1000,
	-1000, -1000, 572, 1391, 250, 1069, 1031, -1000, 1191, 437,
	1428, -1000, 935, 18282, 20002, 228, 1748, 1408, 1508, 1715,
	-1000, -1000, -1000, 1862, 1862, 1862, 498, 21144, 646, 20002,
	646, -1000, -1000, 646, -1000, 436, 20002, 228, 1515, -1000,
	-1000, -1000, 365, 345, 350, 17852, 249, -1000, -1000, 1408,
	-1000, -1000, -1000, 1513, 587, -1000, -1000, 6590, -1000, 734,
	-1000, 3497, 3497, 3497, -1000, -1000, 14412, -1000, -1000, 1735,
	-1000, 1735, 1391, 1408, 1642, 1426, -1000, -1000, -1000, -1000,
	-1000, 1512, 1368, -1000, 1862, 5267, -1000, 16562, -1000, 5708,
	5708, 5708, 5708, -1000, 17422, -1000, 16992, -1000, 397, 6149,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5708, 1780, 1780,
	1780, 5708, 630, 5708, 5708, -1000, 718, 21246, 1780, 1780,
	1780, 1780, 1780, -1000, 2607, 1780, 1780, 1780, 1780, -1000,
	-1000, 6590, 6590, 6590, 6590, 6590, 6590, 6590, 6590, 6590,
	6590, 6590, 6590, 1502, 660, 6590, 6590, 6590, 1145, 1690,
	1424, -1000, -1000, -1000, -1000, -1000, 627, 734, 5708, 708,
	5708, 5708, 5708, -1000, 1331, 1326, -1000, -1000, 5708, -1000,
	5708, 6590, 5708, -1000, 1780, 1029, 1862, 1364, -1000, 1510,
	-1000, 1362, 1693, -1000, 421, 1409, -1000, 579, 1339, -1000,
	1789, 734, -1000, 416, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -80, -1000, -1000, 20002, 1306, 1845,
	20002, 5708, -1000, -1000, 5708, 1509, -1000, 5708, -1000, -1000,
	-1000, -1000, 1869, 411, 405, 15702, -1000, 158, 15702, -1000,
	-1000, 20002, 248, 15702, -8, -157, 5708, 5708, 20002, 5708,
	-1000, -1000, -1000, 1484, 640, 1504, -231, -1000, -53, -1000,
	1639, 179, -1000, 1715, -1000, 573, -1000, -1000, -1000, -1000,
	1862, -1000, 498, -1000, 498, 646, 20002, -1000, -1000, -231,
	1324, -1000, -1000, -1000, 332, 1408, 15702, 972, 200, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 20002, 20002, 160, -1000,
	20002, 1851, -1000, 1401, 1733, -1000, 634, 634, 662, -1000,
	-1000, 403, -1000, -1000, 372, -1000, -1000, -1000, -1000, -1000,
	1503, -1000, -1000, -1000, 1311, 1355, 734, 5708, -1000, -1000,
	5708, 5708, 1047, 5708, 1307, 1301, 1285, -1000, 1303, 1864,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5708,
	5708, 5708, 5708, 5708, 902, 4826, -1000, -1000, -1000, 5708,
	5708, 5708, 5708, 898, 943, -1000, 670, 670, 471, 471,
	471, 471, 471, 1027, 1027, -1000, -1000, -1000, 3056, 1502,
	6590, 6590, 6590, 217, 2486, 1909, -1000, 5708, 620, -1000,
	5708, 1104, -1000, 1294, 1136, 1290, 1287, -1000, -1000, 1102,
	1270, 1172, 1266, 5708, 1400, -1000, 1851, -289, 4379, 169,
	20002, -289, 20002, 20002, 4379, -1000, 20002, -1000, 2203, 864,
	-1000, -1000, 1789, -1000, 734, 734, 20002, 734, 15702, 515,
	535, -1000, 13982, 15702, -1000, -1000, 15702, 117, 1719, -1000,
	-1000, -108, -90, 734, 734, 399, -1000, 1773, 1736, 8808,
	-1000, -66, -1000, -1000, -1000, 349, -1000, 1028, 1015, 1008,
	1007, 20002, -1000, -1000, -1000, -1000, -1000, 563, 563, 563,
	-1000, 1862, 1862, 498, -1000, -15, -61, -1000, 1391, 1258,
	-1000, -1000, -1000, -1000, 1245, -1000, 1848, 1824, 16562, 16132,
	-1000, -1000, -1000, -1000, -1000, 5708, 1686, 1660, 1655, 542,
	1281, -1000, -1000, -1000, -1000, 5708, 1644, 1587, 1583, 1572,
	1568, -1000, 5708, 5708, 840, 1524, 1506, 1497, 1471, 1277,
	-1000, 217, 2486, 1647, -1000, 6590, 6590, 1437, 616, -1000,
	5708, 712, 542, 13122, -1000, 5708, -1000, -1000, -1000, 13122,
	-1000, 6590, -1000, 1396, 1006, 1848, -1000, 1234, 1398, -1000,
	-289, -1000, -1000, 1364, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1273, 1391, -1000, -1000, -1000, -1000,
	15702, 1770, 228, -1000, -4, 272, -296, -85, 1823, 1818,
	20002, 171, 20002, 1231, 1370, -1000, -1000, -1000, 175, 680,
	-1000, 20002, 684, 373, 241, 373, 677, 1492, -1000, -1000,
	-66, -1000, 863, 860, 857, 825, -45, -1000, -1000, -1000,
	-1000, -1000, 1490, 13122, -1000, 13552, 1004, -1000, -1000, 1862,
	-1000, -15, -1000, 274, 271, 44, 1814, -1000, -1000, -1000,
	5708, 5708, 1733, -1000, -1000, 734, -1000, -1000, -1000, 1205,
	-1000, 1453, 1481, -1000, 1453, 1472, 1453, 335, 335, 1487,
	1487, 1489, 1487, -1000, 1388, -1000, -1000, -1000, -1000, -1000,
	1380, 1322, 5708, -1000, -1000, -1000, -1000, -1000, -1000, 6590,
	-1000, -1000, -1000, -1000, 734, 5708, 1201, 1170, 804, 1157,
	1130, -1000, 1155, -1000, -1000, -1000, 4379, 1364, -1000, -1000,
	15702, 15702, -236, -2, 20002, -298, 980, -1000, 1812, 979,
	743, -1000, 1484, 21586, 8808, 1415, -28, -1000, -1000, -1000,
	1453, -1000, 1481, 1481, 1453, 1453, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1479, 1478, -1000, 1453, 1472,
	1472, 1453, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20002,
	20002, -1000, 20002, 20002, 241, 5708, -1000, -1000, -1000, -1000,
	-1000, -1000, 15272, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 823, -1000, -1000, -1000, 972, 734, 1355, -1000,
	-1000, -1000, 822, -1000, 811, -1000, -1000, 807, -1000, -1000,
	-1000, -1000, -1000, -1000, 802, -1000, -1000, 800, -1000, -1000,
	-1000, -1000, 1291, -1000, 734, -1000, -1000, -1000, 5708, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -123, -300, 799,
	-1000, 970, -88, -1000, -1000, 1772, 221, 21512, -1000, 563,
	563, 612, 563, 563, 563, 563, 174, 164, 563, 563,
	563, 563, 563, 563, 563, 563, 563, 563, 563, 563,
	563, 563, 1470, -1000, -1000, 1415, -1000, -1000, 696, 6590,
	-1000, -1000, 969, 13552, 459, 386, 1468, -1000, 119, 673,
	672, -1000, 20002, -1000, -31, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 967, 967, -1000, -1000, -1000, -1000, 1467, 1473,
	88, 1466, -1000, 1459, 1454, 20002, 1274, 1269, -1000, 1453,
	5708, 26, -1000, -1000, 1141, 1131, 1107, 1265, 1254, -1000,
	1237, -109, -99, -1000, 1452, -1000, -1000, 1801, 171, -1000,
	1800, 21586, -1000, 796, 785, 563, 563, 780, 960, 958,
	957, 563, 563, 779, 956, 20789, 768, 756, 755, 862,
	938, 478, 856, 805, 740, 20002, 1450, 925, -1000, -1000,
	2486, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 753, 1449, -1000, -1000, 1447, -1000, -1000, 1251,
	-1000, 1248, 15272, 115, 115, 15272, 15272, 15272, 1446, 293,
	-1000, 15272, 1766, 1086, -1000, -1000, -1000, -1000, -1000, 739,
	-1000, 736, -1000, 243, -106, -99, -1000, 1798, -91, 1797,
	1796, 20002, 743, -1000, 141, -1000, -1000, -1000, 13122, 13122,
	-1000, -1000, -1000, -1000, 931, 929, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 186, 20002,
	1244, -1000, 566, 1096, 5708, -224, 15272, -1000, 927, -1000,
	1241, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1239, 1212,
	1210, 15272, -1000, -1000, -1000, 122, 103, -1000, -1000, 1766,
	1093, 1090, 1442, 735, -85, 1795, -1000, 743, 1793, 743,
	743, 1204, -1000, -1000, 104, 161, 150, -1000, 242, -1000,
	-1000, -1000, -1000, -1000, -1000, 187, 1200, -1000, 925, 923,
	-1000, 944, 1632, -1000, -3, 1189, -1000, -1000, -1000, -1000,
	-1000, 1174, -1000, -1000, 563, 910, 66, -1000, -1000, -1000,
	-1000, -1000, 1701, 12692, -111, -1000, 872, -1000, 743, -1000,
	-1000, -1000, 20002, 101, 728, 6590, 1441, 6590, 1440, 118,
	1435, -1000, -1000, -1000, -1000, -1000, 293, -1000, -1000, 1628,
	1622, 1868, -1000, -1000, -1000, -1000, 103, 103, 103, 103,
	-5, 710, -1000, 909, -1000, 20002, -1000, 1168, -1000, -1000,
	-1000, 394, -1000, -1000, -1000, -1000, 1434, 1792, -1000, 1068,
	20002, 1010, 20002, 1433, 551, 6590, -1000, -1000, 1874, -1000,
	1872, 358, 358, -1000, -1000, -1000, 808, -1000, 547, -1000,
	14842, 20002, -1000, 216, 109, -1000, 1165, -1000, 1151, 20002,
	709, 797, -1000, -1000, -1000, 738, 131, -1000, 20002, 3938,
	-1000, 379, 1149, -1000, 912, 96, -1000, -1000, 1147, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 734, 20002, -1000, 216,
	1661, -1000, 706, -1000, -1000, -1000, 21463, 204, -1000, -1000,
	21463, 100, -1000, 212, -1000, -1000, 1144, -1000, 742, 1416,
	-1000, 100, 21586, 5708, -1000, 21586, 1113, -1000,
}

var yyPgo = [...]int{
	0, 98, 2198, 2195, 109, 103, 2193, 2192, 2191, 2190,
	2189, 2188, 2187, 2186, 2183, 2182, 2181, 2180, 2179, 2178,
	2177, 2175, 2174, 2173, 2172, 2171, 2170, 2169, 2167, 2166,
	2165, 2164, 2163, 2162, 101, 2161, 2160, 2159, 2158, 2155,
	2154, 133, 2153, 2152, 2151, 2148, 2147, 2145, 2142, 2139,
	2138, 126, 48, 99, 765, 81, 193, 161, 124, 2136,
	91, 159, 2135, 2134, 29, 112, 2133, 123, 121, 86,
	143, 100, 83, 53, 2130, 2129, 2128, 127, 2127, 2126,
	2125, 2124, 52, 2119, 67, 54, 26, 2118, 75, 2116,
	2115, 2114, 2112, 2109, 76, 2108, 61, 43, 2107, 2105,
	2104, 2102, 2101, 34, 2100, 33, 2097, 2096, 2094, 2092,
	2088, 2087, 2083, 14, 17, 19, 2082, 2075, 15, 3,
	2074, 136, 106, 71, 88, 2073, 162, 2072, 2071, 2070,
	147, 2069, 135, 2068, 2065, 2064, 2058, 2057, 9, 2056,
	44, 2055, 2053, 2052, 45, 2050, 2049, 2048, 87, 38,
	72, 79, 2047, 2046, 2045, 129, 16, 69, 0, 2044,
	2043, 125, 35, 2042, 139, 142, 2041, 165, 223, 115,
	40, 2038, 37, 56, 2037, 2036, 2035, 97, 70, 25,
	2034, 85, 2032, 92, 77, 2027, 96, 2026, 118, 2,
	89, 2025, 137, 2023, 2006, 2005, 111, 2004, 2003, 57,
	114, 2002, 2001, 2000, 30, 1999, 32, 21, 1998, 128,
	148, 1997, 1995, 1993, 117, 94, 68, 1991, 1990, 62,
	1988, 107, 63, 116, 1987, 762, 105, 65, 18, 1986,
	144, 1985, 225, 145, 131, 1984, 1983, 152, 1674, 146,
	1982, 132, 10, 1981, 1979, 11, 1978, 23, 1976, 1975,
	1972, 1971, 6, 1969, 1967, 1966, 1, 5, 1965, 4,
	95, 55, 59, 1964, 47, 60, 1963, 1959, 1958, 1956,
	1955, 247, 1954, 1952, 1951, 1950, 1949, 1948, 1947, 73,
	1946, 1945, 1943, 1931, 58, 1927, 1926, 1925, 1924, 1922,
	31, 1921, 1920, 20, 1919, 28, 1918, 1917, 1916, 12,
	1915, 1914, 13, 1913, 1911, 7, 8, 1910, 1909, 46,
	39, 36, 66, 64, 1905, 22, 1902, 90, 1900, 1899,
	122, 1898, 93, 1896, 1895, 140, 164, 1894, 134, 1893,
	1892, 1891, 1890, 1889, 1888, 1887, 1886, 1884, 141, 1879,
}

//line mysql_sql.y:6555
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 336, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 49, 308, 308, 307, 307, 306, 306, 305, 305,
	305, 304, 304, 304, 303, 303, 302, 302, 300, 300,
	301, 299, 298, 298, 296, 296, 294, 294, 295, 295,
	289, 289, 292, 292, 290, 290, 290, 290, 293, 288,
	288, 288, 287, 287, 48, 48, 48, 227, 227, 47,
	47, 241, 241, 241, 241, 241, 239, 239, 239, 239,
	238, 238, 237, 237, 242, 242, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 42,
	42, 42, 42, 45, 46, 235, 235, 235, 235, 235,
	236, 236, 236, 43, 44, 44, 226, 226, 231, 231,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 234, 234, 234, 233, 233, 232, 232, 36,
	36, 36, 39, 38, 225, 225, 225, 225, 225, 225,
	225, 225, 37, 37, 37, 37, 37, 37, 35, 35,
	34, 224, 224, 223, 41, 41, 41, 41, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 331, 331, 331,
	333, 333, 163, 163, 163, 327, 327, 328, 329, 330,
	330, 330, 50, 7, 33, 33, 271, 271, 174, 174,
	175, 175, 173, 173, 173, 173, 173, 173, 274, 275,
	170, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 25, 25, 32, 337, 337, 337, 30, 31,
	270, 270, 270, 29, 28, 27, 26, 26, 24, 24,
	23, 23, 167, 167, 169, 169, 165, 338, 338, 247,
	247, 168, 168, 22, 22, 166, 166, 145, 164, 164,
	164, 6, 8, 8, 8, 8, 8, 13, 12, 11,
	10, 9, 5, 4, 278, 278, 278, 278, 278, 278,
	316, 316, 316, 317, 76, 76, 71, 71, 279, 279,
	190, 318, 318, 286, 286, 285, 285, 284, 284, 74,
	74, 75, 75, 63, 63, 51, 51, 291, 291, 291,
	291, 297, 297, 268, 268, 110, 110, 141, 141, 142,
	142, 52, 52, 53, 53, 53, 53, 53, 53, 324,
	324, 326, 326, 325, 73, 73, 69, 69, 70, 70,
	70, 68, 68, 67, 66, 66, 65, 64, 64, 64,
	55, 55, 54, 54, 54, 54, 54, 126, 126, 126,
	56, 56, 332, 332, 332, 272, 272, 272, 277, 277,
	123, 123, 124, 124, 122, 122, 57, 57, 58, 58,
	58, 58, 121, 121, 120, 59, 59, 60, 60, 62,
	62, 62, 62, 131, 131, 130, 130, 130, 130, 79,
	79, 129, 128, 128, 128, 78, 78, 77, 77, 72,
	72, 61, 61, 127, 339, 339, 125, 154, 154, 154,
	162, 162, 153, 153, 153, 153, 153, 161, 161, 155,
	155, 156, 156, 156, 3, 3, 3, 16, 16, 16,
	16, 20, 20, 334, 334, 14, 221, 221, 220, 220,
	222, 222, 222, 222, 216, 216, 217, 217, 217, 217,
	218, 218, 218, 219, 219, 219, 219, 215, 215, 214,
	212, 212, 212, 213, 213, 213, 213, 213, 213, 159,
	160, 157, 157, 15, 209, 209, 210, 210, 210, 211,
	211, 203, 203, 203, 203, 19, 207, 207, 208, 208,
	208, 208, 208, 204, 204, 206, 206, 202, 202, 202,
	202, 202, 18, 201, 201, 199, 199, 197, 197, 198,
	198, 196, 196, 196, 200, 200, 17, 273, 273, 243,
	243, 246, 246, 253, 253, 254, 254, 252, 252, 259,
	259, 258, 258, 257, 257, 256, 256, 255, 255, 250,
	250, 249, 249, 244, 244, 244, 244, 244, 245, 245,
	248, 248, 251, 251, 101, 101, 102, 102, 102, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 314, 314,
	315, 104, 104, 104, 108, 108, 108, 108, 108, 108,
	103, 103, 105, 105, 86, 86, 85, 85, 80, 80,
	81, 81, 82, 82, 83, 83, 84, 84, 84, 84,
	84, 84, 229, 229, 312, 312, 313, 313, 309, 309,
	309, 311, 311, 311, 311, 311, 310, 310, 87, 139,
	139, 139, 158, 158, 158, 138, 138, 138, 100, 100,
	99, 99, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 228, 228, 171, 171, 172,
	172, 118, 116, 116, 117, 117, 117, 117, 114, 115,
	113, 113, 113, 113, 113, 112, 112, 111, 111, 111,
	205, 205, 109, 109, 107, 107, 107, 106, 106, 106,
	260, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 181, 181, 181, 181, 182, 182, 187, 187, 323,
	323, 322, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 96, 96, 96, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 283,
	283, 283, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 137, 335, 335, 335, 319, 319,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 135,
	135, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 191, 191, 192, 192, 280, 280,
	280, 280, 280, 280, 281, 281, 282, 282, 282, 282,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 180, 132,
	132, 132, 193, 188, 188, 189, 189, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 183, 185, 185, 185,
	185, 185, 177, 177, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 184, 184, 186, 186, 195, 195, 195,
	194, 194, 194, 194, 194, 194, 194, 98, 98, 98,
	98, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	89, 89, 89, 89, 93, 93, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	94, 94, 94, 94, 92, 92, 92, 92, 92, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 91, 140, 140, 261, 261, 264,
	264, 262, 262, 263, 265, 265, 265, 266, 266, 266,
	267, 267, 267, 269, 269, 144, 144, 144, 150, 150,
	143, 143, 151, 151, 152, 152, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 149, 149, 149,
	149, 149, 149, 149, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 14, 0, 2, 1, 3, 3, 3, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 3, 0, 3, 0, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 9, 4, 7, 0, 3, 7,
	4, 1, 3, 3, 3, 1, 0, 1, 1, 1,
	1, 3, 1, 4, 1, 3, 1, 2, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 6, 3, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 0, 4, 2, 4, 1, 5,
	3, 2, 1, 2, 2, 4, 4, 5, 2, 1,
	7, 1, 3, 3, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 1, 1,
	1, 1, 6, 1, 7, 9, 0, 2, 0, 1,
	1, 2, 2, 2, 1, 4, 2, 2, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 5, 1, 1, 1, 5, 5,
	0, 1, 1, 2, 2, 3, 6, 7, 4, 4,
	7, 8, 0, 2, 0, 2, 2, 1, 1, 1,
	1, 0, 1, 4, 5, 1, 3, 1, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 4, 4, 6,
	4, 4, 6, 4, 2, 1, 5, 4, 4, 2,
	0, 1, 3, 3, 1, 3, 1, 3, 1, 3,
	4, 0, 1, 0, 1, 1, 3, 1, 1, 0,
	4, 1, 3, 2, 1, 0, 8, 0, 4, 7,
	4, 0, 2, 0, 2, 0, 2, 0, 4, 1,
	3, 1, 1, 4, 3, 4, 5, 4, 5, 2,
	3, 1, 3, 6, 0, 3, 0, 1, 2, 4,
	4, 0, 1, 3, 1, 3, 2, 0, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 2,
	7, 7, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 2, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 3, 1, 1, 4,
	4, 4, 3, 2, 2, 2, 3, 2, 3, 0,
	2, 1, 1, 2, 2, 0, 1, 2, 4, 1,
	3, 1, 4, 3, 0, 1, 2, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 8, 11, 0, 1, 6, 0, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 2, 2, 2, 2,
	1, 3, 2, 2, 2, 2, 2, 1, 3, 2,
	1, 3, 2, 0, 3, 3, 5, 5, 4, 1,
	1, 1, 1, 4, 1, 3, 1, 3, 2, 1,
	1, 0, 1, 1, 1, 11, 0, 2, 3, 2,
	3, 1, 1, 1, 3, 3, 4, 0, 2, 2,
	2, 2, 5, 1, 1, 0, 3, 0, 1, 1,
	2, 4, 4, 4, 0, 1, 10, 0, 1, 0,
	6, 0, 4, 0, 3, 1, 3, 4, 5, 0,
	3, 1, 3, 2, 3, 1, 2, 0, 6, 0,
	2, 0, 2, 4, 5, 4, 5, 1, 6, 5,
	0, 3, 0, 1, 0, 1, 1, 3, 2, 3,
	3, 4, 4, 3, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 5, 4, 1, 3,
	3, 0, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 0, 1,
	1, 3, 1, 1, 2, 1, 7, 7, 7, 7,
	8, 5, 0, 1, 0, 1, 1, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 0, 1, 3, 1,
	3, 5, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 2, 1, 2, 2, 1, 1, 2, 2, 2,
	2, 2, 1, 5, 6, 1, 2, 0, 1, 1,
	2, 5, 0, 1, 1, 1, 2, 2, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 2, 2, 2,
	0, 3, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 3, 5, 2,
	2, 2, 2, 1, 1, 2, 5, 6, 6, 6,
	1, 1, 1, 1, 1, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 2, 2,
	2, 0, 1, 1, 5, 4, 4, 5, 5, 5,
	5, 4, 5, 5, 5, 5, 5, 5, 5, 1,
	1, 1, 4, 4, 6, 8, 6, 4, 5, 5,
	4, 6, 6, 7, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 2, 3, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 2, 0, 1, 2, 3, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 3, 3, 3,
	3, 2, 3, 4, 3, 4, 1, 3, 4, 3,
	4, 1, 1, 1, 3, 4, 4, 5, 3, 4,
	5, 6, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -336, -2, -1, -3, -4, -5, -6, -40, -21,
	-7, -50, -34, -35, -36, -42, -47, -48, -49, -52,
	-16, -15, -14, 8, 10, -8, -163, -22, -23, -24,
	-26, -27, -28, -29, -30, -31, -32, -25, -33, 185,
	9, 48, -37, -38, -39, -43, -44, -45, -46, 293,
	299, 336, -53, -55, -17, -18, -19, -20, 181, -9,
	-10, -11, -12, -13, 203, 202, 26, 201, 182, 120,
	121, 123, 124, 30, -54, -324, 53, 183, -56, 409,
	6, 455, -63, 27, -85, -158, 57, -146, -149, 412,
	413, 414, 415, 416, 417, 418, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 428, 429, 430, 431, 432,
	433, 434, 435, 436, 437, 438, 439, 440, 441, 442,
	443, 444, 445, 446, 447, 406, 220, 244, 247, 254,
	120, 137, 131, 159, 151, 128, 224, 225, 64, 123,
	365, 74, 350, 335, 126, 239, 241, 243, 246, 226,
	147, 142, 238, 222, 140, 227, 28, 228, 164, 229,
	230, 411, 346, 275, 369, 352, 251, 333, 141, 347,
	242, 349, 165, 169, 357, 299, 135, 136, 354, 359,
	163, 200, 32, 408, 212, 360, 167, 162, 158, 368,
	255, 253, 161, 134, 157, 223, 37, 171, 170, 172,
	329, 330, 331, 332, 231, 232, 287, 356, 154, 143,
	279, 129, 18, 363, 207, 351, 300, 233, 248, 210,
	256, 166, 168, 214, 219, 410, 218, 252, 361, 139,
	211, 240, 206, 364, 130, 293, 302, 234, 124, 245,
	358, 367, 36, 315, 133, 127, 197, 121, 216, 221,
	235, 236, 237, 258, 257, 249, 155, 213, 160, 132,
	156, 122, 215, 366, 316, 454, 277, 318, 153, 150,
	217, 190, 362, 353, 125, 322, 317, 148, 259, 451,
	452, 453, 288, 274, 260, 261, 146, 204, 11, -164,
	19, 333, -41, 334, 185, 53, -158, -5, -4, -34,
	-52, 188, -60, -61, -62, -125, -127, -85, 53, -158,
	-238, -209, -237, -210, -240, -211, -157, 20, 182, 181,
	215, 10, 183, 297, 189, 8, 6, 298, 201, 9,
	299, 301, 302, 305, 306, 307, 31, 310, 311, 57,
	60, -158, -238, -209, 219, 226, -67, -68, -126, 15,
	5, -273, 318, 218, -203, -201, 308, 198, 197, 75,
	371, 187, 404, -144, -337, -270, 353, 352, -168, 351,
	344, 355, 346, 181, 74, 152, 149, 189, 354, 32,
	357, 358, 347, 318, 125, 122, -225, 80, 130, 129,
	-225, 218, 29, -231, 328, -230, -232, 357, 358, 368,
	58, 59, 356, -144, -158, 74, -68, -126, -67, -54,
	-55, -53, -55, 318, 218, 189, 188, 371, -326, 403,
	-325, -158, -272, -332, 20, -277, 178, 179, 180, 21,
	22, -1, -74, 210, -85, 119, -60, -138, -158, 335,
	89, -41, -41, 334, -327, -328, -329, -331, 185, 334,
	333, 119, -85, 30, -128, -129, -130, -131, 40, 44,
	46, 41, 42, 43, 47, -339, 23, -154, -162, 23,
	-155, 60, -156, -149, 57, 58, 59, -53, -55, 50,
	54, 11, 54, 53, 456, 58, 295, 309, 318, 296,
	308, 190, 218, 309, 218, 344, 190, 300, 303, 304,
	345, 50, 191, 50, -287, 368, -51, 27, -70, 17,
	-56, -55, 16, 20, 21, -334, 188, 403, -199, 193,
	-199, 189, -199, -167, 97, -167, -338, 11, 99, 217,
	216, 348, 345, -247, 349, 350, -168, -167, -167, -168,
	188, 371, 30, 30, -271, 193, 361, 409, 128, 129,
	130, -235, 20, 29, 327, -209, 218, 54, 89, 19,
	-233, 89, 100, -232, -232, -232, -233, -233, -103, 29,
	-157, 116, 60, -103, 29, 119, -69, -70, -56, -55,
	-68, -67, -68, 55, 55, -271, -271, -271, -271, -271,
	54, -326, -73, 53, -57, -58, 107, -183, -158, 81,
	-185, 57, -178, 412, 413, 414, 415, 416, 417, 418,
	419, 420, 421, 422, 423, 424, 425, 426, 428, 429,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 74, 333,
	287, 318, 148, 288, 146, 204, -179, -181, -305, -300,
	-176, 53, 105, 106, 113, 82, -180, -260, 24, 84,
	379, -133, -134, -135, -136, -137, -301, -299, 60, 65,
	68, 71, 72, 70, 69, 144, 67, 118, -55, -319,
	-147, -276, -282, 187, -280, 149, 145, 8, 111, 328,
	116, -283, 448, 59, 58, 281, 282, 283, 371, 278,
	284, 193, 42, 285, 286, 289, 378, 290, 43, 291,
	280, 208, 292, 382, 381, 383, 375, 372, 370, 373,
	374, 376, 377, -57, -278, 33, -52, 53, 30, 53,
	-158, -122, 12, 119, 65, 60, -41, 55, 54, -330,
	71, 72, -333, 163, 155, -158, 53, -224, -223, -138,
	-61, -61, -61, -61, 40, 40, 40, 45, 40, 45,
	40, -130, -158, -162, 55, -239, 188, 294, 214, -237,
	215, 299, 302, -215, -214, -212, -157, -210, -242, -138,
	-157, 345, -239, -215, -214, 337, 450, -51, -183, -158,
	-66, -65, -183, 190, -199, -215, 81, -209, -156, -158,
	-122, -181, -122, -85, -167, -167, -169, -338, -165, -338,
	345, -122, -122, -247, -166, -158, -199, -215, 318, 24,
	362, 363, 126, 129, 128, 369, -236, 327, 20, -209,
	-230, -226, 60, 328, -214, -234, 50, 116, -284, -183,
	29, -233, -233, -233, -234, -234, 115, -158, -51, -69,
	-51, -70, -215, -209, -158, -86, -85, -161, -156, -149,
	-325, 23, -72, -158, -121, 54, -120, 11, -153, 80,
	77, 78, 79, -158, 23, 60, 119, -183, 96, -194,
	89, 90, 91, 92, 93, 94, 95, 53, 53, 53,
	53, 53, 53, 53, 53, -192, 53, 53, 53, 53,
	53, 53, 53, -192, 53, 53, 53, 53, 53, 60,
	60, 102, 101, 112, 105, 106, 107, 108, 109, 110,
	111, 103, 104, 99, 81, 97, 98, 83, -55, -183,
	-189, -181, -181, -181, -181, -260, -187, -183, 53, -183,
	53, 53, 53, -281, 53, 53, -191, -192, 53, 60,
	53, 53, 53, -181, 53, 53, -121, -279, -190, -318,
	449, -76, 55, -71, -158, -316, -317, -71, -75, -158,
	-68, -183, -151, -152, -143, -148, -155, -156, -149, 276,
	186, 20, 80, 23, 25, 281, 313, 83, 116, 16,
	84, 149, 115, 283, 379, 282, 181, 46, 381, 383,
	382, 372, 370, 320, 324, 326, 323, 371, 344, 29,
	10, 26, 202, 21, 22, 109, 183, 87, 88, 205,
	24, 203, 72, 19, 49, 11, 13, 14, 284, 319,
	193, 192, 99, 337, 189, 44, 8, 118, 27, 96,
	321, 40, 76, 42, 97, 17, 373, 374, 31, 336,
	405, 209, 111, 285, 286, 47, 81, 327, 70, 50,
	77, 15, 45, 98, 184, 378, 43, 325, 289, 291,
	403, 290, 187, 355, 6, 280, 380, 30, 201, 41,
	188, 345, 86, 191, 71, 208, 145, 5, 75, 9,
	48, 51, 375, 376, 377, 33, 85, 12, 292, 409,
	328, 338, 339, 340, 341, 342, 343, 173, 174, 175,
	176, 177, 250, 196, 194, 198, 199, 449, 450, 178,
	179, 271, 273, 152, 19, -41, -328, 119, -72, -122,
	54, 89, -78, -77, 50, 51, -79, 50, -77, 40,
	40, -73, -241, 107, 57, 54, -213, 319, 456, 58,
	55, 54, -241, 191, 60, 60, 54, 18, 119, 54,
	-64, 25, 26, -85, 193, -85, -216, -217, 325, 24,
	-202, 51, -197, -198, -196, -200, 29, -122, -122, -122,
	-167, -161, -169, -164, -169, -165, 119, -145, -158, -216,
	53, 127, 130, 130, 129, -209, 191, 53, 89, -234,
	-234, -234, 29, -157, -51, -51, 50, 54, 53, 55,
	54, -122, -58, -59, -60, -183, -183, -183, -183, -158,
	60, -158, 107, -177, 81, 274, 70, 71, 72, -178,
	-195, 20, 260, 261, -188, -189, -183, -132, 21, 20,
	-132, -132, -183, -132, 107, -189, -189, 55, 65, -320,
	-321, 384, 385, 386, 387, 388, 389, 390, 391, 392,
	393, 394, 285, 280, 286, 284, 278, 292, 287, 288,
	148, 401, 402, 395, 396, 397, 398, 399, 400, -132,
	-132, -132, -132, -132, -183, -335, 272, 271, 273, -132,
	-132, -132, -132, -179, -179, -179, -179, -179, -179, -179,
	-179, -179, -179, -179, -179, -186, -193, -260, 53, 99,
	97, 98, 83, -181, -179, -179, 55, 54, -323, -322,
	85, -183, -320, -188, -183, -188, -188, 55, 55, -189,
	-188, -179, -188, -132, -159, 60, -122, 54, 53, 55,
	54, 33, 119, 54, 89, 55, 54, -69, 119, 335,
	-158, 55, -68, -223, -183, -183, 53, -183, 11, 119,
	119, -214, 16, 409, -157, -138, 191, -215, -288, 192,
	378, -291, 349, -183, -183, -158, -65, -73, 81, 53,
	-221, 409, 327, 326, 322, -218, -219, 321, 323, 320,
	324, 50, 266, 267, 268, 269, -196, -144, 115, 229,
	-122, -167, -167, -169, -158, -221, 55, 130, -215, -170,
	60, -226, -85, -85, -1, -158, -124, 13, 54, 119,
	-177, 274, 70, -260, 55, 54, -183, -183, -183, 23,
	-189, 55, 55, 55, 55, 11, -183, -183, -183, -183,
	-183, 55, 11, 11, -183, -183, -183, -183, -183, -189,
	-186, -181, -179, -179, -184, 205, 80, -183, -182, -322,
	87, -183, 54, 51, 55, 11, 55, 55, 55, 51,
	55, 54, 55, -183, 54, -124, -190, -286, -285, -284,
	33, -52, -71, -279, -158, -317, -284, -158, -151, -148,
	-156, -149, 65, -69, -72, -215, 107, 107, 57, -157,
	328, -157, -215, -227, 409, 27, -297, 343, 338, 340,
	119, 23, 24, -80, -81, -82, -87, -83, -138, -172,
	-84, 196, 194, 198, -313, 75, 199, 250, 76, 189,
	-220, -222, 329, 330, 331, 332, 80, -219, 60, 60,
	60, 60, -85, -150, 89, -150, -150, -122, -122, -167,
	-174, -175, -173, 276, -274, 328, 319, 55, 55, -123,
	14, 16, -60, -158, 107, -183, 55, 55, 55, -88,
	-94, 116, 149, 204, 148, 147, 145, 315, 316, 140,
	141, 142, 139, 55, -183, 55, 55, 55, 55, 55,
	-183, -183, 11, 55, 55, 55, 55, 55, -184, 80,
	-181, -178, 55, 88, -183, 86, -88, -103, -183, -103,
	-179, 55, -160, 60, -123, 55, 54, -279, 55, -157,
	16, 23, -216, 299, 188, -268, 451, -295, 338, 16,
	16, -52, -85, 55, 54, -89, -93, -90, -92, -91,
	-95, -94, 149, 150, 116, 153, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 30, 204, 145, 146,
	147, 148, 165, 131, 151, 407, 173, 132, 174, 133,
	175, 134, 176, 135, 136, 177, 137, -84, -158, 76,
	-312, -313, -199, -312, 76, 53, -222, 65, 65, 65,
	65, -219, 53, -103, -105, -157, 116, 60, -122, -173,
	277, 31, 118, 279, 29, 275, 16, -183, -189, 55,
	-261, -263, 53, -262, 53, -261, -264, 53, -261, -96,
	136, 135, -96, -265, 53, -265, -266, 53, -265, 55,
	55, 55, -183, -178, -183, 55, 55, 55, 19, 55,
	55, 55, -284, -157, -157, -227, 300, -85, -110, 452,
	60, 16, 60, -293, 60, -73, -101, -102, -119, 313,
	220, -200, 224, 64, 225, 335, 226, 189, 228, 229,
	230, 200, 231, 232, 233, 328, 234, 235, 236, 237,
	296, 5, 262, -82, -100, -99, -97, 70, 81, 29,
	313, -98, 64, 115, 243, 221, 244, -118, -171, 194,
	75, 76, 301, -172, -267, 316, 315, -261, -262, -262,
	-261, -261, 53, 53, -261, -264, -264, -261, -309, -310,
	-158, -310, -158, -309, -309, -199, -183, -204, -206, -138,
	53, 65, -275, -170, 65, 65, 65, 65, 65, 55,
	-183, -289, -247, -141, 453, 65, 60, 340, 23, -243,
	210, 54, -119, -150, -150, -144, 115, -150, -150, -150,
	-150, 227, 227, -150, -150, -150, -150, -150, -150, -150,
	-150, -150, -150, -150, -150, -150, -150, 53, -97, 70,
	-179, 60, -105, -106, 29, 242, 238, -107, 29, 222,
	223, -109, 53, 250, 76, 76, -85, -269, 317, -140,
	60, -140, 53, 51, 259, 53, 53, 53, -310, 55,
	55, 54, -261, -183, 278, 55, 55, 55, 55, 54,
	55, 54, 55, -296, 343, -292, -290, 338, 339, 340,
	341, 53, 16, -52, 16, -119, 65, 65, -150, -150,
	65, 60, 60, 60, -150, -150, 65, 60, -162, 65,
	65, 65, 65, 29, 60, -108, 29, 238, 242, 239,
	240, 241, 65, 29, 65, 29, 65, 29, -158, 53,
	-314, -315, 60, 65, 53, -205, 53, 55, 54, 55,
	-204, -311, 266, 267, 268, 270, 269, -311, -204, -204,
	-204, 53, -229, -228, 251, 81, -207, -206, -64, 55,
	65, 65, -298, 192, -294, 342, -290, 16, 340, 16,
	16, -142, -158, -293, -244, 252, 253, -245, -251, 255,
	-103, -103, 60, 60, -104, 221, -86, 55, 54, 89,
	55, -183, -112, -111, 405, -204, 60, 55, 55, 55,
	55, -204, 251, -208, 200, 64, 409, 264, 265, -64,
	55, 55, -304, 53, 65, -295, 16, -293, 16, -293,
	-293, 55, 54, -249, 256, 53, -247, 53, -247, 76,
	267, 222, 223, 55, -315, 60, 55, -116, -117, -114,
	-115, 50, 347, 248, 249, 55, -207, -207, -207, -207,
	55, -150, 60, 263, -308, 30, 55, -303, -302, -139,
	-299, -158, 343, 60, -293, -158, -246, 257, 65, -179,
	53, -179, 53, -248, 254, 53, -228, -115, 50, -114,
	50, 10, 9, -118, 65, -156, -307, -306, -305, 55,
	54, 119, -253, 53, 16, 55, -242, 55, -242, 53,
	89, -179, -113, 245, 246, 30, 129, -113, 54, 89,
	-302, -158, -254, -252, 210, -245, 55, 55, -242, 65,
	55, 70, 29, 247, -306, 29, -183, 119, 55, 54,
	57, -250, 258, 55, -158, -252, -255, 33, 65, -259,
	-256, 53, -119, 212, -259, -119, -258, -257, 257, 213,
	55, 54, 57, 53, -257, -256, -189, 55,
}

var yyDef = [...]int{
	20, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	454, 455, 456, 0, 0, 281, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 213, 0,
	0, 179, 159, 160, 161, 119, 120, 121, 122, 0,
	0, 0, 341, -2, 457, 458, 459, 460, -2, 282,
	283, 284, 285, 286, 202, 203, 204, -2, 0, 172,
	0, 164, 164, 0, 361, 0, 0, 0, 372, 0,
	385, 20, 319, 0, 324, 636, 672, 673, 674, 1364,
	1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
	1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 0, 188,
	0, 1233, 192, 0, 0, 0, 278, 184, 185, 186,
	187, 0, 0, 407, 408, 431, 434, 437, 0, 178,
	0, 0, 80, 504, 82, 506, 0, 86, 88, 89,
	-2, 93, 94, 95, 96, 97, 98, 99, 0, 101,
	1241, 103, 1302, 106, 107, 108, 0, 117, 118, -2,
	-2, 501, 0, 0, 1290, 62, -2, 0, 0, 0,
	377, 463, 535, 535, 0, 535, 548, 512, 513, 514,
	533, 534, 262, 262, 0, 0, 253, 254, 0, 271,
	262, 262, 271, 0, 1035, 0, 0, 245, 246, 247,
	251, 252, 272, 216, 173, 174, 163, 0, 168, 0,
	162, 1292, 0, 133, 0, 138, 0, 1240, 1306, 1255,
	0, 0, 1273, 0, 157, -2, 356, 0, 362, 361,
	361, 0, 361, 216, 216, 216, 216, 216, 349, 0,
	351, 354, 0, 0, 386, 387, 382, 383, 384, 388,
	389, 3, 0, 0, 323, 0, 394, 189, 675, 0,
	0, 193, 194, 0, 0, 205, 0, 208, 197, 198,
	199, 0, 0, 0, 0, 0, 0, 0, 422, 0,
	0, 421, 0, 0, 0, 0, 435, 436, 438, 0,
	440, 441, 449, 450, 451, 452, 453, 0, 361, 76,
	0, 0, 0, 0, 0, 508, 87, 116, 90, 91,
	0, 111, 113, 115, 114, 100, 112, 102, 104, 105,
	110, 76, 0, 0, 0, 63, 344, 0, 325, 0,
	374, 376, 0, 378, 379, 0, 535, 464, 0, 0,
	0, 0, 0, 394, 0, 394, 0, 267, 268, 262,
	262, 255, 264, 0, 269, 270, 0, 394, 394, 0,
	0, 535, 1036, 1037, 0, 0, 0, 0, 166, 0,
	171, 123, 128, 126, 127, 129, 0, 0, 0, 0,
	0, 155, 156, 0, 0, 0, 0, 0, 146, 149,
	630, 631, 502, 150, 151, 0, 325, 357, 373, 375,
	356, -2, 0, 370, 371, 0, 0, 0, 0, 0,
	0, 350, 0, 0, 402, 396, 398, 442, 28, 0,
	926, 672, 931, -2, 1365, 1366, 1367, 1368, 1369, 1370,
	1371, -2, 1373, -2, -2, 1376, 1377, 1378, 1380, -2,
	-2, -2, -2, -2, -2, 1387, -2, -2, -2, 1391,
	1392, -2, -2, 1395, 1396, 1397, 1398, 1399, -2, -2,
	-2, -2, -2, -2, -2, -2, 942, 743, 744, 745,
	746, 0, 0, 0, 0, 0, 753, 754, 0, 767,
	0, 760, 761, 762, 763, 764, 38, 39, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 889, 730, 0,
	0, 0, 874, 0, 864, 0, 902, 0, 0, 0,
	0, 0, 0, 40, 41, 880, 882, 883, 885, 886,
	887, 888, 891, 892, 893, 896, 897, 898, 899, 900,
	901, 904, 906, 876, 877, 878, 879, 868, 869, 870,
	871, 872, 873, 402, 293, 311, 295, 0, 300, 0,
	637, 361, 0, 0, 190, 0, 195, 0, 0, 207,
	209, 210, 211, 200, 201, 279, 0, 394, 181, 0,
	425, 419, 0, 412, 423, 424, 415, 0, 417, 0,
	413, 414, 354, 439, 433, 0, 77, 78, 79, 81,
	92, 0, 0, 70, 487, 493, 490, 505, 0, 84,
	507, 109, 0, 65, 0, 0, 0, 345, 358, 28,
	363, 364, 367, 0, 0, 474, 0, 503, 527, -2,
	242, 263, 243, 394, 394, 394, 262, 0, 264, 0,
	264, 258, 259, 0, 273, 275, 0, 474, 1333, 217,
	175, 176, 0, 0, 170, 0, 0, 130, 131, 132,
	139, 134, 136, 0, 0, 140, 152, 153, 154, 317,
	318, 0, 0, 0, 144, 145, 0, 158, 343, 325,
	347, 325, 287, 288, 0, 290, 634, 291, 447, 448,
	352, 0, 0, 429, 394, 0, 403, 0, 399, 0,
	0, 0, 0, 443, 0, 445, 0, 921, 0, 0,
	950, 951, 952, 953, 954, 955, 956, 913, 909, 909,
	909, 0, 909, 0, 0, 849, 0, 0, 909, 909,
	909, 909, 909, 850, 0, 909, 909, 909, 909, 863,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, -2, 915,
	0, 749, 750, 751, 752, 755, 0, 768, 0, 0,
	913, 913, 913, 852, 0, 0, 854, 865, 0, 858,
	913, 0, 913, 862, 909, 0, 394, 294, 308, 0,
	312, 0, 0, 304, 306, 299, 301, 0, 0, 321,
	356, 395, 676, 0, 1042, -2, 1044, -2, -2, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 0, 196, 206, 0, 0, 361,
	0, 0, 409, 426, 0, 0, 410, 0, 411, 416,
	418, 432, 0, 71, 75, 0, 489, 0, 0, 492,
	83, 0, 0, 0, 59, 327, 0, 0, 0, 0,
	366, 368, 369, 354, 0, 0, 466, 475, 0, 536,
	0, 0, 532, -2, 539, 0, 545, 244, 248, 249,
	394, 265, 262, 266, 262, 264, 0, 274, 277, 466,
	0, 177, 165, 167, 0, 125, 0, 0, 0, 141,
	142, 143, 147, 148, 346, 348, 0, 0, 20, 355,
	0, 392, 397, 404, 405, 917, 918, 919, 920, 444,
	446, 29, 400, 922, 0, 924, 927, 932, 933, 929,
	0, 947, -2, -2, 0, 914, 915, 0, 910, 911,
	0, 0, 0, 0, 0, 0, 0, 866, 0, 0,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 0,
	0, 0, 0, 0, 0, 0, 815, 816, 817, 0,
	0, 0, 0, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 934, 945, 946, 0, 0,
	0, 0, 0, 943, 938, 0, 747, 0, 765, 769,
	0, 0, 908, 0, 915, 0, 0, 875, 853, 0,
	0, 0, 0, 0, 0, 499, 392, 311, 313, 0,
	0, 311, 0, 0, 0, 320, 0, 292, 0, 0,
	280, 212, 356, 182, 183, 427, 0, 420, 0, 0,
	0, 488, 0, 0, 491, 85, 0, 67, 0, 60,
	61, 331, 0, 359, 360, 29, 365, 0, 0, 638,
	465, 0, 476, 477, 478, 479, 480, 0, 0, 0,
	0, 0, 528, 529, 530, 531, 540, 1038, 1038, 1038,
	256, 394, 394, 262, 276, 218, 0, 169, 124, 0,
	230, 135, 289, 635, 0, 430, 390, 0, 0, 0,
	923, 925, 928, 930, 802, 0, 0, 0, 0, 0,
	0, 791, 785, 786, 867, 0, 0, 0, 0, 0,
	0, 810, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 943, 939, 0, 936, 0, 0, 916, 0, 770,
	0, 0, 0, 0, 803, 0, 807, 851, 855, 0,
	859, 0, 861, 0, 0, 390, 309, 0, 314, 315,
	311, 298, 305, 297, 307, 302, 303, 322, 677, 1043,
	1040, 1041, 191, 180, 0, 69, 72, 73, 74, 494,
	0, 495, 474, 66, 0, 0, 333, 48, 0, 0,
	0, 0, 0, 0, 639, 640, 642, 643, 0, 0,
	645, 699, 0, 654, 535, 654, 0, 0, 656, 657,
	467, 468, 0, 0, 0, 0, 0, 482, 483, 484,
	485, 486, 0, 0, 1039, 0, 0, 260, 257, 394,
	214, 219, 220, 0, 224, 0, 0, 137, 353, 380,
	0, 0, 406, 30, 401, 916, 787, 788, 789, 0,
	772, 1017, 1021, 775, 1017, 1019, 1017, 781, 781, 1024,
	1024, 1027, 1024, 790, 0, 809, 792, 793, 796, 794,
	0, 0, 0, 808, 797, 798, 784, 912, 937, 0,
	944, 940, 748, 756, 766, 0, 0, 0, 0, 0,
	0, 795, 0, 500, 381, 310, 0, 296, 428, 498,
	0, 0, 67, 0, 0, 335, 0, 332, 0, 0,
	0, 461, 354, -2, 0, -2, 1030, 971, 972, 973,
	1017, 975, 1021, 1021, 1017, 1017, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 0, 0, 994, 1017, 1019,
	1019, 1017, 1014, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 644, 700, 666,
	666, 655, 666, 666, 535, 0, 469, 470, 471, 472,
	473, 481, 0, 541, 542, 632, 633, 543, 261, 221,
	222, 223, 0, 226, 227, 229, 0, 391, 393, 757,
	773, 1018, 0, 774, 0, 776, 777, 0, 778, 779,
	782, 783, 780, 990, 0, 991, 992, 0, 993, 806,
	811, 812, 0, 941, 771, 758, 759, 804, 0, 856,
	860, 814, 316, 496, 497, 64, 68, 50, 337, 0,
	334, 0, 328, 330, 58, 0, 549, -2, 586, 1038,
	1038, 0, 1038, 1038, 1038, 1038, 0, 0, 1038, 1038,
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
	1038, 1038, 0, 641, 668, -2, 680, 682, 0, 0,
	685, 686, 0, 0, 0, 0, 722, 692, 0, 0,
	959, 960, 0, 698, 1033, 1031, 1032, 974, 999, 1000,
	1001, 1002, 0, 0, 995, 996, 997, 998, 0, 658,
	667, 0, 667, 0, 0, 666, 0, 0, 523, 1017,
	0, 0, 228, 215, 0, 0, 0, 0, 0, 813,
	0, 44, 0, 326, 0, 336, 49, 0, 0, 546,
	0, 544, 588, 0, 0, 1038, 1038, 0, 0, 0,
	0, 1038, 1038, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 681, 683,
	684, 687, 688, 689, 727, 728, 729, 690, 724, 725,
	726, 691, 0, 0, 957, 958, 720, 970, 1034, 0,
	1015, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	516, 0, 367, 0, 225, 1023, 1022, 1020, 1025, 0,
	1028, 0, 805, 42, 46, 51, 52, 0, 0, 0,
	0, 0, 0, 462, 582, 587, 589, 590, 0, 0,
	593, 594, 595, 596, 0, 0, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 624, 625, 626, 627,
	628, 629, 609, 610, 611, 612, 613, 614, 621, 0,
	0, 618, 0, 0, 0, 715, 0, 1012, 0, 1013,
	0, 659, 661, 662, 663, 664, 665, 660, 0, 0,
	0, 0, 651, 653, 695, 0, 515, 524, 525, 367,
	0, 0, 31, 0, 48, 0, 53, 0, 0, 0,
	0, 0, 339, 329, 571, 0, 0, 577, 0, 583,
	591, 592, 597, 598, 615, 0, 0, 617, 0, 0,
	723, 0, 702, 716, 0, 0, 1016, 516, 516, 516,
	516, 0, 696, 517, 1038, 0, 0, 521, 522, 526,
	1026, 1029, 22, 0, 0, 45, 0, 54, 0, 56,
	57, 338, 0, 551, 0, 0, 0, 0, 0, 580,
	0, 622, 623, 616, 619, 620, 693, 701, 703, 704,
	705, 0, 717, 718, 719, 721, 646, 647, 648, 649,
	0, 0, 519, 0, 21, 0, 32, 0, 34, 36,
	37, 669, 43, 47, 55, 340, 553, 0, 572, 0,
	0, 0, 0, 0, 0, 0, 694, 706, 0, 707,
	0, 0, 0, 650, 518, 520, 23, 24, 0, 33,
	0, 0, 550, 0, 582, 573, 0, 575, 0, 0,
	0, 0, 708, 710, 711, 0, 0, 709, 0, 0,
	35, 670, 0, 555, 0, 569, 574, 576, 0, 581,
	579, 712, 714, 713, 25, 26, 27, 0, 554, 0,
	567, 552, 0, 578, 671, 556, -2, 0, 570, 557,
	-2, 0, 565, 0, 558, 566, 0, 561, 0, 0,
	560, 0, -2, 0, 562, -2, 0, 568,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 110, 102, 3,
	53, 55, 107, 105, 54, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 455,
	90, 89, 91, 3, 456, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:508
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:514
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:537
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:541
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 21:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:547
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:562
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:566
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:572
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:576
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:582
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:589
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:598
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:602
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:606
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:619
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:625
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:634
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:645
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:649
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:655
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:659
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:665
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:689
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:708
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:712
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:717
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:721
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:729
		{
			yyVAL.str = ""
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:733
		{
			yyVAL.str = yyDollar[3].str
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:738
		{
			yyVAL.str = "\n"
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:742
		{
			yyVAL.str = yyDollar[3].str
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:747
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:751
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:775
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:779
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:785
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:791
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:809
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:826
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:849
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:853
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:857
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:862
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:866
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:882
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:890
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:900
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:904
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:914
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:924
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:934
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:940
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:946
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:953
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:961
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:969
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:973
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:977
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:981
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:987
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:991
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:997
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1004
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1013
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1017
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1023
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1027
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1031
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1035
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1039
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1043
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1047
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1051
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1055
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1059
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1063
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1067
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1071
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1075
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1079
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1083
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1087
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1091
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1163
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1169
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1177
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1181
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1185
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1189
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1193
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1207
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1223
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1230
		{
			yyVAL.str = yyDollar[3].str
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1236
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1240
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1246
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1254
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1263
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1271
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1279
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1302
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1325
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1332
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1339
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1347
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1354
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1361
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1370
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1374
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1378
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1384
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1388
		{
			yyVAL.str = yyDollar[1].str
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1395
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1406
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1412
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1417
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1421
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1425
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1429
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1433
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1437
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1441
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1445
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1451
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1455
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1459
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1463
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1468
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1473
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1479
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1483
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1489
		{
			yyLOCAL = &tree.Update{
				Table:   yyDollar[2].tableExprUnion(),
				Exprs:   yyDollar[4].updateExprsUnion(),
				Where:   yyDollar[5].whereUnion(),
				OrderBy: yyDollar[6].orderByUnion(),
				Limit:   yyDollar[7].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1502
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1506
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1512
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1521
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1527
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1532
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1537
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1541
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1545
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1549
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1557
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1565
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1575
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1598
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1602
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1608
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1614
		{
			yyVAL.str = yyDollar[1].str
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1619
		{
			yyVAL.str = "true"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1620
		{
			yyVAL.str = "false"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1621
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1626
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1636
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1647
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1660
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1664
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1669
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1673
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1679
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1683
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1689
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1693
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1697
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1701
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1705
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1709
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1715
		{
			yyVAL.item = nil
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1720
		{
			yyVAL.item = nil
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1742
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1746
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1752
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1766
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1776
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1785
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1789
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1793
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1799
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1805
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1811
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1817
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1827
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1839
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1843
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1849
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1861
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1874
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1878
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1883
		{
			yyVAL.str = ""
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1887
		{
			yyVAL.str = yyDollar[2].str
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1893
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1906
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1910
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1916
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1920
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1926
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1930
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1939
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1943
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1947
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1963
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1972
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1981
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1991
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1997
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2003
		{
			yyLOCAL = &tree.Delete{
				Table:   yyDollar[3].tableExprUnion(),
				Where:   yyDollar[4].whereUnion(),
				OrderBy: yyDollar[5].orderByUnion(),
				Limit:   yyDollar[6].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2018
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2027
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2034
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2040
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2048
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2055
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2062
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2081
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2085
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2089
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2095
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2104
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2108
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2114
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2118
		{
			yyVAL.str = yyDollar[3].str
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2124
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2128
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2134
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2139
		{
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2143
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2154
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2161
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2166
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2170
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2176
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2180
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2186
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2190
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2195
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2199
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2212
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2219
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2226
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2244
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2263
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2269
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2276
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2280
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2293
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2297
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2302
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2306
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2313
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2318
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2325
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2331
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2335
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2339
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2343
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2347
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2351
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2357
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2364
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2373
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2377
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2383
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2391
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2395
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2400
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2404
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2410
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2414
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2418
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2427
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2433
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2439
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2443
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2449
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2454
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2458
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2462
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2469
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2473
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2479
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2483
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2493
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2503
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2525
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2541
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2551
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2562
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2580
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2584
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2588
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2597
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2601
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2606
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2610
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2625
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2629
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2635
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2639
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2643
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2647
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2652
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2660
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2666
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2674
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2678
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2688
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2697
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2707
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2716
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2726
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2730
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2740
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2744
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2748
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2752
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2758
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2762
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2768
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2774
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2778
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2782
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2788
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2792
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2798
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2802
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2808
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2812
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2818
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2822
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:2835
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2840
		{
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2841
		{
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:2845
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2857
		{
			yyVAL.str = ""
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2861
		{
			yyVAL.str = yyDollar[1].str
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2865
		{
			yyVAL.str = yyDollar[2].str
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2874
		{
			yyVAL.str = ""
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2878
		{
			yyVAL.str = yyDollar[1].str
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2882
		{
			yyVAL.str = yyDollar[2].str
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2886
		{
			yyVAL.str = yyDollar[1].str
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2890
		{
			yyVAL.str = yyDollar[2].str
		}
	case 461:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2920
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2930
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2941
		{
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2946
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2956
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2960
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2966
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2970
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2976
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2980
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2984
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2988
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2994
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3001
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3006
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3011
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3016
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3022
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3026
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3030
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3036
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3040
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3044
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3048
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3054
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3058
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3064
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3077
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3081
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3085
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3090
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3094
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3101
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3107
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3115
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3122
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3130
		{
			yyVAL.str = yyDollar[1].str
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3136
		{
			yyVAL.str = yyDollar[1].str
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3146
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3155
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3159
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3165
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3169
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3173
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3182
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3186
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3190
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3194
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3200
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3219
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3223
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3245
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3249
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3253
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3257
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3261
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3267
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3271
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3277
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3282
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3287
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3291
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3295
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3299
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3303
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3309
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3323
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3327
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3332
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3336
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3342
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3346
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3352
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3356
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3360
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3365
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3369
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3375
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3387
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3391
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3396
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3400
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3410
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3414
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3423
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3427
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3433
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3437
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3443
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3452
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3462
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3466
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3472
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3476
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3482
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3489
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3498
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3502
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3507
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3511
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3516
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3520
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3530
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3534
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3545
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3553
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3561
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3569
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3580
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3590
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3600
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3604
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3609
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3613
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3618
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3622
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3628
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3632
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3636
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3642
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3646
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3650
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3654
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3658
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3662
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3666
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3670
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3674
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3678
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3682
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3686
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3690
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3694
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3698
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3702
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3706
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3710
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3714
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3718
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3722
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3726
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3730
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3734
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3738
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3742
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3746
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3750
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3754
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3761
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3765
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3771
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3776
		{
			yyVAL.str = ""
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3780
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3784
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3790
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3794
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3798
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3802
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3806
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3810
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3824
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3828
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3837
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3842
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3848
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3855
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3859
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3865
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3869
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3875
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3885
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3891
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3900
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3909
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3932
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3941
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3951
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3959
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3965
		{
			yyVAL.str = ""
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3969
		{
			yyVAL.str = yyDollar[1].str
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3979
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3985
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3991
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4005
		{
			yyVAL.str = ""
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:4012
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4018
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4022
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4026
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4037
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4041
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4045
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4050
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4054
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4060
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4064
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4070
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4074
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4078
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4082
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4086
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4090
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4094
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4098
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4102
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4106
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4110
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4114
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4118
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4128
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4132
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4137
		{
			yyVAL.str = ""
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4141
		{
			yyVAL.str = yyDollar[1].str
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4147
		{
			yyVAL.str = ""
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4151
		{
			yyVAL.str = yyDollar[2].str
		}
	case 701:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4157
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4168
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4178
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4185
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4192
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4199
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4208
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4214
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4220
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4224
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4228
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4232
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4236
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4241
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4248
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4252
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4256
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4261
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4265
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4270
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4274
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4290
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4296
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4300
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4304
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4308
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4312
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4316
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4320
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4324
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4328
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4332
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4336
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4340
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4344
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4350
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4354
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4358
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4362
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4366
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4370
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4374
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4378
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4382
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4386
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4390
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4394
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4399
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4407
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4411
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4415
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4424
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4428
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4432
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4436
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4440
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4445
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4449
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4454
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4458
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4464
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4468
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4474
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4484
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4497
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4510
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4522
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4536
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4551
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4566
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4583
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4598
		{
		}
	case 784:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4604
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4613
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4621
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4629
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4638
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4647
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4656
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4665
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4674
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4683
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4692
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4701
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4710
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4719
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4728
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4744
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4752
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4760
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4768
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4776
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4785
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4793
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4802
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4811
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4819
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4827
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4836
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4846
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			a1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			a2 := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{a1, a2},
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4867
		{
			yyVAL.str = yyDollar[1].str
		}
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4903
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4915
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4929
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4937
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4944
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4951
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4963
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4971
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4982
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4991
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5000
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5008
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5018
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5026
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:5034
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5044
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5048
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5054
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5058
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5077
		{
		}
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5079
		{
		}
	case 908:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5119
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5129
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5133
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5137
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5143
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5148
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5152
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5158
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5162
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5169
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5173
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5177
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5185
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5189
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5193
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5197
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5201
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5206
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5211
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5217
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5221
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5225
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5229
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5236
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5240
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5246
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5250
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5254
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5258
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5262
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5266
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5270
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5274
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5280
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5284
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5290
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5294
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5301
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5305
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5309
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5315
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5319
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5323
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5327
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5331
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5335
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5339
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5345
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5349
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5353
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5357
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5363
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5367
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5380
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5385
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5389
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5393
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5397
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5411
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5415
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5431
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5442
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5447
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5453
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5465
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5477
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5489
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5502
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5515
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5528
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5541
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5554
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5567
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5580
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5593
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5606
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5619
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5634
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5657
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5694
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5742
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5759
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5771
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5786
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5806
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5826
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5842
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5855
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5868
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5881
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5894
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5906
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5918
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5930
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5942
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5954
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5966
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5978
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5990
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6002
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6015
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6030
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6053
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6058
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6064
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6071
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6075
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6080
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6084
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6090
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6096
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6103
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6110
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6119
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6126
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6133
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6142
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6146
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6150
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6156
		{
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6158
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6168
		{
			yyVAL.str = ""
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6172
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
