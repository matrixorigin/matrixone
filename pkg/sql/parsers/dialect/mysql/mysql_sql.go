// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CENTROIDX = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const CLONE = 57659
const MO = 57660
const BRANCH = 57661
const LOG = 57662
const REVERT = 57663
const REBASE = 57664
const DIFF = 57665
const CONFLICT = 57666
const CONFLICT_FAIL = 57667
const CONFLICT_SKIP = 57668
const CONFLICT_ACCEPT = 57669
const INCREMENT = 57670
const CYCLE = 57671
const MINVALUE = 57672
const PUBLICATION = 57673
const SUBSCRIPTIONS = 57674
const PUBLICATIONS = 57675
const PROPERTIES = 57676
const PARSER = 57677
const VISIBLE = 57678
const INVISIBLE = 57679
const BTREE = 57680
const HASH = 57681
const RTREE = 57682
const BSI = 57683
const IVFFLAT = 57684
const MASTER = 57685
const HNSW = 57686
const ZONEMAP = 57687
const LEADING = 57688
const BOTH = 57689
const TRAILING = 57690
const UNKNOWN = 57691
const LISTS = 57692
const OP_TYPE = 57693
const REINDEX = 57694
const EF_SEARCH = 57695
const EF_CONSTRUCTION = 57696
const M = 57697
const ASYNC = 57698
const EXPIRE = 57699
const ACCOUNT = 57700
const ACCOUNTS = 57701
const UNLOCK = 57702
const DAY = 57703
const NEVER = 57704
const PUMP = 57705
const MYSQL_COMPATIBILITY_MODE = 57706
const UNIQUE_CHECK_ON_AUTOINCR = 57707
const MODIFY = 57708
const CHANGE = 57709
const SECOND = 57710
const ASCII = 57711
const COALESCE = 57712
const COLLATION = 57713
const HOUR = 57714
const MICROSECOND = 57715
const MINUTE = 57716
const MONTH = 57717
const QUARTER = 57718
const REPEAT = 57719
const REVERSE = 57720
const ROW_COUNT = 57721
const WEEK = 57722
const REVOKE = 57723
const FUNCTION = 57724
const PRIVILEGES = 57725
const TABLESPACE = 57726
const EXECUTE = 57727
const SUPER = 57728
const GRANT = 57729
const OPTION = 57730
const REFERENCES = 57731
const REPLICATION = 57732
const SLAVE = 57733
const CLIENT = 57734
const USAGE = 57735
const RELOAD = 57736
const FILE = 57737
const TEMPORARY = 57738
const ROUTINE = 57739
const EVENT = 57740
const SHUTDOWN = 57741
const NULLX = 57742
const AUTO_INCREMENT = 57743
const APPROXNUM = 57744
const SIGNED = 57745
const UNSIGNED = 57746
const ZEROFILL = 57747
const ENGINES = 57748
const LOW_CARDINALITY = 57749
const AUTOEXTEND_SIZE = 57750
const ADMIN_NAME = 57751
const RANDOM = 57752
const SUSPEND = 57753
const ATTRIBUTE = 57754
const HISTORY = 57755
const REUSE = 57756
const CURRENT = 57757
const OPTIONAL = 57758
const FAILED_LOGIN_ATTEMPTS = 57759
const PASSWORD_LOCK_TIME = 57760
const UNBOUNDED = 57761
const SECONDARY = 57762
const RESTRICTED = 57763
const USER = 57764
const IDENTIFIED = 57765
const CIPHER = 57766
const ISSUER = 57767
const X509 = 57768
const SUBJECT = 57769
const SAN = 57770
const REQUIRE = 57771
const SSL = 57772
const NONE = 57773
const PASSWORD = 57774
const SHARED = 57775
const EXCLUSIVE = 57776
const MAX_QUERIES_PER_HOUR = 57777
const MAX_UPDATES_PER_HOUR = 57778
const MAX_CONNECTIONS_PER_HOUR = 57779
const MAX_USER_CONNECTIONS = 57780
const FORMAT = 57781
const VERBOSE = 57782
const CONNECTION = 57783
const TRIGGERS = 57784
const PROFILES = 57785
const LOAD = 57786
const INLINE = 57787
const INFILE = 57788
const TERMINATED = 57789
const OPTIONALLY = 57790
const ENCLOSED = 57791
const ESCAPED = 57792
const STARTING = 57793
const LINES = 57794
const ROWS = 57795
const IMPORT = 57796
const DISCARD = 57797
const JSONTYPE = 57798
const MODUMP = 57799
const OVER = 57800
const PRECEDING = 57801
const FOLLOWING = 57802
const GROUPS = 57803
const DATABASES = 57804
const TABLES = 57805
const SEQUENCES = 57806
const EXTENDED = 57807
const FULL = 57808
const PROCESSLIST = 57809
const FIELDS = 57810
const COLUMNS = 57811
const OPEN = 57812
const ERRORS = 57813
const WARNINGS = 57814
const INDEXES = 57815
const SCHEMAS = 57816
const NODE = 57817
const LOCKS = 57818
const ROLES = 57819
const TABLE_NUMBER = 57820
const COLUMN_NUMBER = 57821
const TABLE_VALUES = 57822
const TABLE_SIZE = 57823
const NAMES = 57824
const GLOBAL = 57825
const PERSIST = 57826
const SESSION = 57827
const ISOLATION = 57828
const LEVEL = 57829
const READ = 57830
const WRITE = 57831
const ONLY = 57832
const REPEATABLE = 57833
const COMMITTED = 57834
const UNCOMMITTED = 57835
const SERIALIZABLE = 57836
const LOCAL = 57837
const EVENTS = 57838
const PLUGINS = 57839
const CURRENT_TIMESTAMP = 57840
const DATABASE = 57841
const CURRENT_TIME = 57842
const LOCALTIME = 57843
const LOCALTIMESTAMP = 57844
const UTC_DATE = 57845
const UTC_TIME = 57846
const UTC_TIMESTAMP = 57847
const REPLACE = 57848
const CONVERT = 57849
const SEPARATOR = 57850
const TIMESTAMPDIFF = 57851
const CURRENT_DATE = 57852
const CURRENT_USER = 57853
const CURRENT_ROLE = 57854
const SECOND_MICROSECOND = 57855
const MINUTE_MICROSECOND = 57856
const MINUTE_SECOND = 57857
const HOUR_MICROSECOND = 57858
const HOUR_SECOND = 57859
const HOUR_MINUTE = 57860
const DAY_MICROSECOND = 57861
const DAY_SECOND = 57862
const DAY_MINUTE = 57863
const DAY_HOUR = 57864
const YEAR_MONTH = 57865
const SQL_TSI_HOUR = 57866
const SQL_TSI_DAY = 57867
const SQL_TSI_WEEK = 57868
const SQL_TSI_MONTH = 57869
const SQL_TSI_QUARTER = 57870
const SQL_TSI_YEAR = 57871
const SQL_TSI_SECOND = 57872
const SQL_TSI_MINUTE = 57873
const RECURSIVE = 57874
const CONFIG = 57875
const DRAINER = 57876
const SOURCE = 57877
const STREAM = 57878
const HEADERS = 57879
const CONNECTOR = 57880
const CONNECTORS = 57881
const DAEMON = 57882
const PAUSE = 57883
const CANCEL = 57884
const TASK = 57885
const RESUME = 57886
const MATCH = 57887
const AGAINST = 57888
const BOOLEAN = 57889
const LANGUAGE = 57890
const WITH = 57891
const QUERY = 57892
const EXPANSION = 57893
const WITHOUT = 57894
const VALIDATION = 57895
const UPGRADE = 57896
const RETRY = 57897
const ADDDATE = 57898
const BIT_AND = 57899
const BIT_OR = 57900
const BIT_XOR = 57901
const CAST = 57902
const COUNT = 57903
const APPROX_COUNT = 57904
const APPROX_COUNT_DISTINCT = 57905
const SERIAL_EXTRACT = 57906
const APPROX_PERCENTILE = 57907
const CURDATE = 57908
const CURTIME = 57909
const DATE_ADD = 57910
const DATE_SUB = 57911
const EXTRACT = 57912
const GROUP_CONCAT = 57913
const MAX = 57914
const MID = 57915
const MIN = 57916
const NOW = 57917
const POSITION = 57918
const SESSION_USER = 57919
const STD = 57920
const STDDEV = 57921
const MEDIAN = 57922
const CLUSTER_CENTERS = 57923
const KMEANS = 57924
const STDDEV_POP = 57925
const STDDEV_SAMP = 57926
const SUBDATE = 57927
const SUBSTR = 57928
const SUBSTRING = 57929
const SUM = 57930
const SYSDATE = 57931
const SYSTEM_USER = 57932
const TRANSLATE = 57933
const TRIM = 57934
const VARIANCE = 57935
const VAR_POP = 57936
const VAR_SAMP = 57937
const AVG = 57938
const RANK = 57939
const ROW_NUMBER = 57940
const DENSE_RANK = 57941
const BIT_CAST = 57942
const BITMAP_BIT_POSITION = 57943
const BITMAP_BUCKET_NUMBER = 57944
const BITMAP_COUNT = 57945
const BITMAP_CONSTRUCT_AGG = 57946
const BITMAP_OR_AGG = 57947
const NEXTVAL = 57948
const SETVAL = 57949
const CURRVAL = 57950
const LASTVAL = 57951
const ARROW = 57952
const ROW = 57953
const OUTFILE = 57954
const HEADER = 57955
const MAX_FILE_SIZE = 57956
const FORCE_QUOTE = 57957
const PARALLEL = 57958
const STRICT = 57959
const UNUSED = 57960
const BINDINGS = 57961
const DO = 57962
const DECLARE = 57963
const LOOP = 57964
const WHILE = 57965
const LEAVE = 57966
const ITERATE = 57967
const UNTIL = 57968
const CALL = 57969
const PREV = 57970
const SLIDING = 57971
const FILL = 57972
const SPBEGIN = 57973
const BACKEND = 57974
const SERVERS = 57975
const HANDLER = 57976
const PERCENT = 57977
const SAMPLE = 57978
const MO_TS = 57979
const PITR = 57980
const RECOVERY_WINDOW = 57981
const INTERNAL = 57982
const CDC = 57983
const GROUPING = 57984
const SETS = 57985
const CUBE = 57986
const ROLLUP = 57987
const LOGSERVICE = 57988
const REPLICAS = 57989
const STORES = 57990
const SETTINGS = 57991
const KILL = 57992
const BACKUP = 57993
const FILESYSTEM = 57994
const PARALLELISM = 57995
const RESTORE = 57996
const QUERY_RESULT = 57997

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CENTROIDX",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"CLONE",
	"MO",
	"BRANCH",
	"LOG",
	"REVERT",
	"REBASE",
	"DIFF",
	"CONFLICT",
	"CONFLICT_FAIL",
	"CONFLICT_SKIP",
	"CONFLICT_ACCEPT",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"HNSW",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EF_SEARCH",
	"EF_CONSTRUCTION",
	"M",
	"ASYNC",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"INTERNAL",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:13126

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 143,
	11, 817,
	22, 817,
	-2, 810,
	-1, 170,
	246, 1271,
	248, 1147,
	-2, 1202,
	-1, 197,
	44, 640,
	248, 640,
	275, 647,
	276, 647,
	490, 640,
	-2, 675,
	-1, 237,
	676, 2048,
	-2, 539,
	-1, 551,
	676, 2172,
	-2, 414,
	-1, 609,
	676, 2231,
	-2, 412,
	-1, 610,
	676, 2232,
	-2, 413,
	-1, 611,
	676, 2233,
	-2, 415,
	-1, 753,
	327, 182,
	462, 182,
	463, 182,
	-2, 1946,
	-1, 820,
	86, 1730,
	-2, 2108,
	-1, 821,
	86, 1749,
	-2, 2079,
	-1, 825,
	86, 1750,
	-2, 2107,
	-1, 859,
	86, 1657,
	-2, 2312,
	-1, 860,
	86, 1658,
	-2, 2311,
	-1, 861,
	86, 1659,
	-2, 2301,
	-1, 862,
	86, 2273,
	-2, 2294,
	-1, 863,
	86, 2274,
	-2, 2295,
	-1, 864,
	86, 2275,
	-2, 2303,
	-1, 865,
	86, 2276,
	-2, 2283,
	-1, 866,
	86, 2277,
	-2, 2292,
	-1, 867,
	86, 2278,
	-2, 2304,
	-1, 868,
	86, 2279,
	-2, 2305,
	-1, 869,
	86, 2280,
	-2, 2310,
	-1, 870,
	86, 2281,
	-2, 2315,
	-1, 871,
	86, 2282,
	-2, 2316,
	-1, 872,
	86, 1726,
	-2, 2146,
	-1, 873,
	86, 1727,
	-2, 1930,
	-1, 874,
	86, 1728,
	-2, 2155,
	-1, 875,
	86, 1729,
	-2, 1939,
	-1, 877,
	86, 1732,
	-2, 1947,
	-1, 879,
	86, 1734,
	-2, 2179,
	-1, 881,
	86, 1737,
	-2, 1968,
	-1, 883,
	86, 1739,
	-2, 2191,
	-1, 884,
	86, 1740,
	-2, 2190,
	-1, 885,
	86, 1741,
	-2, 2015,
	-1, 886,
	86, 1742,
	-2, 2103,
	-1, 889,
	86, 1745,
	-2, 2202,
	-1, 891,
	86, 1747,
	-2, 2205,
	-1, 892,
	86, 1748,
	-2, 2207,
	-1, 893,
	86, 1751,
	-2, 2215,
	-1, 894,
	86, 1752,
	-2, 2088,
	-1, 895,
	86, 1753,
	-2, 2133,
	-1, 896,
	86, 1754,
	-2, 2098,
	-1, 897,
	86, 1755,
	-2, 2123,
	-1, 908,
	86, 1635,
	-2, 2306,
	-1, 909,
	86, 1636,
	-2, 2307,
	-1, 910,
	86, 1637,
	-2, 2308,
	-1, 1017,
	485, 675,
	486, 675,
	-2, 641,
	-1, 1068,
	128, 1930,
	139, 1930,
	159, 1930,
	-2, 1903,
	-1, 1189,
	22, 844,
	-2, 793,
	-1, 1299,
	11, 817,
	22, 817,
	-2, 1512,
	-1, 1383,
	22, 844,
	-2, 793,
	-1, 1747,
	86, 1802,
	-2, 2105,
	-1, 1748,
	86, 1803,
	-2, 2106,
	-1, 2369,
	87, 1017,
	-2, 1023,
	-1, 2385,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	288, 1194,
	-2, 1187,
	-1, 2550,
	11, 817,
	22, 817,
	-2, 958,
	-1, 2584,
	87, 1889,
	160, 1889,
	-2, 2090,
	-1, 2585,
	87, 1889,
	160, 1889,
	-2, 2089,
	-1, 2586,
	87, 1865,
	160, 1865,
	-2, 2076,
	-1, 2587,
	87, 1866,
	160, 1866,
	-2, 2081,
	-1, 2588,
	87, 1867,
	160, 1867,
	-2, 2003,
	-1, 2589,
	87, 1868,
	160, 1868,
	-2, 1996,
	-1, 2590,
	87, 1869,
	160, 1869,
	-2, 1920,
	-1, 2591,
	87, 1870,
	160, 1870,
	-2, 2078,
	-1, 2592,
	87, 1871,
	160, 1871,
	-2, 2001,
	-1, 2593,
	87, 1872,
	160, 1872,
	-2, 1995,
	-1, 2594,
	87, 1873,
	160, 1873,
	-2, 1983,
	-1, 2595,
	87, 1889,
	160, 1889,
	-2, 1984,
	-1, 2596,
	87, 1889,
	160, 1889,
	-2, 1985,
	-1, 2598,
	87, 1878,
	160, 1878,
	-2, 2123,
	-1, 2599,
	87, 1855,
	160, 1855,
	-2, 2108,
	-1, 2600,
	87, 1887,
	160, 1887,
	-2, 2079,
	-1, 2601,
	87, 1887,
	160, 1887,
	-2, 2107,
	-1, 2602,
	87, 1887,
	160, 1887,
	-2, 1948,
	-1, 2603,
	87, 1885,
	160, 1885,
	-2, 2098,
	-1, 2604,
	87, 1882,
	160, 1882,
	-2, 1973,
	-1, 2605,
	86, 1836,
	87, 1836,
	160, 1836,
	420, 1836,
	421, 1836,
	422, 1836,
	-2, 1919,
	-1, 2606,
	86, 1837,
	87, 1837,
	160, 1837,
	420, 1837,
	421, 1837,
	422, 1837,
	-2, 1921,
	-1, 2607,
	86, 1838,
	87, 1838,
	160, 1838,
	420, 1838,
	421, 1838,
	422, 1838,
	-2, 2151,
	-1, 2608,
	86, 1840,
	87, 1840,
	160, 1840,
	420, 1840,
	421, 1840,
	422, 1840,
	-2, 2080,
	-1, 2609,
	86, 1842,
	87, 1842,
	160, 1842,
	420, 1842,
	421, 1842,
	422, 1842,
	-2, 2058,
	-1, 2610,
	86, 1844,
	87, 1844,
	160, 1844,
	420, 1844,
	421, 1844,
	422, 1844,
	-2, 2002,
	-1, 2611,
	86, 1846,
	87, 1846,
	160, 1846,
	420, 1846,
	421, 1846,
	422, 1846,
	-2, 1979,
	-1, 2612,
	86, 1847,
	87, 1847,
	160, 1847,
	420, 1847,
	421, 1847,
	422, 1847,
	-2, 1980,
	-1, 2613,
	86, 1849,
	87, 1849,
	160, 1849,
	420, 1849,
	421, 1849,
	422, 1849,
	-2, 1918,
	-1, 2614,
	87, 1892,
	160, 1892,
	420, 1892,
	421, 1892,
	422, 1892,
	-2, 1953,
	-1, 2615,
	87, 1892,
	160, 1892,
	420, 1892,
	421, 1892,
	422, 1892,
	-2, 1969,
	-1, 2616,
	87, 1895,
	160, 1895,
	420, 1895,
	421, 1895,
	422, 1895,
	-2, 1949,
	-1, 2617,
	87, 1895,
	160, 1895,
	420, 1895,
	421, 1895,
	422, 1895,
	-2, 2018,
	-1, 2618,
	87, 1892,
	160, 1892,
	420, 1892,
	421, 1892,
	422, 1892,
	-2, 2040,
	-1, 2849,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	288, 1194,
	-2, 1188,
	-1, 2869,
	84, 737,
	160, 737,
	-2, 1386,
	-1, 3307,
	198, 1194,
	312, 1475,
	-2, 1447,
	-1, 3507,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	-2, 1327,
	-1, 3510,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	-2, 1327,
	-1, 3522,
	84, 737,
	160, 737,
	-2, 1386,
	-1, 3543,
	198, 1194,
	312, 1475,
	-2, 1448,
	-1, 3701,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	-2, 1328,
	-1, 3727,
	87, 1289,
	160, 1289,
	-2, 1194,
	-1, 3876,
	87, 1289,
	160, 1289,
	-2, 1194,
	-1, 4049,
	87, 1293,
	160, 1293,
	-2, 1194,
	-1, 4104,
	87, 1294,
	160, 1294,
	-2, 1194,
}

const yyPrivate = 57344

const yyLast = 55831

var yyAct = [...]int{
	787, 763, 4157, 789, 4126, 2900, 226, 4149, 1648, 2017,
	4053, 1727, 3528, 3627, 4059, 4052, 3945, 4060, 3876, 3293,
	3968, 772, 2128, 3923, 4003, 3327, 3403, 3755, 3557, 3854,
	2894, 765, 3821, 3914, 3875, 3404, 3946, 1335, 1787, 1492,
	3689, 3789, 817, 2897, 3845, 2806, 1067, 652, 1190, 3631,
	3924, 3488, 3926, 3493, 3622, 1498, 1774, 2436, 1962, 3544,
	3302, 3708, 2872, 3263, 671, 3224, 677, 677, 3698, 3248,
	1184, 1730, 677, 695, 704, 3401, 3671, 704, 211, 69,
	3511, 3455, 3015, 3480, 3703, 2115, 2130, 3251, 2992, 2112,
	802, 143, 3016, 3322, 3014, 2923, 143, 1560, 3304, 3311,
	2077, 3513, 3011, 2544, 2811, 3446, 2153, 2582, 37, 2709,
	1792, 3084, 2185, 2227, 716, 2580, 3044, 2439, 3366, 1553,
	2837, 3229, 3002, 1977, 3231, 3227, 3273, 3222, 712, 3310,
	2397, 2341, 1180, 3132, 2674, 2850, 3192, 2211, 3058, 760,
	755, 1467, 142, 2223, 2652, 1789, 2340, 1637, 3225, 1723,
	2194, 2193, 2186, 2634, 1633, 2158, 948, 2108, 1885, 2545,
	683, 1641, 2528, 143, 2222, 2081, 2078, 1457, 3226, 2826,
	2821, 2905, 2925, 988, 2437, 2523, 2864, 2007, 2396, 1463,
	6, 701, 222, 8, 221, 7, 1938, 1721, 1726, 2385,
	2578, 1128, 1788, 2224, 1626, 1569, 1538, 1638, 764, 670,
	1600, 1532, 652, 2376, 1976, 2432, 754, 1781, 1712, 1761,
	761, 2379, 36, 1206, 2746, 2192, 773, 2189, 1652, 2174,
	1607, 2257, 1670, 1934, 1060, 15, 226, 709, 226, 1720,
	1119, 1120, 1937, 1649, 1537, 1534, 2552, 677, 912, 2524,
	686, 1793, 987, 1493, 1026, 1481, 1591, 1477, 23, 718,
	24, 212, 1501, 762, 719, 1099, 27, 25, 17, 985,
	964, 208, 970, 1405, 204, 10, 1012, 1381, 715, 1336,
	996, 2231, 914, 915, 703, 689, 1267, 1268, 1269, 1266,
	3933, 1424, 2469, 1061, 33, 1076, 1267, 1268, 1269, 1266,
	3842, 2782, 978, 2745, 979, 2782, 1074, 2782, 699, 2554,
	1116, 143, 3525, 673, 1115, 3412, 1117, 1267, 1268, 1269,
	1266, 3280, 3101, 3100, 1502, 1185, 143, 2241, 143, 3660,
	3496, 1186, 3396, 2697, 2640, 2638, 2637, 2635, 1898, 700,
	651, 1614, 1610, 959, 682, 16, 1111, 1112, 210, 672,
	14, 2339, 992, 993, 1400, 1536, 3901, 973, 1073, 969,
	1094, 707, 1374, 1036, 934, 932, 1112, 697, 1460, 1461,
	1462, 1112, 1046, 2129, 2345, 3202, 1899, 2349, 1663, 1403,
	678, 3185, 1185, 3182, 756, 3187, 3184, 4138, 1515, 1892,
	2774, 2772, 1396, 1612, 3620, 1267, 1268, 1269, 1266, 3080,
	3078, 1110, 2163, 8, 3909, 7, 3796, 1267, 1268, 1269,
	1266, 3790, 3623, 3402, 2208, 951, 3928, 2188, 696, 913,
	1330, 3161, 2180, 698, 2477, 4163, 209, 209, 1075, 3922,
	209, 209, 1095, 4135, 2776, 3804, 924, 1265, 3861, 1229,
	4088, 209, 65, 200, 171, 3637, 1656, 1038, 3676, 1668,
	1037, 4031, 2683, 209, 2691, 3672, 209, 2228, 209, 65,
	200, 171, 3512, 1415, 2388, 933, 931, 209, 65, 200,
	171, 1647, 3920, 3829, 3471, 141, 1653, 1827, 2727, 1665,
	3104, 3802, 3862, 756, 1914, 3979, 1577, 1071, 1072, 1022,
	975, 1406, 968, 1410, 209, 65, 200, 171, 997, 205,
	1655, 972, 971, 1667, 205, 3092, 1409, 1089, 1084, 1079,
	1083, 1087, 1661, 209, 205, 209, 65, 200, 171, 1408,
	1041, 1039, 960, 1040, 1416, 999, 205, 934, 932, 205,
	1077, 205, 714, 209, 1660, 1092, 3159, 2387, 1449, 1082,
	205, 2239, 967, 3009, 858, 925, 1693, 1901, 1432, 2805,
	2380, 3831, 209, 65, 200, 171, 2857, 2572, 2801, 1201,
	1264, 977, 141, 3186, 1912, 3183, 966, 205, 2573, 1910,
	965, 903, 1430, 902, 904, 905, 953, 906, 907, 1511,
	1679, 2559, 1512, 1539, 2558, 1541, 205, 2560, 205, 3051,
	1090, 929, 1244, 958, 2125, 1245, 3052, 3053, 2092, 2093,
	2091, 1021, 1019, 1916, 1917, 2823, 2855, 1970, 1489, 1713,
	1093, 1991, 1717, 2653, 4028, 2824, 3647, 1198, 1499, 1500,
	956, 1035, 1047, 1247, 2803, 205, 1497, 3931, 1018, 3297,
	1496, 1499, 1500, 2798, 4063, 4064, 1716, 1080, 1613, 1611,
	991, 1257, 4087, 1729, 2777, 3295, 2328, 1262, 1070, 1043,
	1069, 998, 1031, 4024, 1209, 1212, 2858, 3930, 976, 3931,
	4017, 1091, 3930, 4016, 2822, 3929, 4015, 3912, 3929, 1204,
	4130, 4131, 3405, 2678, 3085, 1027, 4005, 3086, 2802, 3087,
	4005, 1514, 4008, 3405, 957, 677, 677, 2799, 3793, 1733,
	1195, 170, 198, 207, 199, 2243, 677, 1194, 1431, 2109,
	3942, 1081, 3915, 3916, 3917, 3918, 2947, 3419, 4033, 4034,
	2099, 1028, 1032, 1045, 197, 2829, 704, 704, 1708, 677,
	2103, 1242, 4029, 4030, 3481, 4037, 4036, 4035, 4038, 1209,
	1212, 1015, 3486, 1013, 1017, 1035, 1968, 2518, 1718, 1014,
	1011, 1010, 3244, 1016, 1001, 1002, 1000, 1003, 1004, 1005,
	1006, 2235, 1033, 3681, 1034, 2511, 3003, 1237, 3833, 3834,
	1239, 974, 1715, 3122, 2375, 1029, 1030, 2171, 1122, 1620,
	1619, 976, 3646, 3569, 4026, 2775, 750, 2808, 1088, 752,
	3648, 3120, 1307, 1076, 751, 1243, 1260, 1261, 1240, 1259,
	1044, 143, 143, 143, 1074, 1399, 196, 2688, 2475, 1232,
	963, 3621, 1025, 3079, 2997, 3932, 3238, 4062, 1024, 701,
	701, 701, 1487, 2240, 1085, 3841, 3422, 1086, 2513, 2804,
	3126, 1187, 2781, 1020, 1732, 1731, 3838, 1186, 2800, 1194,
	1525, 2514, 2515, 3678, 1913, 3658, 1186, 3450, 1224, 1911,
	1186, 2521, 1193, 3783, 1254, 2229, 1073, 3102, 669, 1513,
	2575, 1433, 3249, 3584, 2860, 4096, 1076, 3099, 2229, 2346,
	1339, 1900, 1246, 2229, 3261, 2123, 2124, 1299, 2230, 1211,
	1210, 1255, 1256, 3638, 3325, 3299, 3326, 1969, 2262, 1714,
	1112, 3961, 1112, 1112, 1112, 1203, 1233, 3323, 3324, 702,
	1112, 2246, 2248, 2249, 1112, 927, 3866, 1186, 3274, 3858,
	952, 1023, 3860, 950, 3956, 2865, 702, 994, 995, 2242,
	989, 3581, 1235, 3205, 935, 990, 1075, 1096, 2636, 1073,
	1078, 4032, 3236, 2387, 1238, 1241, 699, 699, 699, 1042,
	1615, 706, 1739, 1742, 1743, 3007, 3784, 705, 1200, 1402,
	2382, 1404, 702, 1740, 1211, 1210, 937, 677, 677, 928,
	1234, 66, 3574, 1213, 3193, 3947, 1420, 700, 700, 700,
	1423, 1189, 913, 702, 1429, 1188, 1072, 3242, 66, 3803,
	1379, 713, 2773, 1384, 1340, 1221, 1197, 1199, 1202, 172,
	172, 3250, 3963, 172, 172, 697, 697, 697, 1182, 1075,
	1217, 1218, 1223, 3677, 172, 1249, 1662, 988, 1250, 2692,
	702, 1308, 3832, 3529, 66, 3969, 172, 3294, 2899, 172,
	1301, 172, 1703, 206, 3536, 1704, 1386, 3467, 1407, 1476,
	172, 2366, 3827, 3239, 3240, 66, 1252, 1236, 1499, 1500,
	3666, 1303, 1304, 1305, 1306, 2442, 696, 696, 696, 3241,
	3585, 698, 698, 698, 1499, 1500, 1902, 172, 3812, 2828,
	3813, 3329, 677, 3464, 1488, 1527, 2110, 2895, 2896, 677,
	2899, 1495, 66, 652, 652, 3250, 172, 3212, 172, 3867,
	2509, 2517, 3859, 652, 652, 3941, 3245, 1564, 1564, 978,
	677, 979, 3812, 4152, 3813, 3466, 172, 3746, 4025, 3004,
	930, 4169, 2487, 3835, 3458, 3459, 3460, 2486, 3123, 3634,
	3807, 704, 1592, 671, 3815, 172, 2832, 2833, 1603, 1351,
	1352, 2575, 2948, 1215, 2949, 2950, 2835, 3735, 3300, 2507,
	2508, 2831, 3741, 226, 1248, 2100, 1549, 2717, 1548, 1222,
	1571, 1474, 652, 1709, 2235, 2102, 3814, 1473, 3815, 1491,
	1490, 1472, 3970, 3237, 3682, 3880, 1469, 3846, 2455, 3303,
	2247, 4051, 1181, 3181, 2435, 2458, 1172, 1168, 1169, 1170,
	1171, 2478, 2722, 1253, 2721, 2720, 2718, 3514, 2435, 757,
	3814, 1298, 3618, 1573, 1425, 1566, 2441, 683, 1526, 714,
	4002, 2443, 1466, 3408, 1645, 2452, 1535, 1385, 1251, 1650,
	1475, 1741, 1383, 1229, 1558, 1559, 1659, 1485, 2841, 2845,
	2846, 2847, 2842, 2844, 2843, 1504, 1505, 3456, 1507, 1508,
	3319, 1509, 2457, 143, 3756, 3757, 3758, 3762, 3760, 3761,
	3763, 3759, 3323, 3324, 4153, 1691, 1562, 1562, 1435, 3197,
	1694, 936, 2684, 942, 2719, 2444, 3046, 3048, 2564, 1564,
	2386, 1564, 1194, 1426, 1427, 2473, 3328, 1669, 1436, 1437,
	1438, 1439, 1440, 2232, 1442, 2098, 1456, 1441, 3063, 3064,
	1448, 1483, 1484, 1459, 2075, 1422, 2445, 2787, 1904, 2456,
	1076, 1434, 3357, 3125, 1447, 1446, 1445, 1076, 3879, 3474,
	2258, 143, 1444, 1228, 946, 1621, 1516, 1517, 143, 944,
	943, 1503, 1048, 708, 1506, 1412, 982, 983, 984, 1654,
	3748, 143, 1593, 2945, 143, 143, 1666, 3320, 1454, 1564,
	3447, 2367, 2244, 2245, 980, 1635, 1636, 143, 2668, 701,
	1547, 2795, 701, 701, 2359, 1658, 1194, 1791, 1478, 1482,
	1482, 1482, 1419, 4050, 1624, 1702, 1627, 1628, 977, 1822,
	1823, 1840, 1826, 1643, 1572, 1919, 1543, 1545, 1629, 1630,
	1841, 682, 1578, 1478, 1478, 1584, 1556, 1557, 4150, 4151,
	1920, 3742, 3743, 1848, 1604, 1850, 945, 1851, 1852, 1853,
	1686, 1687, 3737, 949, 1605, 1590, 3736, 1640, 3808, 3656,
	1644, 1036, 3925, 3199, 1725, 2358, 2976, 1728, 1918, 1036,
	938, 2723, 2724, 1113, 1114, 3134, 3133, 2936, 1118, 2451,
	2499, 2446, 939, 2449, 2937, 2938, 2939, 3709, 1194, 4171,
	3047, 4178, 3808, 4012, 1903, 1616, 3809, 2870, 1906, 3409,
	1908, 2152, 1744, 942, 1265, 2472, 1468, 1722, 1706, 1883,
	2967, 2968, 1921, 1923, 1191, 1924, 699, 1926, 1927, 699,
	699, 671, 1592, 1825, 1672, 2361, 2360, 1935, 1564, 1940,
	1941, 4165, 1943, 1527, 677, 1417, 1418, 1677, 1775, 677,
	1680, 2296, 1564, 1690, 2295, 1038, 988, 700, 1037, 1963,
	700, 700, 1689, 1038, 941, 4159, 1037, 1700, 1886, 944,
	943, 3363, 1564, 1701, 1696, 1699, 1678, 1719, 1527, 1681,
	1682, 1839, 1695, 695, 1724, 697, 2788, 1905, 697, 697,
	1036, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1990, 3321, 1049, 1411, 1772, 1773, 1763,
	4147, 2542, 1997, 1997, 2237, 1527, 1711, 1527, 1527, 1468,
	2575, 677, 677, 1710, 2064, 1935, 2068, 1265, 4106, 1564,
	2072, 2073, 3279, 3359, 3258, 2088, 696, 652, 4160, 696,
	696, 698, 4074, 1894, 698, 698, 2814, 2966, 1770, 1771,
	2871, 652, 1698, 1564, 2150, 1942, 1849, 1697, 2543, 1830,
	1831, 1832, 1994, 4071, 4065, 2378, 1944, 1229, 4047, 2815,
	2816, 3996, 1846, 1265, 1038, 1847, 2655, 1037, 3995, 3989,
	677, 1935, 1564, 4107, 2135, 3477, 677, 677, 677, 712,
	712, 3421, 1860, 1861, 2333, 1854, 2145, 2146, 2147, 2148,
	1227, 4107, 2683, 2154, 3333, 1964, 1889, 2019, 2871, 3964,
	226, 2126, 1882, 226, 226, 4075, 226, 3331, 3218, 1884,
	2066, 917, 918, 919, 920, 2087, 1939, 1982, 1890, 3191,
	1929, 2977, 2979, 2980, 2981, 2978, 4072, 2272, 2000, 2543,
	1955, 4048, 1191, 1989, 1265, 3189, 1992, 1993, 2118, 2119,
	2543, 1265, 2272, 1974, 1975, 3066, 1840, 1840, 2196, 1229,
	1971, 3363, 2415, 2095, 2104, 2097, 3952, 3259, 1840, 1840,
	1984, 1985, 2137, 2138, 2139, 2213, 2116, 2117, 1930, 2940,
	2941, 2942, 2237, 2377, 3899, 2778, 3898, 3893, 2162, 1959,
	1995, 2165, 2166, 2673, 2168, 3892, 2111, 2134, 1960, 2660,
	143, 2228, 1575, 143, 143, 2090, 143, 2428, 1963, 2207,
	2271, 3891, 1564, 2226, 1931, 1932, 1933, 2071, 1965, 1966,
	1973, 2001, 2002, 1979, 2442, 2445, 1946, 1947, 1948, 1949,
	2198, 2338, 1983, 2332, 1978, 1076, 1980, 1981, 1076, 3953,
	1267, 1268, 1269, 1266, 1988, 2331, 1074, 1076, 2065, 143,
	1987, 1996, 1998, 1267, 1268, 1269, 1266, 3900, 1074, 2401,
	2272, 2070, 1267, 1268, 1269, 1266, 2220, 1654, 2272, 2303,
	1722, 2076, 4161, 922, 143, 2105, 3890, 2094, 2203, 2096,
	1267, 1268, 1269, 1266, 2272, 3870, 2270, 1478, 3869, 2219,
	2121, 1380, 701, 2074, 1455, 1999, 1778, 1226, 1073, 2414,
	3844, 1482, 3590, 3538, 2132, 1550, 2191, 3485, 3157, 3503,
	1073, 2133, 3525, 1482, 3439, 3435, 2140, 2141, 2191, 3341,
	2089, 3041, 1855, 1856, 1857, 1858, 2268, 2159, 1862, 1863,
	1864, 1865, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874,
	1875, 1876, 1877, 3070, 1076, 917, 918, 919, 920, 2272,
	2873, 2686, 2176, 2685, 2764, 1299, 2677, 2752, 2237, 2422,
	2446, 2237, 1107, 1108, 1109, 2441, 2435, 2440, 1075, 2438,
	2443, 2744, 2699, 2272, 1227, 2575, 3539, 2197, 1963, 2681,
	1075, 2430, 3504, 2291, 2206, 2204, 3773, 3440, 3436, 2276,
	2669, 2662, 3342, 2657, 2543, 2209, 1106, 2218, 2217, 1103,
	2343, 2344, 2157, 2347, 2143, 2649, 2350, 1073, 2647, 699,
	2645, 677, 1527, 677, 1527, 677, 677, 2643, 1270, 2221,
	1674, 2400, 2334, 2362, 2444, 1316, 1300, 2401, 2215, 755,
	1265, 1214, 677, 677, 677, 1310, 2326, 2274, 2234, 2310,
	700, 1178, 2309, 2294, 1265, 1265, 1173, 677, 677, 677,
	677, 3588, 2401, 1298, 2120, 2442, 2445, 940, 2285, 2216,
	2398, 1319, 2250, 2658, 2663, 2284, 2658, 2283, 697, 2402,
	2403, 2404, 1282, 2407, 1527, 2252, 4172, 1075, 2650, 2255,
	2256, 2648, 1763, 2644, 3284, 3117, 4134, 1464, 2264, 3275,
	2644, 1465, 2273, 2259, 2401, 2333, 2470, 922, 2251, 2236,
	1527, 1520, 1521, 1510, 1523, 1524, 1683, 1528, 1529, 1530,
	1829, 1828, 1265, 790, 800, 1265, 1265, 2464, 1479, 696,
	2253, 2254, 3934, 791, 698, 792, 796, 799, 795, 793,
	794, 1265, 3843, 1829, 1828, 2353, 3957, 2355, 1265, 3710,
	1265, 1579, 1580, 1581, 1582, 1583, 1552, 1585, 1586, 1587,
	1588, 1589, 3800, 3739, 3738, 1595, 1596, 1597, 1598, 1100,
	1101, 1102, 1105, 2419, 1104, 2272, 2471, 2421, 3724, 2423,
	3276, 1554, 2237, 3685, 3517, 677, 1997, 3495, 797, 1684,
	3958, 3515, 1555, 3711, 2547, 2547, 2088, 2547, 3364, 2304,
	2305, 2446, 2307, 2327, 2329, 2330, 2441, 2435, 2440, 2314,
	2438, 2443, 3355, 3347, 3343, 3394, 1464, 652, 652, 2635,
	1465, 798, 947, 2335, 3277, 1194, 2409, 2410, 3518, 3253,
	3000, 1564, 677, 2424, 1866, 3516, 2412, 2413, 1285, 1286,
	1287, 1288, 1289, 1282, 2999, 2368, 2434, 677, 2839, 1480,
	2783, 2696, 2661, 1194, 2619, 671, 1339, 1859, 2566, 2201,
	1551, 1603, 2200, 2088, 2199, 2444, 2625, 1769, 2627, 1451,
	1450, 226, 1196, 2706, 2629, 1076, 1782, 2416, 2265, 2160,
	3071, 2621, 2427, 1766, 1768, 1765, 2550, 1767, 2408, 2433,
	1267, 1268, 1269, 1266, 2794, 2561, 2551, 2562, 2549, 3395,
	2553, 1290, 1291, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1282, 2665, 1267, 1268, 1269, 1266, 2567, 2568, 1608, 2555,
	2160, 1782, 1925, 3397, 1269, 1266, 4014, 2447, 2448, 2679,
	2453, 1266, 2226, 2577, 1267, 1268, 1269, 1266, 1073, 1564,
	3751, 1564, 3750, 1564, 3088, 2639, 2411, 2934, 1194, 2630,
	2420, 2417, 2932, 2087, 2418, 2911, 2698, 1267, 1268, 1269,
	1266, 143, 2909, 2624, 3686, 3687, 2708, 1602, 3730, 4144,
	1340, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1282, 4143,
	2570, 4168, 1564, 1194, 2516, 1844, 2522, 2730, 1273, 1274,
	1275, 1276, 1277, 1278, 1279, 1271, 1318, 2556, 2583, 4142,
	1845, 2622, 2737, 1267, 1268, 1269, 1266, 1564, 1075, 1317,
	4140, 4139, 2631, 1267, 1268, 1269, 1266, 2476, 3679, 1482,
	2479, 2480, 2481, 2482, 2483, 2484, 2485, 2571, 4078, 2488,
	2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498,
	4046, 2500, 2501, 2502, 2503, 2504, 4167, 2505, 3483, 1267,
	1268, 1269, 1266, 2766, 2620, 2767, 2785, 2786, 1609, 2574,
	2789, 2623, 2988, 2741, 2742, 1281, 1280, 1290, 1291, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1282, 4045, 3680, 2725,
	3959, 1194, 2986, 2807, 2298, 2710, 3895, 2710, 1564, 2714,
	2689, 1527, 3883, 2693, 2984, 3873, 3863, 1527, 2068, 2695,
	1543, 1545, 3791, 2973, 2738, 3713, 2869, 2690, 3484, 3712,
	2704, 3530, 2875, 3519, 3482, 2876, 3136, 3243, 3113, 2728,
	3083, 2086, 2987, 3082, 2971, 2682, 2687, 1722, 2680, 2770,
	2736, 1562, 2838, 2886, 2970, 1734, 1735, 1736, 1737, 1738,
	2671, 2969, 2985, 1194, 1267, 1268, 1269, 1266, 2961, 2955,
	2954, 2908, 1608, 2953, 2983, 3150, 1562, 2952, 1194, 1194,
	1194, 1997, 2279, 2972, 1194, 2779, 2918, 2919, 2920, 2921,
	1194, 2928, 2716, 2929, 2930, 2726, 2931, 1779, 2933, 1076,
	2851, 1783, 1784, 1785, 1786, 2700, 2701, 676, 676, 2928,
	143, 1824, 2853, 684, 1267, 1268, 1269, 1266, 2651, 1834,
	143, 2547, 2675, 2676, 2563, 2887, 2337, 2179, 2856, 2178,
	2177, 2173, 2866, 2172, 2836, 2989, 2127, 1909, 3149, 2739,
	2852, 1907, 2703, 2019, 652, 1675, 2583, 1267, 1268, 1269,
	1266, 2877, 2068, 3489, 1398, 3494, 1194, 2088, 2088, 2088,
	2088, 2088, 2088, 3230, 2889, 1267, 1268, 1269, 1266, 2818,
	4164, 2820, 1887, 1194, 2088, 4162, 2136, 2547, 3628, 1267,
	1268, 1269, 1266, 2879, 1176, 2994, 2906, 4132, 2882, 4095,
	2906, 2817, 4056, 3049, 2834, 1564, 1939, 1546, 1267, 1268,
	1269, 1266, 3836, 3837, 2868, 4094, 677, 677, 2903, 2859,
	2874, 2902, 8, 4091, 7, 4021, 4020, 3822, 2878, 1267,
	1268, 1269, 1266, 2903, 2914, 2915, 2913, 2883, 2884, 2917,
	4000, 3944, 2888, 2747, 2748, 2924, 2891, 750, 3690, 2753,
	752, 2904, 3938, 1175, 2910, 751, 3919, 2087, 2087, 2087,
	2087, 2087, 2087, 3910, 3887, 3037, 2916, 3882, 1967, 3881,
	3840, 3826, 226, 2287, 2087, 3824, 3792, 226, 3652, 3732,
	3694, 3005, 3683, 4170, 3668, 3050, 3667, 3640, 684, 3663,
	2963, 2951, 2901, 3661, 1986, 3657, 3654, 3651, 2825, 1840,
	3650, 1840, 3626, 3624, 3098, 1267, 1268, 1269, 1266, 3597,
	3594, 3017, 3592, 2885, 1267, 1268, 1269, 1266, 3112, 2993,
	3479, 2995, 3461, 3448, 1564, 3432, 3001, 3119, 3017, 3430,
	3425, 3067, 3375, 3018, 3019, 3020, 3021, 3022, 3023, 3353,
	3352, 3350, 3034, 2286, 3349, 3344, 3040, 3339, 4120, 3038,
	3072, 3639, 3039, 1887, 3338, 3076, 3578, 3254, 1887, 1887,
	3216, 2907, 143, 3427, 3057, 3215, 3206, 143, 3976, 3054,
	1267, 1268, 1269, 1266, 3153, 3201, 3198, 1076, 1267, 1268,
	1269, 1266, 1886, 1267, 1268, 1269, 1266, 3097, 143, 1076,
	1267, 1268, 1269, 1266, 2943, 2944, 1635, 1636, 3196, 2269,
	143, 1267, 1268, 1269, 1266, 2342, 3093, 3127, 2161, 2959,
	2960, 2164, 3095, 3124, 2167, 3103, 3081, 2169, 3105, 1643,
	1628, 3056, 2982, 3106, 2974, 2964, 2962, 3074, 3073, 3200,
	1629, 1630, 677, 1527, 2996, 2958, 2957, 2998, 2956, 3116,
	3207, 3208, 3209, 3211, 3121, 3213, 3214, 2796, 3089, 3094,
	3107, 3109, 3096, 1640, 1194, 3091, 1644, 3108, 2784, 2780,
	1194, 3152, 2672, 3874, 2363, 2351, 3233, 3115, 858, 857,
	4119, 2348, 2182, 2212, 2175, 1897, 3247, 1267, 1268, 1269,
	1266, 677, 3129, 1896, 3128, 1676, 3135, 1347, 1267, 1268,
	1269, 1266, 1343, 1342, 1179, 3264, 1194, 3144, 3145, 677,
	926, 677, 1194, 1194, 3148, 3972, 3817, 3816, 3141, 3805,
	3143, 2088, 2398, 3151, 3283, 3801, 3142, 1281, 1280, 1290,
	1291, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1282, 3190,
	3653, 3635, 2763, 3607, 2464, 2267, 3510, 2762, 3257, 3509,
	1267, 1268, 1269, 1266, 3507, 3476, 3309, 3444, 3312, 3442,
	3312, 3312, 3139, 3140, 3195, 1194, 3204, 3441, 3194, 1267,
	1268, 1269, 1266, 3260, 1267, 1268, 1269, 1266, 2761, 3438,
	3437, 3431, 3429, 3334, 2851, 1076, 3410, 1076, 2261, 1813,
	3400, 3399, 2266, 1076, 1564, 1564, 1074, 3330, 143, 3235,
	2275, 3296, 3298, 3287, 143, 1267, 1268, 1269, 1266, 3219,
	3386, 2087, 3385, 3285, 3220, 2903, 3267, 3217, 3188, 3155,
	1076, 3281, 3272, 1267, 1268, 1269, 1266, 3146, 3138, 3137,
	3131, 143, 3065, 3266, 2646, 3256, 2642, 2282, 2641, 3270,
	3271, 677, 2315, 2308, 2302, 2289, 2301, 3233, 1073, 3292,
	3278, 2903, 3282, 2300, 2299, 3308, 2297, 2903, 2903, 2293,
	1527, 3307, 3317, 2068, 2068, 3291, 2292, 2306, 2434, 2290,
	3286, 2281, 2311, 2312, 2313, 3288, 3289, 2316, 2317, 2318,
	2319, 2320, 2321, 2322, 2323, 2324, 2325, 3162, 3163, 3313,
	3314, 3335, 3336, 3164, 3165, 3166, 3167, 2278, 3168, 3169,
	3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3332,
	2903, 2433, 2277, 3318, 2181, 3290, 1880, 1194, 1075, 1879,
	1878, 2730, 1843, 1842, 1833, 1576, 1574, 3340, 4077, 3398,
	1293, 3994, 1297, 1337, 3971, 209, 676, 1183, 3036, 3721,
	3905, 3902, 3889, 1562, 1562, 3884, 3786, 1192, 1294, 1296,
	1292, 3785, 1295, 1281, 1280, 1290, 1291, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1282, 3360, 3361, 3345, 3348, 3767,
	1220, 3346, 3749, 1809, 3351, 3745, 677, 3354, 3723, 209,
	1806, 200, 171, 3358, 1808, 1805, 1807, 1811, 1812, 3371,
	3707, 3372, 1810, 1281, 1280, 1290, 1291, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1282, 3988, 2760, 3362, 205, 3608,
	3379, 2759, 3605, 3576, 3382, 3383, 3384, 1281, 1280, 1290,
	1291, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1282, 3378,
	3575, 3572, 3388, 1267, 1268, 1269, 1266, 3571, 1267, 1268,
	1269, 1266, 3537, 3315, 2758, 3534, 3532, 3497, 3147, 2154,
	3452, 1623, 205, 3454, 2757, 3411, 1634, 1625, 3986, 3719,
	3462, 1639, 2583, 2756, 1642, 3468, 1631, 3413, 1458, 3028,
	3414, 1267, 1268, 1269, 1266, 2990, 2912, 2862, 3433, 3417,
	3418, 1267, 1268, 1269, 1266, 2861, 2854, 2819, 3469, 2765,
	1267, 1268, 1269, 1266, 2710, 2656, 3423, 2565, 2506, 2399,
	677, 2068, 2370, 2369, 2336, 1887, 3463, 1887, 3465, 1764,
	205, 2142, 3502, 1281, 1280, 1290, 1291, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1282, 3457, 1887, 1887, 1893, 2547,
	2088, 3522, 1707, 1657, 1632, 1397, 1816, 1817, 1818, 1819,
	1820, 1821, 1814, 1815, 1382, 1378, 1377, 1376, 1375, 1374,
	3449, 1076, 3445, 1373, 3540, 3451, 1372, 1194, 1076, 1371,
	1602, 1370, 143, 1369, 1368, 1367, 3309, 1366, 1365, 143,
	1194, 1364, 1363, 3472, 1362, 1361, 1360, 3473, 1359, 1358,
	3475, 1357, 1194, 1356, 3587, 1355, 3490, 3478, 1564, 2755,
	1354, 4112, 3501, 4110, 2754, 1353, 3524, 1350, 1413, 1414,
	1349, 3508, 1348, 3492, 1346, 4061, 2751, 1345, 677, 2664,
	2068, 2667, 1344, 1341, 1194, 3570, 1267, 1268, 1269, 1266,
	2087, 1267, 1268, 1269, 1266, 1334, 1333, 1331, 1330, 1329,
	3521, 1328, 3520, 1267, 1268, 1269, 1266, 1327, 1326, 1325,
	1324, 1323, 3563, 3527, 1322, 1321, 226, 1280, 1290, 1291,
	1283, 1284, 1285, 1286, 1287, 1288, 1289, 1282, 3598, 1194,
	1320, 3601, 1315, 1314, 3582, 3577, 1313, 3579, 1312, 1311,
	1231, 3612, 1177, 3523, 3984, 2707, 3982, 3586, 2713, 3573,
	3593, 3591, 3526, 3367, 3368, 3589, 2406, 2384, 3595, 2731,
	2732, 1219, 3596, 2750, 3599, 3370, 2840, 2734, 2735, 2576,
	3603, 3655, 3541, 1522, 3600, 2749, 3602, 2184, 1230, 3377,
	1533, 3031, 3376, 2740, 3026, 3580, 3032, 3633, 3665, 3373,
	1267, 1268, 1269, 1266, 3619, 3025, 3035, 2924, 1194, 126,
	68, 1570, 1267, 1268, 1269, 1266, 143, 1562, 67, 3029,
	3630, 3629, 1734, 1887, 3030, 3024, 4013, 2702, 1194, 1564,
	1564, 3033, 3921, 2537, 2538, 3264, 3531, 3610, 3533, 3017,
	3662, 3728, 3664, 2670, 2659, 3611, 1452, 3702, 1957, 1958,
	3702, 1281, 1280, 1290, 1291, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1282, 1194, 3717, 1194, 3691, 3696, 3697, 3659,
	3498, 3499, 3500, 3674, 3720, 3252, 3722, 3505, 3506, 679,
	680, 3305, 1564, 3306, 3017, 3675, 3693, 3673, 681, 3111,
	3684, 1952, 1953, 1954, 3583, 3609, 3415, 3416, 3695, 2474,
	677, 3389, 1194, 1194, 2880, 2881, 1194, 1194, 2056, 3706,
	1617, 3705, 3670, 2654, 2694, 3524, 1671, 1076, 1915, 3716,
	2743, 2675, 2676, 2198, 1651, 2364, 3692, 2144, 143, 1225,
	3726, 3570, 3764, 3729, 3769, 3228, 1963, 3221, 3733, 3778,
	3753, 3754, 2890, 2863, 3765, 3766, 3699, 1267, 1268, 1269,
	1266, 3787, 3788, 2903, 2733, 2426, 3614, 2394, 3563, 1961,
	1928, 1829, 1828, 4123, 1564, 1393, 1394, 1391, 1392, 1389,
	1390, 3775, 2729, 1387, 1388, 3886, 2705, 3337, 1562, 1775,
	3774, 1267, 1268, 1269, 1266, 2519, 2512, 3818, 2069, 3819,
	1519, 1518, 3714, 3715, 3776, 1777, 1258, 3811, 3649, 1267,
	1268, 1269, 1266, 1267, 1268, 1269, 1266, 2202, 1728, 3381,
	1728, 3059, 2365, 2214, 3823, 3794, 3825, 1471, 3798, 1470,
	1443, 1494, 1267, 1268, 1269, 1266, 3806, 4084, 3810, 4082,
	4039, 1775, 4010, 4009, 4007, 3948, 3906, 3781, 3855, 3780,
	3718, 3849, 3828, 3625, 3434, 1887, 3407, 3406, 3392, 2459,
	2429, 1673, 3391, 3641, 1194, 3642, 3069, 1468, 4114, 4113,
	4113, 3799, 3453, 3114, 2792, 3872, 3839, 3878, 2791, 2790,
	2280, 1401, 1216, 4114, 1191, 3747, 3387, 1486, 3725, 76,
	3850, 3852, 3633, 213, 3, 3851, 2, 4136, 3731, 4137,
	1, 2525, 3868, 3864, 917, 918, 919, 920, 1194, 1191,
	2771, 1891, 1395, 1564, 921, 916, 1540, 2557, 2122, 1568,
	1076, 1895, 923, 1562, 3042, 3043, 3380, 3045, 2797, 2233,
	3885, 143, 3770, 3006, 2510, 3075, 2374, 3077, 2532, 2536,
	2537, 2538, 2533, 2541, 2534, 2539, 3894, 3246, 2535, 3847,
	2540, 1453, 981, 1835, 1688, 1208, 1887, 1685, 1207, 1205,
	1780, 1887, 804, 2187, 2991, 2965, 3777, 4122, 4156, 3927,
	3940, 4076, 4125, 2212, 1705, 788, 3907, 4001, 2532, 2536,
	2537, 2538, 2533, 2541, 2534, 2539, 3911, 3935, 2535, 3936,
	2540, 4080, 3913, 3797, 2238, 1945, 1263, 3090, 3949, 1008,
	1950, 845, 815, 1332, 1664, 3160, 3158, 3771, 3130, 1728,
	3896, 3772, 814, 3937, 3487, 2830, 3782, 3062, 3857, 1009,
	3156, 2170, 3908, 3943, 3795, 1618, 3966, 1622, 2425, 3951,
	1194, 3865, 3967, 3727, 3301, 2898, 3154, 1646, 1564, 3962,
	3535, 3991, 3645, 3643, 3960, 3644, 3998, 3981, 3983, 3985,
	3987, 3965, 720, 2101, 650, 1058, 3768, 2183, 721, 2405,
	3999, 4027, 1562, 3974, 3888, 961, 3470, 2383, 3980, 962,
	954, 2849, 2003, 2004, 1281, 1280, 1290, 1291, 1283, 1284,
	1285, 1286, 1287, 1288, 1289, 1282, 2848, 4006, 4004, 1745,
	1272, 1564, 1762, 3179, 3855, 4018, 3180, 1309, 759, 2263,
	2827, 4022, 3558, 3055, 75, 74, 4019, 73, 72, 234,
	4049, 806, 233, 3820, 3688, 3997, 4057, 4127, 785, 4040,
	784, 783, 782, 4042, 781, 780, 4043, 4044, 2530, 2531,
	2529, 2131, 2527, 2526, 2083, 3990, 2082, 2131, 2131, 2131,
	3068, 3390, 2149, 4073, 2151, 3262, 2927, 2922, 2008, 2006,
	4066, 1531, 4067, 2454, 4068, 2461, 4069, 2005, 4070, 3903,
	3904, 4083, 4058, 4085, 4086, 3424, 3636, 3977, 3978, 4081,
	4079, 3744, 2975, 3632, 1951, 2450, 3927, 2025, 4089, 2946,
	1194, 2022, 2021, 2935, 4090, 3740, 3734, 1562, 4041, 2053,
	3853, 3701, 3542, 3543, 3549, 2393, 3897, 1127, 1123, 3878,
	4102, 1125, 1126, 1124, 2715, 3356, 2431, 4105, 4104, 4103,
	3223, 2813, 3316, 2812, 2810, 4111, 4121, 4109, 4129, 2809,
	1428, 4128, 4108, 4115, 4116, 4117, 4118, 3939, 4023, 3669,
	2581, 2579, 1174, 3369, 3365, 2195, 3374, 4141, 4133, 3027,
	1562, 2210, 1194, 3110, 2084, 2080, 2079, 1098, 1097, 1599,
	2793, 45, 3008, 4145, 3966, 4146, 2520, 3830, 4148, 1956,
	955, 2381, 4154, 110, 41, 4158, 123, 109, 4155, 209,
	65, 200, 171, 3950, 188, 60, 187, 59, 3954, 3955,
	121, 185, 58, 104, 103, 120, 183, 57, 201, 218,
	217, 220, 4166, 219, 216, 192, 2632, 2633, 215, 202,
	1606, 4129, 4174, 214, 4128, 4173, 4011, 3704, 3993, 3975,
	911, 44, 43, 4158, 4175, 189, 42, 111, 141, 4179,
	209, 65, 200, 171, 61, 4100, 40, 2260, 39, 38,
	34, 13, 12, 127, 35, 22, 21, 1692, 20, 201,
	3547, 26, 205, 32, 31, 136, 192, 135, 30, 134,
	202, 1281, 1280, 1290, 1291, 1283, 1284, 1285, 1286, 1287,
	1288, 1289, 1282, 133, 132, 131, 130, 129, 128, 141,
	29, 19, 52, 51, 50, 49, 48, 47, 9, 124,
	119, 3559, 117, 28, 127, 118, 115, 1728, 116, 114,
	113, 112, 107, 205, 3550, 105, 87, 86, 85, 100,
	99, 98, 97, 96, 95, 3545, 93, 94, 1007, 84,
	3567, 3568, 83, 82, 81, 80, 3546, 102, 108, 151,
	152, 106, 153, 154, 91, 101, 150, 155, 92, 90,
	156, 89, 88, 79, 78, 77, 169, 168, 167, 166,
	165, 163, 164, 162, 161, 160, 159, 158, 157, 53,
	3426, 4092, 4093, 3551, 54, 55, 56, 3428, 4097, 4098,
	4099, 179, 2352, 178, 2354, 180, 2356, 2357, 182, 184,
	151, 152, 181, 153, 154, 186, 176, 150, 155, 174,
	177, 156, 175, 2371, 2372, 2373, 173, 70, 11, 3443,
	122, 18, 4, 170, 198, 207, 199, 125, 2389, 2390,
	2391, 2392, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 197, 191, 190, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 198, 207, 199, 125, 0,
	0, 3566, 0, 2440, 0, 0, 0, 0, 0, 0,
	2054, 0, 0, 0, 0, 2015, 0, 197, 191, 190,
	0, 0, 0, 0, 71, 0, 0, 0, 3555, 0,
	0, 0, 0, 0, 193, 194, 195, 0, 0, 0,
	0, 149, 0, 0, 0, 0, 2056, 2024, 0, 0,
	3552, 3556, 3554, 3553, 0, 0, 2057, 2058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1533, 0, 0, 0,
	0, 0, 2023, 203, 0, 193, 194, 195, 0, 0,
	0, 0, 149, 0, 0, 0, 0, 0, 1887, 0,
	2031, 3561, 3562, 0, 137, 0, 0, 0, 196, 0,
	138, 0, 0, 0, 1887, 0, 0, 3604, 0, 0,
	3606, 0, 0, 1570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 2131, 0,
	0, 3613, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3569, 137, 0, 0, 0, 196,
	0, 138, 0, 0, 0, 0, 3548, 139, 2047, 0,
	0, 0, 3560, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2054, 0, 0, 0, 139, 2015,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 66,
	0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2014, 2016, 2013, 0, 0, 2010, 0, 0,
	2056, 2024, 2035, 0, 0, 0, 0, 0, 0, 0,
	2057, 2058, 0, 2041, 147, 206, 0, 148, 0, 0,
	0, 2026, 172, 2009, 0, 0, 0, 62, 0, 0,
	66, 0, 0, 2029, 2063, 0, 2023, 2030, 2032, 2034,
	0, 2036, 2037, 2038, 2042, 2043, 2044, 2046, 2049, 2050,
	2051, 0, 3565, 0, 2031, 0, 0, 0, 2039, 2048,
	2040, 0, 0, 0, 0, 147, 206, 0, 148, 0,
	2018, 0, 0, 172, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 140, 46, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 5, 2055, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2047, 144, 145, 0, 0, 146, 3564, 0,
	0, 0, 0, 0, 0, 0, 0, 2011, 2012, 0,
	0, 0, 0, 0, 140, 46, 0, 2867, 0, 0,
	0, 63, 0, 0, 0, 2052, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2028, 0, 144, 145, 0, 0, 146, 2027,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2014, 2893, 2013, 0,
	0, 2892, 0, 2045, 0, 0, 2035, 0, 0, 0,
	0, 0, 2033, 0, 0, 0, 0, 2041, 0, 0,
	0, 0, 0, 0, 0, 2060, 2059, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2029, 2063, 0,
	0, 2030, 2032, 2034, 0, 2036, 2037, 2038, 2042, 2043,
	2044, 2046, 2049, 2050, 2051, 0, 0, 0, 0, 0,
	0, 0, 2039, 2048, 2040, 0, 0, 0, 732, 731,
	738, 728, 0, 0, 2018, 0, 0, 0, 2020, 0,
	0, 735, 736, 0, 737, 741, 1146, 0, 722, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2055,
	0, 0, 0, 0, 0, 1319, 0, 0, 0, 0,
	2062, 0, 0, 2061, 0, 0, 0, 3060, 3061, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2011, 2012, 0, 750, 0, 0, 752, 0, 0,
	0, 0, 751, 0, 0, 0, 0, 0, 0, 2052,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1267, 1268, 1269, 1266, 2028, 0, 0, 0,
	0, 0, 0, 2027, 3973, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2045, 1146, 0,
	1131, 0, 0, 0, 0, 0, 2033, 0, 0, 0,
	1813, 0, 0, 0, 0, 0, 0, 0, 0, 2060,
	2059, 1154, 1158, 1160, 1162, 1164, 1165, 1167, 0, 1172,
	1168, 1169, 1170, 1171, 0, 1149, 1150, 1151, 1152, 1129,
	1130, 1155, 1813, 1132, 0, 1134, 1135, 1136, 1137, 1133,
	1138, 1139, 1140, 1141, 1142, 1145, 1147, 1143, 1144, 1153,
	0, 4054, 0, 0, 0, 0, 0, 1157, 1159, 1161,
	1163, 1166, 2020, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 723, 725, 724, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 1148, 0, 0,
	0, 0, 749, 0, 2062, 0, 0, 2061, 0, 727,
	0, 0, 1131, 717, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 3203, 1146, 0, 0, 0, 0, 0,
	0, 4054, 0, 1154, 1158, 1160, 1162, 1164, 1165, 1167,
	0, 1172, 1168, 1169, 1170, 1171, 0, 1149, 1150, 1151,
	1152, 1129, 1130, 1155, 0, 1132, 0, 1134, 1135, 1136,
	1137, 1133, 1138, 1139, 1140, 1141, 1142, 1145, 1147, 1143,
	1144, 1153, 3255, 0, 0, 0, 0, 0, 0, 1157,
	1159, 1161, 1163, 1166, 1809, 0, 0, 4054, 0, 0,
	3268, 1806, 3269, 0, 0, 1808, 1805, 1807, 1811, 1812,
	0, 0, 0, 1810, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1809, 0, 0, 1148,
	0, 0, 0, 1806, 0, 0, 0, 1808, 1805, 1807,
	1811, 1812, 0, 0, 0, 1810, 0, 729, 733, 739,
	0, 740, 742, 0, 0, 743, 744, 745, 1131, 0,
	747, 748, 4177, 0, 2711, 2712, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1154,
	1158, 1160, 1162, 1164, 1165, 1167, 0, 1172, 1168, 1169,
	1170, 1171, 0, 1149, 1150, 1151, 1152, 1129, 1130, 1155,
	0, 1132, 0, 1134, 1135, 1136, 1137, 1133, 1138, 1139,
	1140, 1141, 1142, 1145, 1147, 1143, 1144, 1153, 0, 0,
	0, 0, 0, 0, 0, 1157, 1159, 1161, 1163, 1166,
	0, 0, 2131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1816, 1817, 1818,
	1819, 1820, 1821, 1814, 1815, 1148, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1794, 1795,
	1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1816,
	1817, 1818, 1819, 1820, 1821, 1814, 1815, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1156, 0,
	0, 0, 0, 0, 0, 0, 726, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 406, 0, 3420, 535, 568,
	557, 641, 523, 0, 0, 0, 0, 0, 0, 774,
	0, 0, 0, 341, 0, 0, 374, 572, 554, 564,
	555, 540, 541, 542, 549, 353, 543, 544, 545, 515,
	546, 516, 547, 548, 813, 571, 522, 438, 390, 589,
	588, 0, 0, 882, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 766, 0,
	1156, 803, 858, 857, 790, 800, 0, 0, 314, 232,
	517, 637, 519, 518, 791, 0, 792, 796, 799, 795,
	793, 794, 0, 873, 0, 0, 0, 0, 0, 0,
	758, 770, 0, 775, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 767, 768, 0,
	0, 2131, 0, 823, 0, 769, 0, 0, 818, 797,
	801, 0, 0, 0, 0, 304, 444, 463, 315, 433,
	476, 320, 659, 455, 310, 405, 430, 0, 0, 306,
	461, 440, 387, 364, 365, 305, 0, 424, 339, 355,
	336, 403, 798, 821, 825, 335, 896, 819, 471, 308,
	0, 470, 402, 457, 462, 388, 381, 0, 307, 459,
	386, 380, 368, 345, 897, 369, 370, 359, 414, 378,
	415, 360, 392, 391, 393, 0, 1156, 0, 0, 0,
	499, 500, 0, 0, 648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 630, 816, 0, 634,
	0, 473, 0, 0, 880, 0, 0, 0, 443, 2131,
	0, 371, 0, 0, 0, 820, 0, 427, 408, 893,
	0, 0, 425, 376, 458, 416, 464, 445, 472, 421,
	417, 298, 446, 338, 389, 311, 313, 333, 340, 342,
	346, 347, 398, 399, 411, 432, 448, 449, 450, 337,
	321, 426, 322, 357, 323, 299, 329, 327, 330, 434,
	331, 301, 412, 454, 0, 352, 422, 384, 302, 383,
	413, 453, 452, 312, 480, 486, 487, 576, 0, 492,
	665, 666, 667, 501, 0, 418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 506, 507, 508,
	510, 511, 512, 513, 577, 594, 561, 531, 494, 585,
	528, 532, 533, 362, 597, 1837, 1836, 1838, 485, 372,
	373, 0, 344, 343, 385, 303, 350, 295, 296, 660,
	877, 404, 599, 632, 633, 524, 0, 892, 872, 874,
	875, 879, 883, 884, 885, 886, 887, 889, 891, 895,
	658, 0, 578, 593, 663, 592, 655, 410, 0, 431,
	590, 537, 0, 582, 556, 0, 583, 552, 587, 0,
	526, 0, 439, 466, 478, 495, 498, 527, 612, 613,
	614, 300, 497, 616, 617, 618, 619, 620, 621, 622,
	615, 894, 559, 536, 562, 477, 539, 538, 0, 0,
	573, 824, 574, 575, 394, 395, 396, 397, 881, 600,
	319, 496, 420, 0, 560, 0, 0, 0, 0, 0,
	0, 3752, 0, 565, 566, 563, 668, 0, 623, 624,
	0, 0, 490, 491, 349, 356, 509, 358, 318, 409,
	351, 475, 366, 0, 502, 567, 503, 626, 629, 627,
	628, 401, 361, 363, 435, 367, 377, 423, 474, 407,
	428, 316, 465, 437, 382, 553, 580, 903, 876, 902,
	904, 905, 901, 906, 907, 888, 779, 0, 831, 899,
	898, 900, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 608, 607, 606, 605, 604, 603, 602,
	601, 0, 0, 550, 451, 328, 289, 324, 325, 332,
	656, 653, 456, 657, 786, 297, 530, 375, 0, 419,
	348, 595, 596, 0, 647, 865, 838, 839, 840, 776,
	841, 835, 836, 777, 837, 866, 829, 862, 863, 805,
	832, 842, 861, 843, 864, 867, 868, 908, 909, 849,
	833, 261, 910, 846, 869, 860, 859, 844, 830, 870,
	871, 812, 807, 847, 848, 834, 853, 854, 855, 778,
	826, 827, 828, 850, 851, 808, 809, 810, 811, 0,
	0, 0, 481, 482, 483, 505, 0, 467, 529, 654,
	0, 0, 0, 0, 0, 0, 0, 579, 591, 625,
	0, 635, 636, 638, 640, 856, 642, 441, 442, 649,
	0, 852, 645, 646, 643, 379, 429, 447, 436, 822,
	661, 520, 521, 662, 631, 0, 771, 0, 406, 0,
	0, 535, 568, 557, 641, 523, 0, 0, 0, 0,
	0, 0, 774, 0, 0, 0, 341, 1888, 0, 374,
	572, 554, 564, 555, 540, 541, 542, 549, 353, 543,
	544, 545, 515, 546, 516, 547, 548, 813, 571, 522,
	438, 390, 589, 588, 0, 0, 882, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 878, 0, 2113, 0,
	0, 766, 0, 0, 803, 858, 857, 790, 800, 0,
	0, 314, 232, 517, 637, 519, 518, 791, 0, 792,
	796, 799, 795, 793, 794, 0, 873, 0, 0, 0,
	0, 0, 0, 758, 770, 0, 775, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	767, 768, 0, 0, 0, 0, 823, 0, 769, 0,
	0, 2114, 797, 801, 0, 0, 0, 0, 304, 444,
	463, 315, 433, 476, 320, 659, 455, 310, 405, 430,
	0, 0, 306, 461, 440, 387, 364, 365, 305, 0,
	424, 339, 355, 336, 403, 798, 821, 825, 335, 896,
	819, 471, 308, 0, 470, 402, 457, 462, 388, 381,
	0, 307, 459, 386, 380, 368, 345, 897, 369, 370,
	359, 414, 378, 415, 360, 392, 391, 393, 0, 0,
	0, 0, 0, 499, 500, 0, 0, 648, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 630,
	816, 0, 634, 0, 473, 0, 0, 880, 0, 0,
	0, 443, 0, 0, 371, 0, 0, 0, 820, 0,
	427, 408, 893, 0, 0, 425, 376, 458, 416, 464,
	445, 472, 421, 417, 298, 446, 338, 389, 311, 313,
	333, 340, 342, 346, 347, 398, 399, 411, 432, 448,
	449, 450, 337, 321, 426, 322, 357, 323, 299, 329,
	327, 330, 434, 331, 301, 412, 454, 0, 352, 422,
	384, 302, 383, 413, 453, 452, 312, 480, 486, 487,
	576, 0, 492, 665, 666, 667, 501, 0, 418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	506, 507, 508, 510, 511, 512, 513, 577, 594, 561,
	531, 494, 585, 528, 532, 533, 362, 597, 0, 0,
	0, 485, 372, 373, 0, 344, 343, 385, 303, 350,
	295, 296, 660, 877, 404, 599, 632, 633, 524, 0,
	892, 872, 874, 875, 879, 883, 884, 885, 886, 887,
	889, 891, 895, 658, 0, 578, 593, 663, 592, 655,
	410, 0, 431, 590, 537, 0, 582, 556, 0, 583,
	552, 587, 0, 526, 0, 439, 466, 478, 495, 498,
	527, 612, 613, 614, 300, 497, 616, 617, 618, 619,
	620, 621, 622, 615, 894, 559, 536, 562, 477, 539,
	538, 0, 0, 573, 824, 574, 575, 394, 395, 396,
	397, 881, 600, 319, 496, 420, 0, 560, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 566, 563, 668,
	0, 623, 624, 0, 0, 490, 491, 349, 356, 509,
	358, 318, 409, 351, 475, 366, 0, 502, 567, 503,
	626, 629, 627, 628, 401, 361, 363, 435, 367, 377,
	423, 474, 407, 428, 316, 465, 437, 382, 553, 580,
	903, 876, 902, 904, 905, 901, 906, 907, 888, 779,
	0, 831, 899, 898, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 608, 607, 606, 605,
	604, 603, 602, 601, 0, 0, 550, 451, 328, 289,
	324, 325, 332, 656, 653, 456, 657, 786, 297, 530,
	375, 0, 419, 348, 595, 596, 0, 647, 865, 838,
	839, 840, 776, 841, 835, 836, 777, 837, 866, 829,
	862, 863, 805, 832, 842, 861, 843, 864, 867, 868,
	908, 909, 849, 833, 261, 910, 846, 869, 860, 859,
	844, 830, 870, 871, 812, 807, 847, 848, 834, 853,
	854, 855, 778, 826, 827, 828, 850, 851, 808, 809,
	810, 811, 0, 0, 0, 481, 482, 483, 505, 0,
	467, 529, 654, 0, 0, 0, 0, 0, 0, 0,
	579, 591, 625, 0, 635, 636, 638, 640, 856, 642,
	441, 442, 649, 0, 852, 645, 646, 643, 379, 429,
	447, 436, 0, 661, 520, 521, 662, 631, 0, 771,
	209, 822, 0, 0, 0, 0, 0, 0, 0, 0,
	406, 0, 0, 535, 568, 557, 641, 523, 0, 0,
	0, 0, 0, 0, 774, 0, 0, 0, 341, 0,
	0, 374, 572, 554, 564, 555, 540, 541, 542, 549,
	353, 543, 544, 545, 515, 546, 516, 547, 548, 1302,
	571, 522, 438, 390, 589, 588, 0, 0, 882, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 766, 0, 0, 803, 858, 857, 790,
	800, 0, 0, 314, 232, 517, 637, 519, 518, 791,
	0, 792, 796, 799, 795, 793, 794, 0, 873, 0,
	0, 0, 0, 0, 0, 758, 770, 0, 775, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 767, 768, 0, 0, 0, 0, 823, 0,
	769, 0, 0, 818, 797, 801, 0, 0, 0, 0,
	304, 444, 463, 315, 433, 476, 320, 659, 455, 310,
	405, 430, 0, 0, 306, 461, 440, 387, 364, 365,
	305, 0, 424, 339, 355, 336, 403, 798, 821, 825,
	335, 896, 819, 471, 308, 0, 470, 402, 457, 462,
	388, 381, 0, 307, 459, 386, 380, 368, 345, 897,
	369, 370, 359, 414, 378, 415, 360, 392, 391, 393,
	0, 0, 0, 0, 0, 499, 500, 0, 0, 648,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 630, 816, 0, 634, 0, 473, 0, 0, 880,
	0, 0, 0, 443, 0, 0, 371, 0, 0, 0,
	820, 0, 427, 408, 893, 0, 0, 425, 376, 458,
	416, 464, 445, 472, 421, 417, 298, 446, 338, 389,
	311, 313, 333, 340, 342, 346, 347, 398, 399, 411,
	432, 448, 449, 450, 337, 321, 426, 322, 357, 323,
	299, 329, 327, 330, 434, 331, 301, 412, 454, 0,
	352, 422, 384, 302, 383, 413, 453, 452, 312, 480,
	486, 487, 576, 0, 492, 665, 666, 667, 501, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 506, 507, 508, 510, 511, 512, 513, 577,
	594, 561, 531, 494, 585, 528, 532, 533, 362, 597,
	0, 0, 0, 485, 372, 373, 0, 344, 343, 385,
	303, 350, 295, 296, 660, 877, 404, 599, 632, 633,
	524, 0, 892, 872, 874, 875, 879, 883, 884, 885,
	886, 887, 889, 891, 895, 658, 0, 578, 593, 663,
	592, 655, 410, 0, 431, 590, 537, 0, 582, 556,
	0, 583, 552, 587, 0, 526, 0, 439, 466, 478,
	495, 498, 527, 612, 613, 614, 300, 497, 616, 617,
	618, 619, 620, 621, 622, 615, 894, 559, 536, 562,
	477, 539, 538, 0, 0, 573, 824, 574, 575, 394,
	395, 396, 397, 881, 600, 319, 496, 420, 0, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 566,
	563, 668, 0, 623, 624, 0, 0, 490, 491, 349,
	356, 509, 358, 318, 409, 351, 475, 366, 0, 502,
	567, 503, 626, 629, 627, 628, 401, 361, 363, 435,
	367, 377, 423, 474, 407, 428, 316, 465, 437, 382,
	553, 580, 903, 876, 902, 904, 905, 901, 906, 907,
	888, 779, 0, 831, 899, 898, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 608, 607,
	606, 605, 604, 603, 602, 601, 0, 0, 550, 451,
	328, 289, 324, 325, 332, 656, 653, 456, 657, 786,
	297, 530, 375, 172, 419, 348, 595, 596, 0, 647,
	865, 838, 839, 840, 776, 841, 835, 836, 777, 837,
	866, 829, 862, 863, 805, 832, 842, 861, 843, 864,
	867, 868, 908, 909, 849, 833, 261, 910, 846, 869,
	860, 859, 844, 830, 870, 871, 812, 807, 847, 848,
	834, 853, 854, 855, 778, 826, 827, 828, 850, 851,
	808, 809, 810, 811, 0, 0, 0, 481, 482, 483,
	505, 0, 467, 529, 654, 0, 0, 0, 0, 0,
	0, 0, 579, 591, 625, 0, 635, 636, 638, 640,
	856, 642, 441, 442, 649, 0, 852, 645, 646, 643,
	379, 429, 447, 436, 822, 661, 520, 521, 662, 631,
	0, 771, 0, 406, 0, 0, 535, 568, 557, 641,
	523, 0, 0, 0, 0, 0, 0, 774, 0, 0,
	0, 341, 4176, 0, 374, 572, 554, 564, 555, 540,
	541, 542, 549, 353, 543, 544, 545, 515, 546, 516,
	547, 548, 813, 571, 522, 438, 390, 589, 588, 0,
	0, 882, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 766, 0, 0, 803,
	858, 857, 790, 800, 0, 0, 314, 232, 517, 637,
	519, 518, 791, 0, 792, 796, 799, 795, 793, 794,
	0, 873, 0, 0, 0, 0, 0, 0, 758, 770,
	0, 775, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 767, 768, 0, 0, 0,
	0, 823, 0, 769, 0, 0, 818, 797, 801, 0,
	0, 0, 0, 304, 444, 463, 315, 433, 476, 320,
	659, 455, 310, 405, 430, 0, 0, 306, 461, 440,
	387, 364, 365, 305, 0, 424, 339, 355, 336, 403,
	798, 821, 825, 335, 896, 819, 471, 308, 0, 470,
	402, 457, 462, 388, 381, 0, 307, 459, 386, 380,
	368, 345, 897, 369, 370, 359, 414, 378, 415, 360,
	392, 391, 393, 0, 0, 0, 0, 0, 499, 500,
	0, 0, 648, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 630, 816, 0, 634, 0, 473,
	0, 0, 880, 0, 0, 0, 443, 0, 0, 371,
	0, 0, 0, 820, 0, 427, 408, 893, 0, 0,
	425, 376, 458, 416, 464, 445, 472, 421, 417, 298,
	446, 338, 389, 311, 313, 333, 340, 342, 346, 347,
	398, 399, 411, 432, 448, 449, 450, 337, 321, 426,
	322, 357, 323, 299, 329, 327, 330, 434, 331, 301,
	412, 454, 0, 352, 422, 384, 302, 383, 413, 453,
	452, 312, 480, 486, 487, 576, 0, 492, 665, 666,
	667, 501, 0, 418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 506, 507, 508, 510, 511,
	512, 513, 577, 594, 561, 531, 494, 585, 528, 532,
	533, 362, 597, 0, 0, 0, 485, 372, 373, 0,
	344, 343, 385, 303, 350, 295, 296, 660, 877, 404,
	599, 632, 633, 524, 0, 892, 872, 874, 875, 879,
	883, 884, 885, 886, 887, 889, 891, 895, 658, 0,
	578, 593, 663, 592, 655, 410, 0, 431, 590, 537,
	0, 582, 556, 0, 583, 552, 587, 0, 526, 0,
	439, 466, 478, 495, 498, 527, 612, 613, 614, 300,
	497, 616, 617, 618, 619, 620, 621, 622, 615, 894,
	559, 536, 562, 477, 539, 538, 0, 0, 573, 824,
	574, 575, 394, 395, 396, 397, 881, 600, 319, 496,
	420, 0, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 566, 563, 668, 0, 623, 624, 0, 0,
	490, 491, 349, 356, 509, 358, 318, 409, 351, 475,
	366, 0, 502, 567, 503, 626, 629, 627, 628, 401,
	361, 363, 435, 367, 377, 423, 474, 407, 428, 316,
	465, 437, 382, 553, 580, 903, 876, 902, 904, 905,
	901, 906, 907, 888, 779, 0, 831, 899, 898, 900,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 607, 606, 605, 604, 603, 602, 601, 0,
	0, 550, 451, 328, 289, 324, 325, 332, 656, 653,
	456, 657, 786, 297, 530, 375, 0, 419, 348, 595,
	596, 0, 647, 865, 838, 839, 840, 776, 841, 835,
	836, 777, 837, 866, 829, 862, 863, 805, 832, 842,
	861, 843, 864, 867, 868, 908, 909, 849, 833, 261,
	910, 846, 869, 860, 859, 844, 830, 870, 871, 812,
	807, 847, 848, 834, 853, 854, 855, 778, 826, 827,
	828, 850, 851, 808, 809, 810, 811, 0, 0, 0,
	481, 482, 483, 505, 0, 467, 529, 654, 0, 0,
	0, 0, 0, 0, 0, 579, 591, 625, 0, 635,
	636, 638, 640, 856, 642, 441, 442, 649, 0, 852,
	645, 646, 643, 379, 429, 447, 436, 822, 661, 520,
	521, 662, 631, 0, 771, 0, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	774, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 813, 571, 522, 438, 390,
	589, 588, 0, 0, 882, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 766,
	0, 0, 803, 858, 857, 790, 800, 0, 0, 314,
	232, 517, 637, 519, 518, 791, 0, 792, 796, 799,
	795, 793, 794, 0, 873, 0, 0, 0, 0, 0,
	0, 758, 770, 0, 775, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 767, 768,
	0, 0, 0, 0, 823, 0, 769, 0, 0, 818,
	797, 801, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 798, 821, 825, 335, 896, 819, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 897, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 816, 0,
	634, 0, 473, 0, 0, 880, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 820, 0, 427, 408,
	893, 4055, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 877, 404, 599, 632, 633, 524, 0, 892, 872,
	874, 875, 879, 883, 884, 885, 886, 887, 889, 891,
	895, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 894, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 824, 574, 575, 394, 395, 396, 397, 881,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 903, 876,
	902, 904, 905, 901, 906, 907, 888, 779, 0, 831,
	899, 898, 900, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 786, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 865, 838, 839, 840,
	776, 841, 835, 836, 777, 837, 866, 829, 862, 863,
	805, 832, 842, 861, 843, 864, 867, 868, 908, 909,
	849, 833, 261, 910, 846, 869, 860, 859, 844, 830,
	870, 871, 812, 807, 847, 848, 834, 853, 854, 855,
	778, 826, 827, 828, 850, 851, 808, 809, 810, 811,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 856, 642, 441, 442,
	649, 0, 852, 645, 646, 643, 379, 429, 447, 436,
	822, 661, 520, 521, 662, 631, 0, 771, 0, 406,
	0, 0, 535, 568, 557, 641, 523, 0, 0, 0,
	0, 0, 0, 774, 0, 0, 0, 341, 1888, 0,
	374, 572, 554, 564, 555, 540, 541, 542, 549, 353,
	543, 544, 545, 515, 546, 516, 547, 548, 813, 571,
	522, 438, 390, 589, 588, 0, 0, 882, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 766, 0, 0, 803, 858, 857, 790, 800,
	0, 0, 314, 232, 517, 637, 519, 518, 791, 0,
	792, 796, 799, 795, 793, 794, 0, 873, 0, 0,
	0, 0, 0, 0, 758, 770, 0, 775, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 767, 768, 0, 0, 0, 0, 823, 0, 769,
	0, 0, 818, 797, 801, 0, 0, 0, 0, 304,
	444, 463, 315, 433, 476, 320, 659, 455, 310, 405,
	430, 0, 0, 306, 461, 440, 387, 364, 365, 305,
	0, 424, 339, 355, 336, 403, 798, 821, 825, 335,
	896, 819, 471, 308, 0, 470, 402, 457, 462, 388,
	381, 0, 307, 459, 386, 380, 368, 345, 897, 369,
	370, 359, 414, 378, 415, 360, 392, 391, 393, 0,
	0, 0, 0, 0, 499, 500, 0, 0, 648, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	630, 816, 0, 634, 0, 473, 0, 0, 880, 0,
	0, 0, 443, 0, 0, 371, 0, 0, 0, 820,
	0, 427, 408, 893, 0, 0, 425, 376, 458, 416,
	464, 445, 472, 421, 417, 298, 446, 338, 389, 311,
	313, 333, 340, 342, 346, 347, 398, 399, 411, 432,
	448, 449, 450, 337, 321, 426, 322, 357, 323, 299,
	329, 327, 330, 434, 331, 301, 412, 454, 0, 352,
	422, 384, 302, 383, 413, 453, 452, 312, 480, 486,
	487, 576, 0, 492, 665, 666, 667, 501, 0, 418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 506, 507, 508, 510, 511, 512, 513, 577, 594,
	561, 531, 494, 585, 528, 532, 533, 362, 597, 0,
	0, 0, 485, 372, 373, 0, 344, 343, 385, 303,
	350, 295, 296, 660, 877, 404, 599, 632, 633, 524,
	0, 892, 872, 874, 875, 879, 883, 884, 885, 886,
	887, 889, 891, 895, 658, 0, 578, 593, 663, 592,
	655, 410, 0, 431, 590, 537, 0, 582, 556, 0,
	583, 552, 587, 0, 526, 0, 439, 466, 478, 495,
	498, 527, 612, 613, 614, 300, 497, 616, 617, 618,
	619, 620, 621, 622, 615, 894, 559, 536, 562, 477,
	539, 538, 0, 0, 573, 824, 574, 575, 394, 395,
	396, 397, 881, 600, 319, 496, 420, 0, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 566, 563,
	668, 0, 623, 624, 0, 0, 490, 491, 349, 356,
	509, 358, 318, 409, 351, 475, 366, 0, 502, 567,
	503, 626, 629, 627, 628, 401, 361, 363, 435, 367,
	377, 423, 474, 407, 428, 316, 465, 437, 382, 553,
	580, 903, 876, 902, 904, 905, 901, 906, 907, 888,
	779, 0, 831, 899, 898, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 607, 606,
	605, 604, 603, 602, 601, 0, 0, 550, 451, 328,
	289, 324, 325, 332, 656, 653, 456, 657, 786, 297,
	530, 375, 0, 419, 348, 595, 596, 0, 647, 865,
	838, 839, 840, 776, 841, 835, 836, 777, 837, 866,
	829, 862, 863, 805, 832, 842, 861, 843, 864, 867,
	868, 908, 909, 849, 833, 261, 910, 846, 869, 860,
	859, 844, 830, 870, 871, 812, 807, 847, 848, 834,
	853, 854, 855, 778, 826, 827, 828, 850, 851, 808,
	809, 810, 811, 0, 0, 0, 481, 482, 483, 505,
	0, 467, 529, 654, 0, 0, 0, 0, 0, 0,
	0, 579, 591, 625, 0, 635, 636, 638, 640, 856,
	642, 441, 442, 649, 0, 852, 645, 646, 643, 379,
	429, 447, 436, 822, 661, 520, 521, 662, 631, 0,
	771, 0, 406, 0, 0, 535, 568, 557, 641, 523,
	0, 0, 0, 0, 0, 0, 774, 0, 0, 0,
	341, 0, 0, 374, 572, 554, 564, 555, 540, 541,
	542, 549, 353, 543, 544, 545, 515, 546, 516, 547,
	548, 813, 571, 522, 438, 390, 589, 588, 0, 0,
	882, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 766, 0, 0, 803, 858,
	857, 790, 800, 0, 0, 314, 232, 517, 637, 519,
	518, 791, 0, 792, 796, 799, 795, 793, 794, 0,
	873, 0, 0, 0, 0, 0, 0, 758, 770, 0,
	775, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 767, 768, 1601, 0, 0, 0,
	823, 0, 769, 0, 0, 818, 797, 801, 0, 0,
	0, 0, 304, 444, 463, 315, 433, 476, 320, 659,
	455, 310, 405, 430, 0, 0, 306, 461, 440, 387,
	364, 365, 305, 0, 424, 339, 355, 336, 403, 798,
	821, 825, 335, 896, 819, 471, 308, 0, 470, 402,
	457, 462, 388, 381, 0, 307, 459, 386, 380, 368,
	345, 897, 369, 370, 359, 414, 378, 415, 360, 392,
	391, 393, 0, 0, 0, 0, 0, 499, 500, 0,
	0, 648, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 630, 816, 0, 634, 0, 473, 0,
	0, 880, 0, 0, 0, 443, 0, 0, 371, 0,
	0, 0, 820, 0, 427, 408, 893, 0, 0, 425,
	376, 458, 416, 464, 445, 472, 421, 417, 298, 446,
	338, 389, 311, 313, 333, 340, 342, 346, 347, 398,
	399, 411, 432, 448, 449, 450, 337, 321, 426, 322,
	357, 323, 299, 329, 327, 330, 434, 331, 301, 412,
	454, 0, 352, 422, 384, 302, 383, 413, 453, 452,
	312, 480, 486, 487, 576, 0, 492, 665, 666, 667,
	501, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 506, 507, 508, 510, 511, 512,
	513, 577, 594, 561, 531, 494, 585, 528, 532, 533,
	362, 597, 0, 0, 0, 485, 372, 373, 0, 344,
	343, 385, 303, 350, 295, 296, 660, 877, 404, 599,
	632, 633, 524, 0, 892, 872, 874, 875, 879, 883,
	884, 885, 886, 887, 889, 891, 895, 658, 0, 578,
	593, 663, 592, 655, 410, 0, 431, 590, 537, 0,
	582, 556, 0, 583, 552, 587, 0, 526, 0, 439,
	466, 478, 495, 498, 527, 612, 613, 614, 300, 497,
	616, 617, 618, 619, 620, 621, 622, 615, 894, 559,
	536, 562, 477, 539, 538, 0, 0, 573, 824, 574,
	575, 394, 395, 396, 397, 881, 600, 319, 496, 420,
	0, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 566, 563, 668, 0, 623, 624, 0, 0, 490,
	491, 349, 356, 509, 358, 318, 409, 351, 475, 366,
	0, 502, 567, 503, 626, 629, 627, 628, 401, 361,
	363, 435, 367, 377, 423, 474, 407, 428, 316, 465,
	437, 382, 553, 580, 903, 876, 902, 904, 905, 901,
	906, 907, 888, 779, 0, 831, 899, 898, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	608, 607, 606, 605, 604, 603, 602, 601, 0, 0,
	550, 451, 328, 289, 324, 325, 332, 656, 653, 456,
	657, 786, 297, 530, 375, 0, 419, 348, 595, 596,
	0, 647, 865, 838, 839, 840, 776, 841, 835, 836,
	777, 837, 866, 829, 862, 863, 805, 832, 842, 861,
	843, 864, 867, 868, 908, 909, 849, 833, 261, 910,
	846, 869, 860, 859, 844, 830, 870, 871, 812, 807,
	847, 848, 834, 853, 854, 855, 778, 826, 827, 828,
	850, 851, 808, 809, 810, 811, 0, 0, 0, 481,
	482, 483, 505, 0, 467, 529, 654, 0, 0, 0,
	0, 0, 0, 0, 579, 591, 625, 0, 635, 636,
	638, 640, 856, 642, 441, 442, 649, 0, 852, 645,
	646, 643, 379, 429, 447, 436, 0, 661, 520, 521,
	662, 631, 822, 771, 0, 2288, 0, 0, 0, 0,
	0, 406, 0, 0, 535, 568, 557, 641, 523, 0,
	0, 0, 0, 0, 0, 774, 0, 0, 0, 341,
	0, 0, 374, 572, 554, 564, 555, 540, 541, 542,
	549, 353, 543, 544, 545, 515, 546, 516, 547, 548,
	813, 571, 522, 438, 390, 589, 588, 0, 0, 882,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 766, 0, 0, 803, 858, 857,
	790, 800, 0, 0, 314, 232, 517, 637, 519, 518,
	791, 0, 792, 796, 799, 795, 793, 794, 0, 873,
	0, 0, 0, 0, 0, 0, 758, 770, 0, 775,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 767, 768, 0, 0, 0, 0, 823,
	0, 769, 0, 0, 818, 797, 801, 0, 0, 0,
	0, 304, 444, 463, 315, 433, 476, 320, 659, 455,
	310, 405, 430, 0, 0, 306, 461, 440, 387, 364,
	365, 305, 0, 424, 339, 355, 336, 403, 798, 821,
	825, 335, 896, 819, 471, 308, 0, 470, 402, 457,
	462, 388, 381, 0, 307, 459, 386, 380, 368, 345,
	897, 369, 370, 359, 414, 378, 415, 360, 392, 391,
	393, 0, 0, 0, 0, 0, 499, 500, 0, 0,
	648, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 630, 816, 0, 634, 0, 473, 0, 0,
	880, 0, 0, 0, 443, 0, 0, 371, 0, 0,
	0, 820, 0, 427, 408, 893, 0, 0, 425, 376,
	458, 416, 464, 445, 472, 421, 417, 298, 446, 338,
	389, 311, 313, 333, 340, 342, 346, 347, 398, 399,
	411, 432, 448, 449, 450, 337, 321, 426, 322, 357,
	323, 299, 329, 327, 330, 434, 331, 301, 412, 454,
	0, 352, 422, 384, 302, 383, 413, 453, 452, 312,
	480, 486, 487, 576, 0, 492, 665, 666, 667, 501,
	0, 418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 506, 507, 508, 510, 511, 512, 513,
	577, 594, 561, 531, 494, 585, 528, 532, 533, 362,
	597, 0, 0, 0, 485, 372, 373, 0, 344, 343,
	385, 303, 350, 295, 296, 660, 877, 404, 599, 632,
	633, 524, 0, 892, 872, 874, 875, 879, 883, 884,
	885, 886, 887, 889, 891, 895, 658, 0, 578, 593,
	663, 592, 655, 410, 0, 431, 590, 537, 0, 582,
	556, 0, 583, 552, 587, 0, 526, 0, 439, 466,
	478, 495, 498, 527, 612, 613, 614, 300, 497, 616,
	617, 618, 619, 620, 621, 622, 615, 894, 559, 536,
	562, 477, 539, 538, 0, 0, 573, 824, 574, 575,
	394, 395, 396, 397, 881, 600, 319, 496, 420, 0,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 565,
	566, 563, 668, 0, 623, 624, 0, 0, 490, 491,
	349, 356, 509, 358, 318, 409, 351, 475, 366, 0,
	502, 567, 503, 626, 629, 627, 628, 401, 361, 363,
	435, 367, 377, 423, 474, 407, 428, 316, 465, 437,
	382, 553, 580, 903, 876, 902, 904, 905, 901, 906,
	907, 888, 779, 0, 831, 899, 898, 900, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 608,
	607, 606, 605, 604, 603, 602, 601, 0, 0, 550,
	451, 328, 289, 324, 325, 332, 656, 653, 456, 657,
	786, 297, 530, 375, 0, 419, 348, 595, 596, 0,
	647, 865, 838, 839, 840, 776, 841, 835, 836, 777,
	837, 866, 829, 862, 863, 805, 832, 842, 861, 843,
	864, 867, 868, 908, 909, 849, 833, 261, 910, 846,
	869, 860, 859, 844, 830, 870, 871, 812, 807, 847,
	848, 834, 853, 854, 855, 778, 826, 827, 828, 850,
	851, 808, 809, 810, 811, 0, 0, 0, 481, 482,
	483, 505, 0, 467, 529, 654, 0, 0, 0, 0,
	0, 0, 0, 579, 591, 625, 0, 635, 636, 638,
	640, 856, 642, 441, 442, 649, 0, 852, 645, 646,
	643, 379, 429, 447, 436, 822, 661, 520, 521, 662,
	631, 0, 771, 0, 406, 0, 0, 535, 568, 557,
	641, 523, 0, 0, 0, 0, 0, 0, 774, 0,
	0, 0, 341, 0, 0, 374, 572, 554, 564, 555,
	540, 541, 542, 549, 353, 543, 544, 545, 515, 546,
	516, 547, 548, 813, 571, 522, 438, 390, 589, 588,
	0, 0, 882, 890, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 766, 0, 0,
	803, 858, 857, 790, 800, 0, 0, 314, 232, 517,
	637, 519, 518, 791, 0, 792, 796, 799, 795, 793,
	794, 0, 873, 0, 0, 0, 0, 0, 0, 758,
	770, 0, 775, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 767, 768, 1881, 0,
	0, 0, 823, 0, 769, 0, 0, 818, 797, 801,
	0, 0, 0, 0, 304, 444, 463, 315, 433, 476,
	320, 659, 455, 310, 405, 430, 0, 0, 306, 461,
	440, 387, 364, 365, 305, 0, 424, 339, 355, 336,
	403, 798, 821, 825, 335, 896, 819, 471, 308, 0,
	470, 402, 457, 462, 388, 381, 0, 307, 459, 386,
	380, 368, 345, 897, 369, 370, 359, 414, 378, 415,
	360, 392, 391, 393, 0, 0, 0, 0, 0, 499,
	500, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 816, 0, 634, 0,
	473, 0, 0, 880, 0, 0, 0, 443, 0, 0,
	371, 0, 0, 0, 820, 0, 427, 408, 893, 0,
	0, 425, 376, 458, 416, 464, 445, 472, 421, 417,
	298, 446, 338, 389, 311, 313, 333, 340, 342, 346,
	347, 398, 399, 411, 432, 448, 449, 450, 337, 321,
	426, 322, 357, 323, 299, 329, 327, 330, 434, 331,
	301, 412, 454, 0, 352, 422, 384, 302, 383, 413,
	453, 452, 312, 480, 486, 487, 576, 0, 492, 665,
	666, 667, 501, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 507, 508, 510,
	511, 512, 513, 577, 594, 561, 531, 494, 585, 528,
	532, 533, 362, 597, 0, 0, 0, 485, 372, 373,
	0, 344, 343, 385, 303, 350, 295, 296, 660, 877,
	404, 599, 632, 633, 524, 0, 892, 872, 874, 875,
	879, 883, 884, 885, 886, 887, 889, 891, 895, 658,
	0, 578, 593, 663, 592, 655, 410, 0, 431, 590,
	537, 0, 582, 556, 0, 583, 552, 587, 0, 526,
	0, 439, 466, 478, 495, 498, 527, 612, 613, 614,
	300, 497, 616, 617, 618, 619, 620, 621, 622, 615,
	894, 559, 536, 562, 477, 539, 538, 0, 0, 573,
	824, 574, 575, 394, 395, 396, 397, 881, 600, 319,
	496, 420, 0, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 563, 668, 0, 623, 624, 0,
	0, 490, 491, 349, 356, 509, 358, 318, 409, 351,
	475, 366, 0, 502, 567, 503, 626, 629, 627, 628,
	401, 361, 363, 435, 367, 377, 423, 474, 407, 428,
	316, 465, 437, 382, 553, 580, 903, 876, 902, 904,
	905, 901, 906, 907, 888, 779, 0, 831, 899, 898,
	900, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 607, 606, 605, 604, 603, 602, 601,
	0, 0, 550, 451, 328, 289, 324, 325, 332, 656,
	653, 456, 657, 786, 297, 530, 375, 0, 419, 348,
	595, 596, 0, 647, 865, 838, 839, 840, 776, 841,
	835, 836, 777, 837, 866, 829, 862, 863, 805, 832,
	842, 861, 843, 864, 867, 868, 908, 909, 849, 833,
	261, 910, 846, 869, 860, 859, 844, 830, 870, 871,
	812, 807, 847, 848, 834, 853, 854, 855, 778, 826,
	827, 828, 850, 851, 808, 809, 810, 811, 0, 0,
	0, 481, 482, 483, 505, 0, 467, 529, 654, 0,
	0, 0, 0, 0, 0, 0, 579, 591, 625, 0,
	635, 636, 638, 640, 856, 642, 441, 442, 649, 0,
	852, 645, 646, 643, 379, 429, 447, 436, 822, 661,
	520, 521, 662, 631, 0, 771, 0, 406, 0, 0,
	535, 568, 557, 641, 523, 0, 0, 0, 0, 0,
	0, 774, 0, 0, 0, 341, 0, 0, 374, 572,
	554, 564, 555, 540, 541, 542, 549, 353, 543, 544,
	545, 515, 546, 516, 547, 548, 813, 571, 522, 438,
	390, 589, 588, 0, 0, 882, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	766, 0, 0, 803, 858, 857, 790, 800, 0, 0,
	314, 232, 517, 637, 519, 518, 791, 0, 792, 796,
	799, 795, 793, 794, 0, 873, 0, 0, 0, 0,
	0, 0, 758, 770, 0, 775, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 767,
	768, 0, 0, 0, 0, 823, 0, 769, 0, 0,
	818, 797, 801, 0, 0, 0, 0, 304, 444, 463,
	315, 433, 476, 320, 659, 455, 310, 405, 430, 0,
	0, 306, 461, 440, 387, 364, 365, 305, 0, 424,
	339, 355, 336, 403, 798, 821, 825, 335, 896, 819,
	471, 308, 0, 470, 402, 457, 462, 388, 381, 0,
	307, 459, 386, 380, 368, 345, 897, 369, 370, 359,
	414, 378, 415, 360, 392, 391, 393, 0, 0, 0,
	0, 0, 499, 500, 0, 0, 648, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 630, 816,
	0, 634, 0, 473, 0, 0, 880, 0, 0, 0,
	443, 0, 0, 371, 0, 0, 0, 820, 0, 427,
	408, 893, 0, 0, 425, 376, 458, 416, 464, 445,
	472, 421, 417, 298, 446, 338, 389, 311, 313, 333,
	340, 342, 346, 347, 398, 399, 411, 432, 448, 449,
	450, 337, 321, 426, 322, 357, 323, 299, 329, 327,
	330, 434, 331, 301, 412, 454, 0, 352, 422, 384,
	302, 383, 413, 453, 452, 312, 480, 486, 487, 576,
	0, 492, 665, 666, 667, 501, 0, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 506,
	507, 508, 510, 511, 512, 513, 577, 594, 561, 531,
	494, 585, 528, 532, 533, 362, 597, 0, 0, 0,
	485, 372, 373, 0, 344, 343, 385, 303, 350, 295,
	296, 660, 877, 404, 599, 632, 633, 524, 0, 892,
	872, 874, 875, 879, 883, 884, 885, 886, 887, 889,
	891, 895, 658, 0, 578, 593, 663, 592, 655, 410,
	0, 431, 590, 537, 0, 582, 556, 0, 583, 552,
	587, 0, 526, 0, 439, 466, 478, 495, 498, 527,
	612, 613, 614, 300, 497, 616, 617, 618, 619, 620,
	621, 622, 615, 894, 559, 536, 562, 477, 539, 538,
	0, 0, 573, 824, 574, 575, 394, 395, 396, 397,
	881, 600, 319, 496, 420, 0, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 566, 563, 668, 0,
	623, 624, 0, 0, 490, 491, 349, 356, 509, 358,
	318, 409, 351, 475, 366, 0, 502, 567, 503, 626,
	629, 627, 628, 401, 361, 363, 435, 367, 377, 423,
	474, 407, 428, 316, 465, 437, 382, 553, 580, 903,
	876, 902, 904, 905, 901, 906, 907, 888, 779, 0,
	831, 899, 898, 900, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 608, 607, 606, 605, 604,
	603, 602, 601, 0, 0, 550, 451, 328, 289, 324,
	325, 332, 656, 653, 456, 657, 786, 297, 530, 375,
	0, 419, 348, 595, 596, 0, 647, 865, 838, 839,
	840, 776, 841, 835, 836, 777, 837, 866, 829, 862,
	863, 805, 832, 842, 861, 843, 864, 867, 868, 908,
	909, 849, 833, 261, 910, 846, 869, 860, 859, 844,
	830, 870, 871, 812, 807, 847, 848, 834, 853, 854,
	855, 778, 826, 827, 828, 850, 851, 808, 809, 810,
	811, 0, 0, 0, 481, 482, 483, 505, 0, 467,
	529, 654, 0, 0, 0, 0, 0, 0, 0, 579,
	591, 625, 0, 635, 636, 638, 640, 856, 642, 441,
	442, 649, 0, 852, 645, 646, 643, 379, 429, 447,
	436, 822, 661, 520, 521, 662, 631, 0, 771, 0,
	406, 0, 0, 535, 568, 557, 641, 523, 0, 0,
	0, 0, 0, 0, 774, 0, 0, 0, 341, 0,
	0, 374, 572, 554, 564, 555, 540, 541, 542, 549,
	353, 543, 544, 545, 515, 546, 516, 547, 548, 813,
	571, 522, 438, 390, 589, 588, 0, 0, 882, 890,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 766, 0, 0, 803, 858, 857, 790,
	800, 0, 0, 314, 232, 517, 637, 519, 518, 791,
	0, 792, 796, 799, 795, 793, 794, 0, 873, 0,
	0, 0, 0, 0, 0, 758, 770, 0, 775, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 767, 768, 0, 0, 0, 0, 823, 0,
	769, 0, 0, 818, 797, 801, 0, 0, 0, 0,
	304, 444, 463, 315, 433, 476, 320, 659, 455, 310,
	405, 430, 0, 0, 306, 461, 440, 387, 364, 365,
	305, 0, 424, 339, 355, 336, 403, 798, 821, 825,
	335, 896, 819, 471, 308, 0, 470, 402, 457, 462,
	388, 381, 0, 307, 459, 386, 380, 368, 345, 897,
	369, 370, 359, 414, 378, 415, 360, 392, 391, 393,
	0, 0, 0, 0, 0, 499, 500, 0, 0, 648,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 630, 816, 0, 634, 0, 473, 0, 0, 880,
	0, 0, 0, 443, 0, 0, 371, 0, 0, 0,
	820, 0, 427, 408, 893, 0, 0, 425, 376, 458,
	416, 464, 445, 472, 421, 417, 298, 446, 338, 389,
	311, 313, 333, 340, 342, 346, 347, 398, 399, 411,
	432, 448, 449, 450, 337, 321, 426, 322, 357, 323,
	299, 329, 327, 330, 434, 331, 301, 412, 454, 0,
	352, 422, 384, 302, 383, 413, 453, 452, 312, 480,
	486, 487, 576, 0, 492, 665, 666, 667, 501, 0,
	418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 506, 507, 508, 510, 511, 512, 513, 577,
	594, 561, 531, 494, 585, 528, 532, 533, 362, 597,
	0, 0, 0, 485, 372, 373, 0, 344, 343, 385,
	303, 350, 295, 296, 660, 877, 404, 599, 632, 633,
	524, 0, 892, 872, 874, 875, 879, 883, 884, 885,
	886, 887, 889, 891, 895, 658, 0, 578, 593, 663,
	592, 655, 410, 0, 431, 590, 537, 0, 582, 556,
	0, 583, 552, 587, 0, 526, 0, 439, 466, 478,
	495, 498, 527, 612, 613, 614, 300, 497, 616, 617,
	618, 619, 620, 621, 622, 615, 894, 559, 536, 562,
	477, 539, 538, 0, 0, 573, 824, 574, 575, 394,
	395, 396, 397, 881, 600, 319, 496, 420, 0, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 566,
	563, 668, 0, 623, 624, 0, 0, 490, 491, 349,
	356, 509, 358, 318, 409, 351, 475, 366, 0, 502,
	567, 503, 626, 629, 627, 628, 401, 361, 363, 435,
	367, 377, 423, 474, 407, 428, 316, 465, 437, 382,
	553, 580, 903, 876, 902, 904, 905, 901, 906, 907,
	888, 779, 0, 831, 899, 898, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 608, 607,
	606, 605, 604, 603, 602, 601, 0, 0, 550, 451,
	328, 289, 324, 325, 332, 656, 653, 456, 657, 786,
	297, 530, 375, 0, 419, 348, 595, 596, 0, 647,
	865, 838, 839, 840, 776, 841, 835, 836, 777, 837,
	866, 829, 862, 863, 805, 832, 842, 861, 843, 864,
	867, 868, 908, 909, 849, 833, 261, 910, 846, 869,
	860, 859, 844, 830, 870, 871, 812, 807, 847, 848,
	834, 853, 854, 855, 778, 826, 827, 828, 850, 851,
	808, 809, 810, 811, 0, 0, 0, 481, 482, 483,
	505, 0, 467, 529, 654, 0, 0, 0, 0, 0,
	0, 0, 579, 591, 625, 0, 635, 636, 638, 640,
	856, 642, 441, 442, 649, 0, 3615, 645, 3616, 3617,
	379, 429, 447, 436, 822, 661, 520, 521, 662, 631,
	0, 771, 0, 406, 0, 0, 535, 568, 557, 641,
	523, 0, 0, 0, 0, 0, 0, 774, 0, 0,
	0, 341, 0, 0, 374, 572, 554, 564, 555, 540,
	541, 542, 549, 353, 543, 544, 545, 515, 546, 516,
	547, 548, 813, 571, 522, 438, 390, 589, 588, 0,
	0, 882, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 766, 0, 0, 803,
	858, 857, 790, 800, 0, 0, 314, 232, 517, 637,
	519, 518, 2768, 0, 2769, 796, 799, 795, 793, 794,
	0, 873, 0, 0, 0, 0, 0, 0, 758, 770,
	0, 775, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 767, 768, 0, 0, 0,
	0, 823, 0, 769, 0, 0, 818, 797, 801, 0,
	0, 0, 0, 304, 444, 463, 315, 433, 476, 320,
	659, 455, 310, 405, 430, 0, 0, 306, 461, 440,
	387, 364, 365, 305, 0, 424, 339, 355, 336, 403,
	798, 821, 825, 335, 896, 819, 471, 308, 0, 470,
	402, 457, 462, 388, 381, 0, 307, 459, 386, 380,
	368, 345, 897, 369, 370, 359, 414, 378, 415, 360,
	392, 391, 393, 0, 0, 0, 0, 0, 499, 500,
	0, 0, 648, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 630, 816, 0, 634, 0, 473,
	0, 0, 880, 0, 0, 0, 443, 0, 0, 371,
	0, 0, 0, 820, 0, 427, 408, 893, 0, 0,
	425, 376, 458, 416, 464, 445, 472, 421, 417, 298,
	446, 338, 389, 311, 313, 333, 340, 342, 346, 347,
	398, 399, 411, 432, 448, 449, 450, 337, 321, 426,
	322, 357, 323, 299, 329, 327, 330, 434, 331, 301,
	412, 454, 0, 352, 422, 384, 302, 383, 413, 453,
	452, 312, 480, 486, 487, 576, 0, 492, 665, 666,
	667, 501, 0, 418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 506, 507, 508, 510, 511,
	512, 513, 577, 594, 561, 531, 494, 585, 528, 532,
	533, 362, 597, 0, 0, 0, 485, 372, 373, 0,
	344, 343, 385, 303, 350, 295, 296, 660, 877, 404,
	599, 632, 633, 524, 0, 892, 872, 874, 875, 879,
	883, 884, 885, 886, 887, 889, 891, 895, 658, 0,
	578, 593, 663, 592, 655, 410, 0, 431, 590, 537,
	0, 582, 556, 0, 583, 552, 587, 0, 526, 0,
	439, 466, 478, 495, 498, 527, 612, 613, 614, 300,
	497, 616, 617, 618, 619, 620, 621, 622, 615, 894,
	559, 536, 562, 477, 539, 538, 0, 0, 573, 824,
	574, 575, 394, 395, 396, 397, 881, 600, 319, 496,
	420, 0, 560, 0, 0, 0, 0, 0, 0, 0,
	0, 565, 566, 563, 668, 0, 623, 624, 0, 0,
	490, 491, 349, 356, 509, 358, 318, 409, 351, 475,
	366, 0, 502, 567, 503, 626, 629, 627, 628, 401,
	361, 363, 435, 367, 377, 423, 474, 407, 428, 316,
	465, 437, 382, 553, 580, 903, 876, 902, 904, 905,
	901, 906, 907, 888, 779, 0, 831, 899, 898, 900,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 608, 607, 606, 605, 604, 603, 602, 601, 0,
	0, 550, 451, 328, 289, 324, 325, 332, 656, 653,
	456, 657, 786, 297, 530, 375, 0, 419, 348, 595,
	596, 0, 647, 865, 838, 839, 840, 776, 841, 835,
	836, 777, 837, 866, 829, 862, 863, 805, 832, 842,
	861, 843, 864, 867, 868, 908, 909, 849, 833, 261,
	910, 846, 869, 860, 859, 844, 830, 870, 871, 812,
	807, 847, 848, 834, 853, 854, 855, 778, 826, 827,
	828, 850, 851, 808, 809, 810, 811, 0, 0, 0,
	481, 482, 483, 505, 0, 467, 529, 654, 0, 0,
	0, 0, 0, 0, 0, 579, 591, 625, 0, 635,
	636, 638, 640, 856, 642, 441, 442, 649, 0, 852,
	645, 646, 643, 379, 429, 447, 436, 822, 661, 520,
	521, 662, 631, 0, 771, 0, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 1746, 0, 0, 0,
	774, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 813, 571, 522, 438, 390,
	589, 588, 0, 0, 882, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 766,
	0, 0, 803, 858, 857, 790, 800, 0, 0, 314,
	232, 517, 637, 519, 518, 791, 0, 792, 796, 799,
	795, 793, 794, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 770, 0, 775, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 767, 768,
	0, 0, 0, 0, 823, 0, 769, 0, 0, 818,
	797, 801, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 798, 821, 825, 335, 896, 819, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 897, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 816, 0,
	634, 0, 473, 0, 0, 880, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 820, 0, 427, 408,
	893, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 1747, 1748, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 877, 404, 599, 632, 633, 524, 0, 892, 872,
	874, 875, 879, 883, 884, 885, 886, 887, 889, 891,
	895, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 894, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 824, 574, 575, 394, 395, 396, 397, 881,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 903, 876,
	902, 904, 905, 901, 906, 907, 888, 779, 0, 831,
	899, 898, 900, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 786, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 865, 838, 839, 840,
	776, 841, 835, 836, 777, 837, 866, 829, 862, 863,
	805, 832, 842, 861, 843, 864, 867, 868, 908, 909,
	849, 833, 261, 910, 846, 869, 860, 859, 844, 830,
	870, 871, 812, 807, 847, 848, 834, 853, 854, 855,
	778, 826, 827, 828, 850, 851, 808, 809, 810, 811,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 856, 642, 441, 442,
	649, 0, 852, 645, 646, 643, 379, 429, 447, 436,
	822, 661, 520, 521, 662, 631, 0, 771, 0, 406,
	0, 0, 535, 568, 557, 641, 523, 0, 0, 0,
	0, 0, 0, 774, 0, 0, 0, 341, 0, 0,
	374, 572, 554, 564, 555, 540, 541, 542, 549, 353,
	543, 544, 545, 515, 546, 516, 547, 548, 813, 571,
	522, 438, 390, 589, 588, 0, 0, 882, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 766, 0, 0, 803, 858, 857, 790, 800,
	0, 0, 314, 232, 517, 637, 519, 518, 791, 0,
	792, 796, 799, 795, 793, 794, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 770, 0, 775, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 767, 768, 0, 0, 0, 0, 823, 0, 769,
	0, 0, 818, 797, 801, 0, 0, 0, 0, 304,
	444, 463, 315, 433, 476, 320, 659, 455, 310, 405,
	430, 0, 0, 306, 461, 440, 387, 364, 365, 305,
	0, 424, 339, 355, 336, 403, 798, 821, 825, 335,
	896, 819, 471, 308, 0, 470, 402, 457, 462, 388,
	381, 0, 307, 459, 386, 380, 368, 345, 897, 369,
	370, 359, 414, 378, 415, 360, 392, 391, 393, 0,
	0, 0, 0, 0, 499, 500, 0, 0, 648, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	630, 816, 0, 634, 0, 473, 0, 0, 880, 0,
	0, 0, 443, 0, 0, 371, 0, 0, 0, 820,
	0, 427, 408, 893, 0, 0, 425, 376, 458, 416,
	464, 445, 472, 421, 417, 298, 446, 338, 389, 311,
	313, 333, 340, 342, 346, 347, 398, 399, 411, 432,
	448, 449, 450, 337, 321, 426, 322, 357, 323, 299,
	329, 327, 330, 434, 331, 301, 412, 454, 0, 352,
	422, 384, 302, 383, 413, 453, 452, 312, 480, 486,
	487, 576, 0, 492, 665, 666, 667, 501, 0, 418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 506, 507, 508, 510, 511, 512, 513, 577, 594,
	561, 531, 494, 585, 528, 532, 533, 362, 597, 0,
	0, 0, 485, 372, 373, 0, 344, 343, 385, 303,
	350, 295, 296, 660, 877, 404, 599, 632, 633, 524,
	0, 892, 872, 874, 875, 879, 883, 884, 885, 886,
	887, 889, 891, 895, 658, 0, 578, 593, 663, 592,
	655, 410, 0, 431, 590, 537, 0, 582, 556, 0,
	583, 552, 587, 0, 526, 0, 439, 466, 478, 495,
	498, 527, 612, 613, 614, 300, 497, 616, 617, 618,
	619, 620, 621, 622, 615, 894, 559, 536, 562, 477,
	539, 538, 0, 0, 573, 824, 574, 575, 394, 395,
	396, 397, 881, 600, 319, 496, 420, 0, 560, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 566, 563,
	668, 0, 623, 624, 0, 0, 490, 491, 349, 356,
	509, 358, 318, 409, 351, 475, 366, 0, 502, 567,
	503, 626, 629, 627, 628, 401, 361, 363, 435, 367,
	377, 423, 474, 407, 428, 316, 465, 437, 382, 553,
	580, 903, 876, 902, 904, 905, 901, 906, 907, 888,
	779, 0, 831, 899, 898, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 608, 607, 606,
	605, 604, 603, 602, 601, 0, 0, 550, 451, 328,
	289, 324, 325, 332, 656, 653, 456, 657, 786, 297,
	530, 375, 0, 419, 348, 595, 596, 0, 647, 865,
	838, 839, 840, 776, 841, 835, 836, 777, 837, 866,
	829, 862, 863, 805, 832, 842, 861, 843, 864, 867,
	868, 908, 909, 849, 833, 261, 910, 846, 869, 860,
	859, 844, 830, 870, 871, 812, 807, 847, 848, 834,
	853, 854, 855, 778, 826, 827, 828, 850, 851, 808,
	809, 810, 811, 0, 0, 0, 481, 482, 483, 505,
	0, 467, 529, 654, 0, 0, 0, 0, 0, 0,
	0, 579, 591, 625, 0, 635, 636, 638, 640, 856,
	642, 441, 442, 649, 0, 852, 645, 646, 643, 379,
	429, 447, 436, 822, 661, 520, 521, 662, 631, 0,
	771, 0, 406, 0, 0, 535, 568, 557, 641, 523,
	0, 0, 0, 0, 0, 0, 774, 0, 0, 0,
	341, 0, 0, 374, 572, 554, 564, 555, 540, 541,
	542, 549, 353, 543, 544, 545, 515, 546, 516, 547,
	548, 813, 571, 522, 438, 390, 589, 588, 0, 0,
	882, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 803, 858,
	857, 790, 800, 0, 0, 314, 232, 517, 637, 519,
	518, 791, 0, 792, 796, 799, 795, 793, 794, 0,
	873, 0, 0, 0, 0, 0, 0, 758, 770, 0,
	775, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 767, 768, 0, 0, 0, 0,
	823, 0, 769, 0, 0, 818, 797, 801, 0, 0,
	0, 0, 304, 444, 463, 315, 433, 476, 320, 659,
	455, 310, 405, 430, 0, 0, 306, 461, 440, 387,
	364, 365, 305, 0, 424, 339, 355, 336, 403, 798,
	821, 825, 335, 896, 819, 471, 308, 0, 470, 402,
	457, 462, 388, 381, 0, 307, 459, 386, 380, 368,
	345, 897, 369, 370, 359, 414, 378, 415, 360, 392,
	391, 393, 0, 0, 0, 0, 0, 499, 500, 0,
	0, 648, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 630, 816, 0, 634, 0, 473, 0,
	0, 880, 0, 0, 0, 443, 0, 0, 371, 0,
	0, 0, 820, 0, 427, 408, 893, 0, 0, 425,
	376, 458, 416, 464, 445, 472, 421, 417, 298, 446,
	338, 389, 311, 313, 333, 340, 342, 346, 347, 398,
	399, 411, 432, 448, 449, 450, 337, 321, 426, 322,
	357, 323, 299, 329, 327, 330, 434, 331, 301, 412,
	454, 0, 352, 422, 384, 302, 383, 413, 453, 452,
	312, 480, 486, 487, 576, 0, 492, 665, 666, 667,
	501, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 506, 507, 508, 510, 511, 512,
	513, 577, 594, 561, 531, 494, 585, 528, 532, 533,
	362, 597, 0, 0, 0, 485, 372, 373, 0, 344,
	343, 385, 303, 350, 295, 296, 660, 877, 404, 599,
	632, 633, 524, 0, 892, 872, 874, 875, 879, 883,
	884, 885, 886, 887, 889, 891, 895, 658, 0, 578,
	593, 663, 592, 655, 410, 0, 431, 590, 537, 0,
	582, 556, 0, 583, 552, 587, 0, 526, 0, 439,
	466, 478, 495, 498, 527, 612, 613, 614, 300, 497,
	616, 617, 618, 619, 620, 621, 622, 615, 894, 559,
	536, 562, 477, 539, 538, 0, 0, 573, 824, 574,
	575, 394, 395, 396, 397, 881, 600, 319, 496, 420,
	0, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 566, 563, 668, 0, 623, 624, 0, 0, 490,
	491, 349, 356, 509, 358, 318, 409, 351, 475, 366,
	0, 502, 567, 503, 626, 629, 627, 628, 401, 361,
	363, 435, 367, 377, 423, 474, 407, 428, 316, 465,
	437, 382, 553, 580, 903, 876, 902, 904, 905, 901,
	906, 907, 888, 779, 0, 831, 899, 898, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	608, 607, 606, 605, 604, 603, 602, 601, 0, 0,
	550, 451, 328, 289, 324, 325, 332, 656, 653, 456,
	657, 786, 297, 530, 375, 0, 419, 348, 595, 596,
	0, 647, 865, 838, 839, 840, 776, 841, 835, 836,
	777, 837, 866, 829, 862, 863, 805, 832, 842, 861,
	843, 864, 867, 868, 908, 909, 849, 833, 261, 910,
	846, 869, 860, 859, 844, 830, 870, 871, 812, 807,
	847, 848, 834, 853, 854, 855, 778, 826, 827, 828,
	850, 851, 808, 809, 810, 811, 0, 0, 0, 481,
	482, 483, 505, 0, 467, 529, 654, 0, 0, 0,
	0, 0, 0, 0, 579, 591, 625, 0, 635, 636,
	638, 640, 856, 642, 441, 442, 649, 0, 852, 645,
	646, 643, 379, 429, 447, 436, 0, 661, 520, 521,
	662, 631, 0, 771, 209, 65, 200, 171, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 535, 568, 557,
	641, 523, 0, 201, 0, 0, 0, 0, 0, 0,
	192, 0, 341, 0, 202, 374, 572, 554, 564, 555,
	540, 541, 542, 549, 353, 543, 544, 545, 515, 546,
	516, 547, 548, 141, 571, 522, 438, 390, 589, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 314, 232, 517,
	637, 519, 518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 223, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 444, 463, 315, 433, 476,
	320, 244, 455, 310, 405, 430, 0, 0, 306, 461,
	440, 387, 364, 365, 305, 0, 424, 339, 355, 336,
	403, 0, 460, 488, 335, 479, 0, 471, 308, 0,
	470, 402, 457, 462, 388, 381, 0, 307, 459, 386,
	380, 368, 345, 504, 369, 370, 359, 414, 378, 415,
	360, 392, 391, 393, 0, 0, 0, 0, 0, 499,
	500, 0, 0, 648, 0, 0, 0, 0, 170, 198,
	207, 199, 125, 0, 0, 630, 0, 0, 634, 0,
	473, 0, 0, 224, 0, 0, 0, 443, 0, 0,
	371, 197, 191, 190, 489, 0, 427, 408, 236, 0,
	0, 425, 376, 458, 416, 464, 445, 472, 421, 417,
	298, 446, 338, 389, 311, 313, 333, 340, 342, 346,
	347, 398, 399, 411, 432, 448, 449, 450, 337, 321,
	426, 322, 357, 323, 299, 329, 327, 330, 434, 331,
	301, 412, 454, 0, 352, 422, 384, 302, 383, 413,
	453, 452, 312, 480, 486, 487, 576, 0, 492, 609,
	610, 611, 501, 0, 418, 0, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 507, 508, 510,
	511, 512, 513, 577, 594, 561, 531, 494, 585, 528,
	532, 533, 362, 597, 0, 0, 0, 485, 372, 373,
	0, 344, 343, 385, 303, 350, 295, 296, 468, 334,
	404, 599, 632, 633, 524, 0, 586, 525, 534, 326,
	558, 570, 569, 400, 484, 227, 581, 584, 514, 237,
	0, 578, 593, 551, 592, 238, 410, 0, 431, 590,
	537, 0, 582, 556, 0, 583, 552, 587, 0, 526,
	0, 439, 466, 478, 495, 498, 527, 612, 613, 614,
	300, 497, 616, 617, 618, 619, 620, 621, 622, 615,
	469, 559, 536, 562, 477, 539, 538, 0, 0, 573,
	493, 574, 575, 394, 395, 396, 397, 354, 600, 319,
	496, 420, 139, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 563, 235, 0, 623, 624, 0,
	0, 490, 491, 349, 356, 509, 358, 318, 409, 351,
	475, 366, 0, 502, 567, 503, 626, 629, 627, 628,
	401, 361, 363, 435, 367, 377, 423, 474, 407, 428,
	316, 465, 437, 382, 553, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 0, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 607, 606, 605, 604, 603, 602, 601,
	0, 0, 550, 451, 328, 289, 324, 325, 332, 242,
	309, 456, 243, 0, 297, 530, 375, 172, 419, 348,
	595, 596, 62, 647, 245, 246, 247, 248, 249, 250,
	251, 252, 290, 253, 254, 255, 256, 257, 258, 259,
	262, 263, 264, 265, 266, 267, 268, 269, 598, 260,
	261, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 0, 0, 0, 291, 292,
	293, 294, 0, 0, 285, 286, 287, 288, 0, 0,
	0, 481, 482, 483, 505, 0, 467, 529, 239, 46,
	225, 228, 230, 229, 0, 63, 579, 591, 625, 5,
	635, 636, 638, 640, 639, 642, 441, 442, 649, 0,
	644, 645, 646, 643, 379, 429, 447, 436, 144, 240,
	520, 521, 241, 631, 209, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 406, 0, 0, 535, 568, 557,
	641, 523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 374, 572, 554, 564, 555,
	540, 541, 542, 549, 353, 543, 544, 545, 515, 546,
	516, 547, 548, 141, 571, 522, 438, 390, 589, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 314, 232, 517,
	637, 519, 518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 2442, 2445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 444, 463, 315, 433, 476,
	320, 659, 455, 310, 405, 430, 0, 0, 306, 461,
	440, 387, 364, 365, 305, 0, 424, 339, 355, 336,
	403, 0, 460, 488, 335, 479, 0, 471, 308, 0,
	470, 402, 457, 462, 388, 381, 0, 307, 459, 386,
	380, 368, 345, 504, 369, 370, 359, 414, 378, 415,
	360, 392, 391, 393, 0, 0, 0, 0, 0, 499,
	500, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 0, 0, 634, 2446,
	473, 0, 0, 0, 2441, 0, 2440, 443, 2438, 2443,
	371, 0, 0, 0, 489, 0, 427, 408, 664, 0,
	0, 425, 376, 458, 416, 464, 445, 472, 421, 417,
	298, 446, 338, 389, 311, 313, 333, 340, 342, 346,
	347, 398, 399, 411, 432, 448, 449, 450, 337, 321,
	426, 322, 357, 323, 299, 329, 327, 330, 434, 331,
	301, 412, 454, 2444, 352, 422, 384, 302, 383, 413,
	453, 452, 312, 480, 486, 487, 576, 0, 492, 665,
	666, 667, 501, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 507, 508, 510,
	511, 512, 513, 577, 594, 561, 531, 494, 585, 528,
	532, 533, 362, 597, 0, 0, 0, 485, 372, 373,
	0, 344, 343, 385, 303, 350, 295, 296, 660, 334,
	404, 599, 632, 633, 524, 0, 586, 525, 534, 326,
	558, 570, 569, 400, 484, 0, 581, 584, 514, 658,
	0, 578, 593, 663, 592, 655, 410, 0, 431, 590,
	537, 0, 582, 556, 0, 583, 552, 587, 0, 526,
	0, 439, 466, 478, 495, 498, 527, 612, 613, 614,
	300, 497, 616, 617, 618, 619, 620, 621, 622, 615,
	469, 559, 536, 562, 477, 539, 538, 0, 0, 573,
	493, 574, 575, 394, 395, 396, 397, 354, 600, 319,
	496, 420, 0, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 563, 668, 0, 623, 624, 0,
	0, 490, 491, 349, 356, 509, 358, 318, 409, 351,
	475, 366, 0, 502, 567, 503, 626, 629, 627, 628,
	401, 361, 363, 435, 367, 377, 423, 474, 407, 428,
	316, 465, 437, 382, 553, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 607, 606, 605, 604, 603, 602, 601,
	0, 0, 550, 451, 328, 289, 324, 325, 332, 656,
	653, 456, 657, 0, 297, 530, 375, 172, 419, 348,
	595, 596, 0, 647, 245, 246, 247, 248, 249, 250,
	251, 252, 290, 253, 254, 255, 256, 257, 258, 259,
	262, 263, 264, 265, 266, 267, 268, 269, 598, 260,
	261, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 0, 0, 0, 291, 292,
	293, 294, 0, 0, 285, 286, 287, 288, 0, 0,
	0, 481, 482, 483, 505, 0, 467, 529, 654, 0,
	0, 0, 0, 0, 0, 0, 579, 591, 625, 0,
	635, 636, 638, 640, 639, 642, 441, 442, 649, 0,
	644, 645, 646, 643, 379, 429, 447, 436, 0, 661,
	520, 521, 662, 631, 406, 0, 0, 535, 568, 557,
	641, 523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 374, 572, 554, 564, 555,
	540, 541, 542, 549, 353, 543, 544, 545, 515, 546,
	516, 547, 548, 0, 571, 522, 438, 390, 589, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1338, 0, 0,
	231, 0, 0, 790, 800, 0, 0, 314, 232, 517,
	637, 519, 518, 791, 0, 792, 796, 799, 795, 793,
	794, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 797, 0,
	0, 0, 0, 0, 304, 444, 463, 315, 433, 476,
	320, 659, 455, 310, 405, 430, 0, 0, 306, 461,
	440, 387, 364, 365, 305, 0, 424, 339, 355, 336,
	403, 798, 460, 488, 335, 479, 0, 471, 308, 0,
	470, 402, 457, 462, 388, 381, 0, 307, 459, 386,
	380, 368, 345, 504, 369, 370, 359, 414, 378, 415,
	360, 392, 391, 393, 0, 0, 0, 0, 0, 499,
	500, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 0, 0, 634, 0,
	473, 0, 0, 0, 0, 0, 0, 443, 0, 0,
	371, 0, 0, 0, 489, 0, 427, 408, 664, 0,
	0, 425, 376, 458, 416, 464, 445, 472, 421, 417,
	298, 446, 338, 389, 311, 313, 333, 340, 342, 346,
	347, 398, 399, 411, 432, 448, 449, 450, 337, 321,
	426, 322, 357, 323, 299, 329, 327, 330, 434, 331,
	301, 412, 454, 0, 352, 422, 384, 302, 383, 413,
	453, 452, 312, 480, 486, 487, 576, 0, 492, 665,
	666, 667, 501, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 507, 508, 510,
	511, 512, 513, 577, 594, 561, 531, 494, 585, 528,
	532, 533, 362, 597, 0, 0, 0, 485, 372, 373,
	0, 344, 343, 385, 303, 350, 295, 296, 660, 334,
	404, 599, 632, 633, 524, 0, 586, 525, 534, 326,
	558, 570, 569, 400, 484, 0, 581, 584, 514, 658,
	0, 578, 593, 663, 592, 655, 410, 0, 431, 590,
	537, 0, 582, 556, 0, 583, 552, 587, 0, 526,
	0, 439, 466, 478, 495, 498, 527, 612, 613, 614,
	300, 497, 616, 617, 618, 619, 620, 621, 622, 615,
	469, 559, 536, 562, 477, 539, 538, 0, 0, 573,
	493, 574, 575, 394, 395, 396, 397, 354, 600, 319,
	496, 420, 0, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 563, 668, 0, 623, 624, 0,
	0, 490, 491, 349, 356, 509, 358, 318, 409, 351,
	475, 366, 0, 502, 567, 503, 626, 629, 627, 628,
	401, 361, 363, 435, 367, 377, 423, 474, 407, 428,
	316, 465, 437, 382, 553, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 607, 606, 605, 604, 603, 602, 601,
	0, 0, 550, 451, 328, 289, 324, 325, 332, 656,
	653, 456, 657, 0, 297, 530, 375, 0, 419, 348,
	595, 596, 0, 647, 245, 246, 247, 248, 249, 250,
	251, 252, 290, 253, 254, 255, 256, 257, 258, 259,
	262, 263, 264, 265, 266, 267, 268, 269, 598, 260,
	261, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 0, 0, 0, 291, 292,
	293, 294, 0, 0, 285, 286, 287, 288, 0, 0,
	0, 481, 482, 483, 505, 0, 467, 529, 654, 0,
	0, 0, 0, 0, 0, 0, 579, 591, 625, 0,
	635, 636, 638, 640, 639, 642, 441, 442, 649, 0,
	644, 645, 646, 643, 379, 429, 447, 436, 0, 661,
	520, 521, 662, 631, 209, 65, 200, 171, 0, 0,
	0, 0, 0, 0, 406, 687, 0, 535, 568, 557,
	641, 523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 374, 572, 554, 564, 555,
	540, 541, 542, 549, 353, 543, 544, 545, 515, 546,
	516, 547, 548, 0, 571, 522, 438, 390, 589, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 0, 0, 0, 693, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 314, 232, 517,
	637, 519, 518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 444, 463, 315, 433, 476,
	320, 659, 455, 310, 405, 430, 0, 0, 306, 461,
	440, 387, 364, 365, 305, 0, 424, 339, 355, 336,
	403, 0, 460, 488, 335, 479, 0, 471, 308, 0,
	470, 402, 457, 462, 388, 381, 0, 307, 459, 386,
	380, 368, 345, 504, 369, 370, 359, 414, 378, 415,
	360, 392, 391, 393, 0, 0, 0, 0, 0, 499,
	500, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 691, 692, 0, 630, 0, 0, 634, 0,
	473, 0, 0, 0, 0, 0, 0, 443, 0, 0,
	371, 0, 0, 0, 489, 0, 427, 408, 664, 0,
	0, 425, 376, 458, 416, 464, 445, 472, 421, 417,
	298, 446, 338, 389, 311, 313, 333, 340, 342, 346,
	347, 398, 399, 411, 432, 448, 449, 450, 337, 321,
	426, 322, 357, 323, 299, 329, 327, 330, 434, 331,
	301, 412, 454, 0, 352, 422, 384, 302, 383, 413,
	453, 452, 312, 480, 486, 487, 576, 0, 492, 665,
	666, 667, 501, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 507, 508, 510,
	511, 512, 513, 577, 594, 561, 531, 494, 585, 528,
	532, 533, 362, 597, 0, 0, 0, 485, 372, 373,
	0, 344, 343, 385, 303, 350, 295, 296, 660, 334,
	404, 599, 632, 633, 524, 0, 586, 525, 534, 326,
	558, 570, 569, 400, 484, 0, 581, 584, 514, 658,
	0, 578, 593, 663, 592, 655, 410, 0, 431, 590,
	537, 0, 582, 556, 0, 583, 552, 587, 0, 526,
	0, 439, 466, 478, 495, 498, 527, 612, 613, 614,
	300, 497, 616, 617, 618, 619, 620, 621, 622, 615,
	469, 559, 536, 562, 477, 539, 538, 0, 0, 573,
	493, 574, 575, 394, 395, 396, 397, 688, 690, 319,
	496, 420, 702, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 563, 668, 0, 623, 624, 0,
	0, 490, 491, 349, 356, 509, 358, 318, 409, 351,
	475, 366, 0, 502, 567, 503, 626, 629, 627, 628,
	401, 361, 363, 435, 367, 377, 423, 474, 407, 428,
	316, 465, 437, 382, 553, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 0, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 607, 606, 605, 604, 603, 602, 601,
	0, 0, 550, 451, 328, 289, 324, 325, 332, 656,
	653, 456, 657, 0, 297, 530, 375, 172, 419, 348,
	595, 596, 0, 647, 245, 246, 247, 248, 249, 250,
	251, 252, 290, 253, 254, 255, 256, 257, 258, 259,
	262, 263, 264, 265, 266, 267, 268, 269, 598, 260,
	261, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 0, 0, 0, 291, 292,
	293, 294, 0, 0, 285, 286, 287, 288, 0, 0,
	0, 481, 482, 483, 505, 0, 467, 529, 654, 0,
	0, 0, 0, 0, 0, 0, 579, 591, 625, 0,
	635, 636, 638, 640, 639, 642, 441, 442, 649, 0,
	644, 645, 646, 643, 379, 429, 447, 436, 0, 661,
	520, 521, 662, 631, 406, 0, 0, 535, 568, 557,
	641, 523, 0, 1146, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 374, 572, 554, 564, 555,
	540, 541, 542, 549, 353, 543, 544, 545, 515, 546,
	516, 547, 548, 0, 571, 522, 438, 390, 589, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 314, 232, 517,
	637, 519, 518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1131, 0, 0,
	0, 0, 0, 0, 304, 444, 463, 315, 433, 476,
	320, 659, 455, 310, 405, 430, 0, 0, 2605, 2608,
	2609, 2610, 2611, 2612, 2613, 0, 2618, 2614, 2615, 2616,
	2617, 0, 2600, 2601, 2602, 2603, 1129, 2584, 2606, 0,
	2585, 402, 2586, 2587, 2588, 2589, 1133, 2590, 2591, 2592,
	2593, 2594, 2597, 2598, 2595, 2596, 2604, 414, 378, 415,
	360, 392, 391, 393, 1157, 1159, 1161, 1163, 1166, 499,
	500, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 0, 0, 634, 0,
	473, 0, 0, 0, 0, 0, 0, 443, 0, 0,
	371, 0, 0, 0, 2599, 0, 427, 408, 664, 0,
	0, 425, 376, 458, 416, 464, 445, 472, 421, 417,
	298, 446, 338, 389, 311, 313, 333, 340, 342, 346,
	347, 398, 399, 411, 432, 448, 449, 450, 337, 321,
	426, 322, 357, 323, 299, 329, 327, 330, 434, 331,
	301, 412, 454, 0, 352, 422, 384, 302, 383, 413,
	453, 452, 312, 480, 486, 487, 576, 0, 492, 665,
	666, 667, 501, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 507, 508, 510,
	511, 512, 513, 577, 594, 561, 531, 494, 585, 528,
	532, 533, 362, 597, 0, 0, 0, 485, 372, 373,
	0, 344, 343, 385, 303, 350, 295, 296, 660, 334,
	404, 599, 632, 633, 524, 0, 586, 525, 534, 326,
	558, 570, 569, 400, 484, 0, 581, 584, 514, 658,
	0, 578, 593, 663, 592, 655, 410, 0, 431, 590,
	537, 0, 582, 556, 0, 583, 552, 587, 0, 526,
	0, 439, 466, 478, 495, 498, 527, 612, 613, 614,
	300, 497, 616, 617, 618, 619, 620, 621, 622, 615,
	469, 559, 536, 562, 477, 539, 538, 0, 0, 573,
	493, 574, 575, 394, 395, 396, 397, 354, 600, 319,
	496, 420, 0, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 563, 668, 0, 623, 624, 0,
	0, 490, 491, 349, 356, 509, 358, 318, 409, 351,
	475, 366, 0, 502, 567, 503, 626, 629, 627, 628,
	401, 361, 363, 435, 367, 377, 423, 474, 407, 428,
	316, 465, 437, 382, 553, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 607, 606, 605, 604, 603, 602, 601,
	0, 0, 550, 451, 328, 289, 324, 325, 332, 656,
	653, 456, 657, 0, 297, 2607, 375, 0, 419, 348,
	595, 596, 0, 647, 245, 246, 247, 248, 249, 250,
	251, 252, 290, 253, 254, 255, 256, 257, 258, 259,
	262, 263, 264, 265, 266, 267, 268, 269, 598, 260,
	261, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 0, 0, 0, 291, 292,
	293, 294, 0, 0, 285, 286, 287, 288, 0, 0,
	0, 481, 482, 483, 505, 0, 467, 529, 654, 0,
	0, 0, 0, 0, 0, 0, 579, 591, 625, 0,
	635, 636, 638, 640, 639, 642, 441, 442, 649, 0,
	644, 645, 646, 643, 379, 429, 447, 436, 0, 661,
	520, 521, 662, 631, 406, 0, 0, 535, 568, 557,
	641, 523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 374, 572, 554, 564, 555,
	540, 541, 542, 549, 353, 543, 544, 545, 515, 546,
	516, 547, 548, 0, 571, 522, 438, 390, 589, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 314, 232, 517,
	637, 519, 518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 2442, 2445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 444, 463, 315, 433, 476,
	320, 659, 455, 310, 405, 430, 0, 0, 306, 461,
	440, 387, 364, 365, 305, 0, 424, 339, 355, 336,
	403, 0, 460, 488, 335, 479, 0, 471, 308, 0,
	470, 402, 457, 462, 388, 381, 0, 307, 459, 386,
	380, 368, 345, 504, 369, 370, 359, 414, 378, 415,
	360, 392, 391, 393, 0, 0, 0, 0, 0, 499,
	500, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 0, 0, 634, 2446,
	473, 0, 0, 0, 2441, 0, 2440, 443, 2438, 2443,
	371, 0, 0, 0, 489, 0, 427, 408, 664, 0,
	0, 425, 376, 458, 416, 464, 445, 472, 421, 417,
	298, 446, 338, 389, 311, 313, 333, 340, 342, 346,
	347, 398, 399, 411, 432, 448, 449, 450, 337, 321,
	426, 322, 357, 323, 299, 329, 327, 330, 434, 331,
	301, 412, 454, 2444, 352, 422, 384, 302, 383, 413,
	453, 452, 312, 480, 486, 487, 576, 0, 492, 665,
	666, 667, 501, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 507, 508, 510,
	511, 512, 513, 577, 594, 561, 531, 494, 585, 528,
	532, 533, 362, 597, 0, 0, 0, 485, 372, 373,
	0, 344, 343, 385, 303, 350, 295, 296, 660, 334,
	404, 599, 632, 633, 524, 0, 586, 525, 534, 326,
	558, 570, 569, 400, 484, 0, 581, 584, 514, 658,
	0, 578, 593, 663, 592, 655, 410, 0, 431, 590,
	537, 0, 582, 556, 0, 583, 552, 587, 0, 526,
	0, 439, 466, 478, 495, 498, 527, 612, 613, 614,
	300, 497, 616, 617, 618, 619, 620, 621, 622, 615,
	469, 559, 536, 562, 477, 539, 538, 0, 0, 573,
	493, 574, 575, 394, 395, 396, 397, 354, 600, 319,
	496, 420, 0, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 563, 668, 0, 623, 624, 0,
	0, 490, 491, 349, 356, 509, 358, 318, 409, 351,
	475, 366, 0, 502, 567, 503, 626, 629, 627, 628,
	401, 361, 363, 435, 367, 377, 423, 474, 407, 428,
	316, 465, 437, 382, 553, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 607, 606, 605, 604, 603, 602, 601,
	0, 0, 550, 451, 328, 289, 324, 325, 332, 656,
	653, 456, 657, 0, 297, 530, 375, 0, 419, 348,
	595, 596, 0, 647, 245, 246, 247, 248, 249, 250,
	251, 252, 290, 253, 254, 255, 256, 257, 258, 259,
	262, 263, 264, 265, 266, 267, 268, 269, 598, 260,
	261, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 0, 0, 0, 291, 292,
	293, 294, 0, 0, 285, 286, 287, 288, 0, 0,
	0, 481, 482, 483, 505, 0, 467, 529, 654, 0,
	0, 0, 0, 0, 0, 0, 579, 591, 625, 0,
	635, 636, 638, 640, 639, 642, 441, 442, 649, 0,
	644, 645, 646, 643, 379, 429, 447, 436, 0, 661,
	520, 521, 662, 631, 406, 0, 0, 535, 568, 557,
	641, 523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 374, 572, 554, 564, 555,
	540, 541, 542, 549, 353, 543, 544, 545, 515, 546,
	516, 547, 548, 0, 571, 522, 438, 390, 589, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 314, 232, 517,
	637, 519, 518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 2463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 444, 463, 315, 433, 476,
	320, 659, 455, 310, 405, 430, 0, 0, 306, 461,
	440, 387, 364, 365, 305, 0, 424, 339, 355, 336,
	403, 0, 460, 488, 335, 479, 0, 471, 308, 0,
	470, 402, 457, 462, 388, 381, 0, 307, 459, 386,
	380, 368, 345, 504, 369, 370, 359, 414, 378, 415,
	360, 392, 391, 393, 0, 0, 0, 0, 0, 499,
	500, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 0, 0, 634, 2462,
	473, 0, 0, 0, 2468, 2465, 2467, 443, 0, 2466,
	371, 0, 0, 0, 489, 0, 427, 408, 664, 0,
	2460, 425, 376, 458, 416, 464, 445, 472, 421, 417,
	298, 446, 338, 389, 311, 313, 333, 340, 342, 346,
	347, 398, 399, 411, 432, 448, 449, 450, 337, 321,
	426, 322, 357, 323, 299, 329, 327, 330, 434, 331,
	301, 412, 454, 0, 352, 422, 384, 302, 383, 413,
	453, 452, 312, 480, 486, 487, 576, 0, 492, 665,
	666, 667, 501, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 507, 508, 510,
	511, 512, 513, 577, 594, 561, 531, 494, 585, 528,
	532, 533, 362, 597, 0, 0, 0, 485, 372, 373,
	0, 344, 343, 385, 303, 350, 295, 296, 660, 334,
	404, 599, 632, 633, 524, 0, 586, 525, 534, 326,
	558, 570, 569, 400, 484, 0, 581, 584, 514, 658,
	0, 578, 593, 663, 592, 655, 410, 0, 431, 590,
	537, 0, 582, 556, 0, 583, 552, 587, 0, 526,
	0, 439, 466, 478, 495, 498, 527, 612, 613, 614,
	300, 497, 616, 617, 618, 619, 620, 621, 622, 615,
	469, 559, 536, 562, 477, 539, 538, 0, 0, 573,
	493, 574, 575, 394, 395, 396, 397, 354, 600, 319,
	496, 420, 0, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 563, 668, 0, 623, 624, 0,
	0, 490, 491, 349, 356, 509, 358, 318, 409, 351,
	475, 366, 0, 502, 567, 503, 626, 629, 627, 628,
	401, 361, 363, 435, 367, 377, 423, 474, 407, 428,
	316, 465, 437, 382, 553, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 607, 606, 605, 604, 603, 602, 601,
	0, 0, 550, 451, 328, 289, 324, 325, 332, 656,
	653, 456, 657, 0, 297, 530, 375, 0, 419, 348,
	595, 596, 0, 647, 245, 246, 247, 248, 249, 250,
	251, 252, 290, 253, 254, 255, 256, 257, 258, 259,
	262, 263, 264, 265, 266, 267, 268, 269, 598, 260,
	261, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 0, 0, 0, 291, 292,
	293, 294, 0, 0, 285, 286, 287, 288, 0, 0,
	0, 481, 482, 483, 505, 0, 467, 529, 654, 0,
	0, 0, 0, 0, 0, 0, 579, 591, 625, 0,
	635, 636, 638, 640, 639, 642, 441, 442, 649, 0,
	644, 645, 646, 643, 379, 429, 447, 436, 0, 661,
	520, 521, 662, 631, 406, 0, 0, 535, 568, 557,
	641, 523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 341, 0, 0, 374, 572, 554, 564, 555,
	540, 541, 542, 549, 353, 543, 544, 545, 515, 546,
	516, 547, 548, 0, 571, 522, 438, 390, 589, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 0, 0, 0, 0, 314, 232, 517,
	637, 519, 518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 2463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 444, 463, 315, 433, 476,
	320, 659, 455, 310, 405, 430, 0, 0, 306, 461,
	440, 387, 364, 365, 305, 0, 424, 339, 355, 336,
	403, 0, 460, 488, 335, 479, 0, 471, 308, 0,
	470, 402, 457, 462, 388, 381, 0, 307, 459, 386,
	380, 368, 345, 504, 369, 370, 359, 414, 378, 415,
	360, 392, 391, 393, 0, 0, 0, 0, 0, 499,
	500, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 0, 0, 634, 2462,
	473, 0, 0, 0, 2468, 2465, 2467, 443, 0, 2466,
	371, 0, 0, 0, 489, 0, 427, 408, 664, 0,
	0, 425, 376, 458, 416, 464, 445, 472, 421, 417,
	298, 446, 338, 389, 311, 313, 333, 340, 342, 346,
	347, 398, 399, 411, 432, 448, 449, 450, 337, 321,
	426, 322, 357, 323, 299, 329, 327, 330, 434, 331,
	301, 412, 454, 0, 352, 422, 384, 302, 383, 413,
	453, 452, 312, 480, 486, 487, 576, 0, 492, 665,
	666, 667, 501, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 507, 508, 510,
	511, 512, 513, 577, 594, 561, 531, 494, 585, 528,
	532, 533, 362, 597, 0, 0, 0, 485, 372, 373,
	0, 344, 343, 385, 303, 350, 295, 296, 660, 334,
	404, 599, 632, 633, 524, 0, 586, 525, 534, 326,
	558, 570, 569, 400, 484, 0, 581, 584, 514, 658,
	0, 578, 593, 663, 592, 655, 410, 0, 431, 590,
	537, 0, 582, 556, 0, 583, 552, 587, 0, 526,
	0, 439, 466, 478, 495, 498, 527, 612, 613, 614,
	300, 497, 616, 617, 618, 619, 620, 621, 622, 615,
	469, 559, 536, 562, 477, 539, 538, 0, 0, 573,
	493, 574, 575, 394, 395, 396, 397, 354, 600, 319,
	496, 420, 0, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 563, 668, 0, 623, 624, 0,
	0, 490, 491, 349, 356, 509, 358, 318, 409, 351,
	475, 366, 0, 502, 567, 503, 626, 629, 627, 628,
	401, 361, 363, 435, 367, 377, 423, 474, 407, 428,
	316, 465, 437, 382, 553, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 607, 606, 605, 604, 603, 602, 601,
	0, 0, 550, 451, 328, 289, 324, 325, 332, 656,
	653, 456, 657, 0, 297, 530, 375, 0, 419, 348,
	595, 596, 0, 647, 245, 246, 247, 248, 249, 250,
	251, 252, 290, 253, 254, 255, 256, 257, 258, 259,
	262, 263, 264, 265, 266, 267, 268, 269, 598, 260,
	261, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 0, 0, 0, 291, 292,
	293, 294, 0, 0, 285, 286, 287, 288, 0, 0,
	0, 481, 482, 483, 505, 0, 467, 529, 654, 0,
	0, 0, 0, 0, 0, 0, 579, 591, 625, 0,
	635, 636, 638, 640, 639, 642, 441, 442, 649, 0,
	644, 645, 646, 643, 379, 429, 447, 436, 0, 661,
	520, 521, 662, 631, 406, 0, 0, 535, 568, 557,
	641, 523, 0, 0, 0, 0, 0, 2155, 0, 0,
	0, 0, 341, 0, 0, 374, 572, 554, 564, 555,
	540, 541, 542, 549, 353, 543, 544, 545, 515, 546,
	516, 547, 548, 0, 571, 522, 438, 390, 589, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	231, 0, 0, 2156, 0, 0, 0, 314, 232, 517,
	637, 519, 518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 1267, 1268, 1269, 1266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 304, 444, 463, 315, 433, 476,
	320, 659, 455, 310, 405, 430, 0, 0, 306, 461,
	440, 387, 364, 365, 305, 0, 424, 339, 355, 336,
	403, 0, 460, 488, 335, 479, 0, 471, 308, 0,
	470, 402, 457, 462, 388, 381, 0, 307, 459, 386,
	380, 368, 345, 504, 369, 370, 359, 414, 378, 415,
	360, 392, 391, 393, 0, 0, 0, 0, 0, 499,
	500, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 630, 0, 0, 634, 0,
	473, 0, 0, 0, 0, 0, 0, 443, 0, 0,
	371, 0, 0, 0, 489, 0, 427, 408, 664, 0,
	0, 425, 376, 458, 416, 464, 445, 472, 421, 417,
	298, 446, 338, 389, 311, 313, 333, 340, 342, 346,
	347, 398, 399, 411, 432, 448, 449, 450, 337, 321,
	426, 322, 357, 323, 299, 329, 327, 330, 434, 331,
	301, 412, 454, 0, 352, 422, 384, 302, 383, 413,
	453, 452, 312, 480, 486, 487, 576, 0, 492, 665,
	666, 667, 501, 0, 418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 507, 508, 510,
	511, 512, 513, 577, 594, 561, 531, 494, 585, 528,
	532, 533, 362, 597, 0, 0, 0, 485, 372, 373,
	0, 344, 343, 385, 303, 350, 295, 296, 660, 334,
	404, 599, 632, 633, 524, 0, 586, 525, 534, 326,
	558, 570, 569, 400, 484, 0, 581, 584, 514, 658,
	0, 578, 593, 663, 592, 655, 410, 0, 431, 590,
	537, 0, 582, 556, 0, 583, 552, 587, 0, 526,
	0, 439, 466, 478, 495, 498, 527, 612, 613, 614,
	300, 497, 616, 617, 618, 619, 620, 621, 622, 615,
	469, 559, 536, 562, 477, 539, 538, 0, 0, 573,
	493, 574, 575, 394, 395, 396, 397, 354, 600, 319,
	496, 420, 0, 560, 0, 0, 0, 0, 0, 0,
	0, 0, 565, 566, 563, 668, 0, 623, 624, 0,
	0, 490, 491, 349, 356, 509, 358, 318, 409, 351,
	475, 366, 0, 502, 567, 503, 626, 629, 627, 628,
	401, 361, 363, 435, 367, 377, 423, 474, 407, 428,
	316, 465, 437, 382, 553, 580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 608, 607, 606, 605, 604, 603, 602, 601,
	0, 0, 550, 451, 328, 289, 324, 325, 332, 656,
	653, 456, 657, 0, 297, 530, 375, 0, 419, 348,
	595, 596, 0, 647, 245, 246, 247, 248, 249, 250,
	251, 252, 290, 253, 254, 255, 256, 257, 258, 259,
	262, 263, 264, 265, 266, 267, 268, 269, 598, 260,
	261, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 0, 0, 0, 291, 292,
	293, 294, 0, 0, 285, 286, 287, 288, 0, 0,
	0, 481, 482, 483, 505, 0, 467, 529, 654, 0,
	0, 0, 0, 0, 0, 0, 579, 591, 625, 0,
	635, 636, 638, 640, 639, 642, 441, 442, 649, 0,
	644, 645, 646, 643, 379, 429, 447, 436, 209, 661,
	520, 521, 662, 631, 0, 0, 0, 0, 406, 0,
	0, 535, 568, 557, 641, 523, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 341, 0, 0, 374,
	572, 554, 564, 555, 540, 541, 542, 549, 353, 543,
	544, 545, 515, 546, 516, 547, 548, 141, 571, 522,
	438, 390, 589, 588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 2205, 0, 231, 0, 0, 0, 0, 0,
	0, 314, 232, 517, 637, 519, 518, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 304, 444,
	463, 315, 433, 476, 320, 659, 455, 310, 405, 430,
	0, 0, 306, 461, 440, 387, 364, 365, 305, 0,
	424, 339, 355, 336, 403, 0, 460, 488, 335, 479,
	0, 471, 308, 0, 470, 402, 457, 462, 388, 381,
	0, 307, 459, 386, 380, 368, 345, 504, 369, 370,
	359, 414, 378, 415, 360, 392, 391, 393, 0, 0,
	0, 0, 0, 499, 500, 0, 0, 648, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 630,
	0, 0, 634, 0, 473, 0, 0, 0, 0, 0,
	0, 443, 0, 0, 371, 0, 0, 0, 489, 0,
	427, 408, 664, 0, 0, 425, 376, 458, 416, 464,
	445, 472, 421, 417, 298, 446, 338, 389, 311, 313,
	333, 340, 342, 346, 347, 398, 399, 411, 432, 448,
	449, 450, 337, 321, 426, 322, 357, 323, 299, 329,
	327, 330, 434, 331, 301, 412, 454, 0, 352, 422,
	384, 302, 383, 413, 453, 452, 312, 480, 486, 487,
	576, 0, 492, 665, 666, 667, 501, 0, 418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	506, 507, 508, 510, 511, 512, 513, 577, 594, 561,
	531, 494, 585, 528, 532, 533, 362, 597, 0, 0,
	0, 485, 372, 373, 0, 344, 343, 385, 303, 350,
	295, 296, 660, 334, 404, 599, 632, 633, 524, 0,
	586, 525, 534, 326, 558, 570, 569, 400, 484, 0,
	581, 584, 514, 658, 0, 578, 593, 663, 592, 655,
	410, 0, 431, 590, 537, 0, 582, 556, 0, 583,
	552, 587, 0, 526, 0, 439, 466, 478, 495, 498,
	527, 612, 613, 614, 300, 497, 616, 617, 618, 619,
	620, 621, 622, 615, 469, 559, 536, 562, 477, 539,
	538, 0, 0, 573, 493, 574, 575, 394, 395, 396,
	397, 354, 600, 319, 496, 420, 0, 560, 0, 0,
	0, 0, 0, 0, 0, 0, 565, 566, 563, 668,
	0, 623, 624, 0, 0, 490, 491, 349, 356, 509,
	358, 318, 409, 351, 475, 366, 0, 502, 567, 503,
	626, 629, 627, 628, 401, 361, 363, 435, 367, 377,
	423, 474, 407, 428, 316, 465, 437, 382, 553, 580,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 608, 607, 606, 605,
	604, 603, 602, 601, 0, 0, 550, 451, 328, 289,
	324, 325, 332, 656, 653, 456, 657, 0, 297, 530,
	375, 172, 419, 348, 595, 596, 0, 647, 245, 246,
	247, 248, 249, 250, 251, 252, 290, 253, 254, 255,
	256, 257, 258, 259, 262, 263, 264, 265, 266, 267,
	268, 269, 598, 260, 261, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 283, 0,
	0, 0, 291, 292, 293, 294, 0, 0, 285, 286,
	287, 288, 0, 0, 0, 481, 482, 483, 505, 0,
	467, 529, 654, 0, 0, 0, 0, 0, 0, 0,
	579, 591, 625, 0, 635, 636, 638, 640, 639, 642,
	441, 442, 649, 0, 644, 645, 646, 643, 379, 429,
	447, 436, 209, 661, 520, 521, 662, 631, 0, 0,
	0, 0, 406, 0, 0, 535, 568, 557, 641, 523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 0, 0, 374, 572, 554, 564, 555, 540, 541,
	542, 549, 353, 543, 544, 545, 515, 546, 516, 547,
	548, 141, 571, 522, 438, 390, 589, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 2190, 0, 231, 0,
	0, 0, 0, 0, 0, 314, 232, 517, 637, 519,
	518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	317, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 444, 463, 315, 433, 476, 320, 659,
	455, 310, 405, 430, 0, 0, 306, 461, 440, 387,
	364, 365, 305, 0, 424, 339, 355, 336, 403, 0,
	460, 488, 335, 479, 0, 471, 308, 0, 470, 402,
	457, 462, 388, 381, 0, 307, 459, 386, 380, 368,
	345, 504, 369, 370, 359, 414, 378, 415, 360, 392,
	391, 393, 0, 0, 0, 0, 0, 499, 500, 0,
	0, 648, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 630, 0, 0, 634, 0, 473, 0,
	0, 0, 0, 0, 0, 443, 0, 0, 371, 0,
	0, 0, 489, 0, 427, 408, 664, 0, 0, 425,
	376, 458, 416, 464, 445, 472, 421, 417, 298, 446,
	338, 389, 311, 313, 333, 340, 342, 346, 347, 398,
	399, 411, 432, 448, 449, 450, 337, 321, 426, 322,
	357, 323, 299, 329, 327, 330, 434, 331, 301, 412,
	454, 0, 352, 422, 384, 302, 383, 413, 453, 452,
	312, 480, 486, 487, 576, 0, 492, 665, 666, 667,
	501, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 506, 507, 508, 510, 511, 512,
	513, 577, 594, 561, 531, 494, 585, 528, 532, 533,
	362, 597, 0, 0, 0, 485, 372, 373, 0, 344,
	343, 385, 303, 350, 295, 296, 660, 334, 404, 599,
	632, 633, 524, 0, 586, 525, 534, 326, 558, 570,
	569, 400, 484, 0, 581, 584, 514, 658, 0, 578,
	593, 663, 592, 655, 410, 0, 431, 590, 537, 0,
	582, 556, 0, 583, 552, 587, 0, 526, 0, 439,
	466, 478, 495, 498, 527, 612, 613, 614, 300, 497,
	616, 617, 618, 619, 620, 621, 622, 615, 469, 559,
	536, 562, 477, 539, 538, 0, 0, 573, 493, 574,
	575, 394, 395, 396, 397, 354, 600, 319, 496, 420,
	0, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 566, 563, 668, 0, 623, 624, 0, 0, 490,
	491, 349, 356, 509, 358, 318, 409, 351, 475, 366,
	0, 502, 567, 503, 626, 629, 627, 628, 401, 361,
	363, 435, 367, 377, 423, 474, 407, 428, 316, 465,
	437, 382, 553, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	608, 607, 606, 605, 604, 603, 602, 601, 0, 0,
	550, 451, 328, 289, 324, 325, 332, 656, 653, 456,
	657, 0, 297, 530, 375, 172, 419, 348, 595, 596,
	0, 647, 245, 246, 247, 248, 249, 250, 251, 252,
	290, 253, 254, 255, 256, 257, 258, 259, 262, 263,
	264, 265, 266, 267, 268, 269, 598, 260, 261, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
	281, 282, 283, 0, 0, 0, 291, 292, 293, 294,
	0, 0, 285, 286, 287, 288, 0, 0, 0, 481,
	482, 483, 505, 0, 467, 529, 654, 0, 0, 0,
	0, 0, 0, 0, 579, 591, 625, 0, 635, 636,
	638, 640, 639, 642, 441, 442, 649, 0, 644, 645,
	646, 643, 379, 429, 447, 436, 0, 661, 520, 521,
	662, 631, 406, 0, 0, 535, 568, 557, 641, 523,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	341, 1057, 0, 374, 572, 554, 564, 555, 540, 541,
	542, 549, 353, 543, 544, 545, 515, 546, 516, 547,
	548, 0, 571, 522, 438, 390, 589, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 1064,
	1065, 0, 0, 0, 0, 314, 232, 517, 637, 519,
	518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 444, 1051, 315, 433, 476, 320, 659,
	455, 310, 405, 430, 0, 0, 306, 461, 440, 387,
	364, 365, 305, 0, 424, 339, 355, 336, 403, 0,
	460, 488, 335, 479, 1038, 471, 308, 1037, 470, 402,
	457, 462, 388, 381, 0, 307, 459, 386, 380, 368,
	345, 504, 369, 370, 359, 414, 378, 415, 360, 392,
	391, 393, 0, 0, 0, 0, 0, 499, 500, 0,
	0, 648, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 630, 0, 0, 634, 0, 473, 0,
	0, 0, 0, 0, 0, 443, 0, 0, 371, 0,
	0, 0, 489, 0, 427, 408, 664, 0, 0, 425,
	376, 458, 416, 464, 445, 472, 1055, 417, 298, 446,
	338, 389, 311, 313, 333, 340, 342, 346, 347, 398,
	399, 411, 432, 448, 449, 450, 337, 321, 426, 322,
	357, 323, 299, 329, 327, 330, 434, 331, 301, 412,
	454, 0, 352, 422, 384, 302, 383, 413, 453, 452,
	312, 480, 486, 487, 576, 0, 492, 665, 666, 667,
	501, 0, 418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 506, 507, 508, 510, 511, 512,
	513, 577, 594, 561, 531, 494, 585, 528, 532, 533,
	362, 597, 0, 0, 0, 485, 372, 373, 0, 344,
	343, 385, 303, 350, 295, 296, 660, 334, 404, 599,
	632, 633, 524, 0, 586, 525, 534, 326, 558, 570,
	569, 400, 484, 0, 581, 584, 514, 658, 0, 578,
	593, 663, 592, 655, 410, 0, 431, 590, 537, 0,
	582, 556, 0, 583, 552, 587, 0, 526, 0, 439,
	466, 478, 495, 498, 527, 612, 613, 614, 300, 497,
	616, 617, 618, 619, 620, 621, 1056, 615, 469, 559,
	536, 562, 477, 539, 538, 0, 0, 573, 1059, 574,
	575, 394, 395, 396, 397, 354, 600, 1054, 496, 420,
	0, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	565, 566, 563, 668, 0, 623, 624, 0, 0, 490,
	491, 349, 356, 509, 358, 318, 409, 351, 475, 366,
	0, 502, 567, 503, 626, 629, 627, 628, 1066, 1052,
	1062, 1053, 367, 377, 423, 474, 407, 428, 316, 465,
	437, 1063, 553, 580, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	608, 607, 606, 605, 604, 603, 602, 601, 0, 0,
	550, 451, 328, 289, 324, 325, 332, 656, 653, 456,
	657, 0, 297, 530, 375, 0, 419, 348, 595, 596,
	0, 647, 245, 246, 247, 248, 249, 250, 251, 252,
	290, 253, 254, 255, 256, 257, 258, 259, 262, 263,
	264, 265, 266, 267, 268, 269, 598, 260, 261, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
	281, 282, 283, 0, 0, 0, 291, 292, 293, 294,
	0, 0, 285, 286, 287, 288, 0, 0, 0, 481,
	482, 483, 505, 0, 467, 529, 654, 0, 0, 0,
	0, 0, 0, 0, 579, 591, 625, 0, 635, 636,
	638, 640, 639, 642, 441, 442, 649, 0, 644, 645,
	646, 643, 1050, 429, 447, 436, 209, 661, 520, 521,
	662, 631, 0, 0, 0, 0, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 141, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2085,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 172,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 1064, 1065, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1068, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 1038, 471,
	308, 1037, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 1066, 2106, 1062, 2107, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 1063, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 3010, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 3013, 0, 0, 0, 3012, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 1567, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 1565, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1563,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 1561, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 1565, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1563,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	4124, 0, 231, 858, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 1565, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1563,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 1565, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1776,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 2546,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 2548, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 2155,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 2156, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 3232, 3234, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 2569, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 1565, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 675, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 674, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 858, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4101,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 3856, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 3992, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1790,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3871, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 3779, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 3265, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3284, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2085,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 3491, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 1565, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 2548, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 2926, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 2666, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2628, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 2626, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	2395, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 1936, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 2067, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 1565, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	1972, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 1594, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 675, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 685,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 986, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 3210, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 1922, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 1544, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 1542, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 1421, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	421, 417, 298, 446, 338, 389, 311, 313, 753, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	622, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 406, 0, 0, 535,
	568, 557, 641, 523, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 341, 0, 0, 374, 572, 554,
	564, 555, 540, 541, 542, 549, 353, 543, 544, 545,
	515, 546, 516, 547, 548, 0, 571, 522, 438, 390,
	589, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 231, 0, 0, 0, 0, 0, 0, 314,
	232, 517, 637, 519, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 304, 444, 463, 315,
	433, 476, 320, 659, 455, 310, 405, 430, 0, 0,
	306, 461, 440, 387, 364, 365, 305, 0, 424, 339,
	355, 336, 403, 0, 460, 488, 335, 479, 0, 471,
	308, 0, 470, 402, 457, 462, 388, 381, 0, 307,
	459, 386, 380, 368, 345, 504, 369, 370, 359, 414,
	378, 415, 360, 392, 391, 393, 0, 0, 0, 0,
	0, 499, 500, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 630, 0, 0,
	634, 0, 473, 0, 0, 0, 0, 0, 0, 443,
	0, 0, 371, 0, 0, 0, 489, 0, 427, 408,
	664, 0, 0, 425, 376, 458, 416, 464, 445, 472,
	710, 417, 298, 446, 338, 389, 311, 313, 333, 340,
	342, 346, 347, 398, 399, 411, 432, 448, 449, 450,
	337, 321, 426, 322, 357, 323, 299, 329, 327, 330,
	434, 331, 301, 412, 454, 0, 352, 422, 384, 302,
	383, 413, 453, 452, 312, 480, 486, 487, 576, 0,
	492, 665, 666, 667, 501, 0, 418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 506, 507,
	508, 510, 511, 512, 513, 577, 594, 561, 531, 494,
	585, 528, 532, 533, 362, 597, 0, 0, 0, 485,
	372, 373, 0, 344, 343, 385, 303, 350, 295, 296,
	660, 334, 404, 599, 632, 633, 524, 0, 586, 525,
	534, 326, 558, 570, 569, 400, 484, 0, 581, 584,
	514, 658, 0, 578, 593, 663, 592, 655, 410, 0,
	431, 590, 537, 0, 582, 556, 0, 583, 552, 587,
	0, 526, 0, 439, 466, 478, 495, 498, 527, 612,
	613, 614, 300, 497, 616, 617, 618, 619, 620, 621,
	711, 615, 469, 559, 536, 562, 477, 539, 538, 0,
	0, 573, 493, 574, 575, 394, 395, 396, 397, 354,
	600, 319, 496, 420, 0, 560, 0, 0, 0, 0,
	0, 0, 0, 0, 565, 566, 563, 668, 0, 623,
	624, 0, 0, 490, 491, 349, 356, 509, 358, 318,
	409, 351, 475, 366, 0, 502, 567, 503, 626, 629,
	627, 628, 401, 361, 363, 435, 367, 377, 423, 474,
	407, 428, 316, 465, 437, 382, 553, 580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 284,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 607, 606, 605, 604, 603,
	602, 601, 0, 0, 550, 451, 328, 289, 324, 325,
	332, 656, 653, 456, 657, 0, 297, 530, 375, 0,
	419, 348, 595, 596, 0, 647, 245, 246, 247, 248,
	249, 250, 251, 252, 290, 253, 254, 255, 256, 257,
	258, 259, 262, 263, 264, 265, 266, 267, 268, 269,
	598, 260, 261, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 283, 0, 0, 0,
	291, 292, 293, 294, 0, 0, 285, 286, 287, 288,
	0, 0, 0, 481, 482, 483, 505, 0, 467, 529,
	654, 0, 0, 0, 0, 0, 0, 0, 579, 591,
	625, 0, 635, 636, 638, 640, 639, 642, 441, 442,
	649, 0, 644, 645, 646, 643, 379, 429, 447, 436,
	0, 661, 520, 521, 662, 631, 732, 731, 738, 728,
	0, 0, 0, 0, 0, 0, 0, 2054, 0, 735,
	736, 0, 737, 741, 209, 0, 722, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3700, 0, 0,
	0, 0, 0, 2056, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 750, 0, 0, 752, 732, 731, 738, 728,
	751, 0, 2054, 0, 0, 0, 0, 205, 0, 735,
	736, 0, 737, 741, 0, 0, 722, 2031, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2056, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2054, 0,
	0, 0, 3877, 0, 0, 2047, 0, 0, 0, 0,
	0, 0, 2031, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2056, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 725, 724, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 0, 0, 0, 0, 0, 0, 0,
	2047, 0, 0, 734, 0, 0, 0, 0, 2031, 2035,
	749, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	2041, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2029, 2063, 0, 0, 2030, 2032, 2034, 0, 2036, 2037,
	2038, 2042, 2043, 2044, 2046, 2049, 2050, 2051, 0, 0,
	723, 725, 724, 0, 0, 2039, 2048, 2040, 0, 0,
	0, 730, 3848, 0, 0, 0, 2047, 0, 0, 0,
	0, 0, 0, 734, 2035, 0, 0, 0, 0, 0,
	749, 0, 0, 0, 0, 2041, 0, 727, 2054, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2055, 0, 0, 2029, 2063, 0, 0, 2030,
	2032, 2034, 0, 2036, 2037, 2038, 2042, 2043, 2044, 2046,
	2049, 2050, 2051, 0, 2056, 0, 0, 0, 0, 0,
	2039, 2048, 2040, 0, 0, 729, 733, 739, 0, 740,
	742, 0, 0, 743, 744, 745, 0, 0, 747, 748,
	2035, 0, 2052, 0, 0, 0, 0, 0, 0, 0,
	0, 2041, 0, 0, 0, 0, 0, 0, 0, 2028,
	0, 0, 0, 0, 0, 0, 2027, 2055, 2031, 0,
	0, 2029, 2063, 0, 0, 2030, 2032, 2034, 0, 2036,
	2037, 2038, 2042, 2043, 2044, 2046, 2049, 2050, 2051, 0,
	2045, 0, 0, 0, 0, 0, 2039, 2048, 2040, 2033,
	0, 0, 0, 0, 0, 729, 733, 739, 0, 740,
	742, 0, 0, 743, 744, 745, 0, 2052, 747, 748,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2028, 0, 2047, 0, 0, 0,
	0, 2027, 0, 2055, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2045, 0, 0, 0, 0,
	0, 0, 0, 0, 2033, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2052, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 172, 0, 0,
	2028, 0, 0, 0, 0, 0, 0, 2027, 0, 0,
	2035, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2045, 0, 0, 0, 0, 0, 0, 0, 0,
	2033, 2029, 2063, 0, 0, 2030, 2032, 2034, 0, 2036,
	2037, 2038, 2042, 2043, 2044, 2046, 2049, 2050, 2051, 0,
	0, 0, 0, 0, 726, 0, 2039, 2048, 2040, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2055, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2052, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2028, 0, 0, 0, 0, 0, 0, 2027, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2045, 0, 0, 0, 0, 0, 0, 0, 0,
	2033,
}

var yyPact = [...]int{
	4116, -1000, -1000, -1000, -335, 15331, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 49813, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 463, 49813, -333, 30963, 47863, -1000, -1000, 3116,
	-1000, 48513, 17301, 49813, 599, 593, 49813, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1037, -1000, 54363, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 917, 4915, 53713,
	11404, -219, -1000, 1839, -32, 2768, 564, -202, -203, 568,
	881, 1212, 1227, 1296, 1106, 49813, 1192, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	235, 1052, 49163, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 242, 264, 1036,
	1052, 22509, 160, 158, 1839, 490, -37, 252, -1000, 1829,
	4167, 211, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11404, 11404, 15331, -376, 15331, 11404, 49813,
	49813, -1000, -1000, -1000, -1000, -333, 48513, 917, 4915, 11404,
	2768, 564, -202, -203, 881, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -37,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 158, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5036, -1000, 1787, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2521,
	3336, 1782, 2762, 873, 47863, 49813, -1000, 156, 873, -1000,
	-1000, -1000, 1839, 3758, -1000, 49813, 49813, 222, 2034, -1000,
	529, 471, 418, 403, 384, 1772, -1000, -1000, -1000, -1000,
	-1000, -1000, 818, 3725, -1000, 49813, 49813, 3357, 49813, -1000,
	2518, 842, -1000, 55023, 3562, 1714, 1023, 3375, -1000, -1000,
	3334, -1000, 389, 501, 336, 739, 459, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 382, -1000, 3638, -1000, -1000, 374,
	-1000, -1000, 368, -1000, -1000, -1000, 157, -1000, -1000, -1000,
	-1000, -1000, -1000, 38, -1000, -1000, 1254, 2189, 11404, 2150,
	-1000, 2962, 1798, -1000, -1000, -1000, 6827, 14016, 14016, 14016,
	14016, 49813, -1000, -1000, 3174, 11404, 3333, 3332, 3330, 3327,
	-1000, -1000, -1000, -1000, -1000, -1000, 3326, 1766, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2194, -1000, -1000,
	-1000, 14669, -1000, 3324, 3309, 3308, 3305, 3304, 3303, 3302,
	3301, 3295, 3293, 3292, 3291, 3290, 3289, 2997, 16641, 3277,
	2761, 2760, 3276, 3271, 3268, 2755, 3266, 3264, 3261, 2997,
	2997, 3259, 3254, 3249, 3247, 3245, 3243, 3242, 3240, 3239,
	3238, 3236, 3235, 3232, 3231, 3229, 3228, 3227, 3225, 3223,
	3220, 3217, 3213, 3212, 3211, 3210, 3209, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1631, -1000, 3208, 3733, 3072, -1000, 3610, 3606, 3604,
	3602, -264, 3199, 2422, -1000, -1000, 116, 3724, 49813, -286,
	49813, 448, -51, -64, -77, 1269, 49813, 49813, -1000, -52,
	-1000, -1000, 1273, -1000, 1148, 53063, 1005, -1000, -1000, 49813,
	912, 912, 912, 49813, 289, 1012, 912, 912, 912, 912,
	912, 999, 912, 3666, 1026, 1020, 1019, 1018, 912, 5,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2032, 2031, 3456,
	1122, -1000, -1000, -1000, -1000, 1634, 49813, -1000, 3132, 448,
	-306, 1851, 1851, 3709, 3709, 3665, 3663, 856, 852, 846,
	1851, 694, -1000, 2001, 2001, 2001, 2001, 1851, 554, 854,
	3669, 3669, 136, 2001, 128, 1851, 1851, 128, 1851, 1851,
	-1000, 1970, 323, -272, -1000, -1000, -1000, -1000, 2001, 2001,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3629, 3628, 917,
	917, 49813, 917, 270, 49813, 917, 917, 917, 49813, 925,
	-321, 70, 52413, 51763, 2478, 2518, 841, 839, 1645, 2022,
	-1000, 1943, 49813, 49813, 1943, 1943, 25763, 25113, -1000, 49813,
	-1000, 3733, 3072, 2989, 1615, 2988, 3072, -84, 448, 917,
	917, 917, 917, 917, 348, 917, 917, 917, 917, 917,
	49813, 49813, 47213, 917, 917, 917, 917, 9439, 1829, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15331, 2320, 2225, 207, -11, -312, 283, -1000,
	-1000, 49813, 3538, 339, -1000, -1000, -1000, 3115, -1000, 3121,
	3121, 3121, 3121, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3121, 3121, 3130, 3198, -1000, -1000, 3120,
	3120, 3120, 3115, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3125, 3125,
	3128, 3128, 3125, 49813, -105, -1000, -1000, 11404, 49813, 3554,
	404, 3197, 873, -1000, -1000, 49813, 332, 407, 3733, 3546,
	3669, 3700, -1000, -1000, 1761, 2413, 2753, -1000, 384, -1000,
	492, 384, -1000, 435, 435, 1919, -1000, 1252, -1000, -1000,
	-1000, -1000, -1000, -1000, 49813, 38, 444, -1000, -1000, 2738,
	3196, -1000, 675, 1440, 1499, -1000, 353, 55103, 40063, 2518,
	40063, 49813, -1000, -1000, -1000, -1000, -1000, -1000, 153, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 352, -1000, 11404, 11404, 11404, 11404, 11404,
	-1000, 815, 13363, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14016, 14016, 14016, 14016, 14016, 14016, 14016, 14016, 14016, 14016,
	14016, 14016, 3173, 2037, 14016, 14016, 14016, 14016, 27713, 1615,
	3578, 1636, 324, 1798, 1798, 1798, 1798, 11404, -1000, 2089,
	2189, 11404, 11404, 11404, 11404, 34213, 49813, -1000, -1000, 4918,
	11404, 11404, 4886, 11404, 3598, 11404, 11404, 11404, 2987, 5512,
	49813, 11404, -1000, 2986, 2985, -1000, -1000, 2188, 11404, -1000,
	-1000, 11404, -1000, -1000, 11404, 14016, 11404, -1000, 11404, 11404,
	11404, -1000, -1000, 2745, 3598, 3598, 3598, 2000, 11404, 11404,
	3598, 3598, 3598, 1977, 3598, 3598, 3598, 3598, 3598, 3598,
	3598, 3598, 3598, 3598, 3598, 2983, 2982, 2979, 10751, 3669,
	-219, -1000, 8786, 3546, 3669, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -268, 3192, 49813, 2751, 2743,
	-346, 196, 520, 49813, 1241, -1000, -1000, 49813, 2409, 49813,
	2405, 313, 308, -89, 3548, 87, 1209, 1162, 1178, -1000,
	-1000, 49813, 51113, -1000, 49813, 2094, 49813, 49813, 3594, -1000,
	49813, 49813, 912, 912, 912, -1000, 45263, 40063, 49813, 49813,
	2518, 49813, 49813, 49813, 912, 912, 912, 912, 49813, -1000,
	3507, 40063, 3461, 925, -1000, 49813, 1634, 3593, 49813, -1000,
	-1000, -1000, -1000, 3709, 14016, 14016, -1000, -1000, 11404, -1000,
	351, 46563, 2001, 1851, 1851, -1000, -1000, 49813, -1000, -1000,
	-1000, 2001, 49813, 2001, 2001, 3709, 2001, -1000, -1000, -1000,
	1851, 1851, -1000, -1000, 11404, -1000, -1000, 2001, 2001, -1000,
	-1000, 3709, 49813, 121, 3709, 3709, 123, -1000, -1000, -1000,
	1851, 49813, 49813, 912, 49813, -1000, 49813, 49813, -1000, -1000,
	49813, 49813, 4414, 49813, 45263, 45913, 3626, -1000, 40063, 49813,
	49813, 1633, -1000, 1004, 37463, -1000, 49813, 1545, -1000, 86,
	-1000, 82, 70, 1943, 70, 1943, 995, -1000, 667, 677,
	23813, 597, 40063, 6165, -1000, -1000, 1943, 1943, 6165, 6165,
	1799, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1630, -1000,
	350, 3669, -1000, -1000, -1000, -1000, -1000, 2404, -294, 49813,
	45263, 40063, 2518, 49813, 917, 49813, 49813, 49813, 49813, 49813,
	-1000, 3175, 1745, -1000, 3560, 49813, 49813, 49813, 49813, 1394,
	-1000, -1000, 20551, 1743, -1000, -1000, 2086, -1000, 11404, 15331,
	-247, 11404, 15331, 15331, 11404, 15331, -1000, 11404, 335, -1000,
	-1000, -1000, -1000, 2401, -1000, 2399, -1000, -1000, -1000, -1000,
	-1000, 2742, 2742, -1000, 2398, -1000, -1000, -1000, -1000, 2397,
	-1000, -1000, 2395, -1000, -1000, -1000, -1000, -160, 2977, 1254,
	-1000, 2740, 3374, -221, -1000, 21859, 49813, 49813, 404, -353,
	2026, 2024, 2021, 3652, -1000, -221, -1000, 21205, 49813, 3669,
	-1000, -225, 3546, 11404, 49813, -1000, 3659, -1000, -1000, 384,
	-1000, -1000, -1000, 435, 478, -1000, -1000, -1000, -1000, -1000,
	-1000, 1738, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -39, -40, 1629, -1000, 49813, -1000, -1000,
	353, 40063, 42013, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	287, -1000, -1000, 181, -1000, 993, 301, 1912, -1000, -1000,
	280, 225, 229, 1074, 2189, -1000, 2098, 2098, 2104, -1000,
	774, -1000, -1000, -1000, -1000, 3174, -1000, -1000, -1000, 2048,
	3255, -1000, 1981, 1981, 1820, 1820, 1820, 1820, 1820, 2116,
	2116, -1000, -1000, -1000, 6827, 3173, 14016, 14016, 14016, 14016,
	1006, 1006, 3026, 4070, -1000, -1000, -1000, -1000, 11404, 193,
	2044, -1000, 11404, 2859, 1666, 2723, 1626, 1905, -1000, 3115,
	11404, 1730, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2975, 2960, 2435, 3723, 2934, 11404, -1000, -1000,
	1880, 1878, 1871, -1000, 2616, 10098, -1000, -1000, -1000, 2932,
	1724, 2929, -1000, -1000, -1000, 2922, 1856, 1367, 2919, 2214,
	2917, 2916, 2909, 2907, 1609, 11404, 11404, 11404, 11404, 2906,
	1855, 1852, 11404, 11404, 11404, 11404, 2905, 11404, 11404, 11404,
	11404, 11404, 11404, 11404, 11404, 11404, 11404, 49813, 161, 161,
	161, 1585, 1573, -1000, -1000, 1835, -1000, 2189, -1000, -1000,
	3546, -1000, 3168, 2394, 1571, -1000, -1000, -329, 2673, 49813,
	49813, 194, 49813, 2739, -288, 49813, -1000, -1000, 2733, -1000,
	49813, 49813, 49813, 49813, 49813, 49813, -1000, -1000, 1205, 1140,
	1262, -1000, 49813, -1000, 2732, 3558, 3658, 987, 49813, 3167,
	3166, 49813, 49813, 49813, 328, -1000, -1000, 1523, -1000, 301,
	24, 603, 1407, 3353, 896, -112, 49813, 49813, 49813, 49813,
	3591, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44613,
	-1000, 3163, 1834, -1000, -1000, 1798, 1798, 2189, 49813, 49813,
	49813, 3352, 49813, 49813, 3709, 3709, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2001, 3709, 3709, 1639, 1851, 2001, -1000,
	-1000, 2001, -353, -1000, 2001, -1000, -353, 1700, -353, 49813,
	-1000, -1000, -1000, 3589, 3132, 1547, -1000, -1000, -1000, 3699,
	1612, 904, 904, 1139, 890, 3698, 19251, -1000, 1868, 1260,
	985, 3525, 387, -1000, 1868, -156, 882, 1868, 1868, 1868,
	1868, 1868, 1868, 1868, 801, 796, 1868, 1868, 1868, 1868,
	1868, 1868, 1868, 1868, 1868, 1868, 1868, 1225, 1868, 1868,
	1868, 1868, 1868, -1000, 1868, 3162, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 828, 746, 319, 3624, 427, -1000, 440,
	1523, 684, 3623, 456, 49813, 49813, 3729, 1479, -1000, -1000,
	-1000, -1000, -1000, 28363, 28363, 23163, 28363, -1000, 213, 1943,
	70, 66, -1000, -1000, 1545, 6165, 1545, 6165, 2392, -1000,
	-1000, 978, -1000, -1000, 1407, -1000, 49813, 49813, -1000, -1000,
	3161, 2020, -1000, -1000, 16641, -1000, 6165, 6165, -1000, -1000,
	30313, 49813, -1000, 35, -1000, 52, 3546, -1000, -1000, -1000,
	1360, -1000, -1000, 1541, 1407, 3366, 49813, 1360, 1360, 1360,
	-1000, -1000, 17951, 49813, 49813, -1000, -1000, -1000, -294, 3709,
	9439, -1000, 37463, -1000, -1000, 43963, -1000, 43313, 2039, -1000,
	15331, 2179, 201, -1000, 271, -317, 200, 2110, 199, 2189,
	-1000, -1000, 2901, 2899, 1830, -1000, 1823, 2897, 1821, 1818,
	2386, -1000, 118, -1000, 3542, 1416, -1000, 3159, -1000, 1806,
	3452, -1000, 1539, -1000, 2014, 1804, -1000, -1000, -1000, 11404,
	42663, 11404, 1116, 1416, 1803, 3451, 1539, 3546, 2730, -1000,
	1533, -1000, 2454, 1697, 205, -1000, -1000, -1000, 49813, 2738,
	1792, 42013, 1442, -1000, 972, 1694, 1692, -1000, 40063, 383,
	40063, -1000, 40063, -1000, -1000, 423, -1000, 49813, 3544, -1000,
	-1000, -1000, 2673, 2013, -351, 49813, -1000, -1000, -1000, -1000,
	-1000, 1785, -1000, 1006, 1006, 3026, 3380, -1000, 14016, -1000,
	14016, 3559, -1000, 2038, -1000, 11404, 2133, 4914, 11404, 4914,
	961, 27063, 34213, -95, 3553, 3555, 49813, -1000, -1000, 11404,
	11404, -1000, 3537, -1000, -1000, -1000, -1000, 11404, 11404, 2403,
	-1000, 49813, -1000, -1000, -1000, -1000, 27063, -1000, 14016, -1000,
	-1000, -1000, -1000, 11404, 1413, 1413, 3503, 1784, 161, 161,
	161, 3368, 3356, 3269, 1770, 161, 3257, 3252, 3126, 3117,
	3107, 3074, 3069, 2841, 2810, 2805, 1767, -1000, 3153, -1000,
	-1000, 2241, 12710, 8786, -1000, -1000, 317, 1525, 2353, 2727,
	137, -1000, 2012, -1000, 2726, 49813, 49813, 1240, -1000, 49813,
	3722, -1000, 3721, 3717, -1000, -1000, -1000, 2062, -1000, -1000,
	-1000, 1137, -1000, 2715, -1000, 302, 293, 2271, 355, 1408,
	17951, 3132, 3151, 3132, 167, 1868, 662, 40063, 829, -1000,
	49813, 2323, 2010, 3363, 833, 3536, 49813, 49813, 3150, 510,
	3149, 3141, 3577, 550, 5172, 49813, 1390, -1000, 1691, 4167,
	-1000, 49813, -1000, -1000, 49813, -1000, 2518, -1000, 1851, -1000,
	-1000, 3709, -1000, -1000, 11404, 11404, 3709, 1851, 1851, -1000,
	2001, -1000, 49813, -1000, -353, 550, 5172, 3576, 4618, 733,
	2566, -1000, 49813, -1000, -1000, -1000, 913, -1000, 1143, 912,
	49813, 2139, 1143, 2132, 3140, -1000, -1000, 49813, 49813, 49813,
	49813, -1000, -1000, 49813, -1000, 49813, 49813, 49813, 49813, 49813,
	41363, -1000, 49813, 49813, -1000, 49813, 2129, 49813, 2124, 1345,
	-1000, 1868, 1868, 1095, -1000, -1000, 654, -1000, 41363, 2345,
	2341, 2338, 2337, 2706, 2704, 2703, 1868, 1868, 2336, 2694,
	40713, 2693, 1374, 2329, 2322, 2312, 2351, 2692, 1334, -1000,
	2690, 2342, 2330, 2310, 49813, 3139, 2587, -1000, -1000, 2271,
	167, 1868, 413, 49813, 2006, 1992, 662, 650, 650, 598,
	17, 24463, -1000, -1000, -1000, 49813, 37463, 37463, 37463, 37463,
	37463, 37463, -1000, 3426, 3395, 3133, -1000, 3420, 3392, 3432,
	3407, 3008, 49813, 37463, 3132, -1000, 40713, -1000, -1000, -1000,
	1615, 1734, 3769, 1149, 11404, 6165, -1000, -1000, 74, 77,
	-1000, -1000, -1000, -1000, 40063, 2689, 597, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3657, 49813, 49813, 941, 2895, 1495,
	-1000, -1000, -1000, 5172, 3121, 3121, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3121, 3121, 3130, -1000, -1000,
	3120, 3120, 3120, 3115, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3125, 3125, 3128, 3128, 3125, -1000,
	-1000, -1000, 3707, -1000, 1490, -1000, -1000, 1684, -1000, 2049,
	-336, 15331, 2045, 1983, -1000, 11404, 15331, 11404, -249, 399,
	-251, -1000, -1000, -1000, 2684, -1000, -1000, -1000, 2311, -1000,
	2308, -1000, 195, 203, 2121, -221, 8786, 433, 49813, -221,
	49813, 8786, -1000, 49813, 172, -362, -363, 162, 2683, 408,
	-221, 3657, 118, 11404, 3514, -1000, -1000, 49813, 2306, -1000,
	-1000, -1000, 3716, 40063, 2518, 1838, 39413, -1000, 366, -1000,
	282, 661, 2681, -1000, 1017, 135, 2675, 2673, -1000, -1000,
	-1000, -1000, 14016, 1798, -1000, -1000, -1000, 2189, 11404, 2893,
	-1000, 1204, 1204, 2370, 2892, 2891, -1000, 3121, 3121, -1000,
	3115, 3120, 3115, 1204, 1204, 2890, -1000, 3112, -1000, 3553,
	-1000, 2421, 2786, -1000, 2734, 2647, 11404, -1000, 2882, 3793,
	1648, 1, -188, 161, 161, -1000, -1000, -1000, -1000, 161,
	161, 161, 161, -1000, 161, 161, 161, 161, 161, 161,
	161, 161, 161, 161, 161, 874, -97, -276, -99, -277,
	-1000, 2881, 1485, -1000, -1000, -1000, -1000, -1000, 4886, 1469,
	622, 622, 2673, 2666, -1000, 969, 2644, 1203, 49813, 2643,
	-290, 49813, 49813, -1000, 562, -1000, 2634, -1000, -1000, 49813,
	49813, 49813, 50463, 743, 49813, 49813, 2633, -1000, 2628, 2880,
	1458, -1000, -1000, 49813, -1000, -1000, -1000, 2877, 3571, 18601,
	3569, 2437, -1000, -1000, -1000, 29663, 650, -1000, -1000, -1000,
	754, 583, 2305, 630, -1000, 49813, 596, 3492, 1991, 2625,
	49813, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3536,
	-1000, 1379, -353, 506, 36163, 15991, -1000, 430, 49813, -1000,
	49813, 18601, 18601, 430, 541, 1968, -1000, 873, 1448, 152,
	37463, 49813, -1000, 36813, 2876, -1000, -1000, 1407, 3709, -1000,
	2189, 2189, -353, 3709, 3709, 1851, -1000, -1000, 541, -1000,
	430, -1000, 1843, 19901, 679, 549, 533, -1000, 752, -1000,
	-1000, 870, 3505, 5172, -1000, 49813, -1000, 49813, -1000, 49813,
	49813, 912, 11404, 3505, 49813, 950, -1000, 1265, 524, 505,
	923, 923, 1457, -1000, 3553, -1000, -1000, 1444, -1000, -1000,
	-1000, -1000, 49813, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 27063, 27063, 3615, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2622,
	2615, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	49813, 1732, -1000, 1976, 2613, 2437, 29663, 1975, 1943, 2612,
	2609, 650, -1000, 2608, 2607, -1000, 2323, 1974, 1016, 49813,
	-1000, 1373, 49813, 49813, -1000, 1501, -1000, 1960, 3350, 3362,
	3350, -1000, 3350, -1000, -1000, -1000, -1000, 3400, 2600, -1000,
	3393, -1000, 3390, -1000, -1000, -1000, -1000, 1501, -1000, -1000,
	-1000, -1000, -1000, 1149, -1000, 3655, 1143, 1143, 1143, 2875,
	-1000, -1000, -1000, -1000, 1442, 2873, -1000, -1000, -1000, 3731,
	-1000, -1000, -1000, -1000, -1000, -1000, 17951, 3529, 3702, 3697,
	38763, -1000, -336, 1980, -1000, 2066, 197, 2088, 49813, -1000,
	-1000, -1000, 2854, 2853, -227, 209, 3696, 3695, 1158, -1000,
	2849, 1434, -221, -1000, -1000, 1416, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -370, -221, -1000, 1416, -1000, 195, -1000,
	-1000, 3520, -1000, -1000, 2518, -1000, 269, -1000, -1000, -1000,
	-1000, -1000, -1000, 248, -1000, 49813, -1000, 1431, 131, -1000,
	2189, -1000, -1000, -1000, -1000, -1000, 4914, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2598, -1000, -1000,
	11404, -1000, -1000, -1000, 2636, -1000, -1000, 11404, 2845, 2597,
	2844, 2593, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3733,
	-1000, 3693, 1728, 2843, 2842, 1727, 2830, 2822, -1000, 11404,
	2820, 4886, 1108, 2591, 1108, -1000, -1000, 452, 29013, 49813,
	3715, -1000, 49813, 947, -353, 742, 2590, -1000, -1000, 49813,
	2271, 729, 2271, 761, 49813, -294, -1000, -101, 1408, 5172,
	1025, 430, 2818, 1425, -1000, -1000, -1000, -1000, 430, -1000,
	2588, 274, -1000, -1000, -1000, -1000, 2302, -1000, -1000, 2296,
	1649, 290, -1000, -1000, -1000, -1000, -1000, -1000, 2427, 49813,
	38113, 2429, 1949, -354, -1000, 3111, -1000, 1868, 1868, 1868,
	947, 49813, 1722, -1000, 1868, 1868, 2817, -1000, -1000, 947,
	2812, 2809, -114, 889, 1979, 1972, -1000, 2301, 28363, 37463,
	36813, 1398, -1000, 1653, -1000, -1000, -1000, -1000, -1000, -1000,
	3709, 889, -1000, 674, 2299, 14016, 3110, 14016, 3109, 688,
	3106, 1716, -1000, 49813, -1000, -1000, 49813, 4158, 3101, -1000,
	3095, 3345, 620, 3094, 3077, 49813, 2629, -1000, 3505, 49813,
	859, 3522, -1000, -1000, -1000, 476, -1000, -1000, -1000, 717,
	-1000, 49813, -1000, 49813, -1000, 1796, -1000, 27063, -1000, -1000,
	1715, -1000, 2587, 2580, -1000, -1000, 274, 2578, 6165, -1000,
	-1000, -1000, -1000, -1000, 3492, 2577, 2427, 49813, -1000, 49813,
	1373, 1373, 3733, 49813, 8786, -1000, -1000, 11404, 3076, -1000,
	11404, -1000, -1000, -1000, 2806, -1000, -1000, -1000, -1000, -1000,
	3073, 3496, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1921,
	-1000, 11404, 12057, -1000, 910, 15331, -256, 397, -1000, -1000,
	-1000, -229, 2571, -1000, -1000, 3692, 2570, 2456, 49813, -1000,
	-1000, 1416, -1000, 1416, -227, -1000, -1000, 1407, -1000, -1000,
	1268, 804, -1000, 2804, 297, -1000, 2624, -1000, 2560, 161,
	-1000, 161, -1000, 292, 11404, -1000, 2568, -1000, -1000, -1000,
	2565, -1000, -1000, 2551, -1000, 2803, -1000, 2564, -1000, -1000,
	49813, -1000, -1000, 1199, 2563, -1000, 450, 947, -1000, -1000,
	-1000, -355, -1000, 2561, 2271, 2557, 2271, 49813, 706, -1000,
	2554, 2552, -1000, -1000, 5172, -121, -114, 18601, -121, -1000,
	-1000, 417, 445, -1000, -1000, 2266, 701, -1000, -1000, 2550,
	680, -1000, 1373, -1000, 1945, 2146, 2516, 34213, 27063, 27713,
	2548, -1000, -1000, -1000, 36163, 1921, 1921, 55041, -1000, 352,
	55372, -1000, 3054, 1233, 1937, -1000, 2297, -1000, 2293, -1000,
	3709, 1398, 143, -1000, -1000, 1837, -1000, 1233, 2566, 3689,
	-1000, 3122, 49813, 3002, 49813, 3042, 1940, 14016, -1000, 870,
	3449, -1000, -1000, 4158, -1000, -1000, 2151, 14016, -1000, -1000,
	2547, 27713, 1065, 1926, 1925, 1070, 3039, -1000, 765, 3730,
	-1000, -1000, -1000, 1092, 3036, -1000, 2119, 2117, -1000, 49813,
	-1000, 34213, 34213, 849, 849, 34213, 34213, 3033, 923, -1000,
	-1000, 14016, -1000, -1000, 1868, -1000, -1000, -1000, 1868, 1731,
	-1000, -1000, -1000, -1000, -1000, -1000, 2429, -1000, -1000, 1360,
	-1000, 3669, -1000, -1000, 2189, 49813, 2189, -1000, 35513, -1000,
	3688, 3686, -1000, 2189, 267, 266, 3015, 3010, -1000, -336,
	49813, 49813, -231, 2290, -1000, 2544, 212, -1000, -1000, 1311,
	-229, -237, 123, 27063, 1924, -1000, 2788, 395, -142, -1000,
	-1000, -1000, -1000, 2782, -1000, 970, -1000, -1000, -1000, 1254,
	2780, 2779, -1000, -1000, -1000, -1000, 49813, -1000, 49813, -1000,
	2495, -294, 2543, -294, 2539, 698, 2271, -1000, -1000, -102,
	-1000, -1000, 480, -1000, -1000, -1000, 656, 2480, -1000, -1000,
	438, -1000, -1000, -1000, 2427, 2538, -1000, -1000, 130, -1000,
	1904, 1713, -1000, -1000, -1000, -1000, -1000, -1000, 868, -1000,
	430, 55192, -1000, 1260, -1000, 1268, 868, 32913, 716, 326,
	-1000, 2284, -1000, -1000, 3733, -1000, 713, -1000, 681, -1000,
	1701, -1000, 1698, 34863, 2283, 2736, -1000, 55116, 997, -1000,
	-1000, 3026, -1000, -1000, -1000, -1000, -1000, -1000, 2537, 2535,
	-1000, -1000, -1000, -1000, -1000, 2280, 3009, 46, 3613, 2532,
	-1000, -1000, 3006, 1689, 1624, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1608, 1600, 34213, -1000, -1000,
	3026, 2274, 27063, 1868, -1000, -1000, 1599, 1597, -1000, -1000,
	-1000, -1000, -1000, -316, 3005, 11404, 11404, -1000, -1000, -1000,
	3004, -1000, -1000, 3685, -231, -240, 2531, 188, 228, -1000,
	2524, -1000, -103, 3436, -149, -1000, -1000, 936, -222, 182,
	171, 141, -1000, -1000, -1000, 11404, -1000, -1000, -1000, -1000,
	120, -1000, 1894, -1000, -294, -1000, -294, 2271, 2520, 49813,
	753, -1000, -1000, -1000, -1000, 241, -1000, -1000, -1000, -1000,
	-1000, -1000, 2516, 2509, -1000, 624, 3684, -1000, 55372, -1000,
	1868, -1000, 624, 1579, -1000, 1868, 1868, -1000, 548, -1000,
	1934, -1000, 2268, -1000, 3669, -1000, 525, -1000, 652, -1000,
	-1000, -1000, 1522, -1000, -1000, -1000, 55116, 676, -1000, 860,
	2998, -1000, -1000, 2778, 11404, 2997, 1868, 2641, -87, 34213,
	3342, 3340, 3124, 3071, 1492, -1000, -1000, 27063, -1000, -1000,
	33563, -1000, 2995, 1491, 1484, 49813, 2456, -1000, -1000, 2508,
	-1000, 919, 198, 228, -1000, 3683, 206, 3682, 3681, 1243,
	3430, -1000, -1000, 2099, -1000, 179, 176, 173, -1000, -1000,
	-1000, -1000, -294, 2495, 2494, -1000, -1000, 2493, -294, 607,
	-1000, 359, -1000, -1000, -1000, 345, -1000, 3679, 733, -1000,
	27063, -1000, -1000, 32913, 1921, 1921, -1000, -1000, 2265, -1000,
	-1000, -1000, -1000, 2228, -1000, -1000, -1000, 1481, -1000, 49813,
	1055, 8133, -1000, 2475, -1000, 49813, -1000, 3272, -1000, 314,
	1477, 345, 849, 345, 849, 345, 849, 345, 849, 357,
	-1000, -1000, -1000, 1476, 11404, -1000, -1000, 1455, -1000, -1000,
	-1000, 2992, 2216, 209, 202, 3678, -1000, 2456, 3676, 2456,
	2456, -1000, 159, -136, 936, -1000, -1000, -1000, -1000, -1000,
	-1000, -294, -1000, 2491, -1000, -1000, -1000, -1000, 1868, 1868,
	2483, 2467, 493, -1000, -1000, 1868, 1868, 1868, -1000, 32263,
	679, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 676, 55372,
	-1000, 8133, 1441, -1000, 2189, -1000, 923, -1000, -1000, 3260,
	3258, 3713, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2744, 2621, -1000, 49813, 3601, 26413, 191, -1000,
	-1000, -1000, 2465, -1000, 2456, -1000, -1000, 1858, -144, -1000,
	-1000, -274, 2199, 2198, -1000, -1000, 49813, 2187, 2167, 2157,
	-1000, 49813, 674, -1000, 55372, 1423, -1000, 8133, -1000, -1000,
	3728, -1000, 3714, 1041, 1041, 345, 345, 345, 345, 11404,
	-1000, -1000, -1000, 49813, -1000, 1378, -1000, -1000, -1000, 1613,
	-1000, -1000, -1000, -1000, 2453, -153, -1000, -1000, 2448, -1000,
	-1000, -1000, -1000, -1000, -1000, 1354, 2566, -1000, -1000, -1000,
	-1000, -1000, 2229, 772, -1000, 2556, 1239, -1000, 1848, -1000,
	31613, 49813, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 49813, 7480, -1000, 1242, -1000, -1000, 2189, 49813, -1000,
}

var yyPgo = [...]int{
	0, 180, 3753, 251, 184, 4352, 78, 265, 340, 335,
	258, 257, 4351, 4350, 4348, 3488, 3480, 4347, 4346, 4342,
	4340, 4339, 4336, 4335, 4332, 4329, 4328, 4325, 4323, 4321,
	4316, 4315, 4314, 4309, 4308, 4307, 4306, 4305, 4304, 4303,
	4302, 4301, 4300, 4299, 4298, 4297, 4296, 250, 4295, 4294,
	4293, 4292, 4291, 4289, 4288, 4285, 4284, 4281, 4278, 4277,
	4275, 4274, 4273, 4272, 4269, 4268, 4267, 4266, 4264, 4263,
	4262, 4261, 4260, 4259, 4258, 4257, 4256, 4255, 4252, 4251,
	4250, 4249, 4248, 4246, 4245, 256, 4243, 3479, 4242, 4240,
	4239, 4238, 4237, 4236, 4235, 4234, 4233, 4232, 4231, 275,
	4230, 4228, 4227, 4226, 4225, 4224, 4223, 4209, 4208, 4207,
	4205, 4204, 4203, 284, 4201, 4198, 4197, 4196, 248, 4195,
	225, 4194, 182, 212, 4192, 4191, 4190, 4189, 4188, 4186,
	4184, 4177, 4176, 4175, 4172, 4171, 4170, 4168, 238, 222,
	71, 4167, 49, 4166, 4163, 220, 4160, 155, 4158, 153,
	4157, 4156, 4154, 4153, 4151, 4150, 4149, 4147, 4146, 4145,
	4144, 4143, 4142, 4141, 4140, 4137, 4136, 4135, 4134, 4127,
	4126, 4124, 4123, 4121, 51, 4120, 262, 4119, 76, 4117,
	189, 4116, 69, 4112, 4111, 81, 4110, 4110, 108, 142,
	264, 90, 261, 4109, 200, 4108, 4107, 255, 178, 4106,
	4105, 303, 4104, 166, 236, 165, 100, 134, 4103, 137,
	4101, 267, 48, 39, 243, 150, 4099, 4096, 58, 167,
	132, 4095, 217, 102, 118, 4094, 4093, 138, 4092, 246,
	190, 4091, 115, 4090, 4089, 4088, 22, 4087, 4080, 206,
	199, 4079, 4074, 104, 4073, 4071, 70, 127, 4070, 65,
	168, 174, 125, 4066, 2411, 130, 86, 4065, 148, 109,
	4064, 107, 4063, 4062, 4061, 4058, 191, 4057, 4055, 133,
	59, 4054, 4053, 4052, 68, 4051, 80, 4050, 97, 4049,
	56, 4046, 4045, 4043, 4042, 4041, 4039, 4037, 4035, 4034,
	4033, 4032, 4031, 54, 4028, 4027, 4026, 4025, 7, 14,
	17, 4022, 28, 4017, 177, 4015, 4013, 175, 4011, 201,
	4009, 4008, 98, 95, 4007, 93, 172, 4006, 9, 29,
	63, 4005, 4004, 4002, 141, 4001, 4000, 3996, 273, 3994,
	3993, 3992, 162, 3990, 3989, 3988, 467, 3985, 3984, 3982,
	3981, 3980, 3978, 145, 3977, 1, 219, 41, 3975, 131,
	146, 3974, 40, 32, 3973, 46, 123, 204, 136, 105,
	3972, 3971, 3969, 282, 205, 103, 149, 0, 106, 227,
	159, 3968, 3967, 3965, 274, 3964, 240, 245, 239, 179,
	266, 252, 3963, 3962, 57, 3960, 169, 31, 52, 139,
	210, 21, 253, 3959, 1159, 10, 221, 3958, 209, 3957,
	8, 15, 233, 152, 3956, 3953, 37, 269, 3952, 3950,
	3949, 135, 3946, 3931, 281, 84, 3930, 3929, 3927, 3926,
	3925, 38, 3924, 192, 16, 3921, 114, 3919, 254, 3918,
	188, 143, 187, 186, 164, 229, 232, 92, 82, 3917,
	1957, 157, 113, 25, 3916, 224, 3915, 283, 119, 3914,
	89, 3913, 249, 268, 208, 3912, 193, 11, 44, 36,
	30, 43, 12, 293, 214, 3905, 3903, 23, 50, 3902,
	55, 3900, 19, 3899, 3897, 45, 3895, 60, 5, 3894,
	3893, 18, 20, 3892, 34, 216, 176, 126, 101, 61,
	3891, 3888, 147, 194, 3887, 154, 197, 161, 3885, 75,
	3884, 3882, 3881, 3879, 961, 260, 3878, 3877, 3876, 3875,
	3874, 3872, 3866, 3865, 218, 3864, 112, 42, 3863, 3862,
	3861, 3859, 85, 158, 3857, 3856, 3854, 3853, 33, 144,
	3852, 13, 3851, 26, 24, 35, 3846, 111, 3837, 3,
	198, 3835, 3834, 4, 3832, 3831, 2, 3828, 3827, 129,
	3826, 99, 27, 171, 117, 3825, 3824, 88, 215, 151,
	3823, 3822, 110, 241, 207, 3820, 79, 242, 259, 3819,
	213, 3818, 3817, 3815, 3814, 3813, 1304, 3812, 3811, 235,
	62, 94, 3807, 223, 124, 3796, 3794, 83, 170, 121,
	122, 53, 87, 3793, 120, 211, 3789, 203, 3788, 263,
	3787, 3786, 116, 3785, 3784, 3782, 3781, 195, 3779, 3778,
	196, 234, 3777, 3776, 272, 3775, 3774, 3772, 3771, 3770,
	3760, 3759, 3757, 3756, 3749, 247, 314, 3747,
}

//line mysql_sql.y:13126
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) conflictOptUnion() *tree.ConflictOpt {
	v, _ := st.union.(*tree.ConflictOpt)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) diffAsOptUnion() *tree.DiffAsOpt {
	v, _ := st.union.(*tree.DiffAsOpt)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) toAccountOptUnion() *tree.ToAccountOpt {
	v, _ := st.union.(*tree.ToAccountOpt)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 620, 623, 623, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	128, 128, 358, 358, 359, 359, 130, 354, 354, 353,
	353, 131, 132, 133, 599, 599, 134, 135, 165, 598,
	598, 598, 598, 598, 167, 167, 167, 167, 167, 167,
	167, 475, 129, 129, 129, 129, 129, 171, 171, 171,
	171, 171, 127, 605, 605, 605, 606, 606, 124, 154,
	153, 156, 156, 155, 155, 152, 152, 148, 151, 151,
	150, 150, 149, 144, 146, 146, 145, 147, 147, 125,
	113, 126, 548, 548, 547, 547, 546, 546, 500, 500,
	501, 501, 345, 345, 345, 545, 545, 545, 544, 544,
	543, 543, 542, 542, 540, 540, 541, 539, 538, 538,
	538, 536, 536, 536, 532, 532, 534, 533, 533, 535,
	527, 527, 530, 530, 528, 528, 528, 528, 531, 526,
	526, 526, 525, 525, 112, 112, 112, 442, 442, 111,
	111, 456, 456, 456, 456, 456, 454, 454, 454, 454,
	454, 454, 453, 453, 452, 452, 457, 457, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 100,
	100, 100, 100, 100, 100, 100, 107, 105, 105, 105,
	106, 611, 611, 610, 610, 612, 612, 612, 612, 613,
	613, 103, 103, 103, 104, 451, 451, 451, 101, 102,
	102, 441, 441, 446, 446, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 450, 450,
	450, 448, 448, 447, 447, 449, 449, 91, 91, 91,
	91, 91, 91, 95, 96, 97, 97, 97, 97, 94,
	93, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	92, 92, 92, 92, 92, 92, 86, 86, 86, 86,
	86, 85, 85, 87, 87, 438, 438, 437, 108, 108,
	109, 608, 608, 607, 609, 609, 609, 609, 110, 116,
	116, 116, 116, 116, 116, 116, 116, 115, 115, 115,
	118, 118, 117, 119, 99, 99, 99, 99, 99, 99,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 573, 573, 573, 573,
	574, 574, 372, 373, 624, 375, 371, 371, 371, 569,
	569, 570, 571, 572, 572, 572, 114, 14, 228, 228,
	474, 474, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 13, 84, 89, 89, 90, 308, 308, 309,
	303, 303, 310, 310, 170, 311, 311, 311, 316, 316,
	317, 317, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 288, 288, 288, 283, 283, 283,
	283, 283, 283, 283, 284, 284, 285, 285, 286, 286,
	286, 286, 287, 287, 364, 364, 312, 312, 312, 314,
	314, 313, 307, 305, 305, 305, 305, 305, 305, 305,
	306, 306, 306, 306, 306, 315, 315, 82, 88, 88,
	88, 88, 586, 586, 83, 83, 83, 597, 597, 504,
	504, 386, 386, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 509,
	510, 382, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	79, 80, 81, 54, 57, 58, 169, 172, 172, 172,
	172, 53, 53, 53, 427, 427, 52, 625, 625, 357,
	357, 67, 66, 56, 68, 69, 70, 71, 72, 73,
	51, 65, 65, 65, 65, 65, 65, 65, 65, 76,
	521, 521, 627, 627, 627, 74, 75, 503, 503, 503,
	64, 63, 62, 61, 60, 60, 50, 50, 49, 49,
	55, 160, 59, 161, 161, 379, 379, 379, 381, 381,
	377, 626, 626, 470, 470, 380, 380, 48, 48, 48,
	48, 77, 378, 378, 356, 376, 376, 376, 12, 12,
	10, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 26, 27,
	29, 435, 435, 432, 28, 20, 19, 19, 23, 22,
	18, 18, 21, 24, 25, 25, 9, 9, 9, 9,
	15, 15, 16, 198, 198, 255, 255, 580, 580, 576,
	576, 577, 577, 577, 578, 578, 579, 579, 120, 515,
	515, 515, 515, 515, 515, 8, 8, 223, 223, 514,
	514, 514, 514, 514, 514, 439, 439, 439, 558, 558,
	558, 559, 222, 222, 215, 215, 516, 516, 403, 560,
	560, 524, 524, 523, 523, 522, 522, 220, 220, 221,
	221, 201, 201, 139, 139, 529, 529, 529, 529, 537,
	537, 499, 499, 293, 293, 347, 347, 348, 348, 188,
	188, 189, 189, 189, 189, 189, 189, 614, 614, 615,
	616, 617, 617, 618, 618, 618, 619, 619, 619, 619,
	619, 566, 566, 568, 568, 567, 219, 219, 213, 213,
	214, 214, 214, 212, 212, 211, 210, 210, 209, 207,
	207, 207, 208, 208, 208, 227, 227, 191, 191, 191,
	190, 190, 190, 190, 190, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 192, 195, 195,
	196, 196, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 325, 325, 326, 326, 326, 326, 326, 137,
	137, 508, 508, 324, 324, 193, 193, 194, 194, 194,
	194, 323, 323, 322, 206, 206, 205, 204, 204, 204,
	199, 199, 199, 199, 199, 200, 334, 334, 333, 333,
	332, 332, 332, 332, 335, 123, 136, 136, 138, 226,
	226, 217, 216, 331, 330, 330, 330, 330, 225, 225,
	224, 224, 218, 218, 203, 203, 203, 203, 329, 202,
	327, 604, 604, 603, 603, 602, 600, 600, 600, 601,
	601, 601, 601, 550, 550, 550, 550, 550, 365, 365,
	365, 370, 370, 368, 368, 368, 368, 368, 374, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 39, 238, 239, 40, 240, 240, 241, 241, 242,
	242, 243, 244, 245, 245, 245, 245, 419, 419, 38,
	229, 229, 230, 230, 231, 231, 232, 233, 233, 233,
	237, 234, 235, 235, 622, 622, 621, 37, 37, 30,
	175, 175, 176, 176, 176, 178, 178, 289, 289, 289,
	177, 177, 179, 179, 179, 581, 583, 583, 585, 584,
	584, 584, 587, 587, 587, 587, 587, 588, 588, 588,
	588, 589, 589, 31, 157, 157, 182, 182, 162, 592,
	592, 592, 591, 591, 593, 593, 594, 594, 351, 351,
	352, 352, 173, 174, 174, 164, 159, 181, 181, 181,
	181, 181, 183, 183, 257, 257, 158, 163, 166, 168,
	582, 590, 590, 590, 436, 436, 433, 434, 434, 431,
	430, 430, 430, 596, 596, 595, 595, 595, 366, 366,
	32, 426, 426, 428, 429, 429, 429, 420, 420, 420,
	420, 36, 424, 424, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 421, 421, 423, 423, 418,
	418, 418, 418, 418, 418, 418, 418, 35, 35, 180,
	180, 417, 417, 414, 414, 236, 236, 412, 412, 413,
	413, 411, 411, 411, 415, 415, 43, 78, 44, 45,
	46, 42, 416, 416, 184, 184, 184, 184, 184, 184,
	187, 187, 186, 186, 186, 186, 185, 185, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 141,
	140, 140, 140, 140, 140, 143, 143, 350, 350, 349,
	349, 142, 290, 290, 41, 268, 268, 491, 491, 486,
	486, 486, 486, 486, 506, 506, 506, 487, 487, 487,
	488, 488, 488, 490, 490, 490, 489, 489, 489, 489,
	489, 505, 505, 507, 507, 507, 458, 458, 459, 459,
	459, 462, 462, 478, 478, 479, 479, 477, 477, 484,
	484, 483, 483, 482, 482, 481, 481, 480, 480, 480,
	480, 473, 473, 472, 472, 460, 460, 460, 460, 460,
	461, 461, 461, 471, 471, 476, 476, 321, 321, 320,
	320, 276, 276, 277, 277, 319, 319, 274, 274, 275,
	275, 275, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 556, 556, 557,
	279, 279, 291, 291, 291, 291, 291, 291, 278, 278,
	280, 280, 256, 256, 254, 254, 246, 246, 246, 246,
	246, 246, 247, 247, 248, 248, 249, 249, 249, 253,
	253, 252, 252, 252, 252, 250, 250, 251, 251, 251,
	251, 251, 251, 444, 444, 553, 553, 554, 554, 549,
	549, 549, 552, 552, 552, 552, 552, 552, 552, 552,
	555, 555, 555, 551, 551, 258, 344, 344, 344, 367,
	367, 367, 367, 369, 343, 343, 343, 273, 273, 272,
	272, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 443, 443, 383, 383, 384, 384, 302,
	301, 301, 301, 301, 301, 299, 300, 298, 298, 298,
	298, 298, 295, 295, 294, 294, 294, 296, 296, 296,
	296, 296, 422, 422, 292, 292, 282, 282, 282, 281,
	281, 281, 485, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 297, 341, 341, 341, 342, 342, 342,
	342, 342, 342, 342, 342, 393, 393, 399, 399, 565,
	565, 564, 259, 259, 259, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 269, 269, 269, 467, 467, 467,
	467, 468, 468, 468, 468, 469, 469, 469, 465, 465,
	466, 466, 404, 405, 405, 512, 512, 513, 513, 463,
	463, 464, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 520, 520, 520, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 575, 575, 575, 561, 561, 561,
	562, 562, 562, 562, 562, 562, 562, 562, 562, 562,
	562, 562, 563, 563, 563, 563, 563, 563, 563, 563,
	563, 563, 563, 563, 563, 563, 563, 563, 563, 339,
	339, 339, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	406, 406, 407, 407, 517, 517, 517, 517, 517, 517,
	518, 518, 519, 519, 519, 519, 511, 511, 511, 511,
	511, 511, 511, 511, 511, 511, 511, 511, 511, 511,
	511, 511, 511, 511, 511, 511, 511, 511, 511, 511,
	511, 511, 511, 511, 511, 511, 391, 336, 336, 336,
	408, 400, 400, 401, 401, 402, 402, 394, 394, 394,
	394, 394, 394, 395, 395, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 396, 396, 398,
	398, 410, 410, 410, 409, 409, 409, 409, 409, 409,
	409, 271, 271, 271, 271, 388, 388, 388, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	261, 261, 261, 261, 265, 265, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	266, 266, 266, 266, 266, 264, 264, 264, 264, 264,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 121,
	122, 122, 263, 346, 346, 492, 492, 495, 495, 493,
	493, 494, 496, 496, 496, 497, 497, 497, 498, 498,
	498, 502, 502, 355, 355, 355, 363, 363, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 8, 0, 2, 0, 2, 12, 1, 3, 0,
	3, 3, 3, 4, 1, 2, 4, 5, 6, 1,
	2, 1, 2, 3, 10, 10, 11, 11, 12, 8,
	13, 1, 5, 6, 8, 10, 9, 5, 7, 9,
	8, 6, 4, 0, 1, 1, 0, 1, 5, 2,
	2, 6, 9, 6, 9, 4, 7, 8, 0, 1,
	1, 2, 4, 6, 1, 2, 4, 0, 2, 10,
	11, 2, 0, 2, 1, 3, 3, 3, 0, 2,
	0, 2, 1, 3, 5, 0, 2, 3, 1, 3,
	1, 1, 1, 3, 1, 1, 1, 1, 0, 3,
	3, 0, 3, 3, 0, 1, 3, 0, 1, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 8, 5, 7, 0, 3, 8,
	5, 1, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 4, 1, 3, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 3, 4, 4,
	5, 1, 3, 3, 1, 2, 2, 2, 1, 2,
	2, 3, 4, 4, 6, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 4,
	3, 3, 2, 4, 4, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 2, 3, 3, 4, 5, 4, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 4,
	2, 4, 3, 3, 1, 1, 1, 1, 1, 1,
	2, 3, 4, 7, 2, 3, 3, 4, 3, 4,
	4, 5, 3, 4, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 1, 1, 1, 1, 6, 4, 1, 1,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 10, 7, 4, 4, 3, 1, 3, 3,
	1, 3, 1, 6, 7, 3, 3, 3, 1, 1,
	1, 3, 2, 4, 5, 5, 6, 5, 5, 3,
	2, 2, 1, 3, 4, 3, 7, 5, 8, 2,
	2, 1, 3, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 2, 1,
	3, 2, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 6, 3, 3, 3, 1, 1, 7, 7, 7,
	8, 8, 0, 4, 7, 6, 6, 0, 3, 0,
	2, 0, 1, 1, 1, 1, 4, 2, 2, 3,
	3, 4, 5, 3, 4, 4, 2, 2, 2, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 4, 3, 3, 3, 4, 5, 6,
	5, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 7, 7, 5, 4, 7, 8,
	3, 3, 2, 3, 4, 0, 2, 2, 0, 2,
	2, 1, 1, 1, 1, 0, 1, 5, 5, 6,
	4, 3, 1, 3, 1, 1, 3, 5, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	4, 1, 3, 1, 4, 6, 6, 4, 4, 4,
	4, 4, 3, 6, 3, 5, 1, 1, 2, 2,
	11, 8, 9, 1, 3, 2, 4, 0, 2, 0,
	1, 1, 1, 1, 0, 1, 0, 1, 4, 2,
	1, 5, 4, 4, 2, 5, 5, 1, 3, 2,
	1, 5, 4, 4, 2, 0, 5, 4, 0, 1,
	3, 3, 1, 3, 1, 3, 1, 3, 4, 0,
	1, 0, 1, 1, 3, 1, 1, 0, 4, 1,
	3, 2, 1, 0, 8, 0, 4, 7, 4, 0,
	2, 0, 2, 0, 2, 0, 4, 1, 3, 1,
	1, 6, 4, 5, 7, 4, 5, 0, 1, 3,
	8, 0, 6, 0, 4, 6, 1, 1, 1, 1,
	1, 2, 3, 1, 3, 6, 0, 3, 0, 1,
	2, 4, 4, 0, 1, 3, 1, 3, 3, 0,
	1, 1, 0, 2, 2, 0, 2, 3, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 7, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 4, 7, 6, 6, 3,
	5, 0, 2, 0, 2, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 3, 1, 1, 1, 1,
	4, 4, 4, 3, 4, 3, 2, 2, 2, 2,
	2, 3, 2, 3, 2, 4, 1, 3, 4, 0,
	2, 1, 3, 1, 1, 2, 2, 3, 0, 1,
	2, 4, 1, 3, 1, 3, 2, 3, 1, 4,
	3, 0, 1, 1, 2, 5, 2, 2, 2, 0,
	2, 3, 3, 0, 1, 3, 1, 3, 0, 1,
	2, 1, 1, 0, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 1, 9, 1, 3, 0, 1, 1,
	3, 1, 3, 0, 1, 1, 1, 0, 2, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 0, 1, 1,
	1, 0, 2, 7, 8, 10, 2, 2, 8, 0,
	3, 3, 0, 3, 0, 3, 0, 5, 1, 3,
	0, 3, 3, 0, 2, 9, 8, 0, 2, 2,
	3, 3, 0, 2, 0, 2, 4, 4, 4, 5,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 3, 3, 3, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 2, 2, 6, 8, 0,
	4, 1, 1, 0, 3, 0, 1, 0, 1, 1,
	2, 4, 4, 4, 0, 1, 8, 2, 4, 4,
	4, 9, 0, 2, 8, 9, 5, 5, 5, 6,
	0, 2, 0, 3, 3, 3, 0, 3, 11, 9,
	11, 8, 6, 9, 7, 10, 7, 6, 8, 2,
	2, 9, 4, 5, 3, 0, 4, 1, 3, 0,
	3, 6, 0, 2, 10, 0, 2, 0, 2, 0,
	3, 2, 4, 3, 0, 2, 1, 0, 2, 3,
	0, 2, 3, 0, 2, 1, 0, 3, 2, 4,
	3, 0, 1, 0, 1, 1, 0, 6, 0, 3,
	5, 0, 4, 0, 3, 1, 3, 4, 5, 0,
	3, 1, 3, 2, 3, 1, 2, 0, 4, 6,
	5, 0, 2, 0, 2, 4, 5, 4, 5, 1,
	5, 6, 5, 0, 3, 0, 1, 1, 3, 3,
	3, 0, 4, 1, 3, 3, 3, 0, 1, 1,
	3, 2, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 5, 4, 1, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 0, 5, 5, 5,
	5, 6, 0, 1, 1, 3, 1, 1, 1, 1,
	1, 7, 9, 7, 9, 2, 1, 7, 9, 7,
	9, 8, 5, 0, 1, 0, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 3,
	3, 2, 2, 1, 5, 6, 4, 1, 1, 1,
	5, 4, 1, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 4, 7,
	3, 3, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 4, 1, 1, 2, 5,
	6, 8, 6, 6, 6, 1, 1, 1, 1, 1,
	1, 3, 9, 1, 4, 4, 4, 7, 9, 7,
	7, 7, 9, 7, 7, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 5,
	0, 1, 3, 0, 1, 0, 2, 0, 2, 0,
	1, 6, 8, 8, 6, 6, 5, 5, 5, 6,
	6, 6, 6, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 4, 4, 4, 3, 4,
	6, 6, 7, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 8, 4, 2, 3, 2, 4, 2, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 4, 4, 4,
	0, 1, 2, 3, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	3, 0, 1, 1, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 1, 1, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 1, 3, 4, 4, 5,
	4, 5, 3, 4, 5, 6, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 2,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 4, 1, 2,
	3, 5, 1, 1, 3, 0, 1, 0, 3, 0,
	3, 3, 0, 3, 5, 0, 3, 5, 0, 1,
	1, 0, 1, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -620, -623, -2, -5, 648, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -188, -127, -128,
	-129, -171, -132, -134, -135, -184, 638, -92, -93, -94,
	-95, -96, -97, -33, -32, -31, -30, -157, -162, -165,
	-167, -130, 571, 644, 474, 14, 523, -15, -16, -566,
	-17, 267, -371, -372, -373, -375, -624, -48, -49, -50,
	-60, -61, -62, -63, -64, -74, -75, -76, -51, -52,
	-53, -56, -54, -67, -66, -68, -69, -70, -71, -72,
	-73, -55, -59, -160, -161, -77, -57, -78, -58, -169,
	-172, -131, -79, -80, -81, -83, -82, -88, -84, -89,
	-159, -164, -13, -170, -90, 241, -87, 77, -101, -102,
	-103, -104, -105, -106, -107, -109, -110, 398, 404, 461,
	637, 62, -189, -191, 667, 668, 671, 558, 561, 335,
	170, 163, 164, 166, 167, 171, 174, -34, -35, -36,
	-37, -38, -39, -41, -40, -42, -43, -44, -45, -46,
	237, 16, 566, -18, -21, -19, -22, -20, -28, -29,
	-27, -24, -26, -158, -25, -163, -23, -166, -168, -133,
	262, 261, 39, 328, 329, 330, 402, 260, 238, 240,
	15, 32, 43, 377, -190, 86, 559, 239, -192, 13,
	673, -6, -3, -2, -144, -148, -152, -155, -156, -153,
	-154, -4, -122, 121, 252, 639, -367, 394, 640, 642,
	641, 89, 97, -360, -362, 474, 267, 398, 404, 637,
	668, 671, 558, 561, 170, 573, 574, 575, 576, 577,
	578, 579, 580, 582, 583, 584, 585, 586, 587, 588,
	598, 599, 589, 590, 591, 592, 593, 594, 595, 596,
	600, 601, 602, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 613, 526, 623, 624, 625, 626, 554,
	581, 617, 618, 619, 620, 375, 376, 563, 279, 303,
	429, 309, 316, 373, 163, 183, 177, 206, 197, 559,
	172, 283, 321, 284, 96, 166, 509, 111, 486, 458,
	169, 298, 300, 302, 555, 556, 388, 305, 553, 304,
	306, 308, 557, 285, 378, 193, 188, 297, 281, 186,
	286, 41, 287, 371, 370, 211, 288, 289, 568, 482,
	374, 488, 313, 53, 456, 187, 483, 301, 485, 215,
	219, 500, 361, 501, 181, 182, 490, 503, 210, 213,
	214, 259, 367, 368, 44, 565, 271, 504, 217, 663,
	209, 204, 512, 317, 315, 372, 208, 180, 203, 282,
	66, 221, 220, 222, 452, 453, 454, 455, 290, 291,
	392, 499, 200, 189, 379, 173, 23, 507, 266, 487,
	405, 292, 310, 318, 216, 218, 273, 278, 333, 567,
	460, 277, 314, 505, 185, 270, 299, 265, 508, 664,
	174, 407, 293, 167, 307, 502, 666, 511, 65, 420,
	179, 655, 656, 256, 164, 275, 280, 665, 294, 295,
	296, 552, 320, 319, 311, 171, 560, 201, 272, 207,
	191, 178, 202, 165, 274, 510, 421, 635, 377, 439,
	199, 196, 276, 249, 506, 489, 168, 443, 422, 194,
	322, 630, 631, 632, 393, 366, 323, 324, 192, 263,
	480, 481, 327, 449, 356, 423, 459, 430, 424, 228,
	229, 331, 492, 494, 212, 633, 345, 346, 347, 484,
	348, 349, 350, 351, 397, 57, 59, 98, 101, 100,
	669, 670, 64, 30, 383, 386, 418, 425, 358, 636,
	564, 355, 359, 360, 387, 26, 441, 409, 445, 444,
	49, 50, 51, 54, 55, 56, 58, 60, 61, 52,
	551, 402, 415, 513, 46, 48, 412, 28, 389, 440,
	462, 354, 442, 473, 47, 471, 472, 493, 27, 391,
	390, 63, 45, 448, 450, 451, 325, 352, 400, 645,
	514, 395, 411, 414, 396, 357, 385, 416, 68, 67,
	408, 646, 403, 401, 353, 569, 570, 362, 597, 380,
	457, 548, 547, 546, 545, 544, 543, 542, 541, 328,
	329, 330, 426, 427, 428, 438, 431, 432, 433, 434,
	435, 436, 437, 476, 477, 647, 495, 497, 498, 496,
	244, 672, 381, 382, 247, 649, 650, 99, 651, 653,
	652, 29, 654, 662, 659, 660, 661, 572, 232, 657,
	-449, -447, -367, 559, 637, 404, 558, 561, 398, 170,
	377, 668, 671, 402, 267, 328, 329, 330, 474, 375,
	-240, -367, 672, -201, 251, 40, -254, -367, -201, -87,
	-16, -15, -190, -191, -254, 246, -376, 24, 456, -99,
	457, 241, 242, 86, 78, -367, -9, -113, -8, -120,
	-85, -188, 461, -374, -367, 328, 328, -374, 246, -369,
	277, 437, -367, -504, 252, -453, -426, 278, -452, -428,
	-455, -429, 33, 237, 239, 238, 571, 274, 16, 402,
	248, 14, 13, 403, 260, 26, 27, 29, 15, 404,
	406, 30, 407, 410, 411, 412, 43, 415, 416, 267,
	89, 97, 92, 285, -239, -367, -402, -394, 118, -397,
	-389, -390, -392, -345, -540, -387, 86, 145, 146, 153,
	119, 674, -391, -485, 37, 121, 577, 581, 617, 524,
	-337, -338, -339, -340, -341, -342, 562, -367, -541, -539,
	92, 102, 104, 108, 109, 107, 105, 157, 190, 106,
	93, 158, -191, 89, -561, 587, -361, 610, 623, 624,
	625, 626, 609, 62, -511, -519, 245, -517, 156, 195,
	263, 191, 14, 151, 449, 192, 618, 619, 620, 584,
	606, 526, 588, 598, 613, 579, 580, 582, 574, 575,
	576, 578, 589, 591, 605, -520, 601, 611, 612, 597,
	621, 622, 659, 614, 615, 616, 653, 91, 90, 604,
	603, 590, 585, 586, 592, 573, 583, 593, 594, 602,
	607, 608, 386, 111, 387, 388, 516, 378, 81, 389,
	252, 456, 71, 390, 391, 392, 393, 394, 523, 395,
	72, 396, 385, 267, 439, 397, 194, 212, 528, 527,
	529, 520, 517, 515, 518, 519, 521, 522, 595, 596,
	600, -136, -138, 628, -614, -328, -615, 6, 7, 8,
	9, -616, 158, -605, 458, 567, 92, 321, 375, 17,
	516, 658, 557, 658, 557, 336, 340, 55, 168, 165,
	-440, 168, 117, 174, 173, 250, 168, -440, -367, 171,
	658, 170, 655, 331, -416, -175, 375, 439, 348, 98,
	277, -420, -417, 555, -505, 325, 321, 297, 247, 114,
	-176, 257, 256, 112, 516, 245, 413, 316, 57, 59,
	-576, -577, 234, 235, 236, -568, 549, -567, -367, 658,
	663, 388, 100, 101, 655, 656, 28, 246, 399, 273,
	494, 492, 493, 495, 496, 497, 498, -65, -521, -503,
	489, 488, -380, 481, 487, 479, 491, 482, 376, 350,
	571, 349, 237, 649, 556, 550, -355, 423, 459, 513,
	514, 400, 460, 500, 502, 483, 111, 198, 195, 247,
	249, 246, 655, 375, 516, 439, 98, 348, 246, -576,
	663, 165, 500, 502, 458, 277, 437, 42, -446, 449,
	-445, -447, 501, 512, 90, 91, 499, -355, 111, 480,
	480, -614, -328, -189, -191, -123, -566, 557, 658, 247,
	375, 439, 277, 248, 246, 552, 555, 249, 516, 245,
	328, 399, 273, 348, 98, 170, 655, -195, -196, -197,
	230, 231, 232, 70, 235, 233, 67, 33, 34, 35,
	-1, 125, 673, -394, -394, -6, 676, -6, -394, -367,
	-367, 160, -261, -265, -262, -264, -263, -267, -266, 195,
	196, 156, 199, 205, 201, 202, 203, 204, 206, 207,
	208, 209, 210, 213, 214, 211, 32, 212, 263, 191,
	192, 193, 194, 215, 177, 197, 564, 223, 178, 224,
	179, 225, 180, 226, 181, 182, 227, 183, 186, 187,
	188, 189, 185, 159, -228, 92, 33, 86, 159, 92,
	-220, 269, -201, -254, -246, 159, 674, -220, -614, -211,
	-212, 11, -254, -343, -367, 458, 128, -99, 78, -99,
	457, 78, -99, 457, 241, -569, -570, -571, -573, 241,
	457, 456, 242, -118, 159, 285, 17, -374, -374, 84,
	-254, -428, 277, -453, -426, 37, 83, 160, 250, 160,
	83, 86, 400, 375, 439, 401, 516, 246, 413, 249,
	277, 414, 375, 439, 246, 249, 516, 277, 375, 246,
	249, 439, 277, 414, 375, 479, 480, 249, 28, 405,
	408, 409, 480, -525, 512, 160, 117, 114, 115, 116,
	-394, 135, -409, 128, 129, 130, 131, 132, 133, 134,
	142, 141, 152, 145, 146, 147, 148, 149, 150, 151,
	143, 144, 138, 118, 136, 140, 137, 120, 155, -191,
	-394, -402, 62, -392, -392, -392, -392, -367, -485, -399,
	-394, 86, 86, 86, 86, 86, 159, 105, 92, -394,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, -518, 86, 86, -406, -407, 86, 86, -387,
	-343, 86, 92, 92, 86, 86, 86, 92, 86, 86,
	86, -407, -407, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, -212,
	160, -211, 86, -211, -212, -192, -191, 33, 34, 33,
	34, 33, 34, 33, 34, -617, 646, 86, 102, 669,
	228, 17, -367, 655, -367, -599, 33, 560, 560, 560,
	560, 237, 16, -254, -254, 505, 566, 172, 173, 174,
	-367, 171, 250, -367, -414, 252, -414, -414, -238, -367,
	273, 399, 249, 552, 249, -176, -414, -414, -414, -414,
	-414, 248, -414, 24, 246, 246, 246, 246, -414, 523,
	128, 128, 60, -578, 176, 160, -568, -219, 86, -599,
	664, 665, 666, -379, 136, 140, -379, -324, 18, -324,
	24, 24, 275, 275, 275, -379, 315, -625, -626, 17,
	138, -377, -626, -377, -377, -379, -627, 248, 490, 44,
	276, 275, -213, -214, 22, -213, 484, 480, -470, 485,
	486, -381, -626, -380, -379, -379, -380, -379, -379, -379,
	33, 246, 249, 516, 348, 650, -625, -625, 32, 32,
	-504, -504, -254, -504, -504, 550, -356, -367, -504, -504,
	-504, -308, -309, -254, -579, 251, 666, -611, -610, 503,
	-613, 505, 165, -447, 165, -447, 89, -428, 277, 277,
	160, 128, 24, -448, 128, 139, -447, -447, -448, -448,
	-278, 42, -366, 156, -367, 92, -278, 42, -608, -607,
	-254, -212, -192, -191, 87, 87, 87, 560, -599, -504,
	-504, -504, -504, -504, -505, -504, -504, -504, -504, -504,
	-374, -229, -367, -240, 252, -504, -504, -504, -504, -193,
	-194, 147, -394, -367, -197, -3, -146, -145, 122, 123,
	125, 640, 394, 639, 643, 637, -447, 42, -498, 421,
	420, -492, -494, 86, -493, 86, -493, -493, -493, -493,
	-493, 86, 86, -495, 86, -495, -495, -492, -496, 86,
	-496, -497, 86, -497, -496, -367, -474, 566, -400, -402,
	-367, 40, -514, 62, -188, 86, 32, 86, -220, -367,
	192, 170, 654, 36, -515, 62, -188, 86, 32, -212,
	-139, 40, -214, 21, 159, 102, 92, -118, -99, 78,
	-118, -99, -99, 87, 160, -572, 108, 109, -574, 210,
	201, -367, -116, 92, -539, -7, -11, -8, -9, -10,
	-47, -85, -188, 558, 561, -542, -540, 86, 33, 448,
	83, 17, -454, 246, 516, 399, 273, 249, 375, -452,
	-435, -432, -430, -366, -428, -431, -430, -457, -343, 480,
	-140, 463, 462, 327, -394, -394, -394, -394, -394, 107,
	118, 366, 108, 109, -389, -410, 33, 323, 324, -390,
	-390, -390, -390, -390, -390, -390, -390, -390, -390, -390,
	-390, -398, -408, -485, 86, 138, 136, 140, 137, 120,
	-392, -392, -390, -390, -280, -366, 156, 87, 160, -394,
	-565, -564, 122, -394, -394, -394, -394, -421, -423, -343,
	86, -367, -562, -563, 530, 531, 532, 533, 534, 535,
	536, 537, 538, 539, 540, 390, 385, 391, 389, 378,
	397, 392, 393, 194, 547, 548, 541, 542, 543, 544,
	545, 546, -400, -400, -394, -562, -400, -336, 34, 33,
	-402, -402, -402, 87, -394, -575, 364, 363, 365, -215,
	-367, -400, 87, 87, 87, 102, -402, -402, -400, -390,
	-400, -400, -400, -400, -563, -336, -336, -336, -336, 147,
	-402, -402, -336, -336, -336, -336, 147, -336, -336, -336,
	-336, -336, -336, -336, -336, -336, -336, -336, 87, 87,
	87, 147, -402, -213, -138, -523, -522, -394, 42, -139,
	-214, -618, 647, 86, -343, -606, 92, 92, 674, 170,
	655, 17, 516, -367, 17, 246, -367, 102, -367, 102,
	246, 516, 246, 516, 563, 40, 506, 507, 169, 173,
	172, -367, 171, -367, -367, 118, -367, -367, 36, -240,
	-229, -414, -414, -414, -583, -367, 93, -436, -433, -430,
	-367, -367, -426, -367, -356, -254, -414, -414, -414, -414,
	-254, -289, 54, 55, 56, -430, -177, 57, 58, -579,
	-567, 36, -218, -367, -324, -392, -392, -394, 375, 516,
	246, -430, 277, -625, -379, -379, -357, -356, -381, -376,
	-381, -381, -324, -377, -379, -379, -394, -381, -377, -324,
	-367, 480, -324, -324, -470, -379, -378, -367, -378, -414,
	-356, -357, -357, -254, -254, -303, -310, -304, -311, 269,
	243, 383, 384, 240, 238, 11, 239, -318, 316, -415,
	524, -284, -285, 78, 43, -287, 267, 425, 418, 279,
	283, 96, 284, 458, 285, 248, 287, 288, 289, 304,
	306, 259, 290, 291, 292, 449, 293, 164, 305, 294,
	295, 296, 401, -279, 6, 351, 42, 52, 53, 472,
	471, 569, 566, 280, -367, -583, -581, 32, -367, 32,
	-436, -430, -367, -367, 160, 250, -204, -206, -203, -199,
	-200, -205, -327, -329, -202, 86, -254, -191, -367, -447,
	160, 504, 506, 507, -611, -448, -611, -448, 250, 33,
	448, -451, 448, 33, -426, -445, 500, 502, -441, 92,
	449, -431, -450, 83, 156, -522, -448, -448, -450, -450,
	155, 160, -609, 505, 506, 234, -213, 102, -236, 657,
	-256, -254, -583, -435, -426, -367, -504, -256, -256, -256,
	-369, -369, 86, 159, 37, -367, -367, -367, -367, -323,
	160, -322, 17, -368, -367, 36, 92, 159, -147, -145,
	124, -394, -6, 639, -394, -6, -6, -394, -6, -394,
	-502, 422, 102, 102, -346, 92, -346, 102, 102, 102,
	572, 87, 92, -439, 83, -516, -403, -560, 628, -222,
	87, -215, -558, -559, -215, -221, -367, -514, -246, 128,
	128, 128, 25, -516, -222, 87, -558, -213, 629, -139,
	-210, -209, -394, -367, 24, -118, -99, -570, 159, 160,
	-218, -454, -434, -431, -456, 147, -367, -442, 160, 566,
	677, 90, 250, -596, -595, 440, 87, 160, -526, 251,
	523, 92, 674, 456, 228, 229, 107, 366, 108, 109,
	-485, -402, -398, -392, -392, -390, -390, -396, 264, -396,
	117, -394, 675, -393, -564, 124, -394, 36, 160, 36,
	160, 84, 160, 87, -492, -394, 159, 87, 87, 17,
	17, 87, -394, 87, 87, 87, 87, 17, 17, -394,
	87, 159, 87, 87, 87, 87, 84, 87, 160, 87,
	87, 87, 87, 160, -402, -402, -394, -402, 87, 87,
	87, -394, -394, -394, -402, 87, -394, -394, -394, -394,
	-394, -394, -394, -394, -394, -394, -218, -464, 475, -464,
	-464, 160, 160, 160, 87, -139, 86, 102, 160, 670,
	-350, -349, 92, -367, -367, 170, 655, -367, 92, 655,
	-367, 92, -254, -356, -254, -356, -254, -254, 170, 174,
	174, 173, -367, 92, 37, 24, 24, 314, -239, 86,
	86, -254, -254, -254, -585, 426, -597, 160, 42, -595,
	516, -173, 327, -418, 84, -180, 334, 17, 566, -254,
	-254, -254, -254, -268, 36, 17, -198, -255, -367, 86,
	87, 160, -367, -367, -367, -427, 84, -367, -357, -324,
	-324, -381, -324, -324, 160, 23, -379, -381, -381, -246,
	-377, -246, 159, -246, -356, -491, 36, -219, 160, 21,
	269, -253, -364, -250, -252, 254, -384, -251, 257, -554,
	255, 253, 112, 258, 312, 113, 248, -364, -364, 254,
	-288, 250, 36, -364, -306, 248, 369, 312, 255, 21,
	269, -305, 248, 113, -367, 254, 258, 255, 253, -363,
	128, -355, 155, 250, 44, 401, -363, 570, 269, -363,
	-363, -363, -363, -363, -363, -363, 286, 286, -363, -363,
	-363, -363, -363, -363, -363, -363, -363, -363, -363, 165,
	-363, -363, -363, -363, -363, -363, 86, 281, 282, 314,
	-586, 426, 32, 381, 381, 382, -597, 377, 43, 32,
	-181, 375, -309, -307, -378, 32, -330, -331, -332, -333,
	-335, -334, 69, 73, 75, 79, 70, 71, 72, 76,
	81, 74, 32, 160, -365, -370, 36, -367, 92, -365,
	-191, -206, -204, -365, 86, -448, -610, -612, 508, 505,
	511, -450, -450, 102, 250, 86, 128, -450, -450, 42,
	-366, -607, 512, 506, -139, 160, 83, -256, -230, -231,
	-232, -233, -261, -343, 196, 199, 201, 202, 203, 204,
	206, 207, 208, 209, 210, 213, 214, 211, 212, 263,
	191, 192, 193, 194, 215, 177, 197, 564, 178, 179,
	180, 181, 182, 183, 186, 187, 188, 189, 185, -367,
	-240, -236, -324, -194, -206, -367, 92, -367, 147, 125,
	-6, 123, -151, -150, -149, 126, 637, 643, 125, 125,
	125, 87, 87, 87, 160, 87, 87, 87, 160, 87,
	160, 102, -529, 485, 41, 160, 86, 87, 160, 62,
	160, 128, 87, 160, -394, -367, 92, -394, 192, 87,
	62, -139, 92, 160, -207, 38, 39, 159, 458, -367,
	-540, 87, -456, 160, 250, 159, 159, -432, 404, -366,
	-434, 21, 566, -343, 40, -350, 128, 674, -367, 87,
	-396, -396, 117, -392, -389, 87, 125, -394, 123, -259,
	-261, 420, 421, -394, -259, -260, -266, 156, 195, 263,
	194, 193, 191, 420, 421, -278, -423, 563, -207, 87,
	-367, -394, -394, 87, -394, -394, 17, -367, -278, -390,
	-394, -212, -212, 87, 87, -463, -464, -463, -463, 87,
	87, 87, 87, -463, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 86, 102, 104, 102, 104,
	-522, -619, 64, 645, 63, 448, 107, 317, 160, 102,
	92, 675, 160, 128, 92, -367, -367, 17, 246, -367,
	17, 17, 17, -186, 122, 174, 92, -598, 321, 375,
	516, 246, 375, 321, 516, 246, -475, 102, 412, -241,
	-242, -243, -244, -245, 138, 161, 162, -230, -219, 86,
	-219, -588, 487, 428, 438, -363, -386, -385, 377, 43,
	-509, 449, 434, 435, -433, 277, -356, -594, 99, 128,
	83, 355, 359, 361, 360, 356, 357, 358, -412, -413,
	-411, -415, -356, -581, 86, 86, -188, 36, 136, -180,
	334, 86, 86, 36, -486, 345, -261, -254, -198, -367,
	17, 160, -580, 159, -1, -367, -367, -426, -379, -324,
	-394, -394, -324, -379, -379, -381, -367, -246, -486, -261,
	36, -304, 243, 239, -460, 314, 315, -461, -476, 317,
	-478, 86, -258, -343, -251, -553, -554, -414, -367, 113,
	-553, 113, 86, -258, -343, -343, -307, -343, -367, -367,
	-367, -367, -314, -313, -343, -316, 33, -317, -367, -367,
	-367, -367, 113, -367, 113, -283, 42, 49, 50, 51,
	334, 335, 336, -363, -363, 198, -286, 42, 448, 450,
	451, -316, 102, 102, 102, 102, 92, 92, 92, -363,
	-363, 102, 92, -370, 92, -555, 173, 46, 47, 102,
	102, 102, 102, 42, 92, -291, 42, 297, 301, 298,
	299, 300, 92, 102, 42, 102, 42, 102, 42, -367,
	86, -556, -557, 92, -475, -588, -363, 381, -447, 128,
	128, -386, -590, 96, 429, -590, -593, 327, -183, 516,
	33, -223, 243, 239, -581, -438, -437, -343, -203, -203,
	-203, -203, -203, -203, 69, 80, 69, -216, 86, 69,
	74, 69, 74, 69, -332, 69, 80, -438, -205, -219,
	-370, 87, -604, -603, -602, -600, 77, 251, 78, -400,
	-450, 505, 509, 510, -434, -382, 92, -441, -227, 24,
	-254, -254, -507, 307, 308, 87, 160, -261, -326, 19,
	159, 121, -6, -147, -149, -394, -6, -394, 639, 394,
	640, 92, 102, 102, -537, 469, 464, 466, 113, -403,
	-524, -523, 62, -188, -215, -516, -559, -522, -367, 675,
	675, 675, 675, 92, 62, -188, -516, -227, -529, -209,
	-208, 45, -367, 102, 17, -431, -426, 147, 147, -367,
	405, -442, 92, 427, 92, 246, 675, 92, -350, -389,
	-394, 87, -269, 182, 181, -269, 36, 87, 87, -493,
	-493, -492, -495, -492, -269, -269, 87, 86, -207, 87,
	24, 87, 87, 87, -394, 87, 87, 160, -512, 525,
	-513, 599, -463, -463, -463, -463, -463, -463, -463, -463,
	-463, -463, -463, -463, -463, -463, -463, -463, -463, -405,
	-404, 269, 470, 652, 652, 470, 652, 652, 87, 160,
	-562, 160, -358, 322, -358, -349, 92, 250, 92, 170,
	-367, 92, 655, -254, -356, 341, 92, -367, -367, -367,
	314, -367, 314, -367, -367, 92, 92, 87, 160, -343,
	87, 36, -247, -248, -249, -258, -250, -252, 36, -589,
	96, -584, 92, -367, 93, -590, 158, 379, 42, 430,
	431, 446, 374, 102, 102, 436, -582, -367, -182, 246,
	375, -592, 53, 128, 92, -254, -411, -355, 155, 288,
	-246, 348, -321, -320, -367, 92, -247, -188, -254, -254,
	-247, -247, -188, -487, 347, 21, 102, 146, -220, 84,
	159, -206, -255, -367, 147, 87, -324, -246, -324, -324,
	-379, -487, -188, -472, 318, 86, -470, 86, -470, 113,
	356, -479, -477, 269, -312, 46, 48, -261, -551, -367,
	-549, -551, -367, -549, -549, -414, -394, -312, -258, 250,
	32, 239, -315, 353, 354, 359, 361, -443, 313, 118,
	-443, 160, -207, 160, -367, -278, -278, 32, 92, 92,
	-256, 87, 160, 128, 92, -589, -584, 128, -448, 92,
	92, -590, 92, 92, -594, 128, -257, 246, -356, 160,
	-223, -223, -324, 160, 128, -225, -224, 83, 84, -226,
	83, -224, -224, 69, -217, 92, 69, 69, -324, -602,
	-601, 24, -554, -554, -554, 87, 87, 15, -232, 42,
	-325, 20, 21, 147, 125, 123, 125, 125, -367, 87,
	87, -499, 630, -533, -535, 464, 21, 21, 15, 251,
	87, -516, 675, -516, -537, 46, 47, -426, -442, 449,
	-254, 160, 675, -259, -297, 92, -394, 87, -394, 87,
	92, 87, 92, -212, 21, 87, 160, 87, 87, 87,
	160, 87, 87, -394, 87, -562, -359, 192, 92, -359,
	375, -368, -367, 17, -367, -185, 250, -246, 342, 343,
	344, 92, -367, -475, 314, -475, 314, 246, -367, -236,
	-419, 565, -243, -261, 244, -188, 87, 160, -188, 92,
	-587, 440, 102, 42, 102, 158, 432, -510, -174, 96,
	-256, 33, -223, -591, 96, 128, 674, 86, -363, -363,
	-363, -185, -367, 87, 160, -363, -363, 87, -185, 87,
	87, -276, 566, -488, 268, 102, 146, 102, 146, 102,
	-365, -206, -367, -324, -580, 159, -324, -488, -462, 319,
	102, -390, 86, -390, 86, -471, 316, 86, 87, 160,
	-367, -343, -273, -272, -270, 107, 118, 42, 418, -271,
	96, 155, 302, 305, 304, 280, 303, -302, -383, 83,
	424, 353, 354, -415, 630, 554, 253, 112, 113, 406,
	-384, 86, 86, 84, 322, 86, 86, -551, 87, -312,
	-343, 42, -315, 42, 367, 313, -313, -367, 155, -278,
	87, -557, 92, -587, 92, -450, -592, 92, -174, -256,
	-581, -212, -437, -522, -394, 86, -394, 87, 86, 69,
	11, 19, -387, -394, -402, 659, 661, 662, 252, -6,
	640, 394, -293, 631, 92, 21, 92, -531, 92, -438,
	-499, -142, -290, -355, 285, 87, -296, 138, 566, 87,
	87, -463, -463, -466, -465, -469, 470, 314, 478, -402,
	92, 92, 87, 87, 92, -367, 170, 92, 375, -185,
	674, 92, -475, 92, -475, -367, 314, 92, 92, -234,
	-261, -178, 566, -276, -249, -178, 21, 566, 378, 42,
	102, 42, 433, 92, -182, 128, 108, 109, -351, -352,
	92, -421, -278, -280, 92, -320, -387, -387, -274, -188,
	36, -275, -318, -415, -141, -140, -274, 86, -489, 164,
	102, 146, 102, 102, -324, -324, -489, -478, 21, 87,
	-457, 87, -457, 86, 128, -390, -477, -480, 62, -270,
	107, -390, 92, -280, -281, 42, 301, 297, 128, 128,
	-282, 42, 281, 282, -292, 86, 312, 15, 198, 86,
	113, 113, -254, -421, -421, -552, 355, 356, 357, 362,
	359, 360, 358, 361, -552, -421, -421, 86, -444, -443,
	-390, -363, -363, 155, -591, -213, -218, -550, -367, 253,
	21, 21, -508, 566, 660, 86, 86, -367, -367, -347,
	632, 102, 92, 466, -293, -500, 633, -527, -470, -278,
	128, 87, 76, 564, 567, 87, -468, 120, 432, 436,
	-388, -391, 102, 104, 190, 158, 87, 87, -367, -367,
	-354, -353, 92, -236, 92, -236, 92, 314, -475, 565,
	-179, 61, 512, 92, 93, 427, 92, 93, 378, -174,
	92, 675, 160, 128, 87, -458, 269, -188, 160, -318,
	-355, -142, -458, -277, -319, -367, 92, -506, 173, 346,
	566, 102, 146, 102, -212, -490, 173, 346, -461, 87,
	87, 87, -457, 102, 87, -484, -481, 86, -318, 271,
	138, 92, 92, 102, 86, -517, 32, 92, -422, 86,
	87, 87, 87, 87, -421, 102, -278, -363, 87, 87,
	160, 662, 86, -402, -402, 86, 21, -347, -501, 634,
	92, -536, 469, -530, -528, 464, 465, 466, 467, 92,
	565, 66, 568, -467, -468, 436, -388, -391, 628, 476,
	476, 476, 675, 160, 128, -236, -236, -475, 92, -237,
	-367, 312, 449, -352, 92, -424, -459, 321, 21, -318,
	-363, -459, 87, 160, -363, -363, 346, 102, 146, 102,
	-213, 346, -473, 320, 87, -484, -318, -483, -482, 319,
	272, 86, 87, -394, -406, -363, 87, -295, -294, 562,
	-421, -424, 84, -424, 84, -424, 84, -424, 84, 87,
	-278, -367, 253, -137, 86, 87, 87, -348, -367, -531,
	92, -538, 251, -534, -535, 468, -528, 21, 466, 21,
	21, -143, 160, 66, 117, 477, 477, 477, -236, -353,
	92, 92, -236, -235, 36, 471, 405, -425, 259, 367,
	368, 96, 566, 353, 354, 372, 371, 370, 373, 21,
	-460, -278, -319, -387, -387, 102, 102, 87, 160, -367,
	268, 86, -401, -395, -394, 268, 87, -367, -301, -299,
	-300, 83, 483, 310, 311, 87, -552, -552, -552, -552,
	-302, 87, 160, -400, 87, 160, -545, 86, 102, -533,
	-532, -534, 21, -531, 21, -531, -531, 473, 566, -467,
	-236, 92, -363, -363, 92, 92, 352, -363, -363, -363,
	-343, 86, -472, -482, -481, -401, 87, 160, -443, -300,
	83, -299, 83, 16, 15, -424, -424, -424, -424, 86,
	87, -367, -548, 32, 87, -544, -543, -344, -539, -367,
	469, 470, 92, -531, 128, 567, -622, -621, 651, 102,
	102, -367, 102, 102, 102, -457, -462, 87, -395, -298,
	307, 308, 32, 173, -298, -400, -547, -546, -345, 87,
	160, 159, 92, 568, 92, 87, -478, 107, 42, 309,
	87, 160, 128, -543, -367, -546, 42, -394, 159, -367,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 0, 317, 318, 319,
	320, 321, 322, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 0, 0, 0, 0, 0, 726, 727, 0,
	690, 0, 0, 0, 0, 0, 0, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 0, 351, 347, 259, 260,
	261, 262, 263, 264, 265, 358, 359, 539, 0, 0,
	0, 0, 809, -2, 103, 0, 0, 0, 0, 0,
	0, 340, 0, 331, 331, 0, 0, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	-2, 739, 0, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	416, 417, 418, 412, 413, 415, 414, -2, 0, 0,
	739, 0, 0, 0, 817, 0, 0, 0, 860, 878,
	23, 0, 7, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 0, 0, 19, 0, 19, 0, 0,
	0, 1439, 1440, 1441, 1442, 2245, 2215, -2, 1978, 1952,
	2139, 2140, 2035, 2047, 2059, 2283, 2284, 2285, 2286, 2287,
	2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297,
	2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307,
	2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317,
	2318, 2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327,
	2328, 2329, 2330, 2331, 2332, 1908, 1909, 1910, 1911, 1912,
	1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922,
	1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932,
	1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942,
	1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1979, 1980, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
	2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,
	2046, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057,
	2058, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108,
	2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118,
	2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128,
	2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138,
	2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150,
	2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160,
	2161, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170,
	2171, -2, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180,
	2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190,
	2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200,
	2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210,
	2211, 2212, 2213, 2214, 2216, 2217, 2218, 2219, 2220, 2221,
	2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, -2,
	-2, -2, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241,
	2242, 2243, 2244, 2246, 2247, 2248, 2249, 2250, 2251, 2252,
	2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262,
	2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272,
	0, 315, 313, 1922, 1952, 1978, 2035, 2047, 2048, 2059,
	2087, 2139, 2140, 2172, 2215, 2231, 2232, 2233, 2245, 0,
	0, 1015, 0, 787, 0, 0, 792, 1386, 787, 352,
	728, 729, 817, 843, 688, 0, 390, 0, 1968, 394,
	2222, 0, 0, 0, 0, 685, 384, 385, 386, 387,
	388, 389, 0, 0, 988, 0, 0, 380, 0, 346,
	2037, 2244, 1443, 0, 0, 0, 0, 0, 202, 1141,
	204, 1143, 208, 216, 0, 0, 0, 221, 222, 225,
	226, 227, 228, 229, 0, 233, 0, 235, 238, 0,
	240, 241, 0, 244, 245, 246, 0, 256, 257, 258,
	1144, 1145, 1146, -2, 131, 1013, 1879, 1765, 0, 1772,
	1785, 1796, 1525, 1526, 1527, 1528, 0, 0, 0, 0,
	0, 0, 1536, 1537, 0, 1567, 2287, 2328, 2329, 0,
	1545, 1546, 1547, 1548, 1549, 1550, 0, 142, 154, 155,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 0, 1826, 1827,
	1828, 1736, 1512, 1439, 0, 2296, 0, 2318, 2323, 2324,
	2325, 2326, 2317, 0, 0, 1720, 0, 1710, 0, 0,
	-2, -2, 0, 0, 2112, -2, 2330, 2331, 2332, 2293,
	2314, 2322, 2297, 2298, 2321, 2289, 2290, 2291, 2284, 2285,
	2286, 2288, 2300, 2302, 2313, 0, 2309, 2319, 2320, 2220,
	0, 0, 2267, 0, 0, 0, 2262, 156, 157, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1731, -2, 1733, -2,
	1735, -2, 1738, -2, -2, -2, -2, 1743, 1744, -2,
	1746, -2, -2, -2, -2, -2, -2, -2, 1722, 1723,
	1724, 1725, 1714, 1715, 1716, 1717, 1718, 1719, -2, -2,
	-2, 843, 936, 0, 843, 0, 818, 865, 868, 871,
	874, 821, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 341, 342,
	330, 332, 0, 336, 0, 0, 332, 329, 323, 0,
	1183, 1183, 1183, 0, 0, 0, 1183, 1183, 1183, 1183,
	1183, 0, 1183, 0, 0, 0, 0, 0, 1183, 0,
	1050, 1148, 1149, 1150, 1181, 1182, 1272, 0, 0, 0,
	744, 740, 741, 742, 743, 831, 0, 833, 836, 0,
	0, 665, 665, 903, 903, 0, 611, 0, 0, 0,
	665, 0, 625, 617, 0, 0, 0, 665, 0, 0,
	838, 838, 0, 668, 675, 665, 665, -2, 665, 665,
	662, 665, 0, 0, 1197, 631, 632, 633, 617, 617,
	636, 637, 638, 648, 649, 676, 1903, 0, 0, 539,
	539, 0, 539, 539, 0, 539, 539, 539, 0, 746,
	1994, 2082, 1975, 2053, 1932, 2037, 2244, 0, 288, 2112,
	293, 0, 1977, 1997, 0, 0, 2016, 0, -2, 0,
	368, 843, 0, 0, 817, 0, 0, 0, 0, 539,
	539, 539, 539, 539, 1271, 539, 539, 539, 539, 539,
	0, 0, 0, 539, 539, 539, 539, 0, 879, 880,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	5, 6, 19, 0, 0, 0, 0, 0, 0, 110,
	109, 0, 1880, 1898, 1831, 1832, 1833, 1885, 1835, 1889,
	1889, 1889, 1889, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1889, 1889, 0, 0, 1878, 1855, 1887,
	1887, 1887, 1885, 1882, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1892, 1892,
	1895, 1895, 1892, 0, 430, 428, 429, 1761, 0, 0,
	0, 0, 787, 791, 1384, 0, 0, 0, 843, -2,
	0, 0, 689, 391, 1444, 0, 0, 395, 0, 396,
	0, 0, 398, 0, 0, 0, 419, 0, 422, 406,
	407, 408, 409, 402, 0, 182, 0, 382, 383, 0,
	0, 348, 0, 0, 0, 540, 0, 0, 0, 0,
	0, 0, 213, 209, 217, 220, 230, 237, 0, 249,
	251, 254, 210, 218, 223, 224, 231, 252, 211, 214,
	215, 219, 253, 255, 212, 232, 236, 250, 234, 239,
	242, 243, 248, 0, 183, 0, 0, 0, 0, 0,
	1771, 0, 0, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	1765, 0, 0, 1531, 1532, 1533, 1534, 0, 1538, 0,
	1568, 0, 0, 0, 0, 0, 0, 1825, 1829, 0,
	1761, 1761, 0, 1761, 1757, 0, 0, 0, 0, 0,
	0, 1761, 1693, 0, 0, 1695, 1711, 0, 0, 1697,
	1698, 0, 1701, 1702, 1761, 0, 1761, 1706, 1761, 1761,
	1761, 1689, 1690, 0, 1757, 1757, 1757, 1757, 0, 0,
	1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
	1757, 1757, 1757, 1757, 1757, 0, 0, 0, 0, 838,
	0, 844, 0, -2, 0, 862, 864, 866, 867, 869,
	870, 872, 873, 875, 876, 823, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 72, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 339,
	325, 2074, 0, 324, 0, 0, 0, 0, 0, 1012,
	0, 0, 1183, 1183, 1183, 1051, 0, 0, 0, 0,
	0, 0, 0, 0, 1183, 1183, 1183, 1183, 0, 1203,
	0, 0, 0, 746, 745, 0, 832, 0, 0, 71,
	600, 601, 602, 903, 0, 0, 604, 605, 0, 606,
	0, 0, 617, 665, 665, 623, 624, 619, 618, 671,
	672, 668, 0, 668, 668, 903, 0, 642, 643, 644,
	665, 665, 650, 839, 0, 651, 652, 668, 0, 673,
	674, 903, 0, 0, 903, 903, 0, 660, 661, 663,
	665, 0, 0, 1183, 0, 681, 619, 619, 1904, 1905,
	0, 0, 1194, 0, 0, 0, 0, 684, 0, 0,
	0, 446, 447, 0, 0, 747, 0, 267, 271, 0,
	274, 0, 2082, 0, 2082, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 311, 312, 0, 0, 0, 0,
	302, 305, 1378, 1379, 1138, 1139, 306, 307, 360, 361,
	0, 838, 861, 863, 857, 858, 859, 0, 1185, 0,
	0, 0, 0, 0, 539, 0, 0, 0, 0, 0,
	722, 0, 1030, 724, 0, 0, 0, 0, 0, 911,
	905, 907, 983, 142, 881, 8, 127, 124, 0, 19,
	0, 0, 19, 19, 0, 19, 316, 0, 1901, 1899,
	1900, 1834, 1886, 0, 1860, 0, 1861, 1862, 1863, 1874,
	1875, 0, 0, 1856, 0, 1857, 1858, 1859, 1850, 0,
	1851, 1852, 0, 1853, 1854, 314, 427, 0, 0, 1762,
	1016, 0, 765, 779, 760, 0, 768, 0, 0, 1386,
	0, 0, 0, 0, 748, 779, 750, 0, 768, 838,
	815, 0, 793, 0, 0, 392, 0, 403, 397, 0,
	404, 399, 400, 0, 0, 421, 423, 424, 425, 410,
	411, 686, 377, 378, 379, 369, 370, 371, 372, 373,
	374, 375, 376, 0, 0, 381, 152, 0, 349, 350,
	0, 0, 0, 196, 197, 198, 199, 200, 201, 203,
	187, 711, 713, 1130, 1142, 0, 1133, 0, 206, 247,
	179, 0, 0, 0, 1766, 1767, 1768, 1769, 1770, 1775,
	0, 1777, 1779, 1781, 1783, 0, 1801, -2, -2, 1513,
	1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523,
	1524, 1786, 1799, 1800, 0, 0, 0, 0, 0, 0,
	1797, 1797, 1792, 0, 1551, 1380, 1381, 1529, 0, 0,
	1565, 1569, 0, 0, 0, 0, 0, 0, 1165, 1885,
	0, 143, 1756, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
	1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676,
	1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
	1687, 1688, 0, 0, 1765, 0, 0, 0, 1758, 1759,
	0, 0, 0, 1648, 0, 0, 1654, 1655, 1656, 0,
	774, 0, 1721, 1694, 1712, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 937, 0, 783, 785, 786, 812,
	793, 819, 0, 0, 0, 102, 107, 0, 1239, 0,
	0, 0, 0, 0, 0, 0, 75, 1198, 76, 1200,
	0, 0, 0, 0, 0, 0, 343, 344, 0, 0,
	338, 326, 2074, 328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1066, 1067, 537, 1124, 0,
	0, 0, 1140, 1169, 1179, 0, 0, 0, 0, 0,
	1245, 1052, 1057, 1058, 1059, 1053, 1054, 1060, 1061, 0,
	834, 0, 0, 952, 603, 666, 667, 904, 607, 0,
	0, 614, 2037, 619, 903, 903, 626, 620, 627, 670,
	628, 629, 630, 668, 903, 903, 840, 665, 668, 653,
	669, 668, 1386, 657, 0, 664, 1386, 682, 1386, 0,
	680, 634, 635, 1247, 836, 444, 445, 450, 452, 0,
	504, 504, 504, 484, 504, 0, 0, 472, 1906, 0,
	0, 0, 0, 481, 1906, 0, 0, 1906, 1906, 1906,
	1906, 1906, 1906, 1906, 0, 0, 1906, 1906, 1906, 1906,
	1906, 1906, 1906, 1906, 1906, 1906, 1906, 0, 1906, 1906,
	1906, 1906, 1906, 1364, 1906, 0, 1195, 494, 495, 496,
	497, 502, 503, 0, 0, 532, 0, 0, 1065, 0,
	537, 0, 0, 1107, 0, 0, 916, 0, 917, 918,
	919, 914, 954, 978, 978, 0, 978, 958, 1386, 0,
	0, 0, 279, 280, 268, 0, 269, 0, 0, 282,
	283, 0, 285, 286, 287, 294, 1975, 2053, 289, 291,
	0, 0, 295, 308, 309, 310, 0, 0, 300, 301,
	0, 0, 363, 364, 366, 0, 793, 1199, 73, 1186,
	708, 1382, 709, 710, 714, 0, 0, 717, 718, 719,
	720, 721, 1032, 0, 0, 1116, 1117, 1118, 1185, 903,
	0, 912, 0, 908, 984, 0, 986, 0, 0, 125,
	19, 0, 118, 115, 0, 0, 0, 0, 0, 1881,
	1830, 1902, 0, 0, 0, 1883, 0, 0, 0, 0,
	0, 108, 795, 755, 0, 759, 776, 0, 780, 0,
	0, 772, 764, 769, 0, 0, 789, 756, 1385, 0,
	0, 0, 0, 749, 0, 0, 754, 793, 0, 816,
	845, 846, 849, 1445, 0, 405, 401, 420, 0, 0,
	0, 0, 190, 1127, 0, 191, 195, 185, 0, 0,
	0, 1132, 0, 1129, 1134, 0, 205, 0, 0, 180,
	181, 1230, 1239, 0, 0, 0, 1776, 1778, 1780, 1782,
	1784, 0, 1787, 1797, 1797, 1793, 0, 1788, 0, 1790,
	0, 1766, 1535, 0, 1570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 849, 0, 0, 1638, 1639, 0,
	0, 1643, 0, 1645, 1646, 1647, 1649, 0, 0, 0,
	1653, 0, 1692, 1713, 1696, 1699, 0, 1703, 0, 1705,
	1707, 1708, 1709, 0, 843, 843, 0, 0, 1609, 1609,
	1609, 0, 0, 0, 0, 1609, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1554, 0, 1555,
	1556, 0, 0, 0, 938, 813, 0, 0, 0, 0,
	0, 1237, 0, 92, 0, 0, 0, 0, 97, 0,
	0, 77, 0, 0, 1206, 1207, 1208, 1212, 345, 333,
	335, 0, 327, 0, 1184, 0, 0, 0, 0, -2,
	1032, 836, 0, 836, 1077, 1906, 541, 0, 0, 1126,
	0, 1096, 0, 0, 0, -2, 0, 0, 0, 1179,
	0, 0, 0, 1249, 0, 0, 0, 733, 737, 23,
	837, 0, 610, 608, 0, 612, 0, 613, 665, 621,
	622, 903, 645, 646, 0, 0, 903, 665, 665, 656,
	668, 677, 0, 678, 1386, 1249, 0, 0, 1194, 1315,
	1283, 462, 0, 1399, 1400, 505, 0, 1406, 1415, 1183,
	1477, 0, 1415, 0, 0, 1417, 1418, 0, 0, 0,
	0, 485, 486, 0, 471, 0, 0, 0, 0, 0,
	0, 470, 0, 0, 515, 0, 0, 0, 0, 0,
	1907, 1906, 1906, 0, 479, 480, 0, 483, 0, 0,
	0, 0, 0, 0, 0, 0, 1906, 1906, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1355,
	0, 0, 0, 0, 0, 0, 0, 1370, 1371, 0,
	1077, 1906, 0, 0, 0, 0, 541, 1121, 1121, 1094,
	1112, 0, 448, 449, 512, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 943, 0, 0, 0,
	0, 0, 0, 0, 836, 979, 0, 981, 982, 956,
	-2, 0, 916, 961, 1761, 0, 272, 273, 0, 0,
	278, 296, 298, 270, 0, 0, 0, 297, 299, 303,
	304, 362, 365, 367, 855, 0, 0, 1273, 0, 1033,
	1034, 1036, 1037, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1959, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1031,
	725, 1119, 894, 906, 913, 985, 987, 143, 909, 0,
	128, 19, 127, 119, 120, 0, 19, 0, 0, 0,
	0, 1891, 1890, 1876, 0, 1877, 1888, 1893, 0, 1896,
	0, 431, 799, 0, 0, 779, 781, 0, 0, 779,
	0, 0, 788, 0, 0, 0, 0, 0, 0, 0,
	779, 855, 795, 0, 852, 850, 851, 0, 0, 687,
	153, 426, 0, 0, 0, 0, 0, 712, 0, 1131,
	187, 0, 0, 207, 0, 0, 0, 1239, 1234, 1760,
	1789, 1791, 0, 1798, 1794, 1530, 1539, 1566, 0, 0,
	1572, 1584, 1584, 0, 0, 0, 1575, 1889, 1889, 1578,
	1885, 1887, 1885, 1584, 1584, 0, 1166, 0, 1167, 849,
	144, 0, 0, 1644, 0, 0, 0, 775, 0, 0,
	0, 1605, 1607, 1609, 1609, 1616, 1610, 1617, 1618, 1609,
	1609, 1609, 1609, 1623, 1609, 1609, 1609, 1609, 1609, 1609,
	1609, 1609, 1609, 1609, 1609, 1603, 0, 0, 1819, 1820,
	784, 0, 0, 826, 827, 828, 829, 830, 0, 0,
	62, 62, 1239, 0, 101, 93, 0, 0, 0, 0,
	0, 0, 0, 1209, 0, 337, 0, 78, 79, 81,
	0, 0, 0, 0, 0, 0, 0, 91, 0, 0,
	1018, 1019, 1021, 0, 1024, 1025, 1026, 0, 0, 1392,
	0, 1081, 1078, 1079, 1080, 0, 1121, 542, 543, 544,
	545, 0, 0, 0, 1125, 0, 0, 1089, 0, 0,
	0, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, -2,
	1189, 0, 1386, 0, 0, 1392, 1222, 0, 0, 1227,
	0, 1392, 1392, 0, 1257, 0, 1246, 787, 0, -2,
	0, 0, 735, 0, 0, 953, 609, 615, 903, 639,
	841, 842, 1386, 903, 903, 665, 683, 679, 1257, 1248,
	0, 451, 504, 0, 1303, 0, 0, 1309, 0, 1316,
	455, 0, 506, 0, 1405, 1433, 1416, 1433, 1478, 1433,
	1433, 1183, 0, 506, 0, 0, 473, 0, 0, 0,
	0, 0, 469, 509, 849, 456, 458, 459, 460, 513,
	514, 516, 0, 518, 519, 475, 487, 488, 489, 490,
	491, 492, 493, 0, 0, 0, 482, 498, 499, 500,
	501, 457, 1332, 1333, 1334, 1337, 1338, 1339, 1340, 0,
	0, 1343, 1344, 1345, 1346, 1347, 1430, 1431, 1432, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1372, 1373, 1374, 1375,
	1376, 1377, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	0, 0, 1367, 0, 0, 1081, 0, 0, 0, 0,
	0, 1121, 535, 0, 0, 536, 1096, 0, 1114, 0,
	1108, 1109, 0, 0, 757, 903, 355, 0, 948, 939,
	0, 923, 0, 925, 945, 926, 946, 0, 0, 930,
	0, 932, 0, 928, 929, 934, 927, 903, 915, 955,
	980, 957, 960, 962, 963, 969, 0, 0, 0, 0,
	266, 275, 276, 277, 284, 0, 561, 290, 811, 0,
	1383, 715, 716, 1274, 1275, 723, 0, 1038, 892, 0,
	0, 123, 126, 0, 121, 0, 0, 0, 0, 113,
	111, 1884, 0, 0, 801, 167, 0, 0, 0, 777,
	0, 782, 779, 763, 773, 762, 770, 771, 790, 1387,
	1388, 1389, 1390, 0, 779, 753, 752, 814, 799, 847,
	848, 0, 1446, 393, 0, 1128, 187, 192, 193, 194,
	188, 186, 1135, 0, 1137, 0, 1232, 0, 0, 1795,
	1571, 1540, 1573, 1585, 1586, 1574, 0, 1542, 1543, 1576,
	1577, 1579, 1580, 1581, 1582, 1583, 1544, 0, 1168, 1640,
	0, 1642, 1650, 1651, 0, 1700, 1704, 0, 0, 0,
	0, 0, 1614, 1615, 1619, 1620, 1621, 1622, 1624, 1625,
	1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 843,
	1604, 0, 0, 0, 0, 0, 0, 0, 824, 0,
	0, 0, 64, 0, 64, 1238, 1240, 0, 983, 0,
	0, 98, 0, 1216, 1386, 0, 0, 80, 82, 0,
	2038, 0, 0, 0, 0, 1185, 1011, 1027, 1023, 0,
	0, 0, 0, 1393, 1394, 1396, 1397, 1398, 0, 1049,
	0, 0, 1069, 1070, 1071, 1083, 0, 547, 548, 0,
	0, 0, 560, 556, 557, 558, 538, 1120, 1103, 0,
	0, 1092, 0, 0, 1102, 0, 1190, 1906, 1906, 1906,
	1216, 0, 0, 1317, 1906, 1906, 0, 1224, 1226, 1216,
	0, 0, 1321, 1260, 0, 0, 1251, 0, 978, 0,
	0, 903, 734, 737, 738, 835, 616, 654, 658, 655,
	903, 1260, 443, 1281, 0, 0, 0, 0, 0, 1313,
	0, 0, 1285, 0, 474, 507, 0, -2, 0, 1434,
	0, 1419, 1434, 0, 0, 1433, 0, 463, 506, 0,
	0, 0, 520, 525, 526, 0, 522, 523, 1473, 0,
	524, 0, 511, 0, 517, 1335, 1336, 0, 1341, 1342,
	0, 1366, 0, 0, 454, 527, 0, 0, 0, 528,
	529, 534, 1122, 1123, 1089, 0, 1103, 0, 1113, 0,
	1110, 1111, 843, 0, 0, 920, 949, 0, 0, 921,
	0, 922, 924, 947, 0, 941, 931, 933, 354, 964,
	0, 0, 966, 967, 968, 959, 292, 856, 1035, 0,
	877, 0, 0, 910, 0, 19, 0, 0, 116, 1894,
	1897, 803, 0, 800, 168, 0, 0, 0, 0, 767,
	778, 761, 1391, 751, 801, 853, 854, 189, 184, 1136,
	1242, 0, 1233, 0, 1497, 1553, 0, 1652, 0, 1609,
	1606, 1609, 1608, 1600, 0, 1557, 0, 1559, 1560, 1561,
	0, 1563, 1564, 0, 822, 0, 60, 0, 63, 61,
	0, 100, 94, 0, 0, 1204, 0, 1216, 1213, 1214,
	1215, 0, 83, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 1020, 1022, 0, 1055, 1321, 0, 1055, 1082,
	1068, 0, 0, 549, 550, 0, 553, 559, 1084, 0,
	0, 1086, 1087, 1088, 0, 0, 1100, 0, 0, 0,
	0, 1178, 1180, 1196, 0, 0, 0, -2, 1228, 0,
	-2, 1221, 0, 1266, 0, 1258, 0, 1250, 0, 1253,
	903, 903, -2, 731, 736, 0, 659, 1266, 1283, 0,
	1304, 0, 0, 0, 0, 0, 0, 0, 1284, 0,
	1297, 508, 1435, -2, 1449, 1451, 0, 1195, 1454, 1455,
	0, 0, 0, 0, 0, 0, 1504, 1463, 0, 0,
	1467, 1468, 1469, 0, 0, 1472, 0, 1813, 1814, 0,
	1476, 0, 0, 0, 0, 0, 0, 0, 1413, 464,
	465, 0, 467, 468, 1906, 1474, 510, 461, 1906, 477,
	1365, 1368, 1369, 533, 530, 531, 1092, 1095, 1106, 1115,
	758, 838, 356, 357, 950, 0, 940, 942, 973, 970,
	0, 0, 1039, 893, 901, 2267, 2269, 2266, 117, 122,
	0, 0, 805, 0, 802, 0, 796, 798, 178, 766,
	803, 138, 170, 0, 0, 1541, 0, 0, 0, 1641,
	1691, 1612, 1613, 0, 1601, 0, 1595, 1596, 1597, 1602,
	0, 0, 825, 820, 65, 96, 0, 99, 0, 1205,
	69, 1185, 0, 1185, 0, 0, 0, 1014, 1028, 0,
	1041, 1048, 1062, 1201, 1395, 1047, 0, 0, 546, 551,
	0, 554, 555, 1104, 1103, 0, 1090, 1091, 0, 1098,
	0, 0, 1191, 1192, 1193, 1318, 1319, 1320, 1276, 1223,
	0, -2, 1329, 0, 1219, 1242, 1276, 0, 1254, 0,
	1261, 0, 1259, 1252, 843, 732, 1263, 453, 1315, 1305,
	0, 1307, 0, 0, 0, 0, 1286, -2, 0, 1450,
	1452, 1453, 1456, 1457, 1458, 1509, 1510, 1511, 0, 0,
	1461, 1506, 1507, 1508, 1462, 0, 0, 0, 0, 0,
	1811, 1812, 1502, 0, 0, 1420, 1422, 1423, 1424, 1425,
	1426, 1427, 1428, 1429, 1421, 0, 0, 0, 1412, 1414,
	466, 0, 0, 1906, 1105, 353, 0, 0, 974, 976,
	971, 972, 895, 0, 0, 0, 0, 112, 114, 129,
	0, 804, 169, 0, 805, 140, 0, 161, 0, 1243,
	0, 1552, 0, 0, 0, 1611, 1598, 0, 0, 0,
	0, 0, 1815, 1816, 1817, 0, 1558, 1562, 95, 1217,
	0, 67, 0, 84, 1185, 85, 1185, 0, 0, 0,
	0, 1063, 1064, 1072, 1073, 0, 1075, 1076, 552, 1085,
	1093, 1097, 1100, 0, 1152, 1278, 0, 1225, 1194, 1331,
	1906, 1229, 1278, 0, 1323, 1906, 1906, 1244, 0, 1256,
	0, 1268, 0, 1262, 838, 442, 0, 1265, 1301, 1306,
	1308, 1310, 0, 1314, 1312, 1287, -2, 0, 1295, 0,
	0, 1459, 1460, 0, 0, 1710, 1906, 0, 1492, 0,
	1152, 1152, 1152, 1152, 0, 521, 476, 0, 951, 965,
	0, 902, 0, 0, 0, 0, 0, 794, 130, 0,
	139, 158, 0, 171, 172, 0, 0, 0, 0, 1235,
	0, 1500, 1501, 0, 1587, 0, 0, 0, 1591, 1592,
	1593, 1594, 1185, 69, 0, 86, 87, 0, 1185, 0,
	1040, 0, 1074, 1099, 1101, 1151, 1218, 0, 1315, 1330,
	0, 1220, 1322, 0, 0, 0, 1255, 1267, 0, 1270,
	730, 1264, 1282, 0, 1311, 1288, 1296, 0, 1291, 0,
	0, 0, 1505, 0, 1466, 0, 1471, 1480, 1493, 0,
	0, 1401, 0, 1403, 0, 1407, 0, 1409, 0, 0,
	478, 975, 977, 0, 1761, 897, 898, 0, 807, 797,
	141, 145, 0, 167, 164, 0, 173, 0, 0, 0,
	0, 1231, 0, 1498, 0, 1588, 1589, 1590, 66, 68,
	70, 1185, 88, 0, 1042, 1043, 1056, 1153, 1906, 1906,
	0, 0, 0, 1159, 1160, 1906, 1906, 1906, 1164, 0,
	1303, 1335, 1324, 1325, 1326, 1269, 1302, 1290, 0, -2,
	1298, 0, 0, 1763, 1773, 1774, 1464, 1470, 1479, 1481,
	1482, 0, 1494, 1495, 1496, 1503, 1152, 1152, 1152, 1152,
	1411, 896, 0, 0, 806, 0, 132, 0, 0, 162,
	163, 165, 0, 174, 0, 176, 177, 0, 0, 1599,
	90, 1044, 0, 0, 1156, 1157, 0, 0, 0, 0,
	1279, 0, 1281, 1292, -2, 0, 1300, 0, 1465, 1483,
	0, 1484, 0, 0, 0, 1402, 1404, 1408, 1410, 1761,
	899, 808, 1241, 0, 146, 0, 148, 150, 151, 1436,
	159, 160, 166, 175, 0, 0, 1029, 1045, 0, 1154,
	1155, 1158, 1161, 1162, 1163, 0, 1283, 1299, 1764, 1485,
	1487, 1488, 0, 0, 1486, 0, 133, 134, 0, 147,
	0, 0, 1236, 1499, 1046, 1280, 1277, 1489, 1491, 1490,
	900, 0, 0, 149, 1437, 135, 136, 137, 0, 1438,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 676, 673,
	129, 128, 130, 3, 677, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 674, 141, 675, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 57997, 672, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:855
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:862
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:868
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:876
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:882
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:886
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:905
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:911
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:916
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:920
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:953
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:968
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:979
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:991
		{
			yyVAL.str = ""
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:995
		{
			yyVAL.str = yyDollar[2].str
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1000
		{
			yyVAL.str = ""
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1004
		{
			yyVAL.str = yyDollar[2].str
		}
	case 66:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1010
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
				Internal:    yyDollar[12].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1025
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1029
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1033
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1037
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1052
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1060
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion(), yyDollar[4].boolValUnion())
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1066
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1073
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1082
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1090
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1098
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1108
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1118
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1128
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1138
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1148
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1160
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1171
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1182
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
				Internal:    yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1194
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
				Internal:     yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1206
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
				Internal:     yyDollar[12].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
				Internal:    yyDollar[8].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
				Internal:     yyDollar[13].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1246
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1254
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1262
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1270
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1279
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1289
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1301
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1309
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1318
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1328
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1348
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1368
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1374
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1381
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1389
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1395
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1404
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1414
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1422
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1430
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1438
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1448
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1456
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1466
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1473
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1482
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1492
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1496
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1502
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1506
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1512
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1521
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1531
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1535
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1541
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1550
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1554
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1560
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1581
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1595
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1602
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1606
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1612
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1616
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1622
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1629
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1637
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1641
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1653
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1657
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1671
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1675
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1680
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1687
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1691
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1695
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1701
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1710
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1721
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1725
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1731
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1735
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1741
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1745
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1751
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1771
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1790
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1794
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1798
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1803
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1807
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1816
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1826
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1833
		{
			yyVAL.str = yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1838
		{
			yyVAL.str = "\n"
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1845
		{
			yyVAL.str = yyDollar[3].str
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1850
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1854
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1882
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1886
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1900
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1920
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1939
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1964
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1968
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1972
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1977
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1981
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1987
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2000
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2011
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2024
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2028
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2038
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2051
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2064
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2070
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2076
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2084
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2094
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2104
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2108
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2112
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2116
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2120
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2124
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2131
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2135
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2141
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2148
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2157
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2161
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2291
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2295
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2299
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2303
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2307
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2311
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2315
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2319
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2323
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2327
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2331
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2335
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2339
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2343
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2347
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2351
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2355
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2359
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2363
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2367
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2382
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2391
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2398
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2405
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2414
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2432
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2436
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2442
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2449
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2457
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2461
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2465
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2469
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2475
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2479
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2485
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2492
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2499
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2508
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2538
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2542
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2546
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2552
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2558
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2562
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2569
		{
			yyVAL.str = yyDollar[3].str
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2575
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2579
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2585
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2611
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2627
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2650
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2669
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2676
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2683
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2691
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2698
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2705
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2714
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2722
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2728
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2732
		{
			yyVAL.str = yyDollar[1].str
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2738
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2742
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2748
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2752
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2766
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2778
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2783
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2788
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2793
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2799
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2805
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2810
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2814
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2818
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2822
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2826
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2830
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2834
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2838
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2842
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2848
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2852
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2856
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2860
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2865
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2870
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2876
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2889
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2902
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2915
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2928
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2951
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2962
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2973
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2977
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2983
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2993
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2999
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:3003
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:3009
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3015
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3019
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3023
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3027
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3033
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3046
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3052
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3056
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3060
		{
			yyLOCAL = tree.NewPrepareVar(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3067
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3071
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3077
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3083
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3094
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3100
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3104
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3108
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3112
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3116
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3120
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3128
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3136
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3146
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3154
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3164
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3174
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3190
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3194
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3202
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3210
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3250
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3254
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3260
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3266
		{
			yyVAL.str = yyDollar[1].str
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3271
		{
			yyVAL.str = "true"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3272
		{
			yyVAL.str = "false"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3273
		{
			yyVAL.str = yyDollar[1].str
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3278
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3284
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3293
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3300
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3308
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3312
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3337
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3360
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3370
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3377
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3386
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3394
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3398
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3404
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3415
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3419
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3425
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3429
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3453
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3463
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3473
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3489
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3507
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3511
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3517
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3521
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3527
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3533
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3541
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3551
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3559
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3569
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3579
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3589
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3596
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3600
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3604
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3608
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3612
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3619
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3625
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3629
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3633
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3637
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3641
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3645
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3649
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3653
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3658
		{
			yyVAL.str = ""
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3692
		{
			yyVAL.str = ""
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3696
		{
			yyVAL.str = string("COLUMN")
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3701
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3707
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3713
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3721
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3725
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3731
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3739
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3746
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3752
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3758
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3764
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3770
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3777
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3784
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3792
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3798
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3810
		{
			var keyType = tree.INDEX_TYPE_HNSW
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, 0)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3816
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3822
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3830
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3834
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3841
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3859
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3874
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3889
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3904
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3917
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3923
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3934
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3946
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3957
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountLock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3970
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3974
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3982
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3986
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3991
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3995
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4011
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4015
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4019
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4023
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4030
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4034
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4038
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4042
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4049
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4053
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4060
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4064
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4068
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4072
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4079
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4086
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4092
		{
			yyVAL.item = nil
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4097
		{
			yyVAL.item = nil
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4146
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4152
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4158
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4164
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4173
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4181
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4189
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4197
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4203
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4210
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4218
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4227
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4231
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4235
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4246
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4250
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4256
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4261
		{
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4265
		{
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4270
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4280
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4290
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4298
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4304
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4316
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4328
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4334
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4343
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4347
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4351
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4355
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4359
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4363
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4367
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4371
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4377
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4386
		{
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4388
		{
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4397
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4407
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4416
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4420
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4424
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4430
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4436
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4442
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4448
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4457
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4468
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4480
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4488
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4494
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4506
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4520
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4526
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4532
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4539
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4543
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4548
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4552
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4556
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4561
		{
			yyVAL.str = ""
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4565
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4571
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4586
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4590
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4596
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4604
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4611
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4619
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4625
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4631
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4636
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4644
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4650
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4655
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4661
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4667
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4671
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4699
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4707
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4715
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4723
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4727
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4733
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4746
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4754
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4763
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4769
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4777
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4785
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4793
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4799
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4807
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4813
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4821
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4827
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4837
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4842
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4849
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4865
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4878
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4889
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4893
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4899
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4905
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4914
		{
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4916
		{
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4919
		{
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4928
		{
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4932
		{
		}
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4937
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4946
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4953
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4959
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4967
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4974
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4981
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5001
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5009
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5019
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5023
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5029
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5036
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5042
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5050
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5057
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5064
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5083
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5087
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5091
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5096
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5100
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5104
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5110
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5119
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5123
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5129
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5133
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5139
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5143
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5149
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5154
		{
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5158
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5165
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5169
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5176
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5181
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5185
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5191
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5195
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5201
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5205
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5214
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5227
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5238
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5249
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5271
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5294
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5302
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5311
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5315
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5328
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5332
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5337
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5341
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5348
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5353
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5360
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5366
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5374
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5378
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5382
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5386
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5391
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5395
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5401
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5411
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5426
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5430
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5444
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5448
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5454
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5463
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5467
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5471
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5475
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5479
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5485
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5492
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5501
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5505
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5511
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5519
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5523
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5528
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5532
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5538
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5542
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5546
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5551
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5555
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5561
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5567
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5571
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5577
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5582
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5586
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5590
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5595
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5599
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5603
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5608
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5612
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5620
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5624
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5628
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5642
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5646
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5656
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5666
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5676
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5688
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5696
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5704
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5713
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5721
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5729
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5737
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5745
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5753
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5761
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5769
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5777
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5787
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5800
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5804
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5810
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5814
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5820
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5824
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5828
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5832
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5836
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5840
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5844
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5848
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5852
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5856
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5878
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5882
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5887
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5891
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5901
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5910
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5919
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5930
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5934
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5939
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5943
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5948
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5952
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5958
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5962
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5968
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5972
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5976
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5980
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5985
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5993
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5999
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6007
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6017
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6027
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6031
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6037
		{
			if strings.Contains(yyDollar[2].str, ":") {
				ss := strings.SplitN(yyDollar[2].str, ":", 2)
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: ss[0],
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
					Option:   ss[1],
				}
			} else {
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: yyDollar[2].str,
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6057
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6066
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6075
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6083
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6094
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6104
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6108
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6114
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6118
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6128
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6132
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6136
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6140
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6146
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6152
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6163
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6167
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6173
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6179
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6183
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6189
		{
			yyVAL.str = yyDollar[1].str
		}
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6196
		{
			yyVAL.str = yyDollar[2].str
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6202
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6208
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6212
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6216
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6220
		{
			yyVAL.str = tree.JOIN_TYPE_CENTROIDX + ":" + yyDollar[2].str
		}
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6226
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6230
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6236
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6240
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6246
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6250
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6256
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6260
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6270
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6283
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6289
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6295
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6309
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6320
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6327
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6331
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6337
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6347
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6351
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6355
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6360
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6364
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6368
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6372
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6377
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6381
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6385
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6389
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6393
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6398
		{
			yyVAL.str = ""
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6402
		{
			yyVAL.str = yyDollar[1].str
		}
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6406
		{
			yyVAL.str = yyDollar[2].str
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6412
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6416
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6421
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6425
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6429
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6433
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6437
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6443
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1011:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6485
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6498
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6504
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1014:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6510
		{
			yyLOCAL = tree.NewCreateProcedure(
				yyDollar[2].sourceOptionalUnion(), yyDollar[4].procNameUnion(), yyDollar[6].procArgsUnion(), yyDollar[8].str, yyDollar[9].str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6518
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6523
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6530
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6537
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6541
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6547
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6553
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6558
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6562
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6566
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6570
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6575
		{
			yyVAL.str = "sql"
		}
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6579
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1029:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6586
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6619
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6624
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6631
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6638
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6642
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6648
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6654
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6658
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6662
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6668
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6674
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6680
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6684
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6690
		{
			yyVAL.str = ""
		}
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6697
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1047:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6703
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6718
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6735
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6752
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6756
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6762
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6766
		{
			yyVAL.str = "DEFINER = "
		}
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6770
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6775
		{
			yyVAL.str = ""
		}
	case 1056:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6779
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6793
		{
			yyVAL.str = ""
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6801
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6807
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6812
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6818
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6831
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6836
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6841
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6847
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6854
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6861
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6868
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6875
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6883
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6889
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6896
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6903
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6911
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6917
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6926
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6943
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6959
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6978
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6984
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6993
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7011
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7017
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7024
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7032
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7038
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7046
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7052
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7060
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7066
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7075
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7079
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7084
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7088
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7095
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7100
		{
			yyVAL.str = ""
		}
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7104
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1105:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7110
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7123
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7134
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7138
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7144
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7150
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7156
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7163
		{
			yyVAL.str = ""
		}
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7167
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7172
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7176
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7182
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7190
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7198
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7206
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = &tree.DropPitr{
				IfExists: ifExists,
				Name:     name,
				Internal: yyDollar[5].boolValUnion(),
			}

		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7219
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7224
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7236
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7247
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7356
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7360
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7366
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7379
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7383
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7389
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7402
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7406
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7410
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7415
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7419
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7425
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7432
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7438
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7447
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7454
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7465
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7469
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7475
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7484
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7488
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7492
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7497
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7501
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7505
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7509
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7515
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7546
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7550
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				} else if opt2.HnswM > 0 {
					opt1.HnswM = opt2.HnswM
				} else if opt2.HnswEfConstruction > 0 {
					opt1.HnswEfConstruction = opt2.HnswEfConstruction
				} else if opt2.HnswEfSearch > 0 {
					opt1.HnswEfSearch = opt2.HnswEfSearch
				} else if opt2.Async {
					opt1.Async = opt2.Async
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7584
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7590
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7602
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7608
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7614
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7620
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7626
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7632
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("M should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswM = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7643
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_CONSTRUCTION should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfConstruction = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7654
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_SEARCH should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfSearch = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7665
		{
			io := tree.NewIndexOption()
			io.Async = true
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7674
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7678
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7684
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7698
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7712
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7716
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7720
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7724
		{
			yyLOCAL = tree.INDEX_TYPE_HNSW
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7728
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7732
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7736
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7740
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7746
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7760
		{
			var t = tree.NewCloneDatabase()
			t.DstDatabase = tree.Identifier(yyDollar[4].str)
			t.SrcDatabase = tree.Identifier(yyDollar[6].str)
			t.AtTsExpr = yyDollar[7].atTimeStampUnion()
			t.ToAccountOpt = yyDollar[8].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7774
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7785
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7789
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7794
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7798
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7803
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7807
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7813
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7817
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7823
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7832
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7841
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7847
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7851
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7857
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7868
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7874
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7892
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7910
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7928
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7944
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7948
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7955
		{
			t := tree.NewDataBranchCreateTable()
			t.CreateTable.Table = *yyDollar[5].tableNameUnion()
			t.CreateTable.LikeTableName = *yyDollar[7].tableNameUnion()
			t.CreateTable.IsAsLike = true
			t.SrcTable = *yyDollar[7].tableNameUnion()
			t.ToAccountOpt = yyDollar[8].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7965
		{
			t := tree.NewDataBranchCreateDatabase()
			t.DstDatabase = tree.Identifier(yyDollar[4].str)
			t.SrcDatabase = tree.Identifier(yyDollar[6].str)
			t.AtTsExpr = yyDollar[8].atTimeStampUnion()
			t.ToAccountOpt = yyDollar[9].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7974
		{
			t := tree.NewDataBranchDeleteTable()
			t.TableName = *yyDollar[5].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7980
		{
			t := tree.NewDataBranchDeleteDatabase()
			t.DatabaseName = tree.Identifier(yyDollar[5].str)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7986
		{
			t := tree.NewSnapshotDiff()
			t.TargetTable = *yyDollar[3].tableNameUnion()
			t.BaseTable = *yyDollar[5].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7993
		{
			t := tree.NewSnapshotMerge()
			t.SrcTable = *yyDollar[3].tableNameUnion()
			t.DstTable = *yyDollar[5].tableNameUnion()
			t.ConflictOpt = yyDollar[6].conflictOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.DiffAsOpt
//line mysql_sql.y:8003
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.DiffAsOpt
//line mysql_sql.y:8007
		{
			yyLOCAL = &tree.DiffAsOpt{
				As: *yyDollar[2].tableNameUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ConflictOpt
//line mysql_sql.y:8014
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConflictOpt
//line mysql_sql.y:8018
		{
			yyLOCAL = &tree.ConflictOpt{
				Opt: tree.CONFLICT_FAIL,
			}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConflictOpt
//line mysql_sql.y:8024
		{
			yyLOCAL = &tree.ConflictOpt{
				Opt: tree.CONFLICT_SKIP,
			}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConflictOpt
//line mysql_sql.y:8030
		{
			yyLOCAL = &tree.ConflictOpt{
				Opt: tree.CONFLICT_ACCEPT,
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ToAccountOpt
//line mysql_sql.y:8038
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ToAccountOpt
//line mysql_sql.y:8042
		{
			yyLOCAL = &tree.ToAccountOpt{
				AccountName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8050
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8062
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8071
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8083
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8093
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8103
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8114
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8124
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8135
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8143
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8152
		{
			t := tree.NewCloneTable()
			t.CreateTable.Table = *yyDollar[5].tableNameUnion()
			t.CreateTable.LikeTableName = *yyDollar[7].tableNameUnion()
			t.CreateTable.IsAsLike = true
			t.SrcTable = *yyDollar[7].tableNameUnion()
			t.ToAccountOpt = yyDollar[8].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8164
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8171
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8181
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8194
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8202
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8211
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8220
		{
			yyVAL.str = ""
		}
	case 1236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:8224
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8230
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8234
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8239
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8243
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8250
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8262
		{
			yyVAL.str = ""
		}
	case 1243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8266
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1244:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8272
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8293
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8307
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8311
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8315
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8321
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8325
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8332
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8339
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8346
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8353
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8357
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8361
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8365
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8369
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8376
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8383
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8387
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8394
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8401
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8405
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8411
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8417
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8421
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8428
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8435
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8442
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8449
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8453
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8458
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8462
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8466
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8471
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8475
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8488
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8492
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8500
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8508
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8512
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8524
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8528
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8534
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8538
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8544
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8557
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8571
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8575
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8581
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8585
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8591
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8600
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8611
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8615
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8620
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8624
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8630
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8635
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8643
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8647
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8657
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8661
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8672
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8680
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8688
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8696
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8707
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8716
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8726
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8736
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8740
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8745
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8749
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8755
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8759
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8765
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8774
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8788
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8794
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8798
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8804
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8813
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8823
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8827
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8833
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8837
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8841
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8847
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8851
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8855
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8859
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8863
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8867
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8871
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8876
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8880
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8884
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8888
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8892
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8896
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8900
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8904
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8908
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8912
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8916
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8920
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8924
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8930
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8936
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8940
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8944
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8948
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8952
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8958
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8964
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8970
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8976
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8982
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8988
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8992
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8996
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:9000
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:9007
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:9011
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:9017
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9028
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9032
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9038
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9042
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9046
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9050
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9054
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9058
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:9072
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:9076
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:9085
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:9091
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9099
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9103
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9110
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9119
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9127
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9134
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9142
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9149
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9153
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9159
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9163
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9167
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9173
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9177
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9183
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9196
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9209
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9250
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9292
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9306
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9312
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9325
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9338
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9351
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9364
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9379
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9389
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9395
		{
			yyVAL.str = ""
		}
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9399
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9409
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9415
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9421
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9443
		{
			yyVAL.str = ""
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9447
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9453
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9459
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9463
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9468
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9476
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9480
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9484
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9488
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9494
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9500
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9504
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9509
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9516
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9520
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9526
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9530
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9536
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9540
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9544
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9548
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9552
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9556
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9561
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9565
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9569
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9573
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9577
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9581
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9585
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9589
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9593
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9597
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9611
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9615
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9619
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9623
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9627
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9631
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9637
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9641
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9646
		{
			yyVAL.str = ""
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9650
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9656
		{
			yyVAL.str = ""
		}
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9660
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1479:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9666
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9683
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9690
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9697
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9704
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9711
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9720
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9726
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9732
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9736
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9740
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9744
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9748
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9753
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9760
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9764
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9768
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9773
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9777
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9781
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9785
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9789
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9794
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9798
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9803
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9807
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9823
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9829
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9833
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9837
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9841
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9845
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9849
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9853
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9857
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9861
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9865
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9869
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9873
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9877
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9883
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9887
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9891
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9895
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9899
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9903
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9907
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9911
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9915
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9919
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9961
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9965
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9969
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9974
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9982
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9986
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9990
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9994
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9998
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10008
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10012
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10016
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10020
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10024
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10028
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10032
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10036
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10049
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10055
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10064
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10073
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10084
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10094
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10104
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10113
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10123
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10133
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10143
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10152
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10162
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10166
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10171
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10175
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10181
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10185
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:10191
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10200
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10212
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10229
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10246
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10259
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10272
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10284
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10298
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10313
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10328
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10345
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10360
		{
		}
	case 1588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10367
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10371
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10375
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10381
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10385
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10389
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10393
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10399
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10403
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10407
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10413
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10421
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10431
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10435
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10442
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10447
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10451
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10456
		{
			yyVAL.str = ","
		}
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10460
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10465
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10469
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1609:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10474
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10481
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10507
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10519
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10531
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10542
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10553
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10564
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10574
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10584
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10595
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10606
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10617
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10628
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10639
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10650
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10661
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10672
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10683
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10694
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10705
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10716
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10727
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10738
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10749
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10773
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10782
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10791
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10800
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10809
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10820
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10829
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10839
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10848
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10857
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10866
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10875
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10887
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10898
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10911
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10923
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10946
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10982
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10995
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11008
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11020
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11029
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11037
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11045
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11058
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11067
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11078
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11089
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11098
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11110
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11120
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11130
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11139
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11150
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11159
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11169
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11178
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11187
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11197
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11201
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11207
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11211
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11230
		{
		}
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:11232
		{
		}
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11274
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11286
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11290
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11294
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11300
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11305
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11309
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11315
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11319
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11325
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11329
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11336
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11340
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11344
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11353
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11357
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11361
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11366
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11370
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11376
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11380
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11384
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11388
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11392
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11396
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11400
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11404
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11408
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11412
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11420
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11424
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11428
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11432
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11436
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11440
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11444
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11448
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11452
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11456
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11462
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11466
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11472
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11476
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11483
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11487
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11491
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11497
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11501
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11505
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11509
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11513
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11517
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11521
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11527
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11531
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11535
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11539
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11545
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11558
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11563
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11569
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11573
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11586
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11591
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11595
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11599
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11603
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11607
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11614
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11618
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11622
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11626
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11633
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11644
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11649
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11655
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11667
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11679
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11691
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11704
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11717
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11730
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11743
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11756
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11769
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11782
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11795
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11808
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11821
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11836
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11863
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11905
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11941
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11977
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11994
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12006
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12026
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12046
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12066
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12082
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12095
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12108
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12121
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12134
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12146
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12158
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12170
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12182
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12194
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12206
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12218
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12230
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12242
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1874:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12254
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12267
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1876:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12280
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1877:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12293
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12306
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1879:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12321
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1880:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12329
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1881:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12338
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12348
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12371
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1884:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12376
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1885:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12382
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1887:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12389
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1888:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12393
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12398
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12402
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12408
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1892:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12414
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12421
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1894:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12428
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1895:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12437
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12444
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1897:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12451
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1898:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12460
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12464
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12468
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12474
		{
		}
	case 1902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12476
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1906:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12486
		{
			yyVAL.str = ""
		}
	case 1907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12490
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
