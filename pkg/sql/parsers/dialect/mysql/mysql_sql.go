// Code generated by goyacc -o mysql_sql.go -c mysql mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const DISTINCTROW = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const SUBQUERY_AS_EXPR = 57394
const LOWER_THAN_STRING = 57395
const ID = 57396
const AT_ID = 57397
const AT_AT_ID = 57398
const STRING = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const INTEGRAL = 57404
const HEX = 57405
const BIT_LITERAL = 57406
const FLOAT = 57407
const HEXNUM = 57408
const NULL = 57409
const TRUE = 57410
const FALSE = 57411
const LOWER_THAN_CHARSET = 57412
const CHARSET = 57413
const UNIQUE = 57414
const KEY = 57415
const OR = 57416
const PIPE_CONCAT = 57417
const XOR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const LE = 57427
const GE = 57428
const NE = 57429
const NULL_SAFE_EQUAL = 57430
const IS = 57431
const LIKE = 57432
const REGEXP = 57433
const IN = 57434
const ASSIGNMENT = 57435
const SHIFT_LEFT = 57436
const SHIFT_RIGHT = 57437
const DIV = 57438
const MOD = 57439
const UNARY = 57440
const COLLATE = 57441
const BINARY = 57442
const UNDERSCORE_BINARY = 57443
const INTERVAL = 57444
const BEGIN = 57445
const START = 57446
const TRANSACTION = 57447
const COMMIT = 57448
const ROLLBACK = 57449
const WORK = 57450
const CONSISTENT = 57451
const SNAPSHOT = 57452
const CHAIN = 57453
const NO = 57454
const RELEASE = 57455
const BIT = 57456
const TINYINT = 57457
const SMALLINT = 57458
const MEDIUMINT = 57459
const INT = 57460
const INTEGER = 57461
const BIGINT = 57462
const INTNUM = 57463
const REAL = 57464
const DOUBLE = 57465
const FLOAT_TYPE = 57466
const DECIMAL = 57467
const NUMERIC = 57468
const DECIMAL_VALUE = 57469
const TIME = 57470
const TIMESTAMP = 57471
const DATETIME = 57472
const YEAR = 57473
const CHAR = 57474
const VARCHAR = 57475
const BOOL = 57476
const CHARACTER = 57477
const VARBINARY = 57478
const NCHAR = 57479
const TEXT = 57480
const TINYTEXT = 57481
const MEDIUMTEXT = 57482
const LONGTEXT = 57483
const BLOB = 57484
const TINYBLOB = 57485
const MEDIUMBLOB = 57486
const LONGBLOB = 57487
const JSON = 57488
const ENUM = 57489
const GEOMETRY = 57490
const POINT = 57491
const LINESTRING = 57492
const POLYGON = 57493
const GEOMETRYCOLLECTION = 57494
const MULTIPOINT = 57495
const MULTILINESTRING = 57496
const MULTIPOLYGON = 57497
const INT1 = 57498
const INT2 = 57499
const INT3 = 57500
const INT4 = 57501
const INT8 = 57502
const SQL_SMALL_RESULT = 57503
const SQL_BIG_RESULT = 57504
const SQL_BUFFER_RESULT = 57505
const CREATE = 57506
const ALTER = 57507
const DROP = 57508
const RENAME = 57509
const ANALYZE = 57510
const ADD = 57511
const SCHEMA = 57512
const TABLE = 57513
const INDEX = 57514
const VIEW = 57515
const TO = 57516
const IGNORE = 57517
const IF = 57518
const PRIMARY = 57519
const COLUMN = 57520
const CONSTRAINT = 57521
const SPATIAL = 57522
const FULLTEXT = 57523
const FOREIGN = 57524
const KEY_BLOCK_SIZE = 57525
const SHOW = 57526
const DESCRIBE = 57527
const EXPLAIN = 57528
const DATE = 57529
const ESCAPE = 57530
const REPAIR = 57531
const OPTIMIZE = 57532
const TRUNCATE = 57533
const MAXVALUE = 57534
const PARTITION = 57535
const REORGANIZE = 57536
const LESS = 57537
const THAN = 57538
const PROCEDURE = 57539
const TRIGGER = 57540
const STATUS = 57541
const VARIABLES = 57542
const ROLE = 57543
const PROXY = 57544
const AVG_ROW_LENGTH = 57545
const STORAGE = 57546
const DISK = 57547
const MEMORY = 57548
const CHECKSUM = 57549
const COMPRESSION = 57550
const DATA = 57551
const DIRECTORY = 57552
const DELAY_KEY_WRITE = 57553
const ENCRYPTION = 57554
const ENGINE = 57555
const MAX_ROWS = 57556
const MIN_ROWS = 57557
const PACK_KEYS = 57558
const ROW_FORMAT = 57559
const STATS_AUTO_RECALC = 57560
const STATS_PERSISTENT = 57561
const STATS_SAMPLE_PAGES = 57562
const DYNAMIC = 57563
const COMPRESSED = 57564
const REDUNDANT = 57565
const COMPACT = 57566
const FIXED = 57567
const COLUMN_FORMAT = 57568
const AUTO_RANDOM = 57569
const RESTRICT = 57570
const CASCADE = 57571
const ACTION = 57572
const PARTIAL = 57573
const SIMPLE = 57574
const CHECK = 57575
const ENFORCED = 57576
const RANGE = 57577
const LIST = 57578
const ALGORITHM = 57579
const LINEAR = 57580
const PARTITIONS = 57581
const SUBPARTITION = 57582
const SUBPARTITIONS = 57583
const TYPE = 57584
const ANY = 57585
const SOME = 57586
const PROPERTIES = 57587
const PARSER = 57588
const VISIBLE = 57589
const INVISIBLE = 57590
const BTREE = 57591
const HASH = 57592
const RTREE = 57593
const BSI = 57594
const ZONEMAP = 57595
const LEADING = 57596
const BOTH = 57597
const TRAILING = 57598
const UNKNOWN = 57599
const EXPIRE = 57600
const ACCOUNT = 57601
const UNLOCK = 57602
const DAY = 57603
const NEVER = 57604
const SECOND = 57605
const ASCII = 57606
const COALESCE = 57607
const COLLATION = 57608
const HOUR = 57609
const MICROSECOND = 57610
const MINUTE = 57611
const MONTH = 57612
const QUARTER = 57613
const REPEAT = 57614
const REVERSE = 57615
const ROW_COUNT = 57616
const WEEK = 57617
const REVOKE = 57618
const FUNCTION = 57619
const PRIVILEGES = 57620
const TABLESPACE = 57621
const EXECUTE = 57622
const SUPER = 57623
const GRANT = 57624
const OPTION = 57625
const REFERENCES = 57626
const REPLICATION = 57627
const SLAVE = 57628
const CLIENT = 57629
const USAGE = 57630
const RELOAD = 57631
const FILE = 57632
const TEMPORARY = 57633
const ROUTINE = 57634
const EVENT = 57635
const SHUTDOWN = 57636
const NULLX = 57637
const AUTO_INCREMENT = 57638
const APPROXNUM = 57639
const SIGNED = 57640
const UNSIGNED = 57641
const ZEROFILL = 57642
const USER = 57643
const IDENTIFIED = 57644
const CIPHER = 57645
const ISSUER = 57646
const X509 = 57647
const SUBJECT = 57648
const SAN = 57649
const REQUIRE = 57650
const SSL = 57651
const NONE = 57652
const PASSWORD = 57653
const MAX_QUERIES_PER_HOUR = 57654
const MAX_UPDATES_PER_HOUR = 57655
const MAX_CONNECTIONS_PER_HOUR = 57656
const MAX_USER_CONNECTIONS = 57657
const FORMAT = 57658
const VERBOSE = 57659
const CONNECTION = 57660
const LOAD = 57661
const INFILE = 57662
const TERMINATED = 57663
const OPTIONALLY = 57664
const ENCLOSED = 57665
const ESCAPED = 57666
const STARTING = 57667
const LINES = 57668
const DATABASES = 57669
const TABLES = 57670
const EXTENDED = 57671
const FULL = 57672
const PROCESSLIST = 57673
const FIELDS = 57674
const COLUMNS = 57675
const OPEN = 57676
const ERRORS = 57677
const WARNINGS = 57678
const INDEXES = 57679
const NAMES = 57680
const GLOBAL = 57681
const SESSION = 57682
const ISOLATION = 57683
const LEVEL = 57684
const READ = 57685
const WRITE = 57686
const ONLY = 57687
const REPEATABLE = 57688
const COMMITTED = 57689
const UNCOMMITTED = 57690
const SERIALIZABLE = 57691
const LOCAL = 57692
const EXCEPT = 57693
const CURRENT_TIMESTAMP = 57694
const DATABASE = 57695
const CURRENT_TIME = 57696
const LOCALTIME = 57697
const LOCALTIMESTAMP = 57698
const UTC_DATE = 57699
const UTC_TIME = 57700
const UTC_TIMESTAMP = 57701
const REPLACE = 57702
const CONVERT = 57703
const SEPARATOR = 57704
const CURRENT_DATE = 57705
const CURRENT_USER = 57706
const CURRENT_ROLE = 57707
const SECOND_MICROSECOND = 57708
const MINUTE_MICROSECOND = 57709
const MINUTE_SECOND = 57710
const HOUR_MICROSECOND = 57711
const HOUR_SECOND = 57712
const HOUR_MINUTE = 57713
const DAY_MICROSECOND = 57714
const DAY_SECOND = 57715
const DAY_MINUTE = 57716
const DAY_HOUR = 57717
const YEAR_MONTH = 57718
const SQL_TSI_HOUR = 57719
const SQL_TSI_DAY = 57720
const SQL_TSI_WEEK = 57721
const SQL_TSI_MONTH = 57722
const SQL_TSI_QUARTER = 57723
const SQL_TSI_YEAR = 57724
const SQL_TSI_SECOND = 57725
const SQL_TSI_MINUTE = 57726
const RECURSIVE = 57727
const CONFIG = 57728
const MATCH = 57729
const AGAINST = 57730
const BOOLEAN = 57731
const LANGUAGE = 57732
const WITH = 57733
const QUERY = 57734
const EXPANSION = 57735
const ADDDATE = 57736
const BIT_AND = 57737
const BIT_OR = 57738
const BIT_XOR = 57739
const CAST = 57740
const COUNT = 57741
const APPROX_COUNT_DISTINCT = 57742
const APPROX_PERCENTILE = 57743
const CURDATE = 57744
const CURTIME = 57745
const DATE_ADD = 57746
const DATE_SUB = 57747
const EXTRACT = 57748
const GROUP_CONCAT = 57749
const MAX = 57750
const MID = 57751
const MIN = 57752
const NOW = 57753
const POSITION = 57754
const SESSION_USER = 57755
const STD = 57756
const STDDEV = 57757
const STDDEV_POP = 57758
const STDDEV_SAMP = 57759
const SUBDATE = 57760
const SUBSTR = 57761
const SUBSTRING = 57762
const SUM = 57763
const SYSDATE = 57764
const SYSTEM_USER = 57765
const TRANSLATE = 57766
const TRIM = 57767
const VARIANCE = 57768
const VAR_POP = 57769
const VAR_SAMP = 57770
const AVG = 57771
const ROW = 57772
const OUTFILE = 57773
const HEADER = 57774
const MAX_FILE_SIZE = 57775
const FORCE_QUOTE = 57776
const UNUSED = 57777

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"','",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"TYPE",
	"ANY",
	"SOME",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"EXPIRE",
	"ACCOUNT",
	"UNLOCK",
	"DAY",
	"NEVER",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"LOAD",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"DATABASES",
	"TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"NAMES",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EXCEPT",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"UNUSED",
	"';'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:6519

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	17, 360,
	-2, 341,
	-1, 58,
	189, 508,
	-2, 544,
	-1, 67,
	216, 250,
	217, 250,
	-2, 270,
	-1, 320,
	58, 1322,
	454, 1322,
	-2, 92,
	-1, 339,
	58, 669,
	454, 669,
	-2, 506,
	-1, 340,
	58, 499,
	454, 499,
	-2, 507,
	-1, 346,
	17, 361,
	-2, 324,
	-1, 404,
	89, 1201,
	100, 1201,
	119, 1201,
	-2, 1030,
	-1, 579,
	17, 361,
	-2, 324,
	-1, 601,
	53, 1351,
	-2, 1358,
	-1, 609,
	53, 1352,
	-2, 1366,
	-1, 611,
	53, 1348,
	-2, 1368,
	-1, 612,
	53, 1349,
	-2, 1369,
	-1, 617,
	53, 1350,
	-2, 1375,
	-1, 618,
	53, 1353,
	-2, 1376,
	-1, 619,
	53, 1354,
	-2, 1377,
	-1, 620,
	53, 795,
	-2, 1378,
	-1, 621,
	53, 796,
	-2, 1379,
	-1, 622,
	53, 797,
	-2, 1380,
	-1, 624,
	53, 1355,
	-2, 1382,
	-1, 625,
	53, 814,
	-2, 1383,
	-1, 626,
	53, 813,
	-2, 1384,
	-1, 629,
	53, 1356,
	-2, 1387,
	-1, 630,
	53, 1357,
	-2, 1388,
	-1, 636,
	53, 876,
	-2, 1201,
	-1, 637,
	53, 885,
	-2, 1227,
	-1, 638,
	53, 889,
	-2, 1266,
	-1, 639,
	53, 900,
	-2, 1327,
	-1, 640,
	53, 902,
	-2, 1337,
	-1, 641,
	53, 890,
	-2, 1342,
	-1, 642,
	53, 898,
	-2, 1346,
	-1, 643,
	53, 879,
	-2, 1347,
	-1, 795,
	1, 534,
	55, 534,
	453, 534,
	-2, 541,
	-1, 923,
	17, 360,
	-2, 727,
	-1, 969,
	119, 1040,
	-2, 1038,
	-1, 971,
	119, 448,
	-2, 1035,
	-1, 972,
	119, 449,
	-2, 1036,
	-1, 1166,
	1, 535,
	55, 535,
	453, 535,
	-2, 541,
	-1, 1225,
	53, 943,
	-2, 1344,
	-1, 1226,
	53, 944,
	-2, 1345,
	-1, 1621,
	74, 541,
	115, 541,
	149, 541,
	152, 541,
	-2, 581,
	-1, 1623,
	250, 694,
	-2, 675,
	-1, 1744,
	74, 541,
	115, 541,
	149, 541,
	152, 541,
	-2, 582,
	-1, 1772,
	250, 694,
	-2, 676,
	-1, 2163,
	54, 556,
	55, 556,
	-2, 541,
	-1, 2167,
	54, 556,
	55, 556,
	-2, 541,
	-1, 2179,
	54, 560,
	55, 560,
	-2, 541,
	-1, 2182,
	54, 561,
	55, 561,
	-2, 541,
}

const yyPrivate = 57344

const yyLast = 21918

var yyAct = [...]int{
	785, 1228, 2169, 2167, 2166, 2174, 2140, 646, 2114, 1816,
	774, 2004, 664, 2085, 2129, 1784, 471, 2066, 1980, 2067,
	1740, 1983, 1958, 532, 85, 644, 850, 296, 1615, 1153,
	1814, 1913, 1815, 1806, 566, 467, 307, 1886, 1968, 88,
	1682, 85, 309, 1509, 402, 1773, 1400, 300, 19, 1805,
	341, 341, 1704, 1701, 517, 1505, 833, 1707, 1711, 590,
	84, 1542, 1514, 1698, 1493, 1377, 1521, 1510, 1668, 1159,
	1560, 1549, 951, 1559, 403, 600, 1445, 960, 574, 769,
	420, 966, 857, 645, 85, 969, 961, 952, 1312, 1216,
	1229, 52, 655, 727, 1298, 1407, 302, 826, 3, 522,
	299, 12, 297, 6, 298, 5, 802, 1371, 787, 1533,
	744, 1748, 363, 1167, 770, 1227, 505, 593, 289, 347,
	433, 1242, 804, 346, 1135, 311, 852, 830, 772, 19,
	1126, 890, 292, 1230, 444, 803, 859, 469, 419, 575,
	558, 394, 761, 313, 455, 81, 312, 1831, 1142, 484,
	675, 53, 1736, 1614, 782, 954, 592, 417, 80, 348,
	1138, 80, 2032, 23, 40, 24, 1494, 80, 410, 23,
	40, 24, 1353, 544, 1372, 80, 343, 53, 316, 316,
	430, 303, 12, 2021, 6, 1470, 5, 515, 1360, 80,
	820, 504, 538, 80, 405, 23, 40, 24, 407, 724,
	359, 368, 721, 1363, 78, 76, 381, 80, 76, 815,
	816, 415, 414, 66, 76, 531, 395, 73, 530, 533,
	534, 545, 723, 533, 534, 806, 409, 411, 2054, 2070,
	2071, 777, 53, 499, 406, 41, 76, 2089, 495, 1911,
	76, 413, 1497, 1992, 1995, 542, 1914, 1915, 1916, 1917,
	2052, 1498, 1834, 1499, 76, 1616, 781, 447, 1522, 1523,
	1524, 1525, 1340, 438, 1380, 1378, 1375, 1379, 1381, 1543,
	1374, 1373, 1380, 1378, 827, 1379, 1381, 1138, 1546, 1140,
	382, 1885, 1793, 1792, 486, 497, 498, 1789, 1733, 85,
	437, 496, 485, 1611, 1901, 1693, 2080, 2056, 2031, 436,
	1891, 762, 85, 1689, 2159, 2051, 490, 69, 70, 2175,
	71, 72, 361, 2094, 2006, 1692, 2101, 1413, 1220, 1221,
	1982, 1545, 358, 357, 2029, 1880, 2150, 764, 2069, 1969,
	1970, 1971, 1973, 1972, 491, 1849, 2002, 2003, 451, 2006,
	345, 412, 373, 353, 1848, 2058, 2059, 472, 1219, 1220,
	1221, 1383, 1384, 1385, 1386, 2012, 554, 1875, 493, 1217,
	529, 528, 2034, 2035, 2176, 2170, 518, 2141, 58, 68,
	77, 543, 39, 1361, 539, 1837, 432, 1446, 1990, 1357,
	481, 1189, 1146, 1389, 789, 435, 447, 410, 67, 65,
	64, 341, 494, 416, 1518, 520, 1612, 403, 403, 403,
	476, 516, 341, 341, 1690, 449, 448, 763, 519, 818,
	521, 386, 488, 301, 1709, 1708, 2132, 375, 1398, 420,
	374, 1185, 596, 596, 489, 492, 440, 441, 1187, 1186,
	1526, 1871, 548, 356, 487, 726, 819, 571, 546, 547,
	1184, 817, 383, 352, 53, 53, 411, 384, 2154, 2118,
	841, 741, 1500, 437, 85, 85, 85, 85, 1410, 477,
	388, 387, 745, 524, 1351, 758, 1943, 1350, 1339, 908,
	536, 1333, 1179, 1151, 1120, 736, 737, 871, 729, 722,
	49, 341, 341, 437, 341, 573, 50, 507, 2057, 442,
	1981, 450, 775, 434, 1486, 360, 523, 1390, 559, 510,
	525, 2136, 341, 341, 759, 2127, 2033, 1519, 472, 560,
	526, 1534, 595, 595, 1494, 2133, 553, 501, 341, 316,
	341, 1412, 795, 51, 533, 534, 85, 2016, 578, 580,
	568, 568, 407, 579, 449, 448, 1335, 794, 1488, 810,
	564, 565, 828, 341, 1141, 483, 533, 534, 1161, 1688,
	1876, 1877, 1218, 509, 1191, 341, 403, 577, 341, 740,
	79, 808, 799, 79, 1354, 1691, 1124, 739, 406, 79,
	790, 535, 557, 537, 842, 732, 589, 79, 439, 719,
	1593, 779, 53, 1313, 341, 341, 849, 85, 1487, 420,
	1369, 79, 858, 53, 811, 79, 868, 791, 527, 784,
	1232, 1231, 788, 1137, 853, 792, 373, 797, 757, 79,
	316, 576, 776, 561, 562, 563, 796, 780, 798, 423,
	428, 429, 812, 851, 783, 773, 765, 854, 800, 801,
	807, 2130, 2131, 1515, 1518, 746, 747, 748, 749, 1313,
	1873, 1451, 556, 778, 1872, 793, 864, 1843, 316, 834,
	1305, 925, 1882, 1136, 1881, 834, 834, 844, 583, 584,
	585, 586, 587, 847, 1303, 1304, 1302, 378, 805, 1150,
	1380, 1378, 829, 1379, 1381, 1944, 1946, 1947, 1948, 1945,
	824, 375, 385, 316, 374, 867, 864, 1237, 872, 1672,
	1667, 843, 839, 840, 74, 1433, 845, 825, 865, 866,
	867, 864, 836, 837, 838, 1149, 1582, 1595, 1866, 373,
	848, 1240, 2149, 316, 911, 912, 913, 914, 915, 908,
	846, 1241, 1726, 1954, 958, 958, 963, 855, 865, 866,
	867, 864, 2165, 2146, 926, 927, 928, 929, 2111, 1432,
	924, 410, 2095, 858, 2041, 1988, 971, 1519, 932, 930,
	1154, 1155, 1512, 2148, 1987, 389, 1513, 1516, 1725, 1953,
	898, 865, 866, 867, 864, 934, 1960, 1938, 1741, 972,
	408, 948, 865, 866, 867, 864, 1937, 425, 426, 427,
	865, 866, 867, 864, 375, 1936, 1952, 374, 1933, 1927,
	85, 85, 909, 910, 911, 912, 913, 914, 915, 908,
	923, 1924, 865, 866, 867, 864, 296, 1923, 1517, 1950,
	957, 1832, 1181, 942, 1940, 410, 372, 1825, 1134, 965,
	853, 341, 1951, 1824, 376, 1121, 1156, 1158, 875, 876,
	877, 878, 879, 880, 881, 873, 1823, 1122, 865, 866,
	867, 864, 341, 854, 1420, 1949, 1822, 964, 1821, 1454,
	1939, 407, 1453, 1818, 1678, 1677, 950, 1676, 1675, 1482,
	730, 596, 2090, 85, 2063, 2079, 1118, 970, 2062, 1119,
	1212, 1959, 1214, 2023, 411, 865, 866, 867, 864, 1131,
	2010, 2179, 1182, 2009, 53, 1941, 865, 866, 867, 864,
	1238, 1239, 1934, 1170, 1171, 1172, 1986, 1930, 865, 866,
	867, 864, 1173, 1145, 473, 474, 475, 1168, 1929, 1928,
	1887, 1175, 1868, 1177, 1833, 1401, 948, 1739, 865, 866,
	867, 864, 1737, 1685, 1176, 1531, 1530, 834, 834, 834,
	1174, 1178, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 805, 1322, 1188, 1307, 1308, 316,
	1222, 595, 1529, 1204, 1528, 1208, 1209, 1210, 1211, 1207,
	1148, 1197, 1147, 1198, 1192, 1193, 1194, 944, 905, 1644,
	1196, 1909, 1324, 904, 1561, 731, 2157, 1235, 1205, 370,
	1460, 371, 381, 1416, 1459, 2038, 369, 367, 366, 377,
	1277, 379, 380, 865, 866, 867, 864, 1572, 1569, 1570,
	1571, 1416, 2184, 1566, 1306, 1565, 1564, 1562, 2178, 2177,
	350, 1300, 1144, 2160, 2156, 2155, 2037, 1896, 1233, 1234,
	349, 1236, 2017, 1826, 1314, 1904, 1317, 1272, 1273, 1274,
	1275, 1276, 1144, 2144, 1282, 1283, 1284, 1285, 362, 865,
	866, 867, 864, 1338, 1327, 865, 866, 867, 864, 1144,
	2143, 1316, 1318, 1319, 1903, 1632, 1315, 2117, 2116, 1902,
	582, 1323, 1563, 1325, 1898, 2077, 1898, 2072, 1456, 1727,
	1651, 1655, 1657, 1659, 1661, 1662, 1664, 1724, 1572, 1569,
	1570, 1571, 1723, 1326, 1646, 1647, 1648, 1649, 1630, 1631,
	1652, 1697, 1633, 1621, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1650, 1719, 1200, 2060, 1603, 2147,
	2049, 2048, 1654, 1656, 1658, 1660, 1663, 1898, 2027, 1898,
	2026, 1341, 1898, 2025, 437, 1548, 1718, 865, 866, 867,
	864, 1898, 2024, 745, 865, 866, 867, 864, 1547, 341,
	2015, 2014, 341, 1645, 1463, 437, 1717, 341, 865, 866,
	867, 864, 1366, 1461, 1356, 907, 906, 916, 917, 909,
	910, 911, 912, 913, 914, 915, 908, 1458, 865, 866,
	867, 864, 1601, 1567, 1568, 1457, 1776, 1965, 1966, 1455,
	1395, 1965, 1964, 1592, 1908, 1907, 1906, 1905, 1898, 1897,
	341, 1203, 1606, 1425, 865, 866, 867, 864, 1416, 1587,
	85, 85, 1416, 1573, 1406, 865, 866, 867, 864, 1416,
	1424, 1779, 1422, 1388, 1415, 1345, 1368, 1774, 1346, 1416,
	1423, 1348, 1787, 1788, 1203, 1342, 1358, 1397, 1775, 1337,
	1336, 1321, 1586, 1320, 1344, 760, 1403, 1404, 1421, 581,
	1364, 1365, 1343, 788, 1331, 1330, 407, 1203, 1202, 19,
	1144, 1143, 2135, 1352, 865, 866, 867, 864, 862, 1585,
	1416, 1367, 1780, 734, 733, 1328, 1622, 1391, 1138, 1399,
	1355, 1584, 728, 1604, 480, 1392, 1409, 1393, 1168, 481,
	1387, 865, 866, 867, 864, 1394, 1583, 500, 478, 1402,
	1396, 479, 479, 865, 866, 867, 864, 1334, 1310, 1200,
	1405, 860, 12, 1440, 6, 1152, 5, 1411, 865, 866,
	867, 864, 588, 555, 1123, 2180, 1414, 481, 2126, 2120,
	2102, 1417, 2099, 80, 1418, 1419, 2097, 2040, 1978, 1963,
	1443, 1444, 958, 1961, 1474, 958, 1956, 1579, 1477, 1918,
	1700, 1786, 1894, 1511, 1893, 1653, 1892, 1889, 858, 1879,
	341, 1864, 53, 1705, 341, 341, 1480, 1800, 341, 865,
	866, 867, 864, 1427, 1428, 1429, 1430, 1431, 1782, 1435,
	76, 437, 1799, 1436, 1437, 1438, 1439, 1702, 1471, 1481,
	1508, 591, 1890, 85, 1578, 1712, 1469, 1442, 1715, 1680,
	1781, 1783, 1476, 410, 1673, 1300, 1301, 1441, 76, 1370,
	1450, 1448, 1347, 1329, 1452, 1473, 865, 866, 867, 864,
	85, 1553, 1475, 1201, 1190, 1183, 1466, 1464, 1472, 1532,
	834, 1478, 1483, 1465, 949, 1479, 834, 947, 946, 1485,
	1484, 945, 1164, 943, 1577, 891, 940, 1492, 939, 937,
	936, 935, 1527, 933, 903, 902, 901, 919, 1789, 922,
	900, 899, 923, 897, 896, 341, 865, 866, 867, 864,
	1777, 341, 895, 920, 921, 918, 894, 907, 906, 916,
	917, 909, 910, 911, 912, 913, 914, 915, 908, 893,
	892, 53, 1489, 1491, 889, 888, 1537, 1538, 1600, 1597,
	887, 341, 886, 885, 1539, 1599, 884, 883, 882, 1535,
	1536, 1553, 742, 85, 725, 482, 1552, 1555, 1127, 1128,
	310, 2107, 1666, 2105, 2068, 1382, 1199, 1574, 1130, 1588,
	502, 754, 1133, 1591, 1580, 1581, 755, 1596, 752, 1132,
	1590, 751, 1576, 753, 341, 750, 341, 1602, 2164, 1620,
	1332, 1575, 1594, 1605, 2082, 541, 540, 1598, 1558, 1619,
	1169, 1154, 1155, 1696, 865, 866, 867, 864, 1495, 506,
	1608, 342, 1610, 865, 866, 867, 864, 1609, 1681, 1670,
	865, 866, 867, 864, 1502, 1162, 1669, 1665, 1669, 1629,
	814, 1835, 1557, 568, 1671, 1501, 856, 1674, 756, 568,
	461, 462, 1679, 916, 917, 909, 910, 911, 912, 913,
	914, 915, 908, 1687, 865, 866, 867, 864, 465, 341,
	341, 1117, 1556, 85, 1232, 1231, 512, 513, 508, 1607,
	1309, 2121, 2045, 437, 1745, 728, 1710, 2043, 1703, 1713,
	1706, 1716, 1508, 1686, 865, 866, 867, 864, 1997, 1996,
	1994, 1695, 865, 866, 867, 864, 1921, 1919, 1738, 1734,
	1694, 1618, 53, 457, 460, 461, 462, 458, 1617, 459,
	463, 1729, 568, 349, 1683, 1721, 1551, 1790, 1807, 1809,
	511, 1807, 1807, 1720, 1550, 1732, 1408, 452, 1770, 728,
	1742, 437, 2109, 2108, 1795, 1796, 1722, 457, 460, 461,
	462, 458, 1794, 459, 463, 834, 1797, 1798, 1426, 1349,
	1802, 1803, 1808, 288, 350, 457, 460, 461, 462, 458,
	1801, 459, 463, 1804, 349, 2108, 2109, 464, 364, 1,
	1810, 1811, 1278, 514, 738, 422, 446, 1812, 735, 445,
	443, 75, 1311, 1243, 676, 953, 959, 1730, 1731, 1957,
	2081, 1820, 2113, 2039, 2084, 663, 647, 1839, 1989, 1496,
	1910, 1991, 1912, 1362, 1828, 1359, 503, 1467, 1829, 1468,
	688, 679, 938, 681, 1813, 720, 424, 678, 1819, 1544,
	351, 421, 326, 365, 325, 329, 321, 1884, 1613, 1791,
	1714, 341, 1699, 2173, 2163, 2139, 317, 2119, 2005, 2158,
	85, 2050, 2100, 1842, 2093, 2001, 1836, 336, 314, 821,
	549, 392, 1867, 1979, 743, 1520, 1376, 1160, 1139, 771,
	315, 2030, 1962, 1809, 354, 1163, 1790, 1827, 1865, 355,
	1166, 1869, 1165, 1223, 874, 1299, 1883, 906, 916, 917,
	909, 910, 911, 912, 913, 914, 915, 908, 1888, 941,
	931, 1922, 598, 1449, 654, 648, 1895, 1541, 1540, 1785,
	809, 26, 466, 863, 967, 677, 1840, 1841, 87, 1844,
	1845, 1846, 1847, 1955, 1180, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 968,
	1899, 1998, 1830, 1920, 2086, 662, 661, 660, 1935, 659,
	437, 456, 472, 437, 437, 437, 454, 453, 306, 437,
	305, 861, 2065, 2064, 2019, 2020, 1735, 1878, 1900, 1683,
	1942, 1874, 1870, 2011, 1744, 1743, 1771, 1772, 1778, 1999,
	1967, 1628, 1624, 1975, 1976, 1977, 341, 341, 1626, 1985,
	1974, 1984, 1627, 1625, 1623, 1506, 1507, 1504, 1503, 1129,
	2000, 1125, 955, 962, 1993, 431, 786, 319, 318, 322,
	2124, 82, 1925, 1926, 304, 324, 1206, 85, 1931, 1932,
	2007, 2008, 11, 18, 437, 17, 16, 328, 48, 47,
	46, 45, 15, 8, 44, 43, 42, 14, 13, 437,
	38, 766, 36, 2013, 35, 34, 53, 33, 32, 31,
	30, 37, 29, 851, 2022, 28, 907, 906, 916, 917,
	909, 910, 911, 912, 913, 914, 915, 908, 27, 2028,
	9, 57, 56, 55, 54, 2044, 2036, 2046, 2047, 20,
	2042, 21, 22, 63, 62, 61, 2053, 2055, 60, 59,
	25, 10, 7, 4, 2, 0, 0, 0, 2061, 0,
	0, 2088, 0, 0, 0, 0, 2073, 2074, 2075, 2076,
	2092, 0, 2018, 2087, 568, 568, 0, 0, 0, 0,
	0, 0, 0, 323, 327, 767, 2091, 331, 768, 0,
	0, 333, 334, 335, 0, 0, 337, 338, 2096, 0,
	2098, 0, 2103, 0, 0, 2106, 2104, 0, 0, 0,
	2115, 0, 0, 2110, 0, 0, 0, 2112, 437, 0,
	437, 0, 0, 0, 0, 0, 0, 775, 2123, 775,
	2125, 0, 0, 0, 0, 0, 0, 0, 2088, 2138,
	0, 0, 0, 0, 2134, 0, 0, 437, 2128, 0,
	2087, 2137, 0, 2142, 0, 0, 775, 2145, 0, 0,
	0, 2078, 0, 2115, 2151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2161, 0, 0, 0, 0,
	0, 0, 0, 2162, 0, 0, 0, 0, 0, 0,
	2172, 0, 2171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2183, 2182, 2181, 2172, 0, 0, 0, 0,
	0, 0, 0, 1080, 1067, 0, 1030, 1082, 1004, 1019,
	1090, 1020, 1021, 1055, 983, 1039, 212, 1017, 975, 1007,
	1008, 977, 1014, 978, 1005, 1032, 156, 1003, 1070, 1042,
	182, 1088, 0, 0, 242, 196, 0, 2153, 1035, 1072,
	1037, 1060, 1029, 1056, 991, 1049, 1083, 1018, 1053, 1084,
	0, 0, 0, 0, 0, 473, 474, 475, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 1052, 1077,
	1016, 0, 141, 1081, 1036, 1054, 0, 0, 976, 1050,
	0, 981, 984, 1089, 1075, 1011, 1012, 0, 0, 0,
	0, 0, 0, 0, 1033, 1038, 1057, 1026, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1009, 0, 1046,
	0, 0, 0, 986, 982, 0, 1031, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 0, 1079, 286, 150, 277, 985, 269, 134,
	1116, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 1100, 1101, 1102, 1103, 1104, 1112, 1113, 0, 990,
	0, 1010, 1058, 0, 974, 1066, 1073, 1028, 271, 1076,
	1025, 1024, 1107, 0, 1106, 246, 1108, 1109, 181, 1071,
	1006, 1015, 287, 1013, 232, 214, 1078, 1045, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 1105, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	0, 1115, 283, 163, 973, 266, 0, 210, 1068, 979,
	989, 987, 1022, 1047, 1048, 206, 282, 1062, 1065, 1063,
	1091, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 980, 0, 243, 264, 276, 267, 1023, 997, 1034,
	275, 1000, 998, 1061, 999, 1051, 1093, 200, 201, 202,
	203, 167, 0, 143, 1043, 1027, 1094, 1095, 1096, 1097,
	1098, 1099, 1002, 1074, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 207, 174, 240, 179, 185, 228, 272,
	213, 233, 140, 263, 241, 189, 164, 996, 1001, 995,
	1040, 1041, 1085, 1086, 1087, 1059, 988, 1069, 992, 994,
	993, 907, 906, 916, 917, 909, 910, 911, 912, 913,
	914, 915, 908, 0, 0, 0, 0, 0, 0, 0,
	1064, 0, 1044, 125, 0, 183, 1092, 225, 161, 684,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 0, 0, 0, 656, 0, 0, 0, 156,
	0, 0, 0, 182, 0, 0, 0, 242, 196, 0,
	2122, 0, 0, 698, 704, 1110, 1111, 279, 280, 281,
	265, 0, 0, 0, 649, 0, 0, 0, 599, 690,
	689, 665, 0, 0, 0, 138, 666, 0, 673, 667,
	671, 670, 668, 669, 0, 636, 0, 0, 0, 0,
	0, 0, 597, 653, 0, 657, 907, 906, 916, 917,
	909, 910, 911, 912, 913, 914, 915, 908, 0, 0,
	0, 0, 0, 0, 0, 0, 650, 651, 0, 0,
	0, 0, 685, 0, 652, 0, 0, 687, 0, 674,
	0, 130, 247, 261, 139, 238, 274, 144, 245, 135,
	211, 234, 132, 259, 244, 193, 176, 177, 131, 0,
	229, 154, 168, 151, 209, 672, 683, 642, 150, 640,
	682, 269, 134, 1589, 268, 208, 256, 260, 194, 188,
	133, 258, 192, 187, 180, 158, 172, 221, 186, 222,
	173, 198, 197, 199, 907, 906, 916, 917, 909, 910,
	911, 912, 913, 914, 915, 908, 0, 0, 680, 0,
	0, 271, 0, 0, 697, 0, 0, 0, 246, 0,
	0, 181, 0, 0, 0, 643, 0, 232, 214, 707,
	0, 219, 230, 184, 257, 223, 262, 248, 270, 226,
	224, 126, 249, 153, 195, 136, 137, 149, 155, 157,
	159, 160, 204, 205, 217, 237, 250, 251, 252, 152,
	145, 231, 146, 170, 147, 127, 239, 148, 128, 218,
	255, 0, 166, 227, 191, 129, 190, 220, 254, 253,
	278, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1280, 1279, 1281, 283, 163, 0, 266, 695,
	210, 706, 691, 692, 693, 696, 699, 700, 638, 641,
	701, 703, 705, 708, 235, 0, 0, 0, 0, 0,
	175, 216, 0, 236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 264, 276, 639,
	0, 0, 0, 275, 0, 0, 0, 0, 0, 686,
	200, 201, 202, 203, 637, 0, 143, 0, 1728, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 169, 0,
	171, 142, 215, 165, 273, 178, 207, 174, 240, 179,
	185, 228, 272, 213, 233, 140, 263, 241, 189, 164,
	714, 694, 713, 715, 716, 712, 717, 718, 702, 658,
	0, 710, 709, 711, 907, 906, 916, 917, 909, 910,
	911, 912, 913, 914, 915, 908, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 183, 0,
	225, 161, 601, 602, 603, 604, 605, 606, 607, 608,
	609, 610, 611, 612, 613, 614, 615, 104, 616, 617,
	618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 0, 0,
	279, 280, 281, 265, 80, 0, 684, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 0, 0, 0,
	0, 0, 656, 0, 0, 0, 156, 0, 0, 0,
	182, 0, 0, 0, 242, 196, 1462, 0, 0, 0,
	698, 704, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 649, 0, 0, 0, 599, 690, 689, 665, 0,
	0, 0, 138, 666, 0, 673, 667, 671, 670, 668,
	669, 0, 636, 0, 0, 0, 0, 0, 0, 597,
	653, 0, 657, 907, 906, 916, 917, 909, 910, 911,
	912, 913, 914, 915, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 650, 651, 0, 0, 0, 0, 685,
	0, 652, 0, 0, 687, 0, 674, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 672, 683, 642, 150, 640, 682, 269, 134,
	1447, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 907, 906, 916, 917, 909, 910, 911, 912, 913,
	914, 915, 908, 0, 0, 680, 0, 0, 271, 0,
	0, 697, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 643, 0, 232, 214, 707, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 695, 210, 706, 691,
	692, 693, 696, 699, 700, 638, 641, 701, 703, 705,
	708, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 639, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 686, 200, 201, 202,
	203, 637, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 207, 174, 240, 179, 185, 228, 272,
	213, 233, 140, 263, 241, 189, 164, 714, 694, 713,
	715, 716, 712, 717, 718, 702, 658, 0, 710, 709,
	711, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 183, 79, 225, 161, 601,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 104, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 684, 0, 279, 280, 281,
	265, 0, 0, 0, 0, 212, 0, 0, 0, 0,
	0, 656, 0, 0, 0, 156, 835, 0, 0, 182,
	0, 0, 0, 242, 196, 0, 0, 0, 0, 698,
	704, 0, 0, 0, 0, 0, 0, 831, 0, 0,
	649, 0, 0, 0, 599, 690, 689, 665, 0, 0,
	0, 138, 666, 0, 673, 667, 671, 670, 668, 669,
	0, 636, 0, 0, 0, 0, 0, 0, 597, 653,
	0, 657, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 650, 651, 0, 0, 0, 0, 685, 0,
	652, 0, 0, 832, 0, 674, 0, 130, 247, 261,
	139, 238, 274, 144, 245, 135, 211, 234, 132, 259,
	244, 193, 176, 177, 131, 0, 229, 154, 168, 151,
	209, 672, 683, 642, 150, 640, 682, 269, 134, 0,
	268, 208, 256, 260, 194, 188, 133, 258, 192, 187,
	180, 158, 172, 221, 186, 222, 173, 198, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 680, 0, 0, 271, 0, 0,
	697, 0, 0, 0, 246, 0, 0, 181, 0, 0,
	0, 643, 0, 232, 214, 707, 0, 219, 230, 184,
	257, 223, 262, 248, 270, 226, 224, 126, 249, 153,
	195, 136, 137, 149, 155, 157, 159, 160, 204, 205,
	217, 237, 250, 251, 252, 152, 145, 231, 146, 170,
	147, 127, 239, 148, 128, 218, 255, 0, 166, 227,
	191, 129, 190, 220, 254, 253, 278, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 163, 0, 266, 695, 210, 706, 691, 692,
	693, 696, 699, 700, 638, 641, 701, 703, 705, 708,
	235, 0, 0, 0, 0, 0, 175, 216, 0, 236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 264, 276, 639, 0, 0, 0, 275,
	0, 0, 0, 0, 0, 686, 200, 201, 202, 203,
	637, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 169, 0, 171, 142, 215, 165,
	273, 178, 207, 174, 240, 179, 185, 228, 272, 213,
	233, 140, 263, 241, 189, 164, 714, 694, 713, 715,
	716, 712, 717, 718, 702, 658, 0, 710, 709, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 183, 0, 225, 161, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 104, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 684, 0, 279, 280, 281, 265,
	0, 0, 0, 0, 212, 0, 0, 0, 0, 0,
	656, 0, 0, 0, 156, 2152, 0, 0, 182, 0,
	0, 0, 242, 196, 0, 0, 0, 0, 698, 704,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 649,
	0, 0, 0, 599, 690, 689, 665, 0, 0, 0,
	138, 666, 0, 673, 667, 671, 670, 668, 669, 0,
	636, 0, 0, 0, 0, 0, 0, 597, 653, 0,
	657, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 650, 651, 0, 0, 0, 0, 685, 0, 652,
	0, 0, 687, 0, 674, 0, 130, 247, 261, 139,
	238, 274, 144, 245, 135, 211, 234, 132, 259, 244,
	193, 176, 177, 131, 0, 229, 154, 168, 151, 209,
	672, 683, 642, 150, 640, 682, 269, 134, 0, 268,
	208, 256, 260, 194, 188, 133, 258, 192, 187, 180,
	158, 172, 221, 186, 222, 173, 198, 197, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 680, 0, 0, 271, 0, 0, 697,
	0, 0, 0, 246, 0, 0, 181, 0, 0, 0,
	643, 0, 232, 214, 707, 0, 219, 230, 184, 257,
	223, 262, 248, 270, 226, 224, 126, 249, 153, 195,
	136, 137, 149, 155, 157, 159, 160, 204, 205, 217,
	237, 250, 251, 252, 152, 145, 231, 146, 170, 147,
	127, 239, 148, 128, 218, 255, 0, 166, 227, 191,
	129, 190, 220, 254, 253, 278, 284, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 163, 0, 266, 695, 210, 706, 691, 692, 693,
	696, 699, 700, 638, 641, 701, 703, 705, 708, 235,
	0, 0, 0, 0, 0, 175, 216, 0, 236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 264, 276, 639, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 686, 200, 201, 202, 203, 637,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 169, 0, 171, 142, 215, 165, 273,
	178, 207, 174, 240, 179, 185, 228, 272, 213, 233,
	140, 263, 241, 189, 164, 714, 694, 713, 715, 716,
	712, 717, 718, 702, 658, 0, 710, 709, 711, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 183, 0, 225, 161, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 104, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 684, 0, 279, 280, 281, 265, 0,
	0, 0, 0, 212, 0, 0, 0, 0, 0, 656,
	0, 0, 0, 156, 835, 0, 0, 182, 0, 0,
	0, 242, 196, 0, 0, 0, 0, 698, 704, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 649, 0,
	0, 0, 599, 690, 689, 665, 0, 0, 0, 138,
	666, 0, 673, 667, 671, 670, 668, 669, 0, 636,
	0, 0, 0, 0, 0, 0, 597, 653, 0, 657,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	650, 651, 0, 0, 0, 0, 685, 0, 652, 0,
	0, 687, 0, 674, 0, 130, 247, 261, 139, 238,
	274, 144, 245, 135, 211, 234, 132, 259, 244, 193,
	176, 177, 131, 0, 229, 154, 168, 151, 209, 672,
	683, 642, 150, 640, 682, 269, 134, 0, 268, 208,
	256, 260, 194, 188, 133, 258, 192, 187, 180, 158,
	172, 221, 186, 222, 173, 198, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 680, 0, 0, 271, 0, 0, 697, 0,
	0, 0, 246, 0, 0, 181, 0, 0, 0, 643,
	0, 232, 214, 707, 0, 219, 230, 184, 257, 223,
	262, 248, 270, 226, 224, 126, 249, 153, 195, 136,
	137, 149, 155, 157, 159, 160, 204, 205, 217, 237,
	250, 251, 252, 152, 145, 231, 146, 170, 147, 127,
	239, 148, 128, 218, 255, 0, 166, 227, 191, 129,
	190, 220, 254, 253, 278, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	163, 0, 266, 695, 210, 706, 691, 692, 693, 696,
	699, 700, 638, 641, 701, 703, 705, 708, 235, 0,
	0, 0, 0, 0, 175, 216, 0, 236, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 264, 276, 639, 0, 0, 0, 275, 0, 0,
	0, 0, 0, 686, 200, 201, 202, 203, 637, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 169, 0, 171, 142, 215, 165, 273, 178,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 714, 694, 713, 715, 716, 712,
	717, 718, 702, 658, 0, 710, 709, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 104, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 0, 0, 279, 280, 281, 265, 684, 0,
	0, 1434, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 656, 0, 0, 0, 156, 0,
	0, 0, 182, 0, 0, 0, 242, 196, 0, 0,
	0, 0, 698, 704, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 649, 0, 0, 0, 599, 690, 689,
	665, 0, 0, 0, 138, 666, 0, 673, 667, 671,
	670, 668, 669, 0, 636, 0, 0, 0, 0, 0,
	0, 597, 653, 0, 657, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 650, 651, 0, 0, 0,
	0, 685, 0, 652, 0, 0, 687, 0, 674, 0,
	130, 247, 261, 139, 238, 274, 144, 245, 135, 211,
	234, 132, 259, 244, 193, 176, 177, 131, 0, 229,
	154, 168, 151, 209, 672, 683, 642, 150, 640, 682,
	269, 134, 0, 268, 208, 256, 260, 194, 188, 133,
	258, 192, 187, 180, 158, 172, 221, 186, 222, 173,
	198, 197, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 680, 0, 0,
	271, 0, 0, 697, 0, 0, 0, 246, 0, 0,
	181, 0, 0, 0, 643, 0, 232, 214, 707, 0,
	219, 230, 184, 257, 223, 262, 248, 270, 226, 224,
	126, 249, 153, 195, 136, 137, 149, 155, 157, 159,
	160, 204, 205, 217, 237, 250, 251, 252, 152, 145,
	231, 146, 170, 147, 127, 239, 148, 128, 218, 255,
	0, 166, 227, 191, 129, 190, 220, 254, 253, 278,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 163, 0, 266, 695, 210,
	706, 691, 692, 693, 696, 699, 700, 638, 641, 701,
	703, 705, 708, 235, 0, 0, 0, 0, 0, 175,
	216, 0, 236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 264, 276, 639, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 686, 200,
	201, 202, 203, 637, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 169, 0, 171,
	142, 215, 165, 273, 178, 207, 174, 240, 179, 185,
	228, 272, 213, 233, 140, 263, 241, 189, 164, 714,
	694, 713, 715, 716, 712, 717, 718, 702, 658, 0,
	710, 709, 711, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 183, 0, 225,
	161, 601, 602, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 104, 616, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 684, 0, 279,
	280, 281, 265, 0, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 156, 0, 0,
	0, 182, 0, 0, 0, 242, 196, 0, 0, 0,
	0, 698, 704, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 649, 0, 0, 0, 599, 690, 689, 665,
	0, 0, 0, 138, 666, 0, 673, 667, 671, 670,
	668, 669, 0, 636, 0, 0, 0, 0, 0, 0,
	597, 653, 0, 657, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 650, 651, 594, 0, 0, 0,
	685, 0, 652, 0, 0, 687, 0, 674, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 672, 683, 642, 150, 640, 682, 269,
	134, 0, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 680, 0, 0, 271,
	0, 0, 697, 0, 0, 0, 246, 0, 0, 181,
	0, 0, 0, 643, 0, 232, 214, 707, 0, 219,
	230, 184, 257, 223, 262, 248, 270, 226, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 695, 210, 706,
	691, 692, 693, 696, 699, 700, 638, 641, 701, 703,
	705, 708, 235, 0, 0, 0, 0, 0, 175, 216,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 264, 276, 639, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 686, 200, 201,
	202, 203, 637, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 714, 694,
	713, 715, 716, 712, 717, 718, 702, 658, 0, 710,
	709, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 104, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 684, 0, 279, 280,
	281, 265, 0, 0, 0, 0, 212, 0, 0, 0,
	0, 0, 656, 0, 0, 0, 156, 0, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	698, 704, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 649, 0, 0, 0, 599, 690, 689, 665, 0,
	0, 0, 138, 666, 0, 673, 667, 671, 670, 668,
	669, 0, 636, 0, 0, 0, 0, 0, 0, 597,
	653, 0, 657, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 650, 651, 0, 0, 0, 0, 685,
	0, 652, 0, 0, 687, 0, 674, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 672, 683, 642, 150, 640, 682, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 680, 0, 0, 271, 0,
	0, 697, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 643, 0, 232, 214, 707, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 695, 210, 706, 691,
	692, 693, 696, 699, 700, 638, 641, 701, 703, 705,
	708, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 639, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 686, 200, 201, 202,
	203, 637, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 207, 174, 240, 179, 185, 228, 272,
	213, 233, 140, 263, 241, 189, 164, 714, 694, 713,
	715, 716, 712, 717, 718, 702, 658, 0, 710, 709,
	711, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 183, 0, 225, 161, 601,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 104, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 684, 0, 279, 280, 281,
	265, 0, 0, 0, 0, 212, 0, 1224, 0, 0,
	0, 656, 0, 0, 0, 156, 0, 0, 0, 182,
	0, 0, 0, 242, 196, 0, 0, 0, 0, 698,
	704, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	649, 0, 0, 0, 599, 690, 689, 665, 0, 0,
	0, 138, 666, 0, 673, 667, 671, 670, 668, 669,
	0, 636, 0, 0, 0, 0, 0, 0, 0, 653,
	0, 657, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 650, 651, 0, 0, 0, 0, 685, 0,
	652, 0, 0, 687, 0, 674, 0, 130, 247, 261,
	139, 238, 274, 144, 245, 135, 211, 234, 132, 259,
	244, 193, 176, 177, 131, 0, 229, 154, 168, 151,
	209, 672, 683, 642, 150, 640, 682, 269, 134, 0,
	268, 208, 256, 260, 194, 188, 133, 258, 192, 187,
	180, 158, 172, 221, 186, 222, 173, 198, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 680, 0, 0, 271, 0, 0,
	697, 0, 0, 0, 246, 0, 0, 181, 0, 0,
	0, 643, 0, 232, 214, 707, 0, 219, 230, 184,
	257, 223, 262, 248, 270, 226, 224, 126, 249, 153,
	195, 136, 137, 149, 155, 157, 159, 160, 204, 205,
	217, 237, 250, 251, 252, 152, 145, 231, 146, 170,
	147, 127, 239, 148, 128, 218, 255, 0, 166, 227,
	191, 129, 190, 220, 254, 253, 278, 1225, 1226, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 163, 0, 266, 695, 210, 706, 691, 692,
	693, 696, 699, 700, 638, 641, 701, 703, 705, 708,
	235, 0, 0, 0, 0, 0, 175, 216, 0, 236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 264, 276, 639, 0, 0, 0, 275,
	0, 0, 0, 0, 0, 686, 200, 201, 202, 203,
	637, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 169, 0, 171, 142, 215, 165,
	273, 178, 207, 174, 240, 179, 185, 228, 272, 213,
	233, 140, 263, 241, 189, 164, 714, 694, 713, 715,
	716, 712, 717, 718, 702, 658, 0, 710, 709, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 183, 0, 225, 161, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 104, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 684, 0, 279, 280, 281, 265,
	0, 0, 0, 0, 212, 0, 0, 0, 0, 0,
	656, 0, 0, 0, 156, 0, 0, 0, 182, 0,
	0, 0, 242, 196, 0, 0, 0, 0, 698, 704,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 649,
	0, 0, 0, 599, 690, 689, 665, 0, 0, 0,
	138, 666, 0, 673, 667, 671, 670, 668, 669, 0,
	636, 0, 0, 0, 0, 0, 0, 0, 653, 0,
	657, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 650, 651, 0, 0, 0, 0, 685, 0, 652,
	0, 0, 687, 0, 674, 0, 130, 247, 261, 139,
	238, 274, 144, 245, 135, 211, 234, 132, 259, 244,
	193, 176, 177, 131, 0, 229, 154, 168, 151, 209,
	672, 683, 642, 150, 640, 682, 269, 134, 0, 268,
	208, 256, 260, 194, 188, 133, 258, 192, 187, 180,
	158, 172, 221, 186, 222, 173, 198, 197, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 680, 0, 0, 271, 0, 0, 697,
	0, 0, 0, 246, 0, 0, 181, 0, 0, 0,
	643, 0, 232, 214, 707, 0, 219, 230, 184, 257,
	223, 262, 248, 270, 226, 224, 126, 249, 153, 195,
	136, 137, 149, 155, 157, 159, 160, 204, 205, 217,
	237, 250, 251, 252, 152, 145, 231, 146, 170, 147,
	127, 239, 148, 128, 218, 255, 0, 166, 227, 191,
	129, 190, 220, 254, 253, 278, 284, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 163, 0, 266, 695, 210, 706, 691, 692, 693,
	696, 699, 700, 638, 641, 701, 703, 705, 708, 235,
	0, 0, 0, 0, 0, 175, 216, 0, 236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 264, 276, 639, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 686, 200, 201, 202, 203, 637,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 169, 0, 171, 142, 215, 165, 273,
	178, 207, 174, 240, 179, 185, 228, 272, 213, 233,
	140, 263, 241, 189, 164, 714, 694, 713, 715, 716,
	712, 717, 718, 702, 658, 0, 710, 709, 711, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 183, 0, 225, 161, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 104, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 684, 0, 279, 280, 281, 265, 0,
	0, 0, 0, 212, 0, 0, 0, 0, 0, 656,
	0, 0, 0, 156, 0, 0, 0, 182, 0, 0,
	0, 242, 196, 0, 0, 0, 0, 698, 704, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 599, 690, 689, 665, 0, 0, 0, 138,
	666, 0, 673, 667, 671, 670, 668, 669, 0, 636,
	0, 0, 0, 0, 0, 0, 597, 653, 0, 657,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	650, 651, 0, 0, 0, 0, 685, 0, 652, 0,
	0, 687, 0, 674, 0, 130, 247, 261, 139, 238,
	274, 144, 245, 135, 211, 234, 132, 259, 244, 193,
	176, 177, 131, 0, 229, 154, 168, 151, 209, 672,
	683, 642, 150, 640, 682, 269, 134, 0, 268, 208,
	256, 260, 194, 188, 133, 258, 192, 187, 180, 158,
	172, 221, 186, 222, 173, 198, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 680, 0, 0, 271, 0, 0, 697, 0,
	0, 0, 246, 0, 0, 181, 0, 0, 0, 643,
	0, 232, 214, 707, 0, 219, 230, 184, 257, 223,
	262, 248, 270, 226, 224, 126, 249, 153, 195, 136,
	137, 149, 155, 157, 159, 160, 204, 205, 217, 237,
	250, 251, 252, 152, 145, 231, 146, 170, 147, 127,
	239, 148, 128, 218, 255, 0, 166, 227, 191, 129,
	190, 220, 254, 253, 278, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	163, 0, 266, 695, 210, 706, 691, 692, 693, 696,
	699, 700, 638, 641, 701, 703, 705, 708, 235, 0,
	0, 0, 0, 0, 175, 216, 0, 236, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 264, 276, 639, 0, 0, 0, 275, 0, 0,
	0, 0, 0, 686, 200, 201, 202, 203, 637, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 169, 0, 171, 142, 215, 165, 273, 178,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 714, 694, 713, 715, 716, 712,
	717, 718, 702, 658, 0, 710, 709, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 104, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 0, 0, 279, 280, 281, 265, 326, 0,
	325, 329, 321, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 317, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 336, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 340, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 319, 318, 322, 0, 0, 0, 0,
	0, 324, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 328, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 320, 248, 270,
	226, 344, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 1263, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 323,
	327, 330, 216, 331, 332, 0, 0, 333, 334, 335,
	0, 0, 337, 338, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 207, 174, 240,
	179, 185, 228, 272, 213, 233, 140, 263, 241, 189,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1259, 0, 1256, 0, 0, 0, 1258, 1255,
	1257, 1261, 1262, 0, 0, 0, 1260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 183,
	0, 225, 161, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 0,
	0, 279, 280, 281, 265, 326, 0, 325, 329, 321,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 317,
	0, 0, 0, 0, 0, 0, 0, 156, 0, 0,
	336, 182, 0, 0, 0, 242, 196, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1266, 1267,
	1268, 1269, 1270, 1271, 1264, 1265, 339, 0, 0, 340,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 0, 0, 286, 150, 277, 0, 269,
	134, 0, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	319, 318, 322, 0, 0, 0, 0, 0, 324, 271,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 181,
	328, 0, 0, 287, 0, 232, 214, 0, 0, 219,
	230, 184, 257, 223, 320, 248, 270, 226, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 206, 282, 0, 0,
	0, 0, 235, 0, 0, 0, 323, 327, 330, 216,
	331, 332, 0, 0, 333, 334, 335, 0, 0, 337,
	338, 0, 0, 0, 243, 264, 276, 267, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 200, 201,
	202, 203, 167, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 0, 0, 279, 280,
	281, 265, 80, 0, 23, 40, 24, 0, 0, 0,
	0, 0, 0, 0, 212, 290, 0, 0, 0, 0,
	0, 0, 0, 0, 156, 0, 0, 0, 182, 0,
	0, 0, 242, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 295,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 247, 261, 139,
	238, 274, 144, 245, 135, 211, 234, 132, 259, 244,
	193, 176, 177, 131, 0, 229, 154, 168, 151, 209,
	0, 0, 286, 150, 277, 0, 269, 134, 0, 268,
	208, 256, 260, 194, 188, 133, 258, 192, 187, 180,
	158, 172, 221, 186, 222, 173, 198, 197, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 271, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 181, 0, 0, 0,
	287, 0, 232, 214, 0, 0, 219, 230, 184, 257,
	223, 262, 248, 270, 226, 224, 126, 249, 153, 195,
	136, 137, 149, 155, 157, 159, 160, 204, 205, 217,
	237, 250, 251, 252, 152, 145, 231, 146, 170, 147,
	127, 239, 148, 128, 218, 255, 0, 166, 227, 191,
	129, 190, 220, 254, 253, 278, 284, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 163, 0, 266, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 206, 282, 0, 0, 0, 0, 235,
	0, 0, 0, 0, 0, 175, 216, 0, 236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 264, 276, 267, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 0, 200, 201, 202, 203, 291,
	293, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 169, 0, 171, 142, 215, 165, 273,
	178, 207, 174, 240, 179, 185, 228, 272, 213, 233,
	140, 263, 241, 189, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 183, 79, 225, 161, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 212, 0, 279, 280, 281, 265, 0,
	0, 0, 0, 156, 0, 0, 0, 182, 0, 0,
	0, 242, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	1515, 1518, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 247, 261, 139, 238,
	274, 144, 245, 135, 211, 234, 132, 259, 244, 193,
	176, 177, 131, 0, 229, 154, 168, 151, 209, 0,
	0, 286, 150, 277, 0, 269, 134, 0, 268, 208,
	256, 260, 194, 188, 133, 258, 192, 187, 180, 158,
	172, 221, 186, 222, 173, 198, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1519, 271, 0, 0, 0, 1512,
	0, 1511, 246, 1513, 1516, 181, 0, 0, 0, 287,
	0, 232, 214, 0, 0, 219, 230, 184, 257, 223,
	262, 248, 270, 226, 224, 126, 249, 153, 195, 136,
	137, 149, 155, 157, 159, 160, 204, 205, 217, 237,
	250, 251, 252, 152, 145, 231, 146, 170, 147, 127,
	239, 148, 128, 218, 255, 1517, 166, 227, 191, 129,
	190, 220, 254, 253, 278, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	163, 0, 266, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 206, 282, 0, 0, 0, 0, 235, 0,
	0, 0, 0, 0, 175, 216, 0, 236, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 264, 276, 267, 0, 0, 0, 275, 0, 0,
	0, 0, 0, 0, 200, 201, 202, 203, 167, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 169, 0, 171, 142, 215, 165, 273, 178,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 0, 212, 279, 280, 281, 265, 869, 0,
	0, 0, 0, 156, 0, 0, 0, 182, 0, 0,
	0, 242, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 870, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 865, 866, 867, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 247, 261, 139, 238,
	274, 144, 245, 135, 211, 234, 132, 259, 244, 193,
	176, 177, 131, 0, 229, 154, 168, 151, 209, 0,
	0, 286, 150, 277, 0, 269, 134, 0, 268, 208,
	256, 260, 194, 188, 133, 258, 192, 187, 180, 158,
	172, 221, 186, 222, 173, 198, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 181, 0, 0, 0, 287,
	0, 232, 214, 0, 0, 219, 230, 184, 257, 223,
	262, 248, 270, 226, 224, 126, 249, 153, 195, 136,
	137, 149, 155, 157, 159, 160, 204, 205, 217, 237,
	250, 251, 252, 152, 145, 231, 146, 170, 147, 127,
	239, 148, 128, 218, 255, 0, 166, 227, 191, 129,
	190, 220, 254, 253, 278, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	163, 0, 266, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 206, 282, 0, 0, 0, 0, 235, 0,
	0, 0, 0, 0, 175, 216, 0, 236, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 264, 276, 267, 0, 0, 0, 275, 0, 0,
	0, 0, 0, 0, 200, 201, 202, 203, 167, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 169, 0, 171, 142, 215, 165, 273, 178,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 212, 0, 279, 280, 281, 265, 0, 0,
	0, 0, 156, 391, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 399, 400, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 0, 0,
	286, 150, 277, 375, 269, 134, 374, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 287, 0,
	232, 214, 0, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 390, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 206, 282, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 267, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 393, 200, 201, 202, 203, 167, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 401,
	396, 397, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 398, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 80, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 0, 0, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 156, 0, 0, 0, 182, 0, 0,
	0, 242, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 0,
	956, 0, 86, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 247, 261, 139, 238,
	274, 144, 245, 135, 211, 234, 132, 259, 244, 193,
	176, 177, 131, 0, 229, 154, 168, 151, 209, 0,
	0, 286, 150, 277, 0, 269, 134, 0, 268, 208,
	256, 260, 194, 188, 133, 258, 192, 187, 180, 158,
	172, 221, 186, 222, 173, 198, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 181, 0, 0, 0, 287,
	0, 232, 214, 0, 0, 219, 230, 184, 257, 223,
	262, 248, 270, 226, 224, 126, 249, 153, 195, 136,
	137, 149, 155, 157, 159, 160, 204, 205, 217, 237,
	250, 251, 252, 152, 145, 231, 146, 170, 147, 127,
	239, 148, 128, 218, 255, 0, 166, 227, 191, 129,
	190, 220, 254, 253, 278, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	163, 0, 266, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 206, 282, 0, 0, 0, 0, 235, 0,
	0, 0, 0, 0, 175, 216, 0, 236, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 264, 276, 267, 0, 0, 0, 275, 0, 0,
	0, 0, 0, 0, 200, 201, 202, 203, 167, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 169, 0, 171, 142, 215, 165, 273, 178,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 79, 225, 161, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 212, 0, 279, 280, 281, 265, 0, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 399, 400, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 0, 0,
	286, 150, 277, 375, 269, 134, 374, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 287, 0,
	232, 214, 0, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 206, 282, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 267, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 200, 201, 202, 203, 167, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 401,
	396, 397, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 398, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 0, 0, 279, 280, 281, 265, 212, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 156, 551, 0,
	0, 182, 0, 0, 0, 242, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 340,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 0, 0, 286, 150, 277, 0, 269,
	134, 0, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 181,
	0, 0, 0, 287, 0, 232, 214, 0, 0, 219,
	230, 184, 257, 223, 262, 248, 270, 226, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 206, 282, 0, 0,
	0, 0, 235, 0, 0, 0, 0, 0, 175, 216,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 264, 276, 267, 0, 0,
	0, 275, 0, 0, 0, 0, 552, 0, 200, 201,
	202, 203, 167, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 0, 0, 279, 280,
	281, 265, 212, 0, 823, 0, 0, 0, 0, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 340, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 0, 0,
	286, 150, 277, 0, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 287, 0,
	232, 214, 0, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 206, 282, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 267, 0, 0, 0, 275, 0, 0, 0,
	0, 822, 0, 200, 201, 202, 203, 167, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 572, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 570, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 569,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 279, 280, 281, 265, 0, 0, 0, 0,
	156, 567, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 570, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 569, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 207, 174, 240,
	179, 185, 228, 272, 213, 233, 140, 263, 241, 189,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 183,
	0, 225, 161, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 212,
	0, 279, 280, 281, 265, 0, 0, 0, 0, 156,
	0, 0, 0, 182, 0, 0, 0, 242, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2083, 0, 86, 690,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 247, 261, 139, 238, 274, 144, 245, 135,
	211, 234, 132, 259, 244, 193, 176, 177, 131, 0,
	229, 154, 168, 151, 209, 0, 0, 286, 150, 277,
	0, 269, 134, 0, 268, 208, 256, 260, 194, 188,
	133, 258, 192, 187, 180, 158, 172, 221, 186, 222,
	173, 198, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 181, 0, 0, 0, 287, 0, 232, 214, 0,
	0, 219, 230, 184, 257, 223, 262, 248, 270, 226,
	224, 126, 249, 153, 195, 136, 137, 149, 155, 157,
	159, 160, 204, 205, 217, 237, 250, 251, 252, 152,
	145, 231, 146, 170, 147, 127, 239, 148, 128, 218,
	255, 0, 166, 227, 191, 129, 190, 220, 254, 253,
	278, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 163, 0, 266, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 206, 282,
	0, 0, 0, 0, 235, 0, 0, 0, 0, 0,
	175, 216, 0, 236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 264, 276, 267,
	0, 0, 0, 275, 0, 0, 0, 0, 0, 0,
	200, 201, 202, 203, 167, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 169, 0,
	171, 142, 215, 165, 273, 178, 207, 174, 240, 179,
	185, 228, 272, 213, 233, 140, 263, 241, 189, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 183, 0,
	225, 161, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 212, 0,
	279, 280, 281, 265, 0, 0, 0, 0, 156, 0,
	0, 0, 182, 0, 0, 0, 242, 196, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	570, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 0, 0, 0,
	130, 247, 261, 139, 238, 274, 144, 245, 135, 211,
	234, 132, 259, 244, 193, 176, 177, 131, 0, 229,
	154, 168, 151, 209, 0, 0, 286, 150, 277, 0,
	269, 134, 0, 268, 208, 256, 260, 194, 188, 133,
	258, 192, 187, 180, 158, 172, 221, 186, 222, 173,
	198, 197, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	181, 0, 0, 0, 287, 0, 232, 214, 0, 0,
	219, 230, 184, 257, 223, 262, 248, 270, 226, 224,
	126, 249, 153, 195, 136, 137, 149, 155, 157, 159,
	160, 204, 205, 217, 237, 250, 251, 252, 152, 145,
	231, 146, 170, 147, 127, 239, 148, 128, 218, 255,
	0, 166, 227, 191, 129, 190, 220, 254, 253, 278,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 163, 0, 266, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 206, 282, 0,
	0, 0, 0, 235, 0, 0, 0, 0, 0, 175,
	216, 0, 236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 264, 276, 267, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 0, 200,
	201, 202, 203, 167, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 169, 0, 171,
	142, 215, 165, 273, 178, 207, 174, 240, 179, 185,
	228, 272, 213, 233, 140, 263, 241, 189, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 183, 0, 225,
	161, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 212, 0, 279,
	280, 281, 265, 0, 0, 0, 0, 156, 0, 0,
	0, 182, 0, 0, 0, 242, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 570,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1684, 0, 0, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 0, 0, 286, 150, 277, 0, 269,
	134, 0, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 181,
	0, 0, 0, 287, 0, 232, 214, 0, 0, 219,
	230, 184, 257, 223, 262, 248, 270, 226, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 206, 282, 0, 0,
	0, 0, 235, 0, 0, 0, 0, 0, 175, 216,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 264, 276, 267, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 200, 201,
	202, 203, 167, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 212, 0, 279, 280,
	281, 265, 0, 0, 0, 0, 156, 0, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 570, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 0, 0, 286, 150, 277, 0, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 287, 0, 232, 214, 0, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 206, 282, 0, 0, 0,
	0, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 267, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 1490, 200, 201, 202,
	203, 167, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 207, 174, 240, 179, 185, 228, 272,
	213, 233, 140, 263, 241, 189, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 183, 0, 225, 161, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 212, 0, 279, 280, 281,
	265, 0, 0, 0, 0, 156, 1195, 0, 0, 182,
	0, 0, 0, 242, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 570, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 247, 261,
	139, 238, 274, 144, 245, 135, 211, 234, 132, 259,
	244, 193, 176, 177, 131, 0, 229, 154, 168, 151,
	209, 0, 0, 286, 150, 277, 0, 269, 134, 0,
	268, 208, 256, 260, 194, 188, 133, 258, 192, 187,
	180, 158, 172, 221, 186, 222, 173, 198, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 181, 0, 0,
	0, 287, 0, 232, 214, 0, 0, 219, 230, 184,
	257, 223, 262, 248, 270, 226, 224, 126, 249, 153,
	195, 136, 137, 149, 155, 157, 159, 160, 204, 205,
	217, 237, 250, 251, 252, 152, 145, 231, 146, 170,
	147, 127, 239, 148, 128, 218, 255, 0, 166, 227,
	191, 129, 190, 220, 254, 253, 278, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 163, 0, 266, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 206, 282, 0, 0, 0, 0,
	235, 0, 0, 0, 0, 0, 175, 216, 0, 236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 264, 276, 267, 0, 0, 0, 275,
	0, 0, 0, 0, 0, 0, 200, 201, 202, 203,
	167, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 169, 0, 171, 142, 215, 165,
	273, 178, 207, 174, 240, 179, 185, 228, 272, 213,
	233, 140, 263, 241, 189, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 183, 0, 225, 161, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 212, 0, 279, 280, 281, 265,
	0, 0, 0, 0, 156, 0, 0, 0, 182, 0,
	0, 0, 242, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 690, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 247, 261, 139,
	238, 274, 144, 245, 135, 211, 234, 132, 259, 244,
	193, 176, 177, 131, 0, 229, 154, 168, 151, 209,
	0, 0, 286, 150, 277, 0, 269, 134, 0, 268,
	208, 256, 260, 194, 188, 133, 258, 192, 187, 180,
	158, 172, 221, 186, 222, 173, 198, 197, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 181, 0, 0, 0,
	287, 0, 232, 214, 0, 0, 219, 230, 184, 257,
	223, 262, 248, 270, 226, 224, 126, 249, 153, 195,
	136, 137, 149, 155, 157, 159, 160, 204, 205, 217,
	237, 250, 251, 252, 152, 145, 231, 146, 170, 147,
	127, 239, 148, 128, 218, 255, 0, 166, 227, 191,
	129, 190, 220, 254, 253, 278, 284, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 163, 0, 266, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 206, 282, 0, 0, 0, 0, 235,
	0, 0, 0, 0, 0, 175, 216, 0, 236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 264, 276, 267, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 0, 200, 201, 202, 203, 167,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 169, 0, 171, 142, 215, 165, 273,
	178, 207, 174, 240, 179, 185, 228, 272, 213, 233,
	140, 263, 241, 189, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 183, 0, 225, 161, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 212, 0, 279, 280, 281, 265, 0,
	0, 0, 0, 156, 0, 0, 0, 182, 0, 0,
	0, 242, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1817, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 247, 261, 139, 238,
	274, 144, 245, 135, 211, 234, 132, 259, 244, 193,
	176, 177, 131, 0, 229, 154, 168, 151, 209, 0,
	0, 286, 150, 277, 0, 269, 134, 0, 268, 208,
	256, 260, 194, 188, 133, 258, 192, 187, 180, 158,
	172, 221, 186, 222, 173, 198, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 181, 0, 0, 0, 287,
	0, 232, 214, 0, 0, 219, 230, 184, 257, 223,
	262, 248, 270, 226, 224, 126, 249, 153, 195, 136,
	137, 149, 155, 157, 159, 160, 204, 205, 217, 237,
	250, 251, 252, 152, 145, 231, 146, 170, 147, 127,
	239, 148, 128, 218, 255, 0, 166, 227, 191, 129,
	190, 220, 254, 253, 278, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	163, 0, 266, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 206, 282, 0, 0, 0, 0, 235, 0,
	0, 0, 0, 0, 175, 216, 0, 236, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 264, 276, 267, 0, 0, 0, 275, 0, 0,
	0, 0, 0, 0, 200, 201, 202, 203, 167, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 169, 0, 171, 142, 215, 165, 273, 178,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 212, 0, 279, 280, 281, 265, 0, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 570, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 0, 0,
	286, 150, 277, 0, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 287, 0,
	232, 214, 0, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 206, 282, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 267, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 200, 201, 202, 203, 167, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 212, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 156, 0, 0, 0, 182, 0, 0, 0, 242,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 130, 247, 261, 139, 238, 274, 144,
	245, 135, 211, 234, 132, 259, 244, 193, 176, 177,
	131, 0, 229, 154, 168, 151, 209, 0, 0, 286,
	150, 277, 0, 269, 134, 0, 268, 208, 256, 260,
	194, 188, 133, 258, 192, 187, 180, 158, 172, 221,
	186, 222, 173, 198, 197, 199, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 181, 0, 0, 0, 287, 0, 232,
	214, 0, 0, 219, 230, 184, 257, 223, 262, 248,
	270, 226, 224, 126, 249, 153, 195, 136, 137, 149,
	155, 157, 159, 160, 204, 205, 217, 237, 250, 251,
	252, 152, 145, 231, 146, 170, 147, 127, 239, 148,
	128, 218, 255, 0, 166, 227, 191, 129, 190, 220,
	254, 253, 278, 284, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 163, 0,
	266, 0, 210, 0, 0, 0, 0, 0, 0, 0,
	206, 282, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 175, 216, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 264,
	276, 267, 0, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 200, 201, 202, 203, 167, 0, 143, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 162,
	169, 0, 171, 142, 215, 165, 273, 178, 207, 174,
	240, 179, 185, 228, 272, 213, 233, 140, 263, 241,
	189, 164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	183, 0, 225, 161, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	212, 0, 279, 280, 281, 265, 0, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 308, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 0, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	0, 171, 142, 215, 165, 273, 178, 207, 174, 240,
	179, 185, 228, 272, 213, 233, 140, 263, 241, 189,
	164, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 183,
	0, 225, 161, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 121, 122, 123, 124, 212,
	0, 279, 280, 281, 265, 0, 0, 0, 0, 156,
	0, 0, 0, 182, 0, 0, 0, 242, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 130, 247, 261, 139, 238, 274, 144, 245, 135,
	211, 234, 132, 259, 244, 193, 176, 177, 131, 0,
	229, 154, 168, 151, 209, 0, 0, 286, 150, 277,
	0, 269, 134, 0, 268, 208, 256, 260, 194, 188,
	133, 258, 192, 187, 180, 158, 172, 221, 186, 222,
	173, 198, 197, 199, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 271, 0, 0, 0, 0, 0, 0, 246, 0,
	0, 181, 0, 0, 0, 287, 0, 232, 214, 0,
	0, 219, 230, 184, 257, 223, 262, 248, 270, 226,
	224, 126, 249, 153, 195, 136, 137, 149, 155, 157,
	159, 160, 204, 205, 217, 237, 250, 251, 252, 152,
	145, 231, 146, 170, 147, 127, 239, 148, 128, 218,
	255, 0, 166, 227, 191, 129, 190, 220, 254, 253,
	278, 284, 285, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 163, 0, 266, 0,
	210, 0, 0, 0, 0, 0, 0, 0, 206, 282,
	0, 0, 0, 0, 235, 0, 0, 0, 0, 0,
	175, 216, 0, 236, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 243, 264, 276, 267,
	0, 0, 0, 275, 0, 0, 0, 0, 0, 0,
	200, 201, 202, 203, 167, 0, 143, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 162, 169, 0,
	171, 142, 215, 165, 273, 178, 207, 174, 240, 179,
	185, 228, 272, 213, 233, 140, 263, 241, 189, 164,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 183, 0,
	225, 161, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 212, 0,
	279, 280, 281, 265, 0, 0, 0, 0, 156, 0,
	0, 0, 182, 0, 0, 0, 242, 196, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	1213, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	130, 247, 261, 139, 238, 274, 144, 245, 135, 211,
	234, 132, 259, 244, 193, 176, 177, 131, 0, 229,
	154, 168, 151, 209, 0, 0, 286, 150, 277, 0,
	269, 134, 0, 268, 208, 256, 260, 194, 188, 133,
	258, 192, 187, 180, 158, 172, 221, 186, 222, 173,
	198, 197, 199, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 0, 0, 0, 0, 0, 0, 246, 0, 0,
	181, 0, 0, 0, 287, 0, 232, 214, 0, 0,
	219, 230, 184, 257, 223, 262, 248, 270, 226, 224,
	126, 249, 153, 195, 136, 137, 149, 155, 157, 159,
	160, 204, 205, 217, 237, 250, 251, 252, 152, 145,
	231, 146, 170, 147, 127, 239, 148, 128, 218, 255,
	0, 166, 227, 191, 129, 190, 220, 254, 253, 278,
	284, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 163, 0, 266, 0, 210,
	0, 0, 0, 0, 0, 0, 0, 206, 282, 0,
	0, 0, 0, 235, 0, 0, 0, 0, 0, 175,
	216, 0, 236, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 264, 276, 267, 0,
	0, 0, 275, 0, 0, 0, 0, 0, 0, 200,
	201, 202, 203, 167, 0, 143, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 162, 169, 0, 171,
	142, 215, 165, 273, 178, 207, 174, 240, 179, 185,
	228, 272, 213, 233, 140, 263, 241, 189, 164, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 183, 0, 225,
	161, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 124, 212, 0, 279,
	280, 281, 265, 0, 0, 0, 0, 156, 0, 0,
	0, 182, 0, 0, 0, 242, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 340,
	0, 0, 0, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	247, 261, 139, 238, 274, 144, 245, 135, 211, 234,
	132, 259, 244, 193, 176, 177, 131, 0, 229, 154,
	168, 151, 209, 0, 0, 286, 150, 277, 0, 269,
	134, 0, 268, 208, 256, 260, 194, 188, 133, 258,
	192, 187, 180, 158, 172, 221, 186, 222, 173, 198,
	197, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 246, 0, 0, 181,
	0, 0, 0, 287, 0, 232, 214, 0, 0, 219,
	230, 184, 257, 223, 262, 248, 270, 226, 224, 126,
	249, 153, 195, 136, 137, 149, 155, 157, 159, 160,
	204, 205, 217, 237, 250, 251, 252, 152, 145, 231,
	146, 170, 147, 127, 239, 148, 128, 218, 255, 0,
	166, 227, 191, 129, 190, 220, 254, 253, 278, 284,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 163, 0, 266, 0, 210, 0,
	0, 0, 0, 0, 0, 0, 206, 282, 0, 0,
	0, 0, 235, 0, 0, 0, 0, 0, 175, 216,
	0, 236, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 264, 276, 267, 0, 0,
	0, 275, 0, 0, 0, 0, 0, 0, 200, 201,
	202, 203, 167, 0, 143, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 162, 169, 0, 171, 142,
	215, 165, 273, 178, 207, 174, 240, 179, 185, 228,
	272, 213, 233, 140, 263, 241, 189, 164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 183, 0, 225, 161,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 212, 0, 279, 280,
	281, 265, 0, 0, 0, 0, 156, 0, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 0, 0, 286, 150, 277, 0, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 0,
	0, 1157, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 287, 0, 232, 214, 0, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 206, 282, 0, 0, 0,
	0, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 267, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 200, 201, 202,
	203, 167, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 207, 174, 240, 179, 185, 228, 272,
	213, 233, 140, 263, 241, 189, 164, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 183, 0, 225, 161, 89,
	90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
	110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 212, 0, 279, 280, 281,
	265, 0, 0, 0, 0, 156, 0, 0, 0, 182,
	0, 0, 0, 242, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 570, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 130, 247, 261,
	139, 238, 274, 144, 245, 135, 211, 234, 132, 259,
	244, 193, 176, 177, 131, 0, 229, 154, 168, 151,
	209, 0, 0, 286, 150, 277, 0, 269, 134, 0,
	268, 208, 256, 260, 194, 188, 133, 258, 192, 187,
	180, 158, 172, 221, 186, 222, 173, 198, 197, 199,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 0, 0,
	0, 0, 0, 0, 246, 0, 0, 181, 0, 0,
	0, 287, 0, 232, 214, 0, 0, 219, 230, 184,
	257, 223, 262, 248, 270, 226, 224, 126, 249, 153,
	195, 136, 137, 149, 155, 157, 159, 160, 204, 205,
	217, 237, 250, 251, 252, 152, 145, 231, 146, 170,
	147, 127, 239, 148, 128, 218, 255, 0, 166, 227,
	191, 129, 190, 220, 254, 253, 278, 284, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 163, 0, 266, 0, 210, 0, 0, 0,
	0, 0, 0, 0, 206, 282, 0, 0, 0, 0,
	235, 0, 0, 0, 0, 0, 175, 216, 0, 236,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 243, 264, 276, 813, 0, 0, 0, 275,
	0, 0, 0, 0, 0, 0, 200, 201, 202, 203,
	167, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 162, 169, 0, 171, 142, 215, 165,
	273, 178, 207, 174, 240, 179, 185, 228, 272, 213,
	233, 140, 263, 241, 189, 164, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 183, 0, 225, 161, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 212, 0, 279, 280, 281, 265,
	0, 0, 0, 0, 156, 0, 0, 0, 182, 0,
	0, 0, 242, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 130, 247, 261, 139,
	238, 274, 144, 245, 135, 211, 234, 132, 259, 244,
	193, 176, 177, 131, 0, 229, 154, 168, 151, 209,
	0, 0, 286, 150, 277, 0, 269, 134, 0, 268,
	208, 256, 260, 194, 188, 133, 258, 192, 187, 180,
	158, 172, 221, 186, 222, 173, 198, 197, 199, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 271, 0, 0, 0,
	0, 0, 0, 246, 0, 0, 181, 0, 0, 0,
	287, 0, 232, 214, 0, 0, 219, 230, 184, 257,
	223, 262, 248, 270, 226, 224, 126, 249, 153, 195,
	136, 137, 149, 155, 157, 159, 160, 204, 205, 217,
	237, 250, 251, 252, 152, 145, 231, 146, 170, 147,
	127, 239, 148, 128, 218, 255, 0, 166, 227, 191,
	129, 190, 220, 254, 253, 278, 284, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 163, 0, 266, 0, 210, 0, 0, 0, 0,
	0, 0, 0, 206, 282, 0, 0, 0, 0, 235,
	0, 0, 0, 0, 0, 175, 216, 0, 236, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 264, 276, 267, 0, 0, 0, 275, 0,
	0, 0, 0, 0, 0, 200, 201, 202, 203, 167,
	0, 143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 169, 0, 171, 142, 215, 165, 273,
	178, 207, 174, 240, 179, 185, 228, 272, 213, 233,
	140, 263, 241, 189, 164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 418, 0,
	0, 125, 0, 183, 0, 225, 161, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 212, 0, 279, 280, 281, 265, 0,
	0, 0, 83, 156, 0, 0, 0, 182, 0, 0,
	0, 242, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 130, 247, 261, 139, 238,
	274, 144, 245, 135, 211, 234, 132, 259, 244, 193,
	176, 177, 131, 0, 229, 154, 168, 151, 209, 0,
	0, 286, 150, 277, 0, 269, 134, 0, 268, 208,
	256, 260, 194, 188, 133, 258, 192, 187, 180, 158,
	172, 221, 186, 222, 173, 198, 197, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 181, 0, 0, 0, 287,
	0, 232, 214, 0, 0, 219, 230, 184, 257, 223,
	262, 248, 270, 226, 224, 126, 249, 153, 195, 136,
	137, 149, 155, 157, 159, 160, 204, 205, 217, 237,
	250, 251, 252, 152, 145, 231, 146, 170, 147, 127,
	239, 148, 128, 218, 255, 0, 166, 227, 191, 129,
	190, 220, 254, 253, 278, 284, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	163, 0, 266, 0, 210, 0, 0, 0, 0, 0,
	0, 0, 206, 282, 0, 0, 0, 0, 235, 0,
	0, 0, 0, 0, 175, 216, 0, 236, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	243, 264, 276, 267, 0, 0, 0, 275, 0, 0,
	0, 0, 0, 0, 200, 201, 202, 203, 167, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 169, 0, 171, 142, 215, 165, 273, 178,
	207, 174, 240, 179, 185, 228, 272, 213, 233, 140,
	263, 241, 189, 164, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 183, 0, 225, 161, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 212, 0, 279, 280, 281, 265, 0, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 0, 0,
	286, 150, 277, 0, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 287, 0,
	232, 214, 0, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 206, 282, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 267, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 200, 201, 202, 203, 167, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 0, 212, 279, 280, 281, 265, 468, 0, 0,
	0, 0, 156, 0, 0, 0, 182, 0, 0, 0,
	242, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 473, 474, 475, 470, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 130, 247, 261, 139, 238, 274,
	144, 245, 135, 211, 234, 132, 259, 244, 193, 176,
	177, 131, 0, 229, 154, 168, 151, 209, 0, 0,
	286, 150, 277, 0, 269, 134, 0, 268, 208, 256,
	260, 194, 188, 133, 258, 192, 187, 180, 158, 172,
	221, 186, 222, 173, 198, 197, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 271, 0, 0, 0, 0, 0,
	0, 246, 0, 0, 181, 0, 0, 0, 287, 0,
	232, 214, 0, 0, 219, 230, 184, 257, 223, 262,
	248, 270, 226, 224, 126, 249, 153, 195, 136, 137,
	149, 155, 157, 159, 160, 204, 205, 217, 237, 250,
	251, 252, 152, 145, 231, 146, 170, 147, 127, 239,
	148, 128, 218, 255, 0, 166, 227, 191, 129, 190,
	220, 254, 253, 278, 284, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 163,
	0, 266, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 206, 282, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 0, 175, 216, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 243,
	264, 276, 267, 0, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 200, 201, 202, 203, 167, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	162, 169, 0, 171, 142, 215, 165, 273, 178, 207,
	174, 240, 179, 185, 228, 272, 213, 233, 140, 263,
	241, 189, 164, 0, 0, 0, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 156, 0, 0, 0,
	182, 0, 0, 0, 242, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 183, 0, 225, 161, 473, 474, 475, 470, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 281, 265, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 247,
	261, 139, 238, 274, 144, 245, 135, 211, 234, 132,
	259, 244, 193, 176, 177, 131, 0, 229, 154, 168,
	151, 209, 0, 0, 286, 150, 277, 0, 269, 134,
	0, 268, 208, 256, 260, 194, 188, 133, 258, 192,
	187, 180, 158, 172, 221, 186, 222, 173, 198, 197,
	199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 0,
	0, 0, 0, 0, 0, 246, 0, 0, 181, 0,
	0, 0, 287, 0, 232, 214, 0, 0, 219, 230,
	184, 257, 223, 262, 248, 270, 226, 224, 126, 249,
	153, 195, 136, 137, 149, 155, 157, 159, 160, 204,
	205, 217, 237, 250, 251, 252, 152, 145, 231, 146,
	170, 147, 127, 239, 148, 128, 218, 255, 0, 166,
	227, 191, 129, 190, 220, 254, 253, 278, 284, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 163, 0, 266, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 206, 282, 0, 0, 0,
	0, 235, 0, 0, 0, 0, 0, 175, 216, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 264, 276, 267, 0, 0, 0,
	275, 0, 0, 0, 0, 0, 0, 200, 201, 202,
	203, 167, 0, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 162, 169, 0, 171, 142, 215,
	165, 273, 178, 207, 174, 240, 179, 185, 228, 272,
	213, 233, 140, 263, 241, 189, 164, 0, 0, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	156, 0, 0, 0, 182, 0, 0, 0, 242, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 183, 0, 225, 161, 473,
	474, 475, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 280, 281,
	265, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 130, 247, 261, 139, 238, 274, 144, 245,
	135, 211, 234, 132, 259, 244, 193, 176, 177, 131,
	0, 229, 154, 168, 151, 209, 0, 0, 286, 150,
	277, 0, 269, 134, 0, 268, 208, 256, 260, 194,
	188, 133, 258, 192, 187, 180, 158, 172, 221, 186,
	222, 173, 198, 197, 199, 0, 0, 0, 0, 0,
	0, 865, 866, 867, 864, 0, 0, 0, 0, 0,
	0, 0, 271, 0, 0, 0, 0, 0, 0, 246,
	0, 0, 181, 0, 0, 0, 287, 0, 232, 214,
	0, 0, 219, 230, 184, 257, 223, 262, 248, 270,
	226, 224, 126, 249, 153, 195, 136, 137, 149, 155,
	157, 159, 160, 204, 205, 217, 237, 250, 251, 252,
	152, 145, 231, 146, 170, 147, 127, 239, 148, 128,
	218, 255, 1263, 166, 227, 191, 129, 190, 220, 254,
	253, 278, 284, 285, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 163, 0, 266,
	0, 210, 0, 0, 0, 0, 0, 0, 0, 206,
	282, 1768, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 175, 216, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1169, 0, 243, 264, 276,
	267, 0, 0, 0, 275, 0, 0, 0, 0, 0,
	0, 200, 201, 202, 203, 167, 0, 143, 0, 2168,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 169,
	1750, 171, 142, 215, 165, 273, 178, 207, 174, 240,
	179, 185, 228, 272, 213, 233, 140, 263, 241, 189,
	164, 0, 0, 0, 0, 0, 0, 1768, 0, 0,
	0, 0, 1259, 0, 1256, 0, 0, 0, 1258, 1255,
	1257, 1261, 1262, 0, 0, 0, 1260, 0, 0, 0,
	0, 1169, 0, 0, 0, 0, 0, 125, 0, 183,
	0, 225, 161, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 281, 265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1754, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1758, 1244, 1245, 1246,
	1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1266, 1267,
	1268, 1269, 1270, 1271, 1264, 1265, 1747, 1768, 0, 0,
	1749, 1751, 1753, 0, 1755, 1756, 1757, 1759, 1760, 1761,
	1763, 1764, 1765, 1766, 0, 0, 0, 0, 0, 0,
	0, 1169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1769, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1754, 0, 0, 0, 0, 1750, 0, 0, 0,
	0, 0, 1758, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1767, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1747, 0, 0, 0, 1749, 1751, 1753, 1746,
	1755, 1756, 1757, 1759, 1760, 1761, 1763, 1764, 1765, 1766,
	0, 0, 0, 0, 1762, 0, 0, 0, 0, 0,
	0, 1752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1769, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1767, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1746, 0, 0, 0, 0,
	0, 1754, 0, 0, 0, 0, 0, 0, 0, 0,
	1762, 0, 1758, 0, 0, 0, 0, 1752, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1747, 0, 0, 0, 1749, 1751, 1753, 0,
	1755, 1756, 1757, 1759, 1760, 1761, 1763, 1764, 1765, 1766,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1769, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1767, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1746, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1762, 0, 0, 0, 0, 0, 0, 1752,
}

var yyPact = [...]int{
	187, -1000, -308, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 19515, 1692, -1000, 8336, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 225,
	16512, 19944, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7889,
	7442, 114, -1000, 1699, -1000, -1000, -1000, -1000, 125, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 635, -38, 317,
	325, 331, 331, 9624, 1699, 1317, 183, 23, -1000, 19086,
	599, 187, 166, 19944, -1000, 374, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16512, 19944,
	-72, 489, -1000, 161, 155, 201, 372, -1000, -1000, -1000,
	-1000, 19944, 1647, -1000, -1000, -1000, 1585, 20374, 183, -1000,
	1238, 1263, -1000, -1000, 1452, -1000, 91, -3, -25, 116,
	-1000, -1000, 140, -1000, -1000, -1000, -1000, -1000, 48, -1000,
	-9, -1000, -18, -1000, -1000, -1000, -112, -1000, -1000, -1000,
	-1000, -1000, 1237, 326, 1470, -176, 1532, 1601, 1317, 1654,
	1596, -1, 173, 173, 206, 173, -1000, -1000, -1000, -1000,
	-1000, -1000, 399, 399, 499, 144, -1000, -1000, -130, -141,
	399, -141, 4, -1000, 1516, 1515, -1000, -1000, -1000, -1000,
	-1000, -1000, 178, -1000, -187, -1000, 310, -1000, 302, -1000,
	10929, 138, 1259, 553, -1000, 409, 19944, 19944, 19944, 409,
	409, 12222, 11793, 366, -1000, 1601, 1317, -1000, 1699, 1699,
	1184, 1005, 178, 178, 178, 178, 178, 1258, 19944, -1000,
	1328, 5239, 5239, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 169, 1451, -1000, 19944, 1613, -1000, 359, 795, 915,
	-1000, -1000, 161, 1209, -1000, 404, -1000, -1000, -1000, -1000,
	19944, 1449, 19944, 16512, 16512, 16512, 16512, -1000, 1495, 1491,
	-1000, 1488, 1481, 1548, 19944, -1000, -1000, -1000, 20728, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1180, 1699, 113, 1766,
	15654, 17799, 19944, 15654, -1000, -1000, -1000, -1000, -1000, -114,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	113, 15654, 15654, -81, -1000, -1000, -294, 1532, 5678, -1000,
	-1000, 5678, -1000, -1000, 194, 173, -1000, 15654, 524, 17799,
	847, 19944, 1667, 6556, 1667, 19944, -1000, -1000, 399, 399,
	-1000, 499, 499, -1000, -1000, -120, 1667, -126, 19944, 173,
	-1000, -1000, 18657, 1556, -152, 315, 280, 308, -1000, -1000,
	-178, -1000, -1000, 1225, 11364, 10494, 214, 15654, 3477, -1000,
	-1000, 409, 409, 409, 3477, 3477, 335, -1000, -1000, -1000,
	-1000, -1000, -1000, 19944, 1532, -1000, -1000, -1000, 1601, 1532,
	1601, -1000, -1000, 15654, 17799, 19944, 19944, 21082, 19944, 1258,
	1563, 19944, 1247, -1000, -1000, 9195, 358, 5678, 739, 1445,
	-1000, -1000, 1444, 1443, 1440, 1439, 1437, 1432, 1431, -1000,
	1382, -1000, -1000, 1427, 1426, 1413, 1409, -1000, -1000, -1000,
	-1000, -1000, -1000, 1401, -1000, -1000, -1000, 1400, 1382, -1000,
	-1000, 1398, 1397, 1393, 1392, 1391, -1000, -1000, -1000, -1000,
	-1000, -1000, 913, 908, 1366, -1000, -1000, -1000, -1000, 3038,
	6556, 6556, 6556, 6556, -1000, -1000, 1345, 5678, 1390, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6995, -1000, 1388, 1387, 1386, 1385,
	1383, 1382, 1380, 907, 1378, 1375, 1374, 6556, 1371, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1247,
	-1000, -292, -1000, 10065, 19944, 19944, -1000, 1648, 5678, 2188,
	-1000, 1592, -1000, 161, 72, -1000, -1000, -1000, -1000, -1000,
	-1000, 355, 19944, 1260, -1000, 477, 1458, 1468, 1458, -1000,
	-1000, -1000, -1000, 1489, -1000, 1482, -1000, -1000, 1328, -1000,
	-1000, 546, -1000, -1000, -1000, -1000, -1000, -9, -18, 1214,
	-1000, -40, 90, -1000, 1196, -1000, -1000, -1000, 546, 1214,
	191, 902, 900, -1000, 651, 354, 1251, -1000, 725, 18228,
	19944, 223, 1551, 1225, 1381, 1521, -1000, -1000, -1000, 1667,
	1667, 1667, 399, 21082, 499, 19944, 499, -1000, 499, -1000,
	353, 19944, 223, 1362, -1000, -1000, -1000, 313, 291, 299,
	17799, 190, -1000, -1000, 1225, -1000, -1000, -1000, 1361, 465,
	-1000, -1000, 6556, -1000, 761, -1000, 3477, 3477, 3477, -1000,
	-1000, 14367, -1000, -1000, 1532, -1000, 1532, 1214, 1225, 1466,
	1245, -1000, -1000, -1000, -1000, -1000, 1360, 1193, -1000, 1667,
	5239, -1000, 16512, -1000, 5678, 5678, 5678, 5678, -1000, 17370,
	-1000, 16941, -1000, 278, 6117, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5678, 1594, 1594, 1594, 5678, 580, 5678, 5678,
	-1000, 656, 7544, 1594, 1594, 1594, 1594, 1594, -1000, 2591,
	1594, 1594, 1594, 1594, -1000, -1000, 6556, 6556, 6556, 6556,
	6556, 6556, 6556, 6556, 6556, 6556, 6556, 6556, 1343, 567,
	6556, 6556, 6556, 1005, 1565, 1244, -1000, -1000, -1000, -1000,
	-1000, 498, 761, 5678, 21184, 5678, 5678, 5678, -1000, 1178,
	1176, -1000, -1000, 5678, -1000, 5678, 6556, 5678, -1000, 1594,
	1667, 1211, -1000, 1350, -1000, 1190, 1507, -1000, 352, 1243,
	-1000, 447, 1175, -1000, 1601, 761, -1000, 349, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -73, -1000, -1000,
	19944, 1170, 1648, 19944, 5678, -1000, -1000, 5678, 1349, -1000,
	5678, -1000, -1000, -1000, -1000, 1688, 348, 345, 15654, -1000,
	156, 15654, -1000, -1000, 19944, 188, 15654, -4, -146, 5678,
	5678, 19944, 5678, -1000, -1000, -1000, 1328, 509, 1346, -234,
	-1000, -56, -1000, 1465, 85, -1000, 1521, -1000, 268, -1000,
	-1000, -1000, -1000, 1667, -1000, 399, -1000, 399, 499, 19944,
	-1000, -1000, -234, 1172, -1000, -1000, -1000, 288, 1225, 15654,
	855, 214, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19944,
	19944, 187, -1000, 19944, 1663, -1000, 1222, 1665, -1000, 606,
	606, 566, -1000, -1000, 339, -1000, -1000, 247, -1000, -1000,
	-1000, -1000, -1000, 1345, -1000, -1000, -1000, 1159, 1206, 761,
	5678, -1000, -1000, 5678, 5678, 821, 5678, 1157, 1165, 1155,
	-1000, 1138, 1687, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5678, 5678, 5678, 5678, 5678, 684, 4800, -1000,
	-1000, -1000, 5678, 5678, 5678, 5678, 1490, 1725, -1000, 607,
	607, 357, 357, 357, 357, 357, 687, 687, -1000, -1000,
	-1000, 3038, 1343, 6556, 6556, 6556, 172, 2470, 3110, -1000,
	5678, 554, -1000, 5678, 798, -1000, 1124, 1057, 1120, 1112,
	-1000, -1000, 929, 1098, 3022, 1089, 5678, 1663, -292, 4355,
	152, 19944, -292, 19944, 19944, 4355, -1000, 19944, -1000, 2188,
	794, -1000, -1000, 1601, -1000, 761, 761, 19944, 761, 15654,
	387, 481, -1000, 13938, 15654, -1000, -1000, 15654, 106, 1531,
	-1000, -1000, -101, -87, 761, 761, 333, -1000, 1562, 1550,
	8765, -1000, -71, -1000, -1000, -1000, 350, -1000, 894, 892,
	866, 865, 19944, -1000, -1000, -1000, -1000, -1000, 422, 422,
	422, -1000, 1667, 1667, 399, -1000, -7, -41, -1000, 1214,
	1083, -1000, -1000, -1000, -1000, 1070, -1000, 1660, 1650, 16512,
	16083, -1000, -1000, -1000, -1000, -1000, 5678, 1557, 1527, 1493,
	858, 1148, -1000, -1000, -1000, -1000, 5678, 1486, 1477, 1379,
	1329, 1282, -1000, 5678, 5678, 695, 1231, 1216, 1204, 1177,
	1144, -1000, 172, 2470, 2663, -1000, 6556, 6556, 1128, 492,
	-1000, 5678, 621, 858, 13080, -1000, 5678, -1000, -1000, -1000,
	13080, -1000, 6556, -1000, 1117, 1660, -1000, 1053, 1219, -1000,
	-292, -1000, -1000, 1211, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1137, 1214, -1000, -1000, -1000, -1000,
	15654, 1544, 223, -1000, -6, 208, -296, -83, 1642, 1635,
	19944, 183, 19944, 1038, 1212, -1000, -1000, -1000, 939, 558,
	-1000, 19944, 614, 318, 173, 318, 613, 1341, -1000, -1000,
	-71, -1000, 793, 792, 790, 789, -48, -1000, -1000, -1000,
	-1000, -1000, 1336, 13080, -1000, 13509, 863, -1000, -1000, 1667,
	-1000, -7, -1000, 272, 286, 20, 1634, -1000, -1000, -1000,
	5678, 5678, 1665, -1000, -1000, 761, -1000, -1000, -1000, 1036,
	-1000, 1287, 1324, -1000, 1287, 1300, 1287, 279, 279, 1332,
	1332, 1335, 1332, -1000, 1091, -1000, -1000, -1000, -1000, -1000,
	1071, 1050, 5678, -1000, -1000, -1000, -1000, -1000, -1000, 6556,
	-1000, -1000, -1000, -1000, 761, 5678, 1027, 1022, 703, 1014,
	2873, -1000, -1000, -1000, 4355, 1211, -1000, -1000, 15654, 15654,
	-242, -12, 19944, -298, 862, -1000, 1632, 857, 708, -1000,
	1328, 21582, 8765, 1147, -33, -1000, -1000, -1000, 1287, -1000,
	1324, 1324, 1287, 1287, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1319, 1304, -1000, 1287, 1300, 1300, 1287,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19944, 19944, -1000,
	19944, 19944, 173, 5678, -1000, -1000, -1000, -1000, -1000, -1000,
	15225, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	788, -1000, -1000, -1000, 855, 761, 1206, -1000, -1000, -1000,
	783, -1000, 781, -1000, -1000, 771, -1000, -1000, -1000, -1000,
	-1000, -1000, 758, -1000, -1000, 752, -1000, -1000, -1000, -1000,
	968, -1000, 761, -1000, -1000, -1000, 5678, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -126, -304, 746, -1000, 854, -88,
	-1000, -1000, 1558, 165, 21452, -1000, 422, 422, 532, 422,
	422, 422, 422, 117, 108, 422, 422, 422, 422, 422,
	422, 422, 422, 422, 422, 422, 422, 422, 422, 1298,
	-1000, -1000, 1147, -1000, -1000, 638, 6556, -1000, -1000, 852,
	13509, 402, 328, 1296, -1000, 75, 578, 576, -1000, 19944,
	-1000, -36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 850,
	850, -1000, -1000, -1000, -1000, 1294, 1331, 41, 1293, -1000,
	1291, 1289, 19944, 962, 1134, -1000, 1287, 5678, 16, -1000,
	-1000, 1004, 999, 970, 1132, 1130, -1000, 916, -104, -92,
	-1000, 1286, -1000, -1000, 1631, 183, -1000, 1630, 21582, -1000,
	742, 736, 422, 422, 724, 849, 848, 837, 422, 422,
	723, 832, 20728, 720, 711, 702, 785, 825, 437, 780,
	757, 694, 19944, 1283, 811, -1000, -1000, 2470, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 701,
	1280, -1000, -1000, 1276, -1000, -1000, 1127, -1000, 1123, 15225,
	63, 63, 15225, 15225, 15225, 1275, 239, -1000, 15225, 1526,
	841, -1000, -1000, -1000, -1000, -1000, 689, -1000, 680, -1000,
	186, -99, -92, -1000, 1624, -96, 1623, 1622, 19944, 708,
	-1000, 84, -1000, -1000, -1000, 13080, 13080, -1000, -1000, -1000,
	-1000, 823, 820, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 134, 19944, 1086, -1000, 438,
	967, 5678, -221, 15225, -1000, 813, -1000, 1077, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1068, 1065, 1063, 15225, -1000,
	-1000, -1000, 73, 98, -1000, -1000, 1526, 961, 930, 1274,
	679, -83, 1611, -1000, 708, 1606, 708, 708, 1056, -1000,
	-1000, 49, 197, 175, -1000, 221, -1000, -1000, -1000, -1000,
	-1000, -1000, 123, 1052, -1000, 811, 808, -1000, 809, 1464,
	-1000, -19, 1012, -1000, -1000, -1000, -1000, -1000, 1010, -1000,
	-1000, 422, 805, 33, -1000, -1000, -1000, -1000, -1000, 1514,
	12651, -106, -1000, 802, -1000, 708, -1000, -1000, -1000, 19944,
	56, 677, 6556, 1273, 6556, 1269, 62, 1267, -1000, -1000,
	-1000, -1000, -1000, 239, -1000, -1000, 1463, 1461, 1673, -1000,
	-1000, -1000, -1000, 98, 98, 98, 98, -14, 673, -1000,
	847, -1000, 19944, -1000, 1003, -1000, -1000, -1000, 330, -1000,
	-1000, -1000, -1000, 1266, 1605, -1000, 2575, 19944, 1895, 19944,
	1265, 416, 6556, -1000, -1000, 1707, -1000, 1705, 386, 386,
	-1000, -1000, -1000, 1198, -1000, 412, -1000, 14796, 19944, -1000,
	157, 59, -1000, 995, -1000, 978, 19944, 668, 1054, -1000,
	-1000, -1000, 683, 79, -1000, 19944, 3916, -1000, 329, 960,
	-1000, 919, 46, -1000, -1000, 958, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 761, 19944, -1000, 157, 1505, -1000, 667,
	-1000, -1000, -1000, 21366, 153, -1000, -1000, 21366, 52, -1000,
	151, -1000, -1000, 954, -1000, 824, 1262, -1000, 52, 21582,
	5678, -1000, 21582, 947, -1000,
}

var yyPgo = [...]int{
	0, 98, 2034, 2033, 104, 102, 2032, 2031, 2030, 2029,
	2028, 2025, 2024, 2023, 2022, 2021, 2019, 2014, 2013, 2012,
	2011, 2010, 2008, 1995, 1992, 1991, 1990, 1989, 1988, 1987,
	1985, 1984, 1982, 1980, 100, 1978, 1977, 1976, 1975, 1974,
	1973, 132, 1972, 1971, 1970, 1969, 1968, 1966, 1965, 1963,
	1962, 116, 47, 91, 694, 150, 204, 156, 117, 1956,
	96, 181, 1954, 1951, 29, 108, 1946, 123, 119, 78,
	139, 86, 82, 59, 1945, 1943, 1942, 130, 1941, 1939,
	1938, 1937, 55, 1936, 67, 36, 26, 1935, 73, 1934,
	1933, 1932, 1928, 1922, 70, 1921, 57, 45, 1918, 1917,
	1916, 1915, 1914, 34, 1913, 40, 1912, 1911, 1910, 1907,
	1906, 1905, 1904, 14, 17, 19, 1903, 1902, 15, 2,
	1901, 136, 93, 71, 95, 1900, 159, 1898, 1897, 1896,
	144, 1891, 133, 1889, 1887, 1886, 1885, 9, 1884, 37,
	1882, 1881, 1879, 44, 1864, 1858, 1855, 85, 39, 109,
	81, 1854, 1853, 1852, 137, 16, 128, 0, 126, 35,
	1851, 118, 122, 1850, 99, 201, 106, 46, 1849, 43,
	61, 1848, 1847, 1845, 89, 75, 25, 1844, 83, 1843,
	90, 76, 1842, 94, 1840, 115, 1, 87, 1839, 131,
	1825, 1824, 1823, 113, 1822, 1820, 54, 111, 1819, 1815,
	1814, 30, 1812, 32, 21, 1811, 125, 143, 1810, 1809,
	1808, 114, 79, 69, 1807, 1806, 65, 1805, 107, 66,
	110, 1804, 682, 97, 64, 18, 1803, 141, 1801, 216,
	140, 127, 1800, 1799, 146, 1510, 142, 1798, 124, 10,
	1796, 1795, 11, 1794, 23, 1792, 1791, 1789, 1788, 6,
	1787, 1785, 1784, 3, 5, 1783, 4, 92, 63, 53,
	1782, 52, 58, 1780, 1779, 1778, 1777, 1773, 245, 1771,
	1770, 1769, 1768, 1767, 1766, 1765, 72, 1763, 1762, 1761,
	1760, 56, 1759, 1757, 1756, 1755, 1754, 31, 1753, 1752,
	20, 1751, 28, 1750, 1749, 1748, 12, 1746, 1745, 13,
	1744, 1743, 7, 8, 1742, 1740, 49, 33, 38, 68,
	62, 1739, 22, 1736, 77, 1735, 1734, 121, 1733, 88,
	1732, 1731, 138, 157, 1730, 134, 1729, 1728, 1726, 1725,
	1724, 1723, 1722, 1719, 1718, 135, 1717,
}

//line mysql_sql.y:6519
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 333, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 49, 305, 305, 304, 304, 303, 303, 302, 302,
	302, 301, 301, 301, 300, 300, 299, 299, 297, 297,
	298, 296, 295, 295, 293, 293, 291, 291, 292, 292,
	286, 286, 289, 289, 287, 287, 287, 287, 290, 285,
	285, 285, 284, 284, 48, 48, 48, 224, 224, 47,
	47, 238, 238, 238, 238, 238, 236, 236, 236, 236,
	235, 235, 234, 234, 239, 239, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 42,
	42, 42, 42, 45, 46, 232, 232, 232, 232, 232,
	233, 233, 233, 43, 44, 44, 223, 223, 228, 228,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 231, 231, 231, 230, 230, 229, 229, 36,
	36, 36, 39, 38, 222, 222, 222, 222, 222, 222,
	222, 222, 37, 37, 37, 37, 37, 37, 35, 35,
	34, 221, 221, 220, 41, 41, 41, 41, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 328, 328, 328,
	330, 330, 160, 160, 160, 324, 324, 325, 326, 327,
	327, 327, 50, 7, 33, 33, 268, 268, 171, 171,
	172, 172, 170, 170, 170, 170, 170, 170, 271, 272,
	167, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 25, 25, 32, 334, 334, 334, 30, 31,
	267, 267, 267, 29, 28, 27, 26, 26, 24, 23,
	23, 164, 164, 166, 166, 162, 335, 335, 244, 244,
	165, 165, 22, 22, 163, 163, 144, 161, 161, 161,
	6, 8, 8, 8, 8, 8, 13, 12, 11, 10,
	9, 5, 4, 275, 275, 275, 275, 275, 275, 313,
	313, 313, 314, 76, 76, 71, 71, 276, 276, 187,
	315, 315, 283, 283, 282, 282, 281, 281, 74, 74,
	75, 75, 63, 63, 51, 51, 288, 288, 288, 288,
	294, 294, 265, 265, 110, 110, 140, 140, 141, 141,
	52, 52, 53, 53, 53, 53, 53, 53, 321, 321,
	323, 323, 322, 73, 73, 69, 69, 70, 70, 70,
	68, 68, 67, 66, 66, 65, 64, 64, 64, 55,
	55, 54, 54, 54, 54, 54, 126, 126, 126, 56,
	56, 329, 329, 329, 269, 269, 269, 274, 274, 123,
	123, 124, 124, 122, 122, 57, 57, 58, 58, 58,
	58, 121, 121, 120, 59, 59, 60, 60, 62, 62,
	62, 62, 131, 131, 130, 130, 130, 130, 79, 79,
	129, 128, 128, 128, 78, 78, 77, 77, 72, 72,
	61, 61, 127, 336, 336, 125, 153, 153, 153, 159,
	159, 152, 152, 152, 152, 152, 158, 158, 154, 154,
	155, 155, 155, 3, 3, 3, 16, 16, 16, 16,
	20, 20, 331, 331, 14, 218, 218, 217, 217, 219,
	219, 219, 219, 213, 213, 214, 214, 214, 214, 215,
	215, 215, 216, 216, 216, 216, 212, 212, 211, 209,
	209, 209, 210, 210, 210, 210, 210, 210, 156, 156,
	15, 206, 206, 207, 207, 207, 208, 208, 200, 200,
	200, 200, 19, 204, 204, 205, 205, 205, 205, 205,
	201, 201, 203, 203, 199, 199, 199, 199, 199, 18,
	198, 198, 196, 196, 194, 194, 195, 195, 193, 193,
	193, 197, 197, 17, 270, 270, 240, 240, 243, 243,
	250, 250, 251, 251, 249, 249, 256, 256, 255, 255,
	254, 254, 253, 253, 252, 252, 247, 247, 246, 246,
	241, 241, 241, 241, 241, 242, 242, 245, 245, 248,
	248, 101, 101, 102, 102, 102, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 311, 311, 312, 104, 104,
	104, 108, 108, 108, 108, 108, 108, 103, 103, 105,
	105, 86, 86, 85, 85, 80, 80, 81, 81, 82,
	82, 83, 83, 84, 84, 84, 84, 84, 84, 226,
	226, 309, 309, 310, 310, 306, 306, 306, 308, 308,
	308, 308, 308, 307, 307, 87, 138, 138, 138, 157,
	157, 157, 137, 137, 137, 100, 100, 99, 99, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 225, 225, 168, 168, 169, 169, 118, 116,
	116, 117, 117, 117, 117, 114, 115, 113, 113, 113,
	113, 113, 112, 112, 111, 111, 111, 202, 202, 109,
	109, 107, 107, 107, 106, 106, 106, 257, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 179, 179, 184, 184, 320, 320, 319, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 96, 96, 96,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 280, 280, 280, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	332, 332, 332, 316, 316, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 135, 135, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 188,
	188, 189, 189, 277, 277, 277, 277, 277, 277, 278,
	278, 279, 279, 279, 279, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 177, 132, 132, 132, 190, 185, 185,
	186, 186, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 182, 182, 182, 182, 182, 174, 174, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 181, 181,
	183, 183, 192, 192, 192, 191, 191, 191, 191, 191,
	191, 191, 98, 98, 98, 98, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 89, 89, 89, 89, 93,
	93, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 94, 94, 94, 94, 92,
	92, 92, 92, 92, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 91,
	139, 139, 258, 258, 261, 261, 259, 259, 260, 262,
	262, 262, 263, 263, 263, 264, 264, 264, 266, 266,
	143, 143, 143, 149, 149, 142, 142, 150, 150, 151,
	151, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145,
}

var yyR2 = [...]int{
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 14, 0, 2, 1, 3, 3, 3, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 0, 3, 0, 3, 0, 3, 0, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 9, 4, 7, 0, 3, 7,
	4, 1, 3, 3, 3, 1, 0, 1, 1, 1,
	1, 3, 1, 4, 1, 3, 1, 2, 1, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 6, 3, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 6, 1, 4, 1, 3,
	3, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 0, 4, 2, 4, 1, 5,
	3, 2, 1, 2, 2, 4, 4, 5, 2, 1,
	7, 1, 3, 3, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 1, 1,
	1, 1, 6, 1, 7, 9, 0, 2, 0, 1,
	1, 2, 2, 2, 1, 4, 2, 2, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 5, 1, 1, 1, 5, 5,
	0, 1, 1, 2, 2, 3, 6, 7, 4, 7,
	8, 0, 2, 0, 2, 2, 1, 1, 1, 1,
	0, 1, 4, 5, 1, 3, 1, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 4, 4, 6, 4,
	4, 6, 4, 2, 1, 5, 4, 4, 2, 0,
	1, 3, 3, 1, 3, 1, 3, 1, 3, 4,
	0, 1, 0, 1, 1, 3, 1, 1, 0, 4,
	1, 3, 2, 1, 0, 8, 0, 4, 7, 4,
	0, 2, 0, 2, 0, 2, 0, 4, 1, 3,
	1, 1, 4, 3, 4, 5, 4, 5, 2, 3,
	1, 3, 6, 0, 3, 0, 1, 2, 4, 4,
	0, 1, 3, 1, 3, 2, 0, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 2, 7,
	7, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 2, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 3, 1, 1, 4, 4,
	4, 3, 2, 2, 2, 3, 2, 3, 0, 2,
	1, 1, 2, 2, 0, 1, 2, 4, 1, 3,
	1, 4, 3, 0, 1, 2, 0, 1, 2, 1,
	1, 0, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 11, 0, 1, 6, 0, 2, 1, 2, 2,
	2, 2, 2, 0, 1, 2, 2, 2, 2, 1,
	3, 2, 2, 2, 2, 2, 1, 3, 2, 1,
	3, 2, 0, 3, 3, 5, 5, 4, 1, 1,
	4, 1, 3, 1, 3, 2, 1, 1, 0, 1,
	1, 1, 11, 0, 2, 3, 2, 3, 1, 1,
	1, 3, 3, 4, 0, 2, 2, 2, 2, 5,
	1, 1, 0, 3, 0, 1, 1, 2, 4, 4,
	4, 0, 1, 10, 0, 1, 0, 6, 0, 4,
	0, 3, 1, 3, 4, 5, 0, 3, 1, 3,
	2, 3, 1, 2, 0, 6, 0, 2, 0, 2,
	4, 5, 4, 5, 1, 6, 5, 0, 3, 0,
	1, 0, 1, 1, 3, 2, 3, 3, 4, 4,
	3, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 5, 4, 1, 3, 3, 0, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 0, 1, 1, 3, 1,
	1, 2, 1, 7, 7, 7, 7, 8, 5, 0,
	1, 0, 1, 1, 1, 1, 3, 3, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 2, 2, 1,
	5, 6, 1, 2, 0, 1, 1, 2, 5, 0,
	1, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 3, 0,
	3, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 3, 5, 2, 2, 2, 2,
	1, 1, 2, 5, 6, 6, 6, 1, 1, 1,
	1, 0, 2, 0, 1, 1, 2, 4, 1, 2,
	2, 1, 2, 2, 2, 2, 2, 0, 1, 1,
	5, 4, 4, 5, 5, 5, 5, 4, 5, 5,
	5, 5, 5, 5, 5, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 5, 4, 6, 6, 7,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 2, 3, 2,
	4, 6, 2, 2, 4, 6, 4, 2, 2, 0,
	1, 2, 3, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 3, 0, 1,
	1, 3, 3, 3, 3, 3, 2, 3, 4, 3,
	4, 1, 3, 4, 3, 4, 1, 1, 1, 3,
	4, 4, 5, 3, 4, 5, 6, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 1,
	1, 3, 0, 1, 0, 3, 0, 3, 3, 0,
	3, 5, 0, 3, 5, 0, 1, 1, 0, 1,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -333, -2, -1, -3, -4, -5, -6, -40, -21,
	-7, -50, -34, -35, -36, -42, -47, -48, -49, -52,
	-16, -15, -14, 8, 10, -8, -160, -22, -23, -24,
	-26, -27, -28, -29, -30, -31, -32, -25, -33, 185,
	9, 48, -37, -38, -39, -43, -44, -45, -46, 293,
	299, 336, -53, -55, -17, -18, -19, -20, 181, -9,
	-10, -11, -12, -13, 203, 202, 26, 201, 182, 120,
	121, 123, 124, 30, -54, -321, 53, 183, -56, 408,
	6, 453, -63, 27, -85, -157, 57, -145, -148, 411,
	412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
	422, 423, 424, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 435, 436, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 405, 220, 244, 247, 254,
	120, 137, 131, 159, 151, 128, 224, 225, 64, 123,
	364, 74, 350, 335, 126, 239, 241, 243, 246, 226,
	147, 142, 238, 222, 140, 227, 28, 228, 164, 229,
	230, 410, 346, 275, 368, 352, 251, 333, 141, 347,
	242, 349, 165, 169, 356, 299, 135, 136, 354, 358,
	163, 200, 32, 407, 212, 359, 167, 162, 158, 367,
	255, 253, 161, 134, 157, 223, 37, 171, 170, 172,
	329, 330, 331, 332, 231, 232, 287, 355, 154, 143,
	279, 129, 18, 362, 207, 351, 300, 233, 248, 210,
	256, 166, 168, 214, 219, 409, 218, 252, 360, 139,
	211, 240, 206, 363, 130, 293, 302, 234, 124, 245,
	357, 366, 36, 315, 133, 127, 197, 121, 216, 221,
	235, 236, 237, 258, 257, 249, 155, 213, 160, 132,
	156, 122, 215, 365, 316, 452, 277, 318, 153, 150,
	217, 190, 361, 353, 125, 322, 317, 148, 259, 449,
	450, 451, 288, 274, 260, 261, 146, 204, 11, -161,
	19, 333, -41, 334, 185, 53, -157, -5, -4, -34,
	-52, 188, -60, -61, -62, -125, -127, -85, 53, -157,
	-235, -206, -234, -207, -237, -208, -156, 20, 182, 181,
	215, 10, 183, 297, 189, 8, 6, 298, 201, 9,
	299, 301, 302, 305, 306, 307, 31, 310, 311, 57,
	60, -157, -235, -206, 219, 226, -67, -68, -126, 15,
	5, -270, 318, 218, -200, -198, 308, 198, 197, 75,
	370, 187, 403, -143, -334, -267, 353, 352, -165, 351,
	344, 346, 181, 74, 152, 149, 189, 354, 32, 356,
	357, 347, 318, 125, 122, -222, 80, 130, 129, -222,
	218, 29, -228, 328, -227, -229, 356, 357, 367, 58,
	59, 355, -143, -157, 74, -68, -126, -67, -54, -55,
	-53, -55, 318, 218, 189, 188, 370, -323, 402, -322,
	-157, -269, -329, 20, -274, 178, 179, 180, 21, 22,
	-1, -74, 210, -85, 119, -60, -137, -157, 335, 89,
	-41, -41, 334, -324, -325, -326, -328, 185, 334, 333,
	119, -85, 30, -128, -129, -130, -131, 40, 44, 46,
	41, 42, 43, 47, -336, 23, -153, -159, 23, -154,
	60, -155, -148, 57, 58, 59, -53, -55, 50, 54,
	11, 54, 53, 454, 58, 295, 309, 318, 296, 308,
	190, 218, 309, 218, 344, 190, 300, 303, 304, 345,
	50, 191, 50, -284, 367, -51, 27, -70, 17, -56,
	-55, 16, 20, 21, -331, 188, 402, -196, 193, -196,
	189, -196, -164, 97, -164, -335, 11, 99, 217, 216,
	348, 345, -244, 349, 350, -165, -164, -165, 188, 370,
	30, 30, -268, 193, 360, 408, 128, 129, 130, -232,
	20, 29, 327, -206, 218, 54, 89, 19, -230, 89,
	100, -229, -229, -229, -230, -230, -103, 29, -156, 116,
	60, -103, 29, 119, -69, -70, -56, -55, -68, -67,
	-68, 55, 55, -268, -268, -268, -268, -268, 54, -323,
	-73, 53, -57, -58, 107, -180, -157, 81, -182, 57,
	-175, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 424, 425, 427, 428, 429, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 74, 333, 287, 318,
	148, 288, 146, 204, -176, -178, -302, -297, -173, 53,
	105, 106, 113, 82, -177, -257, 24, 84, 378, -133,
	-134, -135, -136, -298, -296, 60, 65, 68, 71, 72,
	70, 69, 144, 67, 118, -55, -316, -146, -273, -279,
	187, -277, 149, 145, 8, 111, 328, 116, -280, 59,
	58, 281, 282, 283, 370, 278, 284, 193, 42, 285,
	286, 289, 377, 290, 43, 291, 280, 208, 292, 381,
	380, 382, 374, 371, 369, 372, 373, 375, 376, -57,
	-275, 33, -52, 53, 30, 53, -157, -122, 12, 119,
	65, 60, -41, 55, 54, -327, 71, 72, -330, 163,
	155, -157, 53, -221, -220, -137, -61, -61, -61, -61,
	40, 40, 40, 45, 40, 45, 40, -130, -157, -159,
	55, -236, 188, 294, 214, -234, 215, 299, 302, -212,
	-211, -209, -156, -207, -239, -137, -156, 345, -236, -212,
	-211, 337, 448, -51, -180, -157, -66, -65, -180, 190,
	-196, -212, 81, -206, -155, -157, -122, -178, -122, -85,
	-164, -164, -166, -335, -162, -335, 345, -122, -244, -163,
	-157, -196, -212, 318, 24, 361, 362, 126, 129, 128,
	368, -233, 327, 20, -206, -227, -223, 60, 328, -211,
	-231, 50, 116, -281, -180, 29, -230, -230, -230, -231,
	-231, 115, -157, -51, -69, -51, -70, -212, -206, -157,
	-86, -85, -158, -155, -148, -322, 23, -72, -157, -121,
	54, -120, 11, -152, 80, 77, 78, 79, -157, 23,
	60, 119, -180, 96, -191, 89, 90, 91, 92, 93,
	94, 95, 53, 53, 53, 53, 53, 53, 53, 53,
	-189, 53, 53, 53, 53, 53, 53, 53, -189, 53,
	53, 53, 53, 53, 60, 60, 102, 101, 112, 105,
	106, 107, 108, 109, 110, 111, 103, 104, 99, 81,
	97, 98, 83, -55, -180, -186, -178, -178, -178, -178,
	-257, -184, -180, 53, -180, 53, 53, 53, -278, 53,
	53, -188, -189, 53, 60, 53, 53, 53, -178, 53,
	-121, -276, -187, -315, 447, -76, 55, -71, -157, -313,
	-314, -71, -75, -157, -68, -180, -150, -151, -142, -147,
	-154, -155, -148, 276, 186, 20, 80, 23, 25, 281,
	313, 83, 116, 16, 84, 149, 115, 283, 378, 282,
	181, 46, 380, 382, 381, 371, 369, 320, 324, 326,
	323, 370, 344, 29, 10, 26, 202, 21, 22, 109,
	183, 87, 88, 205, 24, 203, 72, 19, 49, 11,
	13, 14, 284, 319, 193, 192, 99, 337, 189, 44,
	8, 118, 27, 96, 321, 40, 76, 42, 97, 17,
	372, 373, 31, 336, 404, 209, 111, 285, 286, 47,
	81, 327, 70, 50, 77, 15, 45, 98, 184, 377,
	43, 325, 289, 291, 402, 290, 187, 6, 280, 379,
	30, 201, 41, 188, 345, 86, 191, 71, 208, 145,
	5, 75, 9, 48, 51, 374, 375, 376, 33, 85,
	12, 292, 408, 328, 338, 339, 340, 341, 342, 343,
	173, 174, 175, 176, 177, 250, 196, 194, 198, 199,
	447, 448, 178, 179, 271, 273, 152, 19, -41, -325,
	119, -72, -122, 54, 89, -78, -77, 50, 51, -79,
	50, -77, 40, 40, -73, -238, 107, 57, 54, -210,
	319, 454, 58, 55, 54, -238, 191, 60, 60, 54,
	18, 119, 54, -64, 25, 26, -85, 193, -85, -213,
	-214, 325, 24, -199, 51, -194, -195, -193, -197, 29,
	-122, -122, -122, -164, -158, -166, -161, -166, -162, 119,
	-144, -157, -213, 53, 127, 130, 130, 129, -206, 191,
	53, 89, -231, -231, -231, 29, -156, -51, -51, 50,
	54, 53, 55, 54, -122, -58, -59, -60, -180, -180,
	-180, -180, -157, 60, -157, 107, -174, 81, 274, 70,
	71, 72, -175, -192, 20, 260, 261, -185, -186, -180,
	-132, 21, 20, -132, -132, -180, -132, 107, -186, -186,
	55, 65, -317, -318, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 392, 393, 285, 280, 286, 284, 278,
	292, 287, 288, 148, 400, 401, 394, 395, 396, 397,
	398, 399, -132, -132, -132, -132, -132, -180, -332, 272,
	271, 273, -132, -132, -132, -132, -176, -176, -176, -176,
	-176, -176, -176, -176, -176, -176, -176, -176, -183, -190,
	-257, 53, 99, 97, 98, 83, -178, -176, -176, 55,
	54, -320, -319, 85, -180, -317, -185, -180, -185, -185,
	55, 55, -186, -185, -176, -185, -132, -122, 54, 53,
	55, 54, 33, 119, 54, 89, 55, 54, -69, 119,
	335, -157, 55, -68, -220, -180, -180, 53, -180, 11,
	119, 119, -211, 16, 408, -156, -137, 191, -212, -285,
	192, 377, -288, 349, -180, -180, -157, -65, -73, 81,
	53, -218, 408, 327, 326, 322, -215, -216, 321, 323,
	320, 324, 50, 266, 267, 268, 269, -193, -143, 115,
	229, -122, -164, -164, -166, -157, -218, 55, 130, -212,
	-167, 60, -223, -85, -85, -1, -157, -124, 13, 54,
	119, -174, 274, 70, -257, 55, 54, -180, -180, -180,
	23, -186, 55, 55, 55, 55, 11, -180, -180, -180,
	-180, -180, 55, 11, 11, -180, -180, -180, -180, -180,
	-186, -183, -178, -176, -176, -181, 205, 80, -180, -179,
	-319, 87, -180, 54, 51, 55, 11, 55, 55, 55,
	51, 55, 54, 55, -180, -124, -187, -283, -282, -281,
	33, -52, -71, -276, -157, -314, -281, -157, -150, -147,
	-155, -148, 65, -69, -72, -212, 107, 107, 57, -156,
	328, -156, -212, -224, 408, 27, -294, 343, 338, 340,
	119, 23, 24, -80, -81, -82, -87, -83, -137, -169,
	-84, 196, 194, 198, -310, 75, 199, 250, 76, 189,
	-217, -219, 329, 330, 331, 332, 80, -216, 60, 60,
	60, 60, -85, -149, 89, -149, -149, -122, -122, -164,
	-171, -172, -170, 276, -271, 328, 319, 55, 55, -123,
	14, 16, -60, -157, 107, -180, 55, 55, 55, -88,
	-94, 116, 149, 204, 148, 147, 145, 315, 316, 140,
	141, 142, 139, 55, -180, 55, 55, 55, 55, 55,
	-180, -180, 11, 55, 55, 55, 55, 55, -181, 80,
	-178, -175, 55, 88, -180, 86, -88, -103, -180, -103,
	-176, 55, -123, 55, 54, -276, 55, -156, 16, 23,
	-213, 299, 188, -265, 449, -292, 338, 16, 16, -52,
	-85, 55, 54, -89, -93, -90, -92, -91, -95, -94,
	149, 150, 116, 153, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 30, 204, 145, 146, 147, 148,
	165, 131, 151, 406, 173, 132, 174, 133, 175, 134,
	176, 135, 136, 177, 137, -84, -157, 76, -309, -310,
	-196, -309, 76, 53, -219, 65, 65, 65, 65, -216,
	53, -103, -105, -156, 116, 60, -122, -170, 277, 31,
	118, 279, 29, 275, 16, -180, -186, 55, -258, -260,
	53, -259, 53, -258, -261, 53, -258, -96, 136, 135,
	-96, -262, 53, -262, -263, 53, -262, 55, 55, 55,
	-180, -175, -180, 55, 55, 55, 19, 55, 55, -281,
	-156, -156, -224, 300, -85, -110, 450, 60, 16, 60,
	-290, 60, -73, -101, -102, -119, 313, 220, -197, 224,
	64, 225, 335, 226, 189, 228, 229, 230, 200, 231,
	232, 233, 328, 234, 235, 236, 237, 296, 5, 262,
	-82, -100, -99, -97, 70, 81, 29, 313, -98, 64,
	115, 243, 221, 244, -118, -168, 194, 75, 76, 301,
	-169, -264, 316, 315, -258, -259, -259, -258, -258, 53,
	53, -258, -261, -261, -258, -306, -307, -157, -307, -157,
	-306, -306, -196, -180, -201, -203, -137, 53, 65, -272,
	-167, 65, 65, 65, 65, 65, 55, -180, -286, -244,
	-140, 451, 65, 60, 340, 23, -240, 210, 54, -119,
	-149, -149, -143, 115, -149, -149, -149, -149, 227, 227,
	-149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
	-149, -149, -149, -149, 53, -97, 70, -176, 60, -105,
	-106, 29, 242, 238, -107, 29, 222, 223, -109, 53,
	250, 76, 76, -85, -266, 317, -139, 60, -139, 53,
	51, 259, 53, 53, 53, -307, 55, 55, 54, -258,
	-180, 278, 55, 55, 55, 55, 54, 55, 54, 55,
	-293, 343, -289, -287, 338, 339, 340, 341, 53, 16,
	-52, 16, -119, 65, 65, -149, -149, 65, 60, 60,
	60, -149, -149, 65, 60, -159, 65, 65, 65, 65,
	29, 60, -108, 29, 238, 242, 239, 240, 241, 65,
	29, 65, 29, 65, 29, -157, 53, -311, -312, 60,
	65, 53, -202, 53, 55, 54, 55, -201, -308, 266,
	267, 268, 270, 269, -308, -201, -201, -201, 53, -226,
	-225, 251, 81, -204, -203, -64, 55, 65, 65, -295,
	192, -291, 342, -287, 16, 340, 16, 16, -141, -157,
	-290, -241, 252, 253, -242, -248, 255, -103, -103, 60,
	60, -104, 221, -86, 55, 54, 89, 55, -180, -112,
	-111, 404, -201, 60, 55, 55, 55, 55, -201, 251,
	-205, 200, 64, 408, 264, 265, -64, 55, 55, -301,
	53, 65, -292, 16, -290, 16, -290, -290, 55, 54,
	-246, 256, 53, -244, 53, -244, 76, 267, 222, 223,
	55, -312, 60, 55, -116, -117, -114, -115, 50, 347,
	248, 249, 55, -204, -204, -204, -204, 55, -149, 60,
	263, -305, 30, 55, -300, -299, -138, -296, -157, 343,
	60, -290, -157, -243, 257, 65, -176, 53, -176, 53,
	-245, 254, 53, -225, -115, 50, -114, 50, 10, 9,
	-118, 65, -155, -304, -303, -302, 55, 54, 119, -250,
	53, 16, 55, -239, 55, -239, 53, 89, -176, -113,
	245, 246, 30, 129, -113, 54, 89, -299, -157, -251,
	-249, 210, -242, 55, 55, -239, 65, 55, 70, 29,
	247, -303, 29, -180, 119, 55, 54, 57, -247, 258,
	55, -157, -249, -252, 33, 65, -256, -253, 53, -119,
	212, -256, -119, -255, -254, 257, 213, 55, 54, 57,
	53, -254, -253, -186, 55,
}

var yyDef = [...]int{
	20, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	453, 454, 455, 0, 0, 280, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 213, 0,
	0, 179, 159, 160, 161, 119, 120, 121, 122, 0,
	0, 0, 340, -2, 456, 457, 458, 459, -2, 281,
	282, 283, 284, 285, 202, 203, 204, -2, 0, 172,
	0, 164, 164, 0, 360, 0, 0, 0, 371, 0,
	384, 20, 318, 0, 323, 633, 669, 670, 671, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
	1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
	1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
	1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
	1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
	1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 0, 188,
	0, 1227, 192, 0, 0, 0, 277, 184, 185, 186,
	187, 0, 0, 406, 407, 430, 433, 436, 0, 178,
	0, 0, 80, 501, 82, 503, 0, 86, 88, 89,
	-2, 93, 94, 95, 96, 97, 98, 99, 0, 101,
	1235, 103, 1296, 106, 107, 108, 0, 117, 118, -2,
	-2, 498, 0, 0, 1284, 62, -2, 0, 0, 0,
	376, 462, 532, 532, 0, 532, 545, 509, 510, 511,
	530, 531, 261, 261, 0, 0, 253, 254, 0, 270,
	261, 270, 0, 1030, 0, 0, 245, 246, 247, 251,
	252, 271, 216, 173, 174, 163, 0, 168, 0, 162,
	1286, 0, 133, 0, 138, 0, 1234, 1300, 1249, 0,
	0, 1267, 0, 157, -2, 355, 0, 361, 360, 360,
	0, 360, 216, 216, 216, 216, 216, 348, 0, 350,
	353, 0, 0, 385, 386, 381, 382, 383, 387, 388,
	3, 0, 0, 322, 0, 393, 189, 672, 0, 0,
	193, 194, 0, 0, 205, 0, 208, 197, 198, 199,
	0, 0, 0, 0, 0, 0, 0, 421, 0, 0,
	420, 0, 0, 0, 0, 434, 435, 437, 0, 439,
	440, 448, 449, 450, 451, 452, 0, 360, 76, 0,
	0, 0, 0, 0, 505, 87, 116, 90, 91, 0,
	111, 113, 115, 114, 100, 112, 102, 104, 105, 110,
	76, 0, 0, 0, 63, 343, 0, 324, 0, 373,
	375, 0, 377, 378, 0, 532, 463, 0, 0, 0,
	0, 0, 393, 0, 393, 0, 266, 267, 261, 261,
	255, 263, 0, 268, 269, 0, 393, 0, 0, 532,
	1031, 1032, 0, 0, 0, 0, 166, 0, 171, 123,
	128, 126, 127, 129, 0, 0, 0, 0, 0, 155,
	156, 0, 0, 0, 0, 0, 146, 149, 627, 628,
	499, 150, 151, 0, 324, 356, 372, 374, 355, -2,
	0, 369, 370, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 401, 395, 397, 441, 28, 0, 921, 669,
	926, -2, 1359, 1360, 1361, 1362, 1363, 1364, 1365, -2,
	1367, -2, -2, 1370, 1371, 1372, 1374, -2, -2, -2,
	-2, -2, -2, 1381, -2, -2, -2, 1385, 1386, -2,
	-2, 1389, 1390, 1391, 1392, 1393, -2, -2, -2, -2,
	-2, -2, -2, -2, 937, 740, 741, 742, 743, 0,
	0, 0, 0, 0, 750, 751, 0, 763, 0, 757,
	758, 759, 760, 38, 39, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 884, 727, 0, 0, 0, 869,
	0, 859, 0, 897, 0, 0, 0, 0, 0, 40,
	41, 875, 877, 878, 880, 881, 882, 883, 886, 887,
	888, 891, 892, 893, 894, 895, 896, 899, 901, 871,
	872, 873, 874, 863, 864, 865, 866, 867, 868, 401,
	292, 310, 294, 0, 299, 0, 634, 360, 0, 0,
	190, 0, 195, 0, 0, 207, 209, 210, 211, 200,
	201, 278, 0, 393, 181, 0, 424, 418, 0, 411,
	422, 423, 414, 0, 416, 0, 412, 413, 353, 438,
	432, 0, 77, 78, 79, 81, 92, 0, 0, 70,
	486, 492, 489, 502, 0, 84, 504, 109, 0, 65,
	0, 0, 0, 344, 357, 28, 362, 363, 366, 0,
	0, 473, 0, 500, 524, -2, 242, 262, 243, 393,
	393, 393, 261, 0, 263, 0, 263, 258, 0, 272,
	274, 0, 473, 1327, 217, 175, 176, 0, 0, 170,
	0, 0, 130, 131, 132, 139, 134, 136, 0, 0,
	140, 152, 153, 154, 316, 317, 0, 0, 0, 144,
	145, 0, 158, 342, 324, 346, 324, 286, 287, 0,
	289, 631, 290, 446, 447, 351, 0, 0, 428, 393,
	0, 402, 0, 398, 0, 0, 0, 0, 442, 0,
	444, 0, 916, 0, 0, 945, 946, 947, 948, 949,
	950, 951, 908, 904, 904, 904, 0, 904, 0, 0,
	844, 0, 0, 904, 904, 904, 904, 904, 845, 0,
	904, 904, 904, 904, 858, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 910, 0, 746, 747, 748, 749,
	752, 0, 764, 0, 0, 908, 908, 908, 847, 0,
	0, 849, 860, 0, 853, 908, 0, 908, 857, 904,
	393, 293, 307, 0, 311, 0, 0, 303, 305, 298,
	300, 0, 0, 320, 355, 394, 673, 0, 1037, -2,
	1039, -2, -2, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 0, 196, 206,
	0, 0, 360, 0, 0, 408, 425, 0, 0, 409,
	0, 410, 415, 417, 431, 0, 71, 75, 0, 488,
	0, 0, 491, 83, 0, 0, 0, 59, 326, 0,
	0, 0, 0, 365, 367, 368, 353, 0, 0, 465,
	474, 0, 533, 0, 0, 529, -2, 536, 0, 542,
	244, 248, 249, 393, 264, 261, 265, 261, 263, 0,
	273, 276, 465, 0, 177, 165, 167, 0, 125, 0,
	0, 0, 141, 142, 143, 147, 148, 345, 347, 0,
	0, 20, 354, 0, 391, 396, 403, 404, 912, 913,
	914, 915, 443, 445, 29, 399, 917, 0, 919, 922,
	927, 928, 924, 0, 942, -2, -2, 0, 909, 910,
	0, 905, 906, 0, 0, 0, 0, 0, 0, 0,
	861, 0, 0, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 0, 0, 0, 0, 0, 0, 0, 810,
	811, 812, 0, 0, 0, 0, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 929, 940,
	941, 0, 0, 0, 0, 0, 938, 933, 0, 744,
	0, 761, 765, 0, 0, 903, 0, 910, 0, 0,
	870, 848, 0, 0, 0, 0, 0, 391, 310, 312,
	0, 0, 310, 0, 0, 0, 319, 0, 291, 0,
	0, 279, 212, 355, 182, 183, 426, 0, 419, 0,
	0, 0, 487, 0, 0, 490, 85, 0, 67, 0,
	60, 61, 330, 0, 358, 359, 29, 364, 0, 0,
	635, 464, 0, 475, 476, 477, 478, 479, 0, 0,
	0, 0, 0, 525, 526, 527, 528, 537, 1033, 1033,
	1033, 256, 393, 393, 261, 275, 218, 0, 169, 124,
	0, 230, 135, 288, 632, 0, 429, 389, 0, 0,
	0, 918, 920, 923, 925, 798, 0, 0, 0, 0,
	0, 0, 787, 781, 782, 862, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 0, 0, 0,
	0, 930, 938, 934, 0, 931, 0, 0, 911, 0,
	766, 0, 0, 0, 0, 799, 0, 803, 846, 850,
	0, 854, 0, 856, 0, 389, 308, 0, 313, 314,
	310, 297, 304, 296, 306, 301, 302, 321, 674, 1038,
	1035, 1036, 191, 180, 0, 69, 72, 73, 74, 493,
	0, 494, 473, 66, 0, 0, 332, 48, 0, 0,
	0, 0, 0, 0, 636, 637, 639, 640, 0, 0,
	642, 696, 0, 651, 532, 651, 0, 0, 653, 654,
	466, 467, 0, 0, 0, 0, 0, 481, 482, 483,
	484, 485, 0, 0, 1034, 0, 0, 259, 257, 393,
	214, 219, 220, 0, 224, 0, 0, 137, 352, 379,
	0, 0, 405, 30, 400, 911, 783, 784, 785, 0,
	768, 1012, 1016, 771, 1012, 1014, 1012, 777, 777, 1019,
	1019, 1022, 1019, 786, 0, 805, 788, 789, 792, 790,
	0, 0, 0, 804, 793, 794, 780, 907, 932, 0,
	939, 935, 745, 753, 762, 0, 0, 0, 0, 0,
	0, 791, 380, 309, 0, 295, 427, 497, 0, 0,
	67, 0, 0, 334, 0, 331, 0, 0, 0, 460,
	353, -2, 0, -2, 1025, 966, 967, 968, 1012, 970,
	1016, 1016, 1012, 1012, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 0, 0, 989, 1012, 1014, 1014, 1012,
	1009, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 641, 697, 663, 663, 652,
	663, 663, 532, 0, 468, 469, 470, 471, 472, 480,
	0, 538, 539, 629, 630, 540, 260, 221, 222, 223,
	0, 226, 227, 229, 0, 390, 392, 754, 769, 1013,
	0, 770, 0, 772, 773, 0, 774, 775, 778, 779,
	776, 985, 0, 986, 987, 0, 988, 802, 807, 808,
	0, 936, 767, 755, 756, 800, 0, 851, 855, 315,
	495, 496, 64, 68, 50, 336, 0, 333, 0, 327,
	329, 58, 0, 546, -2, 583, 1033, 1033, 0, 1033,
	1033, 1033, 1033, 0, 0, 1033, 1033, 1033, 1033, 1033,
	1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 0,
	638, 665, -2, 677, 679, 0, 0, 682, 683, 0,
	0, 0, 0, 719, 689, 0, 0, 954, 955, 0,
	695, 1028, 1026, 1027, 969, 994, 995, 996, 997, 0,
	0, 990, 991, 992, 993, 0, 655, 664, 0, 664,
	0, 0, 663, 0, 0, 520, 1012, 0, 0, 228,
	215, 0, 0, 0, 0, 0, 809, 0, 44, 0,
	325, 0, 335, 49, 0, 0, 543, 0, 541, 585,
	0, 0, 1033, 1033, 0, 0, 0, 0, 1033, 1033,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 678, 680, 681, 684, 685,
	686, 724, 725, 726, 687, 721, 722, 723, 688, 0,
	0, 952, 953, 717, 965, 1029, 0, 1010, 0, 0,
	0, 0, 0, 0, 0, 0, 649, 513, 0, 366,
	0, 225, 1018, 1017, 1015, 1020, 0, 1023, 0, 801,
	42, 46, 51, 52, 0, 0, 0, 0, 0, 0,
	461, 579, 584, 586, 587, 0, 0, 590, 591, 592,
	593, 0, 0, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 621, 622, 623, 624, 625, 626, 606,
	607, 608, 609, 610, 611, 618, 0, 0, 615, 0,
	0, 0, 712, 0, 1007, 0, 1008, 0, 656, 658,
	659, 660, 661, 662, 657, 0, 0, 0, 0, 648,
	650, 692, 0, 512, 521, 522, 366, 0, 0, 31,
	0, 48, 0, 53, 0, 0, 0, 0, 0, 338,
	328, 568, 0, 0, 574, 0, 580, 588, 589, 594,
	595, 612, 0, 0, 614, 0, 0, 720, 0, 699,
	713, 0, 0, 1011, 513, 513, 513, 513, 0, 693,
	514, 1033, 0, 0, 518, 519, 523, 1021, 1024, 22,
	0, 0, 45, 0, 54, 0, 56, 57, 337, 0,
	548, 0, 0, 0, 0, 0, 577, 0, 619, 620,
	613, 616, 617, 690, 698, 700, 701, 702, 0, 714,
	715, 716, 718, 643, 644, 645, 646, 0, 0, 516,
	0, 21, 0, 32, 0, 34, 36, 37, 666, 43,
	47, 55, 339, 550, 0, 569, 0, 0, 0, 0,
	0, 0, 0, 691, 703, 0, 704, 0, 0, 0,
	647, 515, 517, 23, 24, 0, 33, 0, 0, 547,
	0, 579, 570, 0, 572, 0, 0, 0, 0, 705,
	707, 708, 0, 0, 706, 0, 0, 35, 667, 0,
	552, 0, 566, 571, 573, 0, 578, 576, 709, 711,
	710, 25, 26, 27, 0, 551, 0, 564, 549, 0,
	575, 668, 553, -2, 0, 567, 554, -2, 0, 562,
	0, 555, 563, 0, 558, 0, 0, 557, 0, -2,
	0, 559, -2, 0, 565,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 110, 102, 3,
	53, 55, 107, 105, 54, 106, 119, 108, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 453,
	90, 89, 91, 3, 454, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 112, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 113,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 92, 93, 94, 95, 96, 97, 98,
	99, 100, 103, 104, 109, 111, 114, 115, 116, 117,
	118, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:504
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:510
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:533
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:537
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 21:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:543
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				File:              yyDollar[5].str,
				DuplicateHandling: yyDollar[6].duplicateKeyUnion(),
				Table:             yyDollar[9].tableNameUnion(),
				Fields:            yyDollar[10].fieldsUnion(),
				Lines:             yyDollar[11].linesUnion(),
				IgnoredLines:      uint64(yyDollar[12].int64ValUnion()),
				ColumnList:        yyDollar[13].loadColumnsUnion(),
				Assignments:       yyDollar[14].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:558
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:562
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:568
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:572
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:578
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:585
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:594
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:598
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:602
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:607
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:615
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:621
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:630
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:641
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:645
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:651
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:655
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:661
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:685
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//        	yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:704
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:708
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:713
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:717
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:725
		{
			yyVAL.str = ""
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:729
		{
			yyVAL.str = yyDollar[3].str
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:734
		{
			yyVAL.str = "\n"
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:738
		{
			yyVAL.str = yyDollar[3].str
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:743
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:747
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:771
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:775
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:781
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:787
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:805
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:822
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:845
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:849
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:853
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:858
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:862
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = &tree.Grant{
				Privileges:  yyDollar[2].privilegesUnion(),
				ObjType:     yyDollar[4].objectTypeUnion(),
				Level:       yyDollar[5].privilegeLevelUnion(),
				Users:       yyDollar[7].usersUnion(),
				GrantOption: yyDollar[9].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:878
		{
			yyLOCAL = &tree.Grant{
				IsGrantRole:      true,
				RolesInGrantRole: yyDollar[2].rolesUnion(),
				Users:            yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:886
		{
			yyLOCAL = &tree.Grant{
				IsProxy:     true,
				ProxyUser:   yyDollar[4].userUnion(),
				Users:       yyDollar[6].usersUnion(),
				GrantOption: yyDollar[7].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:896
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:900
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:910
		{
			yyLOCAL = &tree.Revoke{
				Privileges: yyDollar[2].privilegesUnion(),
				ObjType:    yyDollar[4].objectTypeUnion(),
				Level:      yyDollar[5].privilegeLevelUnion(),
				Users:      yyDollar[7].usersUnion(),
				Roles:      nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:920
		{
			yyLOCAL = &tree.Revoke{
				IsRevokeRole:      true,
				RolesInRevokeRole: yyDollar[2].rolesUnion(),
				Users:             yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:930
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:936
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_GLOBAL,
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:942
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE,
				DbName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:949
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				DbName:  yyDollar[1].str,
				TabName: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:957
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:965
		{
			yyLOCAL = tree.OBJECT_TYPE_NONE
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:969
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:973
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:977
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:983
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:987
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:993
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1000
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1009
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1013
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1019
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1023
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1027
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1031
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1035
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1039
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1043
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1047
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1051
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1055
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1059
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1063
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1067
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1071
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1075
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1079
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1083
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1087
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1091
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1159
		{
			yyLOCAL = yyDollar[3].setRoleUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1165
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1173
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL_EXCEPT, Roles: yyDollar[3].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1177
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_DEFAULT, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1181
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1185
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetRole
//line mysql_sql.y:1189
		{
			yyLOCAL = &tree.SetRole{Type: tree.SET_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1195
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1209
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1215
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:1226
		{
			yyVAL.str = yyDollar[3].str
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1232
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:1236
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1250
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1259
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1267
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1275
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1298
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1321
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1328
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1335
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     yyDollar[1].str,
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1343
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1350
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:1357
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  yyDollar[1].str,
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1366
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1370
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:1374
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1380
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1384
		{
			yyVAL.str = yyDollar[1].str
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1391
		{
			yyVAL.str = yyDollar[1].str + "." + yyDollar[3].str
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1402
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1408
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1413
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1417
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1421
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1425
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1429
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1433
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1437
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:1441
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1447
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1451
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1455
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1459
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1469
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1475
		{
			yyLOCAL = &tree.Use{Name: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1479
		{
			yyLOCAL = &tree.Use{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1485
		{
			yyLOCAL = &tree.Update{
				Table:   yyDollar[2].tableExprUnion(),
				Exprs:   yyDollar[4].updateExprsUnion(),
				Where:   yyDollar[5].whereUnion(),
				OrderBy: yyDollar[6].orderByUnion(),
				Limit:   yyDollar[7].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1498
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1502
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1508
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1517
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1523
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1528
		{
			st := &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewExplainStmt(st, "")
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1533
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1537
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1541
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1545
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1553
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1561
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1571
		{
			explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
			explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1594
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:1598
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:1604
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1610
		{
			yyVAL.str = yyDollar[1].str
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1615
		{
			yyVAL.str = "true"
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1616
		{
			yyVAL.str = "false"
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:1617
		{
			yyVAL.str = yyDollar[1].str
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1622
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1632
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: false,
				Users:      yyDollar[4].usersUnion(),
				TlsOpts:    yyDollar[5].tlsOptionsUnion(),
				ResOpts:    yyDollar[6].resourceOptionsUnion(),
				MiscOpts:   yyDollar[7].userMiscOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1643
		{
			auth := &tree.User{
				AuthString: yyDollar[9].str,
				ByAuth:     true,
			}
			yyLOCAL = &tree.AlterUser{
				IfExists:   yyDollar[3].boolValUnion(),
				IsUserFunc: true,
				UserFunc:   auth,
			}
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1656
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1660
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1665
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1669
		{
			yyLOCAL = yyDollar[1].userMiscOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1675
		{
			yyLOCAL = []tree.UserMiscOption{yyDollar[1].userMiscOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.UserMiscOption
//line mysql_sql.y:1679
		{
			yyLOCAL = append(yyDollar[1].userMiscOptionsUnion(), yyDollar[2].userMiscOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1685
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1689
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1693
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1697
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1701
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:1705
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1711
		{
			yyVAL.item = nil
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1716
		{
			yyVAL.item = nil
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1738
		{
			yyLOCAL = &tree.ShowTarget{Target: yyDollar[2].str, Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1742
		{
			yyLOCAL = &tree.ShowTarget{Target: "charset", Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1748
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: *yyDollar[4].tableNameUnion(),
				Where:     yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1762
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1772
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1781
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1785
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1789
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1795
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1801
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1807
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1813
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1823
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1835
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1841
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1853
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1866
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:1870
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1875
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1879
		{
			yyVAL.str = yyDollar[2].str
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1885
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1898
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1902
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1908
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1912
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1918
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1922
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1931
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1935
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:1939
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].str, yyDollar[3].str, yyDollar[1].str})
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1955
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1964
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1973
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].str),
				TableName: *yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1983
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1989
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].str), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1995
		{
			yyLOCAL = &tree.Delete{
				Table:   yyDollar[3].tableExprUnion(),
				Where:   yyDollar[4].whereUnion(),
				OrderBy: yyDollar[5].orderByUnion(),
				Limit:   yyDollar[6].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2010
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2019
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2026
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2032
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2040
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2047
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:2054
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2073
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2077
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:2081
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:2087
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2096
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2100
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2106
		{
			yyVAL.str = yyDollar[1].str
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2110
		{
			yyVAL.str = yyDollar[3].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2116
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:2120
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2126
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2131
		{
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2135
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2142
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:2146
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2153
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2158
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2162
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2168
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2172
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2178
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2182
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2187
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:2191
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2204
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2211
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2218
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:2236
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2255
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:2261
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2268
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2272
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2285
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:2289
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2294
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2298
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2305
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2310
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2317
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2323
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2327
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Ep: yyDollar[3].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2331
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), OrderBy: yyDollar[2].orderByUnion(), Limit: yyDollar[3].limitUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2335
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2339
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:2343
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2349
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:2356
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2365
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:2369
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:2375
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].str), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2383
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2387
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2392
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2396
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2402
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2406
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:2410
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2415
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2419
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2425
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2431
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:2435
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:2441
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2446
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2450
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:2454
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2461
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2465
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2471
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2475
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2485
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2495
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2505
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2517
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2525
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2543
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:2554
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2572
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2576
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2580
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2589
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2598
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:2602
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2607
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:2611
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2617
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:2621
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2627
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2631
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: tree.UnrestrictedIdentifier(yyDollar[2].str)}
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2635
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:2639
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].str, yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2644
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2652
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:2658
		{
			yyLOCAL = &tree.From{
				Tables: yyDollar[2].tableExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2666
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:2670
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2680
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2689
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2699
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2708
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2718
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2722
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2732
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2736
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2740
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2744
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2750
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2754
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2760
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2766
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2770
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2774
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2780
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2784
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2790
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:2794
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2800
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2804
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2810
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:2814
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[3].str),
					Cols:  yyDollar[4].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:2827
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2832
		{
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2833
		{
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:2837
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2849
		{
			yyVAL.str = ""
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2853
		{
			yyVAL.str = yyDollar[1].str
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2857
		{
			yyVAL.str = yyDollar[2].str
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2866
		{
			yyVAL.str = ""
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2870
		{
			yyVAL.str = yyDollar[1].str
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2874
		{
			yyVAL.str = yyDollar[2].str
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2878
		{
			yyVAL.str = yyDollar[1].str
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:2882
		{
			yyVAL.str = yyDollar[2].str
		}
	case 460:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2912
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2922
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[8].tableNameUnion(),
				ColNames:    yyDollar[9].identifierListUnion(),
				AsSource:    yyDollar[11].selectUnion(),
				Temporary:   yyDollar[2].boolValUnion(),
				IfNotExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2933
		{
		}
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2938
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Users:       yyDollar[4].usersUnion(),
				TlsOpts:     yyDollar[5].tlsOptionsUnion(),
				ResOpts:     yyDollar[6].resourceOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2948
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2952
		{
			yyLOCAL = yyDollar[2].resourceOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2958
		{
			yyLOCAL = []tree.ResourceOption{yyDollar[1].resourceOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ResourceOption
//line mysql_sql.y:2962
		{
			yyLOCAL = append(yyDollar[1].resourceOptionsUnion(), yyDollar[2].resourceOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2968
		{
			yyLOCAL = &tree.ResourceOptionMaxQueriesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2972
		{
			yyLOCAL = &tree.ResourceOptionMaxUpdatesPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2976
		{
			yyLOCAL = &tree.ResourceOptionMaxConnectionPerHour{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ResourceOption
//line mysql_sql.y:2980
		{
			yyLOCAL = &tree.ResourceOptionMaxUserConnections{Count: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2986
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2993
		{
			t := &tree.TlsOptionNone{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:2998
		{
			t := &tree.TlsOptionSSL{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3003
		{
			t := &tree.TlsOptionX509{}
			yyLOCAL = []tree.TlsOption{t}
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3008
		{
			yyLOCAL = yyDollar[2].tlsOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3014
		{
			yyLOCAL = []tree.TlsOption{yyDollar[1].tlsOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3018
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[3].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TlsOption
//line mysql_sql.y:3022
		{
			yyLOCAL = append(yyDollar[1].tlsOptionsUnion(), yyDollar[2].tlsOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3028
		{
			yyLOCAL = &tree.TlsOptionIssuer{Issuer: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3032
		{
			yyLOCAL = &tree.TlsOptionSubject{Subject: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3036
		{
			yyLOCAL = &tree.TlsOptionCipher{Cipher: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TlsOption
//line mysql_sql.y:3040
		{
			yyLOCAL = &tree.TlsOptionSan{San: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3046
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3050
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3056
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthPlugin: yyDollar[2].authRecordUnion().AuthPlugin,
				AuthString: yyDollar[2].authRecordUnion().AuthString,
				HashString: yyDollar[2].authRecordUnion().HashString,
				ByAuth:     yyDollar[2].authRecordUnion().ByAuth,
			}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3069
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3073
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:3077
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3082
		{
			yyLOCAL = &tree.AuthRecord{}
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3086
		{
			yyLOCAL = &tree.AuthRecord{
				AuthString: yyDollar[3].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3093
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3099
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				AuthString: yyDollar[5].str,
				ByAuth:     true,
			}
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3107
		{
			yyLOCAL = &tree.AuthRecord{
				AuthPlugin: yyDollar[3].str,
				HashString: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AuthRecord
//line mysql_sql.y:3114
		{
			yyLOCAL = &tree.AuthRecord{
				HashString: yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3126
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3135
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3139
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3145
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: "%"}
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3149
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3153
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].str, HostName: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3162
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3166
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3170
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:3174
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3180
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].str),
				Table:       *yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3199
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3203
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3225
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3229
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3233
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3237
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:3241
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3247
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:3251
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3257
		{
			// Order is parsed but just ignored as MySQL did.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:3262
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3267
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3271
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3275
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3279
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:3283
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3289
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:   yyDollar[3].ifNotExistsUnion(),
				Name:          tree.Identifier(yyDollar[4].str),
				CreateOptions: yyDollar[5].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3303
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3307
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3312
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3316
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3322
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:3326
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3332
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3336
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:3340
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3345
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3349
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3355
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3367
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3371
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3376
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:3380
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3390
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3394
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3403
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3407
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3413
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:3417
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3423
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:3432
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].str),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3442
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3446
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3452
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:3456
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3462
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:3469
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].str),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3478
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3482
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3487
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:3491
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3496
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3500
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3510
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3514
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3525
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3533
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3541
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3549
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3560
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:3570
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3580
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3584
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3589
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3593
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3598
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3602
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3608
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3612
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:3616
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3622
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3626
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3630
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3634
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3638
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3642
		{
			yyLOCAL = tree.NewTableOptionComment(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3646
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3650
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3654
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3658
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3662
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3666
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3670
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3674
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3678
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3682
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3686
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3690
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3694
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3698
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3702
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3706
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3710
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3714
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3718
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3722
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3726
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].str, yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3730
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:3734
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3741
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:3745
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:3751
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3756
		{
			yyVAL.str = ""
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3760
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3764
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3770
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3774
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3778
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3782
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3786
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:3790
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3804
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:3808
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3817
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3822
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].str), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].str), prefix)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3828
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3835
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:3839
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3845
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3849
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3855
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.Name = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3865
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3871
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3880
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3889
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invail the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3912
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3921
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:3931
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3939
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3945
		{
			yyVAL.str = ""
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3949
		{
			yyVAL.str = yyDollar[1].str
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3959
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3965
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:3971
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3985
		{
			yyVAL.str = ""
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:3992
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:3998
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4002
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4006
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4017
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4021
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:4025
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].str, yyDollar[3].str, yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4030
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4034
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4040
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:4044
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4050
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4054
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4058
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4062
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4066
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4070
		{
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4074
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4078
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4082
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4086
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4090
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4094
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:4098
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4108
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4112
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4117
		{
			yyVAL.str = ""
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4121
		{
			yyVAL.str = yyDollar[1].str
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4127
		{
			yyVAL.str = ""
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4131
		{
			yyVAL.str = yyDollar[2].str
		}
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:4137
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4148
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4158
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4165
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4172
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:4179
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4188
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4194
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4200
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4204
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4208
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4212
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:4216
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4221
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4228
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4232
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:4236
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4241
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:4245
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4250
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4254
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:4270
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4276
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4280
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4284
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4288
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4292
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4296
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4300
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4304
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4308
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4312
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4316
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4320
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4324
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4330
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4334
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4338
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4342
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4346
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4350
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4354
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4358
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4362
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4366
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4370
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4374
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4379
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4387
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4391
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4395
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4404
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4408
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4412
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4416
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4421
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4425
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4430
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4434
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4440
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:4444
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:4450
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4460
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4473
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4486
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4498
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4512
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Precision:          yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4527
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4542
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:4559
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4574
		{
		}
	case 780:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4580
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4589
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4597
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4605
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4614
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4623
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4632
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[4].exprsUnion(),
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4641
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{es},
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4650
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4659
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4668
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4677
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4686
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4695
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4704
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4720
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4728
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4736
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4744
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4752
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			timeUinit := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4761
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4769
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4778
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4787
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4795
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4803
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4812
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg1 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4832
		{
			yyVAL.str = yyDollar[1].str
		}
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4868
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4880
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4894
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4902
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4909
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4916
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4928
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4936
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4947
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4956
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4965
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4973
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4983
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4991
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:4999
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5009
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5013
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5019
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5023
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5042
		{
		}
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5044
		{
		}
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5084
		{
			name := tree.SetUnresolvedName("interval")
			arg2 := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5094
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5098
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:5102
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:5108
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5113
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5117
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5123
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5127
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5134
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5138
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5142
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5150
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5154
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5158
		{
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5162
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5166
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5171
		{
			arg := tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), "", false, tree.P_char)
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_EQUAL, yyDollar[1].exprUnion(), arg)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5176
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5182
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5186
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5190
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5194
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5201
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5205
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5211
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5215
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5219
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5223
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5227
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5231
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5235
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5239
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5245
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5249
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5255
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5259
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5266
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5270
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5274
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5280
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5284
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5288
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5292
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5296
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5300
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:5304
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5310
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5314
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5318
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:5322
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5328
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5332
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5345
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5350
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5354
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5358
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5362
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_hexnum)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5376
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5380
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5396
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5407
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5412
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5418
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5430
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5442
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5454
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5467
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5480
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5493
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5506
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5519
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5532
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5545
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5558
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5571
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5584
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5599
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5622
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 53 {
				yylex.Error("For float(M), M must between 0 and 53.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5659
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Precision != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Precision > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 18 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5707
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Precision:    yyDollar[2].lengthScaleOptUnion().Precision,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5724
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5736
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Precision:          0,
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5751
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5771
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Precision:          yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        26,
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5791
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5807
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5820
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5833
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5846
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5859
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5871
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5883
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5895
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5907
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5919
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5931
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5943
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5955
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5967
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5980
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:5995
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6018
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6023
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6029
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6036
		{
			yyLOCAL = 6
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6040
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6045
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6049
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:6055
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6061
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6068
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6075
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6084
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 10, // this is the default precision for decimal
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6091
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:6098
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Precision:   int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6107
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6111
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6115
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6121
		{
		}
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6123
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6133
		{
			yyVAL.str = ""
		}
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6137
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
