// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const ENUM = 57531
const UUID = 57532
const VECF32 = 57533
const VECF64 = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const INT1 = 57543
const INT2 = 57544
const INT3 = 57545
const INT4 = 57546
const INT8 = 57547
const S3OPTION = 57548
const STAGEOPTION = 57549
const SQL_SMALL_RESULT = 57550
const SQL_BIG_RESULT = 57551
const SQL_BUFFER_RESULT = 57552
const LOW_PRIORITY = 57553
const HIGH_PRIORITY = 57554
const DELAYED = 57555
const CREATE = 57556
const ALTER = 57557
const DROP = 57558
const RENAME = 57559
const ANALYZE = 57560
const ADD = 57561
const RETURNS = 57562
const SCHEMA = 57563
const TABLE = 57564
const SEQUENCE = 57565
const INDEX = 57566
const VIEW = 57567
const TO = 57568
const IGNORE = 57569
const IF = 57570
const PRIMARY = 57571
const COLUMN = 57572
const CONSTRAINT = 57573
const SPATIAL = 57574
const FULLTEXT = 57575
const FOREIGN = 57576
const KEY_BLOCK_SIZE = 57577
const SHOW = 57578
const DESCRIBE = 57579
const EXPLAIN = 57580
const DATE = 57581
const ESCAPE = 57582
const REPAIR = 57583
const OPTIMIZE = 57584
const TRUNCATE = 57585
const MAXVALUE = 57586
const PARTITION = 57587
const REORGANIZE = 57588
const LESS = 57589
const THAN = 57590
const PROCEDURE = 57591
const TRIGGER = 57592
const STATUS = 57593
const VARIABLES = 57594
const ROLE = 57595
const PROXY = 57596
const AVG_ROW_LENGTH = 57597
const STORAGE = 57598
const DISK = 57599
const MEMORY = 57600
const CHECKSUM = 57601
const COMPRESSION = 57602
const DATA = 57603
const DIRECTORY = 57604
const DELAY_KEY_WRITE = 57605
const ENCRYPTION = 57606
const ENGINE = 57607
const MAX_ROWS = 57608
const MIN_ROWS = 57609
const PACK_KEYS = 57610
const ROW_FORMAT = 57611
const STATS_AUTO_RECALC = 57612
const STATS_PERSISTENT = 57613
const STATS_SAMPLE_PAGES = 57614
const DYNAMIC = 57615
const COMPRESSED = 57616
const REDUNDANT = 57617
const COMPACT = 57618
const FIXED = 57619
const COLUMN_FORMAT = 57620
const AUTO_RANDOM = 57621
const ENGINE_ATTRIBUTE = 57622
const SECONDARY_ENGINE_ATTRIBUTE = 57623
const INSERT_METHOD = 57624
const RESTRICT = 57625
const CASCADE = 57626
const ACTION = 57627
const PARTIAL = 57628
const SIMPLE = 57629
const CHECK = 57630
const ENFORCED = 57631
const RANGE = 57632
const LIST = 57633
const ALGORITHM = 57634
const LINEAR = 57635
const PARTITIONS = 57636
const SUBPARTITION = 57637
const SUBPARTITIONS = 57638
const CLUSTER = 57639
const TYPE = 57640
const ANY = 57641
const SOME = 57642
const EXTERNAL = 57643
const LOCALFILE = 57644
const URL = 57645
const PREPARE = 57646
const DEALLOCATE = 57647
const RESET = 57648
const EXTENSION = 57649
const INCREMENT = 57650
const CYCLE = 57651
const MINVALUE = 57652
const PUBLICATION = 57653
const SUBSCRIPTIONS = 57654
const PUBLICATIONS = 57655
const PROPERTIES = 57656
const PARSER = 57657
const VISIBLE = 57658
const INVISIBLE = 57659
const BTREE = 57660
const HASH = 57661
const RTREE = 57662
const BSI = 57663
const IVFFLAT = 57664
const MASTER = 57665
const ZONEMAP = 57666
const LEADING = 57667
const BOTH = 57668
const TRAILING = 57669
const UNKNOWN = 57670
const LISTS = 57671
const OP_TYPE = 57672
const REINDEX = 57673
const EXPIRE = 57674
const ACCOUNT = 57675
const ACCOUNTS = 57676
const UNLOCK = 57677
const DAY = 57678
const NEVER = 57679
const PUMP = 57680
const MYSQL_COMPATIBILITY_MODE = 57681
const UNIQUE_CHECK_ON_AUTOINCR = 57682
const MODIFY = 57683
const CHANGE = 57684
const SECOND = 57685
const ASCII = 57686
const COALESCE = 57687
const COLLATION = 57688
const HOUR = 57689
const MICROSECOND = 57690
const MINUTE = 57691
const MONTH = 57692
const QUARTER = 57693
const REPEAT = 57694
const REVERSE = 57695
const ROW_COUNT = 57696
const WEEK = 57697
const REVOKE = 57698
const FUNCTION = 57699
const PRIVILEGES = 57700
const TABLESPACE = 57701
const EXECUTE = 57702
const SUPER = 57703
const GRANT = 57704
const OPTION = 57705
const REFERENCES = 57706
const REPLICATION = 57707
const SLAVE = 57708
const CLIENT = 57709
const USAGE = 57710
const RELOAD = 57711
const FILE = 57712
const TEMPORARY = 57713
const ROUTINE = 57714
const EVENT = 57715
const SHUTDOWN = 57716
const NULLX = 57717
const AUTO_INCREMENT = 57718
const APPROXNUM = 57719
const SIGNED = 57720
const UNSIGNED = 57721
const ZEROFILL = 57722
const ENGINES = 57723
const LOW_CARDINALITY = 57724
const AUTOEXTEND_SIZE = 57725
const ADMIN_NAME = 57726
const RANDOM = 57727
const SUSPEND = 57728
const ATTRIBUTE = 57729
const HISTORY = 57730
const REUSE = 57731
const CURRENT = 57732
const OPTIONAL = 57733
const FAILED_LOGIN_ATTEMPTS = 57734
const PASSWORD_LOCK_TIME = 57735
const UNBOUNDED = 57736
const SECONDARY = 57737
const RESTRICTED = 57738
const USER = 57739
const IDENTIFIED = 57740
const CIPHER = 57741
const ISSUER = 57742
const X509 = 57743
const SUBJECT = 57744
const SAN = 57745
const REQUIRE = 57746
const SSL = 57747
const NONE = 57748
const PASSWORD = 57749
const SHARED = 57750
const EXCLUSIVE = 57751
const MAX_QUERIES_PER_HOUR = 57752
const MAX_UPDATES_PER_HOUR = 57753
const MAX_CONNECTIONS_PER_HOUR = 57754
const MAX_USER_CONNECTIONS = 57755
const FORMAT = 57756
const VERBOSE = 57757
const CONNECTION = 57758
const TRIGGERS = 57759
const PROFILES = 57760
const LOAD = 57761
const INLINE = 57762
const INFILE = 57763
const TERMINATED = 57764
const OPTIONALLY = 57765
const ENCLOSED = 57766
const ESCAPED = 57767
const STARTING = 57768
const LINES = 57769
const ROWS = 57770
const IMPORT = 57771
const DISCARD = 57772
const JSONTYPE = 57773
const MODUMP = 57774
const OVER = 57775
const PRECEDING = 57776
const FOLLOWING = 57777
const GROUPS = 57778
const DATABASES = 57779
const TABLES = 57780
const SEQUENCES = 57781
const EXTENDED = 57782
const FULL = 57783
const PROCESSLIST = 57784
const FIELDS = 57785
const COLUMNS = 57786
const OPEN = 57787
const ERRORS = 57788
const WARNINGS = 57789
const INDEXES = 57790
const SCHEMAS = 57791
const NODE = 57792
const LOCKS = 57793
const ROLES = 57794
const TABLE_NUMBER = 57795
const COLUMN_NUMBER = 57796
const TABLE_VALUES = 57797
const TABLE_SIZE = 57798
const NAMES = 57799
const GLOBAL = 57800
const PERSIST = 57801
const SESSION = 57802
const ISOLATION = 57803
const LEVEL = 57804
const READ = 57805
const WRITE = 57806
const ONLY = 57807
const REPEATABLE = 57808
const COMMITTED = 57809
const UNCOMMITTED = 57810
const SERIALIZABLE = 57811
const LOCAL = 57812
const EVENTS = 57813
const PLUGINS = 57814
const CURRENT_TIMESTAMP = 57815
const DATABASE = 57816
const CURRENT_TIME = 57817
const LOCALTIME = 57818
const LOCALTIMESTAMP = 57819
const UTC_DATE = 57820
const UTC_TIME = 57821
const UTC_TIMESTAMP = 57822
const REPLACE = 57823
const CONVERT = 57824
const SEPARATOR = 57825
const TIMESTAMPDIFF = 57826
const CURRENT_DATE = 57827
const CURRENT_USER = 57828
const CURRENT_ROLE = 57829
const SECOND_MICROSECOND = 57830
const MINUTE_MICROSECOND = 57831
const MINUTE_SECOND = 57832
const HOUR_MICROSECOND = 57833
const HOUR_SECOND = 57834
const HOUR_MINUTE = 57835
const DAY_MICROSECOND = 57836
const DAY_SECOND = 57837
const DAY_MINUTE = 57838
const DAY_HOUR = 57839
const YEAR_MONTH = 57840
const SQL_TSI_HOUR = 57841
const SQL_TSI_DAY = 57842
const SQL_TSI_WEEK = 57843
const SQL_TSI_MONTH = 57844
const SQL_TSI_QUARTER = 57845
const SQL_TSI_YEAR = 57846
const SQL_TSI_SECOND = 57847
const SQL_TSI_MINUTE = 57848
const RECURSIVE = 57849
const CONFIG = 57850
const DRAINER = 57851
const SOURCE = 57852
const STREAM = 57853
const HEADERS = 57854
const CONNECTOR = 57855
const CONNECTORS = 57856
const DAEMON = 57857
const PAUSE = 57858
const CANCEL = 57859
const TASK = 57860
const RESUME = 57861
const MATCH = 57862
const AGAINST = 57863
const BOOLEAN = 57864
const LANGUAGE = 57865
const WITH = 57866
const QUERY = 57867
const EXPANSION = 57868
const WITHOUT = 57869
const VALIDATION = 57870
const UPGRADE = 57871
const RETRY = 57872
const ADDDATE = 57873
const BIT_AND = 57874
const BIT_OR = 57875
const BIT_XOR = 57876
const CAST = 57877
const COUNT = 57878
const APPROX_COUNT = 57879
const APPROX_COUNT_DISTINCT = 57880
const SERIAL_EXTRACT = 57881
const APPROX_PERCENTILE = 57882
const CURDATE = 57883
const CURTIME = 57884
const DATE_ADD = 57885
const DATE_SUB = 57886
const EXTRACT = 57887
const GROUP_CONCAT = 57888
const MAX = 57889
const MID = 57890
const MIN = 57891
const NOW = 57892
const POSITION = 57893
const SESSION_USER = 57894
const STD = 57895
const STDDEV = 57896
const MEDIAN = 57897
const CLUSTER_CENTERS = 57898
const KMEANS = 57899
const STDDEV_POP = 57900
const STDDEV_SAMP = 57901
const SUBDATE = 57902
const SUBSTR = 57903
const SUBSTRING = 57904
const SUM = 57905
const SYSDATE = 57906
const SYSTEM_USER = 57907
const TRANSLATE = 57908
const TRIM = 57909
const VARIANCE = 57910
const VAR_POP = 57911
const VAR_SAMP = 57912
const AVG = 57913
const RANK = 57914
const ROW_NUMBER = 57915
const DENSE_RANK = 57916
const BIT_CAST = 57917
const BITMAP_BIT_POSITION = 57918
const BITMAP_BUCKET_NUMBER = 57919
const BITMAP_COUNT = 57920
const BITMAP_CONSTRUCT_AGG = 57921
const BITMAP_OR_AGG = 57922
const NEXTVAL = 57923
const SETVAL = 57924
const CURRVAL = 57925
const LASTVAL = 57926
const ARROW = 57927
const ROW = 57928
const OUTFILE = 57929
const HEADER = 57930
const MAX_FILE_SIZE = 57931
const FORCE_QUOTE = 57932
const PARALLEL = 57933
const STRICT = 57934
const UNUSED = 57935
const BINDINGS = 57936
const DO = 57937
const DECLARE = 57938
const LOOP = 57939
const WHILE = 57940
const LEAVE = 57941
const ITERATE = 57942
const UNTIL = 57943
const CALL = 57944
const PREV = 57945
const SLIDING = 57946
const FILL = 57947
const SPBEGIN = 57948
const BACKEND = 57949
const SERVERS = 57950
const HANDLER = 57951
const PERCENT = 57952
const SAMPLE = 57953
const MO_TS = 57954
const PITR = 57955
const CDC = 57956
const KILL = 57957
const BACKUP = 57958
const FILESYSTEM = 57959
const PARALLELISM = 57960
const RESTORE = 57961
const QUERY_RESULT = 57962

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12369

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 131,
	11, 769,
	22, 769,
	-2, 762,
	-1, 154,
	239, 1178,
	241, 1077,
	-2, 1124,
	-1, 181,
	43, 590,
	241, 590,
	268, 597,
	269, 597,
	465, 590,
	-2, 627,
	-1, 220,
	641, 1936,
	-2, 500,
	-1, 522,
	641, 2056,
	-2, 386,
	-1, 580,
	641, 2115,
	-2, 384,
	-1, 581,
	641, 2116,
	-2, 385,
	-1, 582,
	641, 2117,
	-2, 387,
	-1, 715,
	320, 172,
	437, 172,
	438, 172,
	-2, 1841,
	-1, 781,
	83, 1628,
	-2, 1992,
	-1, 782,
	83, 1646,
	-2, 1963,
	-1, 786,
	83, 1647,
	-2, 1991,
	-1, 819,
	83, 1555,
	-2, 2189,
	-1, 820,
	83, 1556,
	-2, 2188,
	-1, 821,
	83, 1557,
	-2, 2178,
	-1, 822,
	83, 2150,
	-2, 2171,
	-1, 823,
	83, 2151,
	-2, 2172,
	-1, 824,
	83, 2152,
	-2, 2180,
	-1, 825,
	83, 2153,
	-2, 2160,
	-1, 826,
	83, 2154,
	-2, 2169,
	-1, 827,
	83, 2155,
	-2, 2181,
	-1, 828,
	83, 2156,
	-2, 2182,
	-1, 829,
	83, 2157,
	-2, 2187,
	-1, 830,
	83, 2158,
	-2, 2192,
	-1, 831,
	83, 2159,
	-2, 2193,
	-1, 832,
	83, 1624,
	-2, 2030,
	-1, 833,
	83, 1625,
	-2, 1825,
	-1, 834,
	83, 1626,
	-2, 2039,
	-1, 835,
	83, 1627,
	-2, 1834,
	-1, 837,
	83, 1630,
	-2, 1842,
	-1, 838,
	83, 1631,
	-2, 2063,
	-1, 840,
	83, 1634,
	-2, 1861,
	-1, 842,
	83, 1636,
	-2, 2075,
	-1, 843,
	83, 1637,
	-2, 2074,
	-1, 844,
	83, 1638,
	-2, 1905,
	-1, 845,
	83, 1639,
	-2, 1987,
	-1, 848,
	83, 1642,
	-2, 2086,
	-1, 850,
	83, 1644,
	-2, 2089,
	-1, 851,
	83, 1645,
	-2, 2091,
	-1, 852,
	83, 1648,
	-2, 2099,
	-1, 853,
	83, 1649,
	-2, 1972,
	-1, 854,
	83, 1650,
	-2, 2017,
	-1, 855,
	83, 1651,
	-2, 1982,
	-1, 856,
	83, 1652,
	-2, 2007,
	-1, 867,
	83, 1533,
	-2, 2183,
	-1, 868,
	83, 1534,
	-2, 2184,
	-1, 869,
	83, 1535,
	-2, 2185,
	-1, 966,
	460, 627,
	461, 627,
	-2, 591,
	-1, 1014,
	125, 1825,
	136, 1825,
	156, 1825,
	-2, 1799,
	-1, 1130,
	22, 796,
	-2, 745,
	-1, 1236,
	11, 769,
	22, 769,
	-2, 1413,
	-1, 1318,
	22, 796,
	-2, 745,
	-1, 1659,
	83, 1699,
	-2, 1989,
	-1, 1660,
	83, 1700,
	-2, 1990,
	-1, 1825,
	84, 949,
	-2, 955,
	-1, 2264,
	108, 1116,
	152, 1116,
	191, 1116,
	194, 1116,
	281, 1116,
	-2, 1109,
	-1, 2417,
	11, 769,
	22, 769,
	-2, 890,
	-1, 2449,
	84, 1785,
	157, 1785,
	-2, 1974,
	-1, 2450,
	84, 1785,
	157, 1785,
	-2, 1973,
	-1, 2451,
	84, 1761,
	157, 1761,
	-2, 1960,
	-1, 2452,
	84, 1762,
	157, 1762,
	-2, 1965,
	-1, 2453,
	84, 1763,
	157, 1763,
	-2, 1893,
	-1, 2454,
	84, 1764,
	157, 1764,
	-2, 1887,
	-1, 2455,
	84, 1765,
	157, 1765,
	-2, 1815,
	-1, 2456,
	84, 1766,
	157, 1766,
	-2, 1962,
	-1, 2457,
	84, 1767,
	157, 1767,
	-2, 1891,
	-1, 2458,
	84, 1768,
	157, 1768,
	-2, 1886,
	-1, 2459,
	84, 1769,
	157, 1769,
	-2, 1875,
	-1, 2460,
	84, 1785,
	157, 1785,
	-2, 1876,
	-1, 2461,
	84, 1785,
	157, 1785,
	-2, 1877,
	-1, 2463,
	84, 1774,
	157, 1774,
	-2, 2007,
	-1, 2464,
	84, 1752,
	157, 1752,
	-2, 1992,
	-1, 2465,
	84, 1783,
	157, 1783,
	-2, 1963,
	-1, 2466,
	84, 1783,
	157, 1783,
	-2, 1991,
	-1, 2467,
	84, 1783,
	157, 1783,
	-2, 1843,
	-1, 2468,
	84, 1781,
	157, 1781,
	-2, 1982,
	-1, 2469,
	84, 1778,
	157, 1778,
	-2, 1866,
	-1, 2470,
	83, 1733,
	84, 1733,
	157, 1733,
	395, 1733,
	396, 1733,
	397, 1733,
	-2, 1814,
	-1, 2471,
	83, 1734,
	84, 1734,
	157, 1734,
	395, 1734,
	396, 1734,
	397, 1734,
	-2, 1816,
	-1, 2472,
	83, 1735,
	84, 1735,
	157, 1735,
	395, 1735,
	396, 1735,
	397, 1735,
	-2, 2035,
	-1, 2473,
	83, 1737,
	84, 1737,
	157, 1737,
	395, 1737,
	396, 1737,
	397, 1737,
	-2, 1964,
	-1, 2474,
	83, 1739,
	84, 1739,
	157, 1739,
	395, 1739,
	396, 1739,
	397, 1739,
	-2, 1945,
	-1, 2475,
	83, 1741,
	84, 1741,
	157, 1741,
	395, 1741,
	396, 1741,
	397, 1741,
	-2, 1892,
	-1, 2476,
	83, 1743,
	84, 1743,
	157, 1743,
	395, 1743,
	396, 1743,
	397, 1743,
	-2, 1871,
	-1, 2477,
	83, 1744,
	84, 1744,
	157, 1744,
	395, 1744,
	396, 1744,
	397, 1744,
	-2, 1872,
	-1, 2478,
	83, 1746,
	84, 1746,
	157, 1746,
	395, 1746,
	396, 1746,
	397, 1746,
	-2, 1813,
	-1, 2479,
	84, 1788,
	157, 1788,
	395, 1788,
	396, 1788,
	397, 1788,
	-2, 1848,
	-1, 2480,
	84, 1788,
	157, 1788,
	395, 1788,
	396, 1788,
	397, 1788,
	-2, 1862,
	-1, 2481,
	84, 1791,
	157, 1791,
	395, 1791,
	396, 1791,
	397, 1791,
	-2, 1844,
	-1, 2482,
	84, 1791,
	157, 1791,
	395, 1791,
	396, 1791,
	397, 1791,
	-2, 1908,
	-1, 2483,
	84, 1788,
	157, 1788,
	395, 1788,
	396, 1788,
	397, 1788,
	-2, 1929,
	-1, 2692,
	108, 1116,
	152, 1116,
	191, 1116,
	194, 1116,
	281, 1116,
	-2, 1110,
	-1, 2710,
	81, 689,
	157, 689,
	-2, 1293,
	-1, 3122,
	194, 1116,
	305, 1381,
	-2, 1353,
	-1, 3298,
	108, 1116,
	152, 1116,
	191, 1116,
	194, 1116,
	-2, 1234,
	-1, 3300,
	108, 1116,
	152, 1116,
	191, 1116,
	194, 1116,
	-2, 1234,
	-1, 3312,
	81, 689,
	157, 689,
	-2, 1293,
	-1, 3334,
	194, 1116,
	305, 1381,
	-2, 1354,
	-1, 3482,
	108, 1116,
	152, 1116,
	191, 1116,
	194, 1116,
	-2, 1235,
	-1, 3509,
	84, 1196,
	157, 1196,
	-2, 1116,
	-1, 3648,
	84, 1196,
	157, 1196,
	-2, 1116,
	-1, 3807,
	84, 1200,
	157, 1200,
	-2, 1116,
	-1, 3855,
	84, 1201,
	157, 1201,
	-2, 1116,
}

const yyPrivate = 57344

const yyLast = 49583

var yyAct = [...]int{
	748, 725, 3901, 750, 3875, 2740, 209, 1911, 3811, 3894,
	3319, 3817, 1639, 3709, 719, 3414, 2345, 3818, 3810, 3648,
	3108, 3348, 3735, 2743, 734, 3688, 3766, 3626, 3141, 3212,
	2734, 2538, 1474, 3593, 3682, 1271, 727, 3647, 1635, 3213,
	3713, 3537, 3470, 1411, 778, 616, 3467, 3469, 2652, 3565,
	1131, 2737, 1013, 3617, 1551, 3418, 3689, 3280, 3691, 634,
	3409, 640, 640, 1417, 1858, 2312, 3484, 640, 657, 666,
	3285, 3335, 666, 1686, 3117, 64, 3489, 3479, 3038, 1642,
	2713, 1125, 3449, 3064, 3078, 3301, 3210, 2850, 194, 2849,
	2003, 2017, 3067, 3270, 2830, 3137, 3126, 2848, 2764, 3119,
	3303, 1968, 3252, 2411, 2845, 2447, 2605, 2000, 2115, 2573,
	2912, 1700, 3198, 678, 2445, 2073, 2315, 2872, 674, 37,
	3178, 2681, 3045, 3049, 1871, 3043, 2275, 3039, 717, 1467,
	3125, 3041, 3040, 3087, 2294, 2693, 1387, 2224, 130, 2111,
	36, 2243, 3036, 3016, 2098, 1121, 2223, 2517, 1996, 2081,
	2885, 1792, 1547, 2046, 1540, 2959, 2074, 939, 2110, 2499,
	2895, 2412, 1555, 1971, 722, 1380, 1969, 2399, 2766, 2670,
	2665, 1890, 763, 131, 2745, 2313, 1901, 2705, 131, 205,
	8, 204, 7, 6, 1552, 616, 2274, 663, 2264, 1834,
	726, 1070, 723, 2443, 1633, 1584, 2082, 1514, 2112, 1483,
	1453, 2255, 2308, 2145, 716, 2122, 1693, 1673, 1400, 209,
	1624, 209, 735, 1061, 1062, 1144, 633, 27, 2080, 2036,
	640, 1055, 1056, 724, 2077, 2606, 1060, 16, 1870, 1566,
	2062, 652, 1521, 671, 975, 14, 1632, 646, 15, 1006,
	131, 33, 1007, 1452, 1830, 23, 1420, 2419, 871, 1833,
	1809, 1450, 1505, 938, 1421, 1412, 649, 1701, 681, 680,
	195, 915, 191, 1513, 1022, 665, 187, 961, 936, 107,
	921, 1316, 677, 1347, 1272, 24, 17, 2119, 1396, 10,
	3700, 3611, 873, 874, 1576, 662, 2641, 615, 2641, 2641,
	2421, 1563, 1638, 1058, 3497, 658, 3315, 1057, 3094, 1059,
	2929, 2928, 2129, 660, 3442, 1575, 661, 1126, 3288, 659,
	2295, 2561, 1040, 1204, 1205, 1206, 1203, 192, 60, 183,
	155, 2502, 1204, 1205, 1206, 1203, 2500, 1019, 3205, 1021,
	1127, 645, 1805, 1528, 636, 184, 1054, 669, 2505, 193,
	2503, 1054, 176, 1524, 1053, 635, 185, 1204, 1205, 1206,
	1203, 2222, 891, 1054, 1383, 889, 1335, 3011, 3009, 995,
	3006, 1020, 3008, 1126, 3886, 129, 131, 1434, 1799, 1331,
	3407, 2908, 2906, 8, 1526, 7, 2051, 1052, 3677, 3572,
	117, 131, 3566, 131, 1041, 3410, 3211, 188, 2633, 2631,
	929, 2095, 930, 1266, 1562, 3693, 641, 2076, 1204, 1205,
	1206, 1203, 1204, 1205, 1206, 1203, 872, 2986, 2068, 2353,
	3338, 192, 3454, 883, 1166, 192, 2547, 2116, 3450, 3302,
	718, 2555, 2266, 1561, 3598, 1342, 3746, 1813, 3633, 910,
	2635, 1491, 192, 1341, 1339, 192, 60, 183, 155, 1810,
	891, 192, 192, 924, 889, 920, 1023, 192, 2984, 3350,
	1570, 890, 3792, 676, 888, 1035, 1030, 1025, 1029, 1033,
	1582, 1372, 3341, 129, 137, 138, 1355, 139, 140, 2127,
	1017, 1018, 3634, 3336, 192, 60, 183, 155, 3358, 3359,
	1567, 188, 2843, 1038, 3337, 188, 1343, 1028, 1807, 2931,
	1579, 192, 60, 183, 155, 2920, 192, 2654, 2259, 1593,
	2265, 901, 1569, 990, 988, 188, 989, 192, 60, 183,
	155, 188, 1581, 1430, 718, 192, 1431, 188, 2699, 2437,
	3600, 3342, 884, 862, 1201, 861, 863, 864, 2425, 865,
	866, 2424, 2438, 2655, 2426, 154, 182, 190, 1036, 115,
	3010, 1454, 3007, 1456, 188, 1039, 2879, 2880, 1981, 1982,
	1815, 1816, 2878, 2013, 1980, 1142, 2518, 181, 175, 174,
	1408, 188, 984, 129, 66, 1885, 2697, 1026, 1418, 1419,
	2667, 1139, 926, 3112, 919, 3821, 3822, 188, 1625, 1174,
	2668, 1629, 1176, 923, 922, 188, 3431, 3696, 3779, 1416,
	3110, 1037, 996, 1415, 1418, 1419, 1641, 2211, 1354, 1199,
	904, 1016, 1433, 1181, 911, 1628, 1182, 1194, 1015, 3696,
	1177, 3789, 3695, 3778, 992, 3357, 2700, 2316, 3785, 1527,
	1525, 3694, 3777, 3695, 918, 177, 178, 179, 3694, 2666,
	3842, 1027, 3879, 3880, 1184, 3680, 2636, 1147, 640, 640,
	2913, 3768, 3346, 928, 3683, 3684, 3685, 3686, 917, 640,
	1135, 3214, 916, 3214, 2131, 3768, 186, 3706, 903, 2914,
	3771, 2915, 909, 2542, 3343, 3347, 3345, 3344, 666, 666,
	3569, 640, 1136, 1134, 2656, 1645, 1997, 125, 994, 3227,
	1987, 180, 1620, 126, 907, 2785, 3271, 3459, 2123, 1630,
	1170, 3060, 3794, 3795, 2949, 2673, 3278, 3050, 2387, 2254,
	2059, 927, 3352, 3353, 2657, 3790, 3791, 3787, 1034, 3360,
	1147, 1534, 1533, 1627, 1179, 2947, 1172, 3602, 3603, 3058,
	1064, 1196, 927, 2128, 3430, 1197, 1198, 2552, 1175, 1178,
	3820, 1022, 3432, 1444, 1244, 1207, 1169, 180, 2351, 2835,
	127, 3408, 2907, 1237, 1031, 2389, 1577, 1032, 908, 2634,
	3360, 1356, 1247, 59, 1171, 993, 3607, 1574, 1406, 3054,
	1991, 3456, 3339, 3699, 3610, 1432, 3780, 1334, 3351, 3230,
	3590, 2953, 2640, 663, 663, 3055, 3056, 1255, 1180, 1127,
	1135, 1127, 2390, 2391, 2440, 3256, 2395, 1128, 2650, 1161,
	1127, 3057, 1644, 1643, 1019, 2106, 1021, 1191, 2117, 886,
	2117, 2117, 61, 1276, 1022, 2011, 2012, 632, 192, 60,
	183, 155, 3375, 3372, 712, 3065, 1275, 714, 3140, 1192,
	1193, 3584, 713, 3585, 2651, 925, 131, 131, 1020, 3850,
	1626, 1173, 2118, 1149, 1148, 887, 3076, 135, 189, 3579,
	136, 1054, 2930, 3088, 1054, 156, 1127, 1042, 1024, 3114,
	57, 2927, 2130, 3728, 1054, 1183, 1054, 3723, 664, 1054,
	1054, 2134, 2136, 2137, 914, 3138, 3139, 1019, 3638, 1021,
	3632, 662, 662, 3052, 3630, 2706, 2150, 3587, 188, 668,
	667, 658, 658, 2841, 1605, 1138, 1140, 675, 1337, 660,
	660, 2261, 661, 661, 991, 659, 659, 664, 3356, 2501,
	3793, 1236, 1150, 1529, 1352, 634, 1149, 1148, 3586, 3365,
	1141, 3017, 3714, 872, 664, 3730, 128, 44, 1130, 3320,
	61, 1314, 3736, 58, 1319, 3109, 3066, 5, 1129, 1018,
	664, 1158, 3455, 1154, 1155, 2739, 132, 133, 939, 156,
	134, 2556, 1811, 156, 3327, 1395, 2632, 3601, 1160, 1245,
	1418, 1419, 2239, 1240, 1241, 1242, 1243, 3143, 3597, 61,
	156, 3261, 1808, 156, 902, 900, 3263, 1418, 1419, 156,
	156, 929, 1123, 930, 3355, 156, 61, 3066, 3027, 2385,
	3376, 1186, 1407, 3912, 1187, 2735, 2736, 3705, 2739, 3528,
	2363, 640, 61, 2318, 1446, 2440, 2362, 3584, 3421, 3585,
	616, 616, 156, 3061, 1414, 2672, 2679, 2950, 3051, 616,
	616, 1998, 1189, 1478, 1478, 2331, 640, 985, 1152, 156,
	1238, 2311, 2334, 1463, 156, 3639, 154, 1614, 190, 3786,
	3604, 3631, 2383, 2384, 3262, 156, 1462, 666, 1506, 634,
	1159, 3737, 3652, 156, 1517, 1517, 1480, 1321, 181, 1410,
	1409, 1476, 1476, 3587, 3460, 209, 1393, 2581, 1516, 1516,
	1392, 3074, 2676, 2677, 616, 1287, 1288, 2786, 1485, 2787,
	2788, 1988, 3053, 1621, 3897, 3115, 1391, 2675, 3618, 2333,
	3809, 1389, 3118, 3523, 3586, 1113, 1109, 1110, 1111, 1112,
	1122, 2586, 1185, 2585, 2584, 2582, 1651, 1654, 1655, 3517,
	987, 3005, 2135, 986, 3304, 3138, 3139, 1652, 3538, 3539,
	3540, 3544, 3542, 3543, 3541, 1559, 2354, 1235, 1445, 2311,
	1564, 1353, 2332, 3405, 1535, 3217, 2328, 1573, 1348, 3580,
	2317, 1190, 676, 3581, 3765, 2319, 1451, 1320, 2890, 2891,
	1472, 1473, 3698, 2814, 1166, 1318, 2318, 2321, 3142, 3440,
	3169, 1990, 1603, 2874, 2876, 3134, 1188, 1357, 1364, 3021,
	2583, 2548, 2429, 1402, 1403, 2349, 1478, 2120, 1478, 1135,
	2952, 3651, 2321, 1370, 1369, 1349, 1350, 1358, 2644, 1368,
	1583, 1359, 1360, 1361, 1362, 1363, 1367, 1365, 670, 2320,
	3075, 1487, 1640, 1371, 3264, 646, 3135, 1022, 2685, 2688,
	2689, 2690, 2686, 2687, 1022, 3530, 1379, 1397, 1401, 1401,
	1401, 2783, 3898, 933, 934, 935, 3253, 1646, 1647, 1648,
	1649, 1650, 2146, 931, 928, 1377, 1538, 131, 1541, 1542,
	1165, 1422, 1397, 1397, 1425, 2238, 1478, 2132, 2133, 1543,
	1544, 1568, 1458, 1460, 1549, 1550, 2961, 2960, 1580, 2234,
	2233, 1470, 1471, 1699, 2647, 1507, 1435, 1436, 3808, 1691,
	1461, 663, 2232, 1695, 1696, 1697, 1698, 1748, 1346, 1572,
	1818, 1819, 1732, 1613, 1687, 1557, 1598, 1599, 2322, 3441,
	1742, 1486, 3022, 2317, 2311, 2316, 2725, 2314, 2319, 645,
	1344, 1345, 1498, 2231, 131, 1554, 2227, 1386, 1558, 2587,
	2588, 131, 1504, 2322, 1394, 3580, 1530, 1637, 1518, 3690,
	1806, 1404, 1817, 892, 131, 1519, 3524, 3525, 985, 1423,
	1424, 2875, 1426, 1427, 2375, 1428, 131, 3490, 1615, 189,
	893, 1616, 1794, 1135, 2327, 2711, 156, 1653, 2325, 1045,
	1050, 1051, 2320, 3895, 3896, 2805, 2806, 1618, 3519, 3913,
	1822, 1823, 3518, 1132, 3218, 1506, 1801, 2257, 1790, 662,
	1831, 1478, 1836, 1837, 3775, 1839, 1446, 640, 1602, 658,
	1733, 1611, 640, 1592, 1656, 1478, 1601, 660, 3093, 939,
	661, 1608, 1859, 659, 1388, 1591, 3908, 1586, 1594, 1607,
	2409, 1478, 2815, 2817, 2818, 2819, 2816, 1446, 3136, 3903,
	2645, 987, 657, 1864, 986, 3892, 896, 997, 1793, 1202,
	1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670,
	1671, 1672, 1884, 1612, 1631, 1636, 1684, 1685, 1880, 1610,
	1609, 1891, 1891, 1606, 1446, 985, 1446, 1446, 1622, 1132,
	640, 640, 1675, 1958, 1831, 1962, 3857, 2246, 1478, 1965,
	1966, 1978, 3829, 3823, 2712, 1682, 1683, 895, 1634, 2125,
	2290, 898, 897, 1747, 3920, 616, 3805, 1478, 3175, 2804,
	2247, 2248, 3904, 2256, 1757, 2712, 2440, 1838, 3858, 2348,
	2180, 3171, 1794, 2179, 3277, 1166, 3756, 1794, 1794, 1888,
	1840, 1163, 3731, 2520, 640, 1831, 1478, 3267, 2022, 1202,
	640, 640, 640, 674, 674, 3719, 3671, 3229, 1913, 2216,
	2032, 2033, 2034, 2035, 1796, 1164, 2410, 2041, 987, 3858,
	1861, 986, 2547, 2410, 209, 3830, 3614, 209, 209, 2014,
	209, 3670, 1047, 1048, 1049, 1388, 3147, 2049, 3665, 3806,
	2052, 1876, 1960, 2055, 3664, 2039, 2057, 1762, 1204, 1205,
	1206, 1203, 3145, 1738, 1739, 1740, 1202, 1883, 1894, 3614,
	1886, 1887, 3663, 3015, 1791, 2125, 1754, 3662, 1164, 1755,
	1748, 1748, 2084, 1623, 3013, 1797, 2410, 1992, 3720, 3672,
	2006, 2007, 1748, 1748, 2893, 1315, 1768, 1769, 1984, 2100,
	1986, 2024, 2025, 2026, 2289, 876, 877, 878, 879, 2659,
	2004, 2005, 2099, 1892, 2279, 1789, 1999, 1826, 1862, 1863,
	2021, 3614, 2050, 3642, 1877, 2053, 2054, 3614, 2056, 2637,
	1859, 3641, 2537, 1977, 1478, 2114, 1882, 2094, 1855, 1827,
	1828, 1829, 1856, 1860, 1735, 3614, 1204, 1205, 1206, 1203,
	3614, 1842, 1843, 1844, 1845, 1022, 1397, 1872, 1022, 1874,
	1875, 1730, 1731, 1835, 1734, 2086, 2525, 1022, 1873, 2116,
	1401, 3613, 1749, 1881, 1895, 1896, 1979, 1851, 3381, 2304,
	1867, 2221, 1401, 1489, 3175, 1756, 3329, 1758, 3294, 1759,
	1760, 1761, 2982, 1865, 2108, 2037, 2125, 2215, 1959, 2214,
	3245, 2187, 1568, 2107, 2125, 2090, 131, 1964, 1967, 131,
	131, 1983, 131, 1985, 1993, 2149, 1893, 2009, 1019, 2154,
	1021, 751, 761, 1166, 1378, 663, 2318, 2321, 1690, 1464,
	1019, 752, 1021, 753, 757, 760, 756, 754, 755, 2159,
	3241, 3155, 2020, 3554, 3614, 3905, 2027, 2028, 2045, 2019,
	1835, 2440, 1020, 2016, 881, 131, 3315, 1868, 1869, 3330,
	2166, 3295, 1022, 2047, 1020, 2897, 2714, 2550, 2173, 1204,
	1205, 1206, 1203, 3246, 1878, 1879, 2079, 2869, 131, 2612,
	1204, 1205, 1206, 1203, 2604, 2549, 758, 2064, 2079, 2563,
	2190, 2541, 2096, 2298, 1889, 2195, 2196, 2197, 1634, 2545,
	2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209,
	2175, 2093, 2085, 3242, 3156, 2158, 2091, 2226, 759, 2228,
	2160, 2105, 2104, 662, 2044, 1019, 2156, 1021, 876, 877,
	878, 879, 2533, 658, 2527, 717, 2030, 2103, 640, 640,
	640, 660, 2522, 2109, 661, 2514, 2512, 659, 1588, 2102,
	2410, 3379, 1202, 640, 640, 640, 640, 1202, 2322, 1236,
	1252, 2510, 1202, 2317, 2311, 2316, 2276, 2314, 2319, 2508,
	2278, 2217, 2279, 2194, 2193, 1151, 1119, 2282, 1446, 2306,
	2138, 1114, 2178, 2143, 2144, 1235, 1439, 1440, 2008, 1442,
	1443, 1219, 1447, 1448, 1449, 2140, 3098, 2147, 1737, 1736,
	1675, 2169, 1737, 1736, 1446, 2523, 1398, 2528, 2168, 2152,
	2167, 2944, 2141, 2142, 2500, 2523, 1384, 894, 2515, 2513,
	1385, 2340, 2320, 1493, 1494, 1495, 1496, 1497, 2124, 1499,
	1500, 1501, 1502, 1503, 2509, 1595, 3724, 1509, 1510, 1511,
	1512, 3914, 2509, 2279, 2216, 2352, 1202, 1202, 2355, 2356,
	2357, 2358, 2359, 2360, 2361, 1202, 3491, 2364, 2365, 2366,
	2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 3307, 2376,
	2377, 2378, 2379, 2380, 1202, 2381, 2347, 881, 2139, 3883,
	3725, 1202, 3203, 1202, 2414, 2414, 1978, 2414, 1218, 1217,
	1227, 1228, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1219,
	3492, 2125, 1466, 2218, 2346, 616, 616, 2182, 1596, 1794,
	1774, 1794, 3308, 1135, 1767, 2284, 2285, 3701, 3612, 1478,
	640, 2210, 2212, 2213, 1399, 2287, 2288, 3089, 2300, 1794,
	1794, 3576, 1429, 1468, 640, 2297, 1276, 2299, 3521, 2240,
	1135, 2484, 634, 3520, 1469, 3305, 2310, 2309, 1517, 1275,
	1978, 2258, 3506, 2489, 3463, 2491, 3287, 2435, 899, 209,
	3176, 1022, 1516, 2448, 3167, 2188, 2189, 3161, 2191, 3157,
	3104, 2048, 3069, 2838, 2303, 2198, 1217, 1227, 1228, 1220,
	1221, 1222, 1223, 1224, 1225, 1226, 1219, 2418, 2416, 3306,
	2420, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1219, 2530,
	2837, 2683, 2427, 1465, 2428, 3090, 2283, 2296, 2642, 2560,
	2526, 2431, 2529, 2089, 2532, 2088, 2543, 2087, 2323, 2324,
	2114, 2329, 2432, 2433, 1019, 2442, 1021, 1478, 1374, 1478,
	1373, 1478, 1137, 1384, 2286, 2570, 1135, 1385, 1694, 2292,
	2494, 1694, 2293, 2153, 2562, 1821, 1522, 2495, 2048, 3091,
	2899, 2488, 3776, 1401, 1206, 1203, 1203, 1681, 2417, 2557,
	1222, 1223, 1224, 1225, 1226, 1219, 3533, 2553, 3532, 2916,
	1478, 2590, 2775, 1678, 1680, 1677, 2392, 1679, 2571, 2773,
	2751, 2577, 2749, 2486, 3464, 3465, 2597, 3512, 2591, 2592,
	2422, 1478, 2493, 2625, 3911, 2626, 2594, 2595, 1204, 1205,
	1206, 1203, 2589, 1204, 1205, 1206, 1203, 2171, 1476, 3206,
	3457, 3275, 2600, 2682, 2504, 1204, 1205, 1206, 1203, 2436,
	2439, 1752, 1977, 2598, 3204, 1204, 1205, 1206, 1203, 1476,
	2826, 131, 3888, 3887, 2572, 3833, 1753, 3804, 2643, 3803,
	1646, 1794, 3726, 2653, 3667, 2487, 2291, 1458, 1460, 2601,
	2602, 3281, 1204, 1205, 1206, 1203, 1135, 3910, 2485, 3655,
	1135, 2496, 1254, 1204, 1205, 1206, 1203, 1478, 3458, 3276,
	1446, 2574, 1523, 2574, 2170, 1253, 1962, 2578, 3645, 2660,
	3635, 2669, 3567, 2448, 2710, 3494, 3493, 2559, 2825, 2554,
	2716, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1208, 2824,
	2535, 1204, 1205, 1206, 1203, 1721, 2822, 3321, 2544, 2727,
	2607, 2608, 2811, 3309, 2720, 2721, 2613, 2629, 2546, 1135,
	3274, 2551, 3059, 2568, 2940, 2963, 2911, 2748, 2910, 2809,
	1204, 1205, 1206, 1203, 1135, 1135, 1135, 1891, 1522, 2808,
	1135, 2694, 2759, 2760, 2761, 2762, 1135, 2769, 2807, 2770,
	2771, 2799, 2772, 1022, 2774, 2564, 2565, 2823, 2754, 2755,
	2580, 2793, 2792, 2758, 2821, 2769, 2791, 2790, 2638, 2765,
	2810, 2516, 2220, 2695, 2781, 2782, 2067, 2414, 2066, 2065,
	2567, 1913, 2061, 2060, 2015, 2599, 1814, 1812, 2707, 2797,
	2798, 2827, 1589, 1333, 2680, 3286, 2023, 2698, 2596, 3044,
	616, 1204, 1205, 1206, 1203, 2717, 1962, 1135, 1978, 1978,
	1978, 1978, 2975, 3907, 2834, 3605, 3606, 1117, 2729, 1634,
	1135, 1978, 3906, 3415, 2414, 3881, 2662, 3849, 2664, 712,
	2851, 3848, 714, 2719, 3845, 3814, 3783, 713, 2722, 3782,
	1478, 2746, 3594, 2851, 2832, 2746, 2742, 2163, 3763, 3708,
	131, 640, 640, 2661, 2539, 2540, 2678, 3468, 3687, 3646,
	131, 2753, 1204, 1205, 1206, 1203, 2701, 8, 1717, 7,
	2709, 2715, 2974, 3678, 1116, 1714, 3659, 3743, 2157, 1716,
	1713, 1715, 1719, 1720, 3654, 3653, 3609, 1718, 3596, 2728,
	3595, 2731, 1204, 1205, 1206, 1203, 3568, 3514, 2744, 1204,
	1205, 1206, 1203, 2750, 1976, 3475, 2741, 209, 2757, 2865,
	3461, 3443, 209, 1218, 1217, 1227, 1228, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1219, 2903, 2155, 2905, 1204, 1205,
	1206, 1203, 3832, 2789, 1748, 3438, 1748, 3435, 2801, 2926,
	3434, 1204, 1205, 1206, 1203, 3413, 1794, 1204, 1205, 1206,
	1203, 1794, 2939, 2726, 1204, 1205, 1206, 1203, 1478, 1835,
	3411, 2946, 2099, 3388, 2894, 639, 639, 2833, 3385, 3383,
	2831, 647, 2839, 3316, 2852, 2853, 2854, 2855, 3273, 3272,
	1977, 1977, 1977, 1977, 2866, 2868, 2864, 2867, 3269, 3259,
	2884, 3254, 3238, 1977, 3236, 2900, 3164, 2957, 2881, 2747,
	2904, 3163, 1204, 1205, 1206, 1203, 3158, 3153, 1022, 3152,
	3070, 3031, 3030, 3026, 3024, 1542, 3712, 3020, 2225, 1022,
	2954, 2979, 1793, 2951, 2909, 1543, 1544, 2925, 2883, 1549,
	1550, 1724, 1725, 1726, 1727, 1728, 1729, 1722, 1723, 2820,
	2812, 2802, 2836, 1204, 1205, 1206, 1203, 2800, 2718, 2968,
	2923, 2970, 2921, 2796, 2795, 1557, 3023, 2723, 2724, 2794,
	2933, 2901, 3025, 2932, 2898, 2648, 3028, 3029, 2902, 2646,
	2639, 3436, 2943, 2948, 1135, 1554, 818, 817, 1558, 131,
	3047, 2536, 2235, 2919, 131, 2924, 2230, 2917, 2229, 2070,
	3063, 2063, 2936, 1820, 2935, 640, 2934, 2942, 1204, 1205,
	1206, 1203, 1804, 1803, 1590, 131, 1492, 3079, 1135, 1382,
	1340, 640, 1338, 1135, 1135, 1283, 131, 1279, 2955, 1278,
	2987, 2988, 1978, 2276, 647, 3097, 2989, 2990, 2991, 2992,
	2922, 2993, 2994, 2995, 2996, 2997, 2998, 2999, 3000, 3001,
	3002, 2956, 2962, 3424, 2340, 1120, 2966, 2967, 2969, 885,
	3739, 3423, 3589, 2971, 2972, 3588, 3124, 3073, 3127, 3014,
	3127, 3127, 3577, 3437, 3422, 1135, 3300, 3299, 3369, 2694,
	1204, 1205, 1206, 1203, 3298, 3233, 3033, 3131, 1204, 1205,
	1206, 1203, 3266, 1022, 3148, 1022, 3250, 3248, 3247, 3019,
	1022, 2978, 1478, 1478, 3018, 1204, 1205, 1206, 1203, 3244,
	3243, 3144, 1204, 1205, 1206, 1203, 3237, 3146, 3235, 3111,
	3113, 3032, 3219, 2977, 3209, 3208, 1022, 3194, 1204, 1205,
	1206, 1203, 3193, 3095, 3149, 3150, 2877, 3099, 3034, 3082,
	1476, 1476, 3012, 2980, 3086, 2973, 2965, 2964, 3072, 640,
	1204, 1205, 1206, 1203, 2958, 3047, 1019, 2892, 1021, 3096,
	3081, 2658, 3123, 2511, 1446, 3084, 3085, 1962, 1962, 3122,
	3107, 2507, 2506, 3132, 3092, 3100, 2199, 3101, 2976, 2192,
	3102, 3103, 3106, 2623, 2310, 2309, 2186, 2185, 2184, 2183,
	1020, 2181, 131, 2177, 2176, 2174, 2165, 131, 2162, 2161,
	3128, 3129, 3133, 2622, 1977, 1204, 1205, 1206, 1203, 2069,
	1204, 1205, 1206, 1203, 1135, 1787, 1786, 192, 2590, 183,
	155, 1785, 1751, 131, 1750, 1741, 1490, 3207, 1488, 1273,
	1204, 1205, 1206, 1203, 3738, 3673, 3661, 2448, 2621, 3185,
	3154, 3656, 1537, 3548, 3531, 1763, 1764, 1765, 1766, 3527,
	3505, 1770, 1771, 1772, 1773, 1775, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1204, 1205, 1206, 1203, 192,
	3488, 3172, 3173, 640, 3398, 3396, 3367, 3160, 3366, 3159,
	3363, 3362, 3166, 3165, 3328, 3325, 3162, 188, 3170, 3323,
	3184, 2620, 3289, 1548, 1539, 3183, 1227, 1228, 1220, 1221,
	1222, 1223, 1224, 1225, 1226, 1219, 3174, 2619, 1553, 3187,
	3232, 3190, 3191, 3192, 1443, 1556, 1545, 3234, 1204, 1205,
	1206, 1203, 3186, 2618, 1381, 2828, 2752, 2703, 3196, 3755,
	2617, 3202, 2702, 2696, 1204, 1205, 1206, 1203, 2663, 188,
	3863, 2616, 2624, 3257, 2521, 3130, 2430, 2382, 3249, 2615,
	1204, 1205, 1206, 1203, 2614, 2277, 3220, 1204, 1205, 1206,
	1203, 2249, 2219, 3861, 3503, 1676, 3222, 3221, 1204, 1205,
	1206, 1203, 3226, 188, 3239, 3225, 1204, 1205, 1206, 1203,
	2029, 1204, 1205, 1206, 1203, 1825, 640, 1962, 1800, 2574,
	1619, 1571, 1546, 3231, 1332, 1317, 3260, 3293, 1313, 1312,
	1311, 3105, 1310, 1309, 2858, 2611, 1308, 1307, 1306, 1305,
	3290, 3291, 3292, 2414, 1978, 3312, 3296, 3297, 1218, 1217,
	1227, 1228, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1219,
	2610, 1022, 1204, 1205, 1206, 1203, 1304, 1303, 1022, 3331,
	1302, 3255, 1135, 1301, 1300, 1299, 1298, 3251, 1297, 1296,
	1295, 3124, 639, 1124, 1294, 1135, 1293, 1204, 1205, 1206,
	1203, 1292, 1291, 1133, 1290, 3332, 1135, 1289, 3378, 1286,
	1285, 1284, 1478, 2609, 1282, 3265, 1281, 3282, 3371, 1280,
	1277, 1270, 3268, 1269, 1267, 1157, 1266, 1265, 1264, 2765,
	640, 3284, 1962, 2603, 1263, 1262, 1135, 1794, 3314, 1261,
	1204, 1205, 1206, 1203, 3380, 1260, 1259, 1258, 3361, 3354,
	1476, 1794, 2593, 1257, 3395, 3311, 3310, 3397, 1256, 2851,
	1204, 1205, 1206, 1203, 1251, 209, 1250, 3318, 131, 2569,
	1249, 1248, 1168, 1118, 3403, 131, 3179, 3180, 1135, 1204,
	1205, 1206, 1203, 3753, 3751, 3392, 3389, 3368, 3749, 3364,
	2281, 3373, 3313, 3370, 3402, 2263, 1204, 1205, 1206, 1203,
	1156, 2851, 3317, 3819, 3377, 1689, 2401, 2405, 2406, 2407,
	2402, 3382, 2403, 2408, 3384, 3182, 2404, 3439, 2857, 3387,
	2684, 3390, 2441, 3393, 3446, 2072, 1977, 3394, 1135, 3391,
	3386, 1167, 1204, 1205, 1206, 1203, 2856, 2861, 2859, 3510,
	3400, 3420, 2862, 2860, 2863, 116, 2406, 2407, 3401, 63,
	1135, 1478, 1478, 3406, 62, 2534, 3079, 2524, 1375, 1853,
	1854, 3068, 3120, 3322, 3121, 3324, 3483, 3416, 3483, 3417,
	3444, 3445, 2777, 3471, 1848, 1849, 1850, 3223, 3224, 2778,
	2779, 2780, 2938, 3473, 1135, 3499, 1135, 2350, 3374, 1476,
	1687, 3197, 1950, 3477, 3478, 1531, 3502, 3399, 3504, 2519,
	2539, 2540, 3425, 1478, 3426, 2558, 3452, 1640, 1585, 1640,
	642, 3453, 3451, 1565, 643, 2236, 2031, 1162, 3042, 644,
	3035, 640, 2730, 1135, 1135, 3474, 3462, 1135, 1135, 3501,
	3448, 2704, 2302, 2272, 1022, 1857, 1824, 131, 3487, 3486,
	3476, 1687, 1737, 1736, 1328, 1329, 3471, 3471, 1326, 1327,
	3471, 3471, 3552, 3314, 2086, 3498, 3553, 1859, 3550, 3559,
	3361, 3354, 1324, 1325, 3872, 3508, 3511, 3545, 3563, 3564,
	3535, 3536, 1322, 1323, 3546, 3547, 3515, 3658, 3480, 3151,
	2393, 1478, 2388, 1218, 1217, 1227, 1228, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1219, 1963, 3556, 1438, 1437, 2981,
	1195, 3189, 3591, 2886, 2237, 2101, 1390, 3495, 3496, 1366,
	1413, 3839, 3837, 3575, 3583, 3797, 3773, 3772, 3555, 1476,
	3770, 3557, 3715, 3674, 3562, 3561, 3500, 3412, 3240, 3216,
	3215, 131, 3200, 2335, 2305, 1587, 3199, 2896, 3570, 1388,
	3865, 3864, 3864, 3574, 3258, 1441, 3578, 3616, 3582, 3627,
	3621, 2941, 3404, 1218, 1217, 1227, 1228, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1219, 2265, 1135, 2164, 1336, 1405,
	1484, 1153, 3865, 3529, 3195, 1132, 71, 3650, 3644, 2,
	3608, 3507, 3884, 2396, 196, 3, 3615, 3885, 1, 1640,
	2630, 3513, 3433, 876, 877, 878, 879, 3622, 1132, 3420,
	1798, 3624, 3623, 1330, 880, 875, 3636, 1455, 2423, 1135,
	2010, 1482, 3640, 1802, 1478, 882, 2870, 1022, 2871, 3188,
	2401, 2405, 2406, 2407, 2402, 3551, 2403, 2408, 2873, 2649,
	2404, 3669, 3471, 2121, 3657, 2840, 2386, 2253, 3062, 1376,
	932, 1743, 1600, 1044, 1146, 1597, 3668, 1145, 1143, 1692,
	765, 3697, 1476, 2075, 2829, 2803, 3666, 3558, 3871, 3704,
	3900, 3619, 1255, 3831, 3692, 3874, 1617, 749, 3764, 3679,
	3835, 3681, 3573, 2126, 1200, 1135, 2918, 957, 806, 776,
	3675, 1268, 1578, 2985, 2983, 1046, 775, 3279, 3716, 2674,
	2889, 3629, 1043, 958, 2058, 3676, 3571, 1532, 3471, 3717,
	1536, 2301, 3637, 3734, 3721, 3722, 3702, 3711, 3509, 3116,
	2738, 1560, 3729, 3326, 131, 3429, 3733, 3710, 3707, 3427,
	3428, 682, 1135, 1989, 614, 3718, 1004, 3549, 2071, 683,
	1478, 3740, 2280, 3758, 3761, 3742, 3748, 3750, 3752, 3754,
	3727, 3788, 3660, 912, 2262, 3471, 3732, 913, 905, 2692,
	3762, 2691, 1657, 3741, 1209, 1674, 3003, 3004, 2566, 1246,
	721, 2151, 3757, 2671, 3349, 2882, 70, 69, 1476, 3747,
	68, 67, 2040, 217, 767, 216, 3769, 3592, 1478, 3466,
	3767, 3627, 1218, 1217, 1227, 1228, 1220, 1221, 1222, 1223,
	1224, 1225, 1226, 1219, 3781, 3760, 2148, 3807, 3876, 747,
	746, 745, 744, 3815, 3796, 743, 3798, 742, 3800, 2400,
	3799, 2398, 2397, 3812, 1973, 1972, 1476, 2038, 3801, 3802,
	1218, 1217, 1227, 1228, 1220, 1221, 1222, 1223, 1224, 1225,
	1226, 1219, 3077, 2768, 2763, 1902, 1900, 2756, 3828, 2330,
	2337, 3844, 1899, 3816, 3744, 3745, 3838, 3526, 3840, 3841,
	2813, 3824, 3419, 3825, 3836, 3826, 3834, 3827, 1135, 1847,
	2326, 3692, 3843, 1919, 2784, 1916, 3846, 3847, 1915, 2776,
	945, 3522, 3516, 1947, 3625, 3650, 3482, 3333, 3334, 3853,
	3340, 3851, 2271, 1069, 3812, 1065, 1067, 3855, 3856, 3854,
	3862, 3870, 1068, 3878, 1066, 3860, 3877, 2579, 3866, 3867,
	3868, 3869, 3168, 3859, 2307, 3037, 2245, 2244, 2242, 2241,
	1351, 3889, 3703, 1135, 3784, 3882, 3447, 2446, 2444, 1115,
	3181, 1841, 3177, 3733, 3891, 3890, 1846, 3893, 1721, 192,
	60, 183, 155, 3812, 3902, 3899, 1640, 2083, 2097, 2937,
	942, 943, 1974, 1970, 2842, 2394, 3599, 184, 1852, 906,
	2260, 985, 114, 104, 176, 172, 55, 3909, 185, 171,
	54, 112, 169, 53, 99, 3878, 3916, 98, 3877, 3915,
	111, 167, 52, 201, 200, 3902, 3917, 129, 1230, 203,
	1234, 3921, 202, 199, 2497, 2498, 198, 1520, 197, 3919,
	3774, 3485, 117, 870, 1897, 1898, 1231, 1233, 1229, 188,
	1232, 1218, 1217, 1227, 1228, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1219, 1218, 1217, 1227, 1228, 1220, 1221, 1222,
	1223, 1224, 1225, 1226, 1219, 43, 42, 173, 41, 105,
	56, 40, 39, 38, 987, 34, 13, 986, 12, 35,
	22, 21, 1604, 20, 26, 32, 31, 124, 2018, 123,
	30, 122, 121, 120, 2018, 2018, 2018, 119, 118, 29,
	19, 47, 46, 45, 9, 110, 108, 28, 109, 106,
	102, 100, 82, 81, 971, 80, 137, 138, 95, 139,
	140, 94, 946, 93, 92, 91, 90, 88, 89, 956,
	79, 1717, 78, 77, 76, 75, 97, 103, 1714, 101,
	86, 96, 1716, 1713, 1715, 1719, 1720, 87, 85, 948,
	1718, 84, 83, 74, 73, 694, 693, 700, 690, 72,
	153, 152, 151, 150, 149, 147, 148, 697, 698, 146,
	699, 703, 145, 144, 684, 143, 142, 141, 48, 49,
	50, 51, 163, 162, 708, 164, 166, 154, 182, 190,
	168, 115, 165, 170, 160, 158, 161, 159, 157, 65,
	11, 113, 18, 25, 4, 0, 0, 0, 0, 181,
	175, 174, 970, 968, 0, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 712, 0,
	0, 714, 0, 0, 967, 0, 713, 694, 693, 700,
	690, 0, 0, 0, 0, 0, 941, 0, 0, 697,
	698, 0, 699, 703, 0, 0, 684, 947, 980, 0,
	0, 0, 0, 0, 0, 0, 708, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 177, 178, 179,
	0, 976, 0, 1702, 1703, 1704, 1705, 1706, 1707, 1708,
	1709, 1710, 1711, 1712, 1724, 1725, 1726, 1727, 1728, 1729,
	1722, 1723, 0, 0, 0, 0, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 977, 981, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 180, 0, 126, 0, 964, 0, 962,
	966, 984, 0, 0, 0, 963, 960, 959, 0, 965,
	950, 951, 949, 952, 953, 954, 955, 0, 982, 0,
	983, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 978, 979, 685, 687, 686, 0, 0, 0, 0,
	0, 0, 0, 692, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 696, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 59, 0, 0, 974, 689,
	0, 0, 0, 679, 973, 0, 0, 0, 0, 0,
	0, 0, 2250, 2251, 2252, 0, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 0, 0, 2267, 2268, 2269,
	2270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 685, 687, 686, 0, 0,
	0, 0, 0, 0, 0, 692, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 696, 0, 0,
	0, 0, 0, 0, 711, 0, 0, 0, 0, 135,
	189, 689, 136, 0, 0, 0, 0, 156, 0, 0,
	0, 0, 57, 0, 0, 0, 0, 972, 0, 0,
	0, 0, 0, 944, 940, 0, 0, 0, 0, 691,
	695, 701, 0, 702, 704, 0, 0, 705, 706, 707,
	0, 0, 709, 710, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 128, 44,
	0, 0, 0, 0, 0, 58, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 132, 133,
	0, 0, 134, 0, 0, 0, 0, 0, 0, 0,
	0, 691, 695, 701, 1484, 702, 704, 0, 0, 705,
	706, 707, 0, 0, 709, 710, 0, 0, 2018, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 783, 0,
	0, 0, 0, 0, 0, 0, 0, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 774, 542, 493, 411, 366,
	560, 559, 0, 0, 841, 849, 0, 0, 688, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 0,
	764, 818, 817, 751, 761, 0, 0, 295, 215, 488,
	608, 490, 489, 752, 0, 753, 757, 760, 756, 754,
	755, 0, 833, 0, 0, 0, 0, 0, 0, 720,
	732, 0, 737, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 730, 0, 0,
	0, 0, 784, 0, 731, 0, 0, 779, 758, 762,
	688, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	759, 782, 786, 316, 855, 780, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 856, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 777, 0, 605, 0, 444, 0, 0, 839,
	0, 0, 0, 416, 0, 0, 349, 0, 2708, 0,
	781, 0, 402, 384, 852, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 1745, 1744, 1746, 456,
	350, 351, 0, 329, 277, 278, 623, 837, 380, 570,
	603, 604, 495, 0, 851, 832, 834, 835, 838, 842,
	843, 844, 845, 846, 848, 850, 854, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 853, 530,
	507, 533, 448, 510, 509, 2887, 2888, 544, 785, 545,
	546, 370, 371, 372, 373, 840, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 862, 836, 861, 863, 864, 860,
	865, 866, 847, 741, 0, 792, 858, 857, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 1087, 825, 799, 800, 801, 738, 802, 796, 797,
	739, 798, 826, 790, 822, 823, 766, 793, 803, 821,
	804, 824, 827, 828, 867, 868, 810, 794, 243, 869,
	807, 829, 820, 819, 805, 791, 830, 831, 773, 768,
	808, 809, 795, 813, 814, 815, 740, 787, 788, 789,
	811, 812, 769, 770, 771, 772, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 1087, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 816, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 0, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3071,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3083, 0, 0, 0, 0,
	0, 0, 0, 1095, 1099, 1101, 1103, 1105, 1106, 1108,
	0, 1113, 1109, 1110, 1111, 1112, 0, 1090, 1091, 1092,
	1093, 1071, 1072, 1096, 0, 1074, 0, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1086, 1088, 1084, 1085,
	1094, 0, 0, 0, 0, 0, 0, 0, 1098, 1100,
	1102, 1104, 1107, 1073, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 1099, 1101, 1103, 1105, 1106, 1108,
	0, 1113, 1109, 1110, 1111, 1112, 1089, 1090, 1091, 1092,
	1093, 1071, 1072, 1096, 0, 1074, 0, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1086, 1088, 1084, 1085,
	1094, 0, 0, 0, 0, 0, 0, 0, 1098, 1100,
	1102, 1104, 1107, 2018, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2575, 2576, 783, 0, 0,
	0, 0, 0, 0, 0, 0, 382, 0, 506, 539,
	528, 612, 494, 0, 0, 0, 0, 3228, 0, 736,
	0, 0, 0, 322, 1795, 0, 352, 543, 525, 535,
	526, 511, 512, 513, 520, 332, 514, 515, 516, 486,
	517, 487, 518, 519, 774, 542, 493, 411, 366, 560,
	559, 0, 0, 841, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 2001, 0, 0, 728, 0, 0, 764,
	818, 817, 751, 761, 0, 0, 295, 215, 488, 608,
	490, 489, 752, 0, 753, 757, 760, 756, 754, 755,
	0, 833, 0, 0, 0, 0, 0, 0, 720, 732,
	0, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 730, 0, 0, 0,
	2018, 784, 0, 731, 0, 0, 2002, 758, 762, 1097,
	0, 0, 0, 285, 417, 434, 296, 407, 447, 301,
	414, 291, 381, 404, 0, 0, 287, 432, 413, 363,
	342, 343, 286, 0, 399, 320, 334, 317, 379, 759,
	782, 786, 316, 855, 780, 442, 289, 0, 441, 378,
	428, 433, 364, 358, 288, 430, 362, 357, 346, 324,
	856, 347, 348, 338, 390, 356, 391, 339, 368, 367,
	369, 0, 0, 0, 0, 0, 470, 471, 0, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 777, 0, 605, 0, 444, 0, 0, 839, 0,
	0, 0, 416, 0, 2018, 349, 0, 0, 0, 781,
	0, 402, 384, 852, 0, 0, 400, 354, 429, 392,
	435, 418, 443, 396, 393, 280, 419, 319, 365, 292,
	294, 314, 321, 323, 325, 326, 374, 375, 387, 406,
	420, 421, 422, 318, 302, 401, 303, 336, 304, 281,
	310, 308, 311, 408, 312, 283, 388, 426, 0, 331,
	397, 361, 284, 360, 389, 425, 424, 293, 451, 457,
	458, 547, 0, 463, 628, 629, 630, 472, 477, 478,
	479, 481, 482, 483, 484, 548, 565, 532, 502, 465,
	556, 499, 503, 504, 568, 0, 0, 0, 456, 350,
	351, 0, 329, 277, 278, 623, 837, 380, 570, 603,
	604, 495, 0, 851, 832, 834, 835, 838, 842, 843,
	844, 845, 846, 848, 850, 854, 622, 0, 549, 564,
	626, 563, 619, 386, 0, 405, 561, 508, 0, 553,
	527, 0, 554, 523, 558, 0, 497, 0, 412, 437,
	449, 466, 469, 498, 583, 584, 585, 282, 468, 587,
	588, 589, 590, 591, 592, 593, 586, 853, 530, 507,
	533, 448, 510, 509, 0, 0, 544, 785, 545, 546,
	370, 371, 372, 373, 840, 571, 300, 467, 395, 0,
	531, 0, 0, 0, 0, 3534, 0, 0, 0, 536,
	537, 534, 631, 0, 594, 595, 0, 0, 461, 462,
	328, 335, 480, 337, 299, 385, 330, 446, 344, 0,
	473, 538, 474, 597, 600, 598, 599, 377, 340, 341,
	409, 345, 355, 398, 445, 383, 403, 297, 436, 410,
	359, 524, 551, 862, 836, 861, 863, 864, 860, 865,
	866, 847, 741, 0, 792, 858, 857, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	578, 577, 576, 575, 574, 573, 572, 0, 0, 521,
	423, 309, 271, 305, 306, 313, 620, 617, 427, 621,
	0, 279, 501, 353, 0, 394, 327, 566, 567, 0,
	0, 825, 799, 800, 801, 738, 802, 796, 797, 739,
	798, 826, 790, 822, 823, 766, 793, 803, 821, 804,
	824, 827, 828, 867, 868, 810, 794, 243, 869, 807,
	829, 820, 819, 805, 791, 830, 831, 773, 768, 808,
	809, 795, 813, 814, 815, 740, 787, 788, 789, 811,
	812, 769, 770, 771, 772, 0, 0, 0, 452, 453,
	454, 476, 0, 438, 500, 618, 0, 0, 0, 0,
	0, 0, 0, 550, 562, 596, 0, 606, 607, 609,
	611, 816, 613, 415, 192, 783, 624, 491, 492, 625,
	602, 0, 733, 0, 382, 0, 506, 539, 528, 612,
	494, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 322, 0, 0, 352, 543, 525, 535, 526, 511,
	512, 513, 520, 332, 514, 515, 516, 486, 517, 487,
	518, 519, 1239, 542, 493, 411, 366, 560, 559, 0,
	0, 841, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 764, 818, 817,
	751, 761, 0, 0, 295, 215, 488, 608, 490, 489,
	752, 0, 753, 757, 760, 756, 754, 755, 0, 833,
	0, 0, 0, 0, 0, 0, 720, 732, 0, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 730, 0, 0, 0, 0, 784,
	0, 731, 0, 0, 779, 758, 762, 0, 0, 0,
	0, 285, 417, 434, 296, 407, 447, 301, 414, 291,
	381, 404, 0, 0, 287, 432, 413, 363, 342, 343,
	286, 0, 399, 320, 334, 317, 379, 759, 782, 786,
	316, 855, 780, 442, 289, 0, 441, 378, 428, 433,
	364, 358, 288, 430, 362, 357, 346, 324, 856, 347,
	348, 338, 390, 356, 391, 339, 368, 367, 369, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 777,
	0, 605, 0, 444, 0, 0, 839, 0, 0, 0,
	416, 0, 0, 349, 0, 0, 0, 781, 0, 402,
	384, 852, 0, 0, 400, 354, 429, 392, 435, 418,
	443, 396, 393, 280, 419, 319, 365, 292, 294, 314,
	321, 323, 325, 326, 374, 375, 387, 406, 420, 421,
	422, 318, 302, 401, 303, 336, 304, 281, 310, 308,
	311, 408, 312, 283, 388, 426, 0, 331, 397, 361,
	284, 360, 389, 425, 424, 293, 451, 457, 458, 547,
	0, 463, 628, 629, 630, 472, 477, 478, 479, 481,
	482, 483, 484, 548, 565, 532, 502, 465, 556, 499,
	503, 504, 568, 0, 0, 0, 456, 350, 351, 0,
	329, 277, 278, 623, 837, 380, 570, 603, 604, 495,
	0, 851, 832, 834, 835, 838, 842, 843, 844, 845,
	846, 848, 850, 854, 622, 0, 549, 564, 626, 563,
	619, 386, 0, 405, 561, 508, 0, 553, 527, 0,
	554, 523, 558, 0, 497, 0, 412, 437, 449, 466,
	469, 498, 583, 584, 585, 282, 468, 587, 588, 589,
	590, 591, 592, 593, 586, 853, 530, 507, 533, 448,
	510, 509, 0, 0, 544, 785, 545, 546, 370, 371,
	372, 373, 840, 571, 300, 467, 395, 0, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 537, 534,
	631, 0, 594, 595, 0, 0, 461, 462, 328, 335,
	480, 337, 299, 385, 330, 446, 344, 0, 473, 538,
	474, 597, 600, 598, 599, 377, 340, 341, 409, 345,
	355, 398, 445, 383, 403, 297, 436, 410, 359, 524,
	551, 862, 836, 861, 863, 864, 860, 865, 866, 847,
	741, 0, 792, 858, 857, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 578, 577,
	576, 575, 574, 573, 572, 0, 0, 521, 423, 309,
	271, 305, 306, 313, 620, 617, 427, 621, 0, 279,
	501, 353, 156, 394, 327, 566, 567, 0, 0, 825,
	799, 800, 801, 738, 802, 796, 797, 739, 798, 826,
	790, 822, 823, 766, 793, 803, 821, 804, 824, 827,
	828, 867, 868, 810, 794, 243, 869, 807, 829, 820,
	819, 805, 791, 830, 831, 773, 768, 808, 809, 795,
	813, 814, 815, 740, 787, 788, 789, 811, 812, 769,
	770, 771, 772, 0, 0, 0, 452, 453, 454, 476,
	0, 438, 500, 618, 0, 0, 0, 0, 0, 0,
	0, 550, 562, 596, 0, 606, 607, 609, 611, 816,
	613, 415, 783, 0, 624, 491, 492, 625, 602, 0,
	733, 382, 0, 506, 539, 528, 612, 494, 0, 0,
	0, 0, 0, 0, 736, 0, 0, 0, 322, 3918,
	0, 352, 543, 525, 535, 526, 511, 512, 513, 520,
	332, 514, 515, 516, 486, 517, 487, 518, 519, 774,
	542, 493, 411, 366, 560, 559, 0, 0, 841, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 0, 764, 818, 817, 751, 761, 0,
	0, 295, 215, 488, 608, 490, 489, 752, 0, 753,
	757, 760, 756, 754, 755, 0, 833, 0, 0, 0,
	0, 0, 0, 720, 732, 0, 737, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 730, 0, 0, 0, 0, 784, 0, 731, 0,
	0, 779, 758, 762, 0, 0, 0, 0, 285, 417,
	434, 296, 407, 447, 301, 414, 291, 381, 404, 0,
	0, 287, 432, 413, 363, 342, 343, 286, 0, 399,
	320, 334, 317, 379, 759, 782, 786, 316, 855, 780,
	442, 289, 0, 441, 378, 428, 433, 364, 358, 288,
	430, 362, 357, 346, 324, 856, 347, 348, 338, 390,
	356, 391, 339, 368, 367, 369, 0, 0, 0, 0,
	0, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 601, 777, 0, 605, 0,
	444, 0, 0, 839, 0, 0, 0, 416, 0, 0,
	349, 0, 0, 0, 781, 0, 402, 384, 852, 0,
	0, 400, 354, 429, 392, 435, 418, 443, 396, 393,
	280, 419, 319, 365, 292, 294, 314, 321, 323, 325,
	326, 374, 375, 387, 406, 420, 421, 422, 318, 302,
	401, 303, 336, 304, 281, 310, 308, 311, 408, 312,
	283, 388, 426, 0, 331, 397, 361, 284, 360, 389,
	425, 424, 293, 451, 457, 458, 547, 0, 463, 628,
	629, 630, 472, 477, 478, 479, 481, 482, 483, 484,
	548, 565, 532, 502, 465, 556, 499, 503, 504, 568,
	0, 0, 0, 456, 350, 351, 0, 329, 277, 278,
	623, 837, 380, 570, 603, 604, 495, 0, 851, 832,
	834, 835, 838, 842, 843, 844, 845, 846, 848, 850,
	854, 622, 0, 549, 564, 626, 563, 619, 386, 0,
	405, 561, 508, 0, 553, 527, 0, 554, 523, 558,
	0, 497, 0, 412, 437, 449, 466, 469, 498, 583,
	584, 585, 282, 468, 587, 588, 589, 590, 591, 592,
	593, 586, 853, 530, 507, 533, 448, 510, 509, 0,
	0, 544, 785, 545, 546, 370, 371, 372, 373, 840,
	571, 300, 467, 395, 0, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 537, 534, 631, 0, 594,
	595, 0, 0, 461, 462, 328, 335, 480, 337, 299,
	385, 330, 446, 344, 0, 473, 538, 474, 597, 600,
	598, 599, 377, 340, 341, 409, 345, 355, 398, 445,
	383, 403, 297, 436, 410, 359, 524, 551, 862, 836,
	861, 863, 864, 860, 865, 866, 847, 741, 0, 792,
	858, 857, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 579, 578, 577, 576, 575, 574,
	573, 572, 0, 0, 521, 423, 309, 271, 305, 306,
	313, 620, 617, 427, 621, 0, 279, 501, 353, 0,
	394, 327, 566, 567, 0, 0, 825, 799, 800, 801,
	738, 802, 796, 797, 739, 798, 826, 790, 822, 823,
	766, 793, 803, 821, 804, 824, 827, 828, 867, 868,
	810, 794, 243, 869, 807, 829, 820, 819, 805, 791,
	830, 831, 773, 768, 808, 809, 795, 813, 814, 815,
	740, 787, 788, 789, 811, 812, 769, 770, 771, 772,
	0, 0, 0, 452, 453, 454, 476, 0, 438, 500,
	618, 0, 0, 0, 0, 0, 0, 0, 550, 562,
	596, 0, 606, 607, 609, 611, 816, 613, 415, 783,
	0, 624, 491, 492, 625, 602, 0, 733, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 774, 542, 493, 411,
	366, 560, 559, 0, 0, 841, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 728, 0,
	0, 764, 818, 817, 751, 761, 0, 0, 295, 215,
	488, 608, 490, 489, 752, 0, 753, 757, 760, 756,
	754, 755, 0, 833, 0, 0, 0, 0, 0, 0,
	720, 732, 0, 737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 730, 0,
	0, 0, 0, 784, 0, 731, 0, 0, 779, 758,
	762, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 759, 782, 786, 316, 855, 780, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 856, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 777, 0, 605, 0, 444, 0, 0,
	839, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 781, 0, 402, 384, 852, 3813, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 837, 380,
	570, 603, 604, 495, 0, 851, 832, 834, 835, 838,
	842, 843, 844, 845, 846, 848, 850, 854, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 853,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 785,
	545, 546, 370, 371, 372, 373, 840, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 862, 836, 861, 863, 864,
	860, 865, 866, 847, 741, 0, 792, 858, 857, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 825, 799, 800, 801, 738, 802, 796,
	797, 739, 798, 826, 790, 822, 823, 766, 793, 803,
	821, 804, 824, 827, 828, 867, 868, 810, 794, 243,
	869, 807, 829, 820, 819, 805, 791, 830, 831, 773,
	768, 808, 809, 795, 813, 814, 815, 740, 787, 788,
	789, 811, 812, 769, 770, 771, 772, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 816, 613, 415, 783, 0, 624, 491,
	492, 625, 602, 0, 733, 382, 0, 506, 539, 528,
	612, 494, 0, 0, 0, 0, 0, 0, 736, 0,
	0, 0, 322, 1795, 0, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 774, 542, 493, 411, 366, 560, 559,
	0, 0, 841, 849, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 764, 818,
	817, 751, 761, 0, 0, 295, 215, 488, 608, 490,
	489, 752, 0, 753, 757, 760, 756, 754, 755, 0,
	833, 0, 0, 0, 0, 0, 0, 720, 732, 0,
	737, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 730, 0, 0, 0, 0,
	784, 0, 731, 0, 0, 779, 758, 762, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 759, 782,
	786, 316, 855, 780, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 856,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 601,
	777, 0, 605, 0, 444, 0, 0, 839, 0, 0,
	0, 416, 0, 0, 349, 0, 0, 0, 781, 0,
	402, 384, 852, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 628, 629, 630, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 623, 837, 380, 570, 603, 604,
	495, 0, 851, 832, 834, 835, 838, 842, 843, 844,
	845, 846, 848, 850, 854, 622, 0, 549, 564, 626,
	563, 619, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 853, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 785, 545, 546, 370,
	371, 372, 373, 840, 571, 300, 467, 395, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 631, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 862, 836, 861, 863, 864, 860, 865, 866,
	847, 741, 0, 792, 858, 857, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 620, 617, 427, 621, 0,
	279, 501, 353, 0, 394, 327, 566, 567, 0, 0,
	825, 799, 800, 801, 738, 802, 796, 797, 739, 798,
	826, 790, 822, 823, 766, 793, 803, 821, 804, 824,
	827, 828, 867, 868, 810, 794, 243, 869, 807, 829,
	820, 819, 805, 791, 830, 831, 773, 768, 808, 809,
	795, 813, 814, 815, 740, 787, 788, 789, 811, 812,
	769, 770, 771, 772, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 618, 0, 0, 0, 0, 0,
	0, 0, 550, 562, 596, 0, 606, 607, 609, 611,
	816, 613, 415, 783, 0, 624, 491, 492, 625, 602,
	0, 733, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 736, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	774, 542, 493, 411, 366, 560, 559, 0, 0, 841,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 764, 818, 817, 751, 761,
	0, 0, 295, 215, 488, 608, 490, 489, 752, 0,
	753, 757, 760, 756, 754, 755, 0, 833, 0, 0,
	0, 0, 0, 0, 720, 732, 0, 737, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 729, 730, 1515, 0, 0, 0, 784, 0, 731,
	0, 0, 779, 758, 762, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 759, 782, 786, 316, 855,
	780, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 856, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 777, 0, 605,
	0, 444, 0, 0, 839, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 781, 0, 402, 384, 852,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 837, 380, 570, 603, 604, 495, 0, 851,
	832, 834, 835, 838, 842, 843, 844, 845, 846, 848,
	850, 854, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 853, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 785, 545, 546, 370, 371, 372, 373,
	840, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 862,
	836, 861, 863, 864, 860, 865, 866, 847, 741, 0,
	792, 858, 857, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 825, 799, 800,
	801, 738, 802, 796, 797, 739, 798, 826, 790, 822,
	823, 766, 793, 803, 821, 804, 824, 827, 828, 867,
	868, 810, 794, 243, 869, 807, 829, 820, 819, 805,
	791, 830, 831, 773, 768, 808, 809, 795, 813, 814,
	815, 740, 787, 788, 789, 811, 812, 769, 770, 771,
	772, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 816, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 783, 733, 0,
	2172, 0, 0, 0, 0, 0, 382, 0, 506, 539,
	528, 612, 494, 0, 0, 0, 0, 0, 0, 736,
	0, 0, 0, 322, 0, 0, 352, 543, 525, 535,
	526, 511, 512, 513, 520, 332, 514, 515, 516, 486,
	517, 487, 518, 519, 774, 542, 493, 411, 366, 560,
	559, 0, 0, 841, 849, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 764,
	818, 817, 751, 761, 0, 0, 295, 215, 488, 608,
	490, 489, 752, 0, 753, 757, 760, 756, 754, 755,
	0, 833, 0, 0, 0, 0, 0, 0, 720, 732,
	0, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 730, 0, 0, 0,
	0, 784, 0, 731, 0, 0, 779, 758, 762, 0,
	0, 0, 0, 285, 417, 434, 296, 407, 447, 301,
	414, 291, 381, 404, 0, 0, 287, 432, 413, 363,
	342, 343, 286, 0, 399, 320, 334, 317, 379, 759,
	782, 786, 316, 855, 780, 442, 289, 0, 441, 378,
	428, 433, 364, 358, 288, 430, 362, 357, 346, 324,
	856, 347, 348, 338, 390, 356, 391, 339, 368, 367,
	369, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 777, 0, 605, 0, 444, 0, 0, 839, 0,
	0, 0, 416, 0, 0, 349, 0, 0, 0, 781,
	0, 402, 384, 852, 0, 0, 400, 354, 429, 392,
	435, 418, 443, 396, 393, 280, 419, 319, 365, 292,
	294, 314, 321, 323, 325, 326, 374, 375, 387, 406,
	420, 421, 422, 318, 302, 401, 303, 336, 304, 281,
	310, 308, 311, 408, 312, 283, 388, 426, 0, 331,
	397, 361, 284, 360, 389, 425, 424, 293, 451, 457,
	458, 547, 0, 463, 628, 629, 630, 472, 477, 478,
	479, 481, 482, 483, 484, 548, 565, 532, 502, 465,
	556, 499, 503, 504, 568, 0, 0, 0, 456, 350,
	351, 0, 329, 277, 278, 623, 837, 380, 570, 603,
	604, 495, 0, 851, 832, 834, 835, 838, 842, 843,
	844, 845, 846, 848, 850, 854, 622, 0, 549, 564,
	626, 563, 619, 386, 0, 405, 561, 508, 0, 553,
	527, 0, 554, 523, 558, 0, 497, 0, 412, 437,
	449, 466, 469, 498, 583, 584, 585, 282, 468, 587,
	588, 589, 590, 591, 592, 593, 586, 853, 530, 507,
	533, 448, 510, 509, 0, 0, 544, 785, 545, 546,
	370, 371, 372, 373, 840, 571, 300, 467, 395, 0,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	537, 534, 631, 0, 594, 595, 0, 0, 461, 462,
	328, 335, 480, 337, 299, 385, 330, 446, 344, 0,
	473, 538, 474, 597, 600, 598, 599, 377, 340, 341,
	409, 345, 355, 398, 445, 383, 403, 297, 436, 410,
	359, 524, 551, 862, 836, 861, 863, 864, 860, 865,
	866, 847, 741, 0, 792, 858, 857, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	578, 577, 576, 575, 574, 573, 572, 0, 0, 521,
	423, 309, 271, 305, 306, 313, 620, 617, 427, 621,
	0, 279, 501, 353, 0, 394, 327, 566, 567, 0,
	0, 825, 799, 800, 801, 738, 802, 796, 797, 739,
	798, 826, 790, 822, 823, 766, 793, 803, 821, 804,
	824, 827, 828, 867, 868, 810, 794, 243, 869, 807,
	829, 820, 819, 805, 791, 830, 831, 773, 768, 808,
	809, 795, 813, 814, 815, 740, 787, 788, 789, 811,
	812, 769, 770, 771, 772, 0, 0, 0, 452, 453,
	454, 476, 0, 438, 500, 618, 0, 0, 0, 0,
	0, 0, 0, 550, 562, 596, 0, 606, 607, 609,
	611, 816, 613, 415, 783, 0, 624, 491, 492, 625,
	602, 0, 733, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 736, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 774, 542, 493, 411, 366, 560, 559, 0, 0,
	841, 849, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 0, 764, 818, 817, 751,
	761, 0, 0, 295, 215, 488, 608, 490, 489, 752,
	0, 753, 757, 760, 756, 754, 755, 0, 833, 0,
	0, 0, 0, 0, 0, 720, 732, 0, 737, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 729, 730, 1788, 0, 0, 0, 784, 0,
	731, 0, 0, 779, 758, 762, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 759, 782, 786, 316,
	855, 780, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 856, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 777, 0,
	605, 0, 444, 0, 0, 839, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 781, 0, 402, 384,
	852, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 837, 380, 570, 603, 604, 495, 0,
	851, 832, 834, 835, 838, 842, 843, 844, 845, 846,
	848, 850, 854, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 853, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 785, 545, 546, 370, 371, 372,
	373, 840, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	862, 836, 861, 863, 864, 860, 865, 866, 847, 741,
	0, 792, 858, 857, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 825, 799,
	800, 801, 738, 802, 796, 797, 739, 798, 826, 790,
	822, 823, 766, 793, 803, 821, 804, 824, 827, 828,
	867, 868, 810, 794, 243, 869, 807, 829, 820, 819,
	805, 791, 830, 831, 773, 768, 808, 809, 795, 813,
	814, 815, 740, 787, 788, 789, 811, 812, 769, 770,
	771, 772, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 816, 613,
	415, 783, 0, 624, 491, 492, 625, 602, 0, 733,
	382, 0, 506, 539, 528, 612, 494, 0, 0, 0,
	0, 0, 0, 736, 0, 0, 0, 322, 0, 0,
	352, 543, 525, 535, 526, 511, 512, 513, 520, 332,
	514, 515, 516, 486, 517, 487, 518, 519, 774, 542,
	493, 411, 366, 560, 559, 0, 0, 841, 849, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 764, 818, 817, 751, 761, 0, 0,
	295, 215, 488, 608, 490, 489, 752, 0, 753, 757,
	760, 756, 754, 755, 0, 833, 0, 0, 0, 0,
	0, 0, 720, 732, 0, 737, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	730, 0, 0, 0, 0, 784, 0, 731, 0, 0,
	779, 758, 762, 0, 0, 0, 0, 285, 417, 434,
	296, 407, 447, 301, 414, 291, 381, 404, 0, 0,
	287, 432, 413, 363, 342, 343, 286, 0, 399, 320,
	334, 317, 379, 759, 782, 786, 316, 855, 780, 442,
	289, 0, 441, 378, 428, 433, 364, 358, 288, 430,
	362, 357, 346, 324, 856, 347, 348, 338, 390, 356,
	391, 339, 368, 367, 369, 0, 0, 0, 0, 0,
	470, 471, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 601, 777, 0, 605, 0, 444,
	0, 0, 839, 0, 0, 0, 416, 0, 0, 349,
	0, 0, 0, 781, 0, 402, 384, 852, 0, 0,
	400, 354, 429, 392, 435, 418, 443, 396, 393, 280,
	419, 319, 365, 292, 294, 314, 321, 323, 325, 326,
	374, 375, 387, 406, 420, 421, 422, 318, 302, 401,
	303, 336, 304, 281, 310, 308, 311, 408, 312, 283,
	388, 426, 0, 331, 397, 361, 284, 360, 389, 425,
	424, 293, 451, 457, 458, 547, 0, 463, 628, 629,
	630, 472, 477, 478, 479, 481, 482, 483, 484, 548,
	565, 532, 502, 465, 556, 499, 503, 504, 568, 0,
	0, 0, 456, 350, 351, 0, 329, 277, 278, 623,
	837, 380, 570, 603, 604, 495, 0, 851, 832, 834,
	835, 838, 842, 843, 844, 845, 846, 848, 850, 854,
	622, 0, 549, 564, 626, 563, 619, 386, 0, 405,
	561, 508, 0, 553, 527, 0, 554, 523, 558, 0,
	497, 0, 412, 437, 449, 466, 469, 498, 583, 584,
	585, 282, 468, 587, 588, 589, 590, 591, 592, 593,
	586, 853, 530, 507, 533, 448, 510, 509, 0, 0,
	544, 785, 545, 546, 370, 371, 372, 373, 840, 571,
	300, 467, 395, 0, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 537, 534, 631, 0, 594, 595,
	0, 0, 461, 462, 328, 335, 480, 337, 299, 385,
	330, 446, 344, 0, 473, 538, 474, 597, 600, 598,
	599, 377, 340, 341, 409, 345, 355, 398, 445, 383,
	403, 297, 436, 410, 359, 524, 551, 862, 836, 861,
	863, 864, 860, 865, 866, 847, 741, 0, 792, 858,
	857, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 579, 578, 577, 576, 575, 574, 573,
	572, 0, 0, 521, 423, 309, 271, 305, 306, 313,
	620, 617, 427, 621, 0, 279, 501, 353, 0, 394,
	327, 566, 567, 0, 0, 825, 799, 800, 801, 738,
	802, 796, 797, 739, 798, 826, 790, 822, 823, 766,
	793, 803, 821, 804, 824, 827, 828, 867, 868, 810,
	794, 243, 869, 807, 829, 820, 819, 805, 791, 830,
	831, 773, 768, 808, 809, 795, 813, 814, 815, 740,
	787, 788, 789, 811, 812, 769, 770, 771, 772, 0,
	0, 0, 452, 453, 454, 476, 0, 438, 500, 618,
	0, 0, 0, 0, 0, 0, 0, 550, 562, 596,
	0, 606, 607, 609, 611, 816, 613, 415, 783, 0,
	624, 491, 492, 625, 602, 0, 733, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 774, 542, 493, 411, 366,
	560, 559, 0, 0, 841, 849, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 0,
	764, 818, 817, 751, 761, 0, 0, 295, 215, 488,
	608, 490, 489, 2627, 0, 2628, 757, 760, 756, 754,
	755, 0, 833, 0, 0, 0, 0, 0, 0, 720,
	732, 0, 737, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 730, 0, 0,
	0, 0, 784, 0, 731, 0, 0, 779, 758, 762,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	759, 782, 786, 316, 855, 780, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 856, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 777, 0, 605, 0, 444, 0, 0, 839,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	781, 0, 402, 384, 852, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 837, 380, 570,
	603, 604, 495, 0, 851, 832, 834, 835, 838, 842,
	843, 844, 845, 846, 848, 850, 854, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 853, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 785, 545,
	546, 370, 371, 372, 373, 840, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 862, 836, 861, 863, 864, 860,
	865, 866, 847, 741, 0, 792, 858, 857, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 825, 799, 800, 801, 738, 802, 796, 797,
	739, 798, 826, 790, 822, 823, 766, 793, 803, 821,
	804, 824, 827, 828, 867, 868, 810, 794, 243, 869,
	807, 829, 820, 819, 805, 791, 830, 831, 773, 768,
	808, 809, 795, 813, 814, 815, 740, 787, 788, 789,
	811, 812, 769, 770, 771, 772, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 816, 613, 415, 783, 0, 624, 491, 492,
	625, 602, 0, 733, 382, 0, 506, 539, 528, 612,
	494, 0, 0, 1658, 0, 0, 0, 736, 0, 0,
	0, 322, 0, 0, 352, 543, 525, 535, 526, 511,
	512, 513, 520, 332, 514, 515, 516, 486, 517, 487,
	518, 519, 774, 542, 493, 411, 366, 560, 559, 0,
	0, 841, 849, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 764, 818, 817,
	751, 761, 0, 0, 295, 215, 488, 608, 490, 489,
	752, 0, 753, 757, 760, 756, 754, 755, 0, 833,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 737,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 729, 730, 0, 0, 0, 0, 784,
	0, 731, 0, 0, 779, 758, 762, 0, 0, 0,
	0, 285, 417, 434, 296, 407, 447, 301, 414, 291,
	381, 404, 0, 0, 287, 432, 413, 363, 342, 343,
	286, 0, 399, 320, 334, 317, 379, 759, 782, 786,
	316, 855, 780, 442, 289, 0, 441, 378, 428, 433,
	364, 358, 288, 430, 362, 357, 346, 324, 856, 347,
	348, 338, 390, 356, 391, 339, 368, 367, 369, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 777,
	0, 605, 0, 444, 0, 0, 839, 0, 0, 0,
	416, 0, 0, 349, 0, 0, 0, 781, 0, 402,
	384, 852, 0, 0, 400, 354, 429, 392, 435, 418,
	443, 396, 393, 280, 419, 319, 365, 292, 294, 314,
	321, 323, 325, 326, 374, 375, 387, 406, 420, 421,
	422, 318, 302, 401, 303, 336, 304, 281, 310, 308,
	311, 408, 312, 283, 388, 426, 0, 331, 397, 361,
	284, 360, 389, 425, 424, 293, 451, 1659, 1660, 547,
	0, 463, 628, 629, 630, 472, 477, 478, 479, 481,
	482, 483, 484, 548, 565, 532, 502, 465, 556, 499,
	503, 504, 568, 0, 0, 0, 456, 350, 351, 0,
	329, 277, 278, 623, 837, 380, 570, 603, 604, 495,
	0, 851, 832, 834, 835, 838, 842, 843, 844, 845,
	846, 848, 850, 854, 622, 0, 549, 564, 626, 563,
	619, 386, 0, 405, 561, 508, 0, 553, 527, 0,
	554, 523, 558, 0, 497, 0, 412, 437, 449, 466,
	469, 498, 583, 584, 585, 282, 468, 587, 588, 589,
	590, 591, 592, 593, 586, 853, 530, 507, 533, 448,
	510, 509, 0, 0, 544, 785, 545, 546, 370, 371,
	372, 373, 840, 571, 300, 467, 395, 0, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 537, 534,
	631, 0, 594, 595, 0, 0, 461, 462, 328, 335,
	480, 337, 299, 385, 330, 446, 344, 0, 473, 538,
	474, 597, 600, 598, 599, 377, 340, 341, 409, 345,
	355, 398, 445, 383, 403, 297, 436, 410, 359, 524,
	551, 862, 836, 861, 863, 864, 860, 865, 866, 847,
	741, 0, 792, 858, 857, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 578, 577,
	576, 575, 574, 573, 572, 0, 0, 521, 423, 309,
	271, 305, 306, 313, 620, 617, 427, 621, 0, 279,
	501, 353, 0, 394, 327, 566, 567, 0, 0, 825,
	799, 800, 801, 738, 802, 796, 797, 739, 798, 826,
	790, 822, 823, 766, 793, 803, 821, 804, 824, 827,
	828, 867, 868, 810, 794, 243, 869, 807, 829, 820,
	819, 805, 791, 830, 831, 773, 768, 808, 809, 795,
	813, 814, 815, 740, 787, 788, 789, 811, 812, 769,
	770, 771, 772, 0, 0, 0, 452, 453, 454, 476,
	0, 438, 500, 618, 0, 0, 0, 0, 0, 0,
	0, 550, 562, 596, 0, 606, 607, 609, 611, 816,
	613, 415, 783, 0, 624, 491, 492, 625, 602, 0,
	733, 382, 0, 506, 539, 528, 612, 494, 0, 0,
	0, 0, 0, 0, 736, 0, 0, 0, 322, 0,
	0, 352, 543, 525, 535, 526, 511, 512, 513, 520,
	332, 514, 515, 516, 486, 517, 487, 518, 519, 774,
	542, 493, 411, 366, 560, 559, 0, 0, 841, 849,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 0, 764, 818, 817, 751, 761, 0,
	0, 295, 215, 488, 608, 490, 489, 752, 0, 753,
	757, 760, 756, 754, 755, 0, 833, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 737, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 730, 0, 0, 0, 0, 784, 0, 731, 0,
	0, 779, 758, 762, 0, 0, 0, 0, 285, 417,
	434, 296, 407, 447, 301, 414, 291, 381, 404, 0,
	0, 287, 432, 413, 363, 342, 343, 286, 0, 399,
	320, 334, 317, 379, 759, 782, 786, 316, 855, 780,
	442, 289, 0, 441, 378, 428, 433, 364, 358, 288,
	430, 362, 357, 346, 324, 856, 347, 348, 338, 390,
	356, 391, 339, 368, 367, 369, 0, 0, 0, 0,
	0, 470, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 601, 777, 0, 605, 0,
	444, 0, 0, 839, 0, 0, 0, 416, 0, 0,
	349, 0, 0, 0, 781, 0, 402, 384, 852, 0,
	0, 400, 354, 429, 392, 435, 418, 443, 396, 393,
	280, 419, 319, 365, 292, 294, 314, 321, 323, 325,
	326, 374, 375, 387, 406, 420, 421, 422, 318, 302,
	401, 303, 336, 304, 281, 310, 308, 311, 408, 312,
	283, 388, 426, 0, 331, 397, 361, 284, 360, 389,
	425, 424, 293, 451, 457, 458, 547, 0, 463, 628,
	629, 630, 472, 477, 478, 479, 481, 482, 483, 484,
	548, 565, 532, 502, 465, 556, 499, 503, 504, 568,
	0, 0, 0, 456, 350, 351, 0, 329, 277, 278,
	623, 837, 380, 570, 603, 604, 495, 0, 851, 832,
	834, 835, 838, 842, 843, 844, 845, 846, 848, 850,
	854, 622, 0, 549, 564, 626, 563, 619, 386, 0,
	405, 561, 508, 0, 553, 527, 0, 554, 523, 558,
	0, 497, 0, 412, 437, 449, 466, 469, 498, 583,
	584, 585, 282, 468, 587, 588, 589, 590, 591, 592,
	593, 586, 853, 530, 507, 533, 448, 510, 509, 0,
	0, 544, 785, 545, 546, 370, 371, 372, 373, 840,
	571, 300, 467, 395, 0, 531, 0, 0, 0, 0,
	0, 0, 0, 0, 536, 537, 534, 631, 0, 594,
	595, 0, 0, 461, 462, 328, 335, 480, 337, 299,
	385, 330, 446, 344, 0, 473, 538, 474, 597, 600,
	598, 599, 377, 340, 341, 409, 345, 355, 398, 445,
	383, 403, 297, 436, 410, 359, 524, 551, 862, 836,
	861, 863, 864, 860, 865, 866, 847, 741, 0, 792,
	858, 857, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 579, 578, 577, 576, 575, 574,
	573, 572, 0, 0, 521, 423, 309, 271, 305, 306,
	313, 620, 617, 427, 621, 0, 279, 501, 353, 0,
	394, 327, 566, 567, 0, 0, 825, 799, 800, 801,
	738, 802, 796, 797, 739, 798, 826, 790, 822, 823,
	766, 793, 803, 821, 804, 824, 827, 828, 867, 868,
	810, 794, 243, 869, 807, 829, 820, 819, 805, 791,
	830, 831, 773, 768, 808, 809, 795, 813, 814, 815,
	740, 787, 788, 789, 811, 812, 769, 770, 771, 772,
	0, 0, 0, 452, 453, 454, 476, 0, 438, 500,
	618, 0, 0, 0, 0, 0, 0, 0, 550, 562,
	596, 0, 606, 607, 609, 611, 816, 613, 415, 783,
	0, 624, 491, 492, 625, 602, 0, 733, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 736, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 774, 542, 493, 411,
	366, 560, 559, 0, 0, 841, 849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 764, 818, 817, 751, 761, 0, 0, 295, 215,
	488, 608, 490, 489, 752, 0, 753, 757, 760, 756,
	754, 755, 0, 833, 0, 0, 0, 0, 0, 0,
	720, 732, 0, 737, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 730, 0,
	0, 0, 0, 784, 0, 731, 0, 0, 779, 758,
	762, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 759, 782, 786, 316, 855, 780, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 856, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 777, 0, 605, 0, 444, 0, 0,
	839, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 781, 0, 402, 384, 852, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 837, 380,
	570, 603, 604, 495, 0, 851, 832, 834, 835, 838,
	842, 843, 844, 845, 846, 848, 850, 854, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 853,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 785,
	545, 546, 370, 371, 372, 373, 840, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 862, 836, 861, 863, 864,
	860, 865, 866, 847, 741, 0, 792, 858, 857, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 825, 799, 800, 801, 738, 802, 796,
	797, 739, 798, 826, 790, 822, 823, 766, 793, 803,
	821, 804, 824, 827, 828, 867, 868, 810, 794, 243,
	869, 807, 829, 820, 819, 805, 791, 830, 831, 773,
	768, 808, 809, 795, 813, 814, 815, 740, 787, 788,
	789, 811, 812, 769, 770, 771, 772, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 816, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 0, 733, 192, 60, 183, 155, 0,
	0, 0, 0, 0, 0, 382, 0, 506, 539, 528,
	612, 494, 0, 184, 0, 0, 0, 0, 0, 0,
	176, 0, 322, 0, 185, 352, 543, 525, 535, 526,
	511, 512, 513, 520, 332, 514, 515, 516, 486, 517,
	487, 518, 519, 129, 542, 493, 411, 366, 560, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 295, 215, 488, 608, 490,
	489, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 285, 417, 434, 296, 407, 447, 301, 414,
	291, 381, 404, 0, 0, 287, 432, 413, 363, 342,
	343, 286, 0, 399, 320, 334, 317, 379, 0, 431,
	459, 316, 450, 0, 442, 289, 0, 441, 378, 428,
	433, 364, 358, 288, 430, 362, 357, 346, 324, 475,
	347, 348, 338, 390, 356, 391, 339, 368, 367, 369,
	0, 0, 0, 0, 0, 470, 471, 0, 0, 0,
	0, 0, 0, 154, 182, 190, 0, 115, 0, 601,
	0, 0, 605, 0, 444, 0, 0, 207, 0, 0,
	0, 416, 0, 0, 349, 181, 175, 174, 460, 0,
	402, 384, 219, 0, 0, 400, 354, 429, 392, 435,
	418, 443, 396, 393, 280, 419, 319, 365, 292, 294,
	314, 321, 323, 325, 326, 374, 375, 387, 406, 420,
	421, 422, 318, 302, 401, 303, 336, 304, 281, 310,
	308, 311, 408, 312, 283, 388, 426, 0, 331, 397,
	361, 284, 360, 389, 425, 424, 293, 451, 457, 458,
	547, 0, 463, 580, 581, 582, 472, 477, 478, 479,
	481, 482, 483, 484, 548, 565, 532, 502, 465, 556,
	499, 503, 504, 568, 0, 0, 0, 456, 350, 351,
	0, 329, 277, 278, 439, 315, 380, 570, 603, 604,
	495, 0, 557, 496, 505, 307, 529, 541, 540, 376,
	455, 210, 552, 555, 485, 220, 0, 549, 564, 522,
	563, 221, 386, 0, 405, 561, 508, 0, 553, 527,
	0, 554, 523, 558, 0, 497, 0, 412, 437, 449,
	466, 469, 498, 583, 584, 585, 282, 468, 587, 588,
	589, 590, 591, 592, 593, 586, 440, 530, 507, 533,
	448, 510, 509, 0, 0, 544, 464, 545, 546, 370,
	371, 372, 373, 333, 571, 300, 467, 395, 127, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 536, 537,
	534, 218, 0, 594, 595, 0, 0, 461, 462, 328,
	335, 480, 337, 299, 385, 330, 446, 344, 0, 473,
	538, 474, 597, 600, 598, 599, 377, 340, 341, 409,
	345, 355, 398, 445, 383, 403, 297, 436, 410, 359,
	524, 551, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 579, 578,
	577, 576, 575, 574, 573, 572, 0, 0, 521, 423,
	309, 271, 305, 306, 313, 225, 290, 427, 226, 0,
	279, 501, 353, 156, 394, 327, 566, 567, 57, 0,
	227, 228, 229, 230, 231, 232, 233, 234, 272, 235,
	236, 237, 238, 239, 240, 241, 244, 245, 246, 247,
	248, 249, 250, 251, 569, 242, 243, 252, 253, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 0, 0, 0, 273, 274, 275, 276, 0, 0,
	267, 268, 269, 270, 0, 0, 0, 452, 453, 454,
	476, 0, 438, 500, 222, 44, 208, 211, 213, 212,
	0, 58, 550, 562, 596, 5, 606, 607, 609, 611,
	610, 613, 415, 192, 132, 223, 491, 492, 224, 602,
	0, 0, 0, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 129, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 2318,
	2321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 2322, 444, 0, 0, 0, 2317, 0, 2316, 416,
	2314, 2319, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 2320, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 156, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1274, 0,
	0, 214, 0, 0, 751, 761, 0, 0, 295, 215,
	488, 608, 490, 489, 752, 0, 753, 757, 760, 756,
	754, 755, 0, 298, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 758,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 759, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 192, 60, 183, 155, 0, 0, 0,
	0, 0, 0, 382, 650, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 656, 0, 0,
	0, 0, 0, 655, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 654, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 651, 653, 300, 467, 395, 664, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 156, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 2318, 2321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 2322, 444, 0, 0,
	0, 2317, 0, 2316, 416, 2314, 2319, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	2320, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 1087, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 2470, 2473, 2474, 2475, 2476, 2477, 2478,
	0, 2483, 2479, 2480, 2481, 2482, 0, 2465, 2466, 2467,
	2468, 1071, 2449, 2471, 0, 2450, 378, 2451, 2452, 2453,
	2454, 2455, 2456, 2457, 2458, 2459, 2462, 2463, 2460, 2461,
	2469, 390, 356, 391, 339, 368, 367, 369, 1098, 1100,
	1102, 1104, 1107, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 0, 444, 0, 0, 0, 0, 0, 0, 416,
	0, 0, 349, 0, 0, 0, 2464, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 2472,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 0, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 2339, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 2338, 444, 0, 0,
	0, 2344, 2341, 2343, 416, 0, 2342, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 2336, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 0, 0, 624, 491,
	492, 625, 602, 382, 0, 506, 539, 528, 612, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	322, 0, 0, 352, 543, 525, 535, 526, 511, 512,
	513, 520, 332, 514, 515, 516, 486, 517, 487, 518,
	519, 0, 542, 493, 411, 366, 560, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 0, 0, 295, 215, 488, 608, 490, 489, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	2339, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	285, 417, 434, 296, 407, 447, 301, 414, 291, 381,
	404, 0, 0, 287, 432, 413, 363, 342, 343, 286,
	0, 399, 320, 334, 317, 379, 0, 431, 459, 316,
	450, 0, 442, 289, 0, 441, 378, 428, 433, 364,
	358, 288, 430, 362, 357, 346, 324, 475, 347, 348,
	338, 390, 356, 391, 339, 368, 367, 369, 0, 0,
	0, 0, 0, 470, 471, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 601, 0, 0,
	605, 2338, 444, 0, 0, 0, 2344, 2341, 2343, 416,
	0, 2342, 349, 0, 0, 0, 460, 0, 402, 384,
	627, 0, 0, 400, 354, 429, 392, 435, 418, 443,
	396, 393, 280, 419, 319, 365, 292, 294, 314, 321,
	323, 325, 326, 374, 375, 387, 406, 420, 421, 422,
	318, 302, 401, 303, 336, 304, 281, 310, 308, 311,
	408, 312, 283, 388, 426, 0, 331, 397, 361, 284,
	360, 389, 425, 424, 293, 451, 457, 458, 547, 0,
	463, 628, 629, 630, 472, 477, 478, 479, 481, 482,
	483, 484, 548, 565, 532, 502, 465, 556, 499, 503,
	504, 568, 0, 0, 0, 456, 350, 351, 0, 329,
	277, 278, 623, 315, 380, 570, 603, 604, 495, 0,
	557, 496, 505, 307, 529, 541, 540, 376, 455, 0,
	552, 555, 485, 622, 0, 549, 564, 626, 563, 619,
	386, 0, 405, 561, 508, 0, 553, 527, 0, 554,
	523, 558, 0, 497, 0, 412, 437, 449, 466, 469,
	498, 583, 584, 585, 282, 468, 587, 588, 589, 590,
	591, 592, 593, 586, 440, 530, 507, 533, 448, 510,
	509, 0, 0, 544, 464, 545, 546, 370, 371, 372,
	373, 333, 571, 300, 467, 395, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 536, 537, 534, 631,
	0, 594, 595, 0, 0, 461, 462, 328, 335, 480,
	337, 299, 385, 330, 446, 344, 0, 473, 538, 474,
	597, 600, 598, 599, 377, 340, 341, 409, 345, 355,
	398, 445, 383, 403, 297, 436, 410, 359, 524, 551,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 578, 577, 576,
	575, 574, 573, 572, 0, 0, 521, 423, 309, 271,
	305, 306, 313, 620, 617, 427, 621, 0, 279, 501,
	353, 0, 394, 327, 566, 567, 0, 0, 227, 228,
	229, 230, 231, 232, 233, 234, 272, 235, 236, 237,
	238, 239, 240, 241, 244, 245, 246, 247, 248, 249,
	250, 251, 569, 242, 243, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 0,
	0, 0, 273, 274, 275, 276, 0, 0, 267, 268,
	269, 270, 0, 0, 0, 452, 453, 454, 476, 0,
	438, 500, 618, 0, 0, 0, 0, 0, 0, 0,
	550, 562, 596, 0, 606, 607, 609, 611, 610, 613,
	415, 0, 0, 624, 491, 492, 625, 602, 382, 0,
	506, 539, 528, 612, 494, 0, 0, 0, 0, 0,
	2042, 0, 0, 0, 0, 322, 0, 0, 352, 543,
	525, 535, 526, 511, 512, 513, 520, 332, 514, 515,
	516, 486, 517, 487, 518, 519, 0, 542, 493, 411,
	366, 560, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 214, 0, 0, 2043, 0, 0, 0, 295, 215,
	488, 608, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 1204, 1205, 1206, 1203,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 285, 417, 434, 296, 407,
	447, 301, 414, 291, 381, 404, 0, 0, 287, 432,
	413, 363, 342, 343, 286, 0, 399, 320, 334, 317,
	379, 0, 431, 459, 316, 450, 0, 442, 289, 0,
	441, 378, 428, 433, 364, 358, 288, 430, 362, 357,
	346, 324, 475, 347, 348, 338, 390, 356, 391, 339,
	368, 367, 369, 0, 0, 0, 0, 0, 470, 471,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 601, 0, 0, 605, 0, 444, 0, 0,
	0, 0, 0, 0, 416, 0, 0, 349, 0, 0,
	0, 460, 0, 402, 384, 627, 0, 0, 400, 354,
	429, 392, 435, 418, 443, 396, 393, 280, 419, 319,
	365, 292, 294, 314, 321, 323, 325, 326, 374, 375,
	387, 406, 420, 421, 422, 318, 302, 401, 303, 336,
	304, 281, 310, 308, 311, 408, 312, 283, 388, 426,
	0, 331, 397, 361, 284, 360, 389, 425, 424, 293,
	451, 457, 458, 547, 0, 463, 628, 629, 630, 472,
	477, 478, 479, 481, 482, 483, 484, 548, 565, 532,
	502, 465, 556, 499, 503, 504, 568, 0, 0, 0,
	456, 350, 351, 0, 329, 277, 278, 623, 315, 380,
	570, 603, 604, 495, 0, 557, 496, 505, 307, 529,
	541, 540, 376, 455, 0, 552, 555, 485, 622, 0,
	549, 564, 626, 563, 619, 386, 0, 405, 561, 508,
	0, 553, 527, 0, 554, 523, 558, 0, 497, 0,
	412, 437, 449, 466, 469, 498, 583, 584, 585, 282,
	468, 587, 588, 589, 590, 591, 592, 593, 586, 440,
	530, 507, 533, 448, 510, 509, 0, 0, 544, 464,
	545, 546, 370, 371, 372, 373, 333, 571, 300, 467,
	395, 0, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 536, 537, 534, 631, 0, 594, 595, 0, 0,
	461, 462, 328, 335, 480, 337, 299, 385, 330, 446,
	344, 0, 473, 538, 474, 597, 600, 598, 599, 377,
	340, 341, 409, 345, 355, 398, 445, 383, 403, 297,
	436, 410, 359, 524, 551, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 578, 577, 576, 575, 574, 573, 572, 0,
	0, 521, 423, 309, 271, 305, 306, 313, 620, 617,
	427, 621, 0, 279, 501, 353, 0, 394, 327, 566,
	567, 0, 0, 227, 228, 229, 230, 231, 232, 233,
	234, 272, 235, 236, 237, 238, 239, 240, 241, 244,
	245, 246, 247, 248, 249, 250, 251, 569, 242, 243,
	252, 253, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 0, 0, 0, 273, 274, 275,
	276, 0, 0, 267, 268, 269, 270, 0, 0, 0,
	452, 453, 454, 476, 0, 438, 500, 618, 0, 0,
	0, 0, 0, 0, 0, 550, 562, 596, 0, 606,
	607, 609, 611, 610, 613, 415, 192, 0, 624, 491,
	492, 625, 602, 0, 0, 0, 382, 0, 506, 539,
	528, 612, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 322, 0, 0, 352, 543, 525, 535,
	526, 511, 512, 513, 520, 332, 514, 515, 516, 486,
	517, 487, 518, 519, 129, 542, 493, 411, 366, 560,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 2092, 0, 214,
	0, 0, 0, 0, 0, 0, 295, 215, 488, 608,
	490, 489, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 285, 417, 434, 296, 407, 447, 301,
	414, 291, 381, 404, 0, 0, 287, 432, 413, 363,
	342, 343, 286, 0, 399, 320, 334, 317, 379, 0,
	431, 459, 316, 450, 0, 442, 289, 0, 441, 378,
	428, 433, 364, 358, 288, 430, 362, 357, 346, 324,
	475, 347, 348, 338, 390, 356, 391, 339, 368, 367,
	369, 0, 0, 0, 0, 0, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	601, 0, 0, 605, 0, 444, 0, 0, 0, 0,
	0, 0, 416, 0, 0, 349, 0, 0, 0, 460,
	0, 402, 384, 627, 0, 0, 400, 354, 429, 392,
	435, 418, 443, 396, 393, 280, 419, 319, 365, 292,
	294, 314, 321, 323, 325, 326, 374, 375, 387, 406,
	420, 421, 422, 318, 302, 401, 303, 336, 304, 281,
	310, 308, 311, 408, 312, 283, 388, 426, 0, 331,
	397, 361, 284, 360, 389, 425, 424, 293, 451, 457,
	458, 547, 0, 463, 628, 629, 630, 472, 477, 478,
	479, 481, 482, 483, 484, 548, 565, 532, 502, 465,
	556, 499, 503, 504, 568, 0, 0, 0, 456, 350,
	351, 0, 329, 277, 278, 623, 315, 380, 570, 603,
	604, 495, 0, 557, 496, 505, 307, 529, 541, 540,
	376, 455, 0, 552, 555, 485, 622, 0, 549, 564,
	626, 563, 619, 386, 0, 405, 561, 508, 0, 553,
	527, 0, 554, 523, 558, 0, 497, 0, 412, 437,
	449, 466, 469, 498, 583, 584, 585, 282, 468, 587,
	588, 589, 590, 591, 592, 593, 586, 440, 530, 507,
	533, 448, 510, 509, 0, 0, 544, 464, 545, 546,
	370, 371, 372, 373, 333, 571, 300, 467, 395, 0,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	537, 534, 631, 0, 594, 595, 0, 0, 461, 462,
	328, 335, 480, 337, 299, 385, 330, 446, 344, 0,
	473, 538, 474, 597, 600, 598, 599, 377, 340, 341,
	409, 345, 355, 398, 445, 383, 403, 297, 436, 410,
	359, 524, 551, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 266, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 579,
	578, 577, 576, 575, 574, 573, 572, 0, 0, 521,
	423, 309, 271, 305, 306, 313, 620, 617, 427, 621,
	0, 279, 501, 353, 156, 394, 327, 566, 567, 0,
	0, 227, 228, 229, 230, 231, 232, 233, 234, 272,
	235, 236, 237, 238, 239, 240, 241, 244, 245, 246,
	247, 248, 249, 250, 251, 569, 242, 243, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 0, 0, 0, 273, 274, 275, 276, 0,
	0, 267, 268, 269, 270, 0, 0, 0, 452, 453,
	454, 476, 0, 438, 500, 618, 0, 0, 0, 0,
	0, 0, 0, 550, 562, 596, 0, 606, 607, 609,
	611, 610, 613, 415, 192, 0, 624, 491, 492, 625,
	602, 0, 0, 0, 382, 0, 506, 539, 528, 612,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 322, 0, 0, 352, 543, 525, 535, 526, 511,
	512, 513, 520, 332, 514, 515, 516, 486, 517, 487,
	518, 519, 129, 542, 493, 411, 366, 560, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 2078, 0, 214, 0, 0,
	0, 0, 0, 0, 295, 215, 488, 608, 490, 489,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 285, 417, 434, 296, 407, 447, 301, 414, 291,
	381, 404, 0, 0, 287, 432, 413, 363, 342, 343,
	286, 0, 399, 320, 334, 317, 379, 0, 431, 459,
	316, 450, 0, 442, 289, 0, 441, 378, 428, 433,
	364, 358, 288, 430, 362, 357, 346, 324, 475, 347,
	348, 338, 390, 356, 391, 339, 368, 367, 369, 0,
	0, 0, 0, 0, 470, 471, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 601, 0,
	0, 605, 0, 444, 0, 0, 0, 0, 0, 0,
	416, 0, 0, 349, 0, 0, 0, 460, 0, 402,
	384, 627, 0, 0, 400, 354, 429, 392, 435, 418,
	443, 396, 393, 280, 419, 319, 365, 292, 294, 314,
	321, 323, 325, 326, 374, 375, 387, 406, 420, 421,
	422, 318, 302, 401, 303, 336, 304, 281, 310, 308,
	311, 408, 312, 283, 388, 426, 0, 331, 397, 361,
	284, 360, 389, 425, 424, 293, 451, 457, 458, 547,
	0, 463, 628, 629, 630, 472, 477, 478, 479, 481,
	482, 483, 484, 548, 565, 532, 502, 465, 556, 499,
	503, 504, 568, 0, 0, 0, 456, 350, 351, 0,
	329, 277, 278, 623, 315, 380, 570, 603, 604, 495,
	0, 557, 496, 505, 307, 529, 541, 540, 376, 455,
	0, 552, 555, 485, 622, 0, 549, 564, 626, 563,
	619, 386, 0, 405, 561, 508, 0, 553, 527, 0,
	554, 523, 558, 0, 497, 0, 412, 437, 449, 466,
	469, 498, 583, 584, 585, 282, 468, 587, 588, 589,
	590, 591, 592, 593, 586, 440, 530, 507, 533, 448,
	510, 509, 0, 0, 544, 464, 545, 546, 370, 371,
	372, 373, 333, 571, 300, 467, 395, 0, 531, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 537, 534,
	631, 0, 594, 595, 0, 0, 461, 462, 328, 335,
	480, 337, 299, 385, 330, 446, 344, 0, 473, 538,
	474, 597, 600, 598, 599, 377, 340, 341, 409, 345,
	355, 398, 445, 383, 403, 297, 436, 410, 359, 524,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 578, 577,
	576, 575, 574, 573, 572, 0, 0, 521, 423, 309,
	271, 305, 306, 313, 620, 617, 427, 621, 0, 279,
	501, 353, 156, 394, 327, 566, 567, 0, 0, 227,
	228, 229, 230, 231, 232, 233, 234, 272, 235, 236,
	237, 238, 239, 240, 241, 244, 245, 246, 247, 248,
	249, 250, 251, 569, 242, 243, 252, 253, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	0, 0, 0, 273, 274, 275, 276, 0, 0, 267,
	268, 269, 270, 0, 0, 0, 452, 453, 454, 476,
	0, 438, 500, 618, 0, 0, 0, 0, 0, 0,
	0, 550, 562, 596, 0, 606, 607, 609, 611, 610,
	613, 415, 0, 0, 624, 491, 492, 625, 602, 382,
	0, 506, 539, 528, 612, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 322, 1003, 0, 352,
	543, 525, 535, 526, 511, 512, 513, 520, 332, 514,
	515, 516, 486, 517, 487, 518, 519, 0, 542, 493,
	411, 366, 560, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 214, 1010, 1011, 0, 0, 0, 0, 295,
	215, 488, 608, 490, 489, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1014, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 285, 417, 998, 296,
	407, 447, 301, 414, 291, 381, 404, 0, 0, 287,
	432, 413, 363, 342, 343, 286, 0, 399, 320, 334,
	317, 379, 0, 431, 459, 316, 450, 987, 442, 289,
	986, 441, 378, 428, 433, 364, 358, 288, 430, 362,
	357, 346, 324, 475, 347, 348, 338, 390, 356, 391,
	339, 368, 367, 369, 0, 0, 0, 0, 0, 470,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 605, 0, 444, 0,
	0, 0, 0, 0, 0, 416, 0, 0, 349, 0,
	0, 0, 460, 0, 402, 384, 627, 0, 0, 400,
	354, 429, 392, 435, 418, 443, 1001, 393, 280, 419,
	319, 365, 292, 294, 314, 321, 323, 325, 326, 374,
	375, 387, 406, 420, 421, 422, 318, 302, 401, 303,
	336, 304, 281, 310, 308, 311, 408, 312, 283, 388,
	426, 0, 331, 397, 361, 284, 360, 389, 425, 424,
	293, 451, 457, 458, 547, 0, 463, 628, 629, 630,
	472, 477, 478, 479, 481, 482, 483, 484, 548, 565,
	532, 502, 465, 556, 499, 503, 504, 568, 0, 0,
	0, 456, 350, 351, 0, 329, 277, 278, 623, 315,
	380, 570, 603, 604, 495, 0, 557, 496, 505, 307,
	529, 541, 540, 376, 455, 0, 552, 555, 485, 622,
	0, 549, 564, 626, 563, 619, 386, 0, 405, 561,
	508, 0, 553, 527, 0, 554, 523, 558, 0, 497,
	0, 412, 437, 449, 466, 469, 498, 583, 584, 585,
	282, 468, 587, 588, 589, 590, 591, 592, 1002, 586,
	440, 530, 507, 533, 448, 510, 509, 0, 0, 544,
	1005, 545, 546, 370, 371, 372, 373, 333, 571, 300,
	467, 395, 0, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 537, 534, 631, 0, 594, 595, 0,
	0, 461, 462, 328, 335, 480, 337, 299, 385, 330,
	446, 344, 0, 473, 538, 474, 597, 600, 598, 599,
	1012, 999, 1008, 1000, 345, 355, 398, 445, 383, 403,
	297, 436, 410, 1009, 524, 551, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 266, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 579, 578, 577, 576, 575, 574, 573, 572,
	0, 0, 521, 423, 309, 271, 305, 306, 313, 620,
	617, 427, 621, 0, 279, 501, 353, 0, 394, 327,
	566, 567, 0, 0, 227, 228, 229, 230, 231, 232,
	233, 234, 272, 235, 236, 237, 238, 239, 240, 241,
	244, 245, 246, 247, 248, 249, 250, 251, 569, 242,
	243, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 0, 0, 0, 273, 274,
	275, 276, 0, 0, 267, 268, 269, 270, 0, 0,
	0, 452, 453, 454, 476, 0, 438, 500, 618, 0,
	0, 0, 0, 0, 0, 0, 550, 562, 596, 0,
	606, 607, 609, 611, 610, 613, 415, 192, 0, 624,
	491, 492, 625, 602, 0, 0, 0, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 129, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1975, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 156, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 1010, 1011, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	987, 442, 289, 986, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 1012, 1994, 1008, 1995, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 1009, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 2844, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 2847, 0, 0,
	2846, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	1481, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 1479, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 1475, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 1479, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3873, 0, 214, 818, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 1479, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 1479, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1688, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 2413,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 2415, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 3046, 3048,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 2434, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 1479, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 638, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 637, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 818, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3852, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 3628, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 3759, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3472, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3643, 0, 214, 0, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	3560, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 3080, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1975, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 3283, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2945, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 1479, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 2415, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 2767, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2113, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 2531, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 2490, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 2273, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 1832,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 1961, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 1479, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 1866,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 1508,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 638, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 648, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 937, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 1459, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 314, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 1457, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 396, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 593, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 0, 452,
	453, 454, 476, 0, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 0, 624, 491, 492,
	625, 602, 382, 0, 506, 539, 528, 612, 494, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 322,
	0, 0, 352, 543, 525, 535, 526, 511, 512, 513,
	520, 332, 514, 515, 516, 486, 517, 487, 518, 519,
	0, 542, 493, 411, 366, 560, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 214, 0, 0, 0, 0,
	0, 0, 295, 215, 488, 608, 490, 489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 285,
	417, 434, 296, 407, 447, 301, 414, 291, 381, 404,
	0, 0, 287, 432, 413, 363, 342, 343, 286, 0,
	399, 320, 334, 317, 379, 0, 431, 459, 316, 450,
	0, 442, 289, 0, 441, 378, 428, 433, 364, 358,
	288, 430, 362, 357, 346, 324, 475, 347, 348, 338,
	390, 356, 391, 339, 368, 367, 369, 0, 0, 0,
	0, 0, 470, 471, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 601, 0, 0, 605,
	0, 444, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 349, 0, 0, 0, 460, 0, 402, 384, 627,
	0, 0, 400, 354, 429, 392, 435, 418, 443, 396,
	393, 280, 419, 319, 365, 292, 294, 715, 321, 323,
	325, 326, 374, 375, 387, 406, 420, 421, 422, 318,
	302, 401, 303, 336, 304, 281, 310, 308, 311, 408,
	312, 283, 388, 426, 0, 331, 397, 361, 284, 360,
	389, 425, 424, 293, 451, 457, 458, 547, 0, 463,
	628, 629, 630, 472, 477, 478, 479, 481, 482, 483,
	484, 548, 565, 532, 502, 465, 556, 499, 503, 504,
	568, 0, 0, 0, 456, 350, 351, 0, 329, 277,
	278, 623, 315, 380, 570, 603, 604, 495, 0, 557,
	496, 505, 307, 529, 541, 540, 376, 455, 0, 552,
	555, 485, 622, 0, 549, 564, 626, 563, 619, 386,
	0, 405, 561, 508, 0, 553, 527, 0, 554, 523,
	558, 0, 497, 0, 412, 437, 449, 466, 469, 498,
	583, 584, 585, 282, 468, 587, 588, 589, 590, 591,
	592, 593, 586, 440, 530, 507, 533, 448, 510, 509,
	0, 0, 544, 464, 545, 546, 370, 371, 372, 373,
	333, 571, 300, 467, 395, 0, 531, 0, 0, 0,
	0, 0, 0, 0, 0, 536, 537, 534, 631, 0,
	594, 595, 0, 0, 461, 462, 328, 335, 480, 337,
	299, 385, 330, 446, 344, 0, 473, 538, 474, 597,
	600, 598, 599, 377, 340, 341, 409, 345, 355, 398,
	445, 383, 403, 297, 436, 410, 359, 524, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 579, 578, 577, 576, 575,
	574, 573, 572, 0, 0, 521, 423, 309, 271, 305,
	306, 313, 620, 617, 427, 621, 0, 279, 501, 353,
	0, 394, 327, 566, 567, 0, 0, 227, 228, 229,
	230, 231, 232, 233, 234, 272, 235, 236, 237, 238,
	239, 240, 241, 244, 245, 246, 247, 248, 249, 250,
	251, 569, 242, 243, 252, 253, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 0, 0,
	0, 273, 274, 275, 276, 0, 0, 267, 268, 269,
	270, 0, 0, 0, 452, 453, 454, 476, 0, 438,
	500, 618, 0, 0, 0, 0, 0, 0, 0, 550,
	562, 596, 0, 606, 607, 609, 611, 610, 613, 415,
	0, 0, 624, 491, 492, 625, 602, 382, 0, 506,
	539, 528, 612, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 322, 0, 0, 352, 543, 525,
	535, 526, 511, 512, 513, 520, 332, 514, 515, 516,
	486, 517, 487, 518, 519, 0, 542, 493, 411, 366,
	560, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 295, 215, 488,
	608, 490, 489, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 285, 417, 434, 296, 407, 447,
	301, 414, 291, 381, 404, 0, 0, 287, 432, 413,
	363, 342, 343, 286, 0, 399, 320, 334, 317, 379,
	0, 431, 459, 316, 450, 0, 442, 289, 0, 441,
	378, 428, 433, 364, 358, 288, 430, 362, 357, 346,
	324, 475, 347, 348, 338, 390, 356, 391, 339, 368,
	367, 369, 0, 0, 0, 0, 0, 470, 471, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 605, 0, 444, 0, 0, 0,
	0, 0, 0, 416, 0, 0, 349, 0, 0, 0,
	460, 0, 402, 384, 627, 0, 0, 400, 354, 429,
	392, 435, 418, 443, 672, 393, 280, 419, 319, 365,
	292, 294, 314, 321, 323, 325, 326, 374, 375, 387,
	406, 420, 421, 422, 318, 302, 401, 303, 336, 304,
	281, 310, 308, 311, 408, 312, 283, 388, 426, 0,
	331, 397, 361, 284, 360, 389, 425, 424, 293, 451,
	457, 458, 547, 0, 463, 628, 629, 630, 472, 477,
	478, 479, 481, 482, 483, 484, 548, 565, 532, 502,
	465, 556, 499, 503, 504, 568, 0, 0, 0, 456,
	350, 351, 0, 329, 277, 278, 623, 315, 380, 570,
	603, 604, 495, 0, 557, 496, 505, 307, 529, 541,
	540, 376, 455, 0, 552, 555, 485, 622, 0, 549,
	564, 626, 563, 619, 386, 0, 405, 561, 508, 0,
	553, 527, 0, 554, 523, 558, 0, 497, 0, 412,
	437, 449, 466, 469, 498, 583, 584, 585, 282, 468,
	587, 588, 589, 590, 591, 592, 673, 586, 440, 530,
	507, 533, 448, 510, 509, 0, 0, 544, 464, 545,
	546, 370, 371, 372, 373, 333, 571, 300, 467, 395,
	0, 531, 0, 0, 0, 0, 0, 0, 0, 0,
	536, 537, 534, 631, 0, 594, 595, 0, 0, 461,
	462, 328, 335, 480, 337, 299, 385, 330, 446, 344,
	0, 473, 538, 474, 597, 600, 598, 599, 377, 340,
	341, 409, 345, 355, 398, 445, 383, 403, 297, 436,
	410, 359, 524, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 0, 0, 0, 0,
	0, 0, 0, 0, 1087, 0, 0, 0, 0, 0,
	579, 578, 577, 576, 575, 574, 573, 572, 0, 0,
	521, 423, 309, 271, 305, 306, 313, 620, 617, 427,
	621, 0, 279, 501, 353, 0, 394, 327, 566, 567,
	0, 0, 227, 228, 229, 230, 231, 232, 233, 234,
	272, 235, 236, 237, 238, 239, 240, 241, 244, 245,
	246, 247, 248, 249, 250, 251, 569, 242, 243, 252,
	253, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 0, 0, 0, 273, 274, 275, 276,
	0, 0, 267, 268, 269, 270, 0, 0, 1948, 452,
	453, 454, 476, 1909, 438, 500, 618, 0, 0, 0,
	0, 0, 0, 0, 550, 562, 596, 0, 606, 607,
	609, 611, 610, 613, 415, 0, 1073, 624, 491, 492,
	625, 602, 0, 1950, 1918, 0, 0, 0, 0, 0,
	0, 0, 0, 1951, 1952, 0, 1095, 1099, 1101, 1103,
	1105, 1106, 1108, 0, 1113, 1109, 1110, 1111, 1112, 0,
	1090, 1091, 1092, 1093, 1071, 1072, 1096, 0, 1074, 1917,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1086,
	1088, 1084, 1085, 1094, 0, 1925, 0, 0, 0, 0,
	0, 1098, 1100, 1102, 1104, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 694,
	693, 700, 690, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 698, 0, 699, 703, 0, 1948, 684, 1089,
	0, 0, 1909, 0, 0, 0, 0, 0, 708, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1941, 0, 0, 0, 0, 0, 0,
	0, 0, 1950, 1918, 0, 0, 0, 0, 0, 0,
	0, 0, 1951, 1952, 0, 0, 0, 0, 0, 0,
	0, 0, 712, 0, 0, 714, 0, 0, 0, 0,
	713, 0, 0, 0, 0, 0, 0, 0, 1917, 0,
	0, 0, 0, 0, 0, 0, 1204, 1205, 1206, 1203,
	0, 0, 0, 0, 1925, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1908, 1910, 1907, 0, 1904, 0,
	0, 0, 0, 1929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1935, 0, 0, 0, 0, 0,
	0, 0, 1920, 0, 1903, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1923, 1957, 0, 0, 1924, 1926,
	1928, 0, 1930, 1931, 1932, 1936, 1937, 1938, 1940, 1943,
	1944, 1945, 1941, 0, 0, 1721, 0, 0, 0, 1933,
	1942, 1934, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1912, 0, 1948, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1949, 0, 0, 0, 685, 687, 686,
	0, 0, 3481, 0, 0, 0, 0, 692, 1950, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 696,
	1905, 1906, 0, 1908, 2733, 1907, 711, 2732, 0, 0,
	0, 0, 1929, 689, 0, 0, 0, 0, 1946, 0,
	0, 0, 0, 1935, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 1922, 0, 0, 0, 0,
	1925, 0, 1921, 1923, 1957, 0, 0, 1924, 1926, 1928,
	0, 1930, 1931, 1932, 1936, 1937, 1938, 1940, 1943, 1944,
	1945, 0, 1097, 0, 0, 0, 1939, 0, 1933, 1942,
	1934, 0, 0, 0, 0, 1927, 0, 0, 0, 0,
	1912, 0, 0, 1948, 0, 0, 0, 0, 1954, 1953,
	0, 0, 0, 0, 0, 0, 0, 0, 1717, 0,
	0, 0, 1949, 0, 0, 1714, 0, 0, 1941, 1716,
	1713, 1715, 1719, 1720, 0, 0, 0, 1718, 1950, 0,
	0, 1948, 0, 691, 695, 701, 0, 702, 704, 1905,
	1906, 705, 706, 707, 0, 0, 709, 710, 0, 0,
	0, 1914, 0, 0, 0, 0, 0, 1946, 0, 0,
	0, 0, 0, 0, 0, 0, 1950, 0, 0, 0,
	3649, 0, 0, 0, 1922, 0, 0, 0, 0, 0,
	1925, 1921, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1956, 0, 0, 1955, 0, 1929, 0,
	0, 0, 0, 0, 0, 1939, 0, 0, 0, 1935,
	0, 0, 0, 0, 1927, 0, 0, 0, 1925, 0,
	0, 0, 0, 0, 0, 0, 0, 1954, 1953, 1923,
	1957, 0, 0, 1924, 1926, 1928, 0, 1930, 1931, 1932,
	1936, 1937, 1938, 1940, 1943, 1944, 1945, 0, 1941, 0,
	0, 0, 0, 0, 1933, 1942, 1934, 0, 0, 0,
	1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711,
	1712, 1724, 1725, 1726, 1727, 1728, 1729, 1722, 1723, 0,
	1914, 0, 3620, 0, 0, 0, 1941, 0, 1949, 0,
	0, 0, 0, 0, 0, 1948, 0, 0, 0, 0,
	0, 0, 688, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1956, 0, 0, 1955, 0, 0, 1929, 0,
	1950, 0, 0, 1946, 0, 0, 0, 0, 0, 1935,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1922, 0, 0, 0, 0, 0, 0, 1921, 0, 1923,
	1957, 0, 0, 1924, 1926, 1928, 1929, 1930, 1931, 1932,
	1936, 1937, 1938, 1940, 1943, 1944, 1945, 1935, 0, 0,
	0, 1939, 1925, 0, 1933, 1942, 1934, 0, 0, 0,
	1927, 0, 0, 0, 0, 0, 0, 1923, 1957, 0,
	0, 1924, 1926, 1928, 0, 1930, 1931, 1932, 1936, 1937,
	1938, 1940, 1943, 1944, 1945, 0, 0, 0, 1949, 0,
	0, 0, 1933, 1942, 1934, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1941, 0, 0, 0, 0, 0, 1949, 0, 0, 0,
	0, 0, 0, 1946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1922, 0, 0, 0, 0, 0, 0, 1921, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 156, 0,
	0, 1946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1939, 0, 0, 0, 0, 0, 0, 1922, 0,
	1927, 0, 0, 0, 0, 1921, 0, 0, 0, 0,
	1929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1935, 0, 0, 0, 0, 0, 0, 0, 1939,
	0, 0, 0, 0, 0, 0, 0, 0, 1927, 0,
	0, 1923, 1957, 0, 0, 1924, 1926, 1928, 0, 1930,
	1931, 1932, 1936, 1937, 1938, 1940, 1943, 1944, 1945, 0,
	0, 0, 0, 0, 0, 0, 1933, 1942, 1934, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1949, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1946, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1922, 0, 0, 0, 0, 0, 0, 1921,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1939, 0, 0, 0, 0, 0, 0,
	0, 0, 1927,
}

var yyPact = [...]int{
	304, -1000, -1000, -1000, -299, 13452, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 45454, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 457, 45454, -292,
	27619, 43609, -1000, -1000, 2884, -1000, 44224, 15310, 45454, 559,
	558, 45454, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 949, -1000, 47914, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 887, 4042, 47299, 10357, -197,
	-1000, 1812, -20, 2650, 485, -177, -180, 1148, 1168, 1292,
	1292, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 334, 985, 44839, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3783, 264, 985, 20236, 153, 146, 1812, 502, -86,
	217, -1000, 1307, 3856, 222, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10357, 10357, 13452, -348,
	13452, 10357, 45454, 45454, -1000, -1000, -1000, -1000, -292, 44224,
	887, 4042, 10357, 2650, 485, -177, -180, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-86, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 146,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 5100, -1000, 1715, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2375, 3130, 1710, 2646, 828, 43609, 45454, -1000,
	151, 828, -1000, -1000, -1000, 1812, 3527, -1000, 45454, 45454,
	239, 1997, -1000, 494, 478, 402, 360, 1709, -1000, -1000,
	-1000, -1000, -1000, -1000, 740, 3494, -1000, 45454, 45454, 3159,
	45454, -1000, 2333, 770, -1000, 48616, 3321, 1411, 987, 3191,
	-1000, -1000, 3129, -1000, 361, 340, 364, 742, 447, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 365, -1000, 3413, -1000,
	-1000, 341, -1000, -1000, 342, -1000, -1000, -1000, 144, -1000,
	-1000, -1000, -1000, -1000, -1000, 37, -1000, -1000, 1252, 2426,
	10357, 2156, -1000, 3803, 1723, -1000, -1000, -1000, 6031, 12208,
	12208, 12208, 12208, 45454, -1000, -1000, 2970, 10357, 3128, 3127,
	3123, 3121, -1000, -1000, -1000, -1000, -1000, -1000, 1694, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2163, -1000,
	-1000, -1000, 12825, -1000, 3115, 3110, 3104, 3103, 3102, 3096,
	3092, 3091, 3085, 3084, 3083, 3081, 3080, 3078, 2826, 14685,
	3077, 2620, 2618, 3076, 3073, 3071, 2616, 3068, 3067, 3066,
	2826, 2826, 3064, 3061, 3059, 3058, 3053, 3051, 3047, 3046,
	3045, 3043, 3042, 3041, 3040, 3037, 3034, 3033, 3006, 3005,
	3004, 3003, 3000, 2999, 2997, 2996, 2995, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1428, -1000, 2992, 3504, 2936, -1000, 3380, 3370, 3356, 3352,
	-252, 2991, 2284, -1000, -1000, 133, 3491, 45454, 2613, -101,
	2611, -102, -1000, -55, -1000, -1000, 1122, -1000, 1098, -1000,
	883, 883, 883, 45454, 45454, 224, 915, 883, 883, 883,
	883, 883, 917, 883, 3425, 947, 940, 935, 934, 883,
	-37, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1995, 1993,
	3239, 1053, -1000, -1000, -1000, -1000, 1557, 45454, -1000, 2921,
	2610, 1773, 1773, 3461, 3461, 3422, 808, 792, 788, 1773,
	637, -1000, 1879, 1879, 1879, 1879, 1773, 517, 781, 3428,
	3428, 134, 1879, 104, 1773, 1773, 104, 1773, 1773, -1000,
	1990, 274, -258, -1000, -1000, -1000, -1000, 1879, 1879, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3407, 3406, 887, 887,
	45454, 887, 208, 45454, 887, 887, 887, 892, 63, 46684,
	46069, 2333, 766, 753, 1562, 1968, -1000, 1898, 45454, 45454,
	1898, 1898, 23314, 22699, -1000, 45454, -1000, 3504, 2936, 2824,
	1589, 2822, 2936, -104, 2607, 887, 887, 887, 887, 887,
	313, 887, 887, 887, 887, 887, 45454, 45454, 42994, 887,
	887, 887, 887, 8499, 8499, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 13452, 2209, 2142, 221, 5, -285,
	291, -1000, -1000, 45454, 3294, 316, -1000, -1000, -1000, 2839,
	-1000, 2891, 2891, 2891, 2891, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2891, 2891, 2913, 2989, -1000, -1000,
	2890, 2890, 2890, 2839, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2905,
	2905, 2912, 2912, 2905, 45454, -118, -1000, -1000, 10357, 45454,
	3314, 419, 2988, 828, -1000, -1000, 45454, 117, 429, 3504,
	3309, 3428, 3454, -1000, -1000, 1682, 2283, 2605, -1000, 360,
	-1000, 422, 360, 1841, -1000, 1171, -1000, -1000, -1000, -1000,
	-1000, 45454, 37, 795, -1000, -1000, 2579, 2987, -1000, 650,
	1358, 1556, -1000, 339, 4124, 36229, 2333, 36229, 45454, -1000,
	-1000, -1000, -1000, -1000, -1000, 141, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	355, -1000, 10357, 10357, 10357, 10357, 10357, -1000, 992, 11591,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 12208, 12208, 12208,
	12208, 12208, 12208, 12208, 12208, 12208, 12208, 12208, 12208, 2962,
	2030, 12208, 12208, 12208, 12208, 25159, 1589, 3161, 1561, 310,
	1723, 1723, 1723, 1723, 10357, -1000, 2009, 2426, 10357, 10357,
	10357, 10357, 45454, -1000, -1000, 48615, 10357, 10357, 3678, 10357,
	3350, 10357, 10357, 10357, 2821, 4514, 45454, 10357, -1000, 2820,
	2818, -1000, -1000, 2127, 10357, -1000, -1000, 10357, -1000, -1000,
	10357, 12208, 10357, -1000, 10357, 10357, 10357, -1000, -1000, 2105,
	3350, 3350, 3350, 1860, 10357, 10357, 3350, 3350, 3350, 1856,
	3350, 3350, 3350, 3350, 3350, 3350, 3350, 3350, 3350, 3350,
	2817, 2812, 2811, 9740, 3428, -197, -1000, 7882, 3309, 3428,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-254, 2985, 45454, 2604, 2603, -307, 1143, 471, 407, 2278,
	-108, 2277, 69, 1146, 1101, 1103, -1000, 2594, 2020, 45454,
	45454, 3341, -1000, 2982, 45454, 883, 883, 883, -1000, 41149,
	36229, 45454, 45454, 2333, 45454, 45454, 45454, 883, 883, 883,
	883, 45454, -1000, 3261, 36229, 3243, 892, -1000, 45454, 1557,
	3340, 45454, 407, 3461, 12208, 12208, -1000, -1000, 10357, -1000,
	42379, 1879, 1773, 1773, -1000, -1000, 45454, -1000, -1000, -1000,
	1879, 45454, 1879, 1879, 3461, 1879, -1000, -1000, -1000, 1773,
	1773, -1000, -1000, 10357, -1000, -1000, 1879, 1879, -1000, -1000,
	3461, 45454, 110, 3461, 3461, 108, -1000, -1000, -1000, 1773,
	45454, 45454, 883, 45454, -1000, 45454, 45454, -1000, -1000, 45454,
	45454, 48512, 45454, 41149, 41764, 3404, -1000, 36229, 45454, 45454,
	33769, -1000, 1509, -1000, 75, -1000, 67, 63, 1898, 63,
	1898, -1000, 648, 728, 21469, 587, 36229, 5413, -1000, -1000,
	1898, 1898, 5413, 5413, 1726, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1550, -1000, 325, 3428, -1000, -1000, -1000, -1000,
	-1000, 2275, 407, 45454, 41149, 36229, 2333, 45454, 887, 45454,
	45454, 45454, 45454, 45454, -1000, 2977, 1670, -1000, 3320, 45454,
	45454, 45454, 45454, 1528, -1000, -1000, 18385, 1658, 1528, -1000,
	2017, -1000, 10357, 13452, -238, 10357, 13452, 13452, 10357, 13452,
	-1000, 10357, 303, -1000, -1000, -1000, -1000, 2274, -1000, 2273,
	-1000, -1000, -1000, -1000, -1000, 2592, 2592, -1000, 2270, -1000,
	-1000, -1000, -1000, 2269, -1000, -1000, 2267, -1000, -1000, -1000,
	-1000, -139, 2805, 1252, -1000, 2590, 3185, -206, -1000, 19621,
	45454, 45454, 419, -309, -1000, 1982, 1980, 1978, -1000, -206,
	-1000, 19003, 45454, 3428, -1000, -213, 3309, 10357, 45454, -1000,
	3421, -1000, -1000, 360, -1000, 461, 475, -1000, -1000, -1000,
	-1000, -1000, -1000, 1655, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 445, -88, -92, 1536, -1000, 45454,
	-1000, -1000, 339, 36229, 38074, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 260, -1000, -1000, 190, -1000, 924, 273, 1834,
	-1000, -1000, 225, 213, 223, 1014, 2426, -1000, 2031, 2031,
	2032, -1000, 757, -1000, -1000, -1000, -1000, 2970, -1000, -1000,
	-1000, 2836, 1927, -1000, 2006, 2006, 1732, 1732, 1732, 1732,
	1732, 1939, 1939, -1000, -1000, -1000, 6031, 2962, 12208, 12208,
	12208, 12208, 965, 965, 3815, 3622, -1000, -1000, -1000, -1000,
	10357, 236, 2012, -1000, 10357, 2481, 1659, 2433, 1648, 1654,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2795, 2794, 2420, 3490, 2792, 10357, -1000, -1000, 1816, 1814,
	1807, -1000, 2180, 9123, -1000, -1000, -1000, 2791, 1644, 2790,
	-1000, -1000, -1000, 2789, 1788, 1399, 2787, 1840, 2785, 2784,
	2783, 2782, 1534, 10357, 10357, 10357, 10357, 2775, 1780, 1779,
	10357, 10357, 10357, 10357, 2772, 10357, 10357, 10357, 10357, 10357,
	10357, 10357, 10357, 10357, 10357, 147, 147, 147, 1532, 1530,
	-1000, -1000, 1777, -1000, 2426, -1000, -1000, 3309, -1000, 2959,
	2263, 1514, -1000, -1000, -284, 2519, 45454, 1129, 45454, -1000,
	-1000, 2589, -1000, 2587, -1000, -1000, -1000, 1126, 1092, 1080,
	2583, 3319, 3420, 928, 45454, 1312, 2958, 45454, 45454, 45454,
	298, -1000, -1000, 1316, -1000, 273, 7, 571, 1328, 3154,
	3488, -119, 45454, 45454, 45454, 45454, 3338, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 40534, -1000, 2952, 1776, -1000,
	-1000, -1000, 1723, 1723, 2426, 3149, 45454, 45454, 3461, 3461,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1879, 3461, 3461,
	1437, 1773, 1879, -1000, -1000, 1879, -329, -1000, 1879, -1000,
	-329, 1627, -329, 45454, -1000, -1000, -1000, 3337, 2921, 1512,
	-1000, -1000, -1000, 3453, 1607, 872, 872, 1091, 774, 3452,
	17155, -1000, 1869, 1327, 922, 3284, 362, -1000, 1869, -136,
	854, 1869, 1869, 1869, 1869, 1869, 1869, 1869, 717, 711,
	1869, 1869, 1869, 1869, 1869, 1869, 1869, 1869, 1869, 1869,
	1869, 1162, 1869, 1869, 1869, 1869, 1869, -1000, 1869, 2944,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 758, 672, 297,
	3391, 389, -1000, 426, 1316, 3389, 436, 3492, 1359, -1000,
	-1000, -1000, -1000, 25774, 25774, 20854, 25774, -1000, 207, 63,
	48, -1000, -1000, 1509, 5413, 1509, 5413, -1000, -1000, 919,
	-1000, -1000, 1328, -1000, 45454, 45454, -1000, -1000, 2943, 1976,
	-1000, -1000, 14685, -1000, 5413, 5413, -1000, -1000, 27004, 45454,
	-1000, 32, -1000, 51, 3309, -1000, -1000, 1319, -1000, -1000,
	1502, 1328, 3182, 45454, 1319, 1319, 1319, -1000, -1000, 16540,
	45454, 45454, -1000, -1000, -1000, -1000, 3461, 8499, -1000, 33769,
	-1000, -1000, 39919, -1000, 39304, 3461, 2008, -1000, 13452, 2131,
	203, -1000, 287, -297, 218, 2082, 216, 2426, -1000, -1000,
	2768, 2767, 1775, -1000, 1767, 2759, 1752, 1751, 2262, -1000,
	96, -1000, 3299, 1336, -1000, 2941, -1000, 1748, 3236, -1000,
	1499, -1000, 1975, 1740, -1000, -1000, -1000, 10357, 38689, 10357,
	1336, 1738, 3234, 1499, 3309, 2582, -1000, 1465, -1000, 2407,
	1625, 230, -1000, -1000, -1000, 45454, 887, 2579, 1705, 38074,
	1365, -1000, 918, 1619, 1601, -1000, 36229, 348, 36229, -1000,
	36229, -1000, -1000, 400, -1000, 45454, 3306, -1000, -1000, -1000,
	2519, 1974, -328, 45454, -1000, -1000, -1000, -1000, -1000, 1695,
	-1000, 965, 965, 3815, 3584, -1000, 12208, -1000, 12208, 3125,
	-1000, 2003, -1000, 10357, 2104, 5030, 10357, 5030, 904, 24544,
	45454, -1000, -1000, 10357, 10357, -1000, 3108, -1000, -1000, -1000,
	-1000, 10357, 10357, 2371, -1000, 45454, -1000, -1000, -1000, -1000,
	24544, -1000, 12208, -1000, -1000, -1000, -1000, 10357, 1342, 1342,
	3089, 1690, 147, 147, 147, 3069, 3026, 3001, 1685, 147,
	2950, 2945, 2937, 2926, 2919, 2903, 2887, 2834, 2799, 2779,
	-1000, 2939, -1000, -1000, 2084, 10974, 7882, -1000, -1000, 326,
	1462, 2259, 2571, 132, -1000, 1973, -1000, 45454, 1161, -1000,
	2570, -1000, -1000, -1000, 1084, 2566, -1000, 474, 2134, 183,
	317, 2757, 1442, -1000, -1000, 45454, -1000, -1000, -1000, 16540,
	2921, 2935, 2921, 167, 1869, 653, 36229, 736, -1000, 45454,
	2107, 1966, 3180, 863, 3291, 45454, 2930, 483, 2929, 2924,
	3336, 550, 48393, 45454, 1318, -1000, 1600, 3856, -1000, 45454,
	-1000, 2333, -1000, 1773, -1000, -1000, 3461, -1000, -1000, 10357,
	10357, 3461, 1773, 1773, -1000, 1119, 1879, -1000, 45454, -1000,
	-1000, 550, 48393, 3327, 48641, 678, 2413, -1000, 45454, -1000,
	-1000, -1000, 884, -1000, 1062, 883, 45454, 2062, 1062, 2060,
	2923, -1000, -1000, 45454, 45454, 45454, 45454, -1000, -1000, 45454,
	-1000, 45454, 45454, 45454, 45454, 45454, 37459, -1000, 45454, 45454,
	-1000, 45454, 2059, 45454, 2052, 3271, -1000, 1869, 1869, 1017,
	-1000, -1000, 644, -1000, 37459, 2258, 2257, 2253, 2252, 2560,
	2555, 2554, 1869, 1869, 2242, 2548, 36844, 2542, 1300, 2239,
	2230, 2220, 2261, 2541, 1102, -1000, 2540, 2255, 2248, 2179,
	45454, 2922, 2471, -1000, -1000, 2134, 167, 1869, 383, 45454,
	1965, 1938, 653, 563, -9, 22084, 45454, 33769, 33769, 33769,
	33769, -1000, 3208, 3190, 3016, -1000, 3210, 3209, 3216, 45454,
	33769, 2921, -1000, 36844, -1000, -1000, -1000, 1589, 1683, 3178,
	1077, 10357, -1000, -1000, 72, 62, -1000, -1000, -1000, 36229,
	2529, 587, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3419,
	45454, 45454, 838, 2753, 1427, -1000, -1000, -1000, 48393, 2891,
	2891, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2891, 2891, 2913, -1000, -1000, 2890, 2890, 2890, 2839, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2905,
	2905, 2912, 2912, 2905, -1000, -1000, 3458, -1000, 1419, -1000,
	-1000, 1599, -1000, 3458, 2022, -302, 13452, 1940, 1781, -1000,
	10357, 13452, 10357, -242, 373, -244, -1000, -1000, -1000, 2525,
	-1000, -1000, -1000, 2219, -1000, 2217, -1000, 196, 220, 2049,
	-206, 7882, 434, 45454, -206, 45454, 7882, -1000, 45454, 211,
	-339, -340, 202, 428, -206, 3419, 96, 10357, 3278, -1000,
	-1000, 45454, 2215, -1000, -1000, -1000, 3474, 36229, 2333, 1757,
	35614, -1000, 335, -1000, 259, 605, 2524, -1000, 931, 131,
	2521, 2519, -1000, -1000, -1000, -1000, 12208, 1723, -1000, -1000,
	-1000, 2426, 10357, 2750, -1000, 1069, 1069, 2280, 2743, 2742,
	-1000, 2891, 2891, -1000, 2839, 2890, 2839, 1069, 1069, 2741,
	-1000, 2378, 2774, -1000, 2719, 2697, 10357, -1000, 2739, 3355,
	1525, -52, -167, 147, 147, -1000, -1000, -1000, -1000, 147,
	147, 147, 147, -1000, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 839, -85, -265, -87, -270, -1000,
	2738, 1417, -1000, -1000, -1000, -1000, -1000, 3678, 1406, 596,
	596, 2519, 2518, 916, 1115, 45454, -1000, -1000, 2515, -1000,
	-1000, 45454, 2514, -1000, 671, 45454, 45454, 2513, 2512, 1312,
	48393, 2734, 3325, 15925, 3323, 2296, -1000, -1000, -1000, 26389,
	604, -1000, -1000, -1000, 718, 370, 2213, 592, -1000, 45454,
	576, 3249, 1937, 2511, 45454, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3291, -1000, 909, 508, 32539, 14070, -1000, 398,
	45454, -1000, 15925, 15925, 398, 516, 1996, -1000, 828, 1297,
	142, 33769, 45454, -1000, 33154, 2733, -1000, 1328, 3461, -1000,
	2426, 2426, -329, 3461, 3461, 1935, 1773, -1000, 516, -1000,
	398, -1000, 1037, 17770, 614, 507, 490, -1000, 739, -1000,
	-1000, 820, 3257, 48393, -1000, 45454, -1000, 45454, -1000, 45454,
	45454, 883, 10357, 3257, 45454, 912, -1000, -1000, 1165, 532,
	479, 842, 842, 1395, -1000, 3303, -1000, -1000, 1379, -1000,
	-1000, -1000, -1000, 45454, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 24544, 24544, 3388, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2510, 2508, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 45454, 1647,
	-1000, 1934, 2507, 2296, 26389, 1932, 1898, 2502, 2497, 604,
	2107, 1929, 911, 45454, -1000, 1324, 45454, 45454, -1000, 1517,
	-1000, 1925, 3136, 3175, 3136, -1000, -1000, -1000, -1000, -1000,
	2902, -1000, 2851, -1000, -1000, 1517, -1000, -1000, -1000, -1000,
	-1000, 1077, -1000, 3417, 1062, 1062, 1062, 2728, -1000, -1000,
	-1000, 1365, 2723, -1000, -1000, -1000, 3499, -1000, -1000, -1000,
	-1000, -1000, -1000, 16540, 3290, 3456, 3451, 34999, 3456, -1000,
	-302, 1850, -1000, 2094, 206, 2077, 45454, -1000, -1000, -1000,
	2721, 2720, -219, 214, 3449, 3448, 1110, -1000, 2718, 1352,
	-206, -1000, -1000, 1336, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -206, -1000, 1336, -1000, 196, -1000, -1000, 3272, -1000,
	-1000, 2333, -1000, 257, -1000, -1000, -1000, -1000, -1000, -1000,
	255, -1000, 45454, -1000, 1350, 129, -1000, 2426, -1000, -1000,
	-1000, -1000, -1000, 5030, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10357, -1000, -1000, -1000, 2681,
	-1000, -1000, 10357, 2714, 2495, 2712, 2493, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3504, -1000, 3447, 1646, 2706, 2705, 1606,
	2694, 2693, -1000, 10357, 2692, 3678, 1028, 2492, 1028, -1000,
	-1000, 435, 45454, 3467, 2490, -1000, -1000, 2134, 654, 727,
	-1000, -1000, -1000, -1000, 957, 398, 2688, 1340, -1000, -1000,
	-1000, -1000, 398, -1000, 2489, 271, -1000, -1000, -1000, -1000,
	2480, 2479, 2211, -1000, -1000, 2160, 1329, 289, -1000, -1000,
	-1000, -1000, -1000, -1000, 2148, 45454, 34384, 2292, 1921, -331,
	-1000, 2889, -1000, 1869, 1869, 1869, 45454, 1594, -1000, 1869,
	1869, 2680, -1000, -1000, 2673, 2672, -122, 843, 1936, 1859,
	-1000, 2204, 25774, 33769, 33154, 1366, -1000, 1590, -1000, -1000,
	-1000, -1000, -1000, -1000, 2474, 3461, 843, -1000, 607, 2198,
	12208, 2886, 12208, 2882, 635, 2881, 1592, -1000, 45454, -1000,
	-1000, 45454, 369, 2878, -1000, 2877, 3148, 594, 2875, 2873,
	45454, 2674, -1000, 3257, 45454, 772, 3287, -1000, -1000, -1000,
	466, -1000, -1000, 674, -1000, 45454, -1000, 45454, -1000, 1689,
	-1000, 24544, -1000, -1000, 1584, -1000, 2471, 2470, -1000, -1000,
	271, 2469, 5413, -1000, -1000, -1000, 3249, 2464, 2148, 45454,
	-1000, 45454, 1324, 1324, 3504, 45454, 7882, -1000, -1000, 10357,
	2872, -1000, 10357, -1000, -1000, -1000, -1000, -1000, 2871, 3269,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1622, -1000, 10357,
	10357, -1000, -1000, 878, 13452, -245, 372, -1000, -1000, -1000,
	-221, 2461, -1000, -1000, 3446, 2446, 2324, 45454, -1000, -1000,
	1336, 1336, -219, -1000, -1000, 1328, -1000, -1000, 1210, 720,
	-1000, 2670, 2657, -1000, 2649, 147, -1000, 147, -1000, 279,
	10357, -1000, 2441, -1000, -1000, -1000, 2438, -1000, -1000, 2577,
	-1000, 2669, -1000, 2436, -1000, -1000, 45454, 906, 1112, -335,
	2412, 2134, 2134, 45454, 48393, -123, -122, 15925, -123, -1000,
	-1000, 391, -1000, -1000, 408, -1000, -1000, 2159, 646, -1000,
	-1000, 2411, 627, -1000, 1324, -1000, 1919, 2069, 2358, 30694,
	24544, 25159, 2406, -1000, -1000, 32539, 1622, 1622, 48817, 355,
	49149, -1000, 2867, 1166, 1847, -1000, 2177, -1000, 2176, -1000,
	3461, 1366, 140, -1000, -1000, 1742, -346, -1000, 1166, 2413,
	3445, -1000, 3285, 45454, 2960, 45454, 2847, 1917, 12208, -1000,
	820, 3218, -1000, -1000, 369, -1000, -1000, 2073, 12208, -1000,
	-1000, 2398, 25159, 1058, 1908, 1903, 1042, 2846, -1000, 684,
	3498, -1000, -1000, -1000, 1011, 2841, -1000, 2048, 2046, -1000,
	45454, -1000, 30694, 30694, 773, 773, 30694, 30694, 2840, 842,
	-1000, -1000, 12208, -1000, -1000, 1869, -1000, -1000, -1000, 1869,
	1581, -1000, -1000, -1000, -1000, -1000, -1000, 2292, -1000, -1000,
	1319, -1000, 3428, -1000, -1000, 2426, 45454, 2426, 31924, -1000,
	3444, 3443, -1000, 2426, 1252, -1000, -302, 45454, 45454, -225,
	2173, -1000, 2397, 229, -1000, -1000, 1311, -221, -229, 108,
	24544, 1896, -1000, -1000, -1000, -1000, -1000, 2668, -1000, 722,
	-1000, -1000, -1000, 1252, 2661, 2658, -1000, -1000, -1000, -1000,
	420, 45454, 2343, -1000, 2391, 2389, 651, -116, -1000, -1000,
	460, -1000, -1000, -1000, 628, 2316, -1000, -1000, 403, -1000,
	-1000, -1000, 2148, 2387, -1000, -1000, 124, -1000, 1883, 1577,
	-1000, 2839, 10357, -1000, -1000, -1000, -1000, -1000, -1000, 816,
	-1000, 398, 48985, -1000, 1327, -1000, 1210, 816, 29464, 705,
	329, -1000, 2171, -1000, -1000, 3504, -1000, -1000, 699, -1000,
	625, -1000, 1537, -1000, 1529, 31309, 2169, 2365, -1000, 48947,
	907, -1000, -1000, 3815, -1000, -1000, -1000, -1000, -1000, -1000,
	2386, 2385, -1000, -1000, -1000, -1000, -1000, 2150, 2838, 33,
	3386, 2377, -1000, -1000, 2833, 1483, 1478, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1460, 1454, 30694, -1000,
	-1000, 3815, 2135, 24544, 1869, -1000, -1000, 1447, 1422, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2832, -1000, -1000, 3442,
	-225, -231, 2374, 191, 205, -1000, 2359, -1000, -1000, 898,
	-208, 177, 172, 158, -1000, -1000, -1000, 10357, -1000, -1000,
	45454, 899, 123, -1000, 1882, -1000, -1000, 2134, 45454, 682,
	-1000, -1000, -1000, -1000, 233, -1000, -1000, -1000, -1000, -1000,
	-1000, 2358, 2350, -1000, 30694, 3303, 2522, 598, 3441, -1000,
	49149, -1000, 1869, -1000, 598, 1421, -1000, 1869, 1869, -1000,
	531, -1000, 1827, -1000, 2133, -1000, 3428, -1000, 527, -1000,
	602, -1000, -1000, -1000, 1408, -1000, -1000, -1000, 48947, 610,
	-1000, 776, 2831, -1000, -1000, 2656, 10357, 2826, 1869, 2383,
	-111, 30694, 3147, 3143, 3142, 2928, 1402, -1000, -1000, 24544,
	-1000, -1000, 30079, 45454, 2324, -1000, -1000, 2349, -1000, 890,
	212, 205, -1000, 3439, 219, 3436, 3435, 1207, 2028, -1000,
	170, 161, 136, -1000, -1000, -1000, -1000, -1000, 416, -1000,
	2343, 2340, 2337, 583, -1000, 327, -1000, -1000, -1000, 359,
	-1000, -1000, 3303, -1000, 3434, 678, -1000, 24544, -1000, -1000,
	29464, 1622, 1622, -1000, -1000, 2130, -1000, -1000, -1000, -1000,
	2128, -1000, -1000, -1000, 1382, -1000, 45454, 997, 7265, -1000,
	2341, -1000, 45454, -1000, 3163, -1000, 272, 1369, 359, 773,
	359, 773, 359, 773, 359, 773, 328, -1000, -1000, -1000,
	1368, -1000, -1000, -1000, 2439, 2126, 214, 198, 3431, -1000,
	2324, 3430, 2324, 2324, -1000, 182, 898, -1000, -1000, -1000,
	45454, -1000, -1000, -1000, 2335, -1000, -1000, -1000, -1000, 1869,
	1869, 2332, 2328, 497, -1000, -1000, -1000, 28849, 614, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 610, 49149, -1000, 7265,
	1362, -1000, 2426, -1000, 842, -1000, -1000, 2963, 2940, 3465,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	45454, 3373, 23929, 188, -1000, -1000, -1000, 2326, -1000, 2324,
	-1000, -1000, 1844, -1000, -1000, -262, 2124, 2123, -1000, -1000,
	45454, -1000, 45454, 607, -1000, 49149, 1321, -1000, 7265, -1000,
	-1000, 3497, -1000, 3466, 1043, 1043, 359, 359, 359, 359,
	-1000, -1000, 45454, -1000, 1315, -1000, -1000, -1000, 1579, -1000,
	-1000, -1000, -1000, 2323, -1000, -1000, 2314, -1000, -1000, -1000,
	1302, 2413, -1000, -1000, -1000, -1000, -1000, 2143, 681, -1000,
	1192, -1000, 1806, -1000, 28234, 45454, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45454, 6648, -1000, 1308, -1000, -1000, 2426,
	45454, -1000,
}

var yyPgo = [...]int{
	0, 183, 3524, 260, 181, 4104, 88, 279, 235, 227,
	276, 4103, 4102, 4101, 4100, 3294, 3289, 4099, 4098, 4097,
	4096, 4095, 4094, 4093, 4092, 4090, 4086, 4085, 4083, 4082,
	4081, 4080, 4079, 4078, 4077, 4076, 4075, 4073, 4072, 4069,
	4066, 4065, 4064, 4063, 4062, 4061, 4060, 275, 4059, 4054,
	4053, 4052, 4051, 4048, 4047, 4041, 4040, 4039, 4037, 4036,
	4035, 4034, 4033, 4032, 4030, 4029, 4028, 4027, 4026, 4025,
	4024, 4023, 4021, 4018, 4015, 4013, 4012, 4011, 4010, 269,
	4009, 4008, 217, 4007, 3285, 4006, 4005, 4004, 4003, 4002,
	4001, 4000, 231, 3999, 3998, 3997, 3993, 3992, 3991, 3990,
	3989, 3987, 3986, 3985, 241, 3984, 3983, 3982, 3981, 245,
	3980, 238, 3979, 179, 140, 3978, 3976, 3975, 3973, 3972,
	3971, 3970, 3969, 3968, 3967, 3966, 3965, 3933, 248, 195,
	79, 3931, 55, 3930, 3928, 232, 3927, 153, 3926, 159,
	3925, 3924, 3923, 3922, 3919, 3914, 3913, 3912, 3911, 3910,
	3907, 3904, 3903, 3902, 3901, 3900, 3899, 3896, 3895, 3893,
	3892, 3890, 57, 3889, 270, 3888, 82, 3886, 188, 3885,
	83, 3884, 119, 138, 266, 172, 262, 263, 197, 186,
	101, 3883, 334, 3882, 166, 247, 163, 31, 3879, 144,
	3878, 271, 50, 43, 255, 196, 64, 165, 145, 3877,
	224, 104, 120, 3862, 3860, 150, 3859, 252, 193, 3858,
	114, 3857, 3856, 3854, 3852, 3850, 204, 216, 3849, 3848,
	141, 3847, 3846, 81, 142, 3845, 78, 132, 175, 131,
	3844, 2494, 126, 91, 3842, 127, 109, 3837, 105, 3834,
	3832, 3826, 3825, 191, 3823, 3822, 155, 71, 3820, 3818,
	3817, 77, 3816, 85, 3814, 32, 3813, 73, 3812, 3811,
	3809, 3808, 3805, 3804, 3803, 3800, 3799, 3792, 3790, 3787,
	60, 3785, 3784, 9, 11, 17, 3783, 21, 3782, 176,
	3780, 3779, 3777, 3776, 3775, 99, 98, 3774, 95, 168,
	3773, 7, 27, 84, 3772, 3757, 219, 136, 112, 160,
	3755, 283, 3754, 3752, 3751, 167, 3749, 1634, 3747, 3745,
	3742, 3741, 3740, 3739, 23, 3738, 1, 230, 49, 3735,
	137, 146, 3719, 46, 33, 3717, 52, 124, 228, 143,
	102, 3715, 3714, 3713, 16, 202, 103, 38, 0, 3712,
	233, 161, 3711, 3710, 3707, 265, 3706, 256, 208, 171,
	354, 267, 246, 3705, 3704, 65, 134, 3703, 169, 36,
	58, 164, 192, 24, 223, 3701, 14, 8, 203, 3700,
	207, 3699, 394, 18, 291, 156, 3697, 3696, 35, 274,
	3695, 3694, 3692, 135, 3691, 3689, 273, 66, 3688, 3687,
	3684, 3683, 47, 3682, 42, 13, 3681, 113, 3672, 258,
	3669, 292, 139, 194, 189, 158, 236, 249, 87, 89,
	3668, 1907, 148, 108, 28, 3667, 239, 3666, 242, 129,
	3664, 107, 3663, 259, 272, 210, 3661, 198, 12, 53,
	40, 30, 51, 10, 106, 225, 3660, 3659, 25, 56,
	3655, 63, 3653, 20, 3652, 3651, 48, 3650, 74, 5,
	3649, 3648, 19, 22, 3643, 37, 212, 177, 133, 100,
	76, 3642, 3641, 54, 154, 3640, 152, 184, 162, 3637,
	86, 3636, 3635, 3634, 3633, 887, 3632, 261, 3631, 3630,
	3629, 3627, 3626, 3625, 3624, 3623, 229, 3622, 115, 44,
	3621, 3619, 3618, 3617, 90, 151, 3616, 3614, 3613, 3612,
	34, 147, 3611, 15, 3610, 29, 26, 39, 3609, 110,
	3608, 3, 190, 3607, 3606, 4, 3605, 3603, 2, 3600,
	3598, 130, 3597, 96, 41, 174, 116, 3595, 3594, 94,
	218, 149, 3593, 3590, 111, 257, 206, 3589, 75, 253,
	268, 3588, 215, 3587, 3585, 3584, 3583, 3582, 3581, 1223,
	3580, 3579, 251, 80, 97, 3578, 244, 122, 3577, 3576,
	93, 170, 125, 123, 70, 92, 3575, 121, 205, 3573,
	201, 3569, 250, 3568, 3559, 117, 3558, 3556, 3555, 3553,
	199, 3551, 3550, 200, 243, 3548, 3547, 282, 3545, 3544,
	3543, 3540, 3530, 3528, 3527, 3522, 3519, 3516, 278, 254,
	3509,
}

//line mysql_sql.y:12369
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 593, 596, 596, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 119, 119,
	329, 329, 330, 330, 121, 325, 325, 324, 324, 122,
	123, 124, 572, 572, 125, 126, 155, 571, 571, 157,
	157, 157, 157, 157, 446, 120, 120, 120, 120, 120,
	120, 120, 118, 578, 578, 578, 579, 579, 115, 144,
	143, 146, 146, 145, 145, 142, 142, 138, 141, 141,
	140, 140, 139, 134, 136, 136, 135, 137, 137, 116,
	104, 117, 520, 520, 519, 519, 518, 518, 471, 471,
	472, 472, 316, 316, 316, 517, 517, 517, 516, 516,
	515, 515, 514, 514, 512, 512, 513, 511, 510, 510,
	510, 508, 508, 508, 504, 504, 506, 505, 505, 507,
	499, 499, 502, 502, 500, 500, 500, 500, 503, 498,
	498, 498, 497, 497, 103, 103, 103, 413, 413, 102,
	102, 427, 427, 427, 427, 427, 425, 425, 425, 425,
	425, 425, 424, 424, 423, 423, 428, 428, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 93,
	93, 93, 93, 93, 98, 98, 98, 584, 584, 583,
	583, 585, 585, 585, 585, 586, 586, 96, 96, 96,
	97, 422, 422, 422, 94, 95, 95, 412, 412, 417,
	417, 416, 416, 416, 416, 416, 416, 416, 416, 416,
	416, 416, 416, 416, 421, 421, 421, 419, 419, 418,
	418, 420, 420, 87, 87, 87, 90, 89, 411, 411,
	411, 411, 411, 411, 411, 411, 411, 88, 88, 88,
	88, 88, 88, 83, 83, 83, 83, 83, 82, 82,
	84, 84, 409, 409, 408, 99, 99, 100, 581, 581,
	580, 582, 582, 582, 582, 101, 107, 107, 107, 107,
	107, 107, 107, 107, 106, 106, 109, 109, 108, 110,
	92, 92, 92, 92, 92, 92, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 545,
	545, 545, 547, 547, 343, 344, 597, 346, 342, 342,
	342, 541, 541, 542, 543, 544, 544, 544, 105, 14,
	206, 206, 445, 445, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 13, 81, 86, 86, 278, 278, 283,
	283, 160, 284, 284, 284, 289, 289, 290, 290, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 265, 265, 265, 260, 260, 260, 260, 261, 261,
	262, 262, 263, 263, 263, 263, 264, 264, 335, 335,
	285, 285, 285, 287, 287, 286, 282, 280, 280, 280,
	280, 280, 280, 280, 281, 281, 281, 281, 288, 288,
	79, 85, 85, 85, 85, 559, 559, 80, 570, 570,
	475, 475, 358, 358, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	480, 481, 353, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 54, 57, 58,
	159, 53, 53, 53, 398, 398, 52, 598, 598, 328,
	328, 67, 66, 56, 68, 69, 70, 71, 72, 73,
	51, 65, 65, 65, 65, 65, 65, 65, 65, 76,
	493, 493, 600, 600, 600, 74, 75, 474, 474, 474,
	64, 63, 62, 61, 60, 60, 50, 50, 49, 49,
	55, 150, 59, 151, 151, 350, 350, 350, 352, 352,
	348, 356, 356, 599, 599, 441, 441, 351, 351, 48,
	48, 48, 48, 77, 349, 349, 327, 347, 347, 347,
	12, 12, 10, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	26, 27, 29, 406, 406, 403, 28, 20, 19, 19,
	23, 22, 18, 18, 21, 24, 25, 25, 9, 9,
	9, 9, 15, 15, 16, 179, 179, 232, 232, 553,
	553, 549, 549, 550, 550, 550, 551, 551, 552, 552,
	111, 487, 487, 487, 487, 487, 487, 8, 8, 201,
	201, 486, 486, 486, 486, 486, 486, 410, 410, 410,
	530, 530, 530, 531, 200, 200, 195, 195, 488, 488,
	375, 532, 532, 496, 496, 495, 495, 494, 494, 198,
	198, 199, 199, 182, 182, 129, 129, 501, 501, 501,
	501, 509, 509, 470, 470, 270, 270, 318, 318, 319,
	319, 172, 172, 173, 173, 173, 173, 173, 173, 587,
	587, 588, 589, 590, 590, 591, 591, 591, 592, 592,
	592, 592, 592, 538, 538, 540, 540, 539, 197, 197,
	193, 193, 194, 194, 194, 192, 192, 191, 190, 190,
	189, 187, 187, 187, 188, 188, 188, 205, 205, 175,
	175, 175, 174, 174, 174, 174, 174, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 176,
	176, 546, 546, 546, 476, 476, 476, 483, 483, 298,
	298, 299, 299, 297, 297, 177, 177, 178, 178, 178,
	178, 296, 296, 295, 180, 180, 186, 185, 185, 181,
	181, 181, 181, 306, 306, 305, 305, 305, 305, 114,
	127, 127, 128, 204, 204, 304, 303, 303, 303, 303,
	203, 203, 202, 202, 196, 196, 184, 184, 184, 184,
	302, 183, 300, 577, 577, 576, 576, 575, 573, 573,
	573, 574, 574, 574, 574, 522, 522, 522, 522, 522,
	336, 336, 336, 341, 341, 339, 339, 339, 339, 339,
	345, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 39, 215, 216, 40, 217, 217, 218,
	218, 219, 219, 220, 221, 222, 222, 222, 222, 38,
	207, 207, 208, 208, 209, 209, 210, 211, 211, 211,
	214, 212, 213, 213, 595, 595, 594, 37, 37, 30,
	163, 163, 164, 164, 164, 166, 166, 266, 266, 266,
	165, 165, 167, 167, 167, 554, 556, 556, 558, 557,
	557, 557, 560, 560, 560, 560, 560, 561, 561, 561,
	561, 562, 562, 31, 147, 147, 170, 170, 152, 565,
	565, 565, 564, 564, 566, 566, 567, 567, 322, 322,
	323, 323, 161, 162, 162, 154, 149, 169, 169, 169,
	169, 169, 171, 171, 234, 234, 148, 153, 156, 158,
	555, 563, 563, 563, 407, 407, 404, 405, 405, 402,
	401, 401, 401, 569, 569, 568, 568, 568, 337, 337,
	32, 397, 397, 399, 400, 400, 400, 391, 391, 391,
	391, 36, 395, 395, 396, 396, 396, 396, 396, 396,
	396, 392, 392, 394, 394, 390, 390, 390, 390, 390,
	390, 390, 35, 168, 168, 389, 389, 386, 386, 384,
	384, 385, 385, 383, 383, 383, 387, 387, 43, 78,
	44, 45, 46, 42, 388, 388, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 131, 130, 130, 130,
	130, 130, 133, 133, 321, 321, 320, 320, 132, 267,
	267, 41, 245, 245, 462, 462, 457, 457, 457, 457,
	457, 478, 478, 478, 458, 458, 458, 459, 459, 459,
	461, 461, 461, 460, 460, 460, 460, 460, 477, 477,
	479, 479, 479, 429, 429, 430, 430, 430, 433, 433,
	449, 449, 450, 450, 448, 448, 455, 455, 454, 454,
	453, 453, 452, 452, 451, 451, 451, 451, 444, 444,
	443, 443, 431, 431, 431, 431, 431, 432, 432, 432,
	442, 442, 447, 447, 294, 294, 293, 293, 253, 253,
	254, 254, 292, 292, 251, 251, 252, 252, 252, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 528, 528, 529, 256, 256, 268,
	268, 268, 268, 268, 268, 255, 255, 257, 257, 233,
	233, 231, 231, 223, 223, 223, 223, 223, 223, 224,
	224, 225, 225, 226, 226, 226, 230, 230, 229, 229,
	229, 229, 227, 227, 228, 228, 228, 228, 228, 228,
	415, 415, 525, 525, 526, 526, 521, 521, 521, 524,
	524, 524, 524, 524, 524, 524, 527, 527, 527, 523,
	523, 235, 315, 315, 315, 338, 338, 338, 338, 340,
	314, 314, 314, 250, 250, 249, 249, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 414,
	414, 354, 354, 355, 355, 277, 276, 276, 276, 276,
	276, 274, 275, 273, 273, 273, 273, 273, 272, 272,
	271, 271, 271, 393, 393, 269, 269, 259, 259, 259,
	258, 258, 258, 456, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 312, 312, 312, 313, 313, 313, 313,
	313, 313, 313, 313, 365, 365, 371, 371, 537, 537,
	536, 236, 236, 236, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 246, 246, 246, 438, 438, 438, 438,
	439, 439, 439, 439, 440, 440, 440, 436, 436, 437,
	437, 376, 377, 377, 484, 484, 485, 485, 434, 434,
	435, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 492, 492, 492, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 548, 548, 548, 533, 533, 533, 534, 534,
	534, 534, 534, 534, 534, 534, 534, 534, 534, 534,
	535, 535, 535, 535, 535, 535, 535, 535, 535, 535,
	535, 535, 535, 535, 535, 535, 535, 310, 310, 310,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 378, 378,
	379, 379, 489, 489, 489, 489, 489, 489, 490, 490,
	491, 491, 491, 491, 482, 482, 482, 482, 482, 482,
	482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
	482, 482, 482, 482, 482, 482, 482, 482, 482, 482,
	482, 482, 482, 363, 307, 307, 307, 380, 372, 372,
	373, 373, 374, 374, 366, 366, 366, 366, 366, 366,
	367, 367, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 368, 368, 370, 370, 382, 382,
	382, 381, 381, 381, 381, 381, 381, 381, 248, 248,
	248, 248, 360, 360, 360, 359, 359, 359, 359, 359,
	359, 359, 359, 359, 359, 359, 359, 238, 238, 238,
	238, 242, 242, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 243, 243, 243,
	243, 243, 241, 241, 241, 241, 241, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 112, 113, 113, 240, 317,
	317, 463, 463, 466, 466, 464, 464, 465, 467, 467,
	467, 468, 468, 468, 469, 469, 469, 473, 473, 326,
	326, 326, 334, 334, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
	331, 331, 331, 331, 331, 331, 331, 331, 331, 331,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 8, 8,
	0, 2, 0, 2, 11, 1, 3, 0, 3, 4,
	4, 4, 1, 2, 5, 6, 6, 1, 2, 7,
	9, 10, 10, 12, 1, 5, 6, 8, 10, 9,
	11, 13, 4, 0, 1, 1, 0, 1, 5, 2,
	2, 6, 9, 6, 9, 4, 7, 8, 0, 1,
	1, 2, 4, 6, 1, 2, 4, 0, 2, 10,
	11, 2, 0, 2, 1, 3, 3, 3, 0, 2,
	0, 2, 1, 3, 5, 0, 2, 3, 1, 3,
	1, 1, 1, 3, 1, 1, 1, 1, 0, 3,
	3, 0, 3, 3, 0, 1, 3, 0, 1, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 8, 5, 7, 0, 3, 8,
	5, 1, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 4, 1, 3, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 1, 3, 3,
	1, 2, 2, 2, 1, 2, 2, 3, 4, 4,
	6, 1, 1, 1, 2, 4, 6, 1, 4, 1,
	3, 3, 4, 4, 4, 4, 3, 3, 2, 4,
	4, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 2, 2, 0, 1,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 3, 4, 4, 1, 2,
	9, 7, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 2, 4, 3, 3,
	1, 1, 1, 1, 1, 1, 2, 3, 4, 7,
	2, 3, 3, 4, 5, 3, 4, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 1, 1, 1, 1, 6, 4,
	1, 1, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 10, 7, 4, 4, 1, 3, 1,
	6, 7, 3, 3, 3, 1, 1, 1, 3, 2,
	4, 5, 5, 6, 5, 5, 3, 2, 2, 1,
	3, 4, 3, 7, 5, 8, 2, 2, 1, 3,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 2, 1, 3, 2, 1, 2, 2, 1,
	2, 3, 2, 2, 3, 6, 3, 3, 1, 1,
	7, 7, 7, 8, 8, 0, 4, 7, 0, 3,
	0, 2, 0, 1, 1, 1, 1, 4, 2, 2,
	3, 3, 4, 5, 3, 4, 4, 2, 2, 2,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 3,
	3, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 7, 7, 5, 4, 7, 8,
	3, 3, 2, 3, 4, 0, 2, 2, 0, 2,
	2, 0, 5, 1, 1, 1, 1, 0, 1, 5,
	5, 5, 4, 3, 1, 3, 1, 1, 3, 5,
	2, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 4, 1, 3, 1, 4, 6, 6, 4,
	4, 4, 4, 4, 3, 6, 3, 5, 1, 1,
	2, 2, 11, 8, 9, 1, 3, 2, 4, 0,
	2, 0, 1, 1, 1, 1, 0, 1, 0, 1,
	4, 2, 1, 5, 4, 4, 2, 5, 5, 1,
	3, 2, 1, 5, 4, 4, 2, 0, 5, 4,
	0, 1, 3, 3, 1, 3, 1, 3, 1, 3,
	4, 0, 1, 0, 1, 1, 3, 1, 1, 0,
	4, 1, 3, 2, 1, 0, 8, 0, 4, 7,
	4, 0, 2, 0, 2, 0, 2, 0, 4, 1,
	3, 1, 1, 6, 4, 5, 7, 4, 5, 0,
	1, 3, 8, 0, 6, 0, 4, 6, 1, 1,
	1, 1, 1, 2, 3, 1, 3, 6, 0, 3,
	0, 1, 2, 4, 4, 0, 1, 3, 1, 3,
	3, 0, 1, 1, 0, 2, 2, 0, 2, 3,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 7,
	7, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 2, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 3, 1, 1, 1, 4,
	4, 4, 3, 2, 2, 2, 3, 2, 3, 4,
	1, 3, 4, 0, 2, 1, 1, 2, 2, 2,
	0, 1, 2, 4, 1, 3, 1, 3, 2, 3,
	1, 4, 3, 0, 1, 1, 2, 5, 2, 2,
	2, 0, 2, 3, 3, 0, 1, 3, 1, 3,
	0, 1, 2, 1, 1, 0, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 1, 7, 1, 3, 0,
	1, 1, 3, 1, 3, 0, 1, 1, 1, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 0, 1, 1,
	1, 0, 2, 7, 8, 10, 2, 2, 8, 0,
	3, 3, 0, 3, 0, 3, 0, 5, 1, 3,
	0, 3, 3, 0, 2, 9, 8, 0, 2, 2,
	3, 3, 0, 2, 0, 2, 4, 4, 4, 4,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 1, 3, 3, 4, 0, 2, 2, 2, 2,
	2, 2, 6, 0, 4, 1, 1, 0, 3, 0,
	1, 1, 2, 4, 4, 4, 0, 1, 8, 2,
	4, 4, 4, 9, 0, 2, 11, 9, 11, 8,
	6, 9, 7, 10, 7, 6, 2, 2, 9, 4,
	5, 3, 0, 4, 1, 3, 0, 3, 6, 0,
	2, 10, 0, 2, 0, 2, 0, 3, 2, 4,
	3, 0, 2, 1, 0, 2, 3, 0, 2, 3,
	0, 2, 1, 0, 3, 2, 4, 3, 0, 1,
	0, 1, 1, 0, 6, 0, 3, 5, 0, 4,
	0, 3, 1, 3, 4, 5, 0, 3, 1, 3,
	2, 3, 1, 2, 0, 4, 6, 5, 0, 2,
	0, 2, 4, 5, 4, 5, 1, 5, 6, 5,
	0, 3, 0, 1, 1, 3, 3, 3, 0, 4,
	1, 3, 3, 3, 0, 1, 1, 3, 2, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 5, 4, 1, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 4, 0, 2, 5, 5, 5, 5, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 7, 9,
	7, 9, 2, 1, 7, 9, 7, 9, 8, 5,
	0, 1, 0, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 3, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 2, 1, 2, 2,
	1, 1, 2, 2, 2, 3, 3, 2, 2, 1,
	5, 6, 4, 1, 1, 1, 5, 4, 1, 1,
	2, 0, 1, 1, 2, 5, 0, 1, 1, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	2, 2, 2, 0, 3, 0, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	3, 5, 2, 2, 2, 2, 4, 1, 1, 2,
	5, 6, 8, 6, 6, 6, 1, 1, 1, 1,
	1, 1, 3, 4, 4, 4, 7, 9, 7, 7,
	7, 9, 7, 7, 0, 2, 0, 1, 1, 2,
	4, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	2, 2, 2, 0, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 5, 0,
	1, 3, 0, 1, 0, 2, 0, 2, 0, 1,
	6, 8, 8, 6, 6, 5, 5, 5, 6, 6,
	6, 6, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 1, 1, 1, 4, 4, 6, 8,
	6, 4, 5, 4, 4, 4, 3, 4, 6, 6,
	7, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 8,
	4, 2, 3, 2, 4, 2, 2, 4, 6, 2,
	2, 4, 6, 4, 2, 4, 4, 4, 0, 1,
	2, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 3, 0, 1,
	1, 3, 1, 3, 3, 3, 3, 3, 2, 1,
	1, 1, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 1, 3, 4, 4, 5, 4, 5, 3,
	4, 5, 6, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 2, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 4, 1, 2, 3, 5, 1, 1,
	3, 0, 1, 0, 3, 0, 3, 3, 0, 3,
	5, 0, 3, 5, 0, 1, 1, 0, 1, 1,
	2, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -593, -596, -2, -5, 623, -1, -4, -113, -87,
	-7, -14, -115, -116, -8, -111, -9, -10, -12, -91,
	-106, -108, -110, -109, -47, -11, -105, -82, -83, -93,
	-99, -102, -103, -104, -117, -112, -114, -172, -118, -119,
	-120, -123, -125, -126, 613, -88, -89, -90, -33, -32,
	-31, -30, -147, -152, -155, -157, -121, 546, 619, 449,
	14, 498, -15, -16, -538, -17, 260, -342, -343, -344,
	-346, -597, -48, -49, -50, -60, -61, -62, -63, -64,
	-74, -75, -76, -51, -52, -53, -56, -54, -67, -66,
	-68, -69, -70, -71, -72, -73, -55, -59, -150, -151,
	-77, -57, -78, -58, -159, -122, -80, -79, -85, -81,
	-86, -149, -154, -13, -160, 235, -84, 76, -94, -95,
	-96, -97, -98, -100, -101, 373, 379, 436, 612, 61,
	-173, -175, 632, 633, 636, 533, 536, 160, 161, 163,
	164, -34, -35, -36, -37, -38, -39, -41, -40, -42,
	-43, -44, -45, -46, 231, 16, 541, -18, -21, -19,
	-22, -20, -28, -29, -27, -24, -26, -148, -25, -153,
	-23, -156, -158, -124, 255, 254, 38, 321, 322, 323,
	377, 253, 232, 15, 31, 42, 352, -174, 83, 534,
	233, -176, 13, 638, -6, -3, -2, -134, -138, -142,
	-145, -146, -143, -144, -4, -113, 118, 245, 614, -338,
	369, 615, 617, 616, 86, 94, -331, -333, 449, 260,
	373, 379, 612, 633, 636, 533, 536, 548, 549, 550,
	551, 552, 553, 554, 555, 557, 558, 559, 560, 561,
	562, 563, 573, 574, 564, 565, 566, 567, 568, 569,
	570, 571, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 501, 598, 599, 600,
	601, 529, 556, 592, 593, 594, 595, 350, 351, 538,
	272, 296, 404, 302, 309, 160, 179, 173, 201, 193,
	534, 168, 276, 314, 277, 93, 163, 484, 108, 461,
	433, 166, 291, 293, 295, 530, 531, 363, 298, 528,
	297, 299, 301, 532, 278, 353, 189, 184, 290, 274,
	182, 279, 40, 280, 206, 281, 282, 543, 457, 349,
	463, 306, 52, 431, 183, 458, 294, 460, 210, 214,
	475, 476, 177, 178, 465, 478, 205, 208, 209, 252,
	346, 347, 43, 540, 264, 479, 212, 204, 200, 487,
	310, 308, 203, 176, 199, 275, 65, 216, 215, 217,
	427, 428, 429, 430, 283, 284, 367, 474, 196, 185,
	354, 169, 23, 482, 259, 462, 380, 285, 303, 311,
	211, 213, 266, 271, 542, 435, 270, 307, 480, 181,
	263, 292, 258, 483, 170, 382, 286, 164, 300, 477,
	486, 64, 395, 175, 167, 630, 249, 161, 268, 273,
	287, 288, 289, 527, 313, 312, 304, 535, 197, 265,
	202, 187, 174, 198, 162, 267, 485, 396, 610, 352,
	414, 195, 192, 269, 242, 481, 464, 165, 418, 397,
	190, 315, 605, 606, 607, 368, 345, 316, 317, 188,
	256, 455, 456, 320, 424, 336, 398, 434, 405, 399,
	223, 224, 324, 467, 469, 207, 608, 325, 326, 327,
	459, 328, 329, 330, 331, 372, 56, 58, 95, 98,
	97, 634, 635, 63, 29, 358, 361, 393, 400, 338,
	611, 539, 335, 339, 340, 362, 25, 416, 384, 420,
	419, 48, 49, 50, 53, 54, 55, 57, 59, 60,
	51, 526, 377, 390, 488, 45, 47, 387, 27, 364,
	415, 437, 334, 417, 448, 46, 446, 447, 468, 26,
	366, 365, 62, 44, 423, 425, 426, 318, 332, 375,
	620, 489, 370, 386, 389, 371, 337, 360, 391, 67,
	66, 383, 621, 378, 376, 333, 544, 545, 341, 572,
	355, 432, 523, 522, 521, 520, 519, 518, 517, 516,
	321, 322, 323, 401, 402, 403, 413, 406, 407, 408,
	409, 410, 411, 412, 451, 452, 622, 470, 472, 473,
	471, 237, 637, 356, 357, 240, 624, 625, 96, 626,
	628, 627, 28, 629, -420, -418, -338, 534, 612, 379,
	533, 536, 373, 352, 633, 636, 377, 260, 321, 322,
	323, 449, 350, -217, -338, 637, -182, 244, 39, -231,
	-338, -182, -84, -16, -15, -174, -175, -231, 239, -347,
	24, 431, -92, 432, 235, 83, 77, -338, -9, -104,
	-8, -111, -82, -172, 436, -345, -338, 321, 321, -345,
	239, -340, 270, 412, -338, -475, 245, -424, -397, 271,
	-423, -399, -426, -400, 32, 231, 233, 232, 546, 267,
	16, 377, 241, 14, 13, 378, 253, 25, 26, 28,
	15, 379, 381, 29, 382, 385, 386, 387, 42, 390,
	391, 260, 86, 94, 89, 278, -216, -338, -374, -366,
	115, -369, -361, -362, -364, -316, -512, -359, 83, 142,
	143, 150, 116, 639, -363, -456, 36, 118, 552, 556,
	592, 499, -308, -309, -310, -311, -312, -313, -338, -513,
	-511, 89, 99, 101, 105, 106, 104, 102, 154, 186,
	103, 90, 155, -175, 86, -533, 562, -332, 585, 598,
	599, 600, 601, 584, 61, -482, -491, 238, -489, 153,
	191, 256, 187, 14, 148, 424, 188, 593, 594, 595,
	559, 581, 501, 563, 573, 588, 554, 555, 557, 549,
	550, 551, 553, 564, 566, 580, -492, 576, 586, 587,
	572, 596, 597, 589, 590, 591, 628, 88, 87, 579,
	578, 565, 560, 561, 567, 548, 558, 568, 569, 577,
	582, 583, 361, 108, 362, 363, 491, 353, 364, 245,
	431, 70, 365, 366, 367, 368, 369, 498, 370, 71,
	371, 360, 260, 414, 372, 190, 207, 503, 502, 504,
	495, 492, 490, 493, 494, 496, 497, 570, 571, 575,
	-127, -128, 603, -587, -301, -588, 6, 7, 8, 9,
	-589, 155, -578, 433, 542, 89, 314, 350, 631, 532,
	631, 532, 165, 162, -411, 165, 114, 170, 169, -411,
	631, 167, 630, 324, 266, -388, -163, 350, 414, 328,
	95, 270, -391, -389, 530, -477, 318, 314, 290, 240,
	111, -164, 250, 249, 109, 491, 238, 388, 309, 56,
	58, -549, -550, 228, 229, 230, -540, 524, -539, -338,
	631, 363, 97, 98, 630, 27, 239, 374, 266, 469,
	467, 468, 470, 471, 472, 473, -65, -493, -474, 464,
	463, -351, 456, 462, 454, 466, 457, 351, 330, 546,
	329, 231, 624, 531, 525, -326, 398, 434, 488, 489,
	375, 435, 475, 477, 458, 108, 194, 191, 240, 242,
	239, 630, 350, 491, 414, 95, 328, -549, 162, 475,
	477, 270, 412, 41, -417, 424, -416, -418, 476, 487,
	87, 88, 474, -326, 108, 455, 455, -587, -301, -173,
	-175, -114, -538, 532, 631, 240, 350, 414, 270, 241,
	239, 527, 530, 242, 491, 238, 321, 374, 266, 328,
	95, 167, 630, -476, -546, 32, -483, 225, 226, 227,
	33, 34, -1, 122, 638, -366, -366, -6, 641, -6,
	-366, -338, -338, 157, -238, -242, -239, -241, -240, -244,
	-243, 191, 192, 153, 195, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 208, 209, 206, 31, 207, 256,
	187, 188, 189, 190, 210, 173, 193, 539, 218, 174,
	219, 175, 220, 176, 221, 177, 178, 222, 179, 182,
	183, 184, 185, 181, 156, -206, 89, 32, 83, 156,
	89, -198, 262, -182, -231, -223, 156, 639, -198, -587,
	-191, -192, 11, -231, -314, -338, 433, 125, -92, 77,
	-92, 432, 77, -541, -542, -543, -545, 235, 432, 431,
	-109, 156, 278, 17, -345, -345, 81, -231, -399, 270,
	-424, -397, 36, 80, 157, 243, 157, 80, 83, 375,
	350, 414, 376, 491, 239, 388, 242, 270, 389, 350,
	414, 239, 242, 491, 270, 350, 239, 242, 414, 270,
	389, 350, 454, 455, 242, 27, 380, 383, 384, 455,
	-497, 487, 157, 114, 111, 112, 113, -366, 132, -381,
	125, 126, 127, 128, 129, 130, 131, 139, 138, 149,
	142, 143, 144, 145, 146, 147, 148, 140, 141, 135,
	115, 133, 137, 134, 117, 152, -175, -366, -374, 61,
	-364, -364, -364, -364, -338, -456, -371, -366, 83, 83,
	83, 83, 156, 102, 89, -366, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, -490, 83,
	83, -378, -379, 83, 83, -359, -314, 83, 89, 89,
	83, 83, 83, 89, 83, 83, 83, -379, -379, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, -192, 157, -191, 83, -191, -192,
	-176, -175, 32, 33, 32, 33, 32, 33, 32, 33,
	-590, 621, 83, 99, 634, 223, 17, -338, 89, 535,
	89, 535, 480, 541, 168, 169, 170, -386, 245, -386,
	-386, -215, -338, -217, 374, 242, 527, 242, -164, -386,
	-386, -386, -386, -386, 241, -386, 24, 239, 239, 239,
	239, -386, 498, 125, 125, 59, -551, 172, 157, -540,
	-197, 83, 89, -350, 133, 137, -350, -297, 18, -297,
	24, 268, 268, 268, -350, 308, -598, -599, 17, 135,
	-348, -599, -348, -348, -350, -600, 241, 465, 43, 269,
	268, -193, -194, 22, -193, 459, 455, -441, 460, 461,
	-352, -599, -351, -350, -350, -351, -350, -350, -350, 32,
	239, 242, 491, 328, 625, -598, -598, 31, 31, -475,
	-475, -231, -475, -475, 525, -327, -338, -475, -475, -475,
	-552, 244, -584, -583, 478, -586, 480, 162, -418, 162,
	-418, -399, 270, 270, 157, 125, 24, -419, 125, 136,
	-418, -418, -419, -419, -255, 41, -337, 153, -338, 89,
	-255, 41, -581, -580, -231, -192, -176, -175, 84, 84,
	84, 535, 89, -475, -475, -475, -475, -475, -477, -475,
	-475, -475, -475, -475, -345, -207, -338, -217, 245, -475,
	-475, -475, -475, -177, -178, 144, -366, -338, -177, -3,
	-136, -135, 119, 120, 122, 615, 369, 614, 618, 612,
	-418, 41, -469, 396, 395, -463, -465, 83, -464, 83,
	-464, -464, -464, -464, -464, 83, 83, -466, 83, -466,
	-466, -463, -467, 83, -467, -468, 83, -468, -467, -338,
	-445, 541, -372, -374, -338, 39, -486, 61, -172, 83,
	31, 83, -198, -338, 640, 188, 167, 629, -487, 61,
	-172, 83, 31, -192, -129, 39, -194, 21, 156, 99,
	89, -109, -92, 77, -109, 84, 157, -544, 105, 106,
	-547, 205, 197, -338, -107, 89, -7, -8, -9, -10,
	-47, -82, -79, -172, 232, 533, 536, -514, -512, 83,
	32, 423, 80, 17, -425, 239, 491, 374, 266, 242,
	350, -423, -406, -403, -401, -337, -399, -402, -401, -428,
	-314, 455, -130, 438, 437, 320, -366, -366, -366, -366,
	-366, 104, 115, 345, 105, 106, -361, -382, 32, 316,
	317, -362, -362, -362, -362, -362, -362, -362, -362, -362,
	-362, -362, -362, -370, -380, -456, 83, 135, 133, 137,
	134, 117, -364, -364, -362, -362, -257, -337, 153, 84,
	157, -366, -537, -536, 119, -366, -366, -366, -366, -338,
	-534, -535, 505, 506, 507, 508, 509, 510, 511, 512,
	513, 514, 515, 365, 360, 366, 364, 353, 372, 367,
	368, 190, 522, 523, 516, 517, 518, 519, 520, 521,
	-372, -372, -366, -534, -372, -307, 33, 32, -374, -374,
	-374, 84, -366, -548, 343, 342, 344, -195, -338, -372,
	84, 84, 84, 99, -374, -374, -372, -362, -372, -372,
	-372, -372, -535, -307, -307, -307, -307, 144, -374, -374,
	-307, -307, -307, -307, 144, -307, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, 84, 84, 84, 144, -374,
	-193, -128, -495, -494, -366, 41, -129, -194, -591, 622,
	83, -314, -579, 89, 89, 639, 167, 17, 491, -572,
	32, 535, 99, 535, 99, 481, 482, 166, 169, 168,
	89, 115, -338, -338, 35, 83, -207, -386, -386, -386,
	-556, -338, 90, -407, -404, -401, -338, -338, -397, -338,
	-327, -231, -386, -386, -386, -386, -231, -266, 53, 54,
	55, -401, -165, 56, 57, -552, -539, 35, -196, -338,
	-572, -297, -364, -364, -366, -401, 270, -598, -350, -350,
	-328, -327, -352, -347, -352, -352, -297, -348, -350, -350,
	-366, -352, -348, -297, -338, 455, -297, -297, -441, -350,
	-349, -338, -349, -386, -327, -328, -328, -231, -231, -278,
	-283, -279, -284, 262, 236, 358, 359, 234, 232, 11,
	233, -291, 309, -387, 499, -261, -262, 77, 42, -264,
	260, 400, 393, 272, 276, 93, 277, 433, 278, 241,
	280, 281, 282, 297, 299, 252, 283, 284, 285, 424,
	286, 161, 298, 287, 288, 289, 376, -256, 6, 331,
	41, 51, 52, 447, 446, 544, 541, 273, -338, -556,
	-554, 31, -338, 31, -407, -338, -338, -185, -180, -184,
	-181, -186, -300, -302, -183, 83, -231, -175, -338, 157,
	479, 481, 482, -584, -419, -584, -419, 32, 423, -422,
	423, 32, -397, -416, 475, 477, -412, 89, 424, -402,
	-421, 80, 153, -494, -419, -419, -421, -421, 152, 157,
	-582, 480, 481, 228, -193, 99, -572, -233, -231, -556,
	-406, -397, -338, -475, -233, -233, -233, -340, -340, 83,
	156, 36, -338, -338, -338, -338, -296, 157, -295, 17,
	-339, -338, 35, 89, 156, -296, -137, -135, 121, -366,
	-6, 614, -366, -6, -6, -366, -6, -366, -473, 397,
	99, 99, -317, 89, -317, 99, 99, 99, 547, 84,
	89, -410, 80, -488, -375, -532, 603, -200, 84, -195,
	-530, -531, -195, -199, -338, -486, -223, 125, 125, 125,
	-488, -200, 84, -530, -193, 604, -129, -190, -189, -366,
	-338, 24, -109, -92, -542, 156, 350, 157, -196, -425,
	-405, -402, -427, 144, -338, -413, 157, 541, 642, 87,
	243, -569, -568, 415, 84, 157, -498, 244, 498, 89,
	639, 431, 223, 224, 104, 345, 105, 106, -456, -374,
	-370, -364, -364, -362, -362, -368, 257, -368, 114, -366,
	640, -365, -536, 121, -366, 35, 157, 35, 157, 81,
	156, 84, 84, 17, 17, 84, -366, 84, 84, 84,
	84, 17, 17, -366, 84, 156, 84, 84, 84, 84,
	81, 84, 157, 84, 84, 84, 84, 157, -374, -374,
	-366, -374, 84, 84, 84, -366, -366, -366, -374, 84,
	-366, -366, -366, -366, -366, -366, -366, -366, -366, -366,
	-435, 450, -435, -435, 157, 157, 157, 84, -129, 83,
	99, 157, 635, -321, -320, 89, -338, 167, -338, 89,
	89, 167, 170, 170, 169, 89, 36, 24, 307, 24,
	-216, -218, -219, -220, -221, -222, 135, 158, 159, 83,
	-231, -231, -231, -558, 401, -570, 157, 41, -568, 491,
	-161, 320, -390, 81, -168, 17, 541, -231, -231, -231,
	-231, -245, 35, 17, -179, -232, -338, 83, 84, 157,
	-398, 81, -338, -328, -297, -297, -352, -297, -297, 157,
	23, -350, -352, -352, -356, 639, -348, -356, 156, -356,
	-327, -462, 35, -197, 157, 21, 262, -230, -335, -227,
	-229, 247, -355, -228, 250, -526, 248, 246, 109, 251,
	305, 110, 241, -335, -335, 247, -265, 243, 35, -335,
	-281, 241, 348, 305, 248, 21, 262, -280, 241, 110,
	-338, 247, 251, 248, 246, -334, 125, -326, 152, 243,
	43, 376, -334, 545, 262, -334, -334, -334, -334, -334,
	-334, -334, 279, 279, -334, -334, -334, -334, -334, -334,
	-334, -334, -334, -334, -334, 162, -334, -334, -334, -334,
	-334, -334, 83, 274, 275, 307, -559, 401, 31, 356,
	356, 357, -570, 31, -169, 350, 31, -303, -304, -305,
	-306, 68, 72, 74, 78, 69, 70, 71, 75, 31,
	157, -336, -341, 35, -338, 89, -336, -175, -180, -185,
	-336, 83, -583, -585, 483, 480, 486, -421, -421, 243,
	83, 125, -421, -421, 41, -337, -580, 487, 481, -129,
	157, 80, -233, -208, -209, -210, -211, -238, -314, 192,
	195, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	208, 209, 206, 207, 256, 187, 188, 189, 190, 210,
	173, 193, 539, 174, 175, 176, 177, 178, 179, 182,
	183, 184, 185, 181, -338, -217, -297, -178, -180, -338,
	89, -338, 144, -297, 122, -6, 120, -141, -140, -139,
	123, 612, 618, 122, 122, 122, 84, 84, 84, 157,
	84, 84, 84, 157, 84, 157, 99, -501, 460, 40,
	157, 83, 84, 157, 61, 157, 125, 84, 157, -366,
	-338, 89, -366, 84, 61, -129, 89, 157, -187, 37,
	38, 156, 433, -338, -512, 84, -427, 157, 243, 156,
	156, -403, 379, -337, -405, 21, 541, -314, 39, -321,
	125, 639, -338, 84, -368, -368, 114, -364, -361, 84,
	122, -366, 120, -236, -238, 395, 396, -366, -236, -237,
	-243, 153, 191, 256, 190, 189, 187, 395, 396, -255,
	-338, -366, -366, 84, -366, -366, 17, -338, -255, -362,
	-366, -192, -192, 84, 84, -434, -435, -434, -434, 84,
	84, 84, 84, -434, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 83, 99, 101, 99, 101, -494,
	-592, 63, 620, 62, 423, 104, 310, 157, 99, 89,
	640, 157, 125, -338, 17, 239, 89, 170, 89, -571,
	314, 350, -446, 99, 314, 350, 491, 387, 84, 157,
	-314, -208, -197, 83, -197, -561, 462, 403, 413, -334,
	-358, -357, 352, 42, -480, 424, 409, 410, -404, 270,
	-327, -567, 96, 125, 80, 335, 339, 340, 336, 337,
	338, -384, -385, -383, -387, -554, 83, 83, -172, 35,
	133, -168, 83, 83, 35, -457, 325, -238, -231, -179,
	-338, 17, 157, -553, 156, -1, -338, -397, -350, -297,
	-366, -366, -297, -350, -350, 167, -352, -338, -457, -238,
	35, -279, 236, 233, -431, 307, 308, -432, -447, 310,
	-449, 83, -235, -314, -228, -525, -526, -386, -338, 110,
	-525, 110, 83, -235, -314, -314, -282, -349, -314, -338,
	-338, -338, -338, -287, -286, -314, -289, 32, -290, -338,
	-338, -338, -338, 110, -338, 110, -260, 41, 48, 49,
	50, -334, -334, 194, -263, 41, 423, 425, 426, -289,
	99, 99, 99, 99, 89, 89, 89, -334, -334, 99,
	89, -341, 89, -527, 169, 45, 46, 99, 99, 99,
	99, 41, 89, -268, 41, 290, 294, 291, 292, 293,
	89, 99, 41, 99, 41, 99, 41, -338, 83, -528,
	-529, 89, -446, -561, -334, 356, -418, 125, 125, -358,
	-566, 320, -171, 491, 32, -201, 236, 233, -554, -409,
	-408, -314, -184, -184, -184, -184, 68, 68, 68, 68,
	73, 68, 73, 68, -305, -409, -186, -197, -341, 84,
	-577, -576, -575, -573, 76, 244, 77, -372, 480, 484,
	485, -405, -353, 89, -412, -205, 24, -231, -231, -479,
	300, 301, 84, 157, -238, -299, 19, 156, -299, 118,
	-6, -137, -139, -366, -6, -366, 614, 369, 615, 89,
	99, 99, -509, 444, 439, 441, 110, -375, -496, -495,
	61, -172, -195, -488, -531, -494, -338, 640, 640, 640,
	640, 61, -172, -488, -205, -501, -189, -188, 44, -338,
	99, 17, -402, -397, 144, 144, -338, 380, -413, 89,
	402, 89, 239, 640, 89, -321, -361, -366, 84, -246,
	178, 177, -246, 35, 84, 84, -464, -464, -463, -466,
	-463, -246, -246, 84, 84, 24, 84, 84, 84, -366,
	84, 84, 157, -484, 500, -485, 574, -434, -434, -434,
	-434, -434, -434, -434, -434, -434, -434, -434, -434, -434,
	-434, -434, -434, -377, -376, 262, 445, 627, 627, 445,
	627, 627, 84, 157, -534, 157, -329, 315, -329, -320,
	89, 243, 167, -338, 89, -338, 89, 307, -338, -338,
	89, 89, -220, -238, 84, 35, -224, -225, -226, -235,
	-227, -229, 35, -562, 93, -557, 89, -338, 90, -563,
	93, 404, 155, 354, 41, 405, 406, 421, 349, 99,
	99, 411, -555, -338, -170, 239, 350, -565, 52, 125,
	89, -231, -383, -326, 152, 281, 328, -294, -293, -338,
	89, -224, -172, -231, -224, -224, -172, -458, 327, 21,
	99, 143, -198, 81, 156, -180, -232, -338, 144, 84,
	-297, -356, -297, -297, 125, -350, -458, -172, -443, 311,
	83, -441, 83, -441, 110, 336, -450, -448, 262, -285,
	45, 47, -238, -523, -338, -521, -523, -338, -521, -521,
	-386, -366, -285, -235, 243, 31, 233, -288, 333, 334,
	339, -414, 306, 115, -414, 157, -187, 157, -338, -255,
	-255, 31, 89, 89, -233, 84, 157, 125, 89, -562,
	-557, 125, -419, 89, 89, -563, -567, 125, -234, 239,
	-327, 157, -201, -201, -297, 157, 125, -203, -202, 80,
	81, -204, 80, -202, 68, 68, -297, -575, -574, 24,
	-526, -526, -526, 84, 84, 15, -210, 41, -298, 20,
	21, 144, -298, 122, 120, 122, 122, -338, 84, 84,
	-470, 605, -505, -507, 439, 21, 21, 15, 244, 84,
	-488, -488, -509, 45, 46, -397, -413, 424, -231, 157,
	640, -236, -366, 84, -366, 84, 89, 84, 89, -192,
	21, 84, 157, 84, 84, 84, 157, 84, 84, -366,
	84, -534, -330, 188, 89, -330, 350, -338, 17, 89,
	-446, 307, 307, 239, 237, -172, 84, 157, -172, 89,
	-560, 415, 89, 89, 99, 41, 99, 155, 407, -481,
	-162, 93, -233, 32, -201, -564, 93, 125, 639, 83,
	-334, -334, -334, -338, 84, 157, -334, -334, 84, 84,
	84, -253, 541, -459, 261, 99, 143, 99, 143, 99,
	-336, -180, -338, -297, -553, 156, 89, -297, -459, -433,
	312, 99, -362, 83, -362, 83, -442, 309, 83, 84,
	157, -338, -314, -250, -249, -247, 104, 115, 41, 393,
	-248, 93, 152, 295, 298, 297, 273, 296, -277, -354,
	80, 399, 333, 334, -387, 605, 529, 246, 109, 110,
	381, -355, 83, 83, 81, 315, 83, 83, -523, 84,
	-285, -314, 41, -288, 41, 346, 306, -286, -338, 152,
	-255, 84, -529, 89, -560, 89, -421, -565, 89, -162,
	-233, -554, -192, -408, -494, -366, 83, -366, 83, 68,
	11, 19, -359, -366, -374, 245, -6, 615, 369, -270,
	606, 89, 21, 89, -503, 89, -409, -470, -132, -267,
	-326, 278, 84, 84, 84, -434, -434, -437, -436, -440,
	445, 307, 453, -374, 89, 89, 84, 84, 89, -338,
	243, 167, 639, 89, -446, -446, -338, -212, -238, -166,
	541, -253, -226, -166, 21, 541, 353, 41, 99, 41,
	408, 89, -170, 125, 105, 106, -322, -323, 89, -392,
	-394, -314, 83, -255, -257, 89, -293, -359, -359, -251,
	-172, 35, -252, -291, -387, -131, -130, -251, 83, -460,
	161, 99, 143, 99, 99, -297, -297, 640, -460, -449,
	21, 84, -428, 84, -428, 83, 125, -362, -448, -451,
	61, -247, 104, -362, 89, -257, -258, 41, 294, 290,
	125, 125, -259, 41, 274, 275, -269, 83, 305, 15,
	194, 83, 110, 110, -231, -392, -392, -524, 335, 336,
	337, 341, 339, 340, 338, -524, -392, -392, 83, -415,
	-414, -362, -334, -334, 152, -564, -193, -196, -522, -338,
	246, 21, 21, -338, -338, -318, 607, 99, 89, 441,
	-270, -471, 608, -499, -441, -255, 125, 84, -439, 117,
	407, 411, -360, -363, 99, 101, 186, 155, 84, 84,
	350, -338, -325, -324, 89, 89, 89, 307, 540, -167,
	60, 487, 89, 90, 402, 89, 90, 353, -162, 89,
	640, 157, 125, 84, 157, -463, -366, -429, 262, -172,
	157, -291, -326, -132, -429, -254, -292, -338, 89, -478,
	169, 326, 541, 99, 143, 99, -192, -461, 169, 326,
	-432, 84, 84, 84, -428, 99, 84, -455, -452, 83,
	-291, 264, 135, 89, 89, 99, 83, -489, 31, 89,
	-393, 83, 84, 84, 84, 84, -392, 99, -255, -334,
	84, 84, 157, 83, 21, -318, -472, 609, 89, -508,
	444, -502, -500, 439, 440, 441, 442, 89, -438, -439,
	411, -360, -363, 603, 451, 451, 451, -338, 243, 640,
	157, 125, -446, -214, -338, 305, 424, -323, 89, -395,
	-394, -187, 84, -430, 314, 21, -291, -334, -430, 84,
	157, -334, -334, 326, 99, 143, 99, -193, 326, -444,
	313, 84, -455, -291, -454, -453, 312, 265, 83, 84,
	-366, -378, -334, 84, -272, -271, 537, -392, -395, 81,
	-395, 81, -395, 81, -395, 81, 84, -255, -338, 246,
	-319, -338, -503, 89, -510, 244, -506, -507, 443, -500,
	21, 441, 21, 21, -133, 157, 114, 452, 452, 452,
	350, -324, 89, 89, -213, 35, 446, 380, -396, 252,
	346, 347, 93, 541, 333, 334, -187, 21, -431, -255,
	-292, -359, -359, 99, 99, 84, 157, -338, 261, 83,
	-373, -367, -366, 261, 84, -338, -276, -274, -275, 80,
	458, 303, 304, 84, -524, -524, -524, -524, -277, 84,
	157, -517, 83, 99, -505, -504, -506, 21, -503, 21,
	-503, -503, 448, -438, -338, 89, -334, -334, 89, 89,
	332, -314, 83, -443, -453, -452, -373, 84, 157, -414,
	-275, 80, -274, 80, 16, 15, -395, -395, -395, -395,
	-338, -520, 31, 84, -516, -515, -315, -511, -338, 444,
	445, 89, -503, 125, -595, -594, 626, 99, 99, -338,
	-428, -433, 84, -367, -273, 300, 301, 31, 169, -273,
	-519, -518, -316, 84, 157, 156, 89, 89, 84, -449,
	104, 41, 302, 157, 125, -515, -338, -518, 41, -366,
	156, -338,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 0, 303, 304, 305, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 0, 0, 0,
	0, 0, 678, 679, 0, 642, 0, 0, 0, 0,
	0, 0, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 404, 405, 406, 407,
	408, 409, 410, 411, 412, 0, 328, 324, 249, 250,
	251, 252, 253, 335, 336, 500, 0, 0, 0, 0,
	761, -2, 93, 0, 0, 0, 0, 317, 0, 308,
	308, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, -2, 691, 0, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 388, 389, 390, 384, 385, 387,
	386, -2, 0, 691, 0, 0, 0, 769, 0, 0,
	0, 812, 834, 23, 0, 7, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 0, 0, 19, 0,
	19, 0, 0, 0, 1345, 1346, 1347, 1348, 2129, 2099,
	-2, 1870, 1847, 2023, 2024, 1924, 1935, 2160, 2161, 2162,
	2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172,
	2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182,
	2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192,
	2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202,
	2203, 2204, 2205, 2206, 2207, 2208, 2209, 1804, 1805, 1806,
	1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836,
	1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
	1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888,
	1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898,
	1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
	1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918,
	1919, 1920, 1921, 1922, 1923, 1925, 1926, 1927, 1928, 1929,
	1930, 1931, 1932, 1933, 1934, 1937, 1938, 1939, 1940, 1941,
	1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
	1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
	1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971,
	1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
	1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991,
	1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
	2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
	2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021,
	2022, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
	2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053,
	2054, 2055, -2, 2057, 2058, 2059, 2060, 2061, 2062, 2063,
	2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073,
	2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
	2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
	2094, 2095, 2096, 2097, 2098, 2100, 2101, 2102, 2103, 2104,
	2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114,
	-2, -2, -2, 2118, 2119, 2120, 2121, 2122, 2123, 2124,
	2125, 2126, 2127, 2128, 2130, 2131, 2132, 2133, 2134, 2135,
	2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145,
	2146, 2147, 2148, 2149, 0, 301, 299, 1817, 1847, 1870,
	1924, 1935, 1936, 1971, 2023, 2024, 2056, 2099, 2115, 2116,
	2117, 2129, 0, 0, 947, 0, 739, 0, 0, 744,
	1293, 739, 329, 680, 681, 769, 795, 640, 0, 366,
	0, 1861, 370, 2106, 0, 0, 0, 637, 360, 361,
	362, 363, 364, 365, 0, 0, 920, 0, 0, 356,
	0, 323, 1926, 2128, 1349, 0, 0, 0, 0, 0,
	192, 1071, 194, 1073, 198, 206, 0, 0, 0, 211,
	212, 215, 216, 217, 218, 219, 0, 223, 0, 225,
	228, 0, 230, 231, 0, 234, 235, 236, 0, 246,
	247, 248, 1074, 1075, 1076, -2, 121, 945, 1775, 1662,
	0, 1669, 1682, 1693, 1426, 1427, 1428, 1429, 0, 0,
	0, 0, 0, 0, 1437, 1438, 0, 1466, 2164, 2205,
	2206, 0, 1446, 1447, 1448, 1449, 1450, 1451, 132, 144,
	145, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 0, 1723,
	1724, 1725, 1633, 1413, 1345, 0, 2173, 0, 2195, 2200,
	2201, 2202, 2203, 2194, 0, 0, 1618, 0, 1608, 0,
	0, -2, -2, 0, 0, 1996, -2, 2207, 2208, 2209,
	2170, 2191, 2199, 2174, 2175, 2198, 2166, 2167, 2168, 2161,
	2162, 2163, 2165, 2177, 2179, 2190, 0, 2186, 2196, 2197,
	2104, 0, 0, 0, 0, 0, 2146, 146, 147, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1629, -2, -2, 1632,
	-2, 1635, -2, -2, -2, -2, 1640, 1641, -2, 1643,
	-2, -2, -2, -2, -2, -2, -2, 1620, 1621, 1622,
	1623, 1612, 1613, 1614, 1615, 1616, 1617, -2, -2, -2,
	795, 870, 0, 795, 0, 770, 817, 820, 823, 826,
	773, 0, 0, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 318, 319, 307, 309, 0, 313, 0, 306,
	1107, 1107, 1107, 0, 0, 0, 0, 1107, 1107, 1107,
	1107, 1107, 0, 1107, 0, 0, 0, 0, 0, 1107,
	0, 980, 1078, 1079, 1080, 1105, 1106, 1179, 0, 0,
	0, 696, 692, 693, 694, 695, 783, 0, 785, 788,
	0, 615, 615, 843, 843, 561, 0, 0, 0, 615,
	0, 575, 567, 0, 0, 0, 615, 0, 0, 790,
	790, 0, 618, 627, 615, 615, -2, 615, 615, 612,
	615, 0, 0, 1119, 581, 582, 583, 567, 567, 586,
	587, 588, 598, 599, 628, 1799, 0, 0, 500, 500,
	0, 500, 500, 0, 500, 500, 500, 698, 1966, 1868,
	1941, 1926, 2128, 0, 274, 1996, 279, 0, 1869, 1888,
	0, 0, 1906, 0, -2, 0, 345, 795, 0, 0,
	769, 0, 0, 0, 0, 500, 500, 500, 500, 500,
	1178, 500, 500, 500, 500, 500, 0, 0, 0, 500,
	500, 500, 500, 0, 0, 835, 836, 831, 832, 833,
	837, 838, 5, 6, 19, 0, 0, 0, 0, 0,
	0, 100, 99, 0, 1776, 1794, 1728, 1729, 1730, 1781,
	1732, 1785, 1785, 1785, 1785, 1761, 1762, 1763, 1764, 1765,
	1766, 1767, 1768, 1769, 1785, 1785, 0, 0, 1774, 1752,
	1783, 1783, 1783, 1781, 1778, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1788,
	1788, 1791, 1791, 1788, 0, 402, 400, 401, 1658, 0,
	0, 0, 0, 739, 743, 1291, 0, 0, 0, 795,
	-2, 0, 0, 641, 367, 1350, 0, 0, 371, 0,
	372, 0, 0, 0, 391, 0, 394, 379, 380, 381,
	375, 0, 172, 0, 358, 359, 0, 0, 325, 0,
	0, 0, 501, 0, 0, 0, 0, 0, 0, 203,
	199, 207, 210, 220, 227, 0, 239, 241, 244, 200,
	208, 213, 214, 221, 242, 201, 204, 205, 209, 243,
	245, 202, 222, 226, 240, 224, 229, 232, 233, 238,
	0, 173, 0, 0, 0, 0, 0, 1668, 0, 0,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1662, 0, 0,
	1432, 1433, 1434, 1435, 0, 1439, 0, 1467, 0, 0,
	0, 0, 0, 1722, 1726, 0, 1658, 1658, 0, 1658,
	1654, 0, 0, 0, 0, 0, 0, 1658, 1591, 0,
	0, 1593, 1609, 0, 0, 1595, 1596, 0, 1599, 1600,
	1658, 0, 1658, 1604, 1658, 1658, 1658, 1587, 1588, 0,
	1654, 1654, 1654, 1654, 0, 0, 1654, 1654, 1654, 1654,
	1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
	0, 0, 0, 0, 790, 0, 796, 0, -2, 0,
	814, 816, 818, 819, 821, 822, 824, 825, 827, 828,
	775, 0, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 316, 0, 0, 0,
	0, 0, 944, 0, 0, 1107, 1107, 1107, 981, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 1107, 1107,
	1107, 0, 1125, 0, 0, 0, 698, 697, 0, 784,
	0, 0, 0, 843, 0, 0, 558, 559, 0, 560,
	0, 567, 615, 615, 573, 574, 569, 568, 623, 624,
	618, 0, 618, 618, 843, 0, 592, 593, 594, 615,
	615, 600, 791, 0, 601, 602, 618, 0, 625, 626,
	843, 0, 0, 843, 843, 0, 610, 611, 613, 615,
	0, 0, 1107, 0, 633, 569, 569, 1800, 1801, 0,
	0, 1116, 0, 0, 0, 0, 636, 0, 0, 0,
	0, 699, 254, 257, 0, 260, 0, 1966, 0, 1966,
	0, 267, 0, 0, 0, 0, 0, 0, 297, 298,
	0, 0, 0, 0, 288, 291, 1285, 1286, 1068, 1069,
	292, 293, 337, 338, 0, 790, 813, 815, 809, 810,
	811, 0, 0, 0, 0, 0, 0, 0, 500, 0,
	0, 0, 0, 0, 674, 0, 960, 676, 0, 0,
	0, 0, 0, 851, 845, 847, 915, 132, 851, 8,
	117, 114, 0, 19, 0, 0, 19, 19, 0, 19,
	302, 0, 1797, 1795, 1796, 1731, 1782, 0, 1757, 0,
	1758, 1759, 1760, 1770, 1771, 0, 0, 1753, 0, 1754,
	1755, 1756, 1747, 0, 1748, 1749, 0, 1750, 1751, 300,
	399, 0, 0, 1659, 948, 0, 717, 731, 712, 0,
	720, 0, 0, 1293, 1294, 0, 0, 0, 700, 731,
	702, 0, 720, 790, 767, 0, 745, 0, 0, 368,
	0, 376, 373, 0, 377, 0, 0, 393, 395, 396,
	397, 382, 383, 638, 354, 355, 346, 347, 348, 349,
	350, 351, 352, 353, 0, 0, 0, 357, 142, 0,
	326, 327, 0, 0, 0, 186, 187, 188, 189, 190,
	191, 193, 177, 663, 665, 1060, 1072, 0, 1063, 0,
	196, 237, 169, 0, 0, 0, 1663, 1664, 1665, 1666,
	1667, 1672, 0, 1674, 1676, 1678, 1680, 0, 1698, -2,
	-2, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1683, 1696, 1697, 0, 0, 0, 0,
	0, 0, 1694, 1694, 1689, 0, 1452, 1287, 1288, 1430,
	0, 0, 1464, 1468, 0, 0, 0, 0, 0, 133,
	1653, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
	1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
	0, 0, 1662, 0, 0, 0, 1655, 1656, 0, 0,
	0, 1546, 0, 0, 1552, 1553, 1554, 0, 726, 0,
	1619, 1592, 1610, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 871, 0, 735, 737, 738, 764, 745, 771, 0,
	0, 0, 92, 97, 0, 1146, 0, 0, 0, 70,
	72, 0, 1120, 0, 1122, 320, 321, 0, 0, 315,
	0, 0, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 996, 997, 498, 1054, 0, 0, 0, 1070, 1095,
	1103, 0, 0, 0, 0, 0, 1152, 982, 987, 988,
	989, 983, 984, 990, 991, 0, 786, 0, 0, 884,
	69, 557, 616, 617, 844, 564, 1926, 569, 843, 843,
	576, 570, 577, 620, 578, 579, 580, 618, 843, 843,
	792, 615, 618, 603, 619, 618, 621, 607, 0, 614,
	621, 634, 621, 0, 632, 584, 585, 1154, 788, 415,
	416, 417, 419, 0, 468, 468, 468, 451, 468, 0,
	0, 439, 1802, 0, 0, 0, 0, 448, 1802, 0,
	0, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 0, 0,
	1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802, 1802,
	1802, 0, 1802, 1802, 1802, 1802, 1802, 1271, 1802, 0,
	1117, 458, 459, 460, 461, 466, 467, 0, 0, 495,
	0, 0, 995, 0, 498, 0, 1037, 856, 0, 857,
	858, 854, 886, 910, 910, 0, 910, 890, 1293, 0,
	0, 265, 266, 255, 0, 256, 0, 268, 269, 0,
	271, 272, 273, 280, 1868, 1941, 275, 277, 0, 0,
	281, 294, 295, 296, 0, 0, 286, 287, 0, 0,
	340, 341, 343, 0, 745, 1121, 71, 660, 1289, 661,
	662, 666, 0, 0, 669, 670, 671, 672, 673, 962,
	0, 0, 1046, 1047, 1048, 1049, 843, 0, 852, 0,
	848, 916, 0, 918, 0, 843, 0, 115, 19, 0,
	108, 105, 0, 0, 0, 0, 0, 1777, 1727, 1798,
	0, 0, 0, 1779, 0, 0, 0, 0, 0, 98,
	747, 707, 0, 711, 728, 0, 732, 0, 0, 724,
	716, 721, 0, 0, 741, 708, 1292, 0, 0, 0,
	701, 0, 0, 706, 745, 0, 768, 797, 798, 801,
	1351, 0, 378, 374, 392, 0, 500, 0, 0, 0,
	180, 1057, 0, 181, 185, 175, 0, 0, 0, 1062,
	0, 1059, 1064, 0, 195, 0, 0, 170, 171, 1137,
	1146, 0, 0, 0, 1673, 1675, 1677, 1679, 1681, 0,
	1684, 1694, 1694, 1690, 0, 1685, 0, 1687, 0, 1663,
	1436, 0, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 1536, 1537, 0, 0, 1541, 0, 1543, 1544, 1545,
	1547, 0, 0, 0, 1551, 0, 1590, 1611, 1594, 1597,
	0, 1601, 0, 1603, 1605, 1606, 1607, 0, 795, 795,
	0, 0, 1508, 1508, 1508, 0, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1453, 0, 1454, 1455, 0, 0, 0, 872, 765, 0,
	0, 0, 0, 0, 1144, 0, 85, 0, 0, 73,
	74, 322, 310, 312, 0, 0, 1108, 0, 0, 0,
	0, 0, 950, 951, 953, 0, 956, 957, 958, 962,
	788, 0, 788, 1007, 1802, 502, 0, 0, 1056, 0,
	1026, 0, 0, 0, -2, 0, 0, 1103, 0, 0,
	0, 1156, 0, 0, 0, 685, 689, 23, 789, 0,
	562, 0, 563, 615, 571, 572, 843, 595, 596, 0,
	0, 843, 615, 615, 606, 0, 618, 629, 0, 630,
	631, 1156, 0, 0, 1116, 1222, 1190, 429, 0, 1306,
	1307, 469, 0, 1313, 1322, 1107, 1383, 0, 1322, 0,
	0, 1324, 1325, 0, 0, 0, 0, 452, 453, 0,
	438, 0, 0, 0, 0, 0, 0, 437, 0, 0,
	479, 0, 0, 0, 0, 0, 1803, 1802, 1802, 0,
	446, 447, 0, 450, 0, 0, 0, 0, 0, 0,
	0, 0, 1802, 1802, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1262, 0, 0, 0, 0,
	0, 0, 0, 1277, 1278, 0, 1007, 1802, 0, 0,
	0, 0, 502, 1024, 1042, 0, 0, 0, 0, 0,
	0, 876, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 788, 911, 0, 913, 914, 888, -2, 0, 856,
	893, 1658, 258, 259, 0, 0, 264, 282, 284, 0,
	0, 0, 283, 285, 289, 290, 339, 342, 344, 807,
	0, 0, 1180, 0, 963, 964, 966, 967, 0, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1852, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 961, 677, 841, 846, 853, 917,
	919, 133, 849, 841, 0, 118, 19, 117, 109, 110,
	0, 19, 0, 0, 0, 0, 1787, 1786, 1772, 0,
	1773, 1784, 1789, 0, 1792, 0, 403, 751, 0, 0,
	731, 733, 0, 0, 731, 0, 0, 740, 0, 0,
	0, 0, 0, 0, 731, 807, 747, 0, 804, 802,
	803, 0, 0, 639, 143, 398, 0, 0, 0, 0,
	0, 664, 0, 1061, 177, 0, 0, 197, 0, 0,
	0, 1146, 1141, 1657, 1686, 1688, 0, 1695, 1691, 1431,
	1440, 1465, 0, 0, 1471, 1483, 1483, 0, 0, 0,
	1474, 1785, 1785, 1477, 1781, 1783, 1781, 1483, 1483, 0,
	134, 0, 0, 1542, 0, 0, 0, 727, 0, 0,
	0, 1504, 1506, 1508, 1508, 1515, 1509, 1516, 1517, 1508,
	1508, 1508, 1508, 1522, 1508, 1508, 1508, 1508, 1508, 1508,
	1508, 1508, 1508, 1508, 1502, 0, 0, 1716, 1717, 736,
	0, 0, 778, 779, 780, 781, 782, 0, 0, 60,
	60, 1146, 0, 86, 0, 0, 75, 314, 0, 76,
	77, 0, 0, 84, 0, 0, 0, 0, 0, 955,
	0, 0, 0, 1299, 0, 1011, 1008, 1009, 1010, 0,
	1051, 503, 504, 505, 506, 0, 0, 0, 1055, 0,
	0, 1019, 0, 0, 0, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, -2, 1111, 0, 0, 0, 1299, 1130, 0,
	0, 1135, 1299, 1299, 0, 1164, 0, 1153, 739, 0,
	-2, 0, 0, 687, 0, 0, 885, 565, 843, 589,
	793, 794, 621, 843, 843, 0, 615, 635, 1164, 1155,
	0, 418, 468, 0, 1210, 0, 0, 1216, 0, 1223,
	422, 0, 470, 0, 1312, 1339, 1323, 1339, 1384, 1339,
	1339, 1107, 0, 470, 0, 0, 440, 476, 0, 0,
	0, 0, 0, 436, 473, 801, 423, 425, 426, 427,
	477, 478, 480, 0, 482, 483, 442, 454, 455, 456,
	457, 0, 0, 0, 449, 462, 463, 464, 465, 424,
	1239, 1240, 1241, 1244, 1245, 1246, 1247, 0, 0, 1250,
	1251, 1252, 1253, 1254, 1336, 1337, 1338, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1279, 1280, 1281, 1282, 1283, 1284,
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 0, 0,
	1274, 0, 0, 1011, 0, 0, 0, 0, 0, 1051,
	1026, 0, 1044, 0, 1038, 1039, 0, 0, 709, 843,
	332, 0, 880, 873, 0, 862, 877, 878, 879, 865,
	0, 867, 0, 863, 864, 843, 855, 887, 912, 889,
	892, 894, 895, 901, 0, 0, 0, 0, 261, 262,
	263, 270, 0, 522, 276, 763, 0, 1290, 667, 668,
	1181, 1182, 675, 0, 968, 839, 0, 0, 839, 113,
	116, 0, 111, 0, 0, 0, 0, 103, 101, 1780,
	0, 0, 753, 157, 0, 0, 0, 729, 0, 734,
	731, 715, 725, 714, 722, 723, 742, 1295, 1296, 1297,
	1298, 731, 705, 704, 766, 751, 799, 800, 0, 1352,
	369, 0, 1058, 177, 182, 183, 184, 178, 176, 1065,
	0, 1067, 0, 1139, 0, 0, 1692, 1470, 1441, 1472,
	1484, 1485, 1473, 0, 1443, 1444, 1475, 1476, 1478, 1479,
	1480, 1481, 1482, 1445, 1538, 0, 1540, 1548, 1549, 0,
	1598, 1602, 0, 0, 0, 0, 0, 1513, 1514, 1518,
	1519, 1520, 1521, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
	1530, 1531, 1532, 795, 1503, 0, 0, 0, 0, 0,
	0, 0, 776, 0, 0, 0, 62, 0, 62, 1145,
	1147, 0, 0, 0, 0, 78, 79, 0, 0, 0,
	943, 946, 952, 954, 0, 0, 0, 1300, 1301, 1303,
	1304, 1305, 0, 979, 0, 0, 999, 1000, 1001, 1013,
	0, 0, 0, 508, 509, 0, 0, 0, 521, 517,
	518, 519, 499, 1050, 1033, 0, 0, 1022, 0, 0,
	1032, 0, 1112, 1802, 1802, 1802, 0, 0, 1224, 1802,
	1802, 0, 1132, 1134, 0, 0, 1228, 1167, 0, 0,
	1158, 0, 910, 0, 0, 843, 686, 689, 690, 787,
	566, 604, 608, 605, 0, 843, 1167, 414, 1188, 0,
	0, 0, 0, 0, 1220, 0, 0, 1192, 0, 441,
	471, 0, -2, 0, 1340, 0, 1326, 1340, 0, 0,
	1339, 0, 430, 470, 0, 0, 0, 484, 488, 489,
	0, 486, 1379, 0, 487, 0, 475, 0, 481, 1242,
	1243, 0, 1248, 1249, 0, 1273, 0, 0, 421, 490,
	0, 0, 0, 491, 492, 497, 1019, 0, 1033, 0,
	1043, 0, 1040, 1041, 795, 0, 0, 859, 881, 0,
	0, 860, 0, 861, 866, 868, 331, 896, 0, 0,
	898, 899, 900, 891, 278, 808, 965, 0, 829, 0,
	0, 850, 830, 0, 19, 0, 0, 106, 1790, 1793,
	755, 0, 752, 158, 0, 0, 0, 0, 719, 730,
	713, 703, 753, 805, 806, 179, 174, 1066, 1149, 0,
	1140, 0, 0, 1550, 0, 1508, 1505, 1508, 1507, 1499,
	0, 1456, 0, 1458, 1459, 1460, 0, 1462, 1463, 0,
	774, 0, 58, 0, 61, 59, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 985, 1228, 0, 985, 1012,
	998, 0, 1052, 1053, 0, 510, 511, 0, 514, 520,
	1014, 0, 0, 1016, 1017, 1018, 0, 0, 1030, 0,
	0, 0, 0, 1104, 1118, 0, 0, 0, -2, 0,
	-2, 1129, 0, 1173, 0, 1165, 0, 1157, 0, 1160,
	843, 843, -2, 683, 688, 0, 0, 609, 1173, 1190,
	0, 1211, 0, 0, 0, 0, 0, 0, 0, 1191,
	0, 1204, 472, 1341, -2, 1355, 1357, 0, 1117, 1360,
	1361, 0, 0, 0, 0, 0, 0, 1405, 1369, 0,
	0, 1373, 1374, 1375, 0, 0, 1378, 0, 1710, 1711,
	0, 1382, 0, 0, 0, 0, 0, 0, 0, 1320,
	431, 432, 0, 434, 435, 1802, 1380, 474, 428, 1802,
	444, 1272, 1275, 1276, 496, 493, 494, 1022, 1025, 1036,
	1045, 710, 790, 333, 334, 882, 0, 874, 905, 902,
	0, 0, 969, 840, 842, 107, 112, 0, 0, 757,
	0, 754, 0, 748, 750, 168, 718, 755, 128, 160,
	0, 0, 1442, 1539, 1589, 1511, 1512, 0, 1500, 0,
	1494, 1495, 1496, 1501, 0, 0, 777, 772, 63, 89,
	0, 0, 67, 80, 0, 0, 0, 0, 971, 978,
	992, 1123, 1302, 977, 0, 0, 507, 512, 0, 515,
	516, 1034, 1033, 0, 1020, 1021, 0, 1028, 0, 0,
	1091, 1781, 0, 1113, 1114, 1115, 1225, 1226, 1227, 1183,
	1131, 0, -2, 1236, 0, 1127, 1149, 1183, 0, 1161,
	0, 1168, 0, 1166, 1159, 795, 684, 622, 1170, 420,
	1222, 1212, 0, 1214, 0, 0, 0, 0, 1193, -2,
	0, 1356, 1358, 1359, 1362, 1363, 1364, 1410, 1411, 1412,
	0, 0, 1367, 1407, 1408, 1409, 1368, 0, 0, 0,
	0, 0, 1708, 1709, 1403, 0, 0, 1327, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1328, 0, 0, 0, 1319,
	1321, 433, 0, 0, 1802, 1035, 330, 0, 0, 906,
	908, 903, 904, 102, 104, 119, 0, 756, 159, 0,
	757, 130, 0, 151, 0, 1150, 0, 1510, 1497, 0,
	0, 0, 0, 0, 1712, 1713, 1714, 0, 1457, 1461,
	0, 88, 0, 65, 0, 81, 82, 0, 0, 0,
	993, 994, 1002, 1003, 0, 1005, 1006, 513, 1015, 1023,
	1027, 1030, 0, 1082, 0, 801, 0, 1185, 0, 1133,
	1116, 1238, 1802, 1136, 1185, 0, 1230, 1802, 1802, 1151,
	0, 1163, 0, 1175, 0, 1169, 790, 413, 0, 1172,
	1208, 1213, 1215, 1217, 0, 1221, 1219, 1194, -2, 0,
	1202, 0, 0, 1365, 1366, 0, 0, 1608, 1802, 0,
	1398, 0, 1082, 1082, 1082, 1082, 0, 485, 443, 0,
	883, 897, 0, 0, 0, 746, 120, 0, 129, 148,
	0, 161, 162, 0, 0, 0, 0, 1142, 0, 1486,
	0, 0, 0, 1490, 1491, 1492, 1493, 90, 0, 64,
	67, 0, 0, 0, 970, 0, 1004, 1029, 1031, 1081,
	1092, 1093, 801, 1126, 0, 1222, 1237, 0, 1128, 1229,
	0, 0, 0, 1162, 1174, 0, 1177, 682, 1171, 1189,
	0, 1218, 1195, 1203, 0, 1198, 0, 0, 0, 1406,
	0, 1372, 0, 1377, 1386, 1399, 0, 0, 1308, 0,
	1310, 0, 1314, 0, 1316, 0, 0, 445, 907, 909,
	0, 759, 749, 131, 135, 0, 157, 154, 0, 163,
	0, 0, 0, 0, 1138, 0, 0, 1487, 1488, 1489,
	0, 66, 68, 83, 0, 972, 973, 986, 1083, 1802,
	1802, 0, 0, 0, 1089, 1090, 1094, 0, 1210, 1242,
	1231, 1232, 1233, 1176, 1209, 1197, 0, -2, 1205, 0,
	0, 1660, 1670, 1671, 1370, 1376, 1385, 1387, 1388, 0,
	1400, 1401, 1402, 1404, 1082, 1082, 1082, 1082, 1318, 758,
	0, 122, 0, 0, 152, 153, 155, 0, 164, 0,
	166, 167, 0, 1498, 91, 974, 0, 0, 1086, 1087,
	0, 1186, 0, 1188, 1199, -2, 0, 1207, 0, 1371,
	1389, 0, 1390, 0, 0, 0, 1309, 1311, 1315, 1317,
	760, 1148, 0, 136, 0, 138, 140, 141, 1342, 149,
	150, 156, 165, 0, 959, 975, 0, 1084, 1085, 1088,
	0, 1190, 1206, 1661, 1391, 1393, 1394, 0, 0, 1392,
	123, 124, 0, 137, 0, 0, 1143, 976, 1187, 1184,
	1395, 1397, 1396, 0, 0, 139, 1343, 125, 126, 127,
	0, 1344,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 641, 638,
	126, 125, 127, 3, 642, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 639, 138, 640, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:824
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:831
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:837
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:845
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:851
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:855
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:870
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:880
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:885
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:889
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:922
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:935
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:946
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:958
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:962
		{
			yyVAL.str = yyDollar[2].str
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:967
		{
			yyVAL.str = ""
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:971
		{
			yyVAL.str = yyDollar[2].str
		}
	case 64:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:977
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:991
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:995
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:999
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1003
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1010
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1019
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1028
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1050
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1059
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1068
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1078
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1088
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1100
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1110
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1120
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1131
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1142
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1156
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1164
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1172
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1180
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1189
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1208
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1218
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1231
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1251
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1257
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1264
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1272
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1278
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1287
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1297
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1305
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1313
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1321
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1331
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1339
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1349
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1356
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1365
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1375
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1379
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1385
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1389
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1395
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1404
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1414
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1418
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1424
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1433
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1437
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1443
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1464
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1485
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1489
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1495
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1499
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1505
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1512
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1520
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1524
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1536
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1540
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1554
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1558
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1563
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1570
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1574
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1578
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1584
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1593
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1604
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1608
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1614
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1618
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1624
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1628
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1634
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1658
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1677
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1681
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1685
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1690
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1694
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1703
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1713
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1720
		{
			yyVAL.str = yyDollar[3].str
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1725
		{
			yyVAL.str = "\n"
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1732
		{
			yyVAL.str = yyDollar[3].str
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1737
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1741
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1769
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1773
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1779
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1787
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1807
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1826
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1851
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1855
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1859
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1864
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1868
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1874
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1887
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1898
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1911
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1915
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1925
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1938
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1951
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1957
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1963
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1971
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1981
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1991
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1995
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1999
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2003
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2007
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2011
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2018
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2022
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2028
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2035
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2044
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2048
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2054
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2058
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2062
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2066
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2070
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2074
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2078
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2082
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2086
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2190
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2198
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2202
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2206
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2210
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2234
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2246
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2250
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2254
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2267
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2274
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2281
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2291
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2295
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2301
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2308
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2316
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2320
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2324
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2328
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2334
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2338
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2344
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2351
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2358
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2367
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2397
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2401
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2405
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2411
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2417
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2421
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2428
		{
			yyVAL.str = yyDollar[3].str
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2434
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2438
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2444
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2452
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2461
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2470
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2478
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2486
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2509
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2532
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2539
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2546
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2554
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2561
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2568
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2577
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2581
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2585
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2591
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2595
		{
			yyVAL.str = yyDollar[1].str
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2601
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2605
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2611
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2615
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2626
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2632
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2637
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2641
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2645
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2649
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2653
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2657
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2661
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2665
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2669
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2675
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2679
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2683
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2687
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2692
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2697
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2703
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2716
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2729
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2742
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2755
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2771
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2778
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2789
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2800
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2804
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2810
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2820
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2826
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2830
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2836
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2842
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2846
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2850
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2854
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2860
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2873
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2879
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2883
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2889
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2893
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2899
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2905
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2916
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2922
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2926
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2930
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2934
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2938
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2942
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2950
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2958
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2968
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2980
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2984
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2992
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3000
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3039
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3043
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3049
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3055
		{
			yyVAL.str = yyDollar[1].str
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3060
		{
			yyVAL.str = "true"
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3061
		{
			yyVAL.str = "false"
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3062
		{
			yyVAL.str = yyDollar[1].str
		}
	case 398:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3067
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3073
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3082
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3089
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3097
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3101
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3125
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3148
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3158
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3165
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3174
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3178
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3184
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3188
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3212
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3222
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3232
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3248
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3266
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3270
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3276
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3280
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3286
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3292
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3300
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3310
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3318
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3328
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3338
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3348
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3355
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3359
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3363
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3367
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3371
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3378
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3384
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3388
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3392
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3396
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3400
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3404
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3408
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3412
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3417
		{
			yyVAL.str = ""
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3448
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3452
		{
			yyVAL.str = string("COLUMN")
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3457
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3463
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3469
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3477
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3481
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3487
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3495
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3502
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3508
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3514
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3520
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3526
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3533
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3540
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3548
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3554
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3566
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3572
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3580
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3584
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3591
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3609
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3624
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3639
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3654
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3667
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3673
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3684
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3697
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3701
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3709
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3713
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3718
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3722
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3738
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3742
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3746
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3750
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3757
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3761
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3765
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3769
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3776
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3780
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3787
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3791
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3795
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3799
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3806
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3813
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3819
		{
			yyVAL.item = nil
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3824
		{
			yyVAL.item = nil
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3869
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3878
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3886
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3894
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3902
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3906
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3910
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3921
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3925
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3931
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3936
		{
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3940
		{
		}
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3945
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3955
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3965
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3973
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3979
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3985
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3991
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3997
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4003
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4009
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4018
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4022
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4026
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4030
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4034
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4038
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4042
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4046
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4052
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4061
		{
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4063
		{
		}
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4072
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4082
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4091
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4095
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4099
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4105
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4111
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4117
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4123
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4132
		{
			yyLOCAL = &tree.ShowTables{
				Open:         false,
				Full:         yyDollar[2].fullOptUnion(),
				DBName:       yyDollar[4].str,
				Like:         yyDollar[5].comparisionExprUnion(),
				Where:        yyDollar[6].whereUnion(),
				SnapshotName: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4143
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4155
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:         yyDollar[3].comparisionExprUnion(),
				Where:        yyDollar[4].whereUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4163
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4169
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4181
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4201
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4207
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4214
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4218
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4223
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4227
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4231
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4236
		{
			yyVAL.str = ""
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4240
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4246
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4251
		{
			yyVAL.str = ""
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line mysql_sql.y:4255
		{
			yyVAL.str = yyDollar[4].str
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4270
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4274
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4280
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4288
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:         yyDollar[4].unresolvedObjectNameUnion(),
				SnapshotName: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4295
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4299
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4305
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4311
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4316
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4324
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4330
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4335
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4341
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4347
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4351
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4379
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4387
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4395
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4403
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4407
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4413
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4426
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4434
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4443
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4449
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4457
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4465
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4473
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4479
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4487
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4493
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4501
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4507
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4517
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4522
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4529
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4545
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4558
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4569
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4573
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4579
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4585
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4594
		{
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4596
		{
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4599
		{
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4608
		{
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4612
		{
		}
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4617
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4626
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4633
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4639
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4647
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4654
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4661
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4681
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4689
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4699
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4703
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4709
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4716
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4722
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4730
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4737
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4744
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4763
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4767
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4771
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4776
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4780
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4784
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4790
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4799
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4803
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4809
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4813
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4819
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4823
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4829
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4834
		{
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4838
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4845
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4849
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4856
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4861
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4865
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4871
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4875
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4881
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4885
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4890
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4894
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4907
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4918
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4929
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4951
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4974
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4982
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4991
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4995
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5008
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5012
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5017
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5021
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5028
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5033
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5040
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5046
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5050
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5054
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5058
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5062
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5066
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5071
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5075
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5081
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5091
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5106
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5110
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5124
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5128
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5134
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5143
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5147
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5151
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5155
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5159
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5165
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5172
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5181
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5185
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5191
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5199
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5203
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5208
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5212
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5218
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5222
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5226
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5231
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5235
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5241
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5247
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5251
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5257
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5262
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5266
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5270
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5275
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5279
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5283
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5288
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5292
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5300
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5304
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5308
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5322
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5326
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5336
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5346
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5356
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5368
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5376
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5384
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5393
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5401
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5409
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5417
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5425
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5433
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5441
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5449
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5457
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5467
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5478
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5492
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5496
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5500
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5505
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5509
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5513
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5522
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5526
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5531
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5535
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5540
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5544
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5550
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5554
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5560
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5564
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5568
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5572
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5577
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5585
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5591
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5599
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5607
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5617
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5623
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5632
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5641
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5650
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5660
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5664
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5674
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5678
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5682
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 868:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5686
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 869:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5692
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5702
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5706
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5712
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5718
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5722
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5728
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5734
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5738
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5742
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5746
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5752
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5756
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5762
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5766
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5772
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5776
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5782
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5786
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5796
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5809
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5815
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5821
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5835
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5846
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5853
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5857
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5863
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5873
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5877
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5881
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5886
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5890
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5894
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5898
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5903
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5907
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5911
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5915
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5919
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5924
		{
			yyVAL.str = ""
		}
	case 911:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5928
		{
			yyVAL.str = yyDollar[1].str
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5932
		{
			yyVAL.str = yyDollar[2].str
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5938
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5942
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5947
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5951
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5955
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5959
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5963
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5969
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 943:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6011
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6024
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6030
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 946:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6036
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6049
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6054
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6061
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6068
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6072
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6078
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6084
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6089
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6093
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6097
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6101
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6108
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6141
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6146
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6153
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6160
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6164
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6170
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6176
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6180
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6184
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6190
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6196
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6202
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6206
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6212
		{
			yyVAL.str = ""
		}
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6219
		{
			yyVAL.str = yyDollar[2].str
		}
	case 977:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6225
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6240
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6257
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6274
		{
			yyVAL.str = yyDollar[1].str
		}
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6278
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 982:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6284
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6288
		{
			yyVAL.str = "DEFINER = "
		}
	case 984:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6292
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 985:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6297
		{
			yyVAL.str = ""
		}
	case 986:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6301
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6315
		{
			yyVAL.str = ""
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6323
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6329
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6334
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6340
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6353
		{
			var Str = yyDollar[1].str
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6358
		{
			var Str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6363
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6369
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6376
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6383
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6390
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6397
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6405
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6411
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6418
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6425
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6433
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6439
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6448
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6465
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6481
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6500
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6506
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6515
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6533
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6539
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6546
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6554
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6560
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6568
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6574
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6582
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6588
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6597
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6601
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6606
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6610
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6617
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6622
		{
			yyVAL.str = ""
		}
	case 1034:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6626
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1035:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6632
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6645
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6656
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6660
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6666
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6672
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6678
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6685
		{
			yyVAL.str = ""
		}
	case 1043:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6689
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6694
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6698
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6704
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6712
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6720
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6728
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6736
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6741
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6753
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6764
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6873
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6877
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6883
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6896
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6900
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6906
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6919
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6923
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6927
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6932
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6936
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6942
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6949
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6955
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumValWithType(constant.MakeString(yyDollar[3].str), yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6964
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1070:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6971
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6982
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6986
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6992
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7001
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7005
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7009
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7014
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7018
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7022
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7026
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7032
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7063
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7067
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7093
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7099
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7111
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7117
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7123
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7129
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7135
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7143
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7147
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7153
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7167
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7181
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7185
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7189
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7193
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7197
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7201
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7205
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7211
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7226
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7230
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7241
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7245
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7250
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7254
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7260
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7264
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7270
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7279
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7288
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7294
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7298
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7304
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7315
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7321
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7339
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7357
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7375
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7391
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7395
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7404
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7416
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7425
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7437
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7447
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7457
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7468
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7478
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7489
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7497
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7508
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7515
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7525
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7538
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7546
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7555
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7564
		{
			yyVAL.str = ""
		}
	case 1143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7568
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7574
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7578
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7583
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7587
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7594
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7606
		{
			yyVAL.str = ""
		}
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7610
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1151:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7616
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7637
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7651
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7655
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7659
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7665
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7669
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7676
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7683
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7690
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7697
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7701
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7705
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7709
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7713
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7720
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7727
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7731
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7738
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7745
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7749
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7755
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7761
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7765
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7772
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7779
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7786
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7793
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7797
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7802
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7806
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7810
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7815
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7819
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7832
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7836
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7844
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7856
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7868
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7872
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7878
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7882
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7888
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7901
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7915
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7919
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7925
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7929
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7935
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:7944
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7955
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7959
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7964
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7968
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7974
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:7979
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7987
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7991
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8001
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8005
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8016
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8024
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8032
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8040
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8051
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8060
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8070
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8080
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8084
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8089
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8093
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8099
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8103
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8109
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8118
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8128
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8132
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8138
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8142
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8148
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8157
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8167
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8171
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8177
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8181
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8185
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8191
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8195
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8199
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8203
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8207
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8211
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8215
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8220
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8224
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8228
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8232
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8236
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8240
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8244
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8248
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8252
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8256
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8260
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8264
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8268
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8274
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8280
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8284
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8288
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8292
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8296
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8302
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8308
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8314
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8320
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8326
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8332
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8336
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8340
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8344
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8351
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8355
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8361
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8372
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8376
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8382
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8386
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8390
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8394
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8398
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8402
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8416
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8420
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8429
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8435
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8443
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8447
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8451
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8458
		{
			var Str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(Str), Str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8466
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPSNAPSHOT,
				Expr: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8473
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8481
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8488
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8492
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8498
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8502
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8506
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8512
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8516
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8522
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8535
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8548
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8587
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8627
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8641
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8647
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8660
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8673
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8686
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8699
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8714
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8724
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8730
		{
			yyVAL.str = ""
		}
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8734
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8744
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8750
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8756
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8777
		{
			yyVAL.str = ""
		}
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8781
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8787
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8793
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8797
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8802
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8810
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8814
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8818
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8822
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8828
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8834
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8838
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8843
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8850
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8854
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8860
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8864
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8870
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8874
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8878
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8882
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8886
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8890
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8895
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8899
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8903
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8907
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8911
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8915
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8919
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8923
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8927
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8931
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8945
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8949
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8953
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8957
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8961
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8965
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8971
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8975
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8980
		{
			yyVAL.str = ""
		}
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8984
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8990
		{
			yyVAL.str = ""
		}
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8994
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9000
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9017
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9024
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9031
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9038
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9045
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9054
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9060
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9066
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9070
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9074
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9078
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9082
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9087
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9094
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9098
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9102
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9107
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9111
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9116
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9120
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9136
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9142
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9146
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9150
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9154
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9158
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9162
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9166
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9170
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9174
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9178
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9182
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9186
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9190
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9196
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9200
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9204
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9208
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9212
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9216
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9220
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9224
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9228
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9232
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9274
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9278
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9282
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9287
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9295
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9299
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9303
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9307
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9311
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9321
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9325
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9329
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9333
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9337
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9341
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9345
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9351
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9360
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9369
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9380
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9390
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9400
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9409
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9419
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9429
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9439
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9448
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9458
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9462
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9467
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9471
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9477
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9481
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9487
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9496
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9508
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9525
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9542
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9555
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9568
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9580
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9594
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9609
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9624
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9641
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9656
		{
		}
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9663
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9667
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9671
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9677
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9681
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9685
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9689
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9695
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9699
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9703
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9709
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9717
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9727
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9731
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9738
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9743
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9747
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9752
		{
			yyVAL.str = ","
		}
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9756
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9761
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9765
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1508:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9777
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9803
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9815
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9827
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9838
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9849
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9860
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9870
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9880
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9891
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9902
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9913
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9924
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9935
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9946
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9957
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9968
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9979
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9990
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10001
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10012
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10023
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10034
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10052
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10061
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10070
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10079
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10088
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10099
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10108
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10118
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10127
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10136
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10145
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10154
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10166
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10177
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10190
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10202
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10225
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1587:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10261
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10274
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10287
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10299
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10308
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10316
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10324
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10337
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10346
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10357
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10368
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10377
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10389
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10399
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10409
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10418
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10429
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10438
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10448
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10457
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10466
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10476
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10480
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10486
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10490
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10509
		{
		}
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10511
		{
		}
	case 1653:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10552
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10564
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10568
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10572
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10578
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10583
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10587
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10593
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10597
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10603
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10607
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10614
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10618
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10622
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10631
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10635
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10639
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10644
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10648
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10654
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10658
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10662
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10666
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10670
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10674
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10678
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10682
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10686
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10690
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10698
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10702
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10706
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10710
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10714
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10718
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10722
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10726
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10730
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10734
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10740
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10744
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10750
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10754
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10761
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10765
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10769
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10775
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10779
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10783
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10787
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10791
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10795
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10799
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10805
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10809
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10813
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10817
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10823
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10836
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10841
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10847
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10851
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10864
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10869
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10873
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10877
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10881
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10885
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10892
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10896
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10900
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10904
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10911
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10922
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10927
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10933
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10945
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10957
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10969
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10982
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10995
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11008
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11021
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11034
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11047
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11060
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11073
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11086
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11099
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11114
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11141
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11183
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11219
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11255
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11272
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11284
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11304
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11324
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11344
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11360
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11373
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11386
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11399
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11412
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11424
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11436
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11448
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11460
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11472
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11484
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11496
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11508
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11520
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11533
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11546
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11559
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11572
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11587
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11595
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11604
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11614
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11637
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11642
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11648
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11655
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11659
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11664
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11668
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11674
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11680
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11687
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11694
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11703
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11710
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11717
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11726
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11730
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11734
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11740
		{
		}
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11742
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11752
		{
			yyVAL.str = ""
		}
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11756
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
