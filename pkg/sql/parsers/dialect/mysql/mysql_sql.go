// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const DATALINK = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const UUID = 57533
const VECF32 = 57534
const VECF64 = 57535
const GEOMETRY = 57536
const POINT = 57537
const LINESTRING = 57538
const POLYGON = 57539
const GEOMETRYCOLLECTION = 57540
const MULTIPOINT = 57541
const MULTILINESTRING = 57542
const MULTIPOLYGON = 57543
const INT1 = 57544
const INT2 = 57545
const INT3 = 57546
const INT4 = 57547
const INT8 = 57548
const S3OPTION = 57549
const STAGEOPTION = 57550
const SQL_SMALL_RESULT = 57551
const SQL_BIG_RESULT = 57552
const SQL_BUFFER_RESULT = 57553
const LOW_PRIORITY = 57554
const HIGH_PRIORITY = 57555
const DELAYED = 57556
const CREATE = 57557
const ALTER = 57558
const DROP = 57559
const RENAME = 57560
const ANALYZE = 57561
const ADD = 57562
const RETURNS = 57563
const SCHEMA = 57564
const TABLE = 57565
const SEQUENCE = 57566
const INDEX = 57567
const VIEW = 57568
const TO = 57569
const IGNORE = 57570
const IF = 57571
const PRIMARY = 57572
const COLUMN = 57573
const CONSTRAINT = 57574
const SPATIAL = 57575
const FULLTEXT = 57576
const FOREIGN = 57577
const KEY_BLOCK_SIZE = 57578
const SHOW = 57579
const DESCRIBE = 57580
const EXPLAIN = 57581
const DATE = 57582
const ESCAPE = 57583
const REPAIR = 57584
const OPTIMIZE = 57585
const TRUNCATE = 57586
const MAXVALUE = 57587
const PARTITION = 57588
const REORGANIZE = 57589
const LESS = 57590
const THAN = 57591
const PROCEDURE = 57592
const TRIGGER = 57593
const STATUS = 57594
const VARIABLES = 57595
const ROLE = 57596
const PROXY = 57597
const AVG_ROW_LENGTH = 57598
const STORAGE = 57599
const DISK = 57600
const MEMORY = 57601
const CHECKSUM = 57602
const COMPRESSION = 57603
const DATA = 57604
const DIRECTORY = 57605
const DELAY_KEY_WRITE = 57606
const ENCRYPTION = 57607
const ENGINE = 57608
const MAX_ROWS = 57609
const MIN_ROWS = 57610
const PACK_KEYS = 57611
const ROW_FORMAT = 57612
const STATS_AUTO_RECALC = 57613
const STATS_PERSISTENT = 57614
const STATS_SAMPLE_PAGES = 57615
const DYNAMIC = 57616
const COMPRESSED = 57617
const REDUNDANT = 57618
const COMPACT = 57619
const FIXED = 57620
const COLUMN_FORMAT = 57621
const AUTO_RANDOM = 57622
const ENGINE_ATTRIBUTE = 57623
const SECONDARY_ENGINE_ATTRIBUTE = 57624
const INSERT_METHOD = 57625
const RESTRICT = 57626
const CASCADE = 57627
const ACTION = 57628
const PARTIAL = 57629
const SIMPLE = 57630
const CHECK = 57631
const ENFORCED = 57632
const RANGE = 57633
const LIST = 57634
const ALGORITHM = 57635
const LINEAR = 57636
const PARTITIONS = 57637
const SUBPARTITION = 57638
const SUBPARTITIONS = 57639
const CLUSTER = 57640
const TYPE = 57641
const ANY = 57642
const SOME = 57643
const EXTERNAL = 57644
const LOCALFILE = 57645
const URL = 57646
const PREPARE = 57647
const DEALLOCATE = 57648
const RESET = 57649
const EXTENSION = 57650
const RETENTION = 57651
const PERIOD = 57652
const INCREMENT = 57653
const CYCLE = 57654
const MINVALUE = 57655
const PUBLICATION = 57656
const SUBSCRIPTIONS = 57657
const PUBLICATIONS = 57658
const PROPERTIES = 57659
const PARSER = 57660
const VISIBLE = 57661
const INVISIBLE = 57662
const BTREE = 57663
const HASH = 57664
const RTREE = 57665
const BSI = 57666
const IVFFLAT = 57667
const MASTER = 57668
const ZONEMAP = 57669
const LEADING = 57670
const BOTH = 57671
const TRAILING = 57672
const UNKNOWN = 57673
const LISTS = 57674
const OP_TYPE = 57675
const REINDEX = 57676
const EXPIRE = 57677
const ACCOUNT = 57678
const ACCOUNTS = 57679
const UNLOCK = 57680
const DAY = 57681
const NEVER = 57682
const PUMP = 57683
const MYSQL_COMPATIBILITY_MODE = 57684
const UNIQUE_CHECK_ON_AUTOINCR = 57685
const MODIFY = 57686
const CHANGE = 57687
const SECOND = 57688
const ASCII = 57689
const COALESCE = 57690
const COLLATION = 57691
const HOUR = 57692
const MICROSECOND = 57693
const MINUTE = 57694
const MONTH = 57695
const QUARTER = 57696
const REPEAT = 57697
const REVERSE = 57698
const ROW_COUNT = 57699
const WEEK = 57700
const REVOKE = 57701
const FUNCTION = 57702
const PRIVILEGES = 57703
const TABLESPACE = 57704
const EXECUTE = 57705
const SUPER = 57706
const GRANT = 57707
const OPTION = 57708
const REFERENCES = 57709
const REPLICATION = 57710
const SLAVE = 57711
const CLIENT = 57712
const USAGE = 57713
const RELOAD = 57714
const FILE = 57715
const TEMPORARY = 57716
const ROUTINE = 57717
const EVENT = 57718
const SHUTDOWN = 57719
const NULLX = 57720
const AUTO_INCREMENT = 57721
const APPROXNUM = 57722
const SIGNED = 57723
const UNSIGNED = 57724
const ZEROFILL = 57725
const ENGINES = 57726
const LOW_CARDINALITY = 57727
const AUTOEXTEND_SIZE = 57728
const ADMIN_NAME = 57729
const RANDOM = 57730
const SUSPEND = 57731
const ATTRIBUTE = 57732
const HISTORY = 57733
const REUSE = 57734
const CURRENT = 57735
const OPTIONAL = 57736
const FAILED_LOGIN_ATTEMPTS = 57737
const PASSWORD_LOCK_TIME = 57738
const UNBOUNDED = 57739
const SECONDARY = 57740
const RESTRICTED = 57741
const USER = 57742
const IDENTIFIED = 57743
const CIPHER = 57744
const ISSUER = 57745
const X509 = 57746
const SUBJECT = 57747
const SAN = 57748
const REQUIRE = 57749
const SSL = 57750
const NONE = 57751
const PASSWORD = 57752
const SHARED = 57753
const EXCLUSIVE = 57754
const MAX_QUERIES_PER_HOUR = 57755
const MAX_UPDATES_PER_HOUR = 57756
const MAX_CONNECTIONS_PER_HOUR = 57757
const MAX_USER_CONNECTIONS = 57758
const FORMAT = 57759
const VERBOSE = 57760
const CONNECTION = 57761
const TRIGGERS = 57762
const PROFILES = 57763
const LOAD = 57764
const INLINE = 57765
const INFILE = 57766
const TERMINATED = 57767
const OPTIONALLY = 57768
const ENCLOSED = 57769
const ESCAPED = 57770
const STARTING = 57771
const LINES = 57772
const ROWS = 57773
const IMPORT = 57774
const DISCARD = 57775
const JSONTYPE = 57776
const MODUMP = 57777
const OVER = 57778
const PRECEDING = 57779
const FOLLOWING = 57780
const GROUPS = 57781
const DATABASES = 57782
const TABLES = 57783
const SEQUENCES = 57784
const EXTENDED = 57785
const FULL = 57786
const PROCESSLIST = 57787
const FIELDS = 57788
const COLUMNS = 57789
const OPEN = 57790
const ERRORS = 57791
const WARNINGS = 57792
const INDEXES = 57793
const SCHEMAS = 57794
const NODE = 57795
const LOCKS = 57796
const ROLES = 57797
const TABLE_NUMBER = 57798
const COLUMN_NUMBER = 57799
const TABLE_VALUES = 57800
const TABLE_SIZE = 57801
const NAMES = 57802
const GLOBAL = 57803
const PERSIST = 57804
const SESSION = 57805
const ISOLATION = 57806
const LEVEL = 57807
const READ = 57808
const WRITE = 57809
const ONLY = 57810
const REPEATABLE = 57811
const COMMITTED = 57812
const UNCOMMITTED = 57813
const SERIALIZABLE = 57814
const LOCAL = 57815
const EVENTS = 57816
const PLUGINS = 57817
const CURRENT_TIMESTAMP = 57818
const DATABASE = 57819
const CURRENT_TIME = 57820
const LOCALTIME = 57821
const LOCALTIMESTAMP = 57822
const UTC_DATE = 57823
const UTC_TIME = 57824
const UTC_TIMESTAMP = 57825
const REPLACE = 57826
const CONVERT = 57827
const SEPARATOR = 57828
const TIMESTAMPDIFF = 57829
const CURRENT_DATE = 57830
const CURRENT_USER = 57831
const CURRENT_ROLE = 57832
const SECOND_MICROSECOND = 57833
const MINUTE_MICROSECOND = 57834
const MINUTE_SECOND = 57835
const HOUR_MICROSECOND = 57836
const HOUR_SECOND = 57837
const HOUR_MINUTE = 57838
const DAY_MICROSECOND = 57839
const DAY_SECOND = 57840
const DAY_MINUTE = 57841
const DAY_HOUR = 57842
const YEAR_MONTH = 57843
const SQL_TSI_HOUR = 57844
const SQL_TSI_DAY = 57845
const SQL_TSI_WEEK = 57846
const SQL_TSI_MONTH = 57847
const SQL_TSI_QUARTER = 57848
const SQL_TSI_YEAR = 57849
const SQL_TSI_SECOND = 57850
const SQL_TSI_MINUTE = 57851
const RECURSIVE = 57852
const CONFIG = 57853
const DRAINER = 57854
const SOURCE = 57855
const STREAM = 57856
const HEADERS = 57857
const CONNECTOR = 57858
const CONNECTORS = 57859
const DAEMON = 57860
const PAUSE = 57861
const CANCEL = 57862
const TASK = 57863
const RESUME = 57864
const MATCH = 57865
const AGAINST = 57866
const BOOLEAN = 57867
const LANGUAGE = 57868
const WITH = 57869
const QUERY = 57870
const EXPANSION = 57871
const WITHOUT = 57872
const VALIDATION = 57873
const UPGRADE = 57874
const RETRY = 57875
const ADDDATE = 57876
const BIT_AND = 57877
const BIT_OR = 57878
const BIT_XOR = 57879
const CAST = 57880
const COUNT = 57881
const APPROX_COUNT = 57882
const APPROX_COUNT_DISTINCT = 57883
const SERIAL_EXTRACT = 57884
const APPROX_PERCENTILE = 57885
const CURDATE = 57886
const CURTIME = 57887
const DATE_ADD = 57888
const DATE_SUB = 57889
const EXTRACT = 57890
const GROUP_CONCAT = 57891
const MAX = 57892
const MID = 57893
const MIN = 57894
const NOW = 57895
const POSITION = 57896
const SESSION_USER = 57897
const STD = 57898
const STDDEV = 57899
const MEDIAN = 57900
const CLUSTER_CENTERS = 57901
const KMEANS = 57902
const STDDEV_POP = 57903
const STDDEV_SAMP = 57904
const SUBDATE = 57905
const SUBSTR = 57906
const SUBSTRING = 57907
const SUM = 57908
const SYSDATE = 57909
const SYSTEM_USER = 57910
const TRANSLATE = 57911
const TRIM = 57912
const VARIANCE = 57913
const VAR_POP = 57914
const VAR_SAMP = 57915
const AVG = 57916
const RANK = 57917
const ROW_NUMBER = 57918
const DENSE_RANK = 57919
const BIT_CAST = 57920
const BITMAP_BIT_POSITION = 57921
const BITMAP_BUCKET_NUMBER = 57922
const BITMAP_COUNT = 57923
const BITMAP_CONSTRUCT_AGG = 57924
const BITMAP_OR_AGG = 57925
const NEXTVAL = 57926
const SETVAL = 57927
const CURRVAL = 57928
const LASTVAL = 57929
const ARROW = 57930
const ROW = 57931
const OUTFILE = 57932
const HEADER = 57933
const MAX_FILE_SIZE = 57934
const FORCE_QUOTE = 57935
const PARALLEL = 57936
const STRICT = 57937
const UNUSED = 57938
const BINDINGS = 57939
const DO = 57940
const DECLARE = 57941
const LOOP = 57942
const WHILE = 57943
const LEAVE = 57944
const ITERATE = 57945
const UNTIL = 57946
const CALL = 57947
const PREV = 57948
const SLIDING = 57949
const FILL = 57950
const SPBEGIN = 57951
const BACKEND = 57952
const SERVERS = 57953
const HANDLER = 57954
const PERCENT = 57955
const SAMPLE = 57956
const MO_TS = 57957
const PITR = 57958
const CDC = 57959
const ROLLUP = 57960
const KILL = 57961
const BACKUP = 57962
const FILESYSTEM = 57963
const PARALLELISM = 57964
const RESTORE = 57965
const QUERY_RESULT = 57966

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"ROLLUP",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12480

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 134,
	11, 778,
	22, 778,
	-2, 771,
	-1, 157,
	240, 1189,
	242, 1088,
	-2, 1135,
	-1, 184,
	43, 601,
	242, 601,
	269, 608,
	270, 608,
	468, 601,
	-2, 636,
	-1, 224,
	645, 1948,
	-2, 511,
	-1, 526,
	645, 2068,
	-2, 392,
	-1, 584,
	645, 2127,
	-2, 390,
	-1, 585,
	645, 2128,
	-2, 391,
	-1, 586,
	645, 2129,
	-2, 393,
	-1, 720,
	321, 176,
	440, 176,
	441, 176,
	-2, 1853,
	-1, 786,
	83, 1639,
	-2, 2004,
	-1, 787,
	83, 1657,
	-2, 1975,
	-1, 791,
	83, 1658,
	-2, 2003,
	-1, 824,
	83, 1566,
	-2, 2202,
	-1, 825,
	83, 1567,
	-2, 2201,
	-1, 826,
	83, 1568,
	-2, 2191,
	-1, 827,
	83, 2163,
	-2, 2184,
	-1, 828,
	83, 2164,
	-2, 2185,
	-1, 829,
	83, 2165,
	-2, 2193,
	-1, 830,
	83, 2166,
	-2, 2173,
	-1, 831,
	83, 2167,
	-2, 2182,
	-1, 832,
	83, 2168,
	-2, 2194,
	-1, 833,
	83, 2169,
	-2, 2195,
	-1, 834,
	83, 2170,
	-2, 2200,
	-1, 835,
	83, 2171,
	-2, 2205,
	-1, 836,
	83, 2172,
	-2, 2206,
	-1, 837,
	83, 1635,
	-2, 2042,
	-1, 838,
	83, 1636,
	-2, 1837,
	-1, 839,
	83, 1637,
	-2, 2051,
	-1, 840,
	83, 1638,
	-2, 1846,
	-1, 842,
	83, 1641,
	-2, 1854,
	-1, 843,
	83, 1642,
	-2, 2075,
	-1, 845,
	83, 1645,
	-2, 1873,
	-1, 847,
	83, 1647,
	-2, 2087,
	-1, 848,
	83, 1648,
	-2, 2086,
	-1, 849,
	83, 1649,
	-2, 1917,
	-1, 850,
	83, 1650,
	-2, 1999,
	-1, 853,
	83, 1653,
	-2, 2098,
	-1, 855,
	83, 1655,
	-2, 2101,
	-1, 856,
	83, 1656,
	-2, 2103,
	-1, 857,
	83, 1659,
	-2, 2111,
	-1, 858,
	83, 1660,
	-2, 1984,
	-1, 859,
	83, 1661,
	-2, 2029,
	-1, 860,
	83, 1662,
	-2, 1994,
	-1, 861,
	83, 1663,
	-2, 2019,
	-1, 872,
	83, 1544,
	-2, 2196,
	-1, 873,
	83, 1545,
	-2, 2197,
	-1, 874,
	83, 1546,
	-2, 2198,
	-1, 973,
	463, 636,
	464, 636,
	-2, 602,
	-1, 1023,
	125, 1837,
	136, 1837,
	156, 1837,
	-2, 1811,
	-1, 1140,
	22, 805,
	-2, 754,
	-1, 1246,
	11, 778,
	22, 778,
	-2, 1424,
	-1, 1328,
	22, 805,
	-2, 754,
	-1, 1674,
	83, 1710,
	-2, 2001,
	-1, 1675,
	83, 1711,
	-2, 2002,
	-1, 1844,
	84, 960,
	-2, 966,
	-1, 2291,
	108, 1127,
	152, 1127,
	191, 1127,
	194, 1127,
	282, 1127,
	-2, 1120,
	-1, 2447,
	11, 778,
	22, 778,
	-2, 901,
	-1, 2480,
	84, 1797,
	157, 1797,
	-2, 1986,
	-1, 2481,
	84, 1797,
	157, 1797,
	-2, 1985,
	-1, 2482,
	84, 1773,
	157, 1773,
	-2, 1972,
	-1, 2483,
	84, 1774,
	157, 1774,
	-2, 1977,
	-1, 2484,
	84, 1775,
	157, 1775,
	-2, 1905,
	-1, 2485,
	84, 1776,
	157, 1776,
	-2, 1899,
	-1, 2486,
	84, 1777,
	157, 1777,
	-2, 1827,
	-1, 2487,
	84, 1778,
	157, 1778,
	-2, 1974,
	-1, 2488,
	84, 1779,
	157, 1779,
	-2, 1903,
	-1, 2489,
	84, 1780,
	157, 1780,
	-2, 1898,
	-1, 2490,
	84, 1781,
	157, 1781,
	-2, 1887,
	-1, 2491,
	84, 1797,
	157, 1797,
	-2, 1888,
	-1, 2492,
	84, 1797,
	157, 1797,
	-2, 1889,
	-1, 2494,
	84, 1786,
	157, 1786,
	-2, 2019,
	-1, 2495,
	84, 1763,
	157, 1763,
	-2, 2004,
	-1, 2496,
	84, 1795,
	157, 1795,
	-2, 1975,
	-1, 2497,
	84, 1795,
	157, 1795,
	-2, 2003,
	-1, 2498,
	84, 1795,
	157, 1795,
	-2, 1855,
	-1, 2499,
	84, 1793,
	157, 1793,
	-2, 1994,
	-1, 2500,
	84, 1790,
	157, 1790,
	-2, 1878,
	-1, 2501,
	83, 1744,
	84, 1744,
	157, 1744,
	398, 1744,
	399, 1744,
	400, 1744,
	-2, 1826,
	-1, 2502,
	83, 1745,
	84, 1745,
	157, 1745,
	398, 1745,
	399, 1745,
	400, 1745,
	-2, 1828,
	-1, 2503,
	83, 1746,
	84, 1746,
	157, 1746,
	398, 1746,
	399, 1746,
	400, 1746,
	-2, 2047,
	-1, 2504,
	83, 1748,
	84, 1748,
	157, 1748,
	398, 1748,
	399, 1748,
	400, 1748,
	-2, 1976,
	-1, 2505,
	83, 1750,
	84, 1750,
	157, 1750,
	398, 1750,
	399, 1750,
	400, 1750,
	-2, 1957,
	-1, 2506,
	83, 1752,
	84, 1752,
	157, 1752,
	398, 1752,
	399, 1752,
	400, 1752,
	-2, 1904,
	-1, 2507,
	83, 1754,
	84, 1754,
	157, 1754,
	398, 1754,
	399, 1754,
	400, 1754,
	-2, 1883,
	-1, 2508,
	83, 1755,
	84, 1755,
	157, 1755,
	398, 1755,
	399, 1755,
	400, 1755,
	-2, 1884,
	-1, 2509,
	83, 1757,
	84, 1757,
	157, 1757,
	398, 1757,
	399, 1757,
	400, 1757,
	-2, 1825,
	-1, 2510,
	84, 1800,
	157, 1800,
	398, 1800,
	399, 1800,
	400, 1800,
	-2, 1860,
	-1, 2511,
	84, 1800,
	157, 1800,
	398, 1800,
	399, 1800,
	400, 1800,
	-2, 1874,
	-1, 2512,
	84, 1803,
	157, 1803,
	398, 1803,
	399, 1803,
	400, 1803,
	-2, 1856,
	-1, 2513,
	84, 1803,
	157, 1803,
	398, 1803,
	399, 1803,
	400, 1803,
	-2, 1920,
	-1, 2514,
	84, 1800,
	157, 1800,
	398, 1800,
	399, 1800,
	400, 1800,
	-2, 1941,
	-1, 2727,
	108, 1127,
	152, 1127,
	191, 1127,
	194, 1127,
	282, 1127,
	-2, 1121,
	-1, 2745,
	81, 698,
	157, 698,
	-2, 1305,
	-1, 3159,
	194, 1127,
	306, 1392,
	-2, 1364,
	-1, 3338,
	108, 1127,
	152, 1127,
	191, 1127,
	194, 1127,
	-2, 1245,
	-1, 3340,
	108, 1127,
	152, 1127,
	191, 1127,
	194, 1127,
	-2, 1245,
	-1, 3352,
	81, 698,
	157, 698,
	-2, 1305,
	-1, 3373,
	194, 1127,
	306, 1392,
	-2, 1365,
	-1, 3522,
	108, 1127,
	152, 1127,
	191, 1127,
	194, 1127,
	-2, 1246,
	-1, 3550,
	84, 1207,
	157, 1207,
	-2, 1127,
	-1, 3690,
	84, 1207,
	157, 1207,
	-2, 1127,
	-1, 3847,
	84, 1211,
	157, 1211,
	-2, 1127,
	-1, 3894,
	84, 1212,
	157, 1212,
	-2, 1127,
}

const yyPrivate = 57344

const yyLast = 51388

var yyAct = [...]int{
	753, 730, 3940, 755, 3914, 2775, 213, 3933, 3851, 1930,
	3857, 1654, 3358, 3750, 3454, 3178, 3858, 3850, 3690, 3145,
	3578, 3776, 739, 3807, 3731, 3387, 3250, 3668, 2769, 3635,
	3725, 3689, 2569, 732, 3251, 1281, 3754, 3510, 3509, 3507,
	2687, 3608, 783, 2772, 1022, 1141, 621, 3659, 3320, 3458,
	1567, 3325, 1877, 3154, 3732, 3734, 2338, 3374, 1423, 3531,
	639, 2748, 645, 645, 1701, 1657, 3102, 1429, 645, 662,
	671, 3449, 3116, 671, 37, 3519, 3076, 3248, 3489, 2884,
	2885, 2022, 3524, 2039, 3105, 3341, 2864, 2025, 1490, 3310,
	2883, 2798, 3156, 65, 1135, 3343, 1650, 3174, 198, 3163,
	2441, 1715, 1989, 2062, 2880, 2095, 3290, 2947, 2604, 2137,
	3236, 2476, 2907, 683, 2341, 3216, 1579, 2716, 1483, 3087,
	679, 1890, 3083, 3162, 3079, 3077, 3081, 3078, 2302, 3125,
	1131, 722, 2728, 3074, 133, 2270, 2994, 2778, 2478, 3051,
	2246, 2245, 2133, 668, 727, 2120, 2920, 1807, 2548, 2104,
	2103, 2096, 2930, 2530, 1563, 2068, 2018, 1568, 36, 2132,
	946, 1992, 2429, 2442, 1990, 2705, 2700, 2800, 1392, 2424,
	2780, 1571, 2339, 1920, 1016, 2740, 209, 8, 208, 7,
	6, 2301, 2291, 1079, 1853, 2474, 1530, 731, 1556, 621,
	1648, 2134, 1468, 1463, 1399, 2282, 638, 2334, 1889, 721,
	1432, 2144, 1499, 1708, 1433, 1639, 1412, 2167, 1688, 1154,
	1599, 740, 2102, 213, 2099, 213, 1653, 1070, 1071, 2637,
	620, 2084, 2058, 1537, 645, 1582, 1015, 1849, 15, 982,
	33, 676, 2449, 1647, 1852, 1467, 654, 2425, 1828, 1465,
	728, 27, 1521, 16, 1408, 657, 945, 14, 723, 876,
	686, 199, 1716, 685, 1424, 108, 24, 1529, 922, 17,
	10, 670, 195, 23, 191, 968, 943, 2371, 1326, 1282,
	928, 682, 878, 2141, 3741, 879, 1049, 1214, 1215, 1216,
	1213, 2451, 1067, 1578, 3653, 2672, 1031, 1997, 1214, 1215,
	1216, 1213, 2672, 2672, 3355, 729, 2964, 666, 2963, 664,
	1214, 1215, 1216, 1213, 3132, 2151, 936, 641, 937, 1136,
	667, 1066, 663, 1068, 3482, 2636, 665, 3328, 3243, 1137,
	2592, 2533, 2536, 2534, 1820, 2531, 1544, 1028, 1540, 1062,
	650, 1063, 197, 1359, 674, 640, 2244, 1002, 1345, 3715,
	898, 896, 1063, 723, 3061, 917, 2250, 1063, 1050, 644,
	644, 1030, 1591, 1395, 1136, 652, 2254, 1821, 1348, 931,
	3044, 927, 3041, 3046, 3043, 3925, 2664, 2662, 1446, 1814,
	646, 1341, 1542, 1590, 8, 3447, 7, 2943, 1061, 2941,
	2073, 3720, 1214, 1215, 1216, 1213, 3615, 1214, 1215, 1216,
	1213, 3609, 3450, 3249, 2117, 3736, 1276, 2098, 877, 3021,
	2090, 2379, 1354, 1212, 3832, 3490, 888, 3342, 2666, 196,
	61, 187, 158, 3494, 2586, 1176, 2578, 908, 2293, 2138,
	1044, 1039, 1034, 1038, 1042, 1577, 196, 196, 196, 61,
	187, 158, 3640, 3787, 3675, 1832, 1829, 1507, 1353, 897,
	895, 1351, 898, 196, 61, 187, 158, 3019, 1047, 681,
	196, 896, 1037, 1032, 2292, 196, 61, 187, 158, 196,
	61, 187, 158, 1355, 1026, 2149, 196, 1027, 196, 61,
	187, 158, 2734, 1152, 2966, 196, 196, 188, 3676, 192,
	196, 1384, 997, 995, 179, 996, 2878, 1367, 189, 933,
	2286, 926, 1608, 1586, 1597, 1823, 192, 192, 192, 3642,
	930, 929, 2455, 1045, 2468, 2454, 1211, 132, 2456, 3377,
	2469, 652, 1048, 192, 2955, 889, 1469, 911, 1471, 1620,
	2732, 918, 119, 1583, 1594, 192, 893, 2913, 132, 192,
	2689, 2001, 1149, 3149, 1035, 2549, 192, 2702, 192, 2914,
	2915, 925, 3045, 991, 3042, 1585, 1596, 2703, 3389, 867,
	192, 866, 868, 869, 1442, 870, 871, 1443, 1046, 1640,
	935, 3380, 1644, 1904, 3829, 924, 196, 1656, 2690, 923,
	2735, 1209, 3375, 1003, 3147, 910, 3471, 3397, 3398, 2002,
	2003, 916, 1191, 3376, 1204, 1192, 1643, 1834, 1835, 1420,
	1025, 2035, 1430, 1431, 3739, 999, 2701, 1024, 1036, 1184,
	3861, 3862, 1186, 914, 3739, 3820, 140, 141, 3738, 142,
	143, 3738, 3819, 1194, 132, 2667, 3737, 1543, 1541, 1428,
	3381, 1366, 2233, 1427, 1430, 1431, 3737, 3818, 3825, 3882,
	1187, 3918, 3919, 3252, 3723, 2948, 192, 3726, 3727, 3728,
	3729, 934, 3311, 645, 645, 1445, 3252, 3834, 3835, 2573,
	3809, 3809, 3812, 3612, 645, 1145, 2949, 1146, 2950, 1001,
	3830, 3831, 157, 1629, 194, 2153, 2708, 915, 1157, 3096,
	2819, 2145, 1645, 671, 671, 1043, 645, 2019, 157, 185,
	194, 186, 117, 2013, 184, 2009, 1635, 3747, 3265, 3098,
	3499, 3318, 2414, 2281, 2081, 1189, 1642, 2984, 3088, 934,
	184, 178, 177, 2583, 3644, 3645, 2692, 67, 3399, 2691,
	1660, 1040, 1180, 3827, 1041, 3396, 3470, 2342, 1550, 1549,
	2982, 2150, 1207, 1208, 3472, 3093, 3094, 1206, 183, 2377,
	2665, 1456, 1179, 668, 668, 3448, 1000, 717, 1182, 1254,
	719, 3095, 3385, 2942, 932, 718, 2417, 2418, 2471, 2870,
	1185, 1188, 1344, 2416, 1031, 3649, 3496, 3860, 1073, 1190,
	3627, 3740, 3628, 3103, 3382, 3386, 3384, 3383, 180, 181,
	182, 3652, 3268, 2685, 1368, 3294, 1181, 1138, 3622, 2988,
	2671, 1137, 2422, 921, 3627, 1145, 3628, 2128, 1418, 1157,
	3605, 1137, 1144, 1201, 1171, 1028, 1137, 637, 1202, 1203,
	3414, 190, 2139, 2139, 3391, 3392, 2139, 3177, 1444, 3151,
	2965, 2686, 2251, 1641, 1051, 1033, 3630, 1592, 1285, 1030,
	3889, 2962, 128, 1822, 891, 3092, 183, 1031, 129, 1659,
	1658, 1151, 2140, 2172, 3114, 669, 1193, 3411, 1063, 3769,
	3630, 1137, 1063, 1063, 1063, 2033, 2034, 3629, 1063, 1063,
	1248, 2357, 3399, 1183, 669, 3833, 3680, 2337, 2360, 2152,
	3175, 3176, 892, 3126, 3378, 3764, 1159, 1158, 1028, 3672,
	3390, 3629, 2156, 2158, 2159, 998, 3104, 2741, 2866, 3674,
	2409, 669, 673, 909, 907, 130, 2532, 666, 666, 664,
	664, 1545, 1030, 1347, 669, 1349, 672, 62, 60, 2876,
	667, 667, 663, 663, 1148, 1150, 665, 665, 2288, 3771,
	3404, 1364, 639, 1430, 1431, 2359, 62, 3052, 680, 877,
	1140, 1324, 1286, 1139, 1329, 1160, 1027, 2663, 1168, 3643,
	644, 1134, 3755, 3359, 1164, 1165, 3495, 2587, 3777, 3090,
	159, 1143, 1830, 62, 3104, 946, 1196, 62, 3146, 1197,
	1133, 2774, 1170, 1255, 1430, 1431, 62, 159, 159, 159,
	2358, 2266, 3366, 1167, 1407, 3639, 1630, 193, 3301, 1631,
	2770, 2771, 1824, 2774, 159, 3065, 3303, 1199, 3180, 2707,
	2412, 159, 138, 193, 3415, 139, 159, 1159, 1158, 3746,
	159, 1666, 1669, 1670, 3569, 58, 3936, 159, 645, 159,
	3395, 1458, 1667, 894, 3099, 645, 159, 159, 621, 621,
	3951, 159, 3089, 2985, 1419, 2020, 3681, 2344, 621, 621,
	3646, 2389, 1494, 1494, 2388, 645, 1426, 2471, 2714, 3673,
	1250, 1251, 1252, 1253, 3461, 1162, 2711, 2712, 3152, 3558,
	3564, 936, 3826, 937, 3302, 1405, 671, 1522, 639, 2410,
	2411, 2710, 1479, 1533, 1533, 2820, 1478, 2821, 2822, 1195,
	3500, 131, 45, 1169, 213, 1297, 1298, 1404, 59, 1422,
	1421, 3623, 1501, 621, 1403, 3624, 3394, 2012, 3778, 2010,
	1636, 3660, 135, 136, 2848, 3694, 137, 3579, 3580, 3581,
	3585, 3583, 3584, 3582, 3849, 3623, 3155, 159, 1200, 3733,
	2720, 2723, 2724, 2725, 2721, 2722, 1132, 3040, 1365, 2380,
	3344, 1496, 1245, 2337, 2354, 3445, 2157, 992, 1492, 1492,
	2612, 3255, 1457, 1198, 1360, 1575, 681, 3806, 1466, 1551,
	1580, 1376, 3175, 3176, 3937, 2909, 2911, 1589, 1488, 1489,
	1176, 3091, 1330, 3171, 3056, 2579, 1401, 1328, 1123, 1119,
	1120, 1121, 1122, 2460, 2617, 2343, 2616, 2615, 2613, 2375,
	2345, 3112, 1618, 2142, 1409, 1413, 1413, 1413, 1414, 1415,
	3179, 2925, 2926, 2008, 1987, 2677, 1494, 2347, 1494, 1145,
	3207, 2987, 1473, 1475, 1370, 1598, 1382, 1826, 1381, 1409,
	1409, 1380, 1486, 1487, 1379, 1004, 675, 3304, 3571, 3172,
	994, 2154, 2155, 993, 2817, 3291, 1584, 940, 941, 942,
	1389, 1391, 938, 1595, 2346, 3693, 2996, 2995, 2168, 2261,
	2260, 1613, 1614, 2682, 2614, 1031, 668, 1175, 1369, 1447,
	1448, 903, 1031, 2839, 2840, 1668, 1434, 1837, 1628, 1437,
	2259, 1358, 1361, 1362, 1523, 2265, 1494, 1546, 1371, 1372,
	1373, 1374, 1375, 1838, 1377, 3480, 1565, 1566, 992, 3058,
	1383, 1477, 992, 1714, 1588, 2258, 3934, 3935, 1836, 1554,
	899, 1557, 1558, 3848, 3565, 3566, 2401, 1763, 1570, 1356,
	1357, 1574, 902, 1559, 1560, 1453, 905, 904, 900, 3560,
	1502, 3113, 1464, 3559, 1573, 935, 650, 3532, 1514, 2344,
	2347, 1142, 2374, 1398, 2910, 2202, 1400, 1520, 2201, 2348,
	1406, 1534, 1500, 1617, 2746, 1535, 1655, 1416, 1142, 3952,
	1652, 3816, 1616, 2353, 1400, 1435, 1436, 2351, 1438, 1439,
	1212, 1440, 2273, 3947, 2849, 2851, 2852, 2853, 2850, 3942,
	3213, 994, 1702, 1145, 993, 994, 2061, 3959, 993, 1825,
	2471, 3256, 3931, 3131, 1633, 2274, 2275, 2838, 881, 882,
	883, 884, 1841, 1842, 1671, 2618, 2619, 1522, 2439, 3209,
	1748, 2284, 1850, 1494, 1855, 1856, 1176, 1858, 1458, 645,
	666, 1212, 664, 1805, 645, 3896, 3869, 1494, 1753, 1754,
	1755, 946, 1649, 667, 1878, 663, 1601, 1607, 2678, 665,
	1005, 1769, 3173, 1494, 1770, 1626, 2147, 1623, 2551, 1458,
	1827, 1622, 3943, 1606, 662, 1808, 1609, 3863, 3845, 1627,
	1625, 1783, 1784, 1624, 1621, 3897, 1762, 1651, 1646, 2747,
	3307, 3797, 2348, 3772, 1903, 3760, 1505, 2343, 2337, 2342,
	1804, 2340, 2345, 1910, 1910, 2440, 1458, 1212, 1458, 1458,
	3267, 1690, 645, 645, 2747, 1977, 1850, 1981, 3897, 3870,
	1494, 1984, 1985, 3213, 1325, 1637, 1999, 2238, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1816, 621, 3713, 1494, 1699, 1700, 2059, 2283, 2578, 1857,
	3656, 3846, 2181, 3712, 2440, 3184, 2346, 3182, 3050, 1859,
	3707, 1054, 1059, 1060, 3656, 1907, 2147, 886, 3761, 3706,
	645, 1850, 1494, 3048, 2044, 2440, 645, 645, 645, 679,
	679, 2928, 1214, 1215, 1216, 1213, 2054, 2055, 2056, 2057,
	2694, 2668, 1772, 2063, 3705, 1173, 1932, 1697, 1698, 1811,
	213, 3704, 1174, 213, 213, 3684, 213, 1979, 3683, 1638,
	1745, 1746, 1777, 1749, 2568, 3714, 1214, 1215, 1216, 1213,
	2036, 1764, 2556, 2138, 2000, 2317, 2306, 1913, 2180, 2330,
	2028, 2029, 3655, 3656, 1771, 1806, 1773, 2243, 1774, 1775,
	1776, 2237, 3656, 2236, 1812, 2209, 1763, 1763, 2106, 1854,
	1880, 3420, 2005, 2014, 2007, 2129, 2031, 1763, 1763, 2046,
	2047, 2048, 3017, 1870, 2122, 2026, 2027, 3656, 1409, 1845,
	1986, 1895, 1174, 1891, 3656, 1893, 1894, 1390, 2147, 1884,
	1705, 2147, 1413, 1480, 1896, 2021, 2043, 1902, 1874, 1900,
	1905, 1906, 3368, 1879, 1413, 1878, 1901, 1875, 2072, 1494,
	2136, 2075, 2076, 3944, 2078, 3656, 1914, 1915, 1886, 3334,
	1892, 3283, 3279, 1214, 1215, 1216, 1213, 2116, 1214, 1215,
	1216, 1213, 3355, 1584, 2471, 2932, 1860, 881, 882, 883,
	884, 1865, 2749, 2581, 2580, 3192, 1854, 2572, 2324, 1031,
	1909, 1911, 1031, 1978, 2108, 668, 2197, 2130, 3317, 1176,
	1031, 2182, 1881, 1882, 1983, 1056, 1057, 1058, 1988, 2316,
	2112, 1846, 1847, 1848, 2178, 3369, 2904, 2015, 2004, 2643,
	2006, 2127, 2066, 1861, 1862, 1863, 1864, 2635, 2594, 2576,
	1028, 2564, 3335, 724, 3284, 3280, 2558, 2553, 1649, 2545,
	2052, 1028, 1603, 2543, 2541, 2101, 2539, 1262, 2041, 1916,
	1917, 1161, 2305, 1129, 1030, 2042, 2101, 2038, 3193, 1124,
	2049, 2050, 3595, 3418, 2239, 1030, 2216, 2067, 1887, 1888,
	2069, 1228, 1227, 1237, 1238, 1230, 1231, 1232, 1233, 1234,
	1235, 1236, 1229, 2215, 3765, 1897, 1898, 1229, 1912, 2440,
	2204, 1245, 1212, 2030, 2086, 1031, 2344, 2347, 2200, 901,
	1212, 1212, 2306, 2191, 2554, 1908, 2190, 2040, 2189, 2559,
	2554, 2146, 2546, 2040, 2040, 2040, 2544, 2540, 2161, 2540,
	2115, 2113, 2118, 3136, 2107, 2306, 886, 1610, 3766, 1752,
	1751, 2126, 2248, 2249, 3127, 2252, 1028, 2238, 2255, 1212,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1229, 3533, 666,
	2979, 664, 1441, 2131, 722, 3347, 1212, 645, 645, 645,
	1030, 1396, 667, 3345, 663, 1397, 2125, 1410, 665, 1752,
	1751, 1212, 645, 645, 645, 645, 1212, 3953, 3922, 1212,
	2372, 1212, 2124, 1482, 2147, 2303, 1232, 1233, 1234, 1235,
	1236, 1229, 3534, 1484, 2160, 3742, 2309, 1458, 3654, 3348,
	1611, 3619, 1696, 3562, 1485, 2210, 2211, 3346, 2213, 3561,
	2531, 2162, 3128, 3547, 1690, 2220, 2169, 3503, 1693, 1695,
	1692, 2174, 1694, 1458, 1451, 1452, 3327, 1454, 1455, 2348,
	1459, 1460, 1461, 3214, 2343, 2337, 2342, 3205, 2340, 2345,
	2366, 1789, 3199, 906, 1064, 1065, 2165, 2166, 3194, 1069,
	2332, 3107, 2873, 1396, 768, 134, 3129, 1397, 2872, 2718,
	134, 2673, 3241, 1509, 1510, 1511, 1512, 1513, 2591, 1515,
	1516, 1517, 1518, 1519, 2557, 2601, 2462, 1525, 1526, 1527,
	1528, 1782, 2111, 2110, 1481, 1411, 2109, 2373, 1386, 1385,
	1147, 2525, 1709, 2346, 2175, 2070, 1709, 645, 1910, 2163,
	2164, 1214, 1215, 1216, 1213, 2444, 2444, 1999, 2444, 3854,
	2321, 1538, 3244, 2070, 2323, 2934, 2325, 1216, 1213, 3817,
	651, 1840, 1213, 134, 3574, 3573, 2951, 621, 621, 2809,
	2232, 2234, 2235, 2240, 2807, 1145, 1214, 1215, 1216, 1213,
	2786, 1494, 645, 2784, 2326, 1220, 1221, 1222, 1223, 1224,
	1225, 1226, 1218, 2267, 3504, 3505, 645, 3950, 2336, 3553,
	1264, 2335, 1145, 2515, 639, 2656, 2285, 2657, 1285, 3927,
	1533, 3926, 1999, 1263, 3873, 2520, 3497, 2522, 3315, 1767,
	3844, 213, 1237, 1238, 1230, 1231, 1232, 1233, 1234, 1235,
	1236, 1229, 2311, 2312, 1768, 2310, 2329, 2457, 3843, 2458,
	1031, 3767, 2314, 2315, 2688, 3709, 2446, 2313, 2450, 2448,
	3697, 3687, 2319, 756, 766, 2320, 3677, 2860, 2463, 2464,
	3949, 2561, 1413, 757, 2322, 758, 762, 765, 761, 759,
	760, 3610, 2349, 2350, 3498, 2355, 3316, 2466, 2574, 2473,
	3536, 1028, 2136, 3535, 2277, 2278, 2279, 1029, 2858, 1494,
	3360, 1494, 134, 1494, 1214, 1215, 1216, 1213, 1145, 2294,
	2295, 2296, 2297, 3242, 3349, 1030, 2593, 134, 3321, 134,
	3314, 3195, 1286, 3326, 2519, 2859, 3097, 2975, 763, 2526,
	1214, 1215, 1216, 1213, 2946, 1214, 1215, 1216, 1213, 2419,
	2423, 2535, 1494, 2621, 2603, 1214, 1215, 1216, 1213, 2479,
	2945, 1473, 1475, 2452, 2527, 2843, 2857, 2842, 2628, 2841,
	764, 2193, 2833, 1494, 2827, 2378, 2570, 2571, 2381, 2382,
	2383, 2384, 2385, 2386, 2387, 2826, 3010, 2390, 2391, 2392,
	2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2856, 2402,
	2403, 2404, 2405, 2406, 2467, 2407, 2825, 2584, 2824, 1214,
	1215, 1216, 1213, 2669, 2547, 2459, 2518, 2470, 1539, 2242,
	2516, 2675, 2676, 2517, 2318, 2679, 2632, 2633, 1214, 1215,
	1216, 1213, 2524, 2845, 2089, 2088, 1538, 2087, 2192, 2083,
	2620, 2082, 2037, 1145, 1464, 1833, 3009, 1145, 1492, 1831,
	1214, 1215, 1216, 1213, 1494, 2588, 2855, 1458, 2609, 1604,
	1343, 2629, 2717, 1981, 2590, 1214, 1215, 1216, 1213, 1492,
	3082, 2745, 2585, 1214, 1215, 1216, 1213, 2751, 3946, 3753,
	3647, 3648, 3945, 2998, 1476, 2599, 2605, 2575, 2605, 1500,
	3455, 2844, 1127, 2577, 3920, 2761, 2660, 2566, 3888, 2582,
	3887, 3884, 3823, 2040, 3822, 1145, 1214, 1215, 1216, 1213,
	3688, 3636, 3804, 2783, 1214, 1215, 1216, 1213, 3476, 3749,
	1145, 1145, 1145, 1910, 3508, 1649, 1145, 3464, 2793, 2794,
	2795, 2796, 1145, 2803, 2611, 2804, 2805, 3784, 2806, 2733,
	2808, 2595, 2596, 3730, 2729, 1214, 1215, 1216, 1213, 1126,
	3721, 2803, 3701, 2730, 1214, 1215, 1216, 1213, 1031, 1214,
	1215, 1216, 1213, 2444, 1228, 1227, 1237, 1238, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1229, 3696, 2861, 2715, 3695,
	2695, 3651, 717, 1932, 2479, 719, 3638, 621, 3637, 3611,
	718, 2762, 2752, 1981, 3555, 3515, 3501, 1145, 1999, 1999,
	1999, 1999, 3483, 2045, 3481, 3478, 3475, 3474, 2742, 3453,
	1145, 1999, 3451, 3428, 2444, 2630, 2697, 3425, 2699, 1217,
	3422, 2865, 3313, 2867, 3312, 2781, 2627, 1247, 3309, 2781,
	2777, 1494, 2696, 3299, 2598, 3292, 1257, 2764, 2713, 3276,
	3274, 3202, 645, 645, 3201, 2788, 3196, 2736, 3190, 3189,
	3108, 8, 2744, 7, 3069, 2750, 3068, 3064, 2789, 2790,
	3062, 1265, 3060, 2792, 3057, 3055, 2247, 3463, 2989, 2799,
	1854, 2986, 2776, 2763, 2766, 2944, 2918, 2854, 2754, 2846,
	2836, 2779, 3408, 2757, 2834, 2785, 3271, 3780, 2830, 2900,
	2829, 3632, 2791, 2760, 1214, 1215, 1216, 1213, 213, 2828,
	2683, 2638, 2639, 213, 2681, 2674, 2670, 2644, 3013, 1214,
	1215, 1216, 1213, 1214, 1215, 1216, 1213, 2567, 2823, 2704,
	1214, 1215, 1216, 1213, 2262, 1763, 2835, 1763, 823, 822,
	2961, 2257, 2256, 2253, 2886, 1214, 1215, 1216, 1213, 3012,
	2092, 2085, 1839, 2974, 3631, 1819, 1818, 2886, 1605, 1494,
	2868, 1508, 2981, 1394, 3011, 2874, 1352, 1350, 2743, 3620,
	1293, 2871, 2887, 2888, 2889, 2890, 1214, 1215, 1216, 1213,
	1289, 2899, 2901, 134, 134, 1029, 2654, 2903, 1288, 1130,
	2902, 1214, 1215, 1216, 1213, 2185, 890, 3477, 2929, 2919,
	2916, 2653, 3462, 3340, 3339, 3338, 2935, 196, 2956, 187,
	158, 2939, 3306, 1214, 1215, 1216, 1213, 3288, 3286, 2967,
	1808, 2815, 2816, 3285, 3282, 2960, 3281, 1031, 1214, 1215,
	1216, 1213, 1565, 1566, 3275, 3273, 2831, 2832, 1031, 3257,
	3247, 2958, 3246, 3232, 2753, 3231, 3003, 3137, 3005, 1570,
	1558, 2968, 1574, 2758, 2759, 2782, 1750, 2933, 1246, 3059,
	1559, 1560, 2869, 2937, 2936, 1573, 3072, 3063, 3047, 3015,
	3008, 3066, 3067, 2978, 3000, 2983, 2652, 192, 3872, 1145,
	2954, 2651, 2999, 2952, 2957, 3085, 2993, 2959, 2927, 1214,
	1215, 1216, 1213, 2969, 2971, 3101, 2970, 2693, 2542, 2538,
	645, 2977, 2537, 1214, 1215, 1216, 1213, 2179, 1214, 1215,
	1216, 1213, 3117, 1145, 2990, 2912, 645, 2650, 1145, 1145,
	2221, 2214, 2991, 2208, 2997, 2207, 2206, 1999, 2303, 2205,
	3135, 2203, 2199, 2198, 2196, 3006, 3007, 2187, 2184, 2922,
	2923, 2183, 2091, 1802, 1214, 1215, 1216, 1213, 2649, 2366,
	3049, 3004, 1801, 1800, 3111, 1766, 1532, 1532, 1765, 1756,
	196, 3161, 1506, 3164, 1283, 3164, 3164, 1504, 3779, 3716,
	1145, 2648, 3703, 3698, 1553, 1214, 1215, 1216, 1213, 3589,
	3572, 3001, 3002, 1214, 1215, 1216, 1213, 3568, 3185, 3120,
	2729, 3053, 3181, 3054, 3124, 2647, 1494, 1494, 1214, 1215,
	1216, 1213, 3546, 3530, 1331, 3438, 1031, 2646, 1031, 3436,
	3070, 3406, 3183, 1031, 3071, 3405, 3402, 3401, 3148, 3150,
	3144, 3367, 1214, 1215, 1216, 1213, 3364, 3362, 3329, 3133,
	192, 1564, 3139, 1555, 1214, 1215, 1216, 1213, 2645, 1031,
	3110, 1569, 1387, 645, 1572, 1561, 3119, 1028, 3796, 2642,
	3085, 3122, 3123, 2641, 3130, 1393, 3134, 2862, 2787, 1458,
	3160, 3169, 1981, 1981, 2738, 1214, 1215, 1216, 1213, 2737,
	1736, 1030, 2336, 3143, 2731, 2335, 1214, 1215, 1216, 1213,
	1214, 1215, 1216, 1213, 3186, 3187, 2698, 2655, 3165, 3166,
	2552, 2461, 1492, 1492, 2408, 3170, 2304, 3159, 1227, 1237,
	1238, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1229, 1145,
	2276, 2241, 1691, 2621, 2177, 192, 1661, 1662, 1663, 1664,
	1665, 2051, 3245, 1844, 1815, 1634, 3191, 1587, 3138, 1562,
	3022, 3023, 1342, 3140, 3141, 1327, 3024, 3025, 3026, 3027,
	1323, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036,
	3037, 1322, 1503, 3544, 2640, 1321, 651, 1320, 1706, 1319,
	1318, 1317, 1710, 1711, 1712, 1713, 3210, 3211, 645, 1316,
	3200, 1747, 3198, 3204, 3203, 3197, 1315, 1314, 1313, 1757,
	3208, 1214, 1215, 1216, 1213, 3221, 1312, 3109, 134, 1311,
	1214, 1215, 1216, 1213, 1310, 1309, 1308, 1307, 1306, 3225,
	1305, 1304, 1303, 3121, 3228, 3229, 3230, 1228, 1227, 1237,
	1238, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1229, 1302,
	3234, 1301, 1300, 1299, 3240, 1296, 1295, 1455, 1294, 1292,
	1291, 1809, 1290, 1287, 1280, 1279, 1732, 1277, 2063, 3296,
	1276, 3258, 3298, 1729, 2634, 1275, 2479, 1731, 1728, 1730,
	1734, 1735, 3259, 2624, 1274, 1733, 134, 1273, 3260, 3212,
	1272, 3794, 2600, 134, 3277, 1271, 1270, 1269, 3264, 1704,
	3263, 1214, 1215, 1216, 1213, 3224, 134, 1268, 1267, 1266,
	1214, 1215, 1216, 1213, 645, 1981, 3300, 3269, 134, 1214,
	1215, 1216, 1213, 1261, 3142, 3333, 1214, 1215, 1216, 1213,
	3167, 1260, 1259, 1258, 1883, 1178, 1128, 3217, 3218, 3792,
	3790, 2444, 1999, 3352, 3403, 2308, 2290, 2605, 1166, 3902,
	3900, 3859, 3220, 2719, 2472, 2094, 1177, 3223, 3305, 1899,
	2040, 3222, 3289, 2896, 2893, 3308, 3370, 2894, 2897, 1145,
	3293, 3295, 2895, 2898, 2892, 2436, 2437, 1031, 3161, 2891,
	3440, 118, 1145, 3551, 1031, 64, 2565, 2555, 3441, 63,
	3106, 1872, 1873, 1145, 3157, 3417, 3158, 3322, 2973, 1494,
	3261, 3262, 2431, 2435, 2436, 2437, 2432, 3354, 2433, 2438,
	2376, 3413, 2434, 1867, 1868, 1869, 3235, 1809, 645, 3324,
	1981, 1970, 1809, 1809, 1145, 1547, 3400, 2550, 2589, 1739,
	1740, 1741, 1742, 1743, 1744, 1737, 1738, 3439, 2570, 2571,
	3080, 3350, 1600, 1581, 3351, 3911, 2263, 647, 2053, 3357,
	2811, 648, 3393, 213, 1172, 649, 3073, 2812, 2813, 2814,
	2765, 2739, 2328, 2299, 1876, 3429, 1145, 1843, 3432, 1752,
	1751, 3700, 2071, 3409, 3188, 2074, 2420, 3407, 2077, 3442,
	3412, 2079, 1338, 1339, 3416, 3266, 2415, 3419, 2426, 1982,
	3421, 1450, 3426, 1336, 1337, 1492, 1334, 1335, 3424, 3427,
	1449, 3430, 1332, 1333, 3433, 3479, 3371, 3423, 1205, 3227,
	3431, 2921, 3434, 2264, 3486, 2123, 1402, 1378, 1145, 3410,
	1425, 3460, 3879, 3877, 3837, 2431, 2435, 2436, 2437, 2432,
	2799, 2433, 2438, 3814, 3813, 2434, 2121, 3811, 3353, 3756,
	1145, 1494, 1494, 3717, 3603, 3456, 3117, 3356, 3457, 3602,
	3541, 3446, 3484, 3485, 3452, 3278, 3254, 3253, 3523, 3238,
	3523, 2886, 2361, 2331, 1602, 3444, 3237, 2931, 1400, 3904,
	3903, 3904, 3297, 1145, 3540, 1145, 2976, 2680, 2292, 2186,
	3517, 3518, 1346, 1163, 3543, 3903, 3545, 3570, 3233, 3330,
	3331, 3332, 1494, 1142, 3492, 3336, 3337, 3493, 3361, 3502,
	3363, 2040, 3491, 2886, 1417, 3473, 3514, 200, 3, 72,
	645, 2, 1145, 1145, 3923, 3527, 1145, 1145, 3516, 3924,
	1998, 1, 2661, 3520, 3354, 1813, 3528, 3539, 1340, 3513,
	885, 880, 1470, 3549, 3591, 3586, 2453, 1492, 1702, 2171,
	3400, 3552, 1031, 2176, 2032, 1498, 1817, 1878, 887, 3600,
	3576, 3577, 2905, 3488, 3587, 3588, 3556, 2108, 3606, 3607,
	881, 882, 883, 884, 2906, 1142, 3393, 3226, 2908, 2684,
	2143, 1494, 2875, 2413, 2280, 3100, 1388, 3511, 939, 1758,
	1615, 1053, 1156, 1612, 2188, 1155, 1153, 1707, 1702, 3596,
	770, 3633, 2195, 2097, 134, 2863, 2837, 134, 134, 3598,
	134, 3597, 3626, 3599, 3910, 2040, 3939, 3871, 3913, 1632,
	1655, 754, 1655, 3805, 2212, 3722, 3875, 3724, 3616, 2217,
	2218, 2219, 2148, 1210, 2222, 2223, 2224, 2225, 2226, 2227,
	2228, 2229, 2230, 2231, 3621, 3625, 946, 3617, 2953, 3613,
	1029, 3669, 3663, 134, 964, 811, 781, 1278, 1593, 3511,
	3511, 1029, 3020, 3511, 3511, 3537, 3538, 1145, 3018, 3618,
	1055, 3650, 780, 3319, 2709, 134, 3604, 1492, 3686, 2924,
	3692, 3671, 3657, 1052, 965, 2080, 3719, 3614, 1548, 3664,
	1552, 2327, 3460, 3679, 3775, 3550, 3666, 3665, 3153, 2773,
	1576, 3770, 3365, 3678, 3469, 3682, 3467, 3468, 687, 3465,
	1145, 3466, 2011, 619, 1013, 1494, 3661, 3590, 2093, 688,
	2307, 3828, 3702, 919, 3542, 2289, 920, 912, 3548, 2727,
	2726, 1672, 1219, 3699, 1689, 1031, 3038, 3039, 3554, 1256,
	726, 2173, 2706, 3388, 2917, 71, 70, 69, 3708, 68,
	221, 772, 220, 3634, 3506, 3801, 1246, 3915, 752, 751,
	750, 3745, 749, 748, 747, 3735, 2430, 2428, 2427, 1994,
	1993, 2060, 3592, 3115, 2802, 3718, 2797, 1145, 1228, 1227,
	1237, 1238, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1229,
	1921, 1919, 3757, 1462, 2356, 2363, 1918, 3856, 3785, 3786,
	3743, 3567, 3593, 3710, 1655, 2847, 3594, 3575, 3459, 1866,
	3752, 1492, 2352, 3748, 3751, 1938, 2818, 1935, 1934, 2810,
	3774, 3563, 3557, 3759, 1145, 1966, 3667, 3522, 3372, 3373,
	3379, 2298, 1494, 1078, 1074, 3799, 1076, 3802, 3789, 3791,
	3793, 3795, 3773, 1077, 1075, 2610, 3206, 3511, 2333, 1809,
	3075, 1809, 3803, 2272, 2271, 3782, 2269, 3768, 2268, 1363,
	3744, 3824, 3788, 3487, 2477, 2475, 1125, 3219, 3215, 2105,
	1809, 1809, 2119, 2972, 1995, 3810, 1991, 2877, 3808, 1494,
	2421, 3641, 3669, 1871, 913, 2287, 41, 115, 105, 175,
	56, 3821, 174, 55, 113, 172, 54, 100, 3847, 99,
	112, 170, 53, 1532, 3855, 3838, 3836, 205, 204, 3840,
	207, 206, 203, 2528, 3511, 2529, 3841, 3842, 202, 1536,
	3798, 201, 196, 61, 187, 158, 3815, 3526, 1492, 875,
	1967, 3864, 44, 3865, 43, 3866, 176, 3867, 42, 106,
	188, 57, 40, 3868, 39, 38, 3878, 179, 3880, 3881,
	34, 189, 3876, 2560, 3874, 2563, 13, 12, 1145, 35,
	3735, 3511, 3883, 22, 21, 1970, 1619, 3839, 20, 26,
	132, 32, 31, 127, 126, 1492, 30, 3692, 3892, 125,
	124, 123, 122, 3711, 121, 119, 3894, 3895, 3893, 3901,
	3898, 3909, 192, 3917, 3899, 120, 3916, 29, 3905, 3906,
	3907, 3908, 19, 48, 47, 46, 9, 3691, 116, 111,
	3928, 109, 1145, 28, 3921, 2597, 110, 1944, 107, 2602,
	103, 101, 2608, 3929, 3774, 3930, 3932, 83, 82, 2622,
	2623, 81, 3938, 3941, 96, 95, 94, 2625, 2626, 1228,
	1227, 1237, 1238, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1229, 93, 3758, 2631, 92, 91, 3948, 3762, 3763, 89,
	90, 2447, 963, 80, 3917, 3955, 79, 3916, 3954, 140,
	141, 78, 142, 143, 3941, 3956, 77, 76, 98, 104,
	3960, 1661, 1809, 102, 87, 1960, 97, 88, 3783, 86,
	85, 84, 75, 74, 73, 3890, 156, 1778, 1779, 1780,
	1781, 155, 154, 1785, 1786, 1787, 1788, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 153, 152, 150,
	151, 149, 148, 952, 147, 146, 1998, 145, 144, 49,
	50, 51, 52, 166, 165, 134, 167, 169, 171, 168,
	173, 157, 185, 194, 186, 117, 163, 161, 164, 1655,
	162, 160, 66, 11, 114, 18, 1240, 25, 1244, 4,
	2755, 2756, 0, 184, 178, 177, 1948, 0, 0, 0,
	67, 0, 0, 0, 1241, 1243, 1239, 1954, 1242, 1228,
	1227, 1237, 1238, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
	1229, 3016, 0, 949, 950, 0, 0, 1942, 1976, 0,
	0, 1943, 1945, 1947, 992, 1949, 1950, 1951, 1955, 1956,
	1957, 1959, 1962, 1963, 1964, 0, 0, 3885, 3886, 0,
	0, 0, 1952, 1961, 1953, 0, 0, 0, 0, 0,
	0, 180, 181, 182, 0, 0, 0, 0, 0, 0,
	0, 2170, 0, 0, 0, 1228, 1227, 1237, 1238, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1229, 0, 1968, 0,
	0, 0, 0, 0, 190, 1228, 1227, 1237, 1238, 1230,
	1231, 1232, 1233, 1234, 1235, 1236, 1229, 0, 0, 0,
	0, 0, 0, 0, 0, 128, 0, 994, 0, 183,
	993, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1965, 1228, 1227, 1237, 1238, 1230, 1231,
	1232, 1233, 1234, 1235, 1236, 1229, 0, 0, 0, 0,
	1941, 0, 0, 0, 0, 0, 0, 1940, 978, 0,
	0, 0, 0, 0, 0, 0, 953, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 130, 0,
	0, 1958, 0, 0, 0, 0, 0, 0, 0, 134,
	1946, 60, 0, 955, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 2938, 0, 2940, 0, 0,
	0, 0, 0, 0, 0, 1967, 0, 0, 0, 0,
	1928, 0, 0, 0, 0, 0, 1809, 0, 0, 0,
	0, 1809, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 2121, 0, 0, 0, 0, 0, 0, 0,
	1970, 1937, 0, 0, 0, 0, 0, 0, 977, 975,
	1971, 1972, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 193, 2992, 139, 0,
	974, 0, 0, 159, 0, 0, 1936, 0, 58, 0,
	0, 0, 948, 0, 0, 0, 0, 0, 3529, 0,
	0, 3014, 1944, 954, 987, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1998, 1998, 1998, 1998, 0, 983, 699, 698,
	705, 695, 0, 0, 0, 1998, 0, 0, 0, 0,
	702, 703, 0, 704, 708, 0, 0, 689, 0, 0,
	0, 0, 0, 0, 131, 45, 0, 713, 0, 0,
	0, 59, 0, 984, 988, 5, 0, 0, 0, 0,
	1960, 0, 0, 0, 0, 135, 136, 0, 0, 137,
	0, 0, 0, 971, 0, 969, 973, 991, 0, 0,
	0, 970, 967, 966, 0, 972, 957, 958, 956, 959,
	960, 961, 962, 0, 989, 0, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 986, 0,
	0, 0, 134, 0, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1736, 0, 1927, 1929, 1926, 0, 1923, 0, 134, 0,
	0, 1948, 0, 0, 981, 0, 0, 0, 0, 134,
	980, 3168, 1954, 0, 0, 0, 0, 0, 0, 0,
	1939, 0, 1922, 0, 0, 976, 0, 0, 0, 0,
	0, 0, 1942, 1976, 0, 0, 1943, 1945, 1947, 0,
	1949, 1950, 1951, 1955, 1956, 1957, 1959, 1962, 1963, 1964,
	0, 0, 0, 0, 0, 0, 0, 1952, 1961, 1953,
	1967, 0, 0, 0, 0, 1928, 0, 0, 0, 1931,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1968, 0, 1970, 1937, 690, 692, 691,
	0, 0, 0, 979, 0, 1971, 1972, 697, 0, 951,
	947, 0, 0, 0, 0, 0, 0, 0, 0, 701,
	1924, 1925, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 1936, 0, 694, 0, 0, 0, 0, 1965, 0,
	0, 0, 0, 0, 0, 0, 0, 1944, 0, 0,
	0, 0, 0, 0, 0, 1941, 1732, 0, 0, 0,
	0, 0, 1940, 1729, 0, 0, 0, 1731, 1728, 1730,
	1734, 1735, 0, 0, 0, 1733, 0, 1029, 0, 134,
	0, 0, 0, 0, 134, 0, 1958, 0, 0, 0,
	0, 1998, 0, 0, 0, 1946, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1974, 1973,
	134, 0, 0, 0, 0, 1960, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3270, 0, 0, 0, 0, 0,
	0, 3272, 0, 0, 0, 696, 700, 706, 0, 707,
	709, 0, 0, 710, 711, 712, 0, 0, 714, 715,
	0, 1933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1927, 2768, 1926,
	0, 2767, 0, 0, 0, 0, 1948, 0, 0, 0,
	0, 0, 0, 1969, 0, 0, 1975, 1954, 1717, 1718,
	1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1739,
	1740, 1741, 1742, 1743, 1744, 1737, 1738, 1942, 1976, 0,
	0, 1943, 1945, 1947, 0, 1949, 1950, 1951, 1955, 1956,
	1957, 1959, 1962, 1963, 1964, 0, 0, 0, 0, 0,
	0, 0, 1952, 1961, 1953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1931, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1968, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 693, 1924, 1925, 0, 0, 0,
	0, 0, 0, 0, 1809, 0, 0, 0, 0, 0,
	0, 0, 0, 1965, 0, 0, 0, 0, 1809, 0,
	0, 3435, 0, 0, 3437, 0, 0, 0, 0, 0,
	1941, 0, 0, 0, 0, 0, 0, 1940, 0, 0,
	0, 3443, 1097, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1958, 0, 0, 0, 0, 0, 0, 0, 0,
	1946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1974, 1973, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 0, 1105, 1109, 1111, 1113, 1115, 1116, 1118,
	1967, 1123, 1119, 1120, 1121, 1122, 0, 1100, 1101, 1102,
	1103, 1080, 1081, 1106, 1097, 1083, 1933, 1085, 1086, 1087,
	1088, 1084, 1089, 1090, 1091, 1092, 1093, 1096, 1098, 1094,
	1095, 1104, 0, 0, 0, 1970, 1998, 0, 0, 1108,
	1110, 1112, 1114, 1117, 1082, 0, 0, 0, 1072, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1969, 0,
	0, 1975, 0, 0, 1105, 1109, 1111, 1113, 1115, 1116,
	1118, 0, 1123, 1119, 1120, 1121, 1122, 1099, 1100, 1101,
	1102, 1103, 1080, 1081, 1106, 0, 1083, 1944, 1085, 1086,
	1087, 1088, 1084, 1089, 1090, 1091, 1092, 1093, 1096, 1098,
	1094, 1095, 1104, 0, 0, 0, 0, 0, 0, 0,
	1108, 1110, 1112, 1114, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 1099, 0,
	0, 3662, 0, 0, 0, 1960, 1105, 1109, 1111, 1113,
	1115, 1116, 1118, 0, 1123, 1119, 1120, 1121, 1122, 0,
	1100, 1101, 1102, 1103, 1080, 1081, 1106, 0, 1083, 0,
	1085, 1086, 1087, 1088, 1084, 1089, 1090, 1091, 1092, 1093,
	1096, 1098, 1094, 1095, 1104, 0, 3658, 0, 0, 0,
	0, 0, 1108, 1110, 1112, 1114, 1117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2606, 2607,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1948, 0, 0, 0,
	1099, 0, 0, 134, 0, 0, 0, 1954, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1942, 1976, 0,
	0, 1943, 1945, 1947, 0, 1949, 1950, 1951, 1955, 1956,
	1957, 1959, 1962, 1963, 1964, 0, 0, 0, 0, 0,
	0, 0, 1952, 1961, 1953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1265, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1965, 0, 0, 0, 0, 0, 0,
	0, 0, 3781, 0, 0, 0, 0, 0, 0, 0,
	1941, 0, 0, 0, 0, 0, 0, 1940, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1958, 0, 0, 0, 0, 134, 0, 0, 0,
	1946, 0, 0, 1107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3852, 0, 0, 0, 0, 0, 0,
	0, 788, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 779, 546,
	497, 415, 370, 564, 563, 1107, 0, 846, 854, 0,
	0, 0, 0, 3852, 0, 0, 0, 0, 3529, 0,
	733, 0, 0, 769, 823, 822, 756, 766, 0, 0,
	299, 219, 492, 612, 494, 493, 757, 0, 758, 762,
	765, 761, 759, 760, 0, 838, 0, 0, 0, 0,
	0, 0, 725, 737, 0, 742, 0, 0, 0, 0,
	0, 3852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 734,
	735, 0, 0, 0, 0, 789, 0, 736, 0, 0,
	784, 763, 767, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 3958, 403, 324,
	338, 321, 383, 764, 787, 791, 320, 860, 785, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 861, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 782, 0, 609, 0,
	448, 0, 0, 844, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 786, 0, 406, 388, 857, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 1760, 1759, 1761, 460, 354, 355, 0, 333,
	281, 282, 628, 842, 384, 574, 607, 608, 499, 0,
	856, 837, 839, 840, 843, 847, 848, 849, 850, 851,
	853, 855, 859, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 858, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 790, 549, 550, 374, 375, 376,
	377, 845, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	867, 841, 866, 868, 869, 865, 870, 871, 852, 746,
	0, 797, 863, 862, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 830, 804,
	805, 806, 743, 807, 801, 802, 744, 803, 831, 795,
	827, 828, 771, 798, 808, 826, 809, 829, 832, 833,
	872, 873, 815, 799, 247, 874, 812, 834, 825, 824,
	810, 796, 835, 836, 778, 773, 813, 814, 800, 818,
	819, 820, 745, 792, 793, 794, 816, 817, 774, 775,
	776, 777, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 821, 617,
	419, 0, 618, 788, 629, 495, 496, 630, 606, 0,
	738, 0, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 741, 0, 0, 0, 326,
	1810, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	779, 546, 497, 415, 370, 564, 563, 0, 0, 846,
	854, 0, 0, 0, 0, 0, 0, 0, 0, 2023,
	0, 0, 733, 0, 0, 769, 823, 822, 756, 766,
	0, 0, 299, 219, 492, 612, 494, 493, 757, 0,
	758, 762, 765, 761, 759, 760, 0, 838, 0, 0,
	0, 0, 0, 0, 725, 737, 0, 742, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 734, 735, 0, 0, 0, 0, 789, 0, 736,
	0, 0, 2024, 763, 767, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 764, 787, 791, 320, 860,
	785, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 861, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 782, 0,
	609, 0, 448, 0, 0, 844, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 786, 0, 406, 388,
	857, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 842, 384, 574, 607, 608,
	499, 0, 856, 837, 839, 840, 843, 847, 848, 849,
	850, 851, 853, 855, 859, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 858, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 790, 549, 550, 374,
	375, 376, 377, 845, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 867, 841, 866, 868, 869, 865, 870, 871,
	852, 746, 0, 797, 863, 862, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	830, 804, 805, 806, 743, 807, 801, 802, 744, 803,
	831, 795, 827, 828, 771, 798, 808, 826, 809, 829,
	832, 833, 872, 873, 815, 799, 247, 874, 812, 834,
	825, 824, 810, 796, 835, 836, 778, 773, 813, 814,
	800, 818, 819, 820, 745, 792, 793, 794, 816, 817,
	774, 775, 776, 777, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	821, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 0, 738, 196, 788, 0, 0, 0, 0, 0,
	0, 0, 0, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 1249, 546, 497, 415, 370, 564, 563, 0, 0,
	846, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 0, 769, 823, 822, 756,
	766, 0, 0, 299, 219, 492, 612, 494, 493, 757,
	0, 758, 762, 765, 761, 759, 760, 0, 838, 0,
	0, 0, 0, 0, 0, 725, 737, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 735, 0, 0, 0, 0, 789, 0,
	736, 0, 0, 784, 763, 767, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 764, 787, 791, 320,
	860, 785, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 861, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 782,
	0, 609, 0, 448, 0, 0, 844, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 786, 0, 406,
	388, 857, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 842, 384, 574, 607,
	608, 499, 0, 856, 837, 839, 840, 843, 847, 848,
	849, 850, 851, 853, 855, 859, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 858, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 790, 549, 550,
	374, 375, 376, 377, 845, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 867, 841, 866, 868, 869, 865, 870,
	871, 852, 746, 0, 797, 863, 862, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 159, 398, 331, 570, 571, 0,
	0, 830, 804, 805, 806, 743, 807, 801, 802, 744,
	803, 831, 795, 827, 828, 771, 798, 808, 826, 809,
	829, 832, 833, 872, 873, 815, 799, 247, 874, 812,
	834, 825, 824, 810, 796, 835, 836, 778, 773, 813,
	814, 800, 818, 819, 820, 745, 792, 793, 794, 816,
	817, 774, 775, 776, 777, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 821, 617, 419, 0, 618, 788, 629, 495, 496,
	630, 606, 0, 738, 0, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 326, 3957, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 779, 546, 497, 415, 370, 564, 563,
	0, 0, 846, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 733, 0, 0, 769, 823,
	822, 756, 766, 0, 0, 299, 219, 492, 612, 494,
	493, 757, 0, 758, 762, 765, 761, 759, 760, 0,
	838, 0, 0, 0, 0, 0, 0, 725, 737, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 734, 735, 0, 0, 0, 0,
	789, 0, 736, 0, 0, 784, 763, 767, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 764, 787,
	791, 320, 860, 785, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	861, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 782, 0, 609, 0, 448, 0, 0, 844, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 786,
	0, 406, 388, 857, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 842, 384,
	574, 607, 608, 499, 0, 856, 837, 839, 840, 843,
	847, 848, 849, 850, 851, 853, 855, 859, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 858,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 790,
	549, 550, 374, 375, 376, 377, 845, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 867, 841, 866, 868, 869,
	865, 870, 871, 852, 746, 0, 797, 863, 862, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 830, 804, 805, 806, 743, 807, 801,
	802, 744, 803, 831, 795, 827, 828, 771, 798, 808,
	826, 809, 829, 832, 833, 872, 873, 815, 799, 247,
	874, 812, 834, 825, 824, 810, 796, 835, 836, 778,
	773, 813, 814, 800, 818, 819, 820, 745, 792, 793,
	794, 816, 817, 774, 775, 776, 777, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 821, 617, 419, 0, 618, 788, 629,
	495, 496, 630, 606, 0, 738, 0, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 779, 546, 497, 415, 370,
	564, 563, 0, 0, 846, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 0, 0,
	769, 823, 822, 756, 766, 0, 0, 299, 219, 492,
	612, 494, 493, 757, 0, 758, 762, 765, 761, 759,
	760, 0, 838, 0, 0, 0, 0, 0, 0, 725,
	737, 0, 742, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 735, 0, 0,
	0, 0, 789, 0, 736, 0, 0, 784, 763, 767,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	764, 787, 791, 320, 860, 785, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 861, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 782, 0, 609, 0, 448, 0, 0,
	844, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 786, 0, 406, 388, 857, 3853, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	842, 384, 574, 607, 608, 499, 0, 856, 837, 839,
	840, 843, 847, 848, 849, 850, 851, 853, 855, 859,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 858, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 790, 549, 550, 374, 375, 376, 377, 845, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 867, 841, 866,
	868, 869, 865, 870, 871, 852, 746, 0, 797, 863,
	862, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 830, 804, 805, 806, 743,
	807, 801, 802, 744, 803, 831, 795, 827, 828, 771,
	798, 808, 826, 809, 829, 832, 833, 872, 873, 815,
	799, 247, 874, 812, 834, 825, 824, 810, 796, 835,
	836, 778, 773, 813, 814, 800, 818, 819, 820, 745,
	792, 793, 794, 816, 817, 774, 775, 776, 777, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 821, 617, 419, 0, 618,
	788, 629, 495, 496, 630, 606, 0, 738, 0, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 326, 1810, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 779, 546, 497,
	415, 370, 564, 563, 0, 0, 846, 854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 769, 823, 822, 756, 766, 0, 0, 299,
	219, 492, 612, 494, 493, 757, 0, 758, 762, 765,
	761, 759, 760, 0, 838, 0, 0, 0, 0, 0,
	0, 725, 737, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 735,
	0, 0, 0, 0, 789, 0, 736, 0, 0, 784,
	763, 767, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 764, 787, 791, 320, 860, 785, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 861, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 782, 0, 609, 0, 448,
	0, 0, 844, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 786, 0, 406, 388, 857, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 842, 384, 574, 607, 608, 499, 0, 856,
	837, 839, 840, 843, 847, 848, 849, 850, 851, 853,
	855, 859, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 858, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 790, 549, 550, 374, 375, 376, 377,
	845, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 867,
	841, 866, 868, 869, 865, 870, 871, 852, 746, 0,
	797, 863, 862, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 830, 804, 805,
	806, 743, 807, 801, 802, 744, 803, 831, 795, 827,
	828, 771, 798, 808, 826, 809, 829, 832, 833, 872,
	873, 815, 799, 247, 874, 812, 834, 825, 824, 810,
	796, 835, 836, 778, 773, 813, 814, 800, 818, 819,
	820, 745, 792, 793, 794, 816, 817, 774, 775, 776,
	777, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 821, 617, 419,
	0, 618, 788, 629, 495, 496, 630, 606, 0, 738,
	0, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 779,
	546, 497, 415, 370, 564, 563, 0, 0, 846, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 769, 823, 822, 756, 766, 0,
	0, 299, 219, 492, 612, 494, 493, 757, 0, 758,
	762, 765, 761, 759, 760, 0, 838, 0, 0, 0,
	0, 0, 0, 725, 737, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	734, 735, 1531, 0, 0, 0, 789, 0, 736, 0,
	0, 784, 763, 767, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 764, 787, 791, 320, 860, 785,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 861, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 782, 0, 609,
	0, 448, 0, 0, 844, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 786, 0, 406, 388, 857,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 842, 384, 574, 607, 608, 499,
	0, 856, 837, 839, 840, 843, 847, 848, 849, 850,
	851, 853, 855, 859, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 858, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 790, 549, 550, 374, 375,
	376, 377, 845, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 867, 841, 866, 868, 869, 865, 870, 871, 852,
	746, 0, 797, 863, 862, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 830,
	804, 805, 806, 743, 807, 801, 802, 744, 803, 831,
	795, 827, 828, 771, 798, 808, 826, 809, 829, 832,
	833, 872, 873, 815, 799, 247, 874, 812, 834, 825,
	824, 810, 796, 835, 836, 778, 773, 813, 814, 800,
	818, 819, 820, 745, 792, 793, 794, 816, 817, 774,
	775, 776, 777, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 821,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	788, 738, 0, 2194, 0, 0, 0, 0, 0, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 779, 546, 497,
	415, 370, 564, 563, 0, 0, 846, 854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 769, 823, 822, 756, 766, 0, 0, 299,
	219, 492, 612, 494, 493, 757, 0, 758, 762, 765,
	761, 759, 760, 0, 838, 0, 0, 0, 0, 0,
	0, 725, 737, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 735,
	0, 0, 0, 0, 789, 0, 736, 0, 0, 784,
	763, 767, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 764, 787, 791, 320, 860, 785, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 861, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 782, 0, 609, 0, 448,
	0, 0, 844, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 786, 0, 406, 388, 857, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 842, 384, 574, 607, 608, 499, 0, 856,
	837, 839, 840, 843, 847, 848, 849, 850, 851, 853,
	855, 859, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 858, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 790, 549, 550, 374, 375, 376, 377,
	845, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 867,
	841, 866, 868, 869, 865, 870, 871, 852, 746, 0,
	797, 863, 862, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 830, 804, 805,
	806, 743, 807, 801, 802, 744, 803, 831, 795, 827,
	828, 771, 798, 808, 826, 809, 829, 832, 833, 872,
	873, 815, 799, 247, 874, 812, 834, 825, 824, 810,
	796, 835, 836, 778, 773, 813, 814, 800, 818, 819,
	820, 745, 792, 793, 794, 816, 817, 774, 775, 776,
	777, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 821, 617, 419,
	0, 618, 788, 629, 495, 496, 630, 606, 0, 738,
	0, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 779,
	546, 497, 415, 370, 564, 563, 0, 0, 846, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 769, 823, 822, 756, 766, 0,
	0, 299, 219, 492, 612, 494, 493, 757, 0, 758,
	762, 765, 761, 759, 760, 0, 838, 0, 0, 0,
	0, 0, 0, 725, 737, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	734, 735, 1803, 0, 0, 0, 789, 0, 736, 0,
	0, 784, 763, 767, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 764, 787, 791, 320, 860, 785,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 861, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 782, 0, 609,
	0, 448, 0, 0, 844, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 786, 0, 406, 388, 857,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 842, 384, 574, 607, 608, 499,
	0, 856, 837, 839, 840, 843, 847, 848, 849, 850,
	851, 853, 855, 859, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 858, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 790, 549, 550, 374, 375,
	376, 377, 845, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 867, 841, 866, 868, 869, 865, 870, 871, 852,
	746, 0, 797, 863, 862, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 830,
	804, 805, 806, 743, 807, 801, 802, 744, 803, 831,
	795, 827, 828, 771, 798, 808, 826, 809, 829, 832,
	833, 872, 873, 815, 799, 247, 874, 812, 834, 825,
	824, 810, 796, 835, 836, 778, 773, 813, 814, 800,
	818, 819, 820, 745, 792, 793, 794, 816, 817, 774,
	775, 776, 777, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 821,
	617, 419, 0, 618, 788, 629, 495, 496, 630, 606,
	0, 738, 0, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 779, 546, 497, 415, 370, 564, 563, 0, 0,
	846, 854, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 0, 769, 823, 822, 756,
	766, 0, 0, 299, 219, 492, 612, 494, 493, 757,
	0, 758, 762, 765, 761, 759, 760, 0, 838, 0,
	0, 0, 0, 0, 0, 725, 737, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 735, 0, 0, 0, 0, 789, 0,
	736, 0, 0, 784, 763, 767, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 764, 787, 791, 320,
	860, 785, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 861, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 782,
	0, 609, 0, 448, 0, 0, 844, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 786, 0, 406,
	388, 857, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 842, 384, 574, 607,
	608, 499, 0, 856, 837, 839, 840, 843, 847, 848,
	849, 850, 851, 853, 855, 859, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 858, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 790, 549, 550,
	374, 375, 376, 377, 845, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 867, 841, 866, 868, 869, 865, 870,
	871, 852, 746, 0, 797, 863, 862, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 830, 804, 805, 806, 743, 807, 801, 802, 744,
	803, 831, 795, 827, 828, 771, 798, 808, 826, 809,
	829, 832, 833, 872, 873, 815, 799, 247, 874, 812,
	834, 825, 824, 810, 796, 835, 836, 778, 773, 813,
	814, 800, 818, 819, 820, 745, 792, 793, 794, 816,
	817, 774, 775, 776, 777, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 821, 617, 419, 0, 618, 788, 629, 495, 496,
	630, 606, 0, 738, 0, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 779, 546, 497, 415, 370, 564, 563,
	0, 0, 846, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 733, 0, 0, 769, 823,
	822, 756, 766, 0, 0, 299, 219, 492, 612, 494,
	493, 2658, 0, 2659, 762, 765, 761, 759, 760, 0,
	838, 0, 0, 0, 0, 0, 0, 725, 737, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 734, 735, 0, 0, 0, 0,
	789, 0, 736, 0, 0, 784, 763, 767, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 764, 787,
	791, 320, 860, 785, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	861, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 782, 0, 609, 0, 448, 0, 0, 844, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 786,
	0, 406, 388, 857, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 842, 384,
	574, 607, 608, 499, 0, 856, 837, 839, 840, 843,
	847, 848, 849, 850, 851, 853, 855, 859, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 858,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 790,
	549, 550, 374, 375, 376, 377, 845, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 867, 841, 866, 868, 869,
	865, 870, 871, 852, 746, 0, 797, 863, 862, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 830, 804, 805, 806, 743, 807, 801,
	802, 744, 803, 831, 795, 827, 828, 771, 798, 808,
	826, 809, 829, 832, 833, 872, 873, 815, 799, 247,
	874, 812, 834, 825, 824, 810, 796, 835, 836, 778,
	773, 813, 814, 800, 818, 819, 820, 745, 792, 793,
	794, 816, 817, 774, 775, 776, 777, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 821, 617, 419, 0, 618, 788, 629,
	495, 496, 630, 606, 0, 738, 0, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 1673, 0, 0, 0,
	741, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 779, 546, 497, 415, 370,
	564, 563, 0, 0, 846, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 733, 0, 0,
	769, 823, 822, 756, 766, 0, 0, 299, 219, 492,
	612, 494, 493, 757, 0, 758, 762, 765, 761, 759,
	760, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 742, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 734, 735, 0, 0,
	0, 0, 789, 0, 736, 0, 0, 784, 763, 767,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	764, 787, 791, 320, 860, 785, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 861, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 782, 0, 609, 0, 448, 0, 0,
	844, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 786, 0, 406, 388, 857, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 1674, 1675, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	842, 384, 574, 607, 608, 499, 0, 856, 837, 839,
	840, 843, 847, 848, 849, 850, 851, 853, 855, 859,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 858, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 790, 549, 550, 374, 375, 376, 377, 845, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 867, 841, 866,
	868, 869, 865, 870, 871, 852, 746, 0, 797, 863,
	862, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 830, 804, 805, 806, 743,
	807, 801, 802, 744, 803, 831, 795, 827, 828, 771,
	798, 808, 826, 809, 829, 832, 833, 872, 873, 815,
	799, 247, 874, 812, 834, 825, 824, 810, 796, 835,
	836, 778, 773, 813, 814, 800, 818, 819, 820, 745,
	792, 793, 794, 816, 817, 774, 775, 776, 777, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 821, 617, 419, 0, 618,
	788, 629, 495, 496, 630, 606, 0, 738, 0, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 741, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 779, 546, 497,
	415, 370, 564, 563, 0, 0, 846, 854, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 733,
	0, 0, 769, 823, 822, 756, 766, 0, 0, 299,
	219, 492, 612, 494, 493, 757, 0, 758, 762, 765,
	761, 759, 760, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 737, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 735,
	0, 0, 0, 0, 789, 0, 736, 0, 0, 784,
	763, 767, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 764, 787, 791, 320, 860, 785, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 861, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 782, 0, 609, 0, 448,
	0, 0, 844, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 786, 0, 406, 388, 857, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 842, 384, 574, 607, 608, 499, 0, 856,
	837, 839, 840, 843, 847, 848, 849, 850, 851, 853,
	855, 859, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 858, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 790, 549, 550, 374, 375, 376, 377,
	845, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 867,
	841, 866, 868, 869, 865, 870, 871, 852, 746, 0,
	797, 863, 862, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 830, 804, 805,
	806, 743, 807, 801, 802, 744, 803, 831, 795, 827,
	828, 771, 798, 808, 826, 809, 829, 832, 833, 872,
	873, 815, 799, 247, 874, 812, 834, 825, 824, 810,
	796, 835, 836, 778, 773, 813, 814, 800, 818, 819,
	820, 745, 792, 793, 794, 816, 817, 774, 775, 776,
	777, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 821, 617, 419,
	0, 618, 788, 629, 495, 496, 630, 606, 0, 738,
	0, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 741, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 779,
	546, 497, 415, 370, 564, 563, 0, 0, 846, 854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 769, 823, 822, 756, 766, 0,
	0, 299, 219, 492, 612, 494, 493, 757, 0, 758,
	762, 765, 761, 759, 760, 0, 838, 0, 0, 0,
	0, 0, 0, 725, 737, 0, 742, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	734, 735, 0, 0, 0, 0, 789, 0, 736, 0,
	0, 784, 763, 767, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 764, 787, 791, 320, 860, 785,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 861, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 782, 0, 609,
	0, 448, 0, 0, 844, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 786, 0, 406, 388, 857,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 842, 384, 574, 607, 608, 499,
	0, 856, 837, 839, 840, 843, 847, 848, 849, 850,
	851, 853, 855, 859, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 858, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 790, 549, 550, 374, 375,
	376, 377, 845, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 867, 841, 866, 868, 869, 865, 870, 871, 852,
	746, 0, 797, 863, 862, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 830,
	804, 805, 806, 743, 807, 801, 802, 744, 803, 831,
	795, 827, 828, 771, 798, 808, 826, 809, 829, 832,
	833, 872, 873, 815, 799, 247, 874, 812, 834, 825,
	824, 810, 796, 835, 836, 778, 773, 813, 814, 800,
	818, 819, 820, 745, 792, 793, 794, 816, 817, 774,
	775, 776, 777, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 821,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	0, 738, 196, 61, 187, 158, 0, 0, 0, 0,
	0, 0, 386, 0, 510, 543, 532, 616, 498, 0,
	188, 0, 0, 0, 0, 0, 0, 179, 0, 326,
	0, 189, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	132, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 157, 185, 194, 186, 117, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 211, 0, 0, 0, 420,
	0, 0, 353, 184, 178, 177, 464, 0, 406, 388,
	223, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 584, 585, 586, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 443, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 214, 556, 559, 489, 224, 0, 553, 568, 526,
	567, 225, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 130, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 222, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 229, 294, 431, 230, 0,
	283, 505, 357, 159, 398, 331, 570, 571, 58, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 226, 45, 212, 215, 217, 216,
	0, 59, 554, 566, 600, 5, 610, 611, 613, 615,
	614, 617, 419, 196, 618, 135, 227, 495, 496, 228,
	606, 0, 0, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 132, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 192, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 2344,
	2347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 0, 435, 463, 320,
	454, 0, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 479, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 2348, 448, 0, 0, 0, 2343, 0, 2342,
	420, 2340, 2345, 353, 0, 0, 0, 464, 0, 406,
	388, 632, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 2346, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 159, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 618, 0, 629, 495, 496,
	630, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1284, 0, 0, 218, 0, 0, 756, 766,
	0, 0, 299, 219, 492, 612, 494, 493, 757, 0,
	758, 762, 765, 761, 759, 760, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 763, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 764, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 196, 61, 187, 158, 0, 0, 0, 0, 0,
	0, 386, 655, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 661, 0, 0, 0, 0,
	0, 660, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 659, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 656, 658, 304, 471, 399, 669, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 159, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 1097, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	2501, 2504, 2505, 2506, 2507, 2508, 2509, 0, 2514, 2510,
	2511, 2512, 2513, 0, 2496, 2497, 2498, 2499, 1080, 2480,
	2502, 0, 2481, 382, 2482, 2483, 2484, 2485, 1084, 2486,
	2487, 2488, 2489, 2490, 2493, 2494, 2491, 2492, 2500, 394,
	360, 395, 343, 372, 371, 373, 1108, 1110, 1112, 1114,
	1117, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 2495, 0, 406, 388, 632, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 628, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 2503,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 618, 0, 629, 495, 496, 630, 606, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 0, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 2344, 2347, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 2348, 448,
	0, 0, 0, 2343, 0, 2342, 420, 2340, 2345, 353,
	0, 0, 0, 464, 0, 406, 388, 632, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 2346, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 618, 0, 629, 495, 496, 630, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 2365, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 2364, 448, 0,
	0, 0, 2370, 2367, 2369, 420, 0, 2368, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 2362, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 2365, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 2364, 448, 0, 0,
	0, 2370, 2367, 2369, 420, 0, 2368, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 2064, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 2065, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 1214, 1215, 1216, 1213, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 196, 618, 0,
	629, 495, 496, 630, 606, 0, 0, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 132, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 192, 2114, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 159, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 196, 618,
	0, 629, 495, 496, 630, 606, 0, 0, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 132, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 192, 2100,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 159,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 1012, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 1019, 1020, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 1006, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 994, 446, 293, 993, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 1010, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 1011,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 1014, 549, 550, 374, 375, 376, 377, 337, 575,
	1009, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 1021, 1007, 1017, 1008, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 1018, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 196, 618,
	0, 629, 495, 496, 630, 606, 0, 0, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 132, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1996, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 159,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 1019, 1020, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 994, 446, 293, 993, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 1021, 2016, 1017, 2017, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 1018, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 2879, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 2882, 0, 0,
	2881, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 618, 0,
	629, 495, 496, 630, 606, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 1497, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 1495, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 632, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 337, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 0, 618, 0, 629,
	495, 496, 630, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 1491, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	1495, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 632, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 633, 634, 635, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 628, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 627, 0, 553,
	568, 631, 567, 624, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 636, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 625, 622, 431,
	626, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 623, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 618, 0, 629, 495,
	496, 630, 606, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 0, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3912, 0, 218, 823, 0, 0,
	0, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 0, 435, 463, 320,
	454, 0, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 479, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 0, 448, 0, 0, 0, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 464, 0, 406,
	388, 632, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 618, 0, 629, 495, 496,
	630, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 1495, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 2409, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 944, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 1495, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1703, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 632, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 628, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 618, 0, 629, 495, 496, 630, 606, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 2443, 0, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 0, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 2445, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 0, 448,
	0, 0, 0, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 464, 0, 406, 388, 632, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 618, 0, 629, 495, 496, 630, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	2064, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 2065, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 3084, 3086, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 2465, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 1495, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 618, 0,
	629, 495, 496, 630, 606, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 643, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 609, 0, 448, 0, 642, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 632, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 337, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 0, 618, 0, 629,
	495, 496, 630, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 823, 0,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 632, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 633, 634, 635, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 628, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 627, 0, 553,
	568, 631, 567, 624, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 636, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 625, 622, 431,
	626, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 623, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 618, 0, 629, 495,
	496, 630, 606, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 0, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3891, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 0, 435, 463, 320,
	454, 0, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 479, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 0, 448, 0, 0, 0, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 464, 0, 406,
	388, 632, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 618, 0, 629, 495, 496,
	630, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 3670, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 0, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 3800, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3512, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 632, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 628, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 618, 0, 629, 495, 496, 630, 606, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 0, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3685, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 0, 448,
	0, 0, 0, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 464, 0, 406, 388, 632, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 618, 0, 629, 495, 496, 630, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 3601, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 3118, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 618, 0,
	629, 495, 496, 630, 606, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1996, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 632, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 337, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 0, 618, 0, 629,
	495, 496, 630, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 3323, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 632, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 633, 634, 635, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 628, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 627, 0, 553,
	568, 631, 567, 624, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 636, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 625, 622, 431,
	626, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 623, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 618, 0, 629, 495,
	496, 630, 606, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 0, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3239, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 0, 435, 463, 320,
	454, 0, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 479, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 0, 448, 0, 0, 0, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 464, 0, 406,
	388, 632, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 618, 0, 629, 495, 496,
	630, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2980, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1495, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 400,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 2445, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 0, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 632, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 628, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 618, 0, 629, 495, 496, 630, 606, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 2801, 0,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 0, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 0, 448,
	0, 0, 0, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 464, 0, 406, 388, 632, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 618, 0, 629, 495, 496, 630, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2135,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 0, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 2562, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 0, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2523, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 618, 0,
	629, 495, 496, 630, 606, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 2521, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 438, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 632, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 337, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 0, 618, 2300, 629,
	495, 496, 630, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 438, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 632, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 633, 634, 635, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 628, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 627, 0, 553,
	568, 631, 567, 624, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 636, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 625, 622, 431,
	626, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 623, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 618, 0, 629, 495,
	496, 630, 606, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 0, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	1851, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 0, 435, 463, 320,
	454, 0, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 479, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 0, 448, 0, 0, 0, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 464, 0, 406,
	388, 632, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 618, 0, 629, 495, 496,
	630, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	1980, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	400, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 597, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 386, 0, 510, 543, 532, 616, 498, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 356, 547, 529, 539, 530, 515, 516, 517, 524,
	336, 518, 519, 520, 490, 521, 491, 522, 523, 0,
	546, 497, 415, 370, 564, 563, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 218, 0, 0, 1495, 0, 0,
	0, 299, 219, 492, 612, 494, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 289, 421,
	438, 300, 411, 451, 305, 418, 295, 385, 408, 0,
	0, 291, 436, 417, 367, 346, 347, 290, 0, 403,
	324, 338, 321, 383, 0, 435, 463, 320, 454, 0,
	446, 293, 0, 445, 382, 432, 437, 368, 362, 0,
	292, 434, 366, 361, 350, 328, 479, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 609,
	0, 448, 0, 0, 0, 0, 0, 0, 420, 0,
	0, 353, 0, 0, 0, 464, 0, 406, 388, 632,
	0, 0, 404, 358, 433, 396, 439, 422, 447, 1885,
	397, 284, 423, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 410, 424, 425, 426, 322,
	306, 405, 307, 340, 308, 285, 314, 312, 315, 412,
	316, 287, 392, 430, 0, 335, 401, 365, 288, 364,
	393, 429, 428, 297, 455, 461, 462, 551, 0, 467,
	633, 634, 635, 476, 0, 0, 481, 482, 483, 485,
	486, 487, 488, 552, 569, 536, 506, 469, 560, 503,
	507, 508, 572, 0, 0, 0, 460, 354, 355, 0,
	333, 281, 282, 628, 319, 384, 574, 607, 608, 499,
	0, 561, 500, 509, 311, 533, 545, 544, 380, 459,
	0, 556, 559, 489, 627, 0, 553, 568, 631, 567,
	624, 390, 0, 409, 565, 512, 0, 557, 531, 0,
	558, 527, 562, 0, 501, 0, 416, 441, 453, 470,
	473, 502, 587, 588, 589, 286, 472, 591, 592, 593,
	594, 595, 596, 597, 590, 444, 534, 511, 537, 452,
	514, 513, 0, 0, 548, 468, 549, 550, 374, 375,
	376, 377, 337, 575, 304, 471, 399, 0, 535, 0,
	0, 0, 0, 0, 0, 0, 0, 540, 541, 538,
	636, 0, 598, 599, 0, 0, 465, 466, 332, 339,
	484, 341, 303, 389, 334, 450, 348, 0, 477, 542,
	478, 601, 604, 602, 603, 381, 344, 345, 413, 349,
	359, 402, 449, 387, 407, 301, 440, 414, 363, 528,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 583, 582, 581,
	580, 579, 578, 577, 576, 0, 0, 525, 427, 313,
	275, 309, 310, 317, 625, 622, 431, 626, 0, 283,
	505, 357, 0, 398, 331, 570, 571, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 573, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 456, 457, 458, 480,
	0, 442, 504, 623, 0, 0, 0, 0, 0, 0,
	0, 554, 566, 600, 0, 610, 611, 613, 615, 614,
	617, 419, 0, 618, 0, 629, 495, 496, 630, 606,
	386, 0, 510, 543, 532, 616, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 547, 529, 539, 530, 515, 516, 517, 524, 336,
	518, 519, 520, 490, 521, 491, 522, 523, 0, 546,
	497, 415, 370, 564, 563, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 492, 612, 494, 493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 421, 438,
	300, 411, 451, 305, 418, 295, 385, 408, 0, 0,
	291, 436, 417, 367, 346, 347, 290, 0, 403, 324,
	338, 321, 383, 0, 435, 463, 320, 454, 0, 446,
	293, 0, 445, 382, 432, 437, 368, 362, 0, 292,
	434, 366, 361, 350, 328, 479, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 0, 0, 609, 0,
	448, 0, 0, 1524, 0, 0, 0, 420, 0, 0,
	353, 0, 0, 0, 464, 0, 406, 388, 632, 0,
	0, 404, 358, 433, 396, 439, 422, 447, 400, 397,
	284, 423, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 410, 424, 425, 426, 322, 306,
	405, 307, 340, 308, 285, 314, 312, 315, 412, 316,
	287, 392, 430, 0, 335, 401, 365, 288, 364, 393,
	429, 428, 297, 455, 461, 462, 551, 0, 467, 633,
	634, 635, 476, 0, 0, 481, 482, 483, 485, 486,
	487, 488, 552, 569, 536, 506, 469, 560, 503, 507,
	508, 572, 0, 0, 0, 460, 354, 355, 0, 333,
	281, 282, 628, 319, 384, 574, 607, 608, 499, 0,
	561, 500, 509, 311, 533, 545, 544, 380, 459, 0,
	556, 559, 489, 627, 0, 553, 568, 631, 567, 624,
	390, 0, 409, 565, 512, 0, 557, 531, 0, 558,
	527, 562, 0, 501, 0, 416, 441, 453, 470, 473,
	502, 587, 588, 589, 286, 472, 591, 592, 593, 594,
	595, 596, 597, 590, 444, 534, 511, 537, 452, 514,
	513, 0, 0, 548, 468, 549, 550, 374, 375, 376,
	377, 337, 575, 304, 471, 399, 0, 535, 0, 0,
	0, 0, 0, 0, 0, 0, 540, 541, 538, 636,
	0, 598, 599, 0, 0, 465, 466, 332, 339, 484,
	341, 303, 389, 334, 450, 348, 0, 477, 542, 478,
	601, 604, 602, 603, 381, 344, 345, 413, 349, 359,
	402, 449, 387, 407, 301, 440, 414, 363, 528, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 270, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 583, 582, 581, 580,
	579, 578, 577, 576, 0, 0, 525, 427, 313, 275,
	309, 310, 317, 625, 622, 431, 626, 0, 283, 505,
	357, 0, 398, 331, 570, 571, 0, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 276, 239, 240, 241,
	242, 243, 244, 245, 248, 249, 250, 251, 252, 253,
	254, 255, 573, 246, 247, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 0,
	0, 0, 277, 278, 279, 280, 0, 0, 271, 272,
	273, 274, 0, 0, 0, 456, 457, 458, 480, 0,
	442, 504, 623, 0, 0, 0, 0, 0, 0, 0,
	554, 566, 600, 0, 610, 611, 613, 615, 614, 617,
	419, 0, 618, 0, 629, 495, 496, 630, 606, 386,
	0, 510, 543, 532, 616, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 643, 326, 0, 0, 356,
	547, 529, 539, 530, 515, 516, 517, 524, 336, 518,
	519, 520, 490, 521, 491, 522, 523, 0, 546, 497,
	415, 370, 564, 563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 218, 0, 0, 0, 0, 0, 0, 299,
	219, 492, 612, 494, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 302, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 289, 421, 438, 300,
	411, 451, 305, 418, 295, 385, 408, 0, 0, 291,
	436, 417, 367, 346, 347, 290, 0, 403, 324, 338,
	321, 383, 0, 435, 463, 320, 454, 0, 446, 293,
	0, 445, 382, 432, 437, 368, 362, 0, 292, 434,
	366, 361, 350, 328, 479, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	474, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 0, 0, 609, 0, 448,
	0, 0, 0, 0, 0, 0, 420, 0, 0, 353,
	0, 0, 0, 464, 0, 406, 388, 632, 0, 0,
	404, 358, 433, 396, 439, 422, 447, 400, 397, 284,
	423, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 410, 424, 425, 426, 322, 306, 405,
	307, 340, 308, 285, 314, 312, 315, 412, 316, 287,
	392, 430, 0, 335, 401, 365, 288, 364, 393, 429,
	428, 297, 455, 461, 462, 551, 0, 467, 633, 634,
	635, 476, 0, 0, 481, 482, 483, 485, 486, 487,
	488, 552, 569, 536, 506, 469, 560, 503, 507, 508,
	572, 0, 0, 0, 460, 354, 355, 0, 333, 281,
	282, 628, 319, 384, 574, 607, 608, 499, 0, 561,
	500, 509, 311, 533, 545, 544, 380, 459, 0, 556,
	559, 489, 627, 0, 553, 568, 631, 567, 624, 390,
	0, 409, 565, 512, 0, 557, 531, 0, 558, 527,
	562, 0, 501, 0, 416, 441, 453, 470, 473, 502,
	587, 588, 589, 286, 472, 591, 592, 593, 594, 595,
	596, 597, 590, 444, 534, 511, 537, 452, 514, 513,
	0, 0, 548, 468, 549, 550, 374, 375, 376, 377,
	337, 575, 304, 471, 399, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 540, 541, 538, 636, 0,
	598, 599, 0, 0, 465, 466, 332, 339, 484, 341,
	303, 389, 334, 450, 348, 0, 477, 542, 478, 601,
	604, 602, 603, 381, 344, 345, 413, 349, 359, 402,
	449, 387, 407, 301, 440, 414, 363, 528, 555, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 582, 581, 580, 579,
	578, 577, 576, 0, 0, 525, 427, 313, 275, 309,
	310, 317, 625, 622, 431, 626, 0, 283, 505, 357,
	0, 398, 331, 570, 571, 0, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 573, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 456, 457, 458, 480, 0, 442,
	504, 623, 0, 0, 0, 0, 0, 0, 0, 554,
	566, 600, 0, 610, 611, 613, 615, 614, 617, 419,
	0, 618, 0, 629, 495, 496, 630, 606, 386, 0,
	510, 543, 532, 616, 498, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 356, 547,
	529, 539, 530, 515, 516, 517, 524, 336, 518, 519,
	520, 490, 521, 491, 522, 523, 0, 546, 497, 415,
	370, 564, 563, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	492, 612, 494, 493, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 421, 438, 300, 411,
	451, 305, 418, 295, 385, 408, 0, 0, 291, 436,
	417, 367, 346, 347, 290, 0, 403, 324, 338, 321,
	383, 0, 435, 463, 320, 454, 0, 446, 293, 0,
	445, 382, 432, 437, 368, 362, 0, 292, 434, 366,
	361, 350, 328, 479, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 0, 653, 609, 0, 448, 0,
	0, 0, 0, 0, 0, 420, 0, 0, 353, 0,
	0, 0, 464, 0, 406, 388, 632, 0, 0, 404,
	358, 433, 396, 439, 422, 447, 400, 397, 284, 423,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 410, 424, 425, 426, 322, 306, 405, 307,
	340, 308, 285, 314, 312, 315, 412, 316, 287, 392,
	430, 0, 335, 401, 365, 288, 364, 393, 429, 428,
	297, 455, 461, 462, 551, 0, 467, 633, 634, 635,
	476, 0, 0, 481, 482, 483, 485, 486, 487, 488,
	552, 569, 536, 506, 469, 560, 503, 507, 508, 572,
	0, 0, 0, 460, 354, 355, 0, 333, 281, 282,
	628, 319, 384, 574, 607, 608, 499, 0, 561, 500,
	509, 311, 533, 545, 544, 380, 459, 0, 556, 559,
	489, 627, 0, 553, 568, 631, 567, 624, 390, 0,
	409, 565, 512, 0, 557, 531, 0, 558, 527, 562,
	0, 501, 0, 416, 441, 453, 470, 473, 502, 587,
	588, 589, 286, 472, 591, 592, 593, 594, 595, 596,
	597, 590, 444, 534, 511, 537, 452, 514, 513, 0,
	0, 548, 468, 549, 550, 374, 375, 376, 377, 337,
	575, 304, 471, 399, 0, 535, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 541, 538, 636, 0, 598,
	599, 0, 0, 465, 466, 332, 339, 484, 341, 303,
	389, 334, 450, 348, 0, 477, 542, 478, 601, 604,
	602, 603, 381, 344, 345, 413, 349, 359, 402, 449,
	387, 407, 301, 440, 414, 363, 528, 555, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 582, 581, 580, 579, 578,
	577, 576, 0, 0, 525, 427, 313, 275, 309, 310,
	317, 625, 622, 431, 626, 0, 283, 505, 357, 0,
	398, 331, 570, 571, 0, 0, 231, 232, 233, 234,
	235, 236, 237, 238, 276, 239, 240, 241, 242, 243,
	244, 245, 248, 249, 250, 251, 252, 253, 254, 255,
	573, 246, 247, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 0, 0, 0,
	277, 278, 279, 280, 0, 0, 271, 272, 273, 274,
	0, 0, 0, 456, 457, 458, 480, 0, 442, 504,
	623, 0, 0, 0, 0, 0, 0, 0, 554, 566,
	600, 0, 610, 611, 613, 615, 614, 617, 419, 0,
	618, 0, 629, 495, 496, 630, 606, 386, 0, 510,
	543, 532, 616, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 0, 0, 356, 547, 529,
	539, 530, 515, 516, 517, 524, 336, 518, 519, 520,
	490, 521, 491, 522, 523, 0, 546, 497, 415, 370,
	564, 563, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 299, 219, 492,
	612, 494, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 289, 421, 438, 300, 411, 451,
	305, 418, 295, 385, 408, 0, 0, 291, 436, 417,
	367, 346, 347, 290, 0, 403, 324, 338, 321, 383,
	0, 435, 463, 320, 454, 0, 446, 293, 0, 445,
	382, 432, 437, 368, 362, 0, 292, 434, 366, 361,
	350, 328, 479, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 474, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 609, 0, 448, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 353, 0, 0,
	0, 464, 0, 406, 388, 632, 0, 0, 404, 358,
	433, 396, 439, 422, 447, 400, 397, 284, 423, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 410, 424, 425, 426, 322, 306, 405, 307, 340,
	308, 285, 314, 312, 315, 412, 316, 287, 392, 430,
	0, 335, 401, 365, 288, 364, 393, 429, 428, 297,
	455, 461, 462, 551, 0, 467, 633, 634, 635, 476,
	0, 0, 481, 482, 483, 485, 486, 487, 488, 552,
	569, 536, 506, 469, 560, 503, 507, 508, 572, 0,
	0, 0, 460, 354, 355, 0, 333, 281, 282, 628,
	319, 384, 574, 607, 608, 499, 0, 561, 500, 509,
	311, 533, 545, 544, 380, 459, 0, 556, 559, 489,
	627, 0, 553, 568, 631, 567, 624, 390, 0, 409,
	565, 512, 0, 557, 531, 0, 558, 527, 562, 0,
	501, 0, 416, 441, 453, 470, 473, 502, 587, 588,
	589, 286, 472, 591, 592, 593, 594, 595, 596, 597,
	590, 444, 534, 511, 537, 452, 514, 513, 0, 0,
	548, 468, 549, 550, 374, 375, 376, 377, 337, 575,
	304, 471, 399, 0, 535, 0, 0, 0, 0, 0,
	0, 0, 0, 540, 541, 538, 636, 0, 598, 599,
	0, 0, 465, 466, 332, 339, 484, 341, 303, 389,
	334, 450, 348, 0, 477, 542, 478, 601, 604, 602,
	603, 381, 344, 345, 413, 349, 359, 402, 449, 387,
	407, 301, 440, 414, 363, 528, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 583, 582, 581, 580, 579, 578, 577,
	576, 944, 0, 525, 427, 313, 275, 309, 310, 317,
	625, 622, 431, 626, 0, 283, 505, 357, 0, 398,
	331, 570, 571, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 573,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 456, 457, 458, 480, 0, 442, 504, 623,
	0, 0, 0, 0, 0, 0, 0, 554, 566, 600,
	0, 610, 611, 613, 615, 614, 617, 419, 0, 618,
	0, 629, 495, 496, 630, 606, 386, 0, 510, 543,
	532, 616, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 547, 529, 539,
	530, 515, 516, 517, 524, 336, 518, 519, 520, 490,
	521, 491, 522, 523, 0, 546, 497, 415, 370, 564,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 492, 612,
	494, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 421, 438, 300, 411, 451, 305,
	418, 295, 385, 408, 0, 0, 291, 436, 417, 367,
	346, 347, 290, 0, 403, 324, 338, 321, 383, 0,
	435, 463, 320, 454, 0, 446, 293, 0, 445, 382,
	432, 437, 368, 362, 0, 292, 434, 366, 361, 350,
	328, 479, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 0, 0, 609, 0, 448, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 353, 0, 0, 0,
	464, 0, 406, 388, 632, 0, 0, 404, 358, 433,
	396, 439, 422, 447, 400, 397, 284, 423, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	410, 424, 425, 426, 322, 306, 405, 307, 340, 308,
	285, 314, 312, 315, 412, 316, 287, 392, 430, 0,
	335, 401, 365, 288, 364, 393, 429, 428, 297, 455,
	461, 462, 551, 0, 467, 633, 634, 635, 476, 0,
	0, 481, 482, 483, 485, 486, 487, 488, 552, 569,
	536, 506, 469, 560, 503, 507, 508, 572, 0, 0,
	0, 460, 354, 355, 0, 333, 281, 282, 628, 319,
	384, 574, 607, 608, 499, 0, 561, 500, 509, 311,
	533, 545, 544, 380, 459, 0, 556, 559, 489, 627,
	0, 553, 568, 631, 567, 624, 390, 0, 409, 565,
	512, 0, 557, 531, 0, 558, 527, 562, 0, 501,
	0, 416, 441, 453, 470, 473, 502, 587, 588, 589,
	286, 472, 591, 592, 593, 594, 595, 596, 597, 590,
	444, 534, 511, 537, 452, 514, 513, 0, 0, 548,
	468, 549, 550, 374, 375, 376, 377, 337, 575, 304,
	471, 399, 0, 535, 0, 0, 0, 0, 0, 0,
	0, 0, 540, 541, 538, 636, 0, 598, 599, 0,
	0, 465, 466, 332, 339, 484, 341, 303, 389, 334,
	450, 348, 0, 477, 542, 478, 601, 604, 602, 603,
	381, 344, 345, 413, 349, 359, 402, 449, 387, 407,
	301, 440, 414, 363, 528, 555, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 270, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 583, 582, 581, 580, 579, 578, 577, 576,
	0, 0, 525, 427, 313, 275, 309, 310, 317, 625,
	622, 431, 626, 0, 283, 505, 357, 0, 398, 331,
	570, 571, 0, 0, 231, 232, 233, 234, 235, 236,
	237, 238, 276, 239, 240, 241, 242, 243, 244, 245,
	248, 249, 250, 251, 252, 253, 254, 255, 573, 246,
	247, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 0, 0, 0, 277, 278,
	279, 280, 0, 0, 271, 272, 273, 274, 0, 0,
	0, 456, 457, 458, 480, 0, 442, 504, 623, 0,
	0, 0, 0, 0, 0, 0, 554, 566, 600, 0,
	610, 611, 613, 615, 614, 617, 419, 0, 618, 0,
	629, 495, 496, 630, 606, 386, 0, 510, 543, 532,
	616, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 356, 547, 529, 539, 530,
	515, 516, 517, 524, 336, 518, 519, 520, 490, 521,
	491, 522, 523, 0, 546, 497, 415, 370, 564, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 218, 0,
	0, 0, 0, 0, 0, 299, 219, 492, 612, 494,
	493, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 289, 421, 1474, 300, 411, 451, 305, 418,
	295, 385, 408, 0, 0, 291, 436, 417, 367, 346,
	347, 290, 0, 403, 324, 338, 321, 383, 0, 435,
	463, 320, 454, 0, 446, 293, 0, 445, 382, 432,
	437, 368, 362, 0, 292, 434, 366, 361, 350, 328,
	479, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 474, 475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 0, 0, 609, 0, 448, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 353, 0, 0, 0, 464,
	0, 406, 388, 632, 0, 0, 404, 358, 433, 396,
	439, 422, 447, 400, 397, 284, 423, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 410,
	424, 425, 426, 322, 306, 405, 307, 340, 308, 285,
	314, 312, 315, 412, 316, 287, 392, 430, 0, 335,
	401, 365, 288, 364, 393, 429, 428, 297, 455, 461,
	462, 551, 0, 467, 633, 634, 635, 476, 0, 0,
	481, 482, 483, 485, 486, 487, 488, 552, 569, 536,
	506, 469, 560, 503, 507, 508, 572, 0, 0, 0,
	460, 354, 355, 0, 333, 281, 282, 628, 319, 384,
	574, 607, 608, 499, 0, 561, 500, 509, 311, 533,
	545, 544, 380, 459, 0, 556, 559, 489, 627, 0,
	553, 568, 631, 567, 624, 390, 0, 409, 565, 512,
	0, 557, 531, 0, 558, 527, 562, 0, 501, 0,
	416, 441, 453, 470, 473, 502, 587, 588, 589, 286,
	472, 591, 592, 593, 594, 595, 596, 597, 590, 444,
	534, 511, 537, 452, 514, 513, 0, 0, 548, 468,
	549, 550, 374, 375, 376, 377, 337, 575, 304, 471,
	399, 0, 535, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 541, 538, 636, 0, 598, 599, 0, 0,
	465, 466, 332, 339, 484, 341, 303, 389, 334, 450,
	348, 0, 477, 542, 478, 601, 604, 602, 603, 381,
	344, 345, 413, 349, 359, 402, 449, 387, 407, 301,
	440, 414, 363, 528, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 583, 582, 581, 580, 579, 578, 577, 576, 0,
	0, 525, 427, 313, 275, 309, 310, 317, 625, 622,
	431, 626, 0, 283, 505, 357, 0, 398, 331, 570,
	571, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 573, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	456, 457, 458, 480, 0, 442, 504, 623, 0, 0,
	0, 0, 0, 0, 0, 554, 566, 600, 0, 610,
	611, 613, 615, 614, 617, 419, 0, 618, 0, 629,
	495, 496, 630, 606, 386, 0, 510, 543, 532, 616,
	498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 547, 529, 539, 530, 515,
	516, 517, 524, 336, 518, 519, 520, 490, 521, 491,
	522, 523, 0, 546, 497, 415, 370, 564, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 0,
	0, 0, 0, 0, 299, 219, 492, 612, 494, 493,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 421, 1472, 300, 411, 451, 305, 418, 295,
	385, 408, 0, 0, 291, 436, 417, 367, 346, 347,
	290, 0, 403, 324, 338, 321, 383, 0, 435, 463,
	320, 454, 0, 446, 293, 0, 445, 382, 432, 437,
	368, 362, 0, 292, 434, 366, 361, 350, 328, 479,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	0, 0, 609, 0, 448, 0, 0, 0, 0, 0,
	0, 420, 0, 0, 353, 0, 0, 0, 464, 0,
	406, 388, 632, 0, 0, 404, 358, 433, 396, 439,
	422, 447, 400, 397, 284, 423, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 410, 424,
	425, 426, 322, 306, 405, 307, 340, 308, 285, 314,
	312, 315, 412, 316, 287, 392, 430, 0, 335, 401,
	365, 288, 364, 393, 429, 428, 297, 455, 461, 462,
	551, 0, 467, 633, 634, 635, 476, 0, 0, 481,
	482, 483, 485, 486, 487, 488, 552, 569, 536, 506,
	469, 560, 503, 507, 508, 572, 0, 0, 0, 460,
	354, 355, 0, 333, 281, 282, 628, 319, 384, 574,
	607, 608, 499, 0, 561, 500, 509, 311, 533, 545,
	544, 380, 459, 0, 556, 559, 489, 627, 0, 553,
	568, 631, 567, 624, 390, 0, 409, 565, 512, 0,
	557, 531, 0, 558, 527, 562, 0, 501, 0, 416,
	441, 453, 470, 473, 502, 587, 588, 589, 286, 472,
	591, 592, 593, 594, 595, 596, 597, 590, 444, 534,
	511, 537, 452, 514, 513, 0, 0, 548, 468, 549,
	550, 374, 375, 376, 377, 337, 575, 304, 471, 399,
	0, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	540, 541, 538, 636, 0, 598, 599, 0, 0, 465,
	466, 332, 339, 484, 341, 303, 389, 334, 450, 348,
	0, 477, 542, 478, 601, 604, 602, 603, 381, 344,
	345, 413, 349, 359, 402, 449, 387, 407, 301, 440,
	414, 363, 528, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 270, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 582, 581, 580, 579, 578, 577, 576, 0, 0,
	525, 427, 313, 275, 309, 310, 317, 625, 622, 431,
	626, 0, 283, 505, 357, 0, 398, 331, 570, 571,
	0, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	276, 239, 240, 241, 242, 243, 244, 245, 248, 249,
	250, 251, 252, 253, 254, 255, 573, 246, 247, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 0, 0, 0, 277, 278, 279, 280,
	0, 0, 271, 272, 273, 274, 0, 0, 0, 456,
	457, 458, 480, 0, 442, 504, 623, 0, 0, 0,
	0, 0, 0, 0, 554, 566, 600, 0, 610, 611,
	613, 615, 614, 617, 419, 0, 618, 0, 629, 495,
	496, 630, 606, 386, 0, 510, 543, 532, 616, 498,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	326, 0, 0, 356, 547, 529, 539, 530, 515, 516,
	517, 524, 336, 518, 519, 520, 490, 521, 491, 522,
	523, 0, 546, 497, 415, 370, 564, 563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 218, 0, 0, 0,
	0, 0, 0, 299, 219, 492, 612, 494, 493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	289, 421, 438, 300, 411, 451, 305, 418, 295, 385,
	408, 0, 0, 291, 436, 417, 367, 346, 347, 290,
	0, 403, 324, 338, 321, 383, 0, 435, 463, 320,
	454, 0, 446, 293, 0, 445, 382, 432, 437, 368,
	362, 0, 292, 434, 366, 361, 350, 328, 479, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 0,
	0, 609, 0, 448, 0, 0, 0, 0, 0, 0,
	420, 0, 0, 353, 0, 0, 0, 464, 0, 406,
	388, 632, 0, 0, 404, 358, 433, 396, 439, 422,
	447, 400, 397, 284, 423, 323, 369, 296, 298, 720,
	325, 327, 329, 330, 378, 379, 391, 410, 424, 425,
	426, 322, 306, 405, 307, 340, 308, 285, 314, 312,
	315, 412, 316, 287, 392, 430, 0, 335, 401, 365,
	288, 364, 393, 429, 428, 297, 455, 461, 462, 551,
	0, 467, 633, 634, 635, 476, 0, 0, 481, 482,
	483, 485, 486, 487, 488, 552, 569, 536, 506, 469,
	560, 503, 507, 508, 572, 0, 0, 0, 460, 354,
	355, 0, 333, 281, 282, 628, 319, 384, 574, 607,
	608, 499, 0, 561, 500, 509, 311, 533, 545, 544,
	380, 459, 0, 556, 559, 489, 627, 0, 553, 568,
	631, 567, 624, 390, 0, 409, 565, 512, 0, 557,
	531, 0, 558, 527, 562, 0, 501, 0, 416, 441,
	453, 470, 473, 502, 587, 588, 589, 286, 472, 591,
	592, 593, 594, 595, 596, 597, 590, 444, 534, 511,
	537, 452, 514, 513, 0, 0, 548, 468, 549, 550,
	374, 375, 376, 377, 337, 575, 304, 471, 399, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	541, 538, 636, 0, 598, 599, 0, 0, 465, 466,
	332, 339, 484, 341, 303, 389, 334, 450, 348, 0,
	477, 542, 478, 601, 604, 602, 603, 381, 344, 345,
	413, 349, 359, 402, 449, 387, 407, 301, 440, 414,
	363, 528, 555, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 583,
	582, 581, 580, 579, 578, 577, 576, 0, 0, 525,
	427, 313, 275, 309, 310, 317, 625, 622, 431, 626,
	0, 283, 505, 357, 0, 398, 331, 570, 571, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 573, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 456, 457,
	458, 480, 0, 442, 504, 623, 0, 0, 0, 0,
	0, 0, 0, 554, 566, 600, 0, 610, 611, 613,
	615, 614, 617, 419, 0, 618, 0, 629, 495, 496,
	630, 606, 386, 0, 510, 543, 532, 616, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 547, 529, 539, 530, 515, 516, 517,
	524, 336, 518, 519, 520, 490, 521, 491, 522, 523,
	0, 546, 497, 415, 370, 564, 563, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 492, 612, 494, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	421, 438, 300, 411, 451, 305, 418, 295, 385, 408,
	0, 0, 291, 436, 417, 367, 346, 347, 290, 0,
	403, 324, 338, 321, 383, 0, 435, 463, 320, 454,
	0, 446, 293, 0, 445, 382, 432, 437, 368, 362,
	0, 292, 434, 366, 361, 350, 328, 479, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 0, 0,
	609, 0, 448, 0, 0, 0, 0, 0, 0, 420,
	0, 0, 353, 0, 0, 0, 464, 0, 406, 388,
	632, 0, 0, 404, 358, 433, 396, 439, 422, 447,
	677, 397, 284, 423, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 410, 424, 425, 426,
	322, 306, 405, 307, 340, 308, 285, 314, 312, 315,
	412, 316, 287, 392, 430, 0, 335, 401, 365, 288,
	364, 393, 429, 428, 297, 455, 461, 462, 551, 0,
	467, 633, 634, 635, 476, 0, 0, 481, 482, 483,
	485, 486, 487, 488, 552, 569, 536, 506, 469, 560,
	503, 507, 508, 572, 0, 0, 0, 460, 354, 355,
	0, 333, 281, 282, 628, 319, 384, 574, 607, 608,
	499, 0, 561, 500, 509, 311, 533, 545, 544, 380,
	459, 0, 556, 559, 489, 627, 0, 553, 568, 631,
	567, 624, 390, 0, 409, 565, 512, 0, 557, 531,
	0, 558, 527, 562, 0, 501, 0, 416, 441, 453,
	470, 473, 502, 587, 588, 589, 286, 472, 591, 592,
	593, 594, 595, 596, 678, 590, 444, 534, 511, 537,
	452, 514, 513, 0, 0, 548, 468, 549, 550, 374,
	375, 376, 377, 337, 575, 304, 471, 399, 0, 535,
	0, 0, 0, 0, 0, 0, 0, 0, 540, 541,
	538, 636, 0, 598, 599, 0, 0, 465, 466, 332,
	339, 484, 341, 303, 389, 334, 450, 348, 0, 477,
	542, 478, 601, 604, 602, 603, 381, 344, 345, 413,
	349, 359, 402, 449, 387, 407, 301, 440, 414, 363,
	528, 555, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 270, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 582,
	581, 580, 579, 578, 577, 576, 0, 0, 525, 427,
	313, 275, 309, 310, 317, 625, 622, 431, 626, 0,
	283, 505, 357, 0, 398, 331, 570, 571, 0, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 276, 239,
	240, 241, 242, 243, 244, 245, 248, 249, 250, 251,
	252, 253, 254, 255, 573, 246, 247, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 0, 0, 0, 277, 278, 279, 280, 0, 0,
	271, 272, 273, 274, 0, 0, 0, 456, 457, 458,
	480, 0, 442, 504, 623, 0, 0, 0, 0, 0,
	0, 0, 554, 566, 600, 0, 610, 611, 613, 615,
	614, 617, 419, 0, 618, 0, 629, 495, 496, 630,
	606, 699, 698, 705, 695, 0, 0, 0, 0, 0,
	0, 0, 0, 702, 703, 0, 704, 708, 0, 0,
	689, 1967, 0, 0, 699, 698, 705, 695, 196, 0,
	713, 0, 0, 0, 0, 0, 702, 703, 0, 704,
	708, 0, 0, 689, 0, 0, 0, 0, 0, 0,
	3521, 0, 0, 713, 0, 0, 1970, 0, 0, 1967,
	0, 0, 0, 0, 1214, 1215, 1216, 1213, 0, 0,
	0, 0, 0, 0, 717, 0, 0, 719, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1970, 0, 0, 717, 192, 0,
	719, 0, 0, 0, 0, 718, 0, 0, 1944, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1736, 0, 0, 1944, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1960, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1960, 0, 0, 0, 0, 0,
	690, 692, 691, 0, 0, 0, 0, 0, 0, 0,
	697, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 701, 690, 692, 691, 0, 0, 0, 716,
	0, 0, 0, 697, 0, 0, 694, 1948, 0, 0,
	684, 0, 0, 0, 0, 701, 0, 0, 1954, 0,
	0, 0, 716, 0, 0, 0, 0, 0, 0, 694,
	0, 0, 0, 0, 0, 0, 0, 0, 1942, 1976,
	0, 0, 1943, 1945, 1947, 1948, 1949, 1950, 1951, 1955,
	1956, 1957, 1959, 1962, 1963, 1964, 1954, 0, 0, 1732,
	0, 0, 0, 1952, 1961, 1953, 1729, 0, 0, 0,
	1731, 1728, 1730, 1734, 1735, 0, 1942, 1976, 1733, 0,
	1943, 1945, 1947, 0, 1949, 1950, 1951, 1955, 1956, 1957,
	1959, 1962, 1963, 1964, 0, 0, 0, 0, 0, 1968,
	0, 1952, 1961, 1953, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 696, 700,
	706, 0, 707, 709, 0, 0, 710, 711, 712, 0,
	0, 714, 715, 0, 0, 0, 0, 1968, 0, 0,
	0, 696, 700, 706, 1965, 707, 709, 0, 0, 710,
	711, 712, 0, 0, 714, 715, 0, 0, 0, 0,
	0, 1941, 0, 0, 0, 0, 0, 0, 1940, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1965, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1958, 0, 0, 0, 0, 0, 0, 1941,
	0, 1946, 0, 0, 0, 0, 1940, 0, 0, 0,
	0, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1726, 1727, 1739, 1740, 1741, 1742, 1743, 1744, 1737, 1738,
	1958, 0, 0, 0, 0, 0, 0, 0, 0, 1946,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 693, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3525,
	693, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3529,
}

var yyPact = [...]int{
	3789, -1000, -1000, -1000, -310, 14229, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47673, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 444, 47673,
	-306, 29722, 45816, -1000, -1000, 2614, -1000, 46435, 16098, 47673,
	574, 560, 47673, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 956, -1000, 50149,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 880, 50778,
	49530, 11110, -208, -1000, 1661, -30, 2527, 509, -194, -195,
	1105, 1126, 1117, 1117, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 250, 978, 47054,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3976, 242, 955, 978, 21054, 139,
	132, 1661, 467, -82, 181, -1000, 1469, 446, 207, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11110, 11110, 14229, -363, 14229, 11110, 47673, 47673, -1000, -1000,
	-1000, -1000, -306, 46435, 880, 50778, 11110, 2527, 509, -194,
	-195, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -82, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 132, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4931,
	-1000, 1593, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2290, 3043, 1587,
	2520, 843, 45816, 47673, -1000, 153, 843, -1000, -1000, -1000,
	1661, 3444, -1000, 47673, 47673, 221, 1855, -1000, 455, 396,
	553, 348, 1585, -1000, -1000, -1000, -1000, -1000, -1000, 756,
	3356, -1000, 47673, 47673, 3057, 47673, -1000, 2326, 792, -1000,
	50801, 3208, 1455, 983, 3066, -1000, -1000, 3042, -1000, 354,
	359, 342, 706, 440, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 341, -1000, 3271, -1000, -1000, 344, -1000, -1000, 336,
	-1000, -1000, -1000, 113, -1000, -1000, -1000, -1000, -1000, -1000,
	16, -1000, -1000, 1173, 2233, 11110, 1910, -1000, 3921, 1629,
	-1000, -1000, -1000, 6750, 12976, 12976, 12976, 12976, 47673, -1000,
	-1000, 2852, 11110, 3040, 3039, 3038, 3030, -1000, -1000, -1000,
	-1000, -1000, -1000, 1581, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1961, -1000, -1000, -1000, 13598, -1000, 3016,
	3015, 3014, 3004, 3003, 3002, 2997, 2994, 2991, 2982, 2977,
	2974, 2972, 2971, 2701, 15469, 2970, 2519, 2511, 2969, 2967,
	2966, 2501, 2965, 2963, 2962, 2701, 2701, 2960, 2959, 2958,
	2956, 2939, 2938, 2937, 2935, 2934, 2933, 2932, 2931, 2926,
	2923, 2915, 2914, 2913, 2906, 2898, 2897, 2896, 2894, 2892,
	2888, 2877, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1307, -1000, 2872, 3372, 2767,
	-1000, 3260, 3254, 3251, 3240, -253, 2869, 2191, -1000, -1000,
	114, 3355, 47673, -275, 47673, 2498, -97, 2497, -100, -1000,
	-81, -1000, -1000, 1111, -1000, 1071, -1000, 878, 878, 878,
	47673, 47673, 244, 985, 878, 878, 878, 878, 878, 889,
	878, 3283, 954, 951, 948, 946, 878, -20, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1854, 1853, 2803, 1038, -1000,
	-1000, -1000, -1000, 1460, 47673, -1000, 2792, 2494, 1718, 1718,
	3340, 3340, 3282, 805, 798, 776, 1718, 655, -1000, 1840,
	1840, 1840, 1840, 1718, 546, 800, 3288, 3288, 161, 1840,
	82, 1718, 1718, 82, 1718, 1718, -1000, 1810, 314, -260,
	-1000, -1000, -1000, -1000, 1840, 1840, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3259, 3250, 880, 880, 47673, 880, 203,
	47673, 880, 880, 880, 47673, 883, 35, 48911, 48292, 2228,
	2326, 785, 781, 1466, 1849, -1000, 1758, 47673, 47673, 1758,
	1758, 24151, 23532, -1000, 47673, -1000, 3372, 2767, 2703, 1352,
	2698, 2767, -101, 2492, 880, 880, 880, 880, 880, 308,
	880, 880, 880, 880, 880, 47673, 47673, 45197, 880, 880,
	880, 880, 9238, 9238, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14229, 2147, 2128, 206, 0, -295, 276,
	-1000, -1000, 47673, 3174, 320, -1000, -1000, -1000, 2711, -1000,
	2770, 2770, 2770, 2770, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2770, 2770, 2782, 2866, -1000, -1000,
	2768, 2768, 2768, 2711, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2778,
	2778, 2781, 2781, 2778, 47673, -119, -1000, -1000, 11110, 47673,
	3194, 462, 2864, 843, -1000, -1000, 47673, 185, 463, 3372,
	3193, 3288, 3333, -1000, -1000, 1576, 2190, 2489, -1000, 348,
	-1000, 415, 348, 1733, -1000, 1116, -1000, -1000, -1000, -1000,
	-1000, 47673, 16, 430, -1000, -1000, 2471, 2862, -1000, 654,
	1385, 1532, -1000, 319, 4365, 38388, 2326, 38388, 47673, -1000,
	-1000, -1000, -1000, -1000, -1000, 109, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	389, -1000, 11110, 11110, 11110, 11110, 11110, -1000, 887, 12354,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 12976, 12976, 12976,
	12976, 12976, 12976, 12976, 12976, 12976, 12976, 12976, 12976, 2849,
	1775, 12976, 12976, 12976, 12976, 26627, 1352, 3005, 1463, 313,
	1629, 1629, 1629, 1629, 11110, -1000, 1867, 2233, 11110, 11110,
	11110, 11110, 47673, -1000, -1000, 50743, 11110, 11110, 4300, 11110,
	3227, 11110, 11110, 11110, 2695, 5497, 47673, 11110, -1000, 2694,
	2691, -1000, -1000, 1985, 11110, -1000, -1000, 11110, -1000, -1000,
	11110, 12976, 11110, -1000, 11110, 11110, 11110, -1000, -1000, 2700,
	3227, 3227, 3227, 1827, 11110, 11110, 3227, 3227, 3227, 1787,
	3227, 3227, 3227, 3227, 3227, 3227, 3227, 3227, 3227, 3227,
	2689, 2688, 2679, 10488, 3288, -208, -1000, 8616, 3193, 3288,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-256, 2861, 47673, 2487, 2486, -319, 190, 478, 47673, 1170,
	404, 2180, -103, 2176, 103, 1102, 1068, 1085, -1000, 2483,
	1896, 47673, 47673, 3222, -1000, 2860, 47673, 878, 878, 878,
	-1000, 43340, 38388, 47673, 47673, 2326, 47673, 47673, 47673, 878,
	878, 878, 878, 47673, -1000, 3150, 38388, 3125, 883, -1000,
	47673, 1460, 3219, 47673, 404, 3340, 12976, 12976, -1000, -1000,
	11110, -1000, 44578, 1840, 1718, 1718, -1000, -1000, 47673, -1000,
	-1000, -1000, 1840, 47673, 1840, 1840, 3340, 1840, -1000, -1000,
	-1000, 1718, 1718, -1000, -1000, 11110, -1000, -1000, 1840, 1840,
	-1000, -1000, 3340, 47673, 105, 3340, 3340, 129, -1000, -1000,
	-1000, 1718, 47673, 47673, 878, 47673, -1000, 47673, 47673, -1000,
	-1000, 47673, 47673, 4259, 47673, 43340, 43959, 3248, -1000, 38388,
	47673, 47673, 1453, -1000, 930, 35912, -1000, 1407, -1000, 49,
	-1000, 95, 35, 1758, 35, 1758, 929, -1000, 653, 651,
	22294, 588, 38388, 6119, -1000, -1000, 1758, 1758, 6119, 6119,
	1631, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1439, -1000,
	362, 3288, -1000, -1000, -1000, -1000, -1000, 2173, 404, 47673,
	43340, 38388, 2326, 47673, 880, 47673, 47673, 47673, 47673, 47673,
	-1000, 2858, 1574, -1000, 3202, 47673, 47673, 47673, 47673, 1329,
	-1000, -1000, 19193, 1556, 1329, -1000, 1882, -1000, 11110, 14229,
	-237, 11110, 14229, 14229, 11110, 14229, -1000, 11110, 294, -1000,
	-1000, -1000, -1000, 2172, -1000, 2170, -1000, -1000, -1000, -1000,
	-1000, 2482, 2482, -1000, 2168, -1000, -1000, -1000, -1000, 2166,
	-1000, -1000, 2165, -1000, -1000, -1000, -1000, -150, 2678, 1173,
	-1000, 2481, 3065, -209, -1000, 20435, 47673, 47673, 462, -324,
	1851, 1848, 1847, -1000, -209, -1000, 19814, 47673, 3288, -1000,
	-213, 3193, 11110, 47673, -1000, 3281, -1000, -1000, 348, -1000,
	442, 432, -1000, -1000, -1000, -1000, -1000, -1000, 1555, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 434,
	-84, -93, 1438, -1000, 47673, -1000, -1000, 319, 38388, 40245,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 262, -1000, -1000,
	186, -1000, 919, 253, 1717, -1000, -1000, 220, 216, 231,
	977, 2233, -1000, 1894, 1894, 1898, -1000, 768, -1000, -1000,
	-1000, -1000, 2852, -1000, -1000, -1000, 1932, 2779, -1000, 1732,
	1732, 1628, 1628, 1628, 1628, 1628, 1688, 1688, -1000, -1000,
	-1000, 6750, 2849, 12976, 12976, 12976, 12976, 960, 960, 4046,
	4007, -1000, -1000, -1000, -1000, 11110, 189, 1863, -1000, 11110,
	2899, 1547, 2692, 1411, 1535, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2677, 2674, 2598, 3352, 2673,
	11110, -1000, -1000, 1714, 1712, 1709, -1000, 2184, 9866, -1000,
	-1000, -1000, 2670, 1530, 2669, -1000, -1000, -1000, 2668, 1704,
	1224, 2667, 1623, 2665, 2662, 2661, 2659, 1428, 11110, 11110,
	11110, 11110, 2657, 1689, 1672, 11110, 11110, 11110, 11110, 2656,
	11110, 11110, 11110, 11110, 11110, 11110, 11110, 11110, 11110, 11110,
	169, 169, 169, 1426, 1424, -1000, -1000, 1670, -1000, 2233,
	-1000, -1000, 3193, -1000, 2848, 2150, 1420, -1000, -1000, -303,
	2407, 47673, 47673, 179, 47673, 2474, -277, 47673, -1000, -1000,
	2473, -1000, 2472, -1000, -1000, -1000, 1098, 1070, 1050, 2465,
	3200, 3279, 937, 47673, 1197, 2847, 47673, 47673, 47673, 289,
	-1000, -1000, 1330, -1000, 253, -4, 587, 1219, 3055, 3351,
	-126, 47673, 47673, 47673, 47673, 3218, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 42721, -1000, 2833, 1658, -1000, -1000,
	-1000, 1629, 1629, 2233, 3054, 47673, 47673, 3340, 3340, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1840, 3340, 3340, 1542,
	1718, 1840, -1000, -1000, 1840, -324, -1000, 1840, -1000, -324,
	1522, -324, 47673, -1000, -1000, -1000, 3217, 2792, 1412, -1000,
	-1000, -1000, 3332, 1677, 865, 865, 1079, 609, 3331, 17955,
	-1000, 1745, 1150, 915, 3157, 350, -1000, 1745, -147, 846,
	1745, 1745, 1745, 1745, 1745, 1745, 1745, 744, 741, 1745,
	1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745,
	1114, 1745, 1745, 1745, 1745, 1745, -1000, 1745, 2831, 554,
	-1000, -1000, -1000, -1000, -1000, -1000, 774, 672, 288, 3245,
	394, -1000, 387, 1330, 3235, 429, 47673, 47673, 3247, 1337,
	-1000, -1000, -1000, -1000, 27246, 27246, 21675, 27246, -1000, 198,
	35, 19, -1000, -1000, 1407, 6119, 1407, 6119, 2146, -1000,
	-1000, 909, -1000, -1000, 1219, -1000, 47673, 47673, -1000, -1000,
	2828, 1841, -1000, -1000, 15469, -1000, 6119, 6119, -1000, -1000,
	29103, 47673, -1000, 14, -1000, 26, 3193, -1000, -1000, 1193,
	-1000, -1000, 1406, 1219, 3064, 47673, 1193, 1193, 1193, -1000,
	-1000, 16717, 47673, 47673, -1000, -1000, -1000, -1000, 3340, 9238,
	-1000, 35912, -1000, -1000, 42102, -1000, 41483, 3340, 1859, -1000,
	14229, 2074, 202, -1000, 271, -300, 201, 2059, 200, 2233,
	-1000, -1000, 2638, 2635, 1652, -1000, 1650, 2634, 1649, 1645,
	2145, -1000, 72, -1000, 3177, 1251, -1000, 2827, -1000, 1643,
	3116, -1000, 1405, -1000, 1839, 1642, -1000, -1000, -1000, 11110,
	40864, 11110, 1251, 1637, 3115, 1405, 3193, 2458, -1000, 1397,
	-1000, 2169, 1521, 213, -1000, -1000, -1000, 47673, 880, 2471,
	1635, 40245, 1331, -1000, 901, 1518, 1517, -1000, 38388, 321,
	38388, -1000, 38388, -1000, -1000, 393, -1000, 47673, 3179, -1000,
	-1000, -1000, 2407, 1833, -323, 47673, -1000, -1000, -1000, -1000,
	-1000, 1634, -1000, 960, 960, 4046, 3781, -1000, 12976, -1000,
	12976, 2998, -1000, 1843, -1000, 11110, 2064, 4860, 11110, 4860,
	967, 25389, 47673, -1000, -1000, 11110, 11110, -1000, 2989, -1000,
	-1000, -1000, -1000, 11110, 11110, 2439, -1000, 47673, -1000, -1000,
	-1000, -1000, 25389, -1000, 12976, -1000, -1000, -1000, -1000, 11110,
	1290, 1290, 2980, 1633, 169, 169, 169, 2890, 2789, 2785,
	1625, 169, 2774, 2743, 2731, 2707, 2684, 2653, 2617, 2612,
	2537, 2522, -1000, 2824, -1000, -1000, 1956, 11732, 8616, -1000,
	-1000, 304, 1374, 2144, 2447, 136, -1000, 1826, -1000, 2446,
	47673, 47673, 1158, -1000, 47673, 3350, -1000, 2445, -1000, -1000,
	-1000, 1053, 2441, -1000, 458, 1995, 215, 316, 2633, 1373,
	-1000, -1000, 47673, -1000, -1000, -1000, 16717, 2792, 2823, 2792,
	131, 1745, 624, 38388, 757, -1000, 47673, 2196, 1824, 3063,
	762, 3170, 47673, 2811, 437, 2806, 2801, 3216, 549, 5023,
	47673, 1297, -1000, 1516, 446, -1000, 47673, -1000, 2326, -1000,
	1718, -1000, -1000, 3340, -1000, -1000, 11110, 11110, 3340, 1718,
	1718, -1000, 1840, -1000, 47673, -1000, -324, 549, 5023, 3215,
	4554, 662, 2419, -1000, 47673, -1000, -1000, -1000, 908, -1000,
	1067, 878, 47673, 1923, 1067, 1920, 2795, -1000, -1000, 47673,
	47673, 47673, 47673, -1000, -1000, 47673, -1000, 47673, 47673, 47673,
	47673, 47673, 39626, -1000, 47673, 47673, -1000, 47673, 1914, 47673,
	1909, 3199, -1000, 1745, 1745, 1010, -1000, -1000, 629, -1000,
	39626, 2139, 2137, 2116, 2105, 2440, 2431, 2429, 1745, 1745,
	2103, 2425, 39007, 2421, 1188, 2100, 2098, 2096, 2222, 2420,
	1043, -1000, 2418, 2187, 2097, 2066, 47673, 2794, 2362, 551,
	-1000, -1000, 1995, 131, 1745, 390, 47673, 1823, 1817, 624,
	578, -8, 22913, -1000, -1000, -1000, 47673, 35912, 35912, 35912,
	35912, -1000, 3101, 3096, 3086, -1000, 3089, 3085, 3095, 47673,
	35912, 2792, -1000, 39007, -1000, -1000, -1000, 1352, 1622, 3124,
	1059, 11110, -1000, -1000, 44, 52, -1000, -1000, -1000, -1000,
	38388, 2417, 588, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3277, 47673, 47673, 870, 2624, 1364, -1000, -1000, -1000, 5023,
	2770, 2770, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2770, 2770, 2782, -1000, -1000, 2768, 2768, 2768, 2711,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2778, 2778, 2781, 2781, 2778, -1000, -1000, 3338, -1000, 1358,
	-1000, -1000, 1509, -1000, 3338, 1887, -311, 14229, 1864, 1777,
	-1000, 11110, 14229, 11110, -238, 371, -241, -1000, -1000, -1000,
	2416, -1000, -1000, -1000, 2091, -1000, 2075, -1000, 188, 214,
	1906, -209, 8616, 453, 47673, -209, 47673, 8616, -1000, 47673,
	177, -346, -348, 166, 413, -209, 3277, 72, 11110, 3144,
	-1000, -1000, 47673, 2068, -1000, -1000, -1000, 3349, 38388, 2326,
	1696, 37769, -1000, 337, -1000, 259, 608, 2412, -1000, 941,
	135, 2409, 2407, -1000, -1000, -1000, -1000, 12976, 1629, -1000,
	-1000, -1000, 2233, 11110, 2622, -1000, 1039, 1039, 2278, 2618,
	2610, -1000, 2770, 2770, -1000, 2711, 2768, 2711, 1039, 1039,
	2606, -1000, 2192, 2500, -1000, 2485, 2454, 11110, -1000, 2605,
	3987, 1445, -56, -178, 169, 169, -1000, -1000, -1000, -1000,
	169, 169, 169, 169, -1000, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 844, -86, -266, -88, -267,
	-1000, 2604, 1356, -1000, -1000, -1000, -1000, -1000, 4300, 1341,
	601, 601, 2407, 2406, -1000, 900, 2405, 1092, 47673, 2403,
	-289, -1000, -1000, 2401, -1000, -1000, 47673, 2398, -1000, 667,
	47673, 47673, 2397, 2395, 1197, 5023, 2602, 3211, 17336, 3195,
	2207, -1000, -1000, -1000, 28484, 605, -1000, -1000, -1000, 784,
	317, 2067, 590, -1000, 47673, 523, 3128, 1816, 2391, 47673,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3170, -1000, 1009,
	503, 34674, 14850, -1000, 414, 47673, -1000, 17336, 17336, 414,
	533, 1803, -1000, 843, 1272, 148, 35912, 47673, -1000, 35293,
	2583, -1000, 1219, 3340, -1000, 2233, 2233, -324, 3340, 3340,
	1718, -1000, -1000, 533, -1000, 414, -1000, 1190, 18574, 636,
	491, 450, -1000, 699, -1000, -1000, 833, 3139, 5023, -1000,
	47673, -1000, 47673, -1000, 47673, 47673, 878, 11110, 3139, 47673,
	899, -1000, 1168, 524, 465, 863, 863, 1340, -1000, 3191,
	-1000, -1000, 1338, -1000, -1000, -1000, -1000, 47673, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 25389, 25389, 3233, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2390, 2389, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47673, 1591, -1000, 1813, 2062, 2387, 2207, 28484,
	1807, 1758, 2385, 2382, 605, 2196, 1802, 940, 47673, -1000,
	1212, 47673, 47673, -1000, 1306, -1000, 1798, 3047, 3062, 3047,
	-1000, -1000, -1000, -1000, -1000, 3083, -1000, 3079, -1000, -1000,
	1306, -1000, -1000, -1000, -1000, -1000, 1059, -1000, 3275, 1067,
	1067, 1067, 2581, -1000, -1000, -1000, 1331, 2579, -1000, -1000,
	-1000, 3363, -1000, -1000, -1000, -1000, -1000, -1000, 16717, 3165,
	3336, 3328, 37150, 3336, -1000, -311, 1830, -1000, 2033, 196,
	1880, 47673, -1000, -1000, -1000, 2578, 2576, -215, 191, 3326,
	3325, 1106, -1000, 2575, 1310, -209, -1000, -1000, 1251, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -209, -1000, 1251, -1000,
	188, -1000, -1000, 3145, -1000, -1000, 2326, -1000, 258, -1000,
	-1000, -1000, -1000, -1000, -1000, 261, -1000, 47673, -1000, 1293,
	128, -1000, 2233, -1000, -1000, -1000, -1000, -1000, 4860, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11110, -1000, -1000, -1000, 2432, -1000, -1000, 11110, 2571, 2381,
	2570, 2380, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3372, -1000,
	3324, 1568, 2562, 2560, 1567, 2559, 2554, -1000, 11110, 2553,
	4300, 1017, 2376, 1017, -1000, -1000, 422, 27865, 47673, 3345,
	-1000, 47673, 2374, -1000, -1000, 1995, 660, 736, -1000, -1000,
	-1000, -1000, 959, 414, 2548, 1273, -1000, -1000, -1000, -1000,
	414, -1000, 2369, 224, -1000, -1000, -1000, -1000, 2365, 2363,
	2061, -1000, -1000, 2027, 1533, 281, -1000, -1000, -1000, -1000,
	-1000, -1000, 2065, 47673, 36531, 2070, 1791, -326, -1000, 2765,
	-1000, 1745, 1745, 1745, 47673, 1565, -1000, 1745, 1745, 2541,
	-1000, -1000, 2540, 2539, -137, 848, 1754, 1746, -1000, 2055,
	27246, 35912, 35293, 1288, -1000, 1506, -1000, -1000, -1000, -1000,
	-1000, -1000, 3340, 848, -1000, 620, 2041, 12976, 2764, 12976,
	2763, 652, 2758, 1548, -1000, 47673, -1000, -1000, 47673, 468,
	2754, -1000, 2753, 3053, 594, 2752, 2748, 47673, 2428, -1000,
	3139, 47673, 796, 3160, -1000, -1000, -1000, 451, -1000, -1000,
	677, -1000, 47673, -1000, 47673, -1000, 1601, -1000, 25389, -1000,
	-1000, 1507, -1000, 2362, 2361, 4300, -1000, -1000, 224, 2358,
	6119, -1000, -1000, -1000, 3128, 2354, 2065, 47673, -1000, 47673,
	1212, 1212, 3372, 47673, 8616, -1000, -1000, 11110, 2746, -1000,
	11110, -1000, -1000, -1000, -1000, -1000, 2742, 3159, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2014, -1000, 11110, 11110, -1000,
	-1000, 869, 14229, -243, 363, -1000, -1000, -1000, -217, 2353,
	-1000, -1000, 3323, 2350, 2231, 47673, -1000, -1000, 1251, 1251,
	-215, -1000, -1000, 1219, -1000, -1000, 1154, 755, -1000, 2538,
	2413, -1000, 2273, 169, -1000, 169, -1000, 268, 11110, -1000,
	2348, -1000, -1000, -1000, 2347, -1000, -1000, 2264, -1000, 2533,
	-1000, 2346, -1000, -1000, 47673, -1000, -1000, 1088, 2345, -329,
	2343, 1995, 1995, 47673, 5023, -139, -137, 17336, -139, -1000,
	-1000, 392, -1000, -1000, 400, -1000, -1000, 2025, 649, -1000,
	-1000, 2337, 591, -1000, 1212, -1000, 1782, 1939, 2265, 32817,
	25389, 26627, 2336, -1000, -1000, 34674, 2014, 2014, 50805, 389,
	50843, -1000, 2740, 1136, 1739, -1000, 2034, -1000, 2031, -1000,
	3340, 1288, 138, -1000, -1000, 1669, -1000, 1136, 2419, 3319,
	-1000, 3520, 47673, 2889, 47673, 2739, 1778, 12976, -1000, 833,
	3112, -1000, -1000, 468, -1000, -1000, 1945, 12976, -1000, -1000,
	2335, 26627, 998, 1774, 1768, 999, 2724, -1000, 688, 3362,
	-1000, -1000, -1000, 1004, 2717, -1000, 1905, 1904, -1000, 47673,
	-1000, 32817, 32817, 749, 749, 32817, 32817, 2716, 863, -1000,
	-1000, 12976, -1000, -1000, 1745, -1000, -1000, -1000, 1745, 1600,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2070, -1000, -1000,
	1193, -1000, 3288, -1000, -1000, 2233, 47673, 2233, 34055, -1000,
	3318, 3313, -1000, 2233, 246, -1000, -311, 47673, 47673, -219,
	2022, -1000, 2330, 209, -1000, -1000, 1183, -217, -225, 129,
	25389, 1766, -1000, -1000, -1000, -1000, -1000, 2505, -1000, 661,
	-1000, -1000, -1000, 1173, 2490, 2437, -1000, -1000, -1000, -1000,
	47673, -1000, 2252, -1000, 2329, 2327, 657, -111, -1000, -1000,
	439, -1000, -1000, -1000, 615, 2221, -1000, -1000, 399, -1000,
	-1000, -1000, 2065, 2322, -1000, -1000, 127, -1000, 1763, 1488,
	-1000, 2711, 11110, -1000, -1000, -1000, -1000, -1000, -1000, 818,
	-1000, 414, 5034, -1000, 1150, 26008, -1000, 1154, 818, 554,
	31579, 700, 335, -1000, 2007, -1000, -1000, 3372, -1000, 687,
	-1000, 640, -1000, 1464, -1000, 1461, 33436, 2002, 2256, -1000,
	3804, 950, -1000, -1000, 4046, -1000, -1000, -1000, -1000, -1000,
	-1000, 2320, 2317, -1000, -1000, -1000, -1000, -1000, 2001, 2710,
	56, 3230, 2293, -1000, -1000, 2709, 1457, 1450, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1425, 1416, 32817,
	-1000, -1000, 4046, 1996, 25389, 1745, -1000, -1000, 1409, 1398,
	-1000, -1000, -1000, -1000, -1000, -296, -1000, -1000, -1000, 2706,
	-1000, -1000, 3312, -219, -231, 2291, 187, 195, -1000, 2284,
	-1000, -1000, 685, -211, 162, 154, 140, -1000, -1000, -1000,
	11110, -1000, -1000, -1000, 117, -1000, 1760, -1000, -1000, 1995,
	47673, 683, -1000, -1000, -1000, -1000, 260, -1000, -1000, -1000,
	-1000, -1000, -1000, 2265, 2260, -1000, 32817, 3191, 2225, 617,
	3308, -1000, 50843, -1000, 1745, -1000, 617, 1351, -1000, 1745,
	1745, -1000, 536, -1000, 1675, -1000, 1992, -1000, 3288, -1000,
	510, -1000, 595, -1000, -1000, -1000, 1349, -1000, -1000, -1000,
	3804, 625, -1000, 812, 2705, -1000, -1000, 2433, 11110, 2701,
	1745, 2283, -107, 32817, 3049, 3048, 3000, 2787, 1347, -1000,
	-1000, 25389, -1000, -1000, 32198, -1000, 47673, 2231, -1000, -1000,
	2253, -1000, 882, 204, 195, -1000, 3306, 208, 3303, 3302,
	1164, 1895, -1000, 172, 157, 150, -1000, -1000, -1000, -1000,
	-1000, 2252, 2245, 2243, 593, -1000, 330, -1000, -1000, -1000,
	311, -1000, -1000, 3191, -1000, 3293, 662, -1000, 25389, -1000,
	-1000, 31579, 2014, 2014, -1000, -1000, 1989, -1000, -1000, -1000,
	-1000, 1971, -1000, -1000, -1000, 1334, -1000, 47673, 1011, 7994,
	-1000, 1915, -1000, 47673, -1000, 3061, -1000, 296, 1333, 311,
	749, 311, 749, 311, 749, 311, 749, 324, -1000, -1000,
	-1000, 1302, -1000, -1000, -1000, 2615, 1965, 191, 205, 3292,
	-1000, 2231, 3291, 2231, 2231, -1000, 178, 685, -1000, -1000,
	-1000, -1000, -1000, -1000, 2242, -1000, -1000, -1000, -1000, 1745,
	1745, 2241, 2239, 485, -1000, -1000, -1000, 30960, 636, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 625, 50843, -1000, 7994,
	1301, -1000, 2233, -1000, 863, -1000, -1000, 3060, 3059, 3344,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	47673, 3204, 24770, 184, -1000, -1000, -1000, 2235, -1000, 2231,
	-1000, -1000, 1743, -1000, -264, 1962, 1960, -1000, -1000, 47673,
	-1000, 47673, 620, -1000, 50843, 1268, -1000, 7994, -1000, -1000,
	3346, -1000, 3359, 965, 965, 311, 311, 311, 311, -1000,
	-1000, 47673, -1000, 1255, -1000, -1000, -1000, 1487, -1000, -1000,
	-1000, -1000, 2223, -1000, -1000, 2219, -1000, -1000, -1000, 1249,
	2419, -1000, -1000, -1000, -1000, -1000, 2006, 707, -1000, 1162,
	-1000, 1742, -1000, 30341, 47673, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47673, 7372, -1000, 1191, -1000, -1000, 2233, 47673,
	-1000,
}

var yyPgo = [...]int{
	0, 180, 3397, 251, 178, 4039, 98, 260, 247, 243,
	259, 4037, 4035, 4034, 4033, 3179, 3175, 4032, 4031, 4030,
	4028, 4027, 4026, 4020, 4019, 4018, 4017, 4016, 4014, 4013,
	4012, 4011, 4010, 4009, 4008, 4007, 4005, 4004, 4002, 4001,
	4000, 3999, 3998, 3997, 3982, 3981, 3976, 256, 3974, 3973,
	3972, 3971, 3970, 3969, 3967, 3966, 3964, 3963, 3959, 3958,
	3957, 3956, 3951, 3946, 3943, 3942, 3940, 3939, 3935, 3934,
	3931, 3916, 3915, 3914, 3911, 3908, 3907, 3901, 3900, 255,
	3898, 3896, 241, 3893, 3171, 3891, 3889, 3888, 3886, 3885,
	3884, 3883, 3882, 245, 3877, 3875, 3864, 3862, 3861, 3860,
	3859, 3856, 3854, 3853, 3852, 3851, 230, 3849, 3848, 3846,
	3844, 263, 3843, 228, 3839, 176, 158, 3837, 3836, 3830,
	3825, 3824, 3822, 3821, 3819, 3818, 3816, 3814, 3812, 3809,
	249, 210, 65, 3807, 49, 3806, 3801, 223, 3799, 155,
	3798, 153, 3795, 3793, 3792, 3791, 3790, 3788, 3787, 3782,
	3781, 3780, 3779, 3777, 3776, 3775, 3774, 3773, 3772, 3770,
	3769, 3768, 3767, 3766, 3765, 48, 3764, 270, 3763, 78,
	3761, 182, 3760, 66, 3757, 74, 134, 264, 1944, 262,
	257, 186, 181, 102, 3756, 307, 3754, 164, 232, 161,
	32, 3753, 145, 3752, 268, 45, 58, 254, 149, 52,
	168, 130, 3749, 214, 104, 115, 3748, 3747, 146, 3746,
	242, 185, 3745, 111, 3744, 3743, 3741, 3740, 3739, 199,
	196, 3738, 3736, 135, 3734, 3733, 94, 133, 3730, 76,
	127, 172, 124, 3728, 287, 128, 83, 3726, 125, 108,
	3725, 138, 3724, 3723, 3716, 3714, 183, 3713, 3711, 136,
	57, 3710, 3709, 3708, 75, 3707, 85, 3706, 88, 3705,
	64, 3702, 3701, 3699, 3698, 3697, 3696, 3695, 3692, 3689,
	3688, 3685, 3681, 71, 3679, 3678, 7, 10, 16, 3677,
	25, 3676, 173, 3675, 3674, 169, 3673, 193, 3671, 3670,
	92, 91, 3656, 97, 167, 3654, 9, 27, 72, 3653,
	3651, 222, 194, 110, 152, 3650, 275, 3649, 3648, 3647,
	162, 3646, 2676, 3644, 3643, 3642, 3640, 3639, 3638, 137,
	3637, 1, 221, 41, 3635, 140, 141, 3634, 39, 29,
	3633, 44, 121, 198, 139, 106, 3632, 3631, 3630, 267,
	197, 100, 96, 0, 103, 231, 163, 3629, 3627, 3626,
	261, 3625, 236, 206, 237, 353, 265, 200, 3624, 3623,
	56, 3622, 165, 33, 55, 144, 240, 22, 295, 3621,
	1723, 8, 207, 3620, 208, 3619, 283, 17, 116, 151,
	3617, 3616, 35, 269, 3614, 3612, 3611, 132, 3610, 3609,
	333, 82, 3607, 3606, 3605, 3603, 38, 3602, 37, 13,
	3601, 113, 3600, 250, 3599, 216, 142, 190, 184, 159,
	233, 234, 80, 79, 3598, 1789, 156, 109, 15, 3597,
	226, 3594, 174, 118, 3593, 81, 3592, 253, 271, 205,
	3588, 191, 11, 47, 36, 28, 43, 12, 315, 219,
	3587, 3586, 24, 54, 3584, 67, 3582, 19, 3581, 3580,
	40, 3579, 53, 5, 3578, 3575, 18, 21, 3574, 31,
	211, 175, 129, 95, 59, 3573, 3571, 50, 188, 3570,
	154, 157, 171, 3568, 77, 3567, 3566, 3565, 3564, 918,
	3563, 258, 3561, 3559, 3556, 3554, 3553, 3552, 3550, 3548,
	3542, 225, 3538, 105, 42, 3537, 3536, 3535, 3534, 87,
	147, 3528, 3513, 3512, 3508, 30, 148, 3507, 14, 3506,
	26, 23, 34, 3505, 107, 3503, 3, 187, 3501, 3499,
	4, 3498, 3497, 2, 3496, 3494, 123, 3493, 99, 20,
	170, 114, 3486, 3485, 86, 212, 150, 3483, 3480, 101,
	252, 203, 3477, 93, 246, 266, 3476, 209, 3475, 3473,
	3472, 3471, 3470, 3469, 1212, 3468, 3466, 239, 61, 90,
	3465, 227, 122, 3464, 3463, 89, 166, 126, 119, 51,
	84, 3462, 117, 201, 3460, 195, 3459, 238, 3458, 3457,
	112, 3454, 3442, 3438, 3436, 202, 3435, 3434, 192, 235,
	3426, 3422, 272, 3421, 3420, 3418, 3415, 3412, 3411, 3409,
	3404, 3401, 3399, 244, 204, 3394,
}

//line mysql_sql.y:12480
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 598, 601, 601, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 121,
	121, 334, 334, 335, 335, 123, 330, 330, 329, 329,
	124, 125, 126, 577, 577, 127, 128, 157, 576, 576,
	159, 159, 159, 159, 159, 450, 122, 122, 122, 122,
	122, 163, 163, 163, 163, 163, 120, 583, 583, 583,
	584, 584, 117, 146, 145, 148, 148, 147, 147, 144,
	144, 140, 143, 143, 142, 142, 141, 136, 138, 138,
	137, 139, 139, 118, 106, 119, 525, 525, 524, 524,
	523, 523, 475, 475, 476, 476, 321, 321, 321, 522,
	522, 522, 521, 521, 520, 520, 519, 519, 517, 517,
	518, 516, 515, 515, 515, 513, 513, 513, 509, 509,
	511, 510, 510, 512, 504, 504, 507, 507, 505, 505,
	505, 505, 508, 503, 503, 503, 502, 502, 105, 105,
	105, 417, 417, 104, 104, 431, 431, 431, 431, 431,
	429, 429, 429, 429, 429, 429, 428, 428, 427, 427,
	432, 432, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 94, 94, 94, 94, 94, 94, 99,
	99, 99, 100, 589, 589, 588, 588, 590, 590, 590,
	590, 591, 591, 97, 97, 97, 98, 426, 426, 426,
	95, 96, 96, 416, 416, 421, 421, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	425, 425, 425, 423, 423, 422, 422, 424, 424, 88,
	88, 88, 91, 90, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 89, 89, 89, 89, 89, 89, 83,
	83, 83, 83, 83, 82, 82, 84, 84, 413, 413,
	412, 101, 101, 102, 586, 586, 585, 587, 587, 587,
	587, 103, 109, 109, 109, 109, 109, 109, 109, 109,
	108, 108, 111, 111, 110, 112, 93, 93, 93, 93,
	93, 93, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 550, 550, 550, 552, 552,
	348, 349, 602, 351, 347, 347, 347, 546, 546, 547,
	548, 549, 549, 549, 107, 14, 209, 209, 449, 449,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 81, 86, 86, 87, 286, 286, 287, 281, 281,
	288, 288, 162, 289, 289, 289, 294, 294, 295, 295,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 268, 268, 268, 263, 263, 263, 263, 264,
	264, 265, 265, 266, 266, 266, 266, 267, 267, 340,
	340, 290, 290, 290, 292, 292, 291, 285, 283, 283,
	283, 283, 283, 283, 283, 284, 284, 284, 284, 293,
	293, 79, 85, 85, 85, 85, 564, 564, 80, 575,
	575, 479, 479, 362, 362, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 485, 486, 358, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 54, 57,
	58, 161, 53, 53, 53, 402, 402, 52, 603, 603,
	333, 333, 67, 66, 56, 68, 69, 70, 71, 72,
	73, 51, 65, 65, 65, 65, 65, 65, 65, 65,
	76, 498, 498, 605, 605, 605, 74, 75, 478, 478,
	478, 64, 63, 62, 61, 60, 60, 50, 50, 49,
	49, 55, 152, 59, 153, 153, 355, 355, 355, 357,
	357, 353, 604, 604, 445, 445, 356, 356, 48, 48,
	48, 48, 77, 354, 354, 332, 352, 352, 352, 12,
	12, 10, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 26,
	27, 29, 410, 410, 407, 28, 20, 19, 19, 23,
	22, 18, 18, 21, 24, 25, 25, 9, 9, 9,
	9, 15, 15, 16, 182, 182, 235, 235, 558, 558,
	554, 554, 555, 555, 555, 556, 556, 557, 557, 113,
	492, 492, 492, 492, 492, 492, 8, 8, 204, 204,
	491, 491, 491, 491, 491, 491, 414, 414, 414, 535,
	535, 535, 536, 203, 203, 198, 198, 493, 493, 379,
	537, 537, 501, 501, 500, 500, 499, 499, 201, 201,
	202, 202, 185, 185, 131, 131, 506, 506, 506, 506,
	514, 514, 474, 474, 273, 273, 323, 323, 324, 324,
	175, 175, 176, 176, 176, 176, 176, 176, 592, 592,
	593, 594, 595, 595, 596, 596, 596, 597, 597, 597,
	597, 597, 543, 543, 545, 545, 544, 200, 200, 196,
	196, 197, 197, 197, 195, 195, 194, 193, 193, 192,
	190, 190, 190, 191, 191, 191, 208, 208, 178, 178,
	178, 177, 177, 177, 177, 177, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 179, 179,
	551, 551, 551, 480, 480, 480, 488, 488, 303, 303,
	304, 304, 484, 484, 302, 302, 180, 180, 181, 181,
	181, 181, 301, 301, 300, 183, 183, 189, 188, 188,
	184, 184, 184, 184, 311, 311, 310, 310, 310, 310,
	116, 129, 129, 130, 207, 207, 309, 308, 308, 308,
	308, 206, 206, 205, 205, 199, 199, 187, 187, 187,
	187, 307, 186, 305, 582, 582, 581, 581, 580, 578,
	578, 578, 579, 579, 579, 579, 527, 527, 527, 527,
	527, 341, 341, 341, 346, 346, 344, 344, 344, 344,
	344, 350, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 39, 218, 219, 40, 220, 220,
	221, 221, 222, 222, 223, 224, 225, 225, 225, 225,
	38, 210, 210, 211, 211, 212, 212, 213, 214, 214,
	214, 217, 215, 216, 216, 600, 600, 599, 37, 37,
	30, 166, 166, 167, 167, 167, 169, 169, 269, 269,
	269, 168, 168, 170, 170, 170, 559, 561, 561, 563,
	562, 562, 562, 565, 565, 565, 565, 565, 566, 566,
	566, 566, 567, 567, 31, 149, 149, 173, 173, 154,
	570, 570, 570, 569, 569, 571, 571, 572, 572, 327,
	327, 328, 328, 164, 165, 165, 156, 151, 172, 172,
	172, 172, 172, 174, 174, 237, 237, 150, 155, 158,
	160, 560, 568, 568, 568, 411, 411, 408, 409, 409,
	406, 405, 405, 405, 574, 574, 573, 573, 573, 342,
	342, 32, 401, 401, 403, 404, 404, 404, 395, 395,
	395, 395, 36, 399, 399, 400, 400, 400, 400, 400,
	400, 400, 396, 396, 398, 398, 394, 394, 394, 394,
	394, 394, 394, 35, 171, 171, 393, 393, 390, 390,
	388, 388, 389, 389, 387, 387, 387, 391, 391, 43,
	78, 44, 45, 46, 42, 392, 392, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 133, 132, 132,
	132, 132, 132, 135, 135, 326, 326, 325, 325, 134,
	270, 270, 41, 248, 248, 466, 466, 461, 461, 461,
	461, 461, 482, 482, 482, 462, 462, 462, 463, 463,
	463, 465, 465, 465, 464, 464, 464, 464, 464, 481,
	481, 483, 483, 483, 433, 433, 434, 434, 434, 437,
	437, 453, 453, 454, 454, 452, 452, 459, 459, 458,
	458, 457, 457, 456, 456, 455, 455, 455, 455, 448,
	448, 447, 447, 435, 435, 435, 435, 435, 436, 436,
	436, 446, 446, 451, 451, 299, 299, 298, 298, 256,
	256, 257, 257, 297, 297, 254, 254, 255, 255, 255,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 533, 533, 534, 259,
	259, 271, 271, 271, 271, 271, 271, 258, 258, 260,
	260, 236, 236, 234, 234, 226, 226, 226, 226, 226,
	227, 227, 228, 228, 229, 229, 229, 233, 233, 232,
	232, 232, 232, 230, 230, 231, 231, 231, 231, 231,
	231, 419, 419, 530, 530, 531, 531, 526, 526, 526,
	529, 529, 529, 529, 529, 529, 529, 532, 532, 532,
	528, 528, 238, 320, 320, 320, 343, 343, 343, 343,
	345, 319, 319, 319, 253, 253, 252, 252, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	418, 418, 359, 359, 360, 360, 280, 279, 279, 279,
	279, 279, 277, 278, 276, 276, 276, 276, 276, 275,
	275, 274, 274, 274, 397, 397, 272, 272, 262, 262,
	262, 261, 261, 261, 460, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 317, 317, 317, 318, 318, 318,
	318, 318, 318, 318, 318, 369, 369, 375, 375, 542,
	542, 541, 239, 239, 239, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 249, 249, 249, 442, 442, 442,
	442, 443, 443, 443, 443, 444, 444, 444, 440, 440,
	441, 441, 380, 381, 381, 489, 489, 490, 490, 438,
	438, 439, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 497, 497, 497, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 553, 553, 553, 538, 538, 538, 539,
	539, 539, 539, 539, 539, 539, 539, 539, 539, 539,
	539, 540, 540, 540, 540, 540, 540, 540, 540, 540,
	540, 540, 540, 540, 540, 540, 540, 540, 315, 315,
	315, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 382,
	382, 383, 383, 494, 494, 494, 494, 494, 494, 495,
	495, 496, 496, 496, 496, 487, 487, 487, 487, 487,
	487, 487, 487, 487, 487, 487, 487, 487, 487, 487,
	487, 487, 487, 487, 487, 487, 487, 487, 487, 487,
	487, 487, 487, 487, 367, 312, 312, 312, 384, 376,
	376, 377, 377, 378, 378, 370, 370, 370, 370, 370,
	370, 371, 371, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 372, 372, 374, 374, 386,
	386, 386, 385, 385, 385, 385, 385, 385, 385, 251,
	251, 251, 251, 364, 364, 364, 363, 363, 363, 363,
	363, 363, 363, 363, 363, 363, 363, 363, 241, 241,
	241, 241, 245, 245, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 246, 246,
	246, 246, 246, 244, 244, 244, 244, 244, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 114, 115, 115,
	243, 322, 322, 467, 467, 470, 470, 468, 468, 469,
	471, 471, 471, 472, 472, 472, 473, 473, 473, 477,
	477, 331, 331, 331, 339, 339, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	4, 4, 4, 1, 2, 5, 6, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 5, 1, 3, 3, 1, 2, 2, 2,
	1, 2, 2, 3, 4, 4, 6, 1, 1, 1,
	2, 4, 6, 1, 4, 1, 3, 3, 4, 4,
	4, 4, 3, 3, 2, 4, 4, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 2, 2, 0, 1, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 3, 4, 4, 1, 2, 9, 7, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 2, 4, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	5, 3, 4, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 2, 1, 3, 2, 1, 2, 2,
	1, 2, 3, 2, 2, 3, 6, 3, 3, 1,
	1, 7, 7, 7, 8, 8, 0, 4, 7, 0,
	3, 0, 2, 0, 1, 1, 1, 1, 4, 2,
	2, 3, 3, 4, 5, 3, 4, 4, 2, 2,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	3, 3, 2, 5, 5, 0, 2, 7, 0, 1,
	0, 1, 5, 5, 3, 3, 2, 4, 4, 4,
	4, 4, 1, 1, 1, 3, 3, 1, 1, 1,
	6, 0, 1, 1, 1, 1, 5, 5, 0, 1,
	1, 3, 3, 3, 4, 7, 7, 5, 4, 7,
	8, 3, 3, 2, 3, 4, 0, 2, 2, 0,
	2, 2, 1, 1, 1, 1, 0, 1, 5, 5,
	6, 4, 3, 1, 3, 1, 1, 3, 5, 2,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 1, 3, 1, 4, 6, 6, 4, 4,
	4, 4, 4, 3, 6, 3, 5, 1, 1, 2,
	2, 11, 8, 9, 1, 3, 2, 4, 0, 2,
	0, 1, 1, 1, 1, 0, 1, 0, 1, 4,
	2, 1, 5, 4, 4, 2, 5, 5, 1, 3,
	2, 1, 5, 4, 4, 2, 0, 5, 4, 0,
	1, 3, 3, 1, 3, 1, 3, 1, 3, 4,
	0, 1, 0, 1, 1, 3, 1, 1, 0, 4,
	1, 3, 2, 1, 0, 8, 0, 4, 7, 4,
	0, 2, 0, 2, 0, 2, 0, 4, 1, 3,
	1, 1, 6, 4, 5, 7, 4, 5, 0, 1,
	3, 8, 0, 6, 0, 4, 6, 1, 1, 1,
	1, 1, 2, 3, 1, 3, 6, 0, 3, 0,
	1, 2, 4, 4, 0, 1, 3, 1, 3, 3,
	0, 1, 1, 0, 2, 2, 0, 2, 3, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 1, 2, 2, 7, 7,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 2,
	0, 4, 0, 2, 0, 2, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 3, 1, 1, 1,
	4, 4, 4, 3, 2, 2, 2, 3, 2, 3,
	4, 1, 3, 4, 0, 2, 1, 1, 2, 2,
	2, 0, 1, 2, 4, 1, 3, 1, 3, 2,
	3, 1, 4, 3, 0, 1, 1, 2, 5, 2,
	2, 2, 0, 2, 3, 3, 0, 1, 3, 1,
	3, 0, 1, 2, 1, 1, 0, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 1, 7, 1, 3,
	0, 1, 1, 3, 1, 3, 0, 1, 1, 1,
	14, 1, 3, 0, 1, 1, 3, 1, 1, 2,
	4, 1, 1, 1, 1, 0, 1, 2, 9, 9,
	7, 1, 2, 3, 3, 3, 0, 4, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 4,
	1, 1, 1, 3, 3, 4, 3, 3, 0, 1,
	1, 1, 0, 2, 7, 8, 10, 2, 2, 8,
	0, 3, 3, 0, 3, 0, 3, 0, 5, 1,
	3, 0, 3, 3, 0, 2, 9, 8, 0, 2,
	2, 3, 3, 0, 2, 0, 2, 4, 4, 4,
	4, 1, 0, 2, 2, 1, 3, 2, 1, 3,
	2, 1, 3, 2, 0, 1, 3, 4, 3, 1,
	1, 4, 1, 3, 1, 1, 1, 1, 0, 1,
	1, 1, 11, 0, 2, 3, 3, 2, 2, 3,
	1, 1, 1, 3, 3, 4, 0, 2, 2, 2,
	2, 2, 2, 6, 0, 4, 1, 1, 0, 3,
	0, 1, 1, 2, 4, 4, 4, 0, 1, 8,
	2, 4, 4, 4, 9, 0, 2, 11, 9, 11,
	8, 6, 9, 7, 10, 7, 6, 2, 2, 9,
	4, 5, 3, 0, 4, 1, 3, 0, 3, 6,
	0, 2, 10, 0, 2, 0, 2, 0, 3, 2,
	4, 3, 0, 2, 1, 0, 2, 3, 0, 2,
	3, 0, 2, 1, 0, 3, 2, 4, 3, 0,
	1, 0, 1, 1, 0, 6, 0, 3, 5, 0,
	4, 0, 3, 1, 3, 4, 5, 0, 3, 1,
	3, 2, 3, 1, 2, 0, 4, 6, 5, 0,
	2, 0, 2, 4, 5, 4, 5, 1, 5, 6,
	5, 0, 3, 0, 1, 1, 3, 3, 3, 0,
	4, 1, 3, 3, 3, 0, 1, 1, 3, 2,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 5, 4, 5, 1, 3, 3, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 5, 5, 5, 5,
	0, 1, 1, 3, 1, 1, 1, 1, 1, 7,
	9, 7, 9, 2, 1, 7, 9, 7, 9, 8,
	5, 0, 1, 0, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 3, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 2, 1, 2,
	2, 1, 1, 2, 2, 2, 3, 3, 2, 2,
	1, 5, 6, 4, 1, 1, 1, 5, 4, 1,
	1, 2, 0, 1, 1, 2, 5, 0, 1, 1,
	2, 2, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 2, 2, 2, 0, 3, 0, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 3, 5, 2, 2, 2, 2, 4, 1, 1,
	2, 5, 6, 8, 6, 6, 6, 1, 1, 1,
	1, 1, 1, 3, 4, 4, 4, 7, 9, 7,
	7, 7, 9, 7, 7, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 5,
	0, 1, 3, 0, 1, 0, 2, 0, 2, 0,
	1, 6, 8, 8, 6, 6, 5, 5, 5, 6,
	6, 6, 6, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 1, 1, 1, 4, 4, 6,
	8, 6, 4, 5, 4, 4, 4, 3, 4, 6,
	6, 7, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	8, 4, 2, 3, 2, 4, 2, 2, 4, 6,
	2, 2, 4, 6, 4, 2, 4, 4, 4, 0,
	1, 2, 3, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 3, 0,
	1, 1, 3, 1, 3, 3, 3, 3, 3, 2,
	1, 1, 1, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 1, 3, 4, 4, 5, 4, 5,
	3, 4, 5, 6, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 4, 1, 2, 3, 5,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -598, -601, -2, -5, 626, -1, -4, -115, -88,
	-7, -14, -117, -118, -8, -113, -9, -10, -12, -92,
	-108, -110, -112, -111, -47, -11, -107, -82, -83, -94,
	-101, -104, -105, -106, -119, -114, -116, -175, -120, -121,
	-122, -163, -125, -127, -128, 616, -89, -90, -91, -33,
	-32, -31, -30, -149, -154, -157, -159, -123, 549, 622,
	452, 14, 501, -15, -16, -543, -17, 261, -347, -348,
	-349, -351, -602, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -152,
	-153, -77, -57, -78, -58, -161, -124, -80, -79, -85,
	-81, -86, -151, -156, -13, -162, -87, 236, -84, 76,
	-95, -96, -97, -98, -99, -100, -102, -103, 376, 382,
	439, 615, 61, -176, -178, 636, 637, 640, 536, 539,
	160, 161, 163, 164, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 232, 16, 544,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-150, -25, -155, -23, -158, -160, -126, 256, 255, 38,
	322, 323, 324, 380, 254, 233, 235, 15, 31, 42,
	355, -177, 83, 537, 234, -179, 13, 642, -6, -3,
	-2, -136, -140, -144, -147, -148, -145, -146, -4, -115,
	118, 246, 617, -343, 372, 618, 620, 619, 86, 94,
	-336, -338, 452, 261, 376, 382, 615, 637, 640, 536,
	539, 551, 552, 553, 554, 555, 556, 557, 558, 560,
	561, 562, 563, 564, 565, 566, 576, 577, 567, 568,
	569, 570, 571, 572, 573, 574, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	504, 601, 602, 603, 604, 532, 559, 595, 596, 597,
	598, 353, 354, 541, 273, 297, 407, 303, 310, 160,
	179, 173, 202, 193, 537, 168, 277, 315, 278, 93,
	163, 487, 108, 464, 436, 166, 292, 294, 296, 533,
	534, 366, 299, 531, 298, 300, 302, 535, 279, 356,
	189, 184, 291, 275, 182, 280, 40, 281, 207, 282,
	283, 546, 460, 352, 466, 307, 52, 434, 183, 461,
	295, 463, 211, 215, 478, 479, 177, 178, 468, 481,
	206, 209, 210, 253, 349, 350, 43, 543, 265, 482,
	213, 205, 200, 490, 311, 309, 204, 176, 199, 276,
	65, 217, 216, 218, 430, 431, 432, 433, 284, 285,
	370, 477, 196, 185, 357, 169, 23, 485, 260, 465,
	383, 286, 304, 312, 212, 214, 267, 272, 545, 438,
	271, 308, 483, 181, 264, 293, 259, 486, 170, 385,
	287, 164, 301, 480, 489, 64, 398, 175, 167, 633,
	250, 161, 269, 274, 288, 289, 290, 530, 314, 313,
	305, 538, 197, 266, 203, 187, 174, 198, 162, 268,
	488, 399, 613, 355, 417, 195, 192, 270, 243, 484,
	467, 165, 421, 400, 190, 316, 608, 609, 610, 371,
	348, 317, 318, 188, 257, 458, 459, 321, 427, 339,
	401, 437, 408, 402, 224, 225, 325, 470, 472, 208,
	611, 328, 329, 330, 462, 331, 332, 333, 334, 375,
	56, 58, 95, 98, 97, 638, 639, 63, 29, 361,
	364, 396, 403, 341, 614, 542, 338, 342, 343, 365,
	25, 419, 387, 423, 422, 48, 49, 50, 53, 54,
	55, 57, 59, 60, 51, 529, 380, 393, 491, 45,
	47, 390, 27, 367, 418, 440, 337, 420, 451, 46,
	449, 450, 471, 26, 369, 368, 62, 44, 426, 428,
	429, 319, 335, 378, 623, 492, 373, 389, 392, 374,
	340, 363, 394, 67, 66, 386, 624, 381, 379, 336,
	547, 548, 344, 575, 358, 435, 526, 525, 524, 523,
	522, 521, 520, 519, 322, 323, 324, 404, 405, 406,
	416, 409, 410, 411, 412, 413, 414, 415, 454, 455,
	625, 473, 475, 476, 474, 238, 641, 359, 360, 241,
	627, 628, 96, 629, 631, 630, 28, 632, 635, -424,
	-422, -343, 537, 615, 382, 536, 539, 376, 355, 637,
	640, 380, 261, 322, 323, 324, 452, 353, -220, -343,
	641, -185, 245, 39, -234, -343, -185, -84, -16, -15,
	-177, -178, -234, 240, -352, 24, 434, -93, 435, 236,
	83, 77, -343, -9, -106, -8, -113, -82, -175, 439,
	-350, -343, 322, 322, -350, 240, -345, 271, 415, -343,
	-479, 246, -428, -401, 272, -427, -403, -430, -404, 32,
	232, 234, 233, 549, 268, 16, 380, 242, 14, 13,
	381, 254, 25, 26, 28, 15, 382, 384, 29, 385,
	388, 389, 390, 42, 393, 394, 261, 86, 94, 89,
	279, -219, -343, -378, -370, 115, -373, -365, -366, -368,
	-321, -517, -363, 83, 142, 143, 150, 116, 643, -367,
	-460, 36, 118, 555, 559, 595, 502, -313, -314, -315,
	-316, -317, -318, -343, -518, -516, 89, 99, 101, 105,
	106, 104, 102, 154, 186, 103, 90, 155, -178, 86,
	-538, 565, -337, 588, 601, 602, 603, 604, 587, 61,
	-487, -496, 239, -494, 153, 191, 257, 187, 14, 148,
	427, 188, 596, 597, 598, 562, 584, 504, 566, 576,
	591, 557, 558, 560, 552, 553, 554, 556, 567, 569,
	583, -497, 579, 589, 590, 575, 599, 600, 592, 593,
	594, 631, 88, 87, 582, 581, 568, 563, 564, 570,
	551, 561, 571, 572, 580, 585, 586, 364, 108, 365,
	366, 494, 356, 367, 246, 434, 70, 368, 369, 370,
	371, 372, 501, 373, 71, 374, 363, 261, 417, 375,
	190, 208, 506, 505, 507, 498, 495, 493, 496, 497,
	499, 500, 573, 574, 578, -129, -130, 606, -592, -306,
	-593, 6, 7, 8, 9, -594, 155, -583, 436, 545,
	89, 315, 353, 17, 494, 634, 535, 634, 535, 165,
	162, -415, 165, 114, 170, 169, -415, 634, 167, 633,
	325, 267, -392, -166, 353, 417, 331, 95, 271, -395,
	-393, 533, -481, 319, 315, 291, 241, 111, -167, 251,
	250, 109, 494, 239, 391, 310, 56, 58, -554, -555,
	229, 230, 231, -545, 527, -544, -343, 634, 366, 97,
	98, 633, 27, 240, 377, 267, 472, 470, 471, 473,
	474, 475, 476, -65, -498, -478, 467, 466, -356, 459,
	465, 457, 469, 460, 354, 333, 549, 332, 232, 627,
	534, 528, -331, 401, 437, 491, 492, 378, 438, 478,
	480, 461, 108, 194, 191, 241, 243, 240, 633, 353,
	494, 417, 95, 331, 240, -554, 162, 478, 480, 436,
	271, 415, 41, -421, 427, -420, -422, 479, 490, 87,
	88, 477, -331, 108, 458, 458, -592, -306, -176, -178,
	-116, -543, 535, 634, 241, 353, 417, 271, 242, 240,
	530, 533, 243, 494, 239, 322, 377, 267, 331, 95,
	167, 633, -480, -551, 32, -488, 226, 227, 228, 33,
	34, -1, 122, 642, -370, -370, -6, 645, -6, -370,
	-343, -343, 157, -241, -245, -242, -244, -243, -247, -246,
	191, 192, 153, 195, 201, 197, 198, 199, 200, 202,
	203, 204, 205, 206, 209, 210, 207, 31, 208, 257,
	187, 188, 189, 190, 211, 173, 193, 542, 219, 174,
	220, 175, 221, 176, 222, 177, 178, 223, 179, 182,
	183, 184, 185, 181, 156, -209, 89, 32, 83, 156,
	89, -201, 263, -185, -234, -226, 156, 643, -201, -592,
	-194, -195, 11, -234, -319, -343, 436, 125, -93, 77,
	-93, 435, 77, -546, -547, -548, -550, 236, 435, 434,
	-111, 156, 279, 17, -350, -350, 81, -234, -403, 271,
	-428, -401, 36, 80, 157, 244, 157, 80, 83, 378,
	353, 417, 379, 494, 240, 391, 243, 271, 392, 353,
	417, 240, 243, 494, 271, 353, 240, 243, 417, 271,
	392, 353, 457, 458, 243, 27, 383, 386, 387, 458,
	-502, 490, 157, 114, 111, 112, 113, -370, 132, -385,
	125, 126, 127, 128, 129, 130, 131, 139, 138, 149,
	142, 143, 144, 145, 146, 147, 148, 140, 141, 135,
	115, 133, 137, 134, 117, 152, -178, -370, -378, 61,
	-368, -368, -368, -368, -343, -460, -375, -370, 83, 83,
	83, 83, 156, 102, 89, -370, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, -495, 83,
	83, -382, -383, 83, 83, -363, -319, 83, 89, 89,
	83, 83, 83, 89, 83, 83, 83, -383, -383, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, -195, 157, -194, 83, -194, -195,
	-179, -178, 32, 33, 32, 33, 32, 33, 32, 33,
	-595, 624, 83, 99, 638, 224, 17, -343, 633, -343,
	89, 538, 89, 538, 483, 544, 168, 169, 170, -390,
	246, -390, -390, -218, -343, -220, 377, 243, 530, 243,
	-167, -390, -390, -390, -390, -390, 242, -390, 24, 240,
	240, 240, 240, -390, 501, 125, 125, 59, -556, 172,
	157, -545, -200, 83, 89, -355, 133, 137, -355, -302,
	18, -302, 24, 269, 269, 269, -355, 309, -603, -604,
	17, 135, -353, -604, -353, -353, -355, -605, 242, 468,
	43, 270, 269, -196, -197, 22, -196, 462, 458, -445,
	463, 464, -357, -604, -356, -355, -355, -356, -355, -355,
	-355, 32, 240, 243, 494, 331, 628, -603, -603, 31,
	31, -479, -479, -234, -479, -479, 528, -332, -343, -479,
	-479, -479, -286, -287, -234, -557, 245, -589, -588, 481,
	-591, 483, 162, -422, 162, -422, 86, -403, 271, 271,
	157, 125, 24, -423, 125, 136, -422, -422, -423, -423,
	-258, 41, -342, 153, -343, 89, -258, 41, -586, -585,
	-234, -195, -179, -178, 84, 84, 84, 538, 89, -479,
	-479, -479, -479, -479, -481, -479, -479, -479, -479, -479,
	-350, -210, -343, -220, 246, -479, -479, -479, -479, -180,
	-181, 144, -370, -343, -180, -3, -138, -137, 119, 120,
	122, 618, 372, 617, 621, 615, -422, 41, -473, 399,
	398, -467, -469, 83, -468, 83, -468, -468, -468, -468,
	-468, 83, 83, -470, 83, -470, -470, -467, -471, 83,
	-471, -472, 83, -472, -471, -343, -449, 544, -376, -378,
	-343, 39, -491, 61, -175, 83, 31, 83, -201, -343,
	188, 167, 632, -492, 61, -175, 83, 31, -195, -131,
	39, -197, 21, 156, 99, 89, -111, -93, 77, -111,
	84, 157, -549, 105, 106, -552, 206, 197, -343, -109,
	89, -7, -8, -9, -10, -47, -82, -79, -175, 233,
	536, 539, -519, -517, 83, 32, 426, 80, 17, -429,
	240, 494, 377, 267, 243, 353, -427, -410, -407, -405,
	-342, -403, -406, -405, -432, -319, 458, -132, 441, 440,
	321, -370, -370, -370, -370, -370, 104, 115, 348, 105,
	106, -365, -386, 32, 317, 318, -366, -366, -366, -366,
	-366, -366, -366, -366, -366, -366, -366, -366, -374, -384,
	-460, 83, 135, 133, 137, 134, 117, -368, -368, -366,
	-366, -260, -342, 153, 84, 157, -370, -542, -541, 119,
	-370, -370, -370, -370, -343, -539, -540, 508, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 518, 368, 363,
	369, 367, 356, 375, 370, 371, 190, 525, 526, 519,
	520, 521, 522, 523, 524, -376, -376, -370, -539, -376,
	-312, 33, 32, -378, -378, -378, 84, -370, -553, 346,
	345, 347, -198, -343, -376, 84, 84, 84, 99, -378,
	-378, -376, -366, -376, -376, -376, -376, -540, -312, -312,
	-312, -312, 144, -378, -378, -312, -312, -312, -312, 144,
	-312, -312, -312, -312, -312, -312, -312, -312, -312, -312,
	84, 84, 84, 144, -378, -196, -130, -500, -499, -370,
	41, -131, -197, -596, 625, 83, -319, -584, 89, 89,
	643, 167, 633, 17, 494, -343, 17, 240, -577, 32,
	538, 99, 538, 99, 484, 485, 166, 169, 168, 89,
	115, -343, -343, 35, 83, -210, -390, -390, -390, -561,
	-343, 90, -411, -408, -405, -343, -343, -401, -343, -332,
	-234, -390, -390, -390, -390, -234, -269, 53, 54, 55,
	-405, -168, 56, 57, -557, -544, 35, -199, -343, -577,
	-302, -368, -368, -370, -405, 271, -603, -355, -355, -333,
	-332, -357, -352, -357, -357, -302, -353, -355, -355, -370,
	-357, -353, -302, -343, 458, -302, -302, -445, -355, -354,
	-343, -354, -390, -332, -333, -333, -234, -234, -281, -288,
	-282, -289, 263, 237, 361, 362, 235, 233, 11, 234,
	-296, 310, -391, 502, -264, -265, 77, 42, -267, 261,
	403, 396, 273, 277, 93, 278, 436, 279, 242, 281,
	282, 283, 298, 300, 253, 284, 285, 286, 427, 287,
	161, 299, 288, 289, 290, 379, -259, 6, 334, 544,
	41, 51, 52, 450, 449, 547, 274, -343, -561, -559,
	31, -343, 31, -411, -343, -343, 157, 244, -188, -183,
	-187, -184, -189, -305, -307, -186, 83, -234, -178, -343,
	157, 482, 484, 485, -589, -423, -589, -423, 244, 32,
	426, -426, 426, 32, -401, -420, 478, 480, -416, 89,
	427, -406, -425, 80, 153, -499, -423, -423, -425, -425,
	152, 157, -587, 483, 484, 229, -196, 99, -577, -236,
	-234, -561, -410, -401, -343, -479, -236, -236, -236, -345,
	-345, 83, 156, 36, -343, -343, -343, -343, -301, 157,
	-300, 17, -344, -343, 35, 89, 156, -301, -139, -137,
	121, -370, -6, 617, -370, -6, -6, -370, -6, -370,
	-477, 400, 99, 99, -322, 89, -322, 99, 99, 99,
	550, 84, 89, -414, 80, -493, -379, -537, 606, -203,
	84, -198, -535, -536, -198, -202, -343, -491, -226, 125,
	125, 125, -493, -203, 84, -535, -196, 607, -131, -193,
	-192, -370, -343, 24, -111, -93, -547, 156, 353, 157,
	-199, -429, -409, -406, -431, 144, -343, -417, 157, 544,
	646, 87, 244, -574, -573, 418, 84, 157, -503, 245,
	501, 89, 643, 434, 224, 225, 104, 348, 105, 106,
	-460, -378, -374, -368, -368, -366, -366, -372, 258, -372,
	114, -370, 644, -369, -541, 121, -370, 35, 157, 35,
	157, 81, 156, 84, 84, 17, 17, 84, -370, 84,
	84, 84, 84, 17, 17, -370, 84, 156, 84, 84,
	84, 84, 81, 84, 157, 84, 84, 84, 84, 157,
	-378, -378, -370, -378, 84, 84, 84, -370, -370, -370,
	-378, 84, -370, -370, -370, -370, -370, -370, -370, -370,
	-370, -370, -439, 453, -439, -439, 157, 157, 157, 84,
	-131, 83, 99, 157, 639, -326, -325, 89, -343, -343,
	167, 633, -343, 89, 633, -343, 89, 89, 167, 170,
	170, 169, 89, 36, 24, 308, 24, -219, -221, -222,
	-223, -224, -225, 135, 158, 159, 83, -234, -234, -234,
	-563, 404, -575, 157, 41, -573, 494, -164, 321, -394,
	81, -171, 17, 544, -234, -234, -234, -234, -248, 35,
	17, -182, -235, -343, 83, 84, 157, -402, 81, -343,
	-333, -302, -302, -357, -302, -302, 157, 23, -355, -357,
	-357, -226, -353, -226, 156, -226, -332, -466, 35, -200,
	157, 21, 263, -233, -340, -230, -232, 248, -360, -231,
	251, -531, 249, 247, 109, 252, 306, 110, 242, -340,
	-340, 248, -268, 244, 35, -340, -284, 242, 351, 306,
	249, 21, 263, -283, 242, 110, -343, 248, 252, 249,
	247, -339, 125, -331, 152, 244, 43, 379, -339, 548,
	263, -339, -339, -339, -339, -339, -339, -339, 280, 280,
	-339, -339, -339, -339, -339, -339, -339, -339, -339, -339,
	-339, 162, -339, -339, -339, -339, -339, -339, 83, 326,
	275, 276, 308, -564, 404, 31, 359, 359, 360, -575,
	31, -172, 353, -287, -285, -354, 31, -308, -309, -310,
	-311, 68, 72, 74, 78, 69, 70, 71, 75, 31,
	157, -341, -346, 35, -343, 89, -341, -178, -183, -188,
	-341, 83, -588, -590, 486, 483, 489, -425, -425, 99,
	244, 83, 125, -425, -425, 41, -342, -585, 490, 484,
	-131, 157, 80, -236, -211, -212, -213, -214, -241, -319,
	192, 195, 197, 198, 199, 200, 202, 203, 204, 205,
	206, 209, 210, 207, 208, 257, 187, 188, 189, 190,
	211, 173, 193, 542, 174, 175, 176, 177, 178, 179,
	182, 183, 184, 185, 181, -343, -220, -302, -181, -183,
	-343, 89, -343, 144, -302, 122, -6, 120, -143, -142,
	-141, 123, 615, 621, 122, 122, 122, 84, 84, 84,
	157, 84, 84, 84, 157, 84, 157, 99, -506, 463,
	40, 157, 83, 84, 157, 61, 157, 125, 84, 157,
	-370, -343, 89, -370, 84, 61, -131, 89, 157, -190,
	37, 38, 156, 436, -343, -517, 84, -431, 157, 244,
	156, 156, -407, 382, -342, -409, 21, 544, -319, 39,
	-326, 125, 643, -343, 84, -372, -372, 114, -368, -365,
	84, 122, -370, 120, -239, -241, 398, 399, -370, -239,
	-240, -246, 153, 191, 257, 190, 189, 187, 398, 399,
	-258, -343, -370, -370, 84, -370, -370, 17, -343, -258,
	-366, -370, -195, -195, 84, 84, -438, -439, -438, -438,
	84, 84, 84, 84, -438, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 83, 99, 101, 99, 101,
	-499, -597, 63, 623, 62, 426, 104, 311, 157, 99,
	89, 644, 157, 125, 89, -343, -343, 17, 240, -343,
	17, 89, 170, 89, -576, 315, 353, -450, 99, 315,
	353, 494, 390, 84, 157, -319, -211, -200, 83, -200,
	-566, 465, 406, 416, -339, -362, -361, 355, 42, -485,
	427, 412, 413, -408, 271, -332, -572, 96, 125, 80,
	338, 342, 343, 339, 340, 341, -388, -389, -387, -391,
	-559, 83, 83, -175, 35, 133, -171, 83, 83, 35,
	-461, 328, -241, -234, -182, -343, 17, 157, -558, 156,
	-1, -343, -401, -355, -302, -370, -370, -302, -355, -355,
	-357, -343, -226, -461, -241, 35, -282, 237, 234, -435,
	308, 309, -436, -451, 311, -453, 83, -238, -319, -231,
	-530, -531, -390, -343, 110, -530, 110, 83, -238, -319,
	-319, -285, -319, -343, -343, -343, -343, -292, -291, -319,
	-294, 32, -295, -343, -343, -343, -343, 110, -343, 110,
	-263, 41, 48, 49, 50, -339, -339, 194, -266, 41,
	426, 428, 429, -294, 99, 99, 99, 99, 89, 89,
	89, -339, -339, 99, 89, -346, 89, -532, 169, 45,
	46, 99, 99, 99, 99, 41, 89, -271, 41, 291,
	295, 292, 293, 294, 89, 99, 41, 99, 41, 99,
	41, -343, 83, -533, -534, 89, 327, -450, -566, -339,
	359, -422, 125, 125, -362, -571, 321, -174, 494, 32,
	-204, 237, 234, -559, -413, -412, -319, -187, -187, -187,
	-187, 68, 68, 68, 68, 73, 68, 73, 68, -310,
	-413, -189, -200, -346, 84, -582, -581, -580, -578, 76,
	245, 77, -376, 483, 487, 488, -409, -358, 89, -416,
	-208, 24, -234, -234, -483, 301, 302, 84, 157, -241,
	-304, 19, 156, -304, 118, -6, -139, -141, -370, -6,
	-370, 617, 372, 618, 89, 99, 99, -514, 447, 442,
	444, 110, -379, -501, -500, 61, -175, -198, -493, -536,
	-499, -343, 644, 644, 644, 644, 61, -175, -493, -208,
	-506, -192, -191, 44, -343, 99, 17, -406, -401, 144,
	144, -343, 383, -417, 89, 405, 89, 240, 644, 89,
	-326, -365, -370, 84, -249, 178, 177, -249, 35, 84,
	84, -468, -468, -467, -470, -467, -249, -249, 84, 84,
	24, 84, 84, 84, -370, 84, 84, 157, -489, 503,
	-490, 577, -438, -438, -438, -438, -438, -438, -438, -438,
	-438, -438, -438, -438, -438, -438, -438, -438, -381, -380,
	263, 448, 630, 630, 448, 630, 630, 84, 157, -539,
	157, -334, 316, -334, -325, 89, 244, 89, 167, -343,
	89, 633, 89, -343, 89, 308, -343, -343, 89, 89,
	-223, -241, 84, 35, -227, -228, -229, -238, -230, -232,
	35, -567, 93, -562, 89, -343, 90, -568, 93, 407,
	155, 357, 41, 408, 409, 424, 352, 99, 99, 414,
	-560, -343, -173, 240, 353, -570, 52, 125, 89, -234,
	-387, -331, 152, 282, 331, -299, -298, -343, 89, -227,
	-175, -234, -227, -227, -175, -462, 330, 21, 99, 143,
	-201, 81, 156, -183, -235, -343, 144, 84, -302, -226,
	-302, -302, -355, -462, -175, -447, 312, 83, -445, 83,
	-445, 110, 339, -454, -452, 263, -290, 45, 47, -241,
	-528, -343, -526, -528, -343, -526, -526, -390, -370, -290,
	-238, 244, 31, 234, -293, 336, 337, 342, -418, 307,
	115, -418, 157, -190, 157, -343, -258, -258, 31, 89,
	89, -236, 84, 157, 125, 99, 89, -567, -562, 125,
	-423, 89, 89, -568, -572, 125, -237, 240, -332, 157,
	-204, -204, -302, 157, 125, -206, -205, 80, 81, -207,
	80, -205, 68, 68, -302, -580, -579, 24, -531, -531,
	-531, 84, 84, 15, -213, 41, -303, 20, 21, 144,
	-303, 122, 120, 122, 122, -343, 84, 84, -474, 608,
	-510, -512, 442, 21, 21, 15, 245, 84, -493, -493,
	-514, 45, 46, -401, -417, 427, -234, 157, 644, -239,
	-370, 84, -370, 84, 89, 84, 89, -195, 21, 84,
	157, 84, 84, 84, 157, 84, 84, -370, 84, -539,
	-335, 188, 89, -335, 353, -344, -343, 17, -343, 89,
	-450, 308, 308, 240, 238, -175, 84, 157, -175, 89,
	-565, 418, 89, 89, 99, 41, 99, 155, 410, -486,
	-165, 93, -236, 32, -204, -569, 93, 125, 643, 83,
	-339, -339, -339, -343, 84, 157, -339, -339, 84, 84,
	84, -256, 544, -463, 262, 99, 143, 99, 143, 99,
	-341, -183, -343, -302, -558, 156, -302, -463, -437, 313,
	99, -366, 83, -366, 83, -446, 310, 83, 84, 157,
	-343, -319, -253, -252, -250, 104, 115, 41, 396, -251,
	93, 152, 296, 299, 298, 274, 297, -280, -359, 80,
	402, 336, 337, -391, 608, 532, 247, 109, 110, 384,
	-360, 83, 83, 81, 316, 83, 83, -528, 84, -290,
	-319, 41, -293, 41, 349, 307, -291, -343, 152, -258,
	84, -534, 89, -539, -565, 89, -425, -570, 89, -165,
	-236, -559, -195, -412, -499, -370, 83, -370, 83, 68,
	11, 19, -363, -370, -378, 246, -6, 618, 372, -273,
	609, 89, 21, 89, -508, 89, -413, -474, -134, -270,
	-331, 279, 84, 84, 84, -438, -438, -441, -440, -444,
	448, 308, 456, -378, 89, 89, 84, 84, 89, -343,
	167, 89, 643, 89, -450, -450, -343, -215, -241, -169,
	544, -256, -229, -169, 21, 544, 356, 41, 99, 41,
	411, 89, -173, 125, 105, 106, -327, -328, 89, -396,
	-398, -319, 83, -258, -260, 89, -298, -363, -363, -254,
	-175, 35, -255, -296, -391, 544, -133, -132, -254, 544,
	83, -464, 161, 99, 143, 99, 99, -302, -302, -464,
	-453, 21, 84, -432, 84, -432, 83, 125, -366, -452,
	-455, 61, -250, 104, -366, 89, -260, -261, 41, 295,
	291, 125, 125, -262, 41, 275, 276, -272, 83, 306,
	15, 194, 83, 110, 110, -234, -396, -396, -529, 338,
	339, 340, 344, 342, 343, 341, -529, -396, -396, 83,
	-419, -418, -366, -339, -339, 152, -569, -196, -199, -527,
	-343, 247, 21, 21, -484, 544, -343, -343, -323, 610,
	99, 89, 444, -273, -475, 611, -504, -445, -258, 125,
	84, -443, 117, 410, 414, -364, -367, 99, 101, 186,
	155, 84, 84, -343, -330, -329, 89, 89, 89, 308,
	543, -170, 60, 490, 89, 90, 405, 89, 90, 356,
	-165, 89, 644, 157, 125, 84, 157, -467, -370, -433,
	263, -175, 157, -296, -331, -134, -433, -257, -297, -343,
	89, -482, 169, 329, 544, 99, 143, 99, -195, -465,
	169, 329, -436, 84, 84, 84, -432, 99, 84, -459,
	-456, 83, -296, 265, 135, 89, 89, 99, 83, -494,
	31, 89, -397, 83, 84, 84, 84, 84, -396, 99,
	-258, -339, 84, 84, 157, 635, 83, 21, -323, -476,
	612, 89, -513, 447, -507, -505, 442, 443, 444, 445,
	89, -442, -443, 414, -364, -367, 606, 454, 454, 454,
	644, 157, 125, -450, -217, -343, 306, 427, -328, 89,
	-399, -398, -190, 84, -434, 315, 21, -296, -339, -434,
	84, 157, -339, -339, 329, 99, 143, 99, -196, 329,
	-448, 314, 84, -459, -296, -458, -457, 313, 266, 83,
	84, -370, -382, -339, 84, -275, -274, 540, -396, -399,
	81, -399, 81, -399, 81, -399, 81, 84, -258, -343,
	247, -324, -343, -508, 89, -515, 245, -511, -512, 446,
	-505, 21, 444, 21, 21, -135, 157, 114, 455, 455,
	455, -329, 89, 89, -216, 35, 449, 383, -400, 253,
	349, 350, 93, 544, 336, 337, -190, 21, -435, -258,
	-297, -363, -363, 99, 99, 84, 157, -343, 262, 83,
	-377, -371, -370, 262, 84, -343, -279, -277, -278, 80,
	461, 304, 305, 84, -529, -529, -529, -529, -280, 84,
	157, -522, 83, 99, -510, -509, -511, 21, -508, 21,
	-508, -508, 451, -442, 89, -339, -339, 89, 89, 335,
	-319, 83, -447, -457, -456, -377, 84, 157, -418, -278,
	80, -277, 80, 16, 15, -399, -399, -399, -399, -343,
	-525, 31, 84, -521, -520, -320, -516, -343, 447, 448,
	89, -508, 125, -600, -599, 629, 99, 99, -343, -432,
	-437, 84, -371, -276, 301, 302, 31, 169, -276, -524,
	-523, -321, 84, 157, 156, 89, 89, 84, -453, 104,
	41, 303, 157, 125, -520, -343, -523, 41, -370, 156,
	-343,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 309, 310, 311, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 0, 0,
	0, 0, 0, 687, 688, 0, 651, 0, 0, 0,
	0, 0, 0, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 410, 411, 412,
	413, 414, 415, 416, 417, 418, 419, 0, 334, 330,
	253, 254, 255, 256, 257, 258, 341, 342, 511, 0,
	0, 0, 0, 770, -2, 97, 0, 0, 0, 0,
	323, 0, 314, 314, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, -2, 700, 0,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 394, 395, 396,
	390, 391, 393, 392, -2, 0, 0, 700, 0, 0,
	0, 778, 0, 0, 0, 821, 843, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1356, 1357,
	1358, 1359, 2141, 2111, -2, 1882, 1859, 2035, 2036, 1936,
	1947, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
	2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
	2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201,
	2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211,
	2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
	2222, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1860, 1861, 1862, 1863, 1864, 1865,
	1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875,
	1876, 1877, 1878, 1879, 1880, 1881, 1883, 1884, 1885, 1886,
	1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896,
	1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
	1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916,
	1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
	1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1937,
	1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1949,
	1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959,
	1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
	1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979,
	1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989,
	1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
	2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
	2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
	2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2037, 2038, 2039, 2040, 2041,
	2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,
	2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061,
	2062, 2063, 2064, 2065, 2066, 2067, -2, 2069, 2070, 2071,
	2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
	2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
	2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2112,
	2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121, 2122,
	2123, 2124, 2125, 2126, -2, -2, -2, 2130, 2131, 2132,
	2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2142, 2143,
	2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153,
	2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 0,
	307, 305, 1829, 1859, 1882, 1936, 1947, 1948, 1983, 2035,
	2036, 2068, 2111, 2127, 2128, 2129, 2141, 0, 0, 958,
	0, 748, 0, 0, 753, 1305, 748, 335, 689, 690,
	778, 804, 649, 0, 372, 0, 1873, 376, 2118, 0,
	0, 0, 646, 366, 367, 368, 369, 370, 371, 0,
	0, 931, 0, 0, 362, 0, 329, 1938, 2140, 1360,
	0, 0, 0, 0, 0, 196, 1082, 198, 1084, 202,
	210, 0, 0, 0, 215, 216, 219, 220, 221, 222,
	223, 0, 227, 0, 229, 232, 0, 234, 235, 0,
	238, 239, 240, 0, 250, 251, 252, 1085, 1086, 1087,
	-2, 125, 956, 1787, 1673, 0, 1680, 1693, 1704, 1437,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 0, 1448,
	1449, 0, 1477, 2177, 2218, 2219, 0, 1457, 1458, 1459,
	1460, 1461, 1462, 136, 148, 149, 1726, 1727, 1728, 1729,
	1730, 1731, 1732, 0, 1734, 1735, 1736, 1644, 1424, 1356,
	0, 2186, 0, 2208, 2213, 2214, 2215, 2216, 2207, 0,
	0, 1629, 0, 1619, 0, 0, -2, -2, 0, 0,
	2008, -2, 2220, 2221, 2222, 2183, 2204, 2212, 2187, 2188,
	2211, 2179, 2180, 2181, 2174, 2175, 2176, 2178, 2190, 2192,
	2203, 0, 2199, 2209, 2210, 2116, 0, 0, 0, 0,
	0, 2158, 150, 151, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1640, -2, -2, 1643, -2, 1646, -2, -2, -2,
	-2, 1651, 1652, -2, 1654, -2, -2, -2, -2, -2,
	-2, -2, 1631, 1632, 1633, 1634, 1623, 1624, 1625, 1626,
	1627, 1628, -2, -2, -2, 804, 881, 0, 804, 0,
	779, 826, 829, 832, 835, 782, 0, 0, 98, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 324,
	325, 313, 315, 0, 319, 0, 312, 1118, 1118, 1118,
	0, 0, 0, 0, 1118, 1118, 1118, 1118, 1118, 0,
	1118, 0, 0, 0, 0, 0, 1118, 0, 991, 1089,
	1090, 1091, 1116, 1117, 1190, 0, 0, 0, 705, 701,
	702, 703, 704, 792, 0, 794, 797, 0, 626, 626,
	854, 854, 572, 0, 0, 0, 626, 0, 586, 578,
	0, 0, 0, 626, 0, 0, 799, 799, 0, 629,
	636, 626, 626, -2, 626, 626, 623, 626, 0, 0,
	1130, 592, 593, 594, 578, 578, 597, 598, 599, 609,
	610, 637, 1811, 0, 0, 511, 511, 0, 511, 511,
	0, 511, 511, 511, 0, 707, 1978, 1880, 1953, 1839,
	1938, 2140, 0, 280, 2008, 285, 0, 1881, 1900, 0,
	0, 1918, 0, -2, 0, 351, 804, 0, 0, 778,
	0, 0, 0, 0, 511, 511, 511, 511, 511, 1189,
	511, 511, 511, 511, 511, 0, 0, 0, 511, 511,
	511, 511, 0, 0, 844, 845, 840, 841, 842, 846,
	847, 5, 6, 19, 0, 0, 0, 0, 0, 0,
	104, 103, 0, 1788, 1806, 1739, 1740, 1741, 1793, 1743,
	1797, 1797, 1797, 1797, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1797, 1797, 0, 0, 1786, 1763,
	1795, 1795, 1795, 1793, 1790, 1744, 1745, 1746, 1747, 1748,
	1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1800,
	1800, 1803, 1803, 1800, 0, 408, 406, 407, 1669, 0,
	0, 0, 0, 748, 752, 1303, 0, 0, 0, 804,
	-2, 0, 0, 650, 373, 1361, 0, 0, 377, 0,
	378, 0, 0, 0, 397, 0, 400, 385, 386, 387,
	381, 0, 176, 0, 364, 365, 0, 0, 331, 0,
	0, 0, 512, 0, 0, 0, 0, 0, 0, 207,
	203, 211, 214, 224, 231, 0, 243, 245, 248, 204,
	212, 217, 218, 225, 246, 205, 208, 209, 213, 247,
	249, 206, 226, 230, 244, 228, 233, 236, 237, 242,
	0, 177, 0, 0, 0, 0, 0, 1679, 0, 0,
	1712, 1713, 1714, 1715, 1716, 1717, 1718, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1673, 0, 0,
	1443, 1444, 1445, 1446, 0, 1450, 0, 1478, 0, 0,
	0, 0, 0, 1733, 1737, 0, 1669, 1669, 0, 1669,
	1665, 0, 0, 0, 0, 0, 0, 1669, 1602, 0,
	0, 1604, 1620, 0, 0, 1606, 1607, 0, 1610, 1611,
	1669, 0, 1669, 1615, 1669, 1669, 1669, 1598, 1599, 0,
	1665, 1665, 1665, 1665, 0, 0, 1665, 1665, 1665, 1665,
	1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665,
	0, 0, 0, 0, 799, 0, 805, 0, -2, 0,
	823, 825, 827, 828, 830, 831, 833, 834, 836, 837,
	784, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 0, 322, 0,
	0, 0, 0, 0, 955, 0, 0, 1118, 1118, 1118,
	992, 0, 0, 0, 0, 0, 0, 0, 0, 1118,
	1118, 1118, 1118, 0, 1136, 0, 0, 0, 707, 706,
	0, 793, 0, 0, 0, 854, 0, 0, 569, 570,
	0, 571, 0, 578, 626, 626, 584, 585, 580, 579,
	632, 633, 629, 0, 629, 629, 854, 0, 603, 604,
	605, 626, 626, 611, 800, 0, 612, 613, 629, 0,
	634, 635, 854, 0, 0, 854, 854, 0, 621, 622,
	624, 626, 0, 0, 1118, 0, 642, 580, 580, 1812,
	1813, 0, 0, 1127, 0, 0, 0, 0, 645, 0,
	0, 0, 424, 425, 0, 0, 708, 259, 263, 0,
	266, 0, 1978, 0, 1978, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 303, 304, 0, 0, 0, 0,
	294, 297, 1297, 1298, 1079, 1080, 298, 299, 343, 344,
	0, 799, 822, 824, 818, 819, 820, 0, 0, 0,
	0, 0, 0, 0, 511, 0, 0, 0, 0, 0,
	683, 0, 971, 685, 0, 0, 0, 0, 0, 862,
	856, 858, 926, 136, 862, 8, 121, 118, 0, 19,
	0, 0, 19, 19, 0, 19, 308, 0, 1809, 1807,
	1808, 1742, 1794, 0, 1768, 0, 1769, 1770, 1771, 1782,
	1783, 0, 0, 1764, 0, 1765, 1766, 1767, 1758, 0,
	1759, 1760, 0, 1761, 1762, 306, 405, 0, 0, 1670,
	959, 0, 726, 740, 721, 0, 729, 0, 0, 1305,
	0, 0, 0, 709, 740, 711, 0, 729, 799, 776,
	0, 754, 0, 0, 374, 0, 382, 379, 0, 383,
	0, 0, 399, 401, 402, 403, 388, 389, 647, 360,
	361, 352, 353, 354, 355, 356, 357, 358, 359, 0,
	0, 0, 363, 146, 0, 332, 333, 0, 0, 0,
	190, 191, 192, 193, 194, 195, 197, 181, 672, 674,
	1071, 1083, 0, 1074, 0, 200, 241, 173, 0, 0,
	0, 1674, 1675, 1676, 1677, 1678, 1683, 0, 1685, 1687,
	1689, 1691, 0, 1709, -2, -2, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1694, 1707,
	1708, 0, 0, 0, 0, 0, 0, 1705, 1705, 1700,
	0, 1463, 1299, 1300, 1441, 0, 0, 1475, 1479, 0,
	0, 0, 0, 0, 137, 1664, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
	1593, 1594, 1595, 1596, 1597, 0, 0, 1673, 0, 0,
	0, 1666, 1667, 0, 0, 0, 1557, 0, 0, 1563,
	1564, 1565, 0, 735, 0, 1630, 1603, 1621, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 880, 882, 0, 744, 746,
	747, 773, 754, 780, 0, 0, 0, 96, 101, 0,
	1157, 0, 0, 0, 0, 0, 0, 0, 71, 73,
	0, 1131, 0, 1133, 326, 327, 0, 0, 321, 0,
	0, 0, 0, 0, -2, 0, 0, 0, 0, 0,
	1007, 1008, 509, 1065, 0, 0, 0, 1081, 1106, 1114,
	0, 0, 0, 0, 0, 1163, 993, 998, 999, 1000,
	994, 995, 1001, 1002, 0, 795, 0, 0, 895, 70,
	568, 627, 628, 855, 575, 1938, 580, 854, 854, 587,
	581, 588, 631, 589, 590, 591, 629, 854, 854, 801,
	626, 629, 614, 630, 629, 1305, 618, 0, 625, 1305,
	643, 1305, 0, 641, 595, 596, 1165, 797, 422, 423,
	428, 430, 0, 479, 479, 479, 462, 479, 0, 0,
	450, 1814, 0, 0, 0, 0, 459, 1814, 0, 0,
	1814, 1814, 1814, 1814, 1814, 1814, 1814, 0, 0, 1814,
	1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814, 1814,
	0, 1814, 1814, 1814, 1814, 1814, 1282, 1814, 0, 478,
	1128, 469, 470, 471, 472, 477, 0, 0, 506, 0,
	0, 1006, 0, 509, 0, 1048, 0, 0, 867, 0,
	868, 869, 865, 897, 921, 921, 0, 921, 901, 1305,
	0, 0, 271, 272, 260, 0, 261, 0, 0, 274,
	275, 0, 277, 278, 279, 286, 1880, 1953, 281, 283,
	0, 0, 287, 300, 301, 302, 0, 0, 292, 293,
	0, 0, 346, 347, 349, 0, 754, 1132, 72, 669,
	1301, 670, 671, 675, 0, 0, 678, 679, 680, 681,
	682, 973, 0, 0, 1057, 1058, 1059, 1060, 854, 0,
	863, 0, 859, 927, 0, 929, 0, 854, 0, 119,
	19, 0, 112, 109, 0, 0, 0, 0, 0, 1789,
	1738, 1810, 0, 0, 0, 1791, 0, 0, 0, 0,
	0, 102, 756, 716, 0, 720, 737, 0, 741, 0,
	0, 733, 725, 730, 0, 0, 750, 717, 1304, 0,
	0, 0, 710, 0, 0, 715, 754, 0, 777, 806,
	807, 810, 1362, 0, 384, 380, 398, 0, 511, 0,
	0, 0, 184, 1068, 0, 185, 189, 179, 0, 0,
	0, 1073, 0, 1070, 1075, 0, 199, 0, 0, 174,
	175, 1148, 1157, 0, 0, 0, 1684, 1686, 1688, 1690,
	1692, 0, 1695, 1705, 1705, 1701, 0, 1696, 0, 1698,
	0, 1674, 1447, 0, 1480, 0, 0, 0, 0, 0,
	0, 0, 0, 1547, 1548, 0, 0, 1552, 0, 1554,
	1555, 1556, 1558, 0, 0, 0, 1562, 0, 1601, 1622,
	1605, 1608, 0, 1612, 0, 1614, 1616, 1617, 1618, 0,
	804, 804, 0, 0, 1519, 1519, 1519, 0, 0, 0,
	0, 1519, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 0, 1465, 1466, 0, 0, 0, 883,
	774, 0, 0, 0, 0, 0, 1155, 0, 86, 0,
	0, 0, 0, 91, 0, 0, 74, 75, 328, 316,
	318, 0, 0, 1119, 0, 0, 0, 0, 0, 961,
	962, 964, 0, 967, 968, 969, 973, 797, 0, 797,
	1018, 1814, 513, 0, 0, 1067, 0, 1037, 0, 0,
	0, -2, 0, 0, 1114, 0, 0, 0, 1167, 0,
	0, 0, 694, 698, 23, 798, 0, 573, 0, 574,
	626, 582, 583, 854, 606, 607, 0, 0, 854, 626,
	626, 617, 629, 638, 0, 639, 1305, 1167, 0, 0,
	1127, 1233, 1201, 440, 0, 1317, 1318, 480, 0, 1324,
	1333, 1118, 1394, 0, 1333, 0, 0, 1335, 1336, 0,
	0, 0, 0, 463, 464, 0, 449, 0, 0, 0,
	0, 0, 0, 448, 0, 0, 490, 0, 0, 0,
	0, 0, 1815, 1814, 1814, 0, 457, 458, 0, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 1814, 1814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1273, 0, 0, 0, 0, 0, 0, 0, 0,
	1289, 1290, 0, 1018, 1814, 0, 0, 0, 0, 513,
	1035, 1053, 0, 426, 427, 487, 0, 0, 0, 0,
	0, 887, 0, 0, 0, 886, 0, 0, 0, 0,
	0, 797, 922, 0, 924, 925, 899, -2, 0, 867,
	904, 1669, 264, 265, 0, 0, 270, 288, 290, 262,
	0, 0, 0, 289, 291, 295, 296, 345, 348, 350,
	816, 0, 0, 1191, 0, 974, 975, 977, 978, 0,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1864, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 972, 686, 850, 857, 864,
	928, 930, 137, 860, 850, 0, 122, 19, 121, 113,
	114, 0, 19, 0, 0, 0, 0, 1799, 1798, 1784,
	0, 1785, 1796, 1801, 0, 1804, 0, 409, 760, 0,
	0, 740, 742, 0, 0, 740, 0, 0, 749, 0,
	0, 0, 0, 0, 0, 740, 816, 756, 0, 813,
	811, 812, 0, 0, 648, 147, 404, 0, 0, 0,
	0, 0, 673, 0, 1072, 181, 0, 0, 201, 0,
	0, 0, 1157, 1152, 1668, 1697, 1699, 0, 1706, 1702,
	1442, 1451, 1476, 0, 0, 1482, 1494, 1494, 0, 0,
	0, 1485, 1797, 1797, 1488, 1793, 1795, 1793, 1494, 1494,
	0, 138, 0, 0, 1553, 0, 0, 0, 736, 0,
	0, 0, 1515, 1517, 1519, 1519, 1526, 1520, 1527, 1528,
	1519, 1519, 1519, 1519, 1533, 1519, 1519, 1519, 1519, 1519,
	1519, 1519, 1519, 1519, 1519, 1513, 0, 0, 1727, 1728,
	745, 0, 0, 787, 788, 789, 790, 791, 0, 0,
	61, 61, 1157, 0, 95, 87, 0, 0, 0, 0,
	0, 76, 320, 0, 77, 78, 0, 0, 85, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 1310, 0,
	1022, 1019, 1020, 1021, 0, 1062, 514, 515, 516, 517,
	0, 0, 0, 1066, 0, 0, 1030, 0, 0, 0,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, -2, 1122, 0,
	0, 0, 1310, 1141, 0, 0, 1146, 1310, 1310, 0,
	1175, 0, 1164, 748, 0, -2, 0, 0, 696, 0,
	0, 896, 576, 854, 600, 802, 803, 1305, 854, 854,
	626, 644, 640, 1175, 1166, 0, 429, 479, 0, 1221,
	0, 0, 1227, 0, 1234, 433, 0, 481, 0, 1323,
	1350, 1334, 1350, 1395, 1350, 1350, 1118, 0, 481, 0,
	0, 451, 0, 0, 0, 0, 0, 447, 484, 810,
	434, 436, 437, 438, 488, 489, 491, 0, 493, 494,
	453, 465, 466, 467, 468, 0, 0, 0, 460, 473,
	474, 475, 476, 435, 1250, 1251, 1252, 1255, 1256, 1257,
	1258, 0, 0, 1261, 1262, 1263, 1264, 1265, 1347, 1348,
	1349, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1291, 1292,
	1293, 1294, 1295, 1296, 1274, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 0, 0, 1286, 0, 0, 0, 1022, 0,
	0, 0, 0, 0, 1062, 1037, 0, 1055, 0, 1049,
	1050, 0, 0, 718, 854, 338, 0, 891, 884, 0,
	873, 888, 889, 890, 876, 0, 878, 0, 874, 875,
	854, 866, 898, 923, 900, 903, 905, 906, 912, 0,
	0, 0, 0, 267, 268, 269, 276, 0, 533, 282,
	772, 0, 1302, 676, 677, 1192, 1193, 684, 0, 979,
	848, 0, 0, 848, 117, 120, 0, 115, 0, 0,
	0, 0, 107, 105, 1792, 0, 0, 762, 161, 0,
	0, 0, 738, 0, 743, 740, 724, 734, 723, 731,
	732, 751, 1306, 1307, 1308, 1309, 740, 714, 713, 775,
	760, 808, 809, 0, 1363, 375, 0, 1069, 181, 186,
	187, 188, 182, 180, 1076, 0, 1078, 0, 1150, 0,
	0, 1703, 1481, 1452, 1483, 1495, 1496, 1484, 0, 1454,
	1455, 1486, 1487, 1489, 1490, 1491, 1492, 1493, 1456, 1549,
	0, 1551, 1559, 1560, 0, 1609, 1613, 0, 0, 0,
	0, 0, 1524, 1525, 1529, 1530, 1531, 1532, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 804, 1514,
	0, 0, 0, 0, 0, 0, 0, 785, 0, 0,
	0, 63, 0, 63, 1156, 1158, 0, 926, 0, 0,
	92, 0, 0, 79, 80, 0, 0, 0, 954, 957,
	963, 965, 0, 0, 0, 1311, 1312, 1314, 1315, 1316,
	0, 990, 0, 0, 1010, 1011, 1012, 1024, 0, 0,
	0, 519, 520, 0, 0, 0, 532, 528, 529, 530,
	510, 1061, 1044, 0, 0, 1033, 0, 0, 1043, 0,
	1123, 1814, 1814, 1814, 0, 0, 1235, 1814, 1814, 0,
	1143, 1145, 0, 0, 1239, 1178, 0, 0, 1169, 0,
	921, 0, 0, 854, 695, 698, 699, 796, 577, 615,
	619, 616, 854, 1178, 421, 1199, 0, 0, 0, 0,
	0, 1231, 0, 0, 1203, 0, 452, 482, 0, -2,
	0, 1351, 0, 1337, 1351, 0, 0, 1350, 0, 441,
	481, 0, 0, 0, 495, 499, 500, 0, 497, 1390,
	0, 498, 0, 486, 0, 492, 1253, 1254, 0, 1259,
	1260, 0, 1284, 0, 0, 0, 432, 501, 0, 0,
	0, 502, 503, 508, 1030, 0, 1044, 0, 1054, 0,
	1051, 1052, 804, 0, 0, 870, 892, 0, 0, 871,
	0, 872, 877, 879, 337, 907, 0, 0, 909, 910,
	911, 902, 284, 817, 976, 0, 838, 0, 0, 861,
	839, 0, 19, 0, 0, 110, 1802, 1805, 764, 0,
	761, 162, 0, 0, 0, 0, 728, 739, 722, 712,
	762, 814, 815, 183, 178, 1077, 1160, 0, 1151, 0,
	0, 1561, 0, 1519, 1516, 1519, 1518, 1510, 0, 1467,
	0, 1469, 1470, 1471, 0, 1473, 1474, 0, 783, 0,
	59, 0, 62, 60, 0, 94, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 996, 1239, 0, 996, 1023,
	1009, 0, 1063, 1064, 0, 521, 522, 0, 525, 531,
	1025, 0, 0, 1027, 1028, 1029, 0, 0, 1041, 0,
	0, 0, 0, 1115, 1129, 0, 0, 0, -2, 0,
	-2, 1140, 0, 1184, 0, 1176, 0, 1168, 0, 1171,
	854, 854, -2, 692, 697, 0, 620, 1184, 1201, 0,
	1222, 0, 0, 0, 0, 0, 0, 0, 1202, 0,
	1215, 483, 1352, -2, 1366, 1368, 0, 1128, 1371, 1372,
	0, 0, 0, 0, 0, 0, 1416, 1380, 0, 0,
	1384, 1385, 1386, 0, 0, 1389, 0, 1721, 1722, 0,
	1393, 0, 0, 0, 0, 0, 0, 0, 1331, 442,
	443, 0, 445, 446, 1814, 1391, 485, 439, 1814, 455,
	1283, 1287, 1288, 1285, 507, 504, 505, 1033, 1036, 1047,
	1056, 719, 799, 339, 340, 893, 0, 885, 916, 913,
	0, 0, 980, 849, 852, 111, 116, 0, 0, 766,
	0, 763, 0, 757, 759, 172, 727, 764, 132, 164,
	0, 0, 1453, 1550, 1600, 1522, 1523, 0, 1511, 0,
	1505, 1506, 1507, 1512, 0, 0, 786, 781, 64, 90,
	0, 93, 68, 81, 0, 0, 0, 0, 982, 989,
	1003, 1134, 1313, 988, 0, 0, 518, 523, 0, 526,
	527, 1045, 1044, 0, 1031, 1032, 0, 1039, 0, 0,
	1102, 1793, 0, 1124, 1125, 1126, 1236, 1237, 1238, 1194,
	1142, 0, -2, 1247, 0, 0, 1138, 1160, 1194, 0,
	0, 1172, 0, 1179, 0, 1177, 1170, 804, 693, 1181,
	431, 1233, 1223, 0, 1225, 0, 0, 0, 0, 1204,
	-2, 0, 1367, 1369, 1370, 1373, 1374, 1375, 1421, 1422,
	1423, 0, 0, 1378, 1418, 1419, 1420, 1379, 0, 0,
	0, 0, 0, 1719, 1720, 1414, 0, 0, 1338, 1340,
	1341, 1342, 1343, 1344, 1345, 1346, 1339, 0, 0, 0,
	1330, 1332, 444, 0, 0, 1814, 1046, 336, 0, 0,
	917, 919, 914, 915, 851, 0, 106, 108, 123, 0,
	765, 163, 0, 766, 134, 0, 155, 0, 1161, 0,
	1521, 1508, 0, 0, 0, 0, 0, 1723, 1724, 1725,
	0, 1468, 1472, 89, 0, 66, 0, 82, 83, 0,
	0, 0, 1004, 1005, 1013, 1014, 0, 1016, 1017, 524,
	1026, 1034, 1038, 1041, 0, 1093, 0, 810, 0, 1196,
	0, 1144, 1127, 1249, 1814, 1147, 1196, 0, 1241, 1814,
	1814, 1162, 0, 1174, 0, 1186, 0, 1180, 799, 420,
	0, 1183, 1219, 1224, 1226, 1228, 0, 1232, 1230, 1205,
	-2, 0, 1213, 0, 0, 1376, 1377, 0, 0, 1619,
	1814, 0, 1409, 0, 1093, 1093, 1093, 1093, 0, 496,
	454, 0, 894, 908, 0, 853, 0, 0, 755, 124,
	0, 133, 152, 0, 165, 166, 0, 0, 0, 0,
	1153, 0, 1497, 0, 0, 0, 1501, 1502, 1503, 1504,
	65, 68, 0, 0, 0, 981, 0, 1015, 1040, 1042,
	1092, 1103, 1104, 810, 1137, 0, 1233, 1248, 0, 1139,
	1240, 0, 0, 0, 1173, 1185, 0, 1188, 691, 1182,
	1200, 0, 1229, 1206, 1214, 0, 1209, 0, 0, 0,
	1417, 0, 1383, 0, 1388, 1397, 1410, 0, 0, 1319,
	0, 1321, 0, 1325, 0, 1327, 0, 0, 456, 918,
	920, 0, 768, 758, 135, 139, 0, 161, 158, 0,
	167, 0, 0, 0, 0, 1149, 0, 0, 1498, 1499,
	1500, 67, 69, 84, 0, 983, 984, 997, 1094, 1814,
	1814, 0, 0, 0, 1100, 1101, 1105, 0, 1221, 1253,
	1242, 1243, 1244, 1187, 1220, 1208, 0, -2, 1216, 0,
	0, 1671, 1681, 1682, 1381, 1387, 1396, 1398, 1399, 0,
	1411, 1412, 1413, 1415, 1093, 1093, 1093, 1093, 1329, 767,
	0, 126, 0, 0, 156, 157, 159, 0, 168, 0,
	170, 171, 0, 1509, 985, 0, 0, 1097, 1098, 0,
	1197, 0, 1199, 1210, -2, 0, 1218, 0, 1382, 1400,
	0, 1401, 0, 0, 0, 1320, 1322, 1326, 1328, 769,
	1159, 0, 140, 0, 142, 144, 145, 1353, 153, 154,
	160, 169, 0, 970, 986, 0, 1095, 1096, 1099, 0,
	1201, 1217, 1672, 1402, 1404, 1405, 0, 0, 1403, 127,
	128, 0, 141, 0, 0, 1154, 987, 1198, 1195, 1406,
	1408, 1407, 0, 0, 143, 1354, 129, 130, 131, 0,
	1355,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 645, 642,
	126, 125, 127, 3, 646, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 643, 138, 644, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:832
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:839
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:845
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:853
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:859
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:863
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:878
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:882
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:888
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:930
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:944
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:955
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:967
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:971
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:976
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:986
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    yyDollar[4].str,
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1000
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1004
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1008
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1012
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1019
		{
			yyLOCAL = &tree.ShowCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1028
		{
			yyLOCAL = &tree.PauseCDC{
				SourceUri: yyDollar[3].str,
				Option:    yyDollar[4].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1037
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].str, yyDollar[4].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1043
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1050
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1059
		{
			yyLOCAL = &tree.ResumeCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1068
		{
			yyLOCAL = &tree.RestartCDC{
				SourceUri: yyDollar[3].str,
				TaskName:  yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1077
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1087
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1097
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1109
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1119
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1129
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1140
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1151
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1165
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1173
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1181
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1189
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1198
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1208
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1220
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1228
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1247
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1257
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1267
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1287
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1293
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1300
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1308
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1314
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1323
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1333
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1341
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1349
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1357
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1367
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1375
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1385
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1392
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1401
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1411
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1415
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1421
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1425
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1431
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1440
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1450
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1454
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1460
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1469
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1473
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1479
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1500
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1514
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1521
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1525
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1531
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1535
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1541
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1548
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1556
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1560
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1572
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1576
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1590
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1594
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1599
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1606
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1610
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1614
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1620
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1629
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1640
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1644
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1650
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1654
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1660
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1664
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1670
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1694
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1713
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1717
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1721
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1726
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1730
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1739
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1749
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1756
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1761
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1768
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1773
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1777
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1805
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1809
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1815
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1823
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1843
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1862
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1887
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1891
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1895
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1900
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1904
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1910
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1923
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1934
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1947
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1951
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1961
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1974
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1987
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1993
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1999
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2007
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2017
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2027
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2031
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2035
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2039
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2043
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2047
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2054
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2058
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2064
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2071
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2080
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2084
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2190
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2198
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2202
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2206
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2210
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2234
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2246
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2250
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2254
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2258
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2262
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2266
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2270
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2274
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2282
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2286
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2290
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2304
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2311
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2318
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2327
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2345
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2349
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2355
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2362
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2370
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2374
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2378
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2382
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2388
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2392
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2398
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2405
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2412
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2421
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2451
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2455
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2459
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2465
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2471
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2475
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2482
		{
			yyVAL.str = yyDollar[3].str
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2488
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2492
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2498
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2506
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2515
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2524
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2532
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2540
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2563
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2586
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2600
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2608
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2622
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2631
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2635
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2639
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2645
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2649
		{
			yyVAL.str = yyDollar[1].str
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2655
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2659
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2665
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2669
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2680
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2686
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2691
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2695
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2699
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2703
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2707
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2711
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2715
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2719
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2723
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2729
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2733
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2737
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2741
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2746
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2751
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2757
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2770
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2783
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2796
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2809
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2825
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2832
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2843
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2854
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2858
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2864
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2874
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2880
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2884
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2890
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2896
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2900
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2904
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2908
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2914
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2927
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2933
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2937
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2943
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2947
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2953
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2959
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2970
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2976
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2980
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2984
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2988
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2992
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2996
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3004
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3012
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3022
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3034
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3038
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3046
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3054
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3093
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3097
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3103
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3109
		{
			yyVAL.str = yyDollar[1].str
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3114
		{
			yyVAL.str = "true"
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3115
		{
			yyVAL.str = "false"
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3116
		{
			yyVAL.str = yyDollar[1].str
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3121
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3127
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3136
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3143
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3151
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3155
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3180
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3203
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3213
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3220
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3229
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3237
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3241
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3247
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3258
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3262
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3268
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3272
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3296
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3306
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3316
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3332
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3350
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3354
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3360
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3364
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3370
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3376
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3384
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3394
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3402
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3412
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3422
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3432
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3439
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3443
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3447
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3451
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3455
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3462
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3468
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3472
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3476
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3480
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3484
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3488
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3492
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3496
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3501
		{
			yyVAL.str = ""
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3532
		{
			yyVAL.str = ""
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3536
		{
			yyVAL.str = string("COLUMN")
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3541
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3547
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3553
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3561
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3565
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3571
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3579
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3586
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3592
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3598
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3604
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3610
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3617
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3624
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3632
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3638
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3650
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3656
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3664
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3668
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3675
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3693
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3708
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3723
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3738
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3751
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3757
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3768
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3781
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3785
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3793
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3797
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3802
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3806
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3822
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3826
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3830
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3834
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3841
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3845
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3849
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3853
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3860
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3864
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3871
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3875
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3879
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3883
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3890
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3897
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3903
		{
			yyVAL.item = nil
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3908
		{
			yyVAL.item = nil
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3953
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3962
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3970
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3978
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3986
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3990
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3994
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4005
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4009
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4015
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4020
		{
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4024
		{
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4029
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4039
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4049
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4057
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4063
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4069
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4075
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4081
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4087
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4093
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4102
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4106
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4110
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4114
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4118
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4122
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4130
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4136
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4145
		{
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4147
		{
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4156
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4166
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4175
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4179
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4183
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4189
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4201
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4207
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4216
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4227
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4239
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4247
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4253
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4265
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4279
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4285
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4291
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4298
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4302
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4307
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4311
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4315
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4320
		{
			yyVAL.str = ""
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4324
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4330
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4345
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4349
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4355
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4363
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4370
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4378
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4384
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4390
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4395
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4403
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4409
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4414
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4420
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4426
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4430
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4458
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4466
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4474
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4482
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4486
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4492
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4505
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4513
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4522
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4528
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4536
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4544
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4552
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4558
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4566
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4572
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4580
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4586
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4596
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4601
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4608
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4624
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4637
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4648
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4652
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4658
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4664
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4673
		{
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4675
		{
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4678
		{
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4687
		{
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4691
		{
		}
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4696
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4705
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4712
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4718
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4726
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4733
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4740
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4760
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4768
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4778
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4782
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4788
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4795
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4801
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4809
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4816
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4823
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4842
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4846
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4850
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4855
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4859
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4863
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4869
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4878
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4882
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4888
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4892
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4898
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4902
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4908
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4913
		{
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4917
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4924
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4928
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4935
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4940
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4944
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4950
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4954
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4960
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4964
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4969
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4973
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4986
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4997
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5008
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5030
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5053
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5061
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5070
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5074
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5087
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5091
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5096
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5100
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5107
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5112
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5119
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5125
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5129
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5133
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5137
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5141
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5145
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5150
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5154
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5160
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5170
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5185
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5189
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5203
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5207
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5213
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5222
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5226
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5230
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5234
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5238
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5244
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5251
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5260
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5264
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5270
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5278
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5282
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5287
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5291
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5297
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5301
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5305
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5310
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5314
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5320
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5326
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5330
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5336
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5341
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5345
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5349
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5354
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5358
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5362
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5367
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5371
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5379
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5383
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5387
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5401
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5405
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5415
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5425
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5435
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5447
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5455
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5463
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5472
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5480
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5488
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5496
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5504
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5512
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5520
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5528
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5536
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5546
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5557
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5571
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5575
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5579
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5584
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5588
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5592
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5601
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5605
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5610
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5614
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprs: yyDollar[3].exprsUnion(),
				RollUp:       yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5622
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5626
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5631
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5635
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5641
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5645
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5651
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5655
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5659
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5663
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5668
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5676
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5682
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5690
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5698
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5708
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5714
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5723
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5732
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5741
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5751
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5755
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5765
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5769
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5773
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 879:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5777
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 880:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5783
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5793
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5797
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5803
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5809
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5813
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5819
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5825
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5829
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5833
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 890:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5837
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 891:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5843
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5847
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5853
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5857
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5863
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5867
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5873
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5877
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5887
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5900
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5906
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5912
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5926
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5937
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5944
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5948
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5954
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5964
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5968
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5972
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5977
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5981
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5985
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5989
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5994
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5998
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6002
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6006
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6010
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6015
		{
			yyVAL.str = ""
		}
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6019
		{
			yyVAL.str = yyDollar[1].str
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6023
		{
			yyVAL.str = yyDollar[2].str
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6029
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6033
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 926:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6038
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6042
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6046
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6050
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6054
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6060
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 954:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6102
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6115
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6121
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 957:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6127
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6140
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6145
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6152
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6159
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6163
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6169
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6175
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6180
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6184
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6188
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6192
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6199
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6232
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6237
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6244
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6251
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6255
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6261
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6267
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6271
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6275
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6281
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6287
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6293
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6297
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6303
		{
			yyVAL.str = ""
		}
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6310
		{
			yyVAL.str = yyDollar[2].str
		}
	case 988:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6316
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6331
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6348
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6365
		{
			yyVAL.str = yyDollar[1].str
		}
	case 992:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6369
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6375
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 994:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6379
		{
			yyVAL.str = "DEFINER = "
		}
	case 995:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6383
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 996:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6388
		{
			yyVAL.str = ""
		}
	case 997:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6392
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1003:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6406
		{
			yyVAL.str = ""
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6414
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6420
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6425
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6431
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6444
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6449
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6454
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6460
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6467
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6474
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6481
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6488
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6496
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6502
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6509
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6516
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6524
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6530
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6539
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6556
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6572
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6591
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6597
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6606
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6624
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6630
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6637
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6645
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6651
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6659
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6665
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6673
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6679
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6688
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6692
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6697
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6701
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6708
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6713
		{
			yyVAL.str = ""
		}
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6717
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1046:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6723
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6736
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6747
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6751
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6757
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6763
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6769
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6776
		{
			yyVAL.str = ""
		}
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6780
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6785
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6789
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6795
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6803
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6811
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6819
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6827
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6832
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6844
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6855
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6964
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6968
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6974
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6987
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6991
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6997
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7010
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7014
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7018
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7023
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7027
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7033
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7040
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7046
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7055
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1081:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7062
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7073
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7077
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7083
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7092
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7096
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7100
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7105
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7109
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7113
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7117
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7123
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7154
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7158
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7184
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7190
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7202
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7208
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7214
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7220
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7226
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7234
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7238
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7244
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7258
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7272
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7276
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7280
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7284
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7288
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7292
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7296
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7302
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7317
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7321
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7332
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7336
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7341
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7345
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7351
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7355
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7361
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7370
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7379
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7385
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7389
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7395
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7406
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7412
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7430
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7448
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7466
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7482
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7486
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7495
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7507
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7516
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7528
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7538
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7548
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7559
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7569
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7580
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7588
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7599
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7606
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7616
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7629
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7637
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7646
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7655
		{
			yyVAL.str = ""
		}
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7659
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7665
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7669
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7674
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7678
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7685
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7697
		{
			yyVAL.str = ""
		}
	case 1161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7701
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1162:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7707
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7728
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7742
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7746
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7750
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7756
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7760
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7767
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7774
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7781
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7788
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7792
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7796
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7800
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7804
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7811
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7818
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7822
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7829
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7836
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7840
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7846
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7852
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7856
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7863
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7870
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7877
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7884
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7888
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7893
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7897
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7901
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7906
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7910
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7923
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7927
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7935
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7943
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7947
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7959
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7963
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7969
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7973
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7979
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7992
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8006
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8010
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8016
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8020
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8026
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8035
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8046
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8050
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8055
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8059
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8065
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8070
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8078
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8082
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8092
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8096
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8107
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8115
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8123
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8131
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8142
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8151
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8161
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8171
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8175
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8180
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8184
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8190
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8194
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8200
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8209
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8219
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8223
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8229
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8233
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8239
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8248
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8258
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8262
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8268
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8272
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8276
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8282
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8286
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8290
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8294
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8298
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8302
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8306
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8311
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8315
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8319
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8323
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8327
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8331
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8335
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8339
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8343
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8347
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8351
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8355
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8359
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8365
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8371
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8375
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8379
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8383
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8387
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8393
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8399
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8405
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8411
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8417
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8423
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8427
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8431
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8435
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8440
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8451
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8455
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8461
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8472
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8476
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8482
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8486
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8490
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8494
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8498
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8502
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8516
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8520
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8529
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8535
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8543
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8547
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8554
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8563
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8571
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8579
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8586
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8590
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8596
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8600
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8604
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8610
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8614
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8620
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8633
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8646
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8685
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8725
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8739
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8745
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8758
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8771
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8784
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8797
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8812
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8822
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8828
		{
			yyVAL.str = ""
		}
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8832
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8842
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8848
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8854
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8875
		{
			yyVAL.str = ""
		}
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8879
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8885
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8891
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8895
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8900
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8908
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8912
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8916
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8920
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8926
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8932
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8936
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8941
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8948
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8952
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8958
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8962
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8968
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8972
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8976
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8980
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8984
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8988
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8993
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8997
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9001
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9005
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9009
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9013
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9017
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9021
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9025
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9029
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9043
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9047
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9051
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9055
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9059
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9063
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9069
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9073
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9078
		{
			yyVAL.str = ""
		}
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9082
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9088
		{
			yyVAL.str = ""
		}
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9092
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1396:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9098
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9115
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9122
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9129
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9136
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9143
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9152
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9158
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9164
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9168
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9172
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9176
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9180
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9185
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9192
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9196
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9200
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9205
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9209
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9214
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9218
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9234
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9240
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9244
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9248
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9252
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9256
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9260
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9264
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9268
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9272
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9276
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9280
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9284
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9288
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9294
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9298
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9302
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9306
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9310
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9314
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9318
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9322
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9326
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9330
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9372
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9376
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9380
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9385
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9393
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9397
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9401
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9405
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9409
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9419
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9423
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9427
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9431
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9435
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9439
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9443
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9449
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9458
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9467
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9478
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9488
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9498
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9507
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9517
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9527
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9537
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9546
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9556
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9560
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9565
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9569
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9575
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9579
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9585
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9594
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9606
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9623
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9640
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9653
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9666
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9678
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9692
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9707
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9722
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9739
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9754
		{
		}
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9761
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9765
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9769
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9775
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9779
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9783
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9787
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9793
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9797
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9801
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9807
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9815
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9825
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9829
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9836
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9841
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9845
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9850
		{
			yyVAL.str = ","
		}
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9854
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9859
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9863
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1519:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9868
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9875
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9901
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9913
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9925
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9936
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9947
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9958
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9968
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9978
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9989
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10000
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10011
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10022
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10033
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10044
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10055
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10066
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10077
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10088
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10099
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10110
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10121
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10132
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10150
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10159
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10168
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10177
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10186
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10197
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10206
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10216
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10225
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10234
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10243
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10252
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10264
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10275
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10288
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10300
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10323
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10359
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10372
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10385
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10397
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10406
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10414
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10422
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10435
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10444
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10455
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10466
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10475
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10487
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10497
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10507
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10516
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10527
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10536
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10546
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10555
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10564
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10574
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10578
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10584
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10588
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10607
		{
		}
	case 1630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10609
		{
		}
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10650
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10662
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10666
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10670
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10676
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10681
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10685
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10691
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10695
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10701
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10705
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10712
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10716
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10720
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10729
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10733
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10737
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10742
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10746
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10752
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10756
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10760
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10764
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10768
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10772
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10776
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10780
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10784
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10788
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10796
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10800
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10804
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10808
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10812
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10816
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10820
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10824
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10828
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10832
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10838
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10842
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10848
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10852
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10859
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10863
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10867
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10873
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10877
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10881
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10885
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10889
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10893
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10897
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10903
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10907
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10911
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10915
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10921
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10934
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10939
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10945
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10949
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10962
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10967
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10971
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10975
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10979
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10983
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10990
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10994
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10998
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11002
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11009
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11020
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11025
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11031
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11043
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11055
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11067
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11080
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11093
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11106
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11119
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11132
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11145
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11158
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11171
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11184
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11197
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11212
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11239
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11281
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11317
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11353
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11370
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11382
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11402
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11422
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11442
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11458
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11471
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11484
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11497
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11510
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11522
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11534
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11546
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11558
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11570
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11582
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11594
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11606
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11618
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11630
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11643
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11656
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11669
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11682
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11697
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11705
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11714
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11724
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11747
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11752
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11758
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11765
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11769
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11774
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11778
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11784
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11790
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11797
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11804
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11813
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11820
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11827
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11836
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11840
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11844
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11850
		{
		}
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11852
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11862
		{
			yyVAL.str = ""
		}
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11866
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
