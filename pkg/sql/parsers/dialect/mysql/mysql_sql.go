// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CENTROIDX = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const CLONE = 57659
const BRANCH = 57660
const LOG = 57661
const REVERT = 57662
const REBASE = 57663
const DIFF = 57664
const CONFLICT = 57665
const CONFLICT_FAIL = 57666
const CONFLICT_SKIP = 57667
const CONFLICT_ACCEPT = 57668
const INCREMENT = 57669
const CYCLE = 57670
const MINVALUE = 57671
const PUBLICATION = 57672
const SUBSCRIPTIONS = 57673
const PUBLICATIONS = 57674
const PROPERTIES = 57675
const PARSER = 57676
const VISIBLE = 57677
const INVISIBLE = 57678
const BTREE = 57679
const HASH = 57680
const RTREE = 57681
const BSI = 57682
const IVFFLAT = 57683
const MASTER = 57684
const HNSW = 57685
const ZONEMAP = 57686
const LEADING = 57687
const BOTH = 57688
const TRAILING = 57689
const UNKNOWN = 57690
const LISTS = 57691
const OP_TYPE = 57692
const REINDEX = 57693
const EF_SEARCH = 57694
const EF_CONSTRUCTION = 57695
const M = 57696
const ASYNC = 57697
const EXPIRE = 57698
const ACCOUNT = 57699
const ACCOUNTS = 57700
const UNLOCK = 57701
const DAY = 57702
const NEVER = 57703
const PUMP = 57704
const MYSQL_COMPATIBILITY_MODE = 57705
const UNIQUE_CHECK_ON_AUTOINCR = 57706
const MODIFY = 57707
const CHANGE = 57708
const SECOND = 57709
const ASCII = 57710
const COALESCE = 57711
const COLLATION = 57712
const HOUR = 57713
const MICROSECOND = 57714
const MINUTE = 57715
const MONTH = 57716
const QUARTER = 57717
const REPEAT = 57718
const REVERSE = 57719
const ROW_COUNT = 57720
const WEEK = 57721
const REVOKE = 57722
const FUNCTION = 57723
const PRIVILEGES = 57724
const TABLESPACE = 57725
const EXECUTE = 57726
const SUPER = 57727
const GRANT = 57728
const OPTION = 57729
const REFERENCES = 57730
const REPLICATION = 57731
const SLAVE = 57732
const CLIENT = 57733
const USAGE = 57734
const RELOAD = 57735
const FILE = 57736
const TEMPORARY = 57737
const ROUTINE = 57738
const EVENT = 57739
const SHUTDOWN = 57740
const NULLX = 57741
const AUTO_INCREMENT = 57742
const APPROXNUM = 57743
const SIGNED = 57744
const UNSIGNED = 57745
const ZEROFILL = 57746
const ENGINES = 57747
const LOW_CARDINALITY = 57748
const AUTOEXTEND_SIZE = 57749
const ADMIN_NAME = 57750
const RANDOM = 57751
const SUSPEND = 57752
const ATTRIBUTE = 57753
const HISTORY = 57754
const REUSE = 57755
const CURRENT = 57756
const OPTIONAL = 57757
const FAILED_LOGIN_ATTEMPTS = 57758
const PASSWORD_LOCK_TIME = 57759
const UNBOUNDED = 57760
const SECONDARY = 57761
const RESTRICTED = 57762
const USER = 57763
const IDENTIFIED = 57764
const CIPHER = 57765
const ISSUER = 57766
const X509 = 57767
const SUBJECT = 57768
const SAN = 57769
const REQUIRE = 57770
const SSL = 57771
const NONE = 57772
const PASSWORD = 57773
const SHARED = 57774
const EXCLUSIVE = 57775
const MAX_QUERIES_PER_HOUR = 57776
const MAX_UPDATES_PER_HOUR = 57777
const MAX_CONNECTIONS_PER_HOUR = 57778
const MAX_USER_CONNECTIONS = 57779
const FORMAT = 57780
const VERBOSE = 57781
const CONNECTION = 57782
const TRIGGERS = 57783
const PROFILES = 57784
const LOAD = 57785
const INLINE = 57786
const INFILE = 57787
const TERMINATED = 57788
const OPTIONALLY = 57789
const ENCLOSED = 57790
const ESCAPED = 57791
const STARTING = 57792
const LINES = 57793
const ROWS = 57794
const IMPORT = 57795
const DISCARD = 57796
const JSONTYPE = 57797
const MODUMP = 57798
const OVER = 57799
const PRECEDING = 57800
const FOLLOWING = 57801
const GROUPS = 57802
const DATABASES = 57803
const TABLES = 57804
const SEQUENCES = 57805
const EXTENDED = 57806
const FULL = 57807
const PROCESSLIST = 57808
const FIELDS = 57809
const COLUMNS = 57810
const OPEN = 57811
const ERRORS = 57812
const WARNINGS = 57813
const INDEXES = 57814
const SCHEMAS = 57815
const NODE = 57816
const LOCKS = 57817
const ROLES = 57818
const TABLE_NUMBER = 57819
const COLUMN_NUMBER = 57820
const TABLE_VALUES = 57821
const TABLE_SIZE = 57822
const NAMES = 57823
const GLOBAL = 57824
const PERSIST = 57825
const SESSION = 57826
const ISOLATION = 57827
const LEVEL = 57828
const READ = 57829
const WRITE = 57830
const ONLY = 57831
const REPEATABLE = 57832
const COMMITTED = 57833
const UNCOMMITTED = 57834
const SERIALIZABLE = 57835
const LOCAL = 57836
const EVENTS = 57837
const PLUGINS = 57838
const CURRENT_TIMESTAMP = 57839
const DATABASE = 57840
const CURRENT_TIME = 57841
const LOCALTIME = 57842
const LOCALTIMESTAMP = 57843
const UTC_DATE = 57844
const UTC_TIME = 57845
const UTC_TIMESTAMP = 57846
const REPLACE = 57847
const CONVERT = 57848
const SEPARATOR = 57849
const TIMESTAMPDIFF = 57850
const CURRENT_DATE = 57851
const CURRENT_USER = 57852
const CURRENT_ROLE = 57853
const SECOND_MICROSECOND = 57854
const MINUTE_MICROSECOND = 57855
const MINUTE_SECOND = 57856
const HOUR_MICROSECOND = 57857
const HOUR_SECOND = 57858
const HOUR_MINUTE = 57859
const DAY_MICROSECOND = 57860
const DAY_SECOND = 57861
const DAY_MINUTE = 57862
const DAY_HOUR = 57863
const YEAR_MONTH = 57864
const SQL_TSI_HOUR = 57865
const SQL_TSI_DAY = 57866
const SQL_TSI_WEEK = 57867
const SQL_TSI_MONTH = 57868
const SQL_TSI_QUARTER = 57869
const SQL_TSI_YEAR = 57870
const SQL_TSI_SECOND = 57871
const SQL_TSI_MINUTE = 57872
const RECURSIVE = 57873
const CONFIG = 57874
const DRAINER = 57875
const SOURCE = 57876
const STREAM = 57877
const HEADERS = 57878
const CONNECTOR = 57879
const CONNECTORS = 57880
const DAEMON = 57881
const PAUSE = 57882
const CANCEL = 57883
const TASK = 57884
const RESUME = 57885
const MATCH = 57886
const AGAINST = 57887
const BOOLEAN = 57888
const LANGUAGE = 57889
const WITH = 57890
const QUERY = 57891
const EXPANSION = 57892
const WITHOUT = 57893
const VALIDATION = 57894
const UPGRADE = 57895
const RETRY = 57896
const ADDDATE = 57897
const BIT_AND = 57898
const BIT_OR = 57899
const BIT_XOR = 57900
const CAST = 57901
const COUNT = 57902
const APPROX_COUNT = 57903
const APPROX_COUNT_DISTINCT = 57904
const SERIAL_EXTRACT = 57905
const APPROX_PERCENTILE = 57906
const CURDATE = 57907
const CURTIME = 57908
const DATE_ADD = 57909
const DATE_SUB = 57910
const EXTRACT = 57911
const GROUP_CONCAT = 57912
const MAX = 57913
const MID = 57914
const MIN = 57915
const NOW = 57916
const POSITION = 57917
const SESSION_USER = 57918
const STD = 57919
const STDDEV = 57920
const MEDIAN = 57921
const CLUSTER_CENTERS = 57922
const KMEANS = 57923
const STDDEV_POP = 57924
const STDDEV_SAMP = 57925
const SUBDATE = 57926
const SUBSTR = 57927
const SUBSTRING = 57928
const SUM = 57929
const SYSDATE = 57930
const SYSTEM_USER = 57931
const TRANSLATE = 57932
const TRIM = 57933
const VARIANCE = 57934
const VAR_POP = 57935
const VAR_SAMP = 57936
const AVG = 57937
const RANK = 57938
const ROW_NUMBER = 57939
const DENSE_RANK = 57940
const BIT_CAST = 57941
const BITMAP_BIT_POSITION = 57942
const BITMAP_BUCKET_NUMBER = 57943
const BITMAP_COUNT = 57944
const BITMAP_CONSTRUCT_AGG = 57945
const BITMAP_OR_AGG = 57946
const NEXTVAL = 57947
const SETVAL = 57948
const CURRVAL = 57949
const LASTVAL = 57950
const ARROW = 57951
const ROW = 57952
const OUTFILE = 57953
const HEADER = 57954
const MAX_FILE_SIZE = 57955
const FORCE_QUOTE = 57956
const PARALLEL = 57957
const STRICT = 57958
const UNUSED = 57959
const BINDINGS = 57960
const DO = 57961
const DECLARE = 57962
const LOOP = 57963
const WHILE = 57964
const LEAVE = 57965
const ITERATE = 57966
const UNTIL = 57967
const CALL = 57968
const PREV = 57969
const SLIDING = 57970
const FILL = 57971
const SPBEGIN = 57972
const BACKEND = 57973
const SERVERS = 57974
const HANDLER = 57975
const PERCENT = 57976
const SAMPLE = 57977
const MO_TS = 57978
const PITR = 57979
const RECOVERY_WINDOW = 57980
const INTERNAL = 57981
const CDC = 57982
const GROUPING = 57983
const SETS = 57984
const CUBE = 57985
const ROLLUP = 57986
const LOGSERVICE = 57987
const REPLICAS = 57988
const STORES = 57989
const SETTINGS = 57990
const KILL = 57991
const BACKUP = 57992
const FILESYSTEM = 57993
const PARALLELISM = 57994
const RESTORE = 57995
const QUERY_RESULT = 57996

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CENTROIDX",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"CLONE",
	"BRANCH",
	"LOG",
	"REVERT",
	"REBASE",
	"DIFF",
	"CONFLICT",
	"CONFLICT_FAIL",
	"CONFLICT_SKIP",
	"CONFLICT_ACCEPT",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"HNSW",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EF_SEARCH",
	"EF_CONSTRUCTION",
	"M",
	"ASYNC",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"INTERNAL",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:13127

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 143,
	11, 817,
	22, 817,
	-2, 810,
	-1, 169,
	246, 1271,
	248, 1147,
	-2, 1202,
	-1, 196,
	44, 640,
	248, 640,
	275, 647,
	276, 647,
	489, 640,
	-2, 675,
	-1, 236,
	675, 2048,
	-2, 539,
	-1, 550,
	675, 2172,
	-2, 414,
	-1, 608,
	675, 2231,
	-2, 412,
	-1, 609,
	675, 2232,
	-2, 413,
	-1, 610,
	675, 2233,
	-2, 415,
	-1, 752,
	327, 182,
	461, 182,
	462, 182,
	-2, 1946,
	-1, 819,
	86, 1730,
	-2, 2108,
	-1, 820,
	86, 1749,
	-2, 2079,
	-1, 824,
	86, 1750,
	-2, 2107,
	-1, 858,
	86, 1657,
	-2, 2312,
	-1, 859,
	86, 1658,
	-2, 2311,
	-1, 860,
	86, 1659,
	-2, 2301,
	-1, 861,
	86, 2273,
	-2, 2294,
	-1, 862,
	86, 2274,
	-2, 2295,
	-1, 863,
	86, 2275,
	-2, 2303,
	-1, 864,
	86, 2276,
	-2, 2283,
	-1, 865,
	86, 2277,
	-2, 2292,
	-1, 866,
	86, 2278,
	-2, 2304,
	-1, 867,
	86, 2279,
	-2, 2305,
	-1, 868,
	86, 2280,
	-2, 2310,
	-1, 869,
	86, 2281,
	-2, 2315,
	-1, 870,
	86, 2282,
	-2, 2316,
	-1, 871,
	86, 1726,
	-2, 2146,
	-1, 872,
	86, 1727,
	-2, 1930,
	-1, 873,
	86, 1728,
	-2, 2155,
	-1, 874,
	86, 1729,
	-2, 1939,
	-1, 876,
	86, 1732,
	-2, 1947,
	-1, 878,
	86, 1734,
	-2, 2179,
	-1, 880,
	86, 1737,
	-2, 1968,
	-1, 882,
	86, 1739,
	-2, 2191,
	-1, 883,
	86, 1740,
	-2, 2190,
	-1, 884,
	86, 1741,
	-2, 2015,
	-1, 885,
	86, 1742,
	-2, 2103,
	-1, 888,
	86, 1745,
	-2, 2202,
	-1, 890,
	86, 1747,
	-2, 2205,
	-1, 891,
	86, 1748,
	-2, 2207,
	-1, 892,
	86, 1751,
	-2, 2215,
	-1, 893,
	86, 1752,
	-2, 2088,
	-1, 894,
	86, 1753,
	-2, 2133,
	-1, 895,
	86, 1754,
	-2, 2098,
	-1, 896,
	86, 1755,
	-2, 2123,
	-1, 907,
	86, 1635,
	-2, 2306,
	-1, 908,
	86, 1636,
	-2, 2307,
	-1, 909,
	86, 1637,
	-2, 2308,
	-1, 1014,
	484, 675,
	485, 675,
	-2, 641,
	-1, 1065,
	128, 1930,
	139, 1930,
	159, 1930,
	-2, 1903,
	-1, 1186,
	22, 844,
	-2, 793,
	-1, 1296,
	11, 817,
	22, 817,
	-2, 1512,
	-1, 1380,
	22, 844,
	-2, 793,
	-1, 1744,
	86, 1802,
	-2, 2105,
	-1, 1745,
	86, 1803,
	-2, 2106,
	-1, 2366,
	87, 1017,
	-2, 1023,
	-1, 2382,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	288, 1194,
	-2, 1187,
	-1, 2547,
	11, 817,
	22, 817,
	-2, 958,
	-1, 2581,
	87, 1889,
	160, 1889,
	-2, 2090,
	-1, 2582,
	87, 1889,
	160, 1889,
	-2, 2089,
	-1, 2583,
	87, 1865,
	160, 1865,
	-2, 2076,
	-1, 2584,
	87, 1866,
	160, 1866,
	-2, 2081,
	-1, 2585,
	87, 1867,
	160, 1867,
	-2, 2003,
	-1, 2586,
	87, 1868,
	160, 1868,
	-2, 1996,
	-1, 2587,
	87, 1869,
	160, 1869,
	-2, 1920,
	-1, 2588,
	87, 1870,
	160, 1870,
	-2, 2078,
	-1, 2589,
	87, 1871,
	160, 1871,
	-2, 2001,
	-1, 2590,
	87, 1872,
	160, 1872,
	-2, 1995,
	-1, 2591,
	87, 1873,
	160, 1873,
	-2, 1983,
	-1, 2592,
	87, 1889,
	160, 1889,
	-2, 1984,
	-1, 2593,
	87, 1889,
	160, 1889,
	-2, 1985,
	-1, 2595,
	87, 1878,
	160, 1878,
	-2, 2123,
	-1, 2596,
	87, 1855,
	160, 1855,
	-2, 2108,
	-1, 2597,
	87, 1887,
	160, 1887,
	-2, 2079,
	-1, 2598,
	87, 1887,
	160, 1887,
	-2, 2107,
	-1, 2599,
	87, 1887,
	160, 1887,
	-2, 1948,
	-1, 2600,
	87, 1885,
	160, 1885,
	-2, 2098,
	-1, 2601,
	87, 1882,
	160, 1882,
	-2, 1973,
	-1, 2602,
	86, 1836,
	87, 1836,
	160, 1836,
	419, 1836,
	420, 1836,
	421, 1836,
	-2, 1919,
	-1, 2603,
	86, 1837,
	87, 1837,
	160, 1837,
	419, 1837,
	420, 1837,
	421, 1837,
	-2, 1921,
	-1, 2604,
	86, 1838,
	87, 1838,
	160, 1838,
	419, 1838,
	420, 1838,
	421, 1838,
	-2, 2151,
	-1, 2605,
	86, 1840,
	87, 1840,
	160, 1840,
	419, 1840,
	420, 1840,
	421, 1840,
	-2, 2080,
	-1, 2606,
	86, 1842,
	87, 1842,
	160, 1842,
	419, 1842,
	420, 1842,
	421, 1842,
	-2, 2058,
	-1, 2607,
	86, 1844,
	87, 1844,
	160, 1844,
	419, 1844,
	420, 1844,
	421, 1844,
	-2, 2002,
	-1, 2608,
	86, 1846,
	87, 1846,
	160, 1846,
	419, 1846,
	420, 1846,
	421, 1846,
	-2, 1979,
	-1, 2609,
	86, 1847,
	87, 1847,
	160, 1847,
	419, 1847,
	420, 1847,
	421, 1847,
	-2, 1980,
	-1, 2610,
	86, 1849,
	87, 1849,
	160, 1849,
	419, 1849,
	420, 1849,
	421, 1849,
	-2, 1918,
	-1, 2611,
	87, 1892,
	160, 1892,
	419, 1892,
	420, 1892,
	421, 1892,
	-2, 1953,
	-1, 2612,
	87, 1892,
	160, 1892,
	419, 1892,
	420, 1892,
	421, 1892,
	-2, 1969,
	-1, 2613,
	87, 1895,
	160, 1895,
	419, 1895,
	420, 1895,
	421, 1895,
	-2, 1949,
	-1, 2614,
	87, 1895,
	160, 1895,
	419, 1895,
	420, 1895,
	421, 1895,
	-2, 2018,
	-1, 2615,
	87, 1892,
	160, 1892,
	419, 1892,
	420, 1892,
	421, 1892,
	-2, 2040,
	-1, 2846,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	288, 1194,
	-2, 1188,
	-1, 2866,
	84, 737,
	160, 737,
	-2, 1386,
	-1, 3307,
	198, 1194,
	312, 1475,
	-2, 1447,
	-1, 3506,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	-2, 1327,
	-1, 3509,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	-2, 1327,
	-1, 3521,
	84, 737,
	160, 737,
	-2, 1386,
	-1, 3542,
	198, 1194,
	312, 1475,
	-2, 1448,
	-1, 3703,
	111, 1194,
	155, 1194,
	195, 1194,
	198, 1194,
	-2, 1328,
	-1, 3729,
	87, 1289,
	160, 1289,
	-2, 1194,
	-1, 3878,
	87, 1289,
	160, 1289,
	-2, 1194,
	-1, 4051,
	87, 1293,
	160, 1293,
	-2, 1194,
	-1, 4106,
	87, 1294,
	160, 1294,
	-2, 1194,
}

const yyPrivate = 57344

const yyLast = 56294

var yyAct = [...]int{
	786, 762, 4159, 788, 4128, 2897, 225, 4151, 4055, 1724,
	2014, 3527, 4061, 3626, 1645, 4062, 3947, 3327, 4054, 3878,
	3293, 771, 3970, 3925, 4005, 2125, 3403, 3856, 3757, 3556,
	2891, 3823, 764, 3916, 3877, 3404, 1332, 3691, 1784, 1489,
	3948, 3791, 1557, 816, 2803, 3630, 2894, 651, 1064, 1187,
	3926, 3487, 3847, 3928, 1495, 3621, 37, 1959, 3492, 3302,
	1771, 3710, 2869, 1181, 670, 1727, 676, 676, 3700, 3673,
	3248, 3224, 676, 694, 703, 3543, 3510, 703, 3263, 3705,
	2433, 3401, 3012, 2112, 3455, 3013, 2127, 3251, 1720, 2989,
	210, 3479, 2920, 3322, 3304, 3311, 2808, 3512, 2150, 3008,
	3446, 2074, 715, 2224, 3011, 3081, 2577, 2109, 3041, 2706,
	3366, 2541, 1789, 2834, 1974, 3273, 3227, 2182, 3231, 3225,
	3229, 2436, 2579, 3226, 2394, 2999, 2338, 1177, 711, 700,
	3189, 2220, 759, 3129, 2671, 2847, 3222, 1550, 2208, 2466,
	754, 2337, 1882, 2649, 142, 3310, 1630, 3055, 2191, 2190,
	36, 2631, 1634, 2183, 1635, 945, 2105, 2155, 1623, 2078,
	2525, 2075, 2542, 2823, 2219, 2818, 2922, 2520, 1638, 2434,
	2902, 2004, 985, 2861, 221, 8, 2393, 1935, 220, 7,
	6, 2382, 2575, 2254, 1718, 2221, 763, 1058, 1566, 1785,
	1667, 1597, 1535, 2373, 1454, 1529, 69, 753, 1125, 2429,
	669, 651, 1778, 2376, 1203, 1460, 772, 1709, 15, 2743,
	1758, 2189, 1478, 1646, 2186, 1649, 2171, 1931, 23, 1604,
	1717, 1973, 2549, 1934, 761, 225, 1723, 225, 1057, 1116,
	1117, 708, 1534, 1531, 650, 685, 676, 2521, 1588, 1790,
	718, 1474, 211, 717, 24, 1023, 984, 25, 1786, 1096,
	1498, 911, 17, 203, 1490, 1402, 10, 1009, 967, 982,
	961, 702, 1333, 1378, 714, 2228, 207, 993, 3935, 3844,
	913, 914, 1264, 1265, 1266, 1263, 1264, 1265, 1266, 1263,
	27, 698, 1464, 2779, 2779, 2779, 2742, 1264, 1265, 1266,
	1263, 16, 2551, 1113, 672, 3412, 3524, 14, 3280, 3098,
	3097, 3662, 2238, 1182, 3495, 33, 1183, 1091, 3396, 2694,
	2637, 975, 2635, 976, 2634, 1112, 2632, 1114, 1895, 1109,
	1607, 1611, 1108, 681, 209, 671, 1421, 2336, 1397, 1457,
	1458, 1459, 1533, 1371, 3903, 933, 760, 1499, 706, 989,
	990, 688, 931, 2126, 1109, 3199, 2342, 1043, 2346, 1070,
	1033, 1109, 956, 699, 755, 1072, 1896, 1660, 1400, 3182,
	3179, 677, 3184, 3181, 695, 1182, 970, 4140, 966, 1512,
	697, 1889, 1393, 2771, 2769, 1609, 3619, 3077, 696, 1092,
	1264, 1265, 1266, 1263, 8, 3075, 2160, 3911, 7, 3798,
	1107, 1264, 1265, 1266, 1263, 3792, 3622, 3402, 2205, 1327,
	3930, 1073, 2185, 912, 3158, 2177, 2474, 4165, 4033, 3924,
	4137, 3806, 3678, 4090, 923, 1262, 1226, 2773, 3863, 3636,
	1412, 2688, 3674, 2680, 948, 3511, 2385, 1644, 2225, 3922,
	3831, 3804, 3470, 208, 1035, 2724, 932, 1034, 2353, 3981,
	1574, 1407, 1406, 930, 1405, 933, 713, 3156, 208, 65,
	199, 170, 755, 931, 1086, 1081, 1076, 1080, 1084, 1074,
	208, 1446, 3864, 1429, 1403, 208, 208, 208, 65, 199,
	170, 2236, 2802, 208, 1068, 1069, 1019, 208, 65, 199,
	170, 1413, 1089, 3006, 1653, 994, 1079, 1427, 2377, 1909,
	1907, 1658, 1665, 2570, 3833, 1038, 1036, 2798, 1037, 972,
	208, 965, 2569, 928, 1234, 1508, 204, 1236, 1509, 3101,
	969, 968, 996, 1657, 1650, 3089, 208, 208, 65, 199,
	170, 204, 1662, 924, 1967, 1898, 208, 65, 199, 170,
	1261, 957, 1676, 204, 1536, 1237, 1538, 1087, 1652, 204,
	204, 3183, 3180, 2122, 208, 2088, 1664, 2800, 2384, 141,
	204, 964, 3049, 3050, 3048, 902, 1090, 901, 903, 904,
	2650, 905, 906, 1486, 3546, 141, 1710, 2854, 1032, 1714,
	974, 4030, 2795, 204, 2556, 963, 1988, 2555, 1726, 962,
	2557, 1259, 1195, 1077, 1067, 950, 1066, 1018, 1016, 204,
	204, 1198, 2820, 1713, 2089, 2090, 1044, 1913, 1914, 204,
	2799, 955, 2821, 3933, 3297, 3558, 1511, 1088, 4065, 4066,
	3932, 3295, 1428, 3931, 1015, 1496, 1497, 2852, 3549, 2325,
	1610, 1608, 4089, 1040, 1254, 2796, 988, 2774, 953, 3544,
	3933, 4019, 1230, 4007, 3566, 3567, 4026, 995, 1028, 1494,
	3545, 3646, 3405, 1493, 1496, 1497, 4007, 1078, 3914, 3932,
	4018, 2819, 1965, 3931, 4017, 1730, 3082, 1241, 1232, 3405,
	1242, 1024, 2675, 4010, 4035, 4036, 973, 2855, 4132, 4133,
	1235, 1238, 3795, 1192, 676, 676, 1201, 3550, 4031, 4032,
	2240, 4039, 4038, 4037, 4040, 676, 1191, 1042, 1244, 2826,
	3944, 3083, 954, 3084, 1715, 2944, 1231, 1025, 1029, 3917,
	3918, 3919, 3920, 2106, 3480, 703, 703, 2096, 676, 3419,
	1705, 2232, 3000, 3485, 3244, 3683, 2508, 1012, 1712, 1010,
	1014, 1032, 1206, 1209, 1085, 1011, 1008, 1007, 2100, 1013,
	998, 999, 997, 1000, 1001, 1002, 1003, 973, 1030, 2515,
	1031, 2801, 2237, 1522, 1206, 1209, 700, 700, 700, 3835,
	3836, 1026, 1027, 3119, 2372, 2168, 2805, 2772, 1910, 1908,
	1082, 1617, 1616, 1083, 1041, 1430, 2797, 1484, 1396, 971,
	3568, 1304, 1119, 1233, 1510, 3565, 4028, 2437, 1257, 1258,
	4064, 3117, 3934, 3843, 749, 1239, 1256, 751, 1022, 1729,
	1728, 2685, 750, 1966, 1021, 195, 3645, 3422, 3123, 2778,
	3620, 2472, 3554, 1229, 3647, 1184, 3076, 926, 960, 1017,
	1183, 3840, 1183, 2120, 2121, 1221, 3242, 1183, 1191, 3238,
	3785, 2226, 2511, 2512, 3551, 3555, 3553, 3552, 2226, 2994,
	2343, 2510, 3099, 2226, 3680, 1711, 3096, 1070, 3583, 2572,
	1897, 3657, 3450, 1072, 2518, 1251, 3637, 2259, 668, 1240,
	1336, 2227, 4098, 1252, 1253, 1109, 3325, 1109, 3326, 1109,
	927, 3261, 1109, 1093, 3580, 2857, 1075, 1109, 3963, 1109,
	3249, 3299, 3239, 3240, 3560, 3561, 3274, 4034, 3958, 1183,
	2862, 3862, 3868, 2239, 3323, 3324, 3459, 1020, 3241, 1073,
	3860, 1200, 2384, 991, 992, 701, 986, 934, 698, 698,
	698, 987, 2633, 1039, 705, 704, 3786, 3004, 949, 2379,
	1070, 947, 1210, 1612, 701, 3573, 1072, 1246, 3805, 3190,
	1247, 1736, 1739, 1740, 701, 3949, 1243, 3568, 1399, 3965,
	1401, 3294, 1737, 3528, 1190, 3236, 1208, 1207, 3971, 3547,
	912, 1473, 2896, 1417, 3834, 3559, 1186, 1420, 1249, 3535,
	1218, 1426, 1185, 1069, 2770, 712, 3679, 66, 1208, 1207,
	1376, 2363, 1073, 1381, 701, 2689, 1214, 1215, 1179, 1197,
	699, 699, 699, 701, 1659, 3329, 66, 1220, 3829, 1298,
	1305, 695, 695, 695, 985, 171, 66, 697, 697, 697,
	1404, 1300, 1301, 1302, 1303, 696, 696, 696, 3250, 1409,
	171, 929, 1496, 1497, 2243, 2245, 2246, 3668, 1485, 1496,
	1497, 3463, 171, 3659, 3660, 3661, 3212, 171, 171, 171,
	2506, 2452, 2825, 1899, 3584, 171, 66, 2432, 2455, 171,
	3466, 1194, 1196, 1199, 3943, 66, 3748, 2572, 1411, 676,
	2892, 2893, 1524, 2896, 3001, 1245, 676, 3245, 1492, 4171,
	651, 651, 171, 3250, 3869, 2439, 3814, 2484, 3815, 2107,
	651, 651, 3861, 3633, 1561, 1561, 1337, 676, 171, 171,
	4027, 3814, 2514, 3815, 3809, 3564, 2483, 1212, 171, 2829,
	2830, 2504, 2505, 3837, 1250, 2454, 2832, 3120, 703, 1589,
	670, 1348, 1349, 1546, 2828, 1600, 171, 1545, 3465, 3972,
	2945, 1219, 2946, 2947, 1471, 3684, 756, 1563, 3743, 1248,
	225, 1470, 3817, 3300, 1469, 4154, 1488, 1487, 1568, 651,
	975, 2097, 976, 3737, 1706, 3848, 3882, 3817, 2838, 2842,
	2843, 2844, 2839, 2841, 2840, 2232, 4053, 3303, 1178, 3178,
	2475, 2453, 2099, 2432, 3816, 3617, 3513, 3408, 1422, 1033,
	713, 3563, 1559, 1559, 1295, 3237, 1523, 4004, 1532, 3816,
	3758, 3759, 3760, 3764, 3762, 3763, 3765, 3761, 3456, 3319,
	3328, 1642, 3043, 3045, 3323, 3324, 1647, 1380, 2449, 1738,
	2933, 1382, 3194, 1656, 3060, 3061, 2681, 2934, 2935, 2936,
	2561, 2470, 2229, 3258, 2095, 1463, 2438, 2072, 1419, 1555,
	1556, 2440, 2784, 1472, 1438, 3357, 3122, 1226, 1444, 2383,
	1482, 1432, 1688, 1443, 1442, 1480, 1481, 1691, 1501, 1502,
	1408, 1504, 1505, 1441, 1506, 1901, 1561, 1045, 1561, 1191,
	2439, 2442, 2442, 1035, 1651, 1666, 1034, 1540, 1542, 707,
	3473, 1663, 1456, 1453, 3320, 2241, 2242, 1553, 1554, 3750,
	977, 2364, 2942, 3447, 700, 2441, 4155, 700, 700, 3881,
	939, 2665, 2244, 2255, 979, 980, 981, 1513, 1514, 1500,
	1699, 1916, 1503, 2792, 1466, 1423, 1424, 1618, 3131, 3130,
	1433, 1434, 1435, 1436, 1437, 1621, 1439, 1624, 1625, 1451,
	1590, 2356, 1445, 1544, 1632, 1633, 1561, 1225, 1416, 1626,
	1627, 1917, 2439, 2442, 2973, 946, 1613, 1655, 2358, 2357,
	1033, 943, 1431, 1191, 1788, 3655, 941, 940, 4052, 1414,
	1415, 1637, 1410, 3196, 1641, 2355, 3259, 681, 1837, 1110,
	1111, 1575, 1819, 1820, 1115, 1823, 1569, 1640, 1475, 1479,
	1479, 1479, 1581, 1838, 1915, 1601, 3044, 3744, 3745, 1587,
	935, 2496, 1602, 936, 2469, 3711, 1845, 2539, 1847, 1722,
	1848, 1849, 1850, 1475, 1475, 2867, 2443, 2443, 4180, 1683,
	1684, 2438, 2432, 2437, 1073, 2435, 2440, 2149, 3739, 974,
	1188, 1073, 3738, 3409, 1772, 3810, 2375, 2427, 1708, 3811,
	4152, 4153, 2448, 942, 1035, 1191, 2446, 1034, 4173, 1033,
	3810, 1900, 1741, 1703, 3927, 1903, 698, 1905, 939, 698,
	698, 676, 676, 1465, 1674, 2293, 1880, 1677, 2292, 1918,
	1920, 3279, 1921, 2938, 1923, 1924, 2964, 2965, 670, 1589,
	2441, 2785, 1822, 1465, 1932, 1561, 1937, 1938, 2443, 1940,
	1524, 676, 1669, 2438, 2432, 2437, 676, 2435, 2440, 1561,
	1046, 3321, 1719, 985, 1902, 4014, 1960, 4167, 1697, 938,
	4161, 1693, 1687, 1883, 941, 940, 1696, 1721, 1716, 1561,
	1692, 1686, 2937, 2939, 4149, 1524, 1836, 1725, 699, 1707,
	694, 699, 699, 1035, 4108, 2540, 1034, 1262, 3363, 695,
	2572, 1262, 695, 695, 1698, 697, 1760, 2868, 697, 697,
	1987, 2811, 2441, 696, 2374, 1695, 696, 696, 2868, 1994,
	1994, 1694, 1524, 1188, 1524, 1524, 1767, 1768, 676, 676,
	2147, 2061, 1932, 2065, 2812, 2813, 1561, 2069, 2070, 1262,
	2234, 1226, 2085, 4162, 651, 3359, 1827, 1828, 1829, 1675,
	1939, 1226, 1678, 1679, 2652, 3476, 2412, 4109, 651, 1843,
	1561, 3421, 1844, 2963, 1941, 2540, 1224, 4109, 1991, 2974,
	2976, 2977, 2978, 2975, 916, 917, 918, 919, 4076, 1857,
	1858, 1886, 2268, 2330, 2680, 3363, 3333, 676, 1932, 1561,
	3331, 2132, 3218, 676, 676, 676, 711, 711, 3188, 1879,
	1851, 3186, 2540, 2142, 2143, 2144, 2145, 3063, 2775, 2016,
	2151, 4073, 1264, 1265, 1266, 1263, 2670, 225, 2123, 2657,
	225, 225, 4067, 225, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1997, 2063, 1926, 1881,
	1769, 1770, 2225, 2087, 4049, 2425, 1887, 1264, 1265, 1266,
	1263, 4077, 2335, 1891, 1264, 1265, 1266, 1263, 2267, 2101,
	3998, 3997, 3991, 1837, 1837, 2193, 1264, 1265, 1266, 1263,
	1810, 1936, 1377, 2115, 2116, 1837, 1837, 1927, 3966, 2134,
	2135, 2136, 2210, 1223, 4074, 1952, 1971, 1972, 2092, 1846,
	2094, 2108, 2131, 2411, 1956, 2269, 1962, 1963, 3954, 2329,
	3154, 2113, 2114, 1981, 1982, 1968, 1980, 2159, 2328, 1957,
	2162, 2163, 2265, 2165, 3901, 1960, 2204, 4050, 1985, 1561,
	2223, 1970, 1651, 1992, 2300, 1976, 921, 3900, 3895, 3894,
	2195, 2086, 2216, 1262, 1262, 2269, 2118, 3893, 2071, 1975,
	1452, 1977, 1978, 3892, 1775, 1998, 1999, 700, 3872, 2062,
	1547, 2234, 4163, 1961, 3524, 1984, 1993, 1995, 3067, 2067,
	1224, 3871, 2068, 3846, 2073, 3589, 1928, 1929, 1930, 3537,
	3484, 3955, 2217, 3502, 2870, 1979, 3439, 3435, 1943, 1944,
	1945, 1946, 2091, 2683, 2093, 3341, 2102, 3902, 3038, 2682,
	2200, 1986, 2674, 2419, 1989, 1990, 916, 917, 918, 919,
	2398, 2269, 2269, 2288, 2273, 2129, 2761, 1070, 2215, 2130,
	2269, 2188, 2154, 1072, 2140, 1719, 2269, 1475, 1671, 1070,
	2749, 2234, 2741, 2188, 2696, 1072, 1313, 2137, 2138, 1824,
	2678, 1479, 1211, 2156, 2234, 3775, 2269, 937, 2572, 1104,
	1105, 1106, 3538, 1479, 1175, 1476, 3503, 1996, 1279, 3440,
	3436, 2666, 1170, 1806, 2659, 2654, 2173, 3587, 3342, 1073,
	1803, 2540, 1073, 1295, 1805, 1802, 1804, 1808, 1809, 2117,
	2206, 1073, 1807, 1103, 1267, 3284, 1100, 1572, 2646, 2398,
	2644, 2194, 1297, 1826, 1825, 1960, 3114, 2203, 2642, 2201,
	2640, 1307, 2397, 1262, 1461, 1262, 2214, 1262, 1462, 698,
	2331, 2307, 2306, 2398, 1551, 2212, 3959, 2340, 2341, 4174,
	2344, 2291, 4136, 2347, 2282, 1552, 1070, 1316, 676, 1524,
	676, 1524, 1072, 1549, 2655, 2218, 2467, 2660, 2655, 1922,
	2359, 2281, 2157, 1826, 1825, 3936, 754, 2231, 2280, 676,
	676, 676, 2323, 2632, 3845, 3275, 3802, 3741, 921, 2271,
	3960, 2647, 2270, 2645, 676, 676, 676, 676, 2233, 2247,
	3740, 2641, 2256, 2641, 3726, 2398, 1477, 2395, 1073, 3712,
	3516, 699, 3394, 2330, 1262, 1262, 2399, 2400, 2401, 1760,
	2404, 1524, 695, 2249, 1262, 2248, 3514, 1262, 697, 1680,
	2261, 944, 3687, 4016, 3494, 2703, 696, 1863, 2250, 2251,
	3364, 3355, 1517, 1518, 1262, 1520, 1521, 1524, 1525, 1526,
	1527, 1262, 3205, 3713, 3517, 3347, 1813, 1814, 1815, 1816,
	1817, 1818, 1811, 1812, 2461, 2269, 3276, 1548, 2626, 3343,
	3515, 2234, 2213, 2350, 3253, 2352, 1097, 1098, 1099, 1102,
	1507, 1101, 1576, 1577, 1578, 1579, 1580, 1856, 1582, 1583,
	1584, 1585, 1586, 2997, 2996, 2836, 1592, 1593, 1594, 1595,
	2780, 2693, 1681, 2416, 2658, 2563, 2198, 2418, 2197, 2420,
	3277, 2196, 1448, 1447, 1193, 2468, 2301, 2302, 1779, 2304,
	2262, 1779, 676, 1994, 1263, 1605, 2311, 2157, 2332, 3068,
	3753, 2544, 2544, 2085, 2544, 2324, 2326, 2327, 1278, 1277,
	1287, 1288, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1279,
	1266, 1263, 2252, 2253, 651, 651, 3752, 2295, 3085, 2931,
	3732, 2421, 1191, 1264, 1265, 1266, 1263, 2929, 1561, 676,
	2908, 2906, 3395, 2365, 2431, 1282, 1283, 1284, 1285, 1286,
	1279, 2430, 1315, 1461, 676, 3688, 3689, 1462, 4170, 3681,
	1191, 2616, 670, 4146, 1336, 1314, 4145, 2763, 1600, 2764,
	2085, 4144, 3482, 2622, 4142, 2624, 4141, 1841, 225, 4080,
	4048, 2473, 4047, 2985, 2476, 2477, 2478, 2479, 2480, 2481,
	2482, 2618, 1842, 2485, 2486, 2487, 2488, 2489, 2490, 2491,
	2492, 2493, 2494, 2495, 2548, 2497, 2498, 2499, 2500, 2501,
	2413, 2502, 2405, 2546, 3961, 2550, 2424, 1766, 2662, 3682,
	2558, 1599, 2559, 4169, 2417, 2804, 2567, 3897, 2444, 2445,
	3885, 2450, 3483, 1763, 1765, 1762, 2676, 1764, 3875, 2223,
	2574, 2564, 2565, 2984, 2552, 3865, 1561, 1070, 1561, 3793,
	1561, 2408, 2835, 1072, 3715, 1191, 2414, 3714, 3529, 2415,
	3518, 3481, 3243, 2695, 1264, 1265, 1266, 1263, 2627, 2983,
	2981, 2621, 3110, 2705, 2406, 2407, 3080, 1264, 1265, 1266,
	1263, 2513, 3079, 3876, 2409, 2410, 2968, 2519, 3397, 1561,
	1191, 3147, 2967, 2966, 2727, 1264, 1265, 1266, 1263, 1073,
	2553, 2958, 2952, 2951, 2628, 789, 799, 2950, 2970, 2734,
	2949, 1540, 1542, 2776, 1561, 790, 2648, 791, 795, 798,
	794, 792, 793, 1264, 1265, 1266, 1263, 2568, 2560, 2982,
	2980, 2722, 1606, 2334, 2571, 2176, 2686, 1278, 1277, 1287,
	1288, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1279, 1479,
	1264, 1265, 1266, 1263, 3146, 2175, 2735, 2174, 2170, 2620,
	2169, 2636, 2617, 2782, 2783, 2672, 2673, 2786, 2969, 3488,
	796, 2738, 2739, 2124, 676, 676, 1906, 1559, 1904, 1672,
	1337, 1264, 1265, 1266, 1263, 1395, 3493, 3230, 1191, 1731,
	1732, 1733, 1734, 1735, 4166, 1561, 2711, 1173, 1524, 3838,
	3839, 2692, 1559, 797, 1524, 2065, 4164, 2707, 2580, 2707,
	2701, 3627, 4134, 2866, 2687, 2668, 4097, 749, 4096, 2872,
	751, 4093, 2873, 2677, 2679, 750, 2725, 4023, 4022, 3824,
	2684, 1776, 4058, 4002, 2767, 1780, 1781, 1782, 1783, 3946,
	2883, 1264, 1265, 1266, 1263, 1821, 3692, 3940, 3921, 2619,
	1191, 3912, 3889, 1831, 2697, 2698, 1172, 3133, 2905, 1264,
	1265, 1266, 1263, 2853, 3884, 1191, 1191, 1191, 1994, 3883,
	3842, 1191, 1719, 2915, 2916, 2917, 2918, 1191, 2925, 2723,
	2926, 2927, 2848, 2928, 3828, 2930, 2713, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1279, 2266, 2925, 3826, 3794, 3734,
	2700, 2733, 3696, 2690, 3685, 2884, 1884, 3670, 2544, 2850,
	3669, 3665, 2833, 1264, 1265, 1266, 1263, 3663, 2849, 3656,
	3653, 1605, 2986, 3651, 3650, 2016, 2874, 2276, 1543, 3649,
	3625, 651, 2822, 3623, 2863, 1264, 1265, 1266, 1263, 2065,
	3596, 3593, 3591, 1191, 2085, 2085, 2085, 2085, 2085, 2085,
	1264, 1265, 1266, 1263, 2990, 3478, 3460, 2133, 3448, 3432,
	1191, 2085, 3430, 3425, 2544, 3375, 2886, 2284, 4172, 2899,
	2814, 2991, 2831, 1264, 1265, 1266, 1263, 2903, 3353, 3352,
	3350, 2903, 1561, 2815, 2910, 2817, 3046, 3349, 2856, 2865,
	3344, 8, 1964, 676, 676, 7, 3339, 2871, 1264, 1265,
	1266, 1263, 4122, 1073, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1268, 3338, 2744, 2745, 3254, 2885, 2888, 1983, 2750,
	3216, 1936, 3215, 2901, 1264, 1265, 1266, 1263, 2940, 2941,
	2907, 2875, 3206, 3198, 3195, 2913, 2580, 2283, 3193, 2339,
	2880, 2881, 3034, 2956, 2957, 3639, 3124, 3121, 3100, 225,
	3377, 3078, 2736, 3053, 225, 2979, 2971, 3638, 2961, 2959,
	2955, 3002, 2948, 2954, 1264, 1265, 1266, 1263, 2993, 2953,
	2960, 2793, 1264, 1265, 1266, 1263, 1837, 1884, 1837, 2781,
	3047, 3095, 1884, 1884, 1264, 1265, 1266, 1263, 2882, 2264,
	2777, 857, 856, 2992, 2669, 3109, 2360, 2998, 2900, 2348,
	3577, 1561, 2345, 2179, 3116, 3015, 3016, 3017, 3018, 3019,
	3020, 2876, 2172, 2900, 2911, 2912, 2879, 3031, 2995, 2914,
	3035, 3427, 3978, 3064, 1894, 2921, 3037, 1264, 1265, 1266,
	1263, 3090, 2158, 1893, 1673, 2161, 1344, 1340, 2164, 3069,
	3054, 2166, 1339, 3102, 3073, 3974, 3051, 1176, 1264, 1265,
	1266, 1263, 1264, 1265, 1266, 1263, 3036, 1883, 925, 3819,
	3818, 1625, 3094, 3807, 3803, 1632, 1633, 1264, 1265, 1266,
	1263, 1626, 1627, 1287, 1288, 1280, 1281, 1282, 1283, 1284,
	1285, 1286, 1279, 2904, 3652, 3150, 208, 1637, 199, 170,
	1641, 3014, 3634, 3606, 3092, 3509, 3508, 2209, 3506, 3475,
	3444, 3442, 3071, 1640, 3113, 3103, 3197, 3070, 3014, 676,
	1524, 3118, 1264, 1265, 1266, 1263, 3088, 3207, 3208, 3209,
	3211, 3149, 3213, 3214, 3091, 3441, 3086, 3093, 3438, 3106,
	3437, 1191, 3112, 3105, 3431, 3429, 3104, 1191, 3148, 3410,
	3400, 3399, 3386, 3233, 3385, 3285, 3220, 3217, 1264, 1265,
	1266, 1263, 3126, 3247, 3185, 3152, 3125, 3143, 676, 204,
	3990, 3135, 3134, 3132, 3128, 1264, 1265, 1266, 1263, 2760,
	3062, 1073, 3264, 1191, 3141, 3142, 676, 2643, 676, 1191,
	1191, 3145, 2639, 1073, 2638, 3139, 2312, 2305, 2085, 2395,
	3138, 3283, 3140, 3136, 3137, 2299, 1264, 1265, 1266, 1263,
	2298, 2297, 2258, 2296, 2294, 2290, 2263, 2289, 3187, 2287,
	2278, 2461, 2275, 2759, 2272, 3376, 2274, 3257, 2178, 1877,
	1876, 1875, 1840, 3309, 3201, 3312, 3192, 3312, 3312, 3191,
	1839, 3267, 1191, 3260, 1830, 1573, 1571, 3272, 2898, 2083,
	1264, 1265, 1266, 1263, 4121, 4079, 2848, 208, 3996, 1334,
	3334, 2279, 3973, 3907, 3988, 2758, 3330, 3904, 3891, 2286,
	3886, 1561, 1561, 3287, 3292, 3788, 3787, 3296, 3298, 3235,
	1277, 1287, 1288, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1279, 2303, 1264, 1265, 1266, 1263, 2308, 2309, 2310, 3281,
	3769, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321,
	2322, 3751, 3256, 3335, 3336, 675, 675, 2757, 676, 3266,
	3747, 683, 3278, 3282, 3233, 3270, 3271, 1070, 3308, 3725,
	204, 3291, 3709, 1072, 3607, 3317, 2431, 1524, 3604, 3575,
	2065, 2065, 3574, 2430, 1264, 1265, 1266, 1263, 3571, 3570,
	3536, 3533, 3531, 3307, 3496, 3144, 1620, 3159, 3160, 1559,
	1559, 3318, 1631, 3161, 3162, 3163, 3164, 1622, 3165, 3166,
	3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 1073,
	1636, 1073, 3313, 3314, 1639, 1628, 3332, 1073, 1455, 3219,
	3025, 2714, 2987, 2909, 1191, 2900, 2859, 2858, 2727, 2851,
	2816, 2762, 2653, 2562, 3340, 2756, 3398, 2503, 2396, 3986,
	3723, 801, 143, 2367, 1073, 2366, 2333, 143, 3290, 1761,
	1169, 1165, 1166, 1167, 1168, 204, 2719, 2139, 2718, 2717,
	2715, 2900, 1264, 1265, 1266, 1263, 1890, 2900, 2900, 3360,
	3361, 1704, 3346, 3345, 1654, 1629, 1394, 3354, 1379, 1375,
	1374, 3358, 1373, 676, 3351, 1372, 1371, 1370, 3371, 1369,
	3372, 1368, 1367, 3348, 1278, 1277, 1287, 1288, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1279, 1366, 1365, 1364, 3379,
	1363, 682, 1362, 1361, 143, 683, 1360, 1359, 3286, 1358,
	2900, 1357, 1356, 3288, 3289, 3382, 3383, 3384, 2716, 1355,
	3388, 1852, 1853, 1854, 1855, 1354, 1353, 1859, 1860, 1861,
	1862, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1352, 1351, 3984, 2755, 2151, 3452, 1350, 1884,
	3454, 1884, 2754, 1347, 676, 1346, 1345, 3411, 3572, 2753,
	3461, 3414, 3721, 1343, 3417, 3467, 1342, 3418, 2752, 3413,
	1884, 1884, 1264, 1265, 1266, 1263, 3433, 1341, 1338, 1264,
	1265, 1266, 1263, 1331, 1330, 3315, 1264, 1265, 1266, 1263,
	1328, 3468, 1327, 3423, 1326, 1264, 1265, 1266, 1263, 1325,
	676, 2065, 1324, 1323, 1599, 3462, 2707, 3464, 1322, 4114,
	2751, 1321, 3501, 1320, 1319, 3457, 1278, 1277, 1287, 1288,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1279, 3474, 2544,
	2085, 3521, 1318, 1317, 1312, 3477, 1071, 1264, 1265, 1266,
	1263, 143, 3449, 1311, 3451, 3362, 1310, 208, 65, 199,
	170, 3445, 1309, 2661, 3539, 2664, 143, 1191, 143, 1308,
	1228, 1174, 2580, 3367, 3368, 3471, 3309, 3378, 2403, 2381,
	1191, 1216, 4112, 4063, 2720, 2721, 3370, 2837, 2573, 2181,
	1227, 3033, 1191, 3023, 3586, 3028, 3489, 3373, 1561, 3032,
	3029, 3021, 3472, 3026, 3022, 3500, 3523, 126, 3027, 3030,
	3491, 2534, 2535, 68, 3507, 4015, 3923, 3609, 676, 67,
	2065, 3730, 2667, 2656, 1191, 3610, 1449, 1954, 1955, 2704,
	204, 3252, 2710, 2748, 857, 3108, 1690, 1949, 1950, 1951,
	3588, 3520, 2471, 2728, 2729, 3415, 3416, 3562, 3569, 3526,
	3519, 2731, 2732, 3305, 3582, 3306, 225, 3497, 3498, 3499,
	1264, 1265, 1266, 1263, 3504, 3505, 3389, 2737, 3597, 1191,
	2053, 3576, 3600, 3578, 3581, 3608, 1614, 678, 1073, 2361,
	2651, 2691, 3611, 679, 3585, 1073, 1559, 2672, 2673, 680,
	2747, 1668, 3590, 2354, 1648, 2141, 1731, 1884, 3592, 1222,
	3228, 3221, 3595, 2746, 3598, 3203, 2887, 2860, 3602, 3601,
	2423, 3654, 2740, 2391, 1958, 1925, 3594, 1264, 1265, 1266,
	1263, 1826, 1825, 4125, 3599, 2730, 3888, 3667, 3337, 3632,
	1264, 1265, 1266, 1263, 1390, 1391, 2516, 1191, 2509, 1264,
	1265, 1266, 1263, 2066, 2726, 1516, 3618, 1388, 1389, 1386,
	1387, 3628, 1264, 1265, 1266, 1263, 3629, 1191, 1561, 1561,
	2702, 1384, 1385, 1515, 3264, 1255, 2199, 3381, 3664, 3056,
	3666, 1264, 1265, 1266, 1263, 2362, 2211, 3704, 2877, 2878,
	3704, 169, 197, 206, 198, 1468, 1467, 1264, 1265, 1266,
	1263, 1440, 1191, 3719, 1191, 3693, 1491, 3698, 3699, 4086,
	3694, 3722, 3658, 3724, 196, 4084, 4041, 3677, 3676, 4012,
	4011, 1561, 3675, 4009, 3950, 3540, 3908, 3783, 3782, 3695,
	3686, 3720, 1774, 3701, 3522, 3624, 3434, 3407, 3579, 676,
	3406, 1191, 1191, 3525, 3707, 1191, 1191, 3392, 3708, 2456,
	2921, 2426, 3697, 1670, 3523, 2195, 1559, 1772, 3718, 1264,
	1265, 1266, 1263, 675, 1180, 3771, 3672, 3391, 3728, 3066,
	1465, 3453, 3766, 3111, 1189, 1960, 3613, 2789, 3780, 3755,
	3756, 3735, 3014, 3767, 3768, 4116, 4115, 4115, 3731, 2788,
	3789, 3790, 3562, 3569, 2787, 2277, 1398, 1217, 1213, 4116,
	2522, 3749, 3530, 1561, 3532, 3387, 1188, 212, 3, 1772,
	3777, 916, 917, 918, 919, 1483, 1188, 76, 3648, 2,
	4138, 4139, 1, 2768, 3776, 1888, 3820, 3014, 3821, 1884,
	1392, 920, 3778, 915, 1537, 2554, 3813, 2529, 2533, 2534,
	2535, 2530, 2538, 2531, 2536, 3801, 2119, 2532, 1565, 2537,
	1892, 922, 3039, 3040, 3380, 3796, 3800, 3042, 2794, 3825,
	2230, 3827, 3003, 2507, 2371, 3808, 3246, 1450, 3812, 978,
	1832, 1685, 1205, 1073, 1682, 1204, 1202, 1777, 803, 2184,
	3857, 2988, 2962, 3830, 3851, 3779, 3640, 4124, 3641, 4158,
	4078, 1559, 4127, 3773, 1702, 2900, 1191, 3774, 787, 4003,
	3913, 4082, 3915, 3799, 2235, 3874, 1260, 3087, 3841, 3072,
	3880, 3074, 1005, 844, 814, 2529, 2533, 2534, 2535, 2530,
	2538, 2531, 2536, 3853, 3852, 2532, 3632, 2537, 1329, 3849,
	1884, 3854, 1661, 3157, 3155, 1884, 3866, 3870, 813, 3486,
	1191, 143, 143, 143, 1071, 1561, 2827, 2209, 3784, 3059,
	1725, 3859, 1725, 1006, 2167, 3910, 3797, 1615, 1619, 2422,
	3867, 3969, 3729, 3887, 3301, 2895, 1290, 1643, 1294, 3964,
	3534, 3644, 3716, 3717, 3642, 3643, 719, 2098, 3896, 649,
	1055, 3770, 3127, 2180, 1291, 1293, 1289, 3898, 1292, 1278,
	1277, 1287, 1288, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1279, 3929, 3942, 720, 2402, 4029, 3890, 958, 3909, 3469,
	3151, 1700, 205, 2380, 1701, 959, 951, 1296, 2846, 171,
	2845, 1742, 3937, 1269, 3938, 1759, 3176, 3177, 1306, 758,
	2260, 3951, 1810, 1559, 2824, 3557, 3052, 75, 74, 73,
	72, 233, 805, 3727, 3939, 232, 3822, 3690, 3999, 4129,
	784, 783, 3945, 3733, 782, 781, 780, 779, 2527, 3968,
	2528, 2526, 1191, 2524, 2523, 3953, 2080, 2079, 3065, 1073,
	1561, 3390, 2146, 3993, 2148, 3262, 3962, 2924, 4000, 3983,
	3985, 3987, 3989, 3967, 2919, 3899, 2005, 3772, 2003, 1528,
	2451, 2458, 4001, 2002, 3976, 4060, 3424, 3635, 3979, 3980,
	3982, 3746, 2972, 3631, 1948, 2447, 2022, 2943, 2019, 2018,
	2932, 3742, 3992, 3736, 2050, 3855, 3703, 3541, 3542, 4008,
	4006, 3548, 2390, 1561, 1124, 1120, 3857, 1122, 1519, 1123,
	4020, 1121, 2712, 3356, 2428, 1530, 4024, 4021, 3223, 2810,
	2809, 2807, 4051, 2806, 1725, 1425, 3941, 4025, 4059, 3671,
	2578, 4042, 2576, 4044, 1171, 3369, 1567, 3365, 1559, 4045,
	4046, 2192, 3952, 3374, 3024, 4043, 1383, 3956, 3957, 2207,
	3107, 3905, 3906, 2081, 2077, 2076, 1095, 1094, 1596, 3202,
	3204, 4075, 45, 4068, 3005, 4069, 3316, 4070, 2517, 4071,
	3832, 4072, 1953, 4085, 952, 4087, 4088, 2378, 3977, 110,
	41, 4083, 4081, 123, 109, 187, 60, 186, 3929, 59,
	4091, 1559, 1191, 121, 184, 1806, 58, 104, 103, 4092,
	120, 182, 1803, 57, 217, 216, 1805, 1802, 1804, 1808,
	1809, 219, 3880, 4104, 1807, 218, 215, 2629, 2630, 214,
	1603, 4106, 4107, 4105, 213, 4113, 4110, 4111, 4123, 4013,
	4131, 3706, 3995, 4130, 910, 4117, 4118, 4119, 4120, 44,
	43, 188, 42, 111, 61, 208, 65, 199, 170, 4143,
	4135, 40, 39, 38, 1191, 34, 13, 12, 35, 22,
	21, 1689, 20, 4147, 200, 26, 4148, 3968, 4150, 32,
	31, 191, 136, 135, 4156, 201, 30, 4160, 134, 133,
	132, 131, 130, 129, 128, 29, 4157, 19, 52, 51,
	50, 49, 48, 47, 141, 1264, 1265, 1266, 1263, 9,
	124, 1570, 119, 117, 4168, 682, 28, 118, 115, 127,
	116, 114, 113, 4131, 4176, 112, 4130, 4175, 204, 107,
	4094, 4095, 3153, 105, 87, 4160, 4177, 4099, 4100, 4101,
	86, 4181, 85, 100, 99, 98, 97, 96, 95, 93,
	94, 143, 1004, 84, 83, 82, 81, 1791, 1792, 1793,
	1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1813, 1814,
	1815, 1816, 1817, 1818, 1811, 1812, 80, 102, 108, 106,
	91, 208, 65, 199, 170, 1810, 1278, 1277, 1287, 1288,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1279, 101, 92,
	200, 90, 89, 88, 79, 150, 151, 191, 152, 153,
	78, 201, 77, 154, 3426, 168, 155, 167, 166, 143,
	165, 3428, 164, 162, 163, 161, 143, 160, 159, 158,
	141, 157, 2699, 156, 53, 54, 55, 56, 178, 143,
	177, 179, 143, 143, 181, 127, 183, 180, 185, 175,
	4102, 173, 176, 3443, 204, 143, 1278, 1277, 1287, 1288,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1279, 174, 172,
	70, 11, 122, 18, 4, 0, 0, 0, 0, 169,
	197, 206, 198, 125, 0, 0, 0, 0, 0, 0,
	1911, 1912, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 190, 189, 0, 0, 0, 0, 71,
	0, 0, 1725, 0, 0, 0, 0, 0, 0, 2257,
	1942, 0, 0, 0, 0, 1947, 0, 149, 0, 0,
	0, 150, 151, 0, 152, 153, 0, 0, 0, 154,
	0, 0, 155, 1278, 1277, 1287, 1288, 1280, 1281, 1282,
	1283, 1284, 1285, 1286, 1279, 1278, 1277, 1287, 1288, 1280,
	1281, 1282, 1283, 1284, 1285, 1286, 1279, 0, 1806, 0,
	192, 193, 194, 0, 0, 1803, 0, 0, 0, 1805,
	1802, 1804, 1808, 1809, 0, 0, 0, 1807, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2000, 2001, 0,
	0, 0, 0, 0, 0, 169, 197, 206, 198, 125,
	0, 0, 0, 0, 0, 1884, 0, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 190,
	189, 1884, 0, 0, 3603, 71, 0, 3605, 0, 137,
	0, 0, 0, 195, 0, 138, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 2128, 0, 3612, 0,
	0, 0, 2128, 2128, 2128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 193, 194, 0,
	0, 0, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1813, 1814, 1815, 1816, 1817, 1818, 1811, 1812, 0,
	0, 0, 0, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 137, 0, 0, 0, 195,
	0, 138, 0, 2084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	205, 0, 148, 0, 0, 0, 0, 171, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	2051, 0, 0, 0, 0, 2012, 0, 0, 139, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 143, 0,
	0, 143, 143, 0, 143, 0, 2053, 2021, 0, 0,
	0, 0, 0, 0, 0, 0, 2054, 2055, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 46,
	0, 0, 0, 0, 0, 63, 0, 0, 0, 5,
	66, 0, 2020, 0, 1071, 0, 0, 143, 0, 0,
	0, 731, 730, 737, 727, 0, 1071, 0, 144, 145,
	2028, 0, 146, 0, 734, 735, 0, 736, 740, 0,
	0, 721, 143, 0, 0, 147, 205, 0, 148, 0,
	0, 745, 0, 171, 0, 0, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 2044, 0,
	751, 0, 0, 0, 0, 750, 0, 2349, 0, 2351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1296, 140, 46, 0, 0, 2368, 2369,
	2370, 63, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2386, 2387, 2388, 2389, 0, 0, 0,
	0, 0, 0, 0, 144, 145, 0, 0, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2011, 2013, 2010, 0, 0, 2007, 0, 0,
	0, 0, 2032, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2038, 0, 2051, 0, 0, 0, 0,
	2012, 2023, 0, 2006, 1316, 0, 0, 0, 0, 0,
	0, 0, 0, 2026, 2060, 0, 0, 2027, 2029, 2031,
	0, 2033, 2034, 2035, 2039, 2040, 2041, 2043, 2046, 2047,
	2048, 2053, 2021, 0, 0, 0, 0, 0, 2036, 2045,
	2037, 2054, 2055, 0, 0, 722, 724, 723, 0, 0,
	2015, 0, 0, 0, 0, 0, 729, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2020, 733, 0,
	0, 1530, 0, 3975, 0, 748, 0, 0, 0, 0,
	0, 0, 726, 0, 2052, 2028, 716, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2008, 2009, 1567, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2128, 2049, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2025, 0, 2044, 0, 0, 0, 0, 2024, 0,
	4056, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2042, 0, 0, 0, 0, 0, 0, 0,
	0, 2030, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2057, 2056, 0, 0, 0, 728,
	732, 738, 0, 739, 741, 0, 0, 742, 743, 744,
	0, 0, 746, 747, 0, 0, 0, 2011, 2890, 2010,
	0, 0, 2889, 0, 0, 0, 0, 2032, 0, 0,
	4056, 0, 0, 0, 2547, 0, 0, 0, 2038, 0,
	0, 0, 0, 0, 0, 0, 0, 2017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2026, 2060,
	0, 0, 2027, 2029, 2031, 0, 2033, 2034, 2035, 2039,
	2040, 2041, 2043, 2046, 2047, 2048, 0, 0, 0, 0,
	0, 0, 0, 2036, 2045, 2037, 4056, 0, 0, 2059,
	0, 0, 2058, 0, 0, 2015, 0, 0, 0, 0,
	0, 2084, 0, 0, 0, 0, 1143, 0, 0, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2052,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2790, 2791, 0, 0, 0, 0, 0,
	0, 4179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2008, 2009, 0, 0, 0, 0, 0, 725, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2049,
	0, 0, 2864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2025, 0, 0, 731,
	730, 737, 727, 2024, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 735, 0, 736, 740, 0, 0, 721,
	0, 1143, 0, 0, 0, 0, 0, 2042, 0, 745,
	1128, 0, 0, 0, 0, 0, 2030, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2057,
	2056, 1151, 1155, 1157, 1159, 1161, 1162, 1164, 0, 1169,
	1165, 1166, 1167, 1168, 0, 1146, 1147, 1148, 1149, 1126,
	1127, 1152, 0, 1129, 0, 1131, 1132, 1133, 1134, 1130,
	1135, 1136, 1137, 1138, 1139, 1142, 1144, 1140, 1141, 1150,
	0, 0, 0, 0, 0, 0, 0, 1154, 1156, 1158,
	1160, 1163, 2017, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1145, 143, 0,
	0, 0, 0, 0, 2059, 1128, 0, 2058, 143, 1118,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3057, 3058, 0, 0, 1151, 1155, 1157, 1159,
	1161, 1162, 1164, 0, 1169, 1165, 1166, 1167, 1168, 0,
	1146, 1147, 1148, 1149, 1126, 1127, 1152, 0, 1129, 0,
	1131, 1132, 1133, 1134, 1130, 1135, 1136, 1137, 1138, 1139,
	1142, 1144, 1140, 1141, 1150, 0, 0, 0, 0, 0,
	0, 0, 1154, 1156, 1158, 1160, 1163, 0, 0, 0,
	0, 0, 0, 722, 724, 723, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 733, 0, 0, 0,
	0, 0, 1145, 748, 0, 0, 0, 0, 0, 0,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1128, 2084, 2084, 2084, 2084, 2084,
	2084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2084, 2708, 2709, 1151, 1155, 1157, 1159, 1161,
	1162, 1164, 0, 1169, 1165, 1166, 1167, 1168, 0, 1146,
	1147, 1148, 1149, 1126, 1127, 1152, 0, 1129, 0, 1131,
	1132, 1133, 1134, 1130, 1135, 1136, 1137, 1138, 1139, 1142,
	1144, 1140, 1141, 1150, 0, 731, 730, 737, 727, 0,
	0, 1154, 1156, 1158, 1160, 1163, 0, 0, 734, 735,
	0, 736, 740, 0, 0, 721, 0, 0, 0, 0,
	0, 0, 0, 2051, 0, 745, 0, 0, 0, 0,
	208, 0, 0, 0, 0, 0, 0, 0, 3200, 0,
	143, 1145, 0, 0, 0, 143, 0, 728, 732, 738,
	0, 739, 741, 3702, 0, 742, 743, 744, 0, 2053,
	746, 747, 0, 0, 0, 0, 143, 0, 0, 0,
	0, 749, 0, 0, 751, 2051, 0, 0, 143, 750,
	0, 0, 0, 0, 0, 0, 0, 3255, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1153, 0, 0,
	0, 0, 0, 204, 0, 3268, 0, 3269, 0, 0,
	0, 2053, 0, 2028, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2028, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2044, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1153, 0, 0, 0, 725, 0, 0, 722,
	724, 723, 0, 0, 2051, 0, 0, 0, 0, 0,
	729, 0, 0, 2044, 0, 0, 0, 2128, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 0, 748,
	0, 0, 0, 0, 0, 0, 726, 0, 0, 0,
	2053, 0, 0, 0, 1071, 2032, 143, 0, 0, 0,
	0, 0, 143, 0, 0, 0, 2038, 0, 0, 2084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2026, 2060, 0, 143,
	2027, 2029, 2031, 0, 2033, 2034, 2035, 2039, 2040, 2041,
	2043, 2046, 2047, 2048, 2028, 0, 0, 2032, 0, 0,
	0, 2036, 2045, 2037, 0, 0, 0, 0, 2038, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1153, 0, 0, 0, 0, 0, 0, 2026, 2060,
	0, 0, 2027, 2029, 2031, 0, 2033, 2034, 2035, 2039,
	2040, 2041, 2043, 2046, 2047, 2048, 0, 2052, 0, 0,
	0, 0, 3420, 2036, 2045, 2037, 0, 0, 3850, 0,
	0, 0, 2044, 728, 732, 738, 0, 739, 741, 0,
	0, 742, 743, 744, 0, 0, 746, 747, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2049, 0, 2052,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2025, 0, 0, 0, 0, 0,
	0, 2024, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2042, 2032, 0, 0, 2049,
	0, 0, 0, 0, 2030, 0, 0, 2038, 0, 0,
	0, 0, 0, 0, 0, 0, 2025, 0, 0, 0,
	0, 0, 0, 2024, 0, 0, 0, 2026, 2060, 2128,
	0, 2027, 2029, 2031, 0, 2033, 2034, 2035, 2039, 2040,
	2041, 2043, 2046, 2047, 2048, 0, 0, 2042, 0, 0,
	0, 0, 2036, 2045, 2037, 0, 2030, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2052, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2049, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 0, 2025, 0, 0, 0, 0,
	143, 0, 2024, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2042, 0, 0, 0,
	0, 0, 0, 0, 0, 2030, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 0, 0, 0, 0, 404, 0,
	0, 534, 567, 556, 640, 522, 0, 143, 0, 0,
	0, 0, 773, 0, 0, 0, 339, 0, 3754, 372,
	571, 553, 563, 554, 539, 540, 541, 548, 351, 542,
	543, 544, 514, 545, 515, 546, 547, 812, 570, 521,
	436, 388, 588, 587, 0, 0, 881, 889, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 765, 0, 0, 802, 857, 856, 789, 799, 0,
	0, 313, 231, 516, 636, 518, 517, 790, 0, 791,
	795, 798, 794, 792, 793, 0, 872, 0, 0, 0,
	0, 0, 0, 757, 769, 0, 774, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 143, 0,
	766, 767, 0, 0, 0, 0, 822, 0, 768, 0,
	0, 817, 796, 800, 0, 0, 0, 0, 303, 443,
	462, 314, 431, 475, 319, 439, 454, 309, 403, 428,
	0, 0, 305, 460, 438, 385, 362, 363, 304, 0,
	422, 337, 353, 334, 401, 797, 820, 824, 333, 895,
	818, 470, 307, 0, 469, 400, 456, 461, 386, 379,
	0, 306, 458, 384, 378, 366, 343, 896, 367, 368,
	357, 412, 376, 413, 358, 390, 389, 391, 0, 0,
	0, 0, 0, 498, 499, 0, 0, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	815, 0, 633, 0, 472, 0, 0, 879, 0, 0,
	0, 442, 0, 0, 369, 0, 0, 0, 819, 0,
	425, 406, 892, 0, 0, 423, 374, 457, 414, 463,
	444, 471, 419, 415, 297, 445, 336, 387, 310, 312,
	653, 338, 340, 344, 345, 396, 397, 409, 430, 447,
	448, 449, 335, 320, 424, 321, 355, 322, 298, 328,
	326, 329, 432, 330, 300, 410, 453, 0, 350, 420,
	382, 301, 381, 411, 452, 451, 311, 479, 485, 486,
	575, 0, 491, 664, 665, 666, 500, 0, 416, 0,
	0, 0, 0, 0, 143, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 1834, 1833, 1835,
	484, 370, 371, 0, 342, 341, 383, 302, 348, 294,
	295, 659, 876, 402, 598, 631, 632, 523, 0, 891,
	871, 873, 874, 878, 882, 883, 884, 885, 886, 888,
	890, 894, 658, 0, 577, 592, 662, 591, 655, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 299, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 893, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 823, 573, 574, 392, 393, 394, 395,
	880, 599, 318, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 667, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	317, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 315, 464, 435, 380, 552, 579, 902,
	875, 901, 903, 904, 900, 905, 906, 887, 778, 0,
	830, 898, 897, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 327, 288, 323,
	324, 331, 656, 652, 455, 657, 785, 296, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 864, 837, 838,
	839, 775, 840, 834, 835, 776, 836, 865, 828, 861,
	862, 804, 831, 841, 860, 842, 863, 866, 867, 907,
	908, 848, 832, 260, 909, 845, 868, 859, 858, 843,
	829, 869, 870, 811, 806, 846, 847, 833, 852, 853,
	854, 777, 825, 826, 827, 849, 850, 807, 808, 809,
	810, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 654, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 855, 641, 440,
	441, 648, 0, 851, 644, 645, 642, 377, 427, 446,
	434, 821, 660, 519, 520, 661, 630, 0, 770, 0,
	404, 0, 0, 534, 567, 556, 640, 522, 0, 0,
	0, 0, 0, 0, 773, 0, 0, 0, 339, 1885,
	0, 372, 571, 553, 563, 554, 539, 540, 541, 548,
	351, 542, 543, 544, 514, 545, 515, 546, 547, 812,
	570, 521, 436, 388, 588, 587, 0, 0, 881, 889,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	2110, 0, 0, 765, 0, 0, 802, 857, 856, 789,
	799, 0, 0, 313, 231, 516, 636, 518, 517, 790,
	0, 791, 795, 798, 794, 792, 793, 0, 872, 0,
	0, 0, 0, 0, 0, 757, 769, 0, 774, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 766, 767, 0, 0, 0, 0, 822, 0,
	768, 0, 0, 2111, 796, 800, 0, 0, 0, 0,
	303, 443, 462, 314, 431, 475, 319, 439, 454, 309,
	403, 428, 0, 0, 305, 460, 438, 385, 362, 363,
	304, 0, 422, 337, 353, 334, 401, 797, 820, 824,
	333, 895, 818, 470, 307, 0, 469, 400, 456, 461,
	386, 379, 0, 306, 458, 384, 378, 366, 343, 896,
	367, 368, 357, 412, 376, 413, 358, 390, 389, 391,
	0, 0, 0, 0, 0, 498, 499, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 815, 0, 633, 0, 472, 0, 0, 879,
	0, 0, 0, 442, 0, 0, 369, 0, 0, 0,
	819, 0, 425, 406, 892, 0, 0, 423, 374, 457,
	414, 463, 444, 471, 419, 415, 297, 445, 336, 387,
	310, 312, 653, 338, 340, 344, 345, 396, 397, 409,
	430, 447, 448, 449, 335, 320, 424, 321, 355, 322,
	298, 328, 326, 329, 432, 330, 300, 410, 453, 0,
	350, 420, 382, 301, 381, 411, 452, 451, 311, 479,
	485, 486, 575, 0, 491, 664, 665, 666, 500, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 302,
	348, 294, 295, 659, 876, 402, 598, 631, 632, 523,
	0, 891, 871, 873, 874, 878, 882, 883, 884, 885,
	886, 888, 890, 894, 658, 0, 577, 592, 662, 591,
	655, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 299, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 893, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 823, 573, 574, 392, 393,
	394, 395, 880, 599, 318, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	667, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 317, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 315, 464, 435, 380, 552,
	579, 902, 875, 901, 903, 904, 900, 905, 906, 887,
	778, 0, 830, 898, 897, 899, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 327,
	288, 323, 324, 331, 656, 652, 455, 657, 785, 296,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 864,
	837, 838, 839, 775, 840, 834, 835, 776, 836, 865,
	828, 861, 862, 804, 831, 841, 860, 842, 863, 866,
	867, 907, 908, 848, 832, 260, 909, 845, 868, 859,
	858, 843, 829, 869, 870, 811, 806, 846, 847, 833,
	852, 853, 854, 777, 825, 826, 827, 849, 850, 807,
	808, 809, 810, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 654, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 855,
	641, 440, 441, 648, 0, 851, 644, 645, 642, 377,
	427, 446, 434, 0, 660, 519, 520, 661, 630, 0,
	770, 208, 821, 0, 0, 0, 0, 0, 0, 0,
	0, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 773, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	1299, 570, 521, 436, 388, 588, 587, 0, 0, 881,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 765, 0, 0, 802, 857, 856,
	789, 799, 0, 0, 313, 231, 516, 636, 518, 517,
	790, 0, 791, 795, 798, 794, 792, 793, 0, 872,
	0, 0, 0, 0, 0, 0, 757, 769, 0, 774,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 766, 767, 0, 0, 0, 0, 822,
	0, 768, 0, 0, 817, 796, 800, 0, 0, 0,
	0, 303, 443, 462, 314, 431, 475, 319, 439, 454,
	309, 403, 428, 0, 0, 305, 460, 438, 385, 362,
	363, 304, 0, 422, 337, 353, 334, 401, 797, 820,
	824, 333, 895, 818, 470, 307, 0, 469, 400, 456,
	461, 386, 379, 0, 306, 458, 384, 378, 366, 343,
	896, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 815, 0, 633, 0, 472, 0, 0,
	879, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 819, 0, 425, 406, 892, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 297, 445, 336,
	387, 310, 312, 653, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 320, 424, 321, 355,
	322, 298, 328, 326, 329, 432, 330, 300, 410, 453,
	0, 350, 420, 382, 301, 381, 411, 452, 451, 311,
	479, 485, 486, 575, 0, 491, 664, 665, 666, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 505, 506, 507, 509, 510, 511, 512, 576,
	593, 560, 530, 493, 584, 527, 531, 532, 360, 596,
	0, 0, 0, 484, 370, 371, 0, 342, 341, 383,
	302, 348, 294, 295, 659, 876, 402, 598, 631, 632,
	523, 0, 891, 871, 873, 874, 878, 882, 883, 884,
	885, 886, 888, 890, 894, 658, 0, 577, 592, 662,
	591, 655, 408, 0, 429, 589, 536, 0, 581, 555,
	0, 582, 551, 586, 0, 525, 0, 437, 465, 477,
	494, 497, 526, 611, 612, 613, 299, 496, 615, 616,
	617, 618, 619, 620, 621, 614, 893, 558, 535, 561,
	476, 538, 537, 0, 0, 572, 823, 573, 574, 392,
	393, 394, 395, 880, 599, 318, 495, 418, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	562, 667, 0, 622, 623, 0, 0, 489, 490, 347,
	354, 508, 356, 317, 407, 349, 474, 364, 0, 501,
	566, 502, 625, 628, 626, 627, 399, 359, 361, 433,
	365, 375, 421, 473, 405, 426, 315, 464, 435, 380,
	552, 579, 902, 875, 901, 903, 904, 900, 905, 906,
	887, 778, 0, 830, 898, 897, 899, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 606,
	605, 604, 603, 602, 601, 600, 0, 0, 549, 450,
	327, 288, 323, 324, 331, 656, 652, 455, 657, 785,
	296, 529, 373, 171, 417, 346, 594, 595, 0, 646,
	864, 837, 838, 839, 775, 840, 834, 835, 776, 836,
	865, 828, 861, 862, 804, 831, 841, 860, 842, 863,
	866, 867, 907, 908, 848, 832, 260, 909, 845, 868,
	859, 858, 843, 829, 869, 870, 811, 806, 846, 847,
	833, 852, 853, 854, 777, 825, 826, 827, 849, 850,
	807, 808, 809, 810, 0, 0, 0, 480, 481, 482,
	504, 0, 466, 528, 654, 0, 0, 0, 0, 0,
	0, 0, 578, 590, 624, 0, 634, 635, 637, 639,
	855, 641, 440, 441, 648, 0, 851, 644, 645, 642,
	377, 427, 446, 434, 821, 660, 519, 520, 661, 630,
	0, 770, 0, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 773, 0, 0,
	0, 339, 4178, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 812, 570, 521, 436, 388, 588, 587, 0,
	0, 881, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 765, 0, 0, 802,
	857, 856, 789, 799, 0, 0, 313, 231, 516, 636,
	518, 517, 790, 0, 791, 795, 798, 794, 792, 793,
	0, 872, 0, 0, 0, 0, 0, 0, 757, 769,
	0, 774, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 766, 767, 0, 0, 0,
	0, 822, 0, 768, 0, 0, 817, 796, 800, 0,
	0, 0, 0, 303, 443, 462, 314, 431, 475, 319,
	439, 454, 309, 403, 428, 0, 0, 305, 460, 438,
	385, 362, 363, 304, 0, 422, 337, 353, 334, 401,
	797, 820, 824, 333, 895, 818, 470, 307, 0, 469,
	400, 456, 461, 386, 379, 0, 306, 458, 384, 378,
	366, 343, 896, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 815, 0, 633, 0, 472,
	0, 0, 879, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 819, 0, 425, 406, 892, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 297,
	445, 336, 387, 310, 312, 653, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 320, 424,
	321, 355, 322, 298, 328, 326, 329, 432, 330, 300,
	410, 453, 0, 350, 420, 382, 301, 381, 411, 452,
	451, 311, 479, 485, 486, 575, 0, 491, 664, 665,
	666, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 505, 506, 507, 509, 510, 511,
	512, 576, 593, 560, 530, 493, 584, 527, 531, 532,
	360, 596, 0, 0, 0, 484, 370, 371, 0, 342,
	341, 383, 302, 348, 294, 295, 659, 876, 402, 598,
	631, 632, 523, 0, 891, 871, 873, 874, 878, 882,
	883, 884, 885, 886, 888, 890, 894, 658, 0, 577,
	592, 662, 591, 655, 408, 0, 429, 589, 536, 0,
	581, 555, 0, 582, 551, 586, 0, 525, 0, 437,
	465, 477, 494, 497, 526, 611, 612, 613, 299, 496,
	615, 616, 617, 618, 619, 620, 621, 614, 893, 558,
	535, 561, 476, 538, 537, 0, 0, 572, 823, 573,
	574, 392, 393, 394, 395, 880, 599, 318, 495, 418,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 565, 562, 667, 0, 622, 623, 0, 0, 489,
	490, 347, 354, 508, 356, 317, 407, 349, 474, 364,
	0, 501, 566, 502, 625, 628, 626, 627, 399, 359,
	361, 433, 365, 375, 421, 473, 405, 426, 315, 464,
	435, 380, 552, 579, 902, 875, 901, 903, 904, 900,
	905, 906, 887, 778, 0, 830, 898, 897, 899, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 606, 605, 604, 603, 602, 601, 600, 0, 0,
	549, 450, 327, 288, 323, 324, 331, 656, 652, 455,
	657, 785, 296, 529, 373, 0, 417, 346, 594, 595,
	0, 646, 864, 837, 838, 839, 775, 840, 834, 835,
	776, 836, 865, 828, 861, 862, 804, 831, 841, 860,
	842, 863, 866, 867, 907, 908, 848, 832, 260, 909,
	845, 868, 859, 858, 843, 829, 869, 870, 811, 806,
	846, 847, 833, 852, 853, 854, 777, 825, 826, 827,
	849, 850, 807, 808, 809, 810, 0, 0, 0, 480,
	481, 482, 504, 0, 466, 528, 654, 0, 0, 0,
	0, 0, 0, 0, 578, 590, 624, 0, 634, 635,
	637, 639, 855, 641, 440, 441, 648, 0, 851, 644,
	645, 642, 377, 427, 446, 434, 821, 660, 519, 520,
	661, 630, 0, 770, 0, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 773,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 812, 570, 521, 436, 388, 588,
	587, 0, 0, 881, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 765, 0,
	0, 802, 857, 856, 789, 799, 0, 0, 313, 231,
	516, 636, 518, 517, 790, 0, 791, 795, 798, 794,
	792, 793, 0, 872, 0, 0, 0, 0, 0, 0,
	757, 769, 0, 774, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 766, 767, 0,
	0, 0, 0, 822, 0, 768, 0, 0, 817, 796,
	800, 0, 0, 0, 0, 303, 443, 462, 314, 431,
	475, 319, 439, 454, 309, 403, 428, 0, 0, 305,
	460, 438, 385, 362, 363, 304, 0, 422, 337, 353,
	334, 401, 797, 820, 824, 333, 895, 818, 470, 307,
	0, 469, 400, 456, 461, 386, 379, 0, 306, 458,
	384, 378, 366, 343, 896, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 815, 0, 633,
	0, 472, 0, 0, 879, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 819, 0, 425, 406, 892,
	4057, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 297, 445, 336, 387, 310, 312, 653, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	320, 424, 321, 355, 322, 298, 328, 326, 329, 432,
	330, 300, 410, 453, 0, 350, 420, 382, 301, 381,
	411, 452, 451, 311, 479, 485, 486, 575, 0, 491,
	664, 665, 666, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 505, 506, 507, 509,
	510, 511, 512, 576, 593, 560, 530, 493, 584, 527,
	531, 532, 360, 596, 0, 0, 0, 484, 370, 371,
	0, 342, 341, 383, 302, 348, 294, 295, 659, 876,
	402, 598, 631, 632, 523, 0, 891, 871, 873, 874,
	878, 882, 883, 884, 885, 886, 888, 890, 894, 658,
	0, 577, 592, 662, 591, 655, 408, 0, 429, 589,
	536, 0, 581, 555, 0, 582, 551, 586, 0, 525,
	0, 437, 465, 477, 494, 497, 526, 611, 612, 613,
	299, 496, 615, 616, 617, 618, 619, 620, 621, 614,
	893, 558, 535, 561, 476, 538, 537, 0, 0, 572,
	823, 573, 574, 392, 393, 394, 395, 880, 599, 318,
	495, 418, 0, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 565, 562, 667, 0, 622, 623, 0,
	0, 489, 490, 347, 354, 508, 356, 317, 407, 349,
	474, 364, 0, 501, 566, 502, 625, 628, 626, 627,
	399, 359, 361, 433, 365, 375, 421, 473, 405, 426,
	315, 464, 435, 380, 552, 579, 902, 875, 901, 903,
	904, 900, 905, 906, 887, 778, 0, 830, 898, 897,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 606, 605, 604, 603, 602, 601, 600,
	0, 0, 549, 450, 327, 288, 323, 324, 331, 656,
	652, 455, 657, 785, 296, 529, 373, 0, 417, 346,
	594, 595, 0, 646, 864, 837, 838, 839, 775, 840,
	834, 835, 776, 836, 865, 828, 861, 862, 804, 831,
	841, 860, 842, 863, 866, 867, 907, 908, 848, 832,
	260, 909, 845, 868, 859, 858, 843, 829, 869, 870,
	811, 806, 846, 847, 833, 852, 853, 854, 777, 825,
	826, 827, 849, 850, 807, 808, 809, 810, 0, 0,
	0, 480, 481, 482, 504, 0, 466, 528, 654, 0,
	0, 0, 0, 0, 0, 0, 578, 590, 624, 0,
	634, 635, 637, 639, 855, 641, 440, 441, 648, 0,
	851, 644, 645, 642, 377, 427, 446, 434, 821, 660,
	519, 520, 661, 630, 0, 770, 0, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 773, 0, 0, 0, 339, 1885, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 812, 570, 521, 436,
	388, 588, 587, 0, 0, 881, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	765, 0, 0, 802, 857, 856, 789, 799, 0, 0,
	313, 231, 516, 636, 518, 517, 790, 0, 791, 795,
	798, 794, 792, 793, 0, 872, 0, 0, 0, 0,
	0, 0, 757, 769, 0, 774, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 766,
	767, 0, 0, 0, 0, 822, 0, 768, 0, 0,
	817, 796, 800, 0, 0, 0, 0, 303, 443, 462,
	314, 431, 475, 319, 439, 454, 309, 403, 428, 0,
	0, 305, 460, 438, 385, 362, 363, 304, 0, 422,
	337, 353, 334, 401, 797, 820, 824, 333, 895, 818,
	470, 307, 0, 469, 400, 456, 461, 386, 379, 0,
	306, 458, 384, 378, 366, 343, 896, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 815,
	0, 633, 0, 472, 0, 0, 879, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 819, 0, 425,
	406, 892, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 297, 445, 336, 387, 310, 312, 653,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 320, 424, 321, 355, 322, 298, 328, 326,
	329, 432, 330, 300, 410, 453, 0, 350, 420, 382,
	301, 381, 411, 452, 451, 311, 479, 485, 486, 575,
	0, 491, 664, 665, 666, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 505, 506,
	507, 509, 510, 511, 512, 576, 593, 560, 530, 493,
	584, 527, 531, 532, 360, 596, 0, 0, 0, 484,
	370, 371, 0, 342, 341, 383, 302, 348, 294, 295,
	659, 876, 402, 598, 631, 632, 523, 0, 891, 871,
	873, 874, 878, 882, 883, 884, 885, 886, 888, 890,
	894, 658, 0, 577, 592, 662, 591, 655, 408, 0,
	429, 589, 536, 0, 581, 555, 0, 582, 551, 586,
	0, 525, 0, 437, 465, 477, 494, 497, 526, 611,
	612, 613, 299, 496, 615, 616, 617, 618, 619, 620,
	621, 614, 893, 558, 535, 561, 476, 538, 537, 0,
	0, 572, 823, 573, 574, 392, 393, 394, 395, 880,
	599, 318, 495, 418, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 565, 562, 667, 0, 622,
	623, 0, 0, 489, 490, 347, 354, 508, 356, 317,
	407, 349, 474, 364, 0, 501, 566, 502, 625, 628,
	626, 627, 399, 359, 361, 433, 365, 375, 421, 473,
	405, 426, 315, 464, 435, 380, 552, 579, 902, 875,
	901, 903, 904, 900, 905, 906, 887, 778, 0, 830,
	898, 897, 899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 606, 605, 604, 603, 602,
	601, 600, 0, 0, 549, 450, 327, 288, 323, 324,
	331, 656, 652, 455, 657, 785, 296, 529, 373, 0,
	417, 346, 594, 595, 0, 646, 864, 837, 838, 839,
	775, 840, 834, 835, 776, 836, 865, 828, 861, 862,
	804, 831, 841, 860, 842, 863, 866, 867, 907, 908,
	848, 832, 260, 909, 845, 868, 859, 858, 843, 829,
	869, 870, 811, 806, 846, 847, 833, 852, 853, 854,
	777, 825, 826, 827, 849, 850, 807, 808, 809, 810,
	0, 0, 0, 480, 481, 482, 504, 0, 466, 528,
	654, 0, 0, 0, 0, 0, 0, 0, 578, 590,
	624, 0, 634, 635, 637, 639, 855, 641, 440, 441,
	648, 0, 851, 644, 645, 642, 377, 427, 446, 434,
	821, 660, 519, 520, 661, 630, 0, 770, 0, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 773, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 812, 570,
	521, 436, 388, 588, 587, 0, 0, 881, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 765, 0, 0, 802, 857, 856, 789, 799,
	0, 0, 313, 231, 516, 636, 518, 517, 790, 0,
	791, 795, 798, 794, 792, 793, 0, 872, 0, 0,
	0, 0, 0, 0, 757, 769, 0, 774, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 766, 767, 1598, 0, 0, 0, 822, 0, 768,
	0, 0, 817, 796, 800, 0, 0, 0, 0, 303,
	443, 462, 314, 431, 475, 319, 439, 454, 309, 403,
	428, 0, 0, 305, 460, 438, 385, 362, 363, 304,
	0, 422, 337, 353, 334, 401, 797, 820, 824, 333,
	895, 818, 470, 307, 0, 469, 400, 456, 461, 386,
	379, 0, 306, 458, 384, 378, 366, 343, 896, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 815, 0, 633, 0, 472, 0, 0, 879, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 819,
	0, 425, 406, 892, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 297, 445, 336, 387, 310,
	312, 653, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 320, 424, 321, 355, 322, 298,
	328, 326, 329, 432, 330, 300, 410, 453, 0, 350,
	420, 382, 301, 381, 411, 452, 451, 311, 479, 485,
	486, 575, 0, 491, 664, 665, 666, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 509, 510, 511, 512, 576, 593, 560,
	530, 493, 584, 527, 531, 532, 360, 596, 0, 0,
	0, 484, 370, 371, 0, 342, 341, 383, 302, 348,
	294, 295, 659, 876, 402, 598, 631, 632, 523, 0,
	891, 871, 873, 874, 878, 882, 883, 884, 885, 886,
	888, 890, 894, 658, 0, 577, 592, 662, 591, 655,
	408, 0, 429, 589, 536, 0, 581, 555, 0, 582,
	551, 586, 0, 525, 0, 437, 465, 477, 494, 497,
	526, 611, 612, 613, 299, 496, 615, 616, 617, 618,
	619, 620, 621, 614, 893, 558, 535, 561, 476, 538,
	537, 0, 0, 572, 823, 573, 574, 392, 393, 394,
	395, 880, 599, 318, 495, 418, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 562, 667,
	0, 622, 623, 0, 0, 489, 490, 347, 354, 508,
	356, 317, 407, 349, 474, 364, 0, 501, 566, 502,
	625, 628, 626, 627, 399, 359, 361, 433, 365, 375,
	421, 473, 405, 426, 315, 464, 435, 380, 552, 579,
	902, 875, 901, 903, 904, 900, 905, 906, 887, 778,
	0, 830, 898, 897, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 606, 605, 604,
	603, 602, 601, 600, 0, 0, 549, 450, 327, 288,
	323, 324, 331, 656, 652, 455, 657, 785, 296, 529,
	373, 0, 417, 346, 594, 595, 0, 646, 864, 837,
	838, 839, 775, 840, 834, 835, 776, 836, 865, 828,
	861, 862, 804, 831, 841, 860, 842, 863, 866, 867,
	907, 908, 848, 832, 260, 909, 845, 868, 859, 858,
	843, 829, 869, 870, 811, 806, 846, 847, 833, 852,
	853, 854, 777, 825, 826, 827, 849, 850, 807, 808,
	809, 810, 0, 0, 0, 480, 481, 482, 504, 0,
	466, 528, 654, 0, 0, 0, 0, 0, 0, 0,
	578, 590, 624, 0, 634, 635, 637, 639, 855, 641,
	440, 441, 648, 0, 851, 644, 645, 642, 377, 427,
	446, 434, 0, 660, 519, 520, 661, 630, 821, 770,
	0, 2285, 0, 0, 0, 0, 0, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 773, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 812, 570, 521, 436,
	388, 588, 587, 0, 0, 881, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	765, 0, 0, 802, 857, 856, 789, 799, 0, 0,
	313, 231, 516, 636, 518, 517, 790, 0, 791, 795,
	798, 794, 792, 793, 0, 872, 0, 0, 0, 0,
	0, 0, 757, 769, 0, 774, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 766,
	767, 0, 0, 0, 0, 822, 0, 768, 0, 0,
	817, 796, 800, 0, 0, 0, 0, 303, 443, 462,
	314, 431, 475, 319, 439, 454, 309, 403, 428, 0,
	0, 305, 460, 438, 385, 362, 363, 304, 0, 422,
	337, 353, 334, 401, 797, 820, 824, 333, 895, 818,
	470, 307, 0, 469, 400, 456, 461, 386, 379, 0,
	306, 458, 384, 378, 366, 343, 896, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 815,
	0, 633, 0, 472, 0, 0, 879, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 819, 0, 425,
	406, 892, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 297, 445, 336, 387, 310, 312, 653,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 320, 424, 321, 355, 322, 298, 328, 326,
	329, 432, 330, 300, 410, 453, 0, 350, 420, 382,
	301, 381, 411, 452, 451, 311, 479, 485, 486, 575,
	0, 491, 664, 665, 666, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 505, 506,
	507, 509, 510, 511, 512, 576, 593, 560, 530, 493,
	584, 527, 531, 532, 360, 596, 0, 0, 0, 484,
	370, 371, 0, 342, 341, 383, 302, 348, 294, 295,
	659, 876, 402, 598, 631, 632, 523, 0, 891, 871,
	873, 874, 878, 882, 883, 884, 885, 886, 888, 890,
	894, 658, 0, 577, 592, 662, 591, 655, 408, 0,
	429, 589, 536, 0, 581, 555, 0, 582, 551, 586,
	0, 525, 0, 437, 465, 477, 494, 497, 526, 611,
	612, 613, 299, 496, 615, 616, 617, 618, 619, 620,
	621, 614, 893, 558, 535, 561, 476, 538, 537, 0,
	0, 572, 823, 573, 574, 392, 393, 394, 395, 880,
	599, 318, 495, 418, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 565, 562, 667, 0, 622,
	623, 0, 0, 489, 490, 347, 354, 508, 356, 317,
	407, 349, 474, 364, 0, 501, 566, 502, 625, 628,
	626, 627, 399, 359, 361, 433, 365, 375, 421, 473,
	405, 426, 315, 464, 435, 380, 552, 579, 902, 875,
	901, 903, 904, 900, 905, 906, 887, 778, 0, 830,
	898, 897, 899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 606, 605, 604, 603, 602,
	601, 600, 0, 0, 549, 450, 327, 288, 323, 324,
	331, 656, 652, 455, 657, 785, 296, 529, 373, 0,
	417, 346, 594, 595, 0, 646, 864, 837, 838, 839,
	775, 840, 834, 835, 776, 836, 865, 828, 861, 862,
	804, 831, 841, 860, 842, 863, 866, 867, 907, 908,
	848, 832, 260, 909, 845, 868, 859, 858, 843, 829,
	869, 870, 811, 806, 846, 847, 833, 852, 853, 854,
	777, 825, 826, 827, 849, 850, 807, 808, 809, 810,
	0, 0, 0, 480, 481, 482, 504, 0, 466, 528,
	654, 0, 0, 0, 0, 0, 0, 0, 578, 590,
	624, 0, 634, 635, 637, 639, 855, 641, 440, 441,
	648, 0, 851, 644, 645, 642, 377, 427, 446, 434,
	821, 660, 519, 520, 661, 630, 0, 770, 0, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 773, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 812, 570,
	521, 436, 388, 588, 587, 0, 0, 881, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 765, 0, 0, 802, 857, 856, 789, 799,
	0, 0, 313, 231, 516, 636, 518, 517, 790, 0,
	791, 795, 798, 794, 792, 793, 0, 872, 0, 0,
	0, 0, 0, 0, 757, 769, 0, 774, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 766, 767, 1878, 0, 0, 0, 822, 0, 768,
	0, 0, 817, 796, 800, 0, 0, 0, 0, 303,
	443, 462, 314, 431, 475, 319, 439, 454, 309, 403,
	428, 0, 0, 305, 460, 438, 385, 362, 363, 304,
	0, 422, 337, 353, 334, 401, 797, 820, 824, 333,
	895, 818, 470, 307, 0, 469, 400, 456, 461, 386,
	379, 0, 306, 458, 384, 378, 366, 343, 896, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 815, 0, 633, 0, 472, 0, 0, 879, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 819,
	0, 425, 406, 892, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 297, 445, 336, 387, 310,
	312, 653, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 320, 424, 321, 355, 322, 298,
	328, 326, 329, 432, 330, 300, 410, 453, 0, 350,
	420, 382, 301, 381, 411, 452, 451, 311, 479, 485,
	486, 575, 0, 491, 664, 665, 666, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 509, 510, 511, 512, 576, 593, 560,
	530, 493, 584, 527, 531, 532, 360, 596, 0, 0,
	0, 484, 370, 371, 0, 342, 341, 383, 302, 348,
	294, 295, 659, 876, 402, 598, 631, 632, 523, 0,
	891, 871, 873, 874, 878, 882, 883, 884, 885, 886,
	888, 890, 894, 658, 0, 577, 592, 662, 591, 655,
	408, 0, 429, 589, 536, 0, 581, 555, 0, 582,
	551, 586, 0, 525, 0, 437, 465, 477, 494, 497,
	526, 611, 612, 613, 299, 496, 615, 616, 617, 618,
	619, 620, 621, 614, 893, 558, 535, 561, 476, 538,
	537, 0, 0, 572, 823, 573, 574, 392, 393, 394,
	395, 880, 599, 318, 495, 418, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 562, 667,
	0, 622, 623, 0, 0, 489, 490, 347, 354, 508,
	356, 317, 407, 349, 474, 364, 0, 501, 566, 502,
	625, 628, 626, 627, 399, 359, 361, 433, 365, 375,
	421, 473, 405, 426, 315, 464, 435, 380, 552, 579,
	902, 875, 901, 903, 904, 900, 905, 906, 887, 778,
	0, 830, 898, 897, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 606, 605, 604,
	603, 602, 601, 600, 0, 0, 549, 450, 327, 288,
	323, 324, 331, 656, 652, 455, 657, 785, 296, 529,
	373, 0, 417, 346, 594, 595, 0, 646, 864, 837,
	838, 839, 775, 840, 834, 835, 776, 836, 865, 828,
	861, 862, 804, 831, 841, 860, 842, 863, 866, 867,
	907, 908, 848, 832, 260, 909, 845, 868, 859, 858,
	843, 829, 869, 870, 811, 806, 846, 847, 833, 852,
	853, 854, 777, 825, 826, 827, 849, 850, 807, 808,
	809, 810, 0, 0, 0, 480, 481, 482, 504, 0,
	466, 528, 654, 0, 0, 0, 0, 0, 0, 0,
	578, 590, 624, 0, 634, 635, 637, 639, 855, 641,
	440, 441, 648, 0, 851, 644, 645, 642, 377, 427,
	446, 434, 821, 660, 519, 520, 661, 630, 0, 770,
	0, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 773, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	812, 570, 521, 436, 388, 588, 587, 0, 0, 881,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 765, 0, 0, 802, 857, 856,
	789, 799, 0, 0, 313, 231, 516, 636, 518, 517,
	790, 0, 791, 795, 798, 794, 792, 793, 0, 872,
	0, 0, 0, 0, 0, 0, 757, 769, 0, 774,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 766, 767, 0, 0, 0, 0, 822,
	0, 768, 0, 0, 817, 796, 800, 0, 0, 0,
	0, 303, 443, 462, 314, 431, 475, 319, 439, 454,
	309, 403, 428, 0, 0, 305, 460, 438, 385, 362,
	363, 304, 0, 422, 337, 353, 334, 401, 797, 820,
	824, 333, 895, 818, 470, 307, 0, 469, 400, 456,
	461, 386, 379, 0, 306, 458, 384, 378, 366, 343,
	896, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 815, 0, 633, 0, 472, 0, 0,
	879, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 819, 0, 425, 406, 892, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 297, 445, 336,
	387, 310, 312, 653, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 320, 424, 321, 355,
	322, 298, 328, 326, 329, 432, 330, 300, 410, 453,
	0, 350, 420, 382, 301, 381, 411, 452, 451, 311,
	479, 485, 486, 575, 0, 491, 664, 665, 666, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 505, 506, 507, 509, 510, 511, 512, 576,
	593, 560, 530, 493, 584, 527, 531, 532, 360, 596,
	0, 0, 0, 484, 370, 371, 0, 342, 341, 383,
	302, 348, 294, 295, 659, 876, 402, 598, 631, 632,
	523, 0, 891, 871, 873, 874, 878, 882, 883, 884,
	885, 886, 888, 890, 894, 658, 0, 577, 592, 662,
	591, 655, 408, 0, 429, 589, 536, 0, 581, 555,
	0, 582, 551, 586, 0, 525, 0, 437, 465, 477,
	494, 497, 526, 611, 612, 613, 299, 496, 615, 616,
	617, 618, 619, 620, 621, 614, 893, 558, 535, 561,
	476, 538, 537, 0, 0, 572, 823, 573, 574, 392,
	393, 394, 395, 880, 599, 318, 495, 418, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	562, 667, 0, 622, 623, 0, 0, 489, 490, 347,
	354, 508, 356, 317, 407, 349, 474, 364, 0, 501,
	566, 502, 625, 628, 626, 627, 399, 359, 361, 433,
	365, 375, 421, 473, 405, 426, 315, 464, 435, 380,
	552, 579, 902, 875, 901, 903, 904, 900, 905, 906,
	887, 778, 0, 830, 898, 897, 899, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 606,
	605, 604, 603, 602, 601, 600, 0, 0, 549, 450,
	327, 288, 323, 324, 331, 656, 652, 455, 657, 785,
	296, 529, 373, 0, 417, 346, 594, 595, 0, 646,
	864, 837, 838, 839, 775, 840, 834, 835, 776, 836,
	865, 828, 861, 862, 804, 831, 841, 860, 842, 863,
	866, 867, 907, 908, 848, 832, 260, 909, 845, 868,
	859, 858, 843, 829, 869, 870, 811, 806, 846, 847,
	833, 852, 853, 854, 777, 825, 826, 827, 849, 850,
	807, 808, 809, 810, 0, 0, 0, 480, 481, 482,
	504, 0, 466, 528, 654, 0, 0, 0, 0, 0,
	0, 0, 578, 590, 624, 0, 634, 635, 637, 639,
	855, 641, 440, 441, 648, 0, 851, 644, 645, 642,
	377, 427, 446, 434, 821, 660, 519, 520, 661, 630,
	0, 770, 0, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 773, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 812, 570, 521, 436, 388, 588, 587, 0,
	0, 881, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 765, 0, 0, 802,
	857, 856, 789, 799, 0, 0, 313, 231, 516, 636,
	518, 517, 790, 0, 791, 795, 798, 794, 792, 793,
	0, 872, 0, 0, 0, 0, 0, 0, 757, 769,
	0, 774, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 766, 767, 0, 0, 0,
	0, 822, 0, 768, 0, 0, 817, 796, 800, 0,
	0, 0, 0, 303, 443, 462, 314, 431, 475, 319,
	439, 454, 309, 403, 428, 0, 0, 305, 460, 438,
	385, 362, 363, 304, 0, 422, 337, 353, 334, 401,
	797, 820, 824, 333, 895, 818, 470, 307, 0, 469,
	400, 456, 461, 386, 379, 0, 306, 458, 384, 378,
	366, 343, 896, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 815, 0, 633, 0, 472,
	0, 0, 879, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 819, 0, 425, 406, 892, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 297,
	445, 336, 387, 310, 312, 653, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 320, 424,
	321, 355, 322, 298, 328, 326, 329, 432, 330, 300,
	410, 453, 0, 350, 420, 382, 301, 381, 411, 452,
	451, 311, 479, 485, 486, 575, 0, 491, 664, 665,
	666, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 505, 506, 507, 509, 510, 511,
	512, 576, 593, 560, 530, 493, 584, 527, 531, 532,
	360, 596, 0, 0, 0, 484, 370, 371, 0, 342,
	341, 383, 302, 348, 294, 295, 659, 876, 402, 598,
	631, 632, 523, 0, 891, 871, 873, 874, 878, 882,
	883, 884, 885, 886, 888, 890, 894, 658, 0, 577,
	592, 662, 591, 655, 408, 0, 429, 589, 536, 0,
	581, 555, 0, 582, 551, 586, 0, 525, 0, 437,
	465, 477, 494, 497, 526, 611, 612, 613, 299, 496,
	615, 616, 617, 618, 619, 620, 621, 614, 893, 558,
	535, 561, 476, 538, 537, 0, 0, 572, 823, 573,
	574, 392, 393, 394, 395, 880, 599, 318, 495, 418,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 565, 562, 667, 0, 622, 623, 0, 0, 489,
	490, 347, 354, 508, 356, 317, 407, 349, 474, 364,
	0, 501, 566, 502, 625, 628, 626, 627, 399, 359,
	361, 433, 365, 375, 421, 473, 405, 426, 315, 464,
	435, 380, 552, 579, 902, 875, 901, 903, 904, 900,
	905, 906, 887, 778, 0, 830, 898, 897, 899, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 606, 605, 604, 603, 602, 601, 600, 0, 0,
	549, 450, 327, 288, 323, 324, 331, 656, 652, 455,
	657, 785, 296, 529, 373, 0, 417, 346, 594, 595,
	0, 646, 864, 837, 838, 839, 775, 840, 834, 835,
	776, 836, 865, 828, 861, 862, 804, 831, 841, 860,
	842, 863, 866, 867, 907, 908, 848, 832, 260, 909,
	845, 868, 859, 858, 843, 829, 869, 870, 811, 806,
	846, 847, 833, 852, 853, 854, 777, 825, 826, 827,
	849, 850, 807, 808, 809, 810, 0, 0, 0, 480,
	481, 482, 504, 0, 466, 528, 654, 0, 0, 0,
	0, 0, 0, 0, 578, 590, 624, 0, 634, 635,
	637, 639, 855, 641, 440, 441, 648, 0, 3614, 644,
	3615, 3616, 377, 427, 446, 434, 821, 660, 519, 520,
	661, 630, 0, 770, 0, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 773,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 812, 570, 521, 436, 388, 588,
	587, 0, 0, 881, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 765, 0,
	0, 802, 857, 856, 789, 799, 0, 0, 313, 231,
	516, 636, 518, 517, 2765, 0, 2766, 795, 798, 794,
	792, 793, 0, 872, 0, 0, 0, 0, 0, 0,
	757, 769, 0, 774, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 766, 767, 0,
	0, 0, 0, 822, 0, 768, 0, 0, 817, 796,
	800, 0, 0, 0, 0, 303, 443, 462, 314, 431,
	475, 319, 439, 454, 309, 403, 428, 0, 0, 305,
	460, 438, 385, 362, 363, 304, 0, 422, 337, 353,
	334, 401, 797, 820, 824, 333, 895, 818, 470, 307,
	0, 469, 400, 456, 461, 386, 379, 0, 306, 458,
	384, 378, 366, 343, 896, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 815, 0, 633,
	0, 472, 0, 0, 879, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 819, 0, 425, 406, 892,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 297, 445, 336, 387, 310, 312, 653, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	320, 424, 321, 355, 322, 298, 328, 326, 329, 432,
	330, 300, 410, 453, 0, 350, 420, 382, 301, 381,
	411, 452, 451, 311, 479, 485, 486, 575, 0, 491,
	664, 665, 666, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 505, 506, 507, 509,
	510, 511, 512, 576, 593, 560, 530, 493, 584, 527,
	531, 532, 360, 596, 0, 0, 0, 484, 370, 371,
	0, 342, 341, 383, 302, 348, 294, 295, 659, 876,
	402, 598, 631, 632, 523, 0, 891, 871, 873, 874,
	878, 882, 883, 884, 885, 886, 888, 890, 894, 658,
	0, 577, 592, 662, 591, 655, 408, 0, 429, 589,
	536, 0, 581, 555, 0, 582, 551, 586, 0, 525,
	0, 437, 465, 477, 494, 497, 526, 611, 612, 613,
	299, 496, 615, 616, 617, 618, 619, 620, 621, 614,
	893, 558, 535, 561, 476, 538, 537, 0, 0, 572,
	823, 573, 574, 392, 393, 394, 395, 880, 599, 318,
	495, 418, 0, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 565, 562, 667, 0, 622, 623, 0,
	0, 489, 490, 347, 354, 508, 356, 317, 407, 349,
	474, 364, 0, 501, 566, 502, 625, 628, 626, 627,
	399, 359, 361, 433, 365, 375, 421, 473, 405, 426,
	315, 464, 435, 380, 552, 579, 902, 875, 901, 903,
	904, 900, 905, 906, 887, 778, 0, 830, 898, 897,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 606, 605, 604, 603, 602, 601, 600,
	0, 0, 549, 450, 327, 288, 323, 324, 331, 656,
	652, 455, 657, 785, 296, 529, 373, 0, 417, 346,
	594, 595, 0, 646, 864, 837, 838, 839, 775, 840,
	834, 835, 776, 836, 865, 828, 861, 862, 804, 831,
	841, 860, 842, 863, 866, 867, 907, 908, 848, 832,
	260, 909, 845, 868, 859, 858, 843, 829, 869, 870,
	811, 806, 846, 847, 833, 852, 853, 854, 777, 825,
	826, 827, 849, 850, 807, 808, 809, 810, 0, 0,
	0, 480, 481, 482, 504, 0, 466, 528, 654, 0,
	0, 0, 0, 0, 0, 0, 578, 590, 624, 0,
	634, 635, 637, 639, 855, 641, 440, 441, 648, 0,
	851, 644, 645, 642, 377, 427, 446, 434, 821, 660,
	519, 520, 661, 630, 0, 770, 0, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 1743, 0, 0,
	0, 773, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 812, 570, 521, 436,
	388, 588, 587, 0, 0, 881, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	765, 0, 0, 802, 857, 856, 789, 799, 0, 0,
	313, 231, 516, 636, 518, 517, 790, 0, 791, 795,
	798, 794, 792, 793, 0, 872, 0, 0, 0, 0,
	0, 0, 0, 769, 0, 774, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 766,
	767, 0, 0, 0, 0, 822, 0, 768, 0, 0,
	817, 796, 800, 0, 0, 0, 0, 303, 443, 462,
	314, 431, 475, 319, 439, 454, 309, 403, 428, 0,
	0, 305, 460, 438, 385, 362, 363, 304, 0, 422,
	337, 353, 334, 401, 797, 820, 824, 333, 895, 818,
	470, 307, 0, 469, 400, 456, 461, 386, 379, 0,
	306, 458, 384, 378, 366, 343, 896, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 815,
	0, 633, 0, 472, 0, 0, 879, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 819, 0, 425,
	406, 892, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 297, 445, 336, 387, 310, 312, 653,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 320, 424, 321, 355, 322, 298, 328, 326,
	329, 432, 330, 300, 410, 453, 0, 350, 420, 382,
	301, 381, 411, 452, 451, 311, 479, 1744, 1745, 575,
	0, 491, 664, 665, 666, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 505, 506,
	507, 509, 510, 511, 512, 576, 593, 560, 530, 493,
	584, 527, 531, 532, 360, 596, 0, 0, 0, 484,
	370, 371, 0, 342, 341, 383, 302, 348, 294, 295,
	659, 876, 402, 598, 631, 632, 523, 0, 891, 871,
	873, 874, 878, 882, 883, 884, 885, 886, 888, 890,
	894, 658, 0, 577, 592, 662, 591, 655, 408, 0,
	429, 589, 536, 0, 581, 555, 0, 582, 551, 586,
	0, 525, 0, 437, 465, 477, 494, 497, 526, 611,
	612, 613, 299, 496, 615, 616, 617, 618, 619, 620,
	621, 614, 893, 558, 535, 561, 476, 538, 537, 0,
	0, 572, 823, 573, 574, 392, 393, 394, 395, 880,
	599, 318, 495, 418, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 565, 562, 667, 0, 622,
	623, 0, 0, 489, 490, 347, 354, 508, 356, 317,
	407, 349, 474, 364, 0, 501, 566, 502, 625, 628,
	626, 627, 399, 359, 361, 433, 365, 375, 421, 473,
	405, 426, 315, 464, 435, 380, 552, 579, 902, 875,
	901, 903, 904, 900, 905, 906, 887, 778, 0, 830,
	898, 897, 899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 606, 605, 604, 603, 602,
	601, 600, 0, 0, 549, 450, 327, 288, 323, 324,
	331, 656, 652, 455, 657, 785, 296, 529, 373, 0,
	417, 346, 594, 595, 0, 646, 864, 837, 838, 839,
	775, 840, 834, 835, 776, 836, 865, 828, 861, 862,
	804, 831, 841, 860, 842, 863, 866, 867, 907, 908,
	848, 832, 260, 909, 845, 868, 859, 858, 843, 829,
	869, 870, 811, 806, 846, 847, 833, 852, 853, 854,
	777, 825, 826, 827, 849, 850, 807, 808, 809, 810,
	0, 0, 0, 480, 481, 482, 504, 0, 466, 528,
	654, 0, 0, 0, 0, 0, 0, 0, 578, 590,
	624, 0, 634, 635, 637, 639, 855, 641, 440, 441,
	648, 0, 851, 644, 645, 642, 377, 427, 446, 434,
	821, 660, 519, 520, 661, 630, 0, 770, 0, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 773, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 812, 570,
	521, 436, 388, 588, 587, 0, 0, 881, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 765, 0, 0, 802, 857, 856, 789, 799,
	0, 0, 313, 231, 516, 636, 518, 517, 790, 0,
	791, 795, 798, 794, 792, 793, 0, 872, 0, 0,
	0, 0, 0, 0, 0, 769, 0, 774, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 766, 767, 0, 0, 0, 0, 822, 0, 768,
	0, 0, 817, 796, 800, 0, 0, 0, 0, 303,
	443, 462, 314, 431, 475, 319, 439, 454, 309, 403,
	428, 0, 0, 305, 460, 438, 385, 362, 363, 304,
	0, 422, 337, 353, 334, 401, 797, 820, 824, 333,
	895, 818, 470, 307, 0, 469, 400, 456, 461, 386,
	379, 0, 306, 458, 384, 378, 366, 343, 896, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 815, 0, 633, 0, 472, 0, 0, 879, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 819,
	0, 425, 406, 892, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 297, 445, 336, 387, 310,
	312, 653, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 320, 424, 321, 355, 322, 298,
	328, 326, 329, 432, 330, 300, 410, 453, 0, 350,
	420, 382, 301, 381, 411, 452, 451, 311, 479, 485,
	486, 575, 0, 491, 664, 665, 666, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 509, 510, 511, 512, 576, 593, 560,
	530, 493, 584, 527, 531, 532, 360, 596, 0, 0,
	0, 484, 370, 371, 0, 342, 341, 383, 302, 348,
	294, 295, 659, 876, 402, 598, 631, 632, 523, 0,
	891, 871, 873, 874, 878, 882, 883, 884, 885, 886,
	888, 890, 894, 658, 0, 577, 592, 662, 591, 655,
	408, 0, 429, 589, 536, 0, 581, 555, 0, 582,
	551, 586, 0, 525, 0, 437, 465, 477, 494, 497,
	526, 611, 612, 613, 299, 496, 615, 616, 617, 618,
	619, 620, 621, 614, 893, 558, 535, 561, 476, 538,
	537, 0, 0, 572, 823, 573, 574, 392, 393, 394,
	395, 880, 599, 318, 495, 418, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 562, 667,
	0, 622, 623, 0, 0, 489, 490, 347, 354, 508,
	356, 317, 407, 349, 474, 364, 0, 501, 566, 502,
	625, 628, 626, 627, 399, 359, 361, 433, 365, 375,
	421, 473, 405, 426, 315, 464, 435, 380, 552, 579,
	902, 875, 901, 903, 904, 900, 905, 906, 887, 778,
	0, 830, 898, 897, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 606, 605, 604,
	603, 602, 601, 600, 0, 0, 549, 450, 327, 288,
	323, 324, 331, 656, 652, 455, 657, 785, 296, 529,
	373, 0, 417, 346, 594, 595, 0, 646, 864, 837,
	838, 839, 775, 840, 834, 835, 776, 836, 865, 828,
	861, 862, 804, 831, 841, 860, 842, 863, 866, 867,
	907, 908, 848, 832, 260, 909, 845, 868, 859, 858,
	843, 829, 869, 870, 811, 806, 846, 847, 833, 852,
	853, 854, 777, 825, 826, 827, 849, 850, 807, 808,
	809, 810, 0, 0, 0, 480, 481, 482, 504, 0,
	466, 528, 654, 0, 0, 0, 0, 0, 0, 0,
	578, 590, 624, 0, 634, 635, 637, 639, 855, 641,
	440, 441, 648, 0, 851, 644, 645, 642, 377, 427,
	446, 434, 821, 660, 519, 520, 661, 630, 0, 770,
	0, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 773, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	812, 570, 521, 436, 388, 588, 587, 0, 0, 881,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 0, 0, 802, 857, 856,
	789, 799, 0, 0, 313, 231, 516, 636, 518, 517,
	790, 0, 791, 795, 798, 794, 792, 793, 0, 872,
	0, 0, 0, 0, 0, 0, 757, 769, 0, 774,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 766, 767, 0, 0, 0, 0, 822,
	0, 768, 0, 0, 817, 796, 800, 0, 0, 0,
	0, 303, 443, 462, 314, 431, 475, 319, 439, 454,
	309, 403, 428, 0, 0, 305, 460, 438, 385, 362,
	363, 304, 0, 422, 337, 353, 334, 401, 797, 820,
	824, 333, 895, 818, 470, 307, 0, 469, 400, 456,
	461, 386, 379, 0, 306, 458, 384, 378, 366, 343,
	896, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 815, 0, 633, 0, 472, 0, 0,
	879, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 819, 0, 425, 406, 892, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 297, 445, 336,
	387, 310, 312, 653, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 320, 424, 321, 355,
	322, 298, 328, 326, 329, 432, 330, 300, 410, 453,
	0, 350, 420, 382, 301, 381, 411, 452, 451, 311,
	479, 485, 486, 575, 0, 491, 664, 665, 666, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 505, 506, 507, 509, 510, 511, 512, 576,
	593, 560, 530, 493, 584, 527, 531, 532, 360, 596,
	0, 0, 0, 484, 370, 371, 0, 342, 341, 383,
	302, 348, 294, 295, 659, 876, 402, 598, 631, 632,
	523, 0, 891, 871, 873, 874, 878, 882, 883, 884,
	885, 886, 888, 890, 894, 658, 0, 577, 592, 662,
	591, 655, 408, 0, 429, 589, 536, 0, 581, 555,
	0, 582, 551, 586, 0, 525, 0, 437, 465, 477,
	494, 497, 526, 611, 612, 613, 299, 496, 615, 616,
	617, 618, 619, 620, 621, 614, 893, 558, 535, 561,
	476, 538, 537, 0, 0, 572, 823, 573, 574, 392,
	393, 394, 395, 880, 599, 318, 495, 418, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	562, 667, 0, 622, 623, 0, 0, 489, 490, 347,
	354, 508, 356, 317, 407, 349, 474, 364, 0, 501,
	566, 502, 625, 628, 626, 627, 399, 359, 361, 433,
	365, 375, 421, 473, 405, 426, 315, 464, 435, 380,
	552, 579, 902, 875, 901, 903, 904, 900, 905, 906,
	887, 778, 0, 830, 898, 897, 899, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 606,
	605, 604, 603, 602, 601, 600, 0, 0, 549, 450,
	327, 288, 323, 324, 331, 656, 652, 455, 657, 785,
	296, 529, 373, 0, 417, 346, 594, 595, 0, 646,
	864, 837, 838, 839, 775, 840, 834, 835, 776, 836,
	865, 828, 861, 862, 804, 831, 841, 860, 842, 863,
	866, 867, 907, 908, 848, 832, 260, 909, 845, 868,
	859, 858, 843, 829, 869, 870, 811, 806, 846, 847,
	833, 852, 853, 854, 777, 825, 826, 827, 849, 850,
	807, 808, 809, 810, 0, 0, 0, 480, 481, 482,
	504, 0, 466, 528, 654, 0, 0, 0, 0, 0,
	0, 0, 578, 590, 624, 0, 634, 635, 637, 639,
	855, 641, 440, 441, 648, 0, 851, 644, 645, 642,
	377, 427, 446, 434, 0, 660, 519, 520, 661, 630,
	0, 770, 208, 65, 199, 170, 0, 0, 0, 0,
	0, 0, 404, 0, 0, 534, 567, 556, 640, 522,
	0, 200, 0, 0, 0, 0, 0, 0, 191, 0,
	339, 0, 201, 372, 571, 553, 563, 554, 539, 540,
	541, 548, 351, 542, 543, 544, 514, 545, 515, 546,
	547, 141, 570, 521, 436, 388, 588, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 230, 0,
	0, 0, 0, 0, 0, 313, 231, 516, 636, 518,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 443, 462, 314, 431, 475, 319, 439,
	454, 309, 403, 428, 0, 0, 305, 460, 438, 385,
	362, 363, 304, 0, 422, 337, 353, 334, 401, 0,
	459, 487, 333, 478, 0, 470, 307, 0, 469, 400,
	456, 461, 386, 379, 0, 306, 458, 384, 378, 366,
	343, 503, 367, 368, 357, 412, 376, 413, 358, 390,
	389, 391, 0, 0, 0, 0, 0, 498, 499, 0,
	0, 647, 0, 0, 0, 0, 169, 197, 206, 198,
	125, 0, 0, 629, 0, 0, 633, 0, 472, 0,
	0, 223, 0, 0, 0, 442, 0, 0, 369, 196,
	190, 189, 488, 0, 425, 406, 235, 0, 0, 423,
	374, 457, 414, 463, 444, 471, 419, 415, 297, 445,
	336, 387, 310, 312, 243, 338, 340, 344, 345, 396,
	397, 409, 430, 447, 448, 449, 335, 320, 424, 321,
	355, 322, 298, 328, 326, 329, 432, 330, 300, 410,
	453, 0, 350, 420, 382, 301, 381, 411, 452, 451,
	311, 479, 485, 486, 575, 0, 491, 608, 609, 610,
	500, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 302, 348, 294, 295, 467, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 325, 557, 569, 568,
	398, 483, 226, 580, 583, 513, 236, 0, 577, 592,
	550, 591, 237, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 299, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 318, 495, 418, 139,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 234, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 317, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 315, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 327, 288, 323, 324, 331, 241, 308, 455, 242,
	0, 296, 529, 373, 171, 417, 346, 594, 595, 62,
	646, 244, 245, 246, 247, 248, 249, 250, 251, 289,
	252, 253, 254, 255, 256, 257, 258, 261, 262, 263,
	264, 265, 266, 267, 268, 597, 259, 260, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
	281, 282, 0, 0, 0, 290, 291, 292, 293, 0,
	0, 284, 285, 286, 287, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 238, 46, 224, 227, 229,
	228, 0, 63, 578, 590, 624, 5, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 144, 239, 519, 520, 240,
	630, 208, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	141, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 313, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	2439, 2442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 443, 462, 314, 431, 475, 319, 439, 454,
	309, 403, 428, 0, 0, 305, 460, 438, 385, 362,
	363, 304, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 307, 0, 469, 400, 456,
	461, 386, 379, 0, 306, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 2443, 472, 0, 0,
	0, 2438, 0, 2437, 442, 2435, 2440, 369, 0, 0,
	0, 488, 0, 425, 406, 663, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 297, 445, 336,
	387, 310, 312, 653, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 320, 424, 321, 355,
	322, 298, 328, 326, 329, 432, 330, 300, 410, 453,
	2441, 350, 420, 382, 301, 381, 411, 452, 451, 311,
	479, 485, 486, 575, 0, 491, 664, 665, 666, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 505, 506, 507, 509, 510, 511, 512, 576,
	593, 560, 530, 493, 584, 527, 531, 532, 360, 596,
	0, 0, 0, 484, 370, 371, 0, 342, 341, 383,
	302, 348, 294, 295, 659, 332, 402, 598, 631, 632,
	523, 0, 585, 524, 533, 325, 557, 569, 568, 398,
	483, 0, 580, 583, 513, 658, 0, 577, 592, 662,
	591, 655, 408, 0, 429, 589, 536, 0, 581, 555,
	0, 582, 551, 586, 0, 525, 0, 437, 465, 477,
	494, 497, 526, 611, 612, 613, 299, 496, 615, 616,
	617, 618, 619, 620, 621, 614, 468, 558, 535, 561,
	476, 538, 537, 0, 0, 572, 492, 573, 574, 392,
	393, 394, 395, 352, 599, 318, 495, 418, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	562, 667, 0, 622, 623, 0, 0, 489, 490, 347,
	354, 508, 356, 317, 407, 349, 474, 364, 0, 501,
	566, 502, 625, 628, 626, 627, 399, 359, 361, 433,
	365, 375, 421, 473, 405, 426, 315, 464, 435, 380,
	552, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 606,
	605, 604, 603, 602, 601, 600, 0, 0, 549, 450,
	327, 288, 323, 324, 331, 656, 652, 455, 657, 0,
	296, 529, 373, 171, 417, 346, 594, 595, 0, 646,
	244, 245, 246, 247, 248, 249, 250, 251, 289, 252,
	253, 254, 255, 256, 257, 258, 261, 262, 263, 264,
	265, 266, 267, 268, 597, 259, 260, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	282, 0, 0, 0, 290, 291, 292, 293, 0, 0,
	284, 285, 286, 287, 0, 0, 0, 480, 481, 482,
	504, 0, 466, 528, 654, 0, 0, 0, 0, 0,
	0, 0, 578, 590, 624, 0, 634, 635, 637, 639,
	638, 641, 440, 441, 648, 0, 643, 644, 645, 642,
	377, 427, 446, 434, 0, 660, 519, 520, 661, 630,
	404, 0, 0, 534, 567, 556, 640, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 372, 571, 553, 563, 554, 539, 540, 541, 548,
	351, 542, 543, 544, 514, 545, 515, 546, 547, 0,
	570, 521, 436, 388, 588, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1335, 0, 0, 230, 0, 0, 789,
	799, 0, 0, 313, 231, 516, 636, 518, 517, 790,
	0, 791, 795, 798, 794, 792, 793, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 796, 0, 0, 0, 0, 0,
	303, 443, 462, 314, 431, 475, 319, 439, 454, 309,
	403, 428, 0, 0, 305, 460, 438, 385, 362, 363,
	304, 0, 422, 337, 353, 334, 401, 797, 459, 487,
	333, 478, 0, 470, 307, 0, 469, 400, 456, 461,
	386, 379, 0, 306, 458, 384, 378, 366, 343, 503,
	367, 368, 357, 412, 376, 413, 358, 390, 389, 391,
	0, 0, 0, 0, 0, 498, 499, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 633, 0, 472, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 369, 0, 0, 0,
	488, 0, 425, 406, 663, 0, 0, 423, 374, 457,
	414, 463, 444, 471, 419, 415, 297, 445, 336, 387,
	310, 312, 653, 338, 340, 344, 345, 396, 397, 409,
	430, 447, 448, 449, 335, 320, 424, 321, 355, 322,
	298, 328, 326, 329, 432, 330, 300, 410, 453, 0,
	350, 420, 382, 301, 381, 411, 452, 451, 311, 479,
	485, 486, 575, 0, 491, 664, 665, 666, 500, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 302,
	348, 294, 295, 659, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 325, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 658, 0, 577, 592, 662, 591,
	655, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 299, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 318, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	667, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 317, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 315, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 327,
	288, 323, 324, 331, 656, 652, 455, 657, 0, 296,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 244,
	245, 246, 247, 248, 249, 250, 251, 289, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 265,
	266, 267, 268, 597, 259, 260, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	0, 0, 0, 290, 291, 292, 293, 0, 0, 284,
	285, 286, 287, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 654, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 660, 519, 520, 661, 630, 208,
	65, 199, 170, 0, 0, 0, 0, 0, 0, 404,
	686, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 693, 0, 0, 0, 0, 0,
	0, 0, 692, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 313, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 303,
	443, 462, 314, 431, 475, 319, 439, 454, 309, 403,
	428, 0, 0, 305, 460, 438, 385, 362, 363, 304,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 307, 0, 469, 400, 456, 461, 386,
	379, 0, 306, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 690, 691, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 663, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 297, 445, 336, 387, 310,
	312, 653, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 320, 424, 321, 355, 322, 298,
	328, 326, 329, 432, 330, 300, 410, 453, 0, 350,
	420, 382, 301, 381, 411, 452, 451, 311, 479, 485,
	486, 575, 0, 491, 664, 665, 666, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 509, 510, 511, 512, 576, 593, 560,
	530, 493, 584, 527, 531, 532, 360, 596, 0, 0,
	0, 484, 370, 371, 0, 342, 341, 383, 302, 348,
	294, 295, 659, 332, 402, 598, 631, 632, 523, 0,
	585, 524, 533, 325, 557, 569, 568, 398, 483, 0,
	580, 583, 513, 658, 0, 577, 592, 662, 591, 655,
	408, 0, 429, 589, 536, 0, 581, 555, 0, 582,
	551, 586, 0, 525, 0, 437, 465, 477, 494, 497,
	526, 611, 612, 613, 299, 496, 615, 616, 617, 618,
	619, 620, 621, 614, 468, 558, 535, 561, 476, 538,
	537, 0, 0, 572, 492, 573, 574, 392, 393, 394,
	395, 687, 689, 318, 495, 418, 701, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 562, 667,
	0, 622, 623, 0, 0, 489, 490, 347, 354, 508,
	356, 317, 407, 349, 474, 364, 0, 501, 566, 502,
	625, 628, 626, 627, 399, 359, 361, 433, 365, 375,
	421, 473, 405, 426, 315, 464, 435, 380, 552, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 66, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 606, 605, 604,
	603, 602, 601, 600, 0, 0, 549, 450, 327, 288,
	323, 324, 331, 656, 652, 455, 657, 0, 296, 529,
	373, 171, 417, 346, 594, 595, 0, 646, 244, 245,
	246, 247, 248, 249, 250, 251, 289, 252, 253, 254,
	255, 256, 257, 258, 261, 262, 263, 264, 265, 266,
	267, 268, 597, 259, 260, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 0,
	0, 0, 290, 291, 292, 293, 0, 0, 284, 285,
	286, 287, 0, 0, 0, 480, 481, 482, 504, 0,
	466, 528, 654, 0, 0, 0, 0, 0, 0, 0,
	578, 590, 624, 0, 634, 635, 637, 639, 638, 641,
	440, 441, 648, 0, 643, 644, 645, 642, 377, 427,
	446, 434, 0, 660, 519, 520, 661, 630, 404, 0,
	0, 534, 567, 556, 640, 522, 0, 1143, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 372,
	571, 553, 563, 554, 539, 540, 541, 548, 351, 542,
	543, 544, 514, 545, 515, 546, 547, 0, 570, 521,
	436, 388, 588, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 230, 0, 0, 0, 0, 0,
	0, 313, 231, 516, 636, 518, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1128, 0, 0, 0, 0, 0, 0, 303, 443,
	462, 314, 431, 475, 319, 439, 454, 309, 403, 428,
	0, 0, 2602, 2605, 2606, 2607, 2608, 2609, 2610, 0,
	2615, 2611, 2612, 2613, 2614, 0, 2597, 2598, 2599, 2600,
	1126, 2581, 2603, 0, 2582, 400, 2583, 2584, 2585, 2586,
	1130, 2587, 2588, 2589, 2590, 2591, 2594, 2595, 2592, 2593,
	2601, 412, 376, 413, 358, 390, 389, 391, 1154, 1156,
	1158, 1160, 1163, 498, 499, 0, 0, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	0, 0, 633, 0, 472, 0, 0, 0, 0, 0,
	0, 442, 0, 0, 369, 0, 0, 0, 2596, 0,
	425, 406, 663, 0, 0, 423, 374, 457, 414, 463,
	444, 471, 419, 415, 297, 445, 336, 387, 310, 312,
	653, 338, 340, 344, 345, 396, 397, 409, 430, 447,
	448, 449, 335, 320, 424, 321, 355, 322, 298, 328,
	326, 329, 432, 330, 300, 410, 453, 0, 350, 420,
	382, 301, 381, 411, 452, 451, 311, 479, 485, 486,
	575, 0, 491, 664, 665, 666, 500, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 302, 348, 294,
	295, 659, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 325, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 658, 0, 577, 592, 662, 591, 655, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 299, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 318, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 667, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	317, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 315, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 327, 288, 323,
	324, 331, 656, 652, 455, 657, 0, 296, 2604, 373,
	0, 417, 346, 594, 595, 0, 646, 244, 245, 246,
	247, 248, 249, 250, 251, 289, 252, 253, 254, 255,
	256, 257, 258, 261, 262, 263, 264, 265, 266, 267,
	268, 597, 259, 260, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 0, 0,
	0, 290, 291, 292, 293, 0, 0, 284, 285, 286,
	287, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 654, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 660, 519, 520, 661, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	313, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 2439, 2442, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 303, 443, 462,
	314, 431, 475, 319, 439, 454, 309, 403, 428, 0,
	0, 305, 460, 438, 385, 362, 363, 304, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 307, 0, 469, 400, 456, 461, 386, 379, 0,
	306, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 2443, 472, 0, 0, 0, 2438, 0, 2437,
	442, 2435, 2440, 369, 0, 0, 0, 488, 0, 425,
	406, 663, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 297, 445, 336, 387, 310, 312, 653,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 320, 424, 321, 355, 322, 298, 328, 326,
	329, 432, 330, 300, 410, 453, 2441, 350, 420, 382,
	301, 381, 411, 452, 451, 311, 479, 485, 486, 575,
	0, 491, 664, 665, 666, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 505, 506,
	507, 509, 510, 511, 512, 576, 593, 560, 530, 493,
	584, 527, 531, 532, 360, 596, 0, 0, 0, 484,
	370, 371, 0, 342, 341, 383, 302, 348, 294, 295,
	659, 332, 402, 598, 631, 632, 523, 0, 585, 524,
	533, 325, 557, 569, 568, 398, 483, 0, 580, 583,
	513, 658, 0, 577, 592, 662, 591, 655, 408, 0,
	429, 589, 536, 0, 581, 555, 0, 582, 551, 586,
	0, 525, 0, 437, 465, 477, 494, 497, 526, 611,
	612, 613, 299, 496, 615, 616, 617, 618, 619, 620,
	621, 614, 468, 558, 535, 561, 476, 538, 537, 0,
	0, 572, 492, 573, 574, 392, 393, 394, 395, 352,
	599, 318, 495, 418, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 565, 562, 667, 0, 622,
	623, 0, 0, 489, 490, 347, 354, 508, 356, 317,
	407, 349, 474, 364, 0, 501, 566, 502, 625, 628,
	626, 627, 399, 359, 361, 433, 365, 375, 421, 473,
	405, 426, 315, 464, 435, 380, 552, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 606, 605, 604, 603, 602,
	601, 600, 0, 0, 549, 450, 327, 288, 323, 324,
	331, 656, 652, 455, 657, 0, 296, 529, 373, 0,
	417, 346, 594, 595, 0, 646, 244, 245, 246, 247,
	248, 249, 250, 251, 289, 252, 253, 254, 255, 256,
	257, 258, 261, 262, 263, 264, 265, 266, 267, 268,
	597, 259, 260, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 282, 0, 0, 0,
	290, 291, 292, 293, 0, 0, 284, 285, 286, 287,
	0, 0, 0, 480, 481, 482, 504, 0, 466, 528,
	654, 0, 0, 0, 0, 0, 0, 0, 578, 590,
	624, 0, 634, 635, 637, 639, 638, 641, 440, 441,
	648, 0, 643, 644, 645, 642, 377, 427, 446, 434,
	0, 660, 519, 520, 661, 630, 404, 0, 0, 534,
	567, 556, 640, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 372, 571, 553,
	563, 554, 539, 540, 541, 548, 351, 542, 543, 544,
	514, 545, 515, 546, 547, 0, 570, 521, 436, 388,
	588, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 230, 0, 0, 0, 0, 0, 0, 313,
	231, 516, 636, 518, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 2460, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 303, 443, 462, 314,
	431, 475, 319, 439, 454, 309, 403, 428, 0, 0,
	305, 460, 438, 385, 362, 363, 304, 0, 422, 337,
	353, 334, 401, 0, 459, 487, 333, 478, 0, 470,
	307, 0, 469, 400, 456, 461, 386, 379, 0, 306,
	458, 384, 378, 366, 343, 503, 367, 368, 357, 412,
	376, 413, 358, 390, 389, 391, 0, 0, 0, 0,
	0, 498, 499, 0, 0, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 629, 0, 0,
	633, 2459, 472, 0, 0, 0, 2465, 2462, 2464, 442,
	0, 2463, 369, 0, 0, 0, 488, 0, 425, 406,
	663, 0, 2457, 423, 374, 457, 414, 463, 444, 471,
	419, 415, 297, 445, 336, 387, 310, 312, 653, 338,
	340, 344, 345, 396, 397, 409, 430, 447, 448, 449,
	335, 320, 424, 321, 355, 322, 298, 328, 326, 329,
	432, 330, 300, 410, 453, 0, 350, 420, 382, 301,
	381, 411, 452, 451, 311, 479, 485, 486, 575, 0,
	491, 664, 665, 666, 500, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 302, 348, 294, 295, 659,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	325, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	658, 0, 577, 592, 662, 591, 655, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 299, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	318, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 667, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 317, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 315, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 327, 288, 323, 324, 331,
	656, 652, 455, 657, 0, 296, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 244, 245, 246, 247, 248,
	249, 250, 251, 289, 252, 253, 254, 255, 256, 257,
	258, 261, 262, 263, 264, 265, 266, 267, 268, 597,
	259, 260, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 0, 0, 0, 290,
	291, 292, 293, 0, 0, 284, 285, 286, 287, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 654,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	660, 519, 520, 661, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 313, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 2460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 443, 462, 314, 431,
	475, 319, 439, 454, 309, 403, 428, 0, 0, 305,
	460, 438, 385, 362, 363, 304, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 307,
	0, 469, 400, 456, 461, 386, 379, 0, 306, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	2459, 472, 0, 0, 0, 2465, 2462, 2464, 442, 0,
	2463, 369, 0, 0, 0, 488, 0, 425, 406, 663,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 297, 445, 336, 387, 310, 312, 653, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	320, 424, 321, 355, 322, 298, 328, 326, 329, 432,
	330, 300, 410, 453, 0, 350, 420, 382, 301, 381,
	411, 452, 451, 311, 479, 485, 486, 575, 0, 491,
	664, 665, 666, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 505, 506, 507, 509,
	510, 511, 512, 576, 593, 560, 530, 493, 584, 527,
	531, 532, 360, 596, 0, 0, 0, 484, 370, 371,
	0, 342, 341, 383, 302, 348, 294, 295, 659, 332,
	402, 598, 631, 632, 523, 0, 585, 524, 533, 325,
	557, 569, 568, 398, 483, 0, 580, 583, 513, 658,
	0, 577, 592, 662, 591, 655, 408, 0, 429, 589,
	536, 0, 581, 555, 0, 582, 551, 586, 0, 525,
	0, 437, 465, 477, 494, 497, 526, 611, 612, 613,
	299, 496, 615, 616, 617, 618, 619, 620, 621, 614,
	468, 558, 535, 561, 476, 538, 537, 0, 0, 572,
	492, 573, 574, 392, 393, 394, 395, 352, 599, 318,
	495, 418, 0, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 565, 562, 667, 0, 622, 623, 0,
	0, 489, 490, 347, 354, 508, 356, 317, 407, 349,
	474, 364, 0, 501, 566, 502, 625, 628, 626, 627,
	399, 359, 361, 433, 365, 375, 421, 473, 405, 426,
	315, 464, 435, 380, 552, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 606, 605, 604, 603, 602, 601, 600,
	0, 0, 549, 450, 327, 288, 323, 324, 331, 656,
	652, 455, 657, 0, 296, 529, 373, 0, 417, 346,
	594, 595, 0, 646, 244, 245, 246, 247, 248, 249,
	250, 251, 289, 252, 253, 254, 255, 256, 257, 258,
	261, 262, 263, 264, 265, 266, 267, 268, 597, 259,
	260, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 0, 0, 0, 290, 291,
	292, 293, 0, 0, 284, 285, 286, 287, 0, 0,
	0, 480, 481, 482, 504, 0, 466, 528, 654, 0,
	0, 0, 0, 0, 0, 0, 578, 590, 624, 0,
	634, 635, 637, 639, 638, 641, 440, 441, 648, 0,
	643, 644, 645, 642, 377, 427, 446, 434, 0, 660,
	519, 520, 661, 630, 404, 0, 0, 534, 567, 556,
	640, 522, 0, 0, 0, 0, 0, 2152, 0, 0,
	0, 0, 339, 0, 0, 372, 571, 553, 563, 554,
	539, 540, 541, 548, 351, 542, 543, 544, 514, 545,
	515, 546, 547, 0, 570, 521, 436, 388, 588, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	230, 0, 0, 2153, 0, 0, 0, 313, 231, 516,
	636, 518, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 1264, 1265, 1266, 1263, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 443, 462, 314, 431, 475,
	319, 439, 454, 309, 403, 428, 0, 0, 305, 460,
	438, 385, 362, 363, 304, 0, 422, 337, 353, 334,
	401, 0, 459, 487, 333, 478, 0, 470, 307, 0,
	469, 400, 456, 461, 386, 379, 0, 306, 458, 384,
	378, 366, 343, 503, 367, 368, 357, 412, 376, 413,
	358, 390, 389, 391, 0, 0, 0, 0, 0, 498,
	499, 0, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 0, 0, 633, 0,
	472, 0, 0, 0, 0, 0, 0, 442, 0, 0,
	369, 0, 0, 0, 488, 0, 425, 406, 663, 0,
	0, 423, 374, 457, 414, 463, 444, 471, 419, 415,
	297, 445, 336, 387, 310, 312, 653, 338, 340, 344,
	345, 396, 397, 409, 430, 447, 448, 449, 335, 320,
	424, 321, 355, 322, 298, 328, 326, 329, 432, 330,
	300, 410, 453, 0, 350, 420, 382, 301, 381, 411,
	452, 451, 311, 479, 485, 486, 575, 0, 491, 664,
	665, 666, 500, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 302, 348, 294, 295, 659, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 325, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 658, 0,
	577, 592, 662, 591, 655, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 299,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 318, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 667, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 317, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 315,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 327, 288, 323, 324, 331, 656, 652,
	455, 657, 0, 296, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 244, 245, 246, 247, 248, 249, 250,
	251, 289, 252, 253, 254, 255, 256, 257, 258, 261,
	262, 263, 264, 265, 266, 267, 268, 597, 259, 260,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 0, 0, 0, 290, 291, 292,
	293, 0, 0, 284, 285, 286, 287, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 654, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 208, 660, 519,
	520, 661, 630, 0, 0, 0, 0, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 141, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 2202, 0, 230, 0, 0, 0, 0, 0, 0,
	313, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 303, 443, 462,
	314, 431, 475, 319, 439, 454, 309, 403, 428, 0,
	0, 305, 460, 438, 385, 362, 363, 304, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 307, 0, 469, 400, 456, 461, 386, 379, 0,
	306, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 663, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 297, 445, 336, 387, 310, 312, 653,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 320, 424, 321, 355, 322, 298, 328, 326,
	329, 432, 330, 300, 410, 453, 0, 350, 420, 382,
	301, 381, 411, 452, 451, 311, 479, 485, 486, 575,
	0, 491, 664, 665, 666, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 505, 506,
	507, 509, 510, 511, 512, 576, 593, 560, 530, 493,
	584, 527, 531, 532, 360, 596, 0, 0, 0, 484,
	370, 371, 0, 342, 341, 383, 302, 348, 294, 295,
	659, 332, 402, 598, 631, 632, 523, 0, 585, 524,
	533, 325, 557, 569, 568, 398, 483, 0, 580, 583,
	513, 658, 0, 577, 592, 662, 591, 655, 408, 0,
	429, 589, 536, 0, 581, 555, 0, 582, 551, 586,
	0, 525, 0, 437, 465, 477, 494, 497, 526, 611,
	612, 613, 299, 496, 615, 616, 617, 618, 619, 620,
	621, 614, 468, 558, 535, 561, 476, 538, 537, 0,
	0, 572, 492, 573, 574, 392, 393, 394, 395, 352,
	599, 318, 495, 418, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 565, 562, 667, 0, 622,
	623, 0, 0, 489, 490, 347, 354, 508, 356, 317,
	407, 349, 474, 364, 0, 501, 566, 502, 625, 628,
	626, 627, 399, 359, 361, 433, 365, 375, 421, 473,
	405, 426, 315, 464, 435, 380, 552, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 606, 605, 604, 603, 602,
	601, 600, 0, 0, 549, 450, 327, 288, 323, 324,
	331, 656, 652, 455, 657, 0, 296, 529, 373, 171,
	417, 346, 594, 595, 0, 646, 244, 245, 246, 247,
	248, 249, 250, 251, 289, 252, 253, 254, 255, 256,
	257, 258, 261, 262, 263, 264, 265, 266, 267, 268,
	597, 259, 260, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 282, 0, 0, 0,
	290, 291, 292, 293, 0, 0, 284, 285, 286, 287,
	0, 0, 0, 480, 481, 482, 504, 0, 466, 528,
	654, 0, 0, 0, 0, 0, 0, 0, 578, 590,
	624, 0, 634, 635, 637, 639, 638, 641, 440, 441,
	648, 0, 643, 644, 645, 642, 377, 427, 446, 434,
	208, 660, 519, 520, 661, 630, 0, 0, 0, 0,
	404, 0, 0, 534, 567, 556, 640, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 372, 571, 553, 563, 554, 539, 540, 541, 548,
	351, 542, 543, 544, 514, 545, 515, 546, 547, 141,
	570, 521, 436, 388, 588, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 2187, 0, 230, 0, 0, 0,
	0, 0, 0, 313, 231, 516, 636, 518, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	303, 443, 462, 314, 431, 475, 319, 439, 454, 309,
	403, 428, 0, 0, 305, 460, 438, 385, 362, 363,
	304, 0, 422, 337, 353, 334, 401, 0, 459, 487,
	333, 478, 0, 470, 307, 0, 469, 400, 456, 461,
	386, 379, 0, 306, 458, 384, 378, 366, 343, 503,
	367, 368, 357, 412, 376, 413, 358, 390, 389, 391,
	0, 0, 0, 0, 0, 498, 499, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 633, 0, 472, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 369, 0, 0, 0,
	488, 0, 425, 406, 663, 0, 0, 423, 374, 457,
	414, 463, 444, 471, 419, 415, 297, 445, 336, 387,
	310, 312, 653, 338, 340, 344, 345, 396, 397, 409,
	430, 447, 448, 449, 335, 320, 424, 321, 355, 322,
	298, 328, 326, 329, 432, 330, 300, 410, 453, 0,
	350, 420, 382, 301, 381, 411, 452, 451, 311, 479,
	485, 486, 575, 0, 491, 664, 665, 666, 500, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 302,
	348, 294, 295, 659, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 325, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 658, 0, 577, 592, 662, 591,
	655, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 299, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 318, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	667, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 317, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 315, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 327,
	288, 323, 324, 331, 656, 652, 455, 657, 0, 296,
	529, 373, 171, 417, 346, 594, 595, 0, 646, 244,
	245, 246, 247, 248, 249, 250, 251, 289, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 265,
	266, 267, 268, 597, 259, 260, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	0, 0, 0, 290, 291, 292, 293, 0, 0, 284,
	285, 286, 287, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 654, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 660, 519, 520, 661, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 1054, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 1061, 1062, 0, 0,
	0, 0, 313, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 303,
	443, 1048, 314, 431, 475, 319, 439, 454, 309, 403,
	428, 0, 0, 305, 460, 438, 385, 362, 363, 304,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 1035, 470, 307, 1034, 469, 400, 456, 461, 386,
	379, 0, 306, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 663, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 1052, 415, 297, 445, 336, 387, 310,
	312, 653, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 320, 424, 321, 355, 322, 298,
	328, 326, 329, 432, 330, 300, 410, 453, 0, 350,
	420, 382, 301, 381, 411, 452, 451, 311, 479, 485,
	486, 575, 0, 491, 664, 665, 666, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 509, 510, 511, 512, 576, 593, 560,
	530, 493, 584, 527, 531, 532, 360, 596, 0, 0,
	0, 484, 370, 371, 0, 342, 341, 383, 302, 348,
	294, 295, 659, 332, 402, 598, 631, 632, 523, 0,
	585, 524, 533, 325, 557, 569, 568, 398, 483, 0,
	580, 583, 513, 658, 0, 577, 592, 662, 591, 655,
	408, 0, 429, 589, 536, 0, 581, 555, 0, 582,
	551, 586, 0, 525, 0, 437, 465, 477, 494, 497,
	526, 611, 612, 613, 299, 496, 615, 616, 617, 618,
	619, 620, 1053, 614, 468, 558, 535, 561, 476, 538,
	537, 0, 0, 572, 1056, 573, 574, 392, 393, 394,
	395, 352, 599, 1051, 495, 418, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 562, 667,
	0, 622, 623, 0, 0, 489, 490, 347, 354, 508,
	356, 317, 407, 349, 474, 364, 0, 501, 566, 502,
	625, 628, 626, 627, 1063, 1049, 1059, 1050, 365, 375,
	421, 473, 405, 426, 315, 464, 435, 1060, 552, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 606, 605, 604,
	603, 602, 601, 600, 0, 0, 549, 450, 327, 288,
	323, 324, 331, 656, 652, 455, 657, 0, 296, 529,
	373, 0, 417, 346, 594, 595, 0, 646, 244, 245,
	246, 247, 248, 249, 250, 251, 289, 252, 253, 254,
	255, 256, 257, 258, 261, 262, 263, 264, 265, 266,
	267, 268, 597, 259, 260, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 0,
	0, 0, 290, 291, 292, 293, 0, 0, 284, 285,
	286, 287, 0, 0, 0, 480, 481, 482, 504, 0,
	466, 528, 654, 0, 0, 0, 0, 0, 0, 0,
	578, 590, 624, 0, 634, 635, 637, 639, 638, 641,
	440, 441, 648, 0, 643, 644, 645, 642, 1047, 427,
	446, 434, 208, 660, 519, 520, 661, 630, 0, 0,
	0, 0, 404, 0, 0, 534, 567, 556, 640, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 372, 571, 553, 563, 554, 539, 540,
	541, 548, 351, 542, 543, 544, 514, 545, 515, 546,
	547, 141, 570, 521, 436, 388, 588, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2082, 0, 0, 230, 0,
	0, 0, 0, 0, 0, 313, 231, 516, 636, 518,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 443, 462, 314, 431, 475, 319, 439,
	454, 309, 403, 428, 0, 0, 305, 460, 438, 385,
	362, 363, 304, 0, 422, 337, 353, 334, 401, 0,
	459, 487, 333, 478, 0, 470, 307, 0, 469, 400,
	456, 461, 386, 379, 0, 306, 458, 384, 378, 366,
	343, 503, 367, 368, 357, 412, 376, 413, 358, 390,
	389, 391, 0, 0, 0, 0, 0, 498, 499, 0,
	0, 647, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 629, 0, 0, 633, 0, 472, 0,
	0, 0, 0, 0, 0, 442, 0, 0, 369, 0,
	0, 0, 488, 0, 425, 406, 663, 0, 0, 423,
	374, 457, 414, 463, 444, 471, 419, 415, 297, 445,
	336, 387, 310, 312, 653, 338, 340, 344, 345, 396,
	397, 409, 430, 447, 448, 449, 335, 320, 424, 321,
	355, 322, 298, 328, 326, 329, 432, 330, 300, 410,
	453, 0, 350, 420, 382, 301, 381, 411, 452, 451,
	311, 479, 485, 486, 575, 0, 491, 664, 665, 666,
	500, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 302, 348, 294, 295, 659, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 325, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 658, 0, 577, 592,
	662, 591, 655, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 299, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 318, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 667, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 317, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 315, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 327, 288, 323, 324, 331, 656, 652, 455, 657,
	0, 296, 529, 373, 171, 417, 346, 594, 595, 0,
	646, 244, 245, 246, 247, 248, 249, 250, 251, 289,
	252, 253, 254, 255, 256, 257, 258, 261, 262, 263,
	264, 265, 266, 267, 268, 597, 259, 260, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
	281, 282, 0, 0, 0, 290, 291, 292, 293, 0,
	0, 284, 285, 286, 287, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 654, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 660, 519, 520, 661,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 1061, 1062,
	0, 0, 0, 0, 313, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 443, 462, 314, 431, 475, 319, 439, 454,
	309, 403, 428, 0, 0, 305, 460, 438, 385, 362,
	363, 304, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 1035, 470, 307, 1034, 469, 400, 456,
	461, 386, 379, 0, 306, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 663, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 297, 445, 336,
	387, 310, 312, 653, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 320, 424, 321, 355,
	322, 298, 328, 326, 329, 432, 330, 300, 410, 453,
	0, 350, 420, 382, 301, 381, 411, 452, 451, 311,
	479, 485, 486, 575, 0, 491, 664, 665, 666, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 505, 506, 507, 509, 510, 511, 512, 576,
	593, 560, 530, 493, 584, 527, 531, 532, 360, 596,
	0, 0, 0, 484, 370, 371, 0, 342, 341, 383,
	302, 348, 294, 295, 659, 332, 402, 598, 631, 632,
	523, 0, 585, 524, 533, 325, 557, 569, 568, 398,
	483, 0, 580, 583, 513, 658, 0, 577, 592, 662,
	591, 655, 408, 0, 429, 589, 536, 0, 581, 555,
	0, 582, 551, 586, 0, 525, 0, 437, 465, 477,
	494, 497, 526, 611, 612, 613, 299, 496, 615, 616,
	617, 618, 619, 620, 621, 614, 468, 558, 535, 561,
	476, 538, 537, 0, 0, 572, 492, 573, 574, 392,
	393, 394, 395, 352, 599, 318, 495, 418, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	562, 667, 0, 622, 623, 0, 0, 489, 490, 347,
	354, 508, 356, 317, 407, 349, 474, 364, 0, 501,
	566, 502, 625, 628, 626, 627, 1063, 2103, 1059, 2104,
	365, 375, 421, 473, 405, 426, 315, 464, 435, 1060,
	552, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 606,
	605, 604, 603, 602, 601, 600, 0, 0, 549, 450,
	327, 288, 323, 324, 331, 656, 652, 455, 657, 0,
	296, 529, 373, 0, 417, 346, 594, 595, 0, 646,
	244, 245, 246, 247, 248, 249, 250, 251, 289, 252,
	253, 254, 255, 256, 257, 258, 261, 262, 263, 264,
	265, 266, 267, 268, 597, 259, 260, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	282, 0, 0, 0, 290, 291, 292, 293, 0, 0,
	284, 285, 286, 287, 0, 0, 0, 480, 481, 482,
	504, 0, 466, 528, 654, 0, 0, 0, 0, 0,
	0, 0, 578, 590, 624, 0, 634, 635, 637, 639,
	638, 641, 440, 441, 648, 0, 643, 644, 645, 642,
	377, 427, 446, 434, 0, 660, 519, 520, 661, 630,
	404, 0, 0, 534, 567, 556, 640, 522, 0, 0,
	3007, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 372, 571, 553, 563, 554, 539, 540, 541, 548,
	351, 542, 543, 544, 514, 545, 515, 546, 547, 0,
	570, 521, 436, 388, 588, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 230, 0, 0, 0,
	0, 0, 0, 313, 231, 516, 636, 518, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	303, 443, 462, 314, 431, 475, 319, 439, 454, 309,
	403, 428, 0, 0, 305, 460, 438, 385, 362, 363,
	304, 0, 422, 337, 353, 334, 401, 0, 459, 487,
	333, 478, 0, 470, 307, 0, 469, 400, 456, 461,
	386, 379, 0, 306, 458, 384, 378, 366, 343, 503,
	367, 368, 357, 412, 376, 413, 358, 390, 389, 391,
	0, 0, 0, 0, 0, 498, 499, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 3010, 0, 0, 0,
	3009, 629, 0, 0, 633, 0, 472, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 369, 0, 0, 0,
	488, 0, 425, 406, 663, 0, 0, 423, 374, 457,
	414, 463, 444, 471, 419, 415, 297, 445, 336, 387,
	310, 312, 653, 338, 340, 344, 345, 396, 397, 409,
	430, 447, 448, 449, 335, 320, 424, 321, 355, 322,
	298, 328, 326, 329, 432, 330, 300, 410, 453, 0,
	350, 420, 382, 301, 381, 411, 452, 451, 311, 479,
	485, 486, 575, 0, 491, 664, 665, 666, 500, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 302,
	348, 294, 295, 659, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 325, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 658, 0, 577, 592, 662, 591,
	655, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 299, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 318, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	667, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 317, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 315, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 327,
	288, 323, 324, 331, 656, 652, 455, 657, 0, 296,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 244,
	245, 246, 247, 248, 249, 250, 251, 289, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 265,
	266, 267, 268, 597, 259, 260, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	0, 0, 0, 290, 291, 292, 293, 0, 0, 284,
	285, 286, 287, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 654, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 660, 519, 520, 661, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 1564, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 1562, 0,
	0, 0, 313, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1560, 0, 0, 0, 0, 0, 0, 303,
	443, 462, 314, 431, 475, 319, 439, 454, 309, 403,
	428, 0, 0, 305, 460, 438, 385, 362, 363, 304,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 307, 0, 469, 400, 456, 461, 386,
	379, 0, 306, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 663, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 297, 445, 336, 387, 310,
	312, 653, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 320, 424, 321, 355, 322, 298,
	328, 326, 329, 432, 330, 300, 410, 453, 0, 350,
	420, 382, 301, 381, 411, 452, 451, 311, 479, 485,
	486, 575, 0, 491, 664, 665, 666, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 509, 510, 511, 512, 576, 593, 560,
	530, 493, 584, 527, 531, 532, 360, 596, 0, 0,
	0, 484, 370, 371, 0, 342, 341, 383, 302, 348,
	294, 295, 659, 332, 402, 598, 631, 632, 523, 0,
	585, 524, 533, 325, 557, 569, 568, 398, 483, 0,
	580, 583, 513, 658, 0, 577, 592, 662, 591, 655,
	408, 0, 429, 589, 536, 0, 581, 555, 0, 582,
	551, 586, 0, 525, 0, 437, 465, 477, 494, 497,
	526, 611, 612, 613, 299, 496, 615, 616, 617, 618,
	619, 620, 621, 614, 468, 558, 535, 561, 476, 538,
	537, 0, 0, 572, 492, 573, 574, 392, 393, 394,
	395, 352, 599, 318, 495, 418, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 562, 667,
	0, 622, 623, 0, 0, 489, 490, 347, 354, 508,
	356, 317, 407, 349, 474, 364, 0, 501, 566, 502,
	625, 628, 626, 627, 399, 359, 361, 433, 365, 375,
	421, 473, 405, 426, 315, 464, 435, 380, 552, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 606, 605, 604,
	603, 602, 601, 600, 0, 0, 549, 450, 327, 288,
	323, 324, 331, 656, 652, 455, 657, 0, 296, 529,
	373, 0, 417, 346, 594, 595, 0, 646, 244, 245,
	246, 247, 248, 249, 250, 251, 289, 252, 253, 254,
	255, 256, 257, 258, 261, 262, 263, 264, 265, 266,
	267, 268, 597, 259, 260, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 0,
	0, 0, 290, 291, 292, 293, 0, 0, 284, 285,
	286, 287, 0, 0, 0, 480, 481, 482, 504, 0,
	466, 528, 654, 0, 0, 0, 0, 0, 0, 0,
	578, 590, 624, 0, 634, 635, 637, 639, 638, 641,
	440, 441, 648, 0, 643, 644, 645, 642, 377, 427,
	446, 434, 0, 660, 519, 520, 661, 630, 404, 0,
	0, 534, 567, 556, 640, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 1558, 0, 372,
	571, 553, 563, 554, 539, 540, 541, 548, 351, 542,
	543, 544, 514, 545, 515, 546, 547, 0, 570, 521,
	436, 388, 588, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 230, 0, 0, 1562, 0, 0,
	0, 313, 231, 516, 636, 518, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1560, 0, 0, 0, 0, 0, 0, 303, 443,
	462, 314, 431, 475, 319, 439, 454, 309, 403, 428,
	0, 0, 305, 460, 438, 385, 362, 363, 304, 0,
	422, 337, 353, 334, 401, 0, 459, 487, 333, 478,
	0, 470, 307, 0, 469, 400, 456, 461, 386, 379,
	0, 306, 458, 384, 378, 366, 343, 503, 367, 368,
	357, 412, 376, 413, 358, 390, 389, 391, 0, 0,
	0, 0, 0, 498, 499, 0, 0, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	0, 0, 633, 0, 472, 0, 0, 0, 0, 0,
	0, 442, 0, 0, 369, 0, 0, 0, 488, 0,
	425, 406, 663, 0, 0, 423, 374, 457, 414, 463,
	444, 471, 419, 415, 297, 445, 336, 387, 310, 312,
	653, 338, 340, 344, 345, 396, 397, 409, 430, 447,
	448, 449, 335, 320, 424, 321, 355, 322, 298, 328,
	326, 329, 432, 330, 300, 410, 453, 0, 350, 420,
	382, 301, 381, 411, 452, 451, 311, 479, 485, 486,
	575, 0, 491, 664, 665, 666, 500, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 302, 348, 294,
	295, 659, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 325, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 658, 0, 577, 592, 662, 591, 655, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 299, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 318, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 667, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	317, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 315, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 327, 288, 323,
	324, 331, 656, 652, 455, 657, 0, 296, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 244, 245, 246,
	247, 248, 249, 250, 251, 289, 252, 253, 254, 255,
	256, 257, 258, 261, 262, 263, 264, 265, 266, 267,
	268, 597, 259, 260, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 0, 0,
	0, 290, 291, 292, 293, 0, 0, 284, 285, 286,
	287, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 654, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 660, 519, 520, 661, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4126, 0, 230, 857, 0, 0, 0, 0, 0,
	313, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 303, 443, 462,
	314, 431, 475, 319, 439, 454, 309, 403, 428, 0,
	0, 305, 460, 438, 385, 362, 363, 304, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 307, 0, 469, 400, 456, 461, 386, 379, 0,
	306, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 663, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 297, 445, 336, 387, 310, 312, 653,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 320, 424, 321, 355, 322, 298, 328, 326,
	329, 432, 330, 300, 410, 453, 0, 350, 420, 382,
	301, 381, 411, 452, 451, 311, 479, 485, 486, 575,
	0, 491, 664, 665, 666, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 505, 506,
	507, 509, 510, 511, 512, 576, 593, 560, 530, 493,
	584, 527, 531, 532, 360, 596, 0, 0, 0, 484,
	370, 371, 0, 342, 341, 383, 302, 348, 294, 295,
	659, 332, 402, 598, 631, 632, 523, 0, 585, 524,
	533, 325, 557, 569, 568, 398, 483, 0, 580, 583,
	513, 658, 0, 577, 592, 662, 591, 655, 408, 0,
	429, 589, 536, 0, 581, 555, 0, 582, 551, 586,
	0, 525, 0, 437, 465, 477, 494, 497, 526, 611,
	612, 613, 299, 496, 615, 616, 617, 618, 619, 620,
	621, 614, 468, 558, 535, 561, 476, 538, 537, 0,
	0, 572, 492, 573, 574, 392, 393, 394, 395, 352,
	599, 318, 495, 418, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 565, 562, 667, 0, 622,
	623, 0, 0, 489, 490, 347, 354, 508, 356, 317,
	407, 349, 474, 364, 0, 501, 566, 502, 625, 628,
	626, 627, 399, 359, 361, 433, 365, 375, 421, 473,
	405, 426, 315, 464, 435, 380, 552, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 606, 605, 604, 603, 602,
	601, 600, 0, 0, 549, 450, 327, 288, 323, 324,
	331, 656, 652, 455, 657, 0, 296, 529, 373, 0,
	417, 346, 594, 595, 0, 646, 244, 245, 246, 247,
	248, 249, 250, 251, 289, 252, 253, 254, 255, 256,
	257, 258, 261, 262, 263, 264, 265, 266, 267, 268,
	597, 259, 260, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 282, 0, 0, 0,
	290, 291, 292, 293, 0, 0, 284, 285, 286, 287,
	0, 0, 0, 480, 481, 482, 504, 0, 466, 528,
	654, 0, 0, 0, 0, 0, 0, 0, 578, 590,
	624, 0, 634, 635, 637, 639, 638, 641, 440, 441,
	648, 0, 643, 644, 645, 642, 377, 427, 446, 434,
	0, 660, 519, 520, 661, 630, 404, 0, 0, 534,
	567, 556, 640, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 372, 571, 553,
	563, 554, 539, 540, 541, 548, 351, 542, 543, 544,
	514, 545, 515, 546, 547, 0, 570, 521, 436, 388,
	588, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 230, 0, 0, 1562, 0, 0, 0, 313,
	231, 516, 636, 518, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1560,
	0, 0, 0, 0, 0, 0, 303, 443, 462, 314,
	431, 475, 319, 439, 454, 309, 403, 428, 0, 0,
	305, 460, 438, 385, 362, 363, 304, 0, 422, 337,
	353, 334, 401, 0, 459, 487, 333, 478, 0, 470,
	307, 0, 469, 400, 456, 461, 386, 379, 0, 306,
	458, 384, 378, 366, 343, 503, 367, 368, 357, 412,
	376, 413, 358, 390, 389, 391, 0, 0, 0, 0,
	0, 498, 499, 0, 0, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 629, 0, 0,
	633, 0, 472, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 369, 0, 0, 0, 488, 0, 425, 406,
	663, 0, 0, 423, 374, 457, 414, 463, 444, 471,
	419, 415, 297, 445, 336, 387, 310, 312, 653, 338,
	340, 344, 345, 396, 397, 409, 430, 447, 448, 449,
	335, 320, 424, 321, 355, 322, 298, 328, 326, 329,
	432, 330, 300, 410, 453, 0, 350, 420, 382, 301,
	381, 411, 452, 451, 311, 479, 485, 486, 575, 0,
	491, 664, 665, 666, 500, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 302, 348, 294, 295, 659,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	325, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	658, 0, 577, 592, 662, 591, 655, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 299, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	318, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 667, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 317, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 315, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 327, 288, 323, 324, 331,
	656, 652, 455, 657, 0, 296, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 244, 245, 246, 247, 248,
	249, 250, 251, 289, 252, 253, 254, 255, 256, 257,
	258, 261, 262, 263, 264, 265, 266, 267, 268, 597,
	259, 260, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 0, 0, 0, 290,
	291, 292, 293, 0, 0, 284, 285, 286, 287, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 654,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	660, 519, 520, 661, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 1562, 0, 0, 0, 313, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1773, 0,
	0, 0, 0, 0, 0, 303, 443, 462, 314, 431,
	475, 319, 439, 454, 309, 403, 428, 0, 0, 305,
	460, 438, 385, 362, 363, 304, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 307,
	0, 469, 400, 456, 461, 386, 379, 0, 306, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 663,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 297, 445, 336, 387, 310, 312, 653, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	320, 424, 321, 355, 322, 298, 328, 326, 329, 432,
	330, 300, 410, 453, 0, 350, 420, 382, 301, 381,
	411, 452, 451, 311, 479, 485, 486, 575, 0, 491,
	664, 665, 666, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 505, 506, 507, 509,
	510, 511, 512, 576, 593, 560, 530, 493, 584, 527,
	531, 532, 360, 596, 0, 0, 0, 484, 370, 371,
	0, 342, 341, 383, 302, 348, 294, 295, 659, 332,
	402, 598, 631, 632, 523, 0, 585, 524, 533, 325,
	557, 569, 568, 398, 483, 0, 580, 583, 513, 658,
	0, 577, 592, 662, 591, 655, 408, 0, 429, 589,
	536, 0, 581, 555, 0, 582, 551, 586, 0, 525,
	0, 437, 465, 477, 494, 497, 526, 611, 612, 613,
	299, 496, 615, 616, 617, 618, 619, 620, 621, 614,
	468, 558, 535, 561, 476, 538, 537, 0, 0, 572,
	492, 573, 574, 392, 393, 394, 395, 352, 599, 318,
	495, 418, 0, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 565, 562, 667, 0, 622, 623, 0,
	0, 489, 490, 347, 354, 508, 356, 317, 407, 349,
	474, 364, 0, 501, 566, 502, 625, 628, 626, 627,
	399, 359, 361, 433, 365, 375, 421, 473, 405, 426,
	315, 464, 435, 380, 552, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 606, 605, 604, 603, 602, 601, 600,
	0, 0, 549, 450, 327, 288, 323, 324, 331, 656,
	652, 455, 657, 0, 296, 529, 373, 0, 417, 346,
	594, 595, 0, 646, 244, 245, 246, 247, 248, 249,
	250, 251, 289, 252, 253, 254, 255, 256, 257, 258,
	261, 262, 263, 264, 265, 266, 267, 268, 597, 259,
	260, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 0, 0, 0, 290, 291,
	292, 293, 0, 0, 284, 285, 286, 287, 0, 0,
	0, 480, 481, 482, 504, 0, 466, 528, 654, 0,
	0, 0, 0, 0, 0, 0, 578, 590, 624, 0,
	634, 635, 637, 639, 638, 641, 440, 441, 648, 0,
	643, 644, 645, 642, 377, 427, 446, 434, 0, 660,
	519, 520, 661, 630, 404, 0, 0, 534, 567, 556,
	640, 522, 0, 0, 0, 0, 0, 2543, 0, 0,
	0, 0, 339, 0, 0, 372, 571, 553, 563, 554,
	539, 540, 541, 548, 351, 542, 543, 544, 514, 545,
	515, 546, 547, 0, 570, 521, 436, 388, 588, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	230, 0, 0, 2545, 0, 0, 0, 313, 231, 516,
	636, 518, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 443, 462, 314, 431, 475,
	319, 439, 454, 309, 403, 428, 0, 0, 305, 460,
	438, 385, 362, 363, 304, 0, 422, 337, 353, 334,
	401, 0, 459, 487, 333, 478, 0, 470, 307, 0,
	469, 400, 456, 461, 386, 379, 0, 306, 458, 384,
	378, 366, 343, 503, 367, 368, 357, 412, 376, 413,
	358, 390, 389, 391, 0, 0, 0, 0, 0, 498,
	499, 0, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 0, 0, 633, 0,
	472, 0, 0, 0, 0, 0, 0, 442, 0, 0,
	369, 0, 0, 0, 488, 0, 425, 406, 663, 0,
	0, 423, 374, 457, 414, 463, 444, 471, 419, 415,
	297, 445, 336, 387, 310, 312, 653, 338, 340, 344,
	345, 396, 397, 409, 430, 447, 448, 449, 335, 320,
	424, 321, 355, 322, 298, 328, 326, 329, 432, 330,
	300, 410, 453, 0, 350, 420, 382, 301, 381, 411,
	452, 451, 311, 479, 485, 486, 575, 0, 491, 664,
	665, 666, 500, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 302, 348, 294, 295, 659, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 325, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 658, 0,
	577, 592, 662, 591, 655, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 299,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 318, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 667, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 317, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 315,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 327, 288, 323, 324, 331, 656, 652,
	455, 657, 0, 296, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 244, 245, 246, 247, 248, 249, 250,
	251, 289, 252, 253, 254, 255, 256, 257, 258, 261,
	262, 263, 264, 265, 266, 267, 268, 597, 259, 260,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 0, 0, 0, 290, 291, 292,
	293, 0, 0, 284, 285, 286, 287, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 654, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 660, 519,
	520, 661, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 2152, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 2153, 0, 0, 0, 313, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 303, 443, 462, 314, 431, 475, 319,
	439, 454, 309, 403, 428, 0, 0, 305, 460, 438,
	385, 362, 363, 304, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 307, 0, 469,
	400, 456, 461, 386, 379, 0, 306, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 663, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 297,
	445, 336, 387, 310, 312, 653, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 320, 424,
	321, 355, 322, 298, 328, 326, 329, 432, 330, 300,
	410, 453, 0, 350, 420, 382, 301, 381, 411, 452,
	451, 311, 479, 485, 486, 575, 0, 491, 664, 665,
	666, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 505, 506, 507, 509, 510, 511,
	512, 576, 593, 560, 530, 493, 584, 527, 531, 532,
	360, 596, 0, 0, 0, 484, 370, 371, 0, 342,
	341, 383, 302, 348, 294, 295, 659, 332, 402, 598,
	631, 632, 523, 0, 585, 524, 533, 325, 557, 569,
	568, 398, 483, 0, 580, 583, 513, 658, 0, 577,
	592, 662, 591, 655, 408, 0, 429, 589, 536, 0,
	581, 555, 0, 582, 551, 586, 0, 525, 0, 437,
	465, 477, 494, 497, 526, 611, 612, 613, 299, 496,
	615, 616, 617, 618, 619, 620, 621, 614, 468, 558,
	535, 561, 476, 538, 537, 0, 0, 572, 492, 573,
	574, 392, 393, 394, 395, 352, 599, 318, 495, 418,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 565, 562, 667, 0, 622, 623, 0, 0, 489,
	490, 347, 354, 508, 356, 317, 407, 349, 474, 364,
	0, 501, 566, 502, 625, 628, 626, 627, 399, 359,
	361, 433, 365, 375, 421, 473, 405, 426, 315, 464,
	435, 380, 552, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 606, 605, 604, 603, 602, 601, 600, 0, 0,
	549, 450, 327, 288, 323, 324, 331, 656, 652, 455,
	657, 0, 296, 529, 373, 0, 417, 346, 594, 595,
	0, 646, 244, 245, 246, 247, 248, 249, 250, 251,
	289, 252, 253, 254, 255, 256, 257, 258, 261, 262,
	263, 264, 265, 266, 267, 268, 597, 259, 260, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 0, 0, 0, 290, 291, 292, 293,
	0, 0, 284, 285, 286, 287, 0, 0, 0, 480,
	481, 482, 504, 0, 466, 528, 654, 0, 0, 0,
	0, 0, 0, 0, 578, 590, 624, 0, 634, 635,
	637, 639, 638, 641, 440, 441, 648, 0, 643, 644,
	645, 642, 377, 427, 446, 434, 0, 660, 519, 520,
	661, 630, 404, 0, 0, 534, 567, 556, 640, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 372, 571, 553, 563, 554, 539, 540,
	541, 548, 351, 542, 543, 544, 514, 545, 515, 546,
	547, 0, 570, 521, 436, 388, 588, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	0, 3232, 3234, 0, 0, 313, 231, 516, 636, 518,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 443, 462, 314, 431, 475, 319, 439,
	454, 309, 403, 428, 0, 0, 305, 460, 438, 385,
	362, 363, 304, 0, 422, 337, 353, 334, 401, 0,
	459, 487, 333, 478, 0, 470, 307, 0, 469, 400,
	456, 461, 386, 379, 0, 306, 458, 384, 378, 366,
	343, 503, 367, 368, 357, 412, 376, 413, 358, 390,
	389, 391, 0, 0, 0, 0, 0, 498, 499, 0,
	0, 647, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 629, 0, 0, 633, 0, 472, 0,
	0, 0, 0, 0, 0, 442, 0, 0, 369, 0,
	0, 0, 488, 0, 425, 406, 663, 0, 0, 423,
	374, 457, 414, 463, 444, 471, 419, 415, 297, 445,
	336, 387, 310, 312, 653, 338, 340, 344, 345, 396,
	397, 409, 430, 447, 448, 449, 335, 320, 424, 321,
	355, 322, 298, 328, 326, 329, 432, 330, 300, 410,
	453, 0, 350, 420, 382, 301, 381, 411, 452, 451,
	311, 479, 485, 486, 575, 0, 491, 664, 665, 666,
	500, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 302, 348, 294, 295, 659, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 325, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 658, 0, 577, 592,
	662, 591, 655, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 299, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 318, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 667, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 317, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 315, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 327, 288, 323, 324, 331, 656, 652, 455, 657,
	0, 296, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 244, 245, 246, 247, 248, 249, 250, 251, 289,
	252, 253, 254, 255, 256, 257, 258, 261, 262, 263,
	264, 265, 266, 267, 268, 597, 259, 260, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
	281, 282, 0, 0, 0, 290, 291, 292, 293, 0,
	0, 284, 285, 286, 287, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 654, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 660, 519, 520, 661,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	2566, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	1562, 0, 0, 0, 313, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 443, 462, 314, 431, 475, 319, 439, 454,
	309, 403, 428, 0, 0, 305, 460, 438, 385, 362,
	363, 304, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 307, 0, 469, 400, 456,
	461, 386, 379, 0, 306, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 663, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 297, 445, 336,
	387, 310, 312, 653, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 320, 424, 321, 355,
	322, 298, 328, 326, 329, 432, 330, 300, 410, 453,
	0, 350, 420, 382, 301, 381, 411, 452, 451, 311,
	479, 485, 486, 575, 0, 491, 664, 665, 666, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 505, 506, 507, 509, 510, 511, 512, 576,
	593, 560, 530, 493, 584, 527, 531, 532, 360, 596,
	0, 0, 0, 484, 370, 371, 0, 342, 341, 383,
	302, 348, 294, 295, 659, 332, 402, 598, 631, 632,
	523, 0, 585, 524, 533, 325, 557, 569, 568, 398,
	483, 0, 580, 583, 513, 658, 0, 577, 592, 662,
	591, 655, 408, 0, 429, 589, 536, 0, 581, 555,
	0, 582, 551, 586, 0, 525, 0, 437, 465, 477,
	494, 497, 526, 611, 612, 613, 299, 496, 615, 616,
	617, 618, 619, 620, 621, 614, 468, 558, 535, 561,
	476, 538, 537, 0, 0, 572, 492, 573, 574, 392,
	393, 394, 395, 352, 599, 318, 495, 418, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	562, 667, 0, 622, 623, 0, 0, 489, 490, 347,
	354, 508, 356, 317, 407, 349, 474, 364, 0, 501,
	566, 502, 625, 628, 626, 627, 399, 359, 361, 433,
	365, 375, 421, 473, 405, 426, 315, 464, 435, 380,
	552, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 606,
	605, 604, 603, 602, 601, 600, 0, 0, 549, 450,
	327, 288, 323, 324, 331, 656, 652, 455, 657, 0,
	296, 529, 373, 0, 417, 346, 594, 595, 0, 646,
	244, 245, 246, 247, 248, 249, 250, 251, 289, 252,
	253, 254, 255, 256, 257, 258, 261, 262, 263, 264,
	265, 266, 267, 268, 597, 259, 260, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	282, 0, 0, 0, 290, 291, 292, 293, 0, 0,
	284, 285, 286, 287, 0, 0, 0, 480, 481, 482,
	504, 0, 466, 528, 654, 0, 0, 0, 0, 0,
	0, 0, 578, 590, 624, 0, 634, 635, 637, 639,
	638, 641, 440, 441, 648, 0, 643, 644, 645, 642,
	377, 427, 446, 434, 0, 660, 519, 520, 661, 630,
	404, 0, 0, 534, 567, 556, 640, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 674, 339, 0,
	0, 372, 571, 553, 563, 554, 539, 540, 541, 548,
	351, 542, 543, 544, 514, 545, 515, 546, 547, 0,
	570, 521, 436, 388, 588, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 230, 0, 0, 0,
	0, 0, 0, 313, 231, 516, 636, 518, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	303, 443, 462, 314, 431, 475, 319, 439, 454, 309,
	403, 428, 0, 0, 305, 460, 438, 385, 362, 363,
	304, 0, 422, 337, 353, 334, 401, 0, 459, 487,
	333, 478, 0, 470, 307, 0, 469, 400, 456, 461,
	386, 379, 0, 306, 458, 384, 378, 366, 343, 503,
	367, 368, 357, 412, 376, 413, 358, 390, 389, 391,
	0, 0, 0, 0, 0, 498, 499, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 633, 0, 472, 0, 673, 0,
	0, 0, 0, 442, 0, 0, 369, 0, 0, 0,
	488, 0, 425, 406, 663, 0, 0, 423, 374, 457,
	414, 463, 444, 471, 419, 415, 297, 445, 336, 387,
	310, 312, 653, 338, 340, 344, 345, 396, 397, 409,
	430, 447, 448, 449, 335, 320, 424, 321, 355, 322,
	298, 328, 326, 329, 432, 330, 300, 410, 453, 0,
	350, 420, 382, 301, 381, 411, 452, 451, 311, 479,
	485, 486, 575, 0, 491, 664, 665, 666, 500, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 302,
	348, 294, 295, 659, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 325, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 658, 0, 577, 592, 662, 591,
	655, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 299, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 318, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	667, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 317, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 315, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 327,
	288, 323, 324, 331, 656, 652, 455, 657, 0, 296,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 244,
	245, 246, 247, 248, 249, 250, 251, 289, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 265,
	266, 267, 268, 597, 259, 260, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	0, 0, 0, 290, 291, 292, 293, 0, 0, 284,
	285, 286, 287, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 654, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 660, 519, 520, 661, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 857, 0, 0, 0,
	0, 0, 313, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 303,
	443, 462, 314, 431, 475, 319, 439, 454, 309, 403,
	428, 0, 0, 305, 460, 438, 385, 362, 363, 304,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 307, 0, 469, 400, 456, 461, 386,
	379, 0, 306, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 663, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 297, 445, 336, 387, 310,
	312, 653, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 320, 424, 321, 355, 322, 298,
	328, 326, 329, 432, 330, 300, 410, 453, 0, 350,
	420, 382, 301, 381, 411, 452, 451, 311, 479, 485,
	486, 575, 0, 491, 664, 665, 666, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 509, 510, 511, 512, 576, 593, 560,
	530, 493, 584, 527, 531, 532, 360, 596, 0, 0,
	0, 484, 370, 371, 0, 342, 341, 383, 302, 348,
	294, 295, 659, 332, 402, 598, 631, 632, 523, 0,
	585, 524, 533, 325, 557, 569, 568, 398, 483, 0,
	580, 583, 513, 658, 0, 577, 592, 662, 591, 655,
	408, 0, 429, 589, 536, 0, 581, 555, 0, 582,
	551, 586, 0, 525, 0, 437, 465, 477, 494, 497,
	526, 611, 612, 613, 299, 496, 615, 616, 617, 618,
	619, 620, 621, 614, 468, 558, 535, 561, 476, 538,
	537, 0, 0, 572, 492, 573, 574, 392, 393, 394,
	395, 352, 599, 318, 495, 418, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 562, 667,
	0, 622, 623, 0, 0, 489, 490, 347, 354, 508,
	356, 317, 407, 349, 474, 364, 0, 501, 566, 502,
	625, 628, 626, 627, 399, 359, 361, 433, 365, 375,
	421, 473, 405, 426, 315, 464, 435, 380, 552, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 606, 605, 604,
	603, 602, 601, 600, 0, 0, 549, 450, 327, 288,
	323, 324, 331, 656, 652, 455, 657, 0, 296, 529,
	373, 0, 417, 346, 594, 595, 0, 646, 244, 245,
	246, 247, 248, 249, 250, 251, 289, 252, 253, 254,
	255, 256, 257, 258, 261, 262, 263, 264, 265, 266,
	267, 268, 597, 259, 260, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 0,
	0, 0, 290, 291, 292, 293, 0, 0, 284, 285,
	286, 287, 0, 0, 0, 480, 481, 482, 504, 0,
	466, 528, 654, 0, 0, 0, 0, 0, 0, 0,
	578, 590, 624, 0, 634, 635, 637, 639, 638, 641,
	440, 441, 648, 0, 643, 644, 645, 642, 377, 427,
	446, 434, 0, 660, 519, 520, 661, 630, 404, 0,
	0, 534, 567, 556, 640, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 372,
	571, 553, 563, 554, 539, 540, 541, 548, 351, 542,
	543, 544, 514, 545, 515, 546, 547, 0, 570, 521,
	436, 388, 588, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 4103, 0, 0, 230, 0, 0, 0, 0, 0,
	0, 313, 231, 516, 636, 518, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 303, 443,
	462, 314, 431, 475, 319, 439, 454, 309, 403, 428,
	0, 0, 305, 460, 438, 385, 362, 363, 304, 0,
	422, 337, 353, 334, 401, 0, 459, 487, 333, 478,
	0, 470, 307, 0, 469, 400, 456, 461, 386, 379,
	0, 306, 458, 384, 378, 366, 343, 503, 367, 368,
	357, 412, 376, 413, 358, 390, 389, 391, 0, 0,
	0, 0, 0, 498, 499, 0, 0, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	0, 0, 633, 0, 472, 0, 0, 0, 0, 0,
	0, 442, 0, 0, 369, 0, 0, 0, 488, 0,
	425, 406, 663, 0, 0, 423, 374, 457, 414, 463,
	444, 471, 419, 415, 297, 445, 336, 387, 310, 312,
	653, 338, 340, 344, 345, 396, 397, 409, 430, 447,
	448, 449, 335, 320, 424, 321, 355, 322, 298, 328,
	326, 329, 432, 330, 300, 410, 453, 0, 350, 420,
	382, 301, 381, 411, 452, 451, 311, 479, 485, 486,
	575, 0, 491, 664, 665, 666, 500, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 302, 348, 294,
	295, 659, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 325, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 658, 0, 577, 592, 662, 591, 655, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 299, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 318, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 667, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	317, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 315, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 327, 288, 323,
	324, 331, 656, 652, 455, 657, 0, 296, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 244, 245, 246,
	247, 248, 249, 250, 251, 289, 252, 253, 254, 255,
	256, 257, 258, 261, 262, 263, 264, 265, 266, 267,
	268, 597, 259, 260, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 0, 0,
	0, 290, 291, 292, 293, 0, 0, 284, 285, 286,
	287, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 654, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 660, 519, 520, 661, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 3858, 0, 0, 0,
	313, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 303, 443, 462,
	314, 431, 475, 319, 439, 454, 309, 403, 428, 0,
	0, 305, 460, 438, 385, 362, 363, 304, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 307, 0, 469, 400, 456, 461, 386, 379, 0,
	306, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 663, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 297, 445, 336, 387, 310, 312, 653,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 320, 424, 321, 355, 322, 298, 328, 326,
	329, 432, 330, 300, 410, 453, 0, 350, 420, 382,
	301, 381, 411, 452, 451, 311, 479, 485, 486, 575,
	0, 491, 664, 665, 666, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 505, 506,
	507, 509, 510, 511, 512, 576, 593, 560, 530, 493,
	584, 527, 531, 532, 360, 596, 0, 0, 0, 484,
	370, 371, 0, 342, 341, 383, 302, 348, 294, 295,
	659, 332, 402, 598, 631, 632, 523, 0, 585, 524,
	533, 325, 557, 569, 568, 398, 483, 0, 580, 583,
	513, 658, 0, 577, 592, 662, 591, 655, 408, 0,
	429, 589, 536, 0, 581, 555, 0, 582, 551, 586,
	0, 525, 0, 437, 465, 477, 494, 497, 526, 611,
	612, 613, 299, 496, 615, 616, 617, 618, 619, 620,
	621, 614, 468, 558, 535, 561, 476, 538, 537, 0,
	0, 572, 492, 573, 574, 392, 393, 394, 395, 352,
	599, 318, 495, 418, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 565, 562, 667, 0, 622,
	623, 0, 0, 489, 490, 347, 354, 508, 356, 317,
	407, 349, 474, 364, 0, 501, 566, 502, 625, 628,
	626, 627, 399, 359, 361, 433, 365, 375, 421, 473,
	405, 426, 315, 464, 435, 380, 552, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 606, 605, 604, 603, 602,
	601, 600, 0, 0, 549, 450, 327, 288, 323, 324,
	331, 656, 652, 455, 657, 0, 296, 529, 373, 0,
	417, 346, 594, 595, 0, 646, 244, 245, 246, 247,
	248, 249, 250, 251, 289, 252, 253, 254, 255, 256,
	257, 258, 261, 262, 263, 264, 265, 266, 267, 268,
	597, 259, 260, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 282, 0, 0, 0,
	290, 291, 292, 293, 0, 0, 284, 285, 286, 287,
	0, 0, 0, 480, 481, 482, 504, 0, 466, 528,
	654, 0, 0, 0, 0, 0, 0, 0, 578, 590,
	624, 0, 634, 635, 637, 639, 638, 641, 440, 441,
	648, 0, 643, 644, 645, 642, 377, 427, 446, 434,
	0, 660, 519, 520, 661, 630, 404, 0, 0, 534,
	567, 556, 640, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 372, 571, 553,
	563, 554, 539, 540, 541, 548, 351, 542, 543, 544,
	514, 545, 515, 546, 547, 0, 570, 521, 436, 388,
	588, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 230, 0, 0, 0, 0, 0, 0, 313,
	231, 516, 636, 518, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 303, 443, 462, 314,
	431, 475, 319, 439, 454, 309, 403, 428, 0, 0,
	305, 460, 438, 385, 362, 363, 304, 0, 422, 337,
	353, 334, 401, 0, 459, 487, 333, 478, 0, 470,
	307, 0, 469, 400, 456, 461, 386, 379, 0, 306,
	458, 384, 378, 366, 343, 503, 367, 368, 357, 412,
	376, 413, 358, 390, 389, 391, 0, 0, 0, 0,
	0, 498, 499, 0, 0, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 629, 0, 0,
	633, 0, 472, 0, 0, 0, 3994, 0, 0, 442,
	0, 0, 369, 0, 0, 0, 488, 0, 425, 406,
	663, 0, 0, 423, 374, 457, 414, 463, 444, 471,
	419, 415, 297, 445, 336, 387, 310, 312, 653, 338,
	340, 344, 345, 396, 397, 409, 430, 447, 448, 449,
	335, 320, 424, 321, 355, 322, 298, 328, 326, 329,
	432, 330, 300, 410, 453, 0, 350, 420, 382, 301,
	381, 411, 452, 451, 311, 479, 485, 486, 575, 0,
	491, 664, 665, 666, 500, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 302, 348, 294, 295, 659,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	325, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	658, 0, 577, 592, 662, 591, 655, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 299, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	318, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 667, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 317, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 315, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 327, 288, 323, 324, 331,
	656, 652, 455, 657, 0, 296, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 244, 245, 246, 247, 248,
	249, 250, 251, 289, 252, 253, 254, 255, 256, 257,
	258, 261, 262, 263, 264, 265, 266, 267, 268, 597,
	259, 260, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 0, 0, 0, 290,
	291, 292, 293, 0, 0, 284, 285, 286, 287, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 654,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	660, 519, 520, 661, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1787, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 313, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 443, 462, 314, 431,
	475, 319, 439, 454, 309, 403, 428, 0, 0, 305,
	460, 438, 385, 362, 363, 304, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 307,
	0, 469, 400, 456, 461, 386, 379, 0, 306, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 663,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 297, 445, 336, 387, 310, 312, 653, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	320, 424, 321, 355, 322, 298, 328, 326, 329, 432,
	330, 300, 410, 453, 0, 350, 420, 382, 301, 381,
	411, 452, 451, 311, 479, 485, 486, 575, 0, 491,
	664, 665, 666, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 505, 506, 507, 509,
	510, 511, 512, 576, 593, 560, 530, 493, 584, 527,
	531, 532, 360, 596, 0, 0, 0, 484, 370, 371,
	0, 342, 341, 383, 302, 348, 294, 295, 659, 332,
	402, 598, 631, 632, 523, 0, 585, 524, 533, 325,
	557, 569, 568, 398, 483, 0, 580, 583, 513, 658,
	0, 577, 592, 662, 591, 655, 408, 0, 429, 589,
	536, 0, 581, 555, 0, 582, 551, 586, 0, 525,
	0, 437, 465, 477, 494, 497, 526, 611, 612, 613,
	299, 496, 615, 616, 617, 618, 619, 620, 621, 614,
	468, 558, 535, 561, 476, 538, 537, 0, 0, 572,
	492, 573, 574, 392, 393, 394, 395, 352, 599, 318,
	495, 418, 0, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 565, 562, 667, 0, 622, 623, 0,
	0, 489, 490, 347, 354, 508, 356, 317, 407, 349,
	474, 364, 0, 501, 566, 502, 625, 628, 626, 627,
	399, 359, 361, 433, 365, 375, 421, 473, 405, 426,
	315, 464, 435, 380, 552, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 606, 605, 604, 603, 602, 601, 600,
	0, 0, 549, 450, 327, 288, 323, 324, 331, 656,
	652, 455, 657, 0, 296, 529, 373, 0, 417, 346,
	594, 595, 0, 646, 244, 245, 246, 247, 248, 249,
	250, 251, 289, 252, 253, 254, 255, 256, 257, 258,
	261, 262, 263, 264, 265, 266, 267, 268, 597, 259,
	260, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 0, 0, 0, 290, 291,
	292, 293, 0, 0, 284, 285, 286, 287, 0, 0,
	0, 480, 481, 482, 504, 0, 466, 528, 654, 0,
	0, 0, 0, 0, 0, 0, 578, 590, 624, 0,
	634, 635, 637, 639, 638, 641, 440, 441, 648, 0,
	643, 644, 645, 642, 377, 427, 446, 434, 0, 660,
	519, 520, 661, 630, 404, 0, 0, 534, 567, 556,
	640, 522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 372, 571, 553, 563, 554,
	539, 540, 541, 548, 351, 542, 543, 544, 514, 545,
	515, 546, 547, 0, 570, 521, 436, 388, 588, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3873, 0,
	230, 0, 0, 0, 0, 0, 0, 313, 231, 516,
	636, 518, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 443, 462, 314, 431, 475,
	319, 439, 454, 309, 403, 428, 0, 0, 305, 460,
	438, 385, 362, 363, 304, 0, 422, 337, 353, 334,
	401, 0, 459, 487, 333, 478, 0, 470, 307, 0,
	469, 400, 456, 461, 386, 379, 0, 306, 458, 384,
	378, 366, 343, 503, 367, 368, 357, 412, 376, 413,
	358, 390, 389, 391, 0, 0, 0, 0, 0, 498,
	499, 0, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 0, 0, 633, 0,
	472, 0, 0, 0, 0, 0, 0, 442, 0, 0,
	369, 0, 0, 0, 488, 0, 425, 406, 663, 0,
	0, 423, 374, 457, 414, 463, 444, 471, 419, 415,
	297, 445, 336, 387, 310, 312, 653, 338, 340, 344,
	345, 396, 397, 409, 430, 447, 448, 449, 335, 320,
	424, 321, 355, 322, 298, 328, 326, 329, 432, 330,
	300, 410, 453, 0, 350, 420, 382, 301, 381, 411,
	452, 451, 311, 479, 485, 486, 575, 0, 491, 664,
	665, 666, 500, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 302, 348, 294, 295, 659, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 325, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 658, 0,
	577, 592, 662, 591, 655, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 299,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 318, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 667, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 317, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 315,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 327, 288, 323, 324, 331, 656, 652,
	455, 657, 0, 296, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 244, 245, 246, 247, 248, 249, 250,
	251, 289, 252, 253, 254, 255, 256, 257, 258, 261,
	262, 263, 264, 265, 266, 267, 268, 597, 259, 260,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 0, 0, 0, 290, 291, 292,
	293, 0, 0, 284, 285, 286, 287, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 654, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 660, 519,
	520, 661, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 313, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 303, 443, 462, 314, 431, 475, 319,
	439, 454, 309, 403, 428, 0, 0, 305, 460, 438,
	385, 362, 363, 304, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 307, 0, 469,
	400, 456, 461, 386, 379, 0, 306, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 3781, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 663, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 297,
	445, 336, 387, 310, 312, 653, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 320, 424,
	321, 355, 322, 298, 328, 326, 329, 432, 330, 300,
	410, 453, 0, 350, 420, 382, 301, 381, 411, 452,
	451, 311, 479, 485, 486, 575, 0, 491, 664, 665,
	666, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 505, 506, 507, 509, 510, 511,
	512, 576, 593, 560, 530, 493, 584, 527, 531, 532,
	360, 596, 0, 0, 0, 484, 370, 371, 0, 342,
	341, 383, 302, 348, 294, 295, 659, 332, 402, 598,
	631, 632, 523, 0, 585, 524, 533, 325, 557, 569,
	568, 398, 483, 0, 580, 583, 513, 658, 0, 577,
	592, 662, 591, 655, 408, 0, 429, 589, 536, 0,
	581, 555, 0, 582, 551, 586, 0, 525, 0, 437,
	465, 477, 494, 497, 526, 611, 612, 613, 299, 496,
	615, 616, 617, 618, 619, 620, 621, 614, 468, 558,
	535, 561, 476, 538, 537, 0, 0, 572, 492, 573,
	574, 392, 393, 394, 395, 352, 599, 318, 495, 418,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 565, 562, 667, 0, 622, 623, 0, 0, 489,
	490, 347, 354, 508, 356, 317, 407, 349, 474, 364,
	0, 501, 566, 502, 625, 628, 626, 627, 399, 359,
	361, 433, 365, 375, 421, 473, 405, 426, 315, 464,
	435, 380, 552, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 606, 605, 604, 603, 602, 601, 600, 0, 0,
	549, 450, 327, 288, 323, 324, 331, 656, 652, 455,
	657, 0, 296, 529, 373, 0, 417, 346, 594, 595,
	0, 646, 244, 245, 246, 247, 248, 249, 250, 251,
	289, 252, 253, 254, 255, 256, 257, 258, 261, 262,
	263, 264, 265, 266, 267, 268, 597, 259, 260, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 0, 0, 0, 290, 291, 292, 293,
	0, 0, 284, 285, 286, 287, 0, 0, 0, 480,
	481, 482, 504, 0, 466, 528, 654, 0, 0, 0,
	0, 0, 0, 0, 578, 590, 624, 0, 634, 635,
	637, 639, 638, 641, 440, 441, 648, 0, 643, 644,
	645, 642, 377, 427, 446, 434, 0, 660, 519, 520,
	661, 630, 404, 0, 0, 534, 567, 556, 640, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 372, 571, 553, 563, 554, 539, 540,
	541, 548, 351, 542, 543, 544, 514, 545, 515, 546,
	547, 0, 570, 521, 436, 388, 588, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	0, 3265, 0, 0, 0, 313, 231, 516, 636, 518,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 443, 462, 314, 431, 475, 319, 439,
	454, 309, 403, 428, 0, 0, 305, 460, 438, 385,
	362, 363, 304, 0, 422, 337, 353, 334, 401, 0,
	459, 487, 333, 478, 0, 470, 307, 0, 469, 400,
	456, 461, 386, 379, 0, 306, 458, 384, 378, 366,
	343, 503, 367, 368, 357, 412, 376, 413, 358, 390,
	389, 391, 0, 0, 0, 0, 0, 498, 499, 0,
	0, 647, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 629, 0, 0, 633, 0, 472, 0,
	0, 0, 0, 0, 0, 442, 0, 0, 369, 0,
	0, 0, 488, 0, 425, 406, 663, 0, 0, 423,
	374, 457, 414, 463, 444, 471, 419, 415, 297, 445,
	336, 387, 310, 312, 653, 338, 340, 344, 345, 396,
	397, 409, 430, 447, 448, 449, 335, 320, 424, 321,
	355, 322, 298, 328, 326, 329, 432, 330, 300, 410,
	453, 0, 350, 420, 382, 301, 381, 411, 452, 451,
	311, 479, 485, 486, 575, 0, 491, 664, 665, 666,
	500, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 302, 348, 294, 295, 659, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 325, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 658, 0, 577, 592,
	662, 591, 655, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 299, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 318, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 667, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 317, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 315, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 327, 288, 323, 324, 331, 656, 652, 455, 657,
	0, 296, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 244, 245, 246, 247, 248, 249, 250, 251, 289,
	252, 253, 254, 255, 256, 257, 258, 261, 262, 263,
	264, 265, 266, 267, 268, 597, 259, 260, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
	281, 282, 0, 0, 0, 290, 291, 292, 293, 0,
	0, 284, 285, 286, 287, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 654, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 660, 519, 520, 661,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 313, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3284, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 443, 462, 314, 431, 475, 319, 439, 454,
	309, 403, 428, 0, 0, 305, 460, 438, 385, 362,
	363, 304, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 307, 0, 469, 400, 456,
	461, 386, 379, 0, 306, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 663, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 297, 445, 336,
	387, 310, 312, 653, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 320, 424, 321, 355,
	322, 298, 328, 326, 329, 432, 330, 300, 410, 453,
	0, 350, 420, 382, 301, 381, 411, 452, 451, 311,
	479, 485, 486, 575, 0, 491, 664, 665, 666, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 505, 506, 507, 509, 510, 511, 512, 576,
	593, 560, 530, 493, 584, 527, 531, 532, 360, 596,
	0, 0, 0, 484, 370, 371, 0, 342, 341, 383,
	302, 348, 294, 295, 659, 332, 402, 598, 631, 632,
	523, 0, 585, 524, 533, 325, 557, 569, 568, 398,
	483, 0, 580, 583, 513, 658, 0, 577, 592, 662,
	591, 655, 408, 0, 429, 589, 536, 0, 581, 555,
	0, 582, 551, 586, 0, 525, 0, 437, 465, 477,
	494, 497, 526, 611, 612, 613, 299, 496, 615, 616,
	617, 618, 619, 620, 621, 614, 468, 558, 535, 561,
	476, 538, 537, 0, 0, 572, 492, 573, 574, 392,
	393, 394, 395, 352, 599, 318, 495, 418, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	562, 667, 0, 622, 623, 0, 0, 489, 490, 347,
	354, 508, 356, 317, 407, 349, 474, 364, 0, 501,
	566, 502, 625, 628, 626, 627, 399, 359, 361, 433,
	365, 375, 421, 473, 405, 426, 315, 464, 435, 380,
	552, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 606,
	605, 604, 603, 602, 601, 600, 0, 0, 549, 450,
	327, 288, 323, 324, 331, 656, 652, 455, 657, 0,
	296, 529, 373, 0, 417, 346, 594, 595, 0, 646,
	244, 245, 246, 247, 248, 249, 250, 251, 289, 252,
	253, 254, 255, 256, 257, 258, 261, 262, 263, 264,
	265, 266, 267, 268, 597, 259, 260, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	282, 0, 0, 0, 290, 291, 292, 293, 0, 0,
	284, 285, 286, 287, 0, 0, 0, 480, 481, 482,
	504, 0, 466, 528, 654, 0, 0, 0, 0, 0,
	0, 0, 578, 590, 624, 0, 634, 635, 637, 639,
	638, 641, 440, 441, 648, 0, 643, 644, 645, 642,
	377, 427, 446, 434, 0, 660, 519, 520, 661, 630,
	404, 0, 0, 534, 567, 556, 640, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 372, 571, 553, 563, 554, 539, 540, 541, 548,
	351, 542, 543, 544, 514, 545, 515, 546, 547, 0,
	570, 521, 436, 388, 588, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2082, 0, 0, 230, 0, 0, 0,
	0, 0, 0, 313, 231, 516, 636, 518, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	303, 443, 462, 314, 431, 475, 319, 439, 454, 309,
	403, 428, 0, 0, 305, 460, 438, 385, 362, 363,
	304, 0, 422, 337, 353, 334, 401, 0, 459, 487,
	333, 478, 0, 470, 307, 0, 469, 400, 456, 461,
	386, 379, 0, 306, 458, 384, 378, 366, 343, 503,
	367, 368, 357, 412, 376, 413, 358, 390, 389, 391,
	0, 0, 0, 0, 0, 498, 499, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 633, 0, 472, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 369, 0, 0, 0,
	488, 0, 425, 406, 663, 0, 0, 423, 374, 457,
	414, 463, 444, 471, 419, 415, 297, 445, 336, 387,
	310, 312, 653, 338, 340, 344, 345, 396, 397, 409,
	430, 447, 448, 449, 335, 320, 424, 321, 355, 322,
	298, 328, 326, 329, 432, 330, 300, 410, 453, 0,
	350, 420, 382, 301, 381, 411, 452, 451, 311, 479,
	485, 486, 575, 0, 491, 664, 665, 666, 500, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 302,
	348, 294, 295, 659, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 325, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 658, 0, 577, 592, 662, 591,
	655, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 299, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 318, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	667, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 317, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 315, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 327,
	288, 323, 324, 331, 656, 652, 455, 657, 0, 296,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 244,
	245, 246, 247, 248, 249, 250, 251, 289, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 265,
	266, 267, 268, 597, 259, 260, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	0, 0, 0, 290, 291, 292, 293, 0, 0, 284,
	285, 286, 287, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 654, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 660, 519, 520, 661, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 3490,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 313, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 303,
	443, 462, 314, 431, 475, 319, 439, 454, 309, 403,
	428, 0, 0, 305, 460, 438, 385, 362, 363, 304,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 307, 0, 469, 400, 456, 461, 386,
	379, 0, 306, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 663, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 297, 445, 336, 387, 310,
	312, 653, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 320, 424, 321, 355, 322, 298,
	328, 326, 329, 432, 330, 300, 410, 453, 0, 350,
	420, 382, 301, 381, 411, 452, 451, 311, 479, 485,
	486, 575, 0, 491, 664, 665, 666, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 509, 510, 511, 512, 576, 593, 560,
	530, 493, 584, 527, 531, 532, 360, 596, 0, 0,
	0, 484, 370, 371, 0, 342, 341, 383, 302, 348,
	294, 295, 659, 332, 402, 598, 631, 632, 523, 0,
	585, 524, 533, 325, 557, 569, 568, 398, 483, 0,
	580, 583, 513, 658, 0, 577, 592, 662, 591, 655,
	408, 0, 429, 589, 536, 0, 581, 555, 0, 582,
	551, 586, 0, 525, 0, 437, 465, 477, 494, 497,
	526, 611, 612, 613, 299, 496, 615, 616, 617, 618,
	619, 620, 621, 614, 468, 558, 535, 561, 476, 538,
	537, 0, 0, 572, 492, 573, 574, 392, 393, 394,
	395, 352, 599, 318, 495, 418, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 562, 667,
	0, 622, 623, 0, 0, 489, 490, 347, 354, 508,
	356, 317, 407, 349, 474, 364, 0, 501, 566, 502,
	625, 628, 626, 627, 399, 359, 361, 433, 365, 375,
	421, 473, 405, 426, 315, 464, 435, 380, 552, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 606, 605, 604,
	603, 602, 601, 600, 0, 0, 549, 450, 327, 288,
	323, 324, 331, 656, 652, 455, 657, 0, 296, 529,
	373, 0, 417, 346, 594, 595, 0, 646, 244, 245,
	246, 247, 248, 249, 250, 251, 289, 252, 253, 254,
	255, 256, 257, 258, 261, 262, 263, 264, 265, 266,
	267, 268, 597, 259, 260, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 0,
	0, 0, 290, 291, 292, 293, 0, 0, 284, 285,
	286, 287, 0, 0, 0, 480, 481, 482, 504, 0,
	466, 528, 654, 0, 0, 0, 0, 0, 0, 0,
	578, 590, 624, 0, 634, 635, 637, 639, 638, 641,
	440, 441, 648, 0, 643, 644, 645, 642, 377, 427,
	446, 434, 0, 660, 519, 520, 661, 630, 404, 0,
	0, 534, 567, 556, 640, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 372,
	571, 553, 563, 554, 539, 540, 541, 548, 351, 542,
	543, 544, 514, 545, 515, 546, 547, 0, 570, 521,
	436, 388, 588, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 230, 0, 0, 0, 0, 0,
	0, 313, 231, 516, 636, 518, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3393, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 303, 443,
	462, 314, 431, 475, 319, 439, 454, 309, 403, 428,
	0, 0, 305, 460, 438, 385, 362, 363, 304, 0,
	422, 337, 353, 334, 401, 0, 459, 487, 333, 478,
	0, 470, 307, 0, 469, 400, 456, 461, 386, 379,
	0, 306, 458, 384, 378, 366, 343, 503, 367, 368,
	357, 412, 376, 413, 358, 390, 389, 391, 0, 0,
	0, 0, 0, 498, 499, 0, 0, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	0, 0, 633, 0, 472, 0, 0, 0, 0, 0,
	0, 442, 0, 0, 369, 0, 0, 0, 488, 0,
	425, 406, 663, 0, 0, 423, 374, 457, 414, 463,
	444, 471, 419, 415, 297, 445, 336, 387, 310, 312,
	653, 338, 340, 344, 345, 396, 397, 409, 430, 447,
	448, 449, 335, 320, 424, 321, 355, 322, 298, 328,
	326, 329, 432, 330, 300, 410, 453, 0, 350, 420,
	382, 301, 381, 411, 452, 451, 311, 479, 485, 486,
	575, 0, 491, 664, 665, 666, 500, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 302, 348, 294,
	295, 659, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 325, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 658, 0, 577, 592, 662, 591, 655, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 299, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 318, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 667, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	317, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 315, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 327, 288, 323,
	324, 331, 656, 652, 455, 657, 0, 296, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 244, 245, 246,
	247, 248, 249, 250, 251, 289, 252, 253, 254, 255,
	256, 257, 258, 261, 262, 263, 264, 265, 266, 267,
	268, 597, 259, 260, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 0, 0,
	0, 290, 291, 292, 293, 0, 0, 284, 285, 286,
	287, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 654, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 660, 519, 520, 661, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	313, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3115, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 303, 443, 462,
	314, 431, 475, 319, 439, 454, 309, 403, 428, 0,
	0, 305, 460, 438, 385, 362, 363, 304, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 307, 0, 469, 400, 456, 461, 386, 379, 0,
	306, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 663, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 297, 445, 336, 387, 310, 312, 653,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 320, 424, 321, 355, 322, 298, 328, 326,
	329, 432, 330, 300, 410, 453, 0, 350, 420, 382,
	301, 381, 411, 452, 451, 311, 479, 485, 486, 575,
	0, 491, 664, 665, 666, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 505, 506,
	507, 509, 510, 511, 512, 576, 593, 560, 530, 493,
	584, 527, 531, 532, 360, 596, 0, 0, 0, 484,
	370, 371, 0, 342, 341, 383, 302, 348, 294, 295,
	659, 332, 402, 598, 631, 632, 523, 0, 585, 524,
	533, 325, 557, 569, 568, 398, 483, 0, 580, 583,
	513, 658, 0, 577, 592, 662, 591, 655, 408, 0,
	429, 589, 536, 0, 581, 555, 0, 582, 551, 586,
	0, 525, 0, 437, 465, 477, 494, 497, 526, 611,
	612, 613, 299, 496, 615, 616, 617, 618, 619, 620,
	621, 614, 468, 558, 535, 561, 476, 538, 537, 0,
	0, 572, 492, 573, 574, 392, 393, 394, 395, 352,
	599, 318, 495, 418, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 565, 562, 667, 0, 622,
	623, 0, 0, 489, 490, 347, 354, 508, 356, 317,
	407, 349, 474, 364, 0, 501, 566, 502, 625, 628,
	626, 627, 399, 359, 361, 433, 365, 375, 421, 473,
	405, 426, 315, 464, 435, 380, 552, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 606, 605, 604, 603, 602,
	601, 600, 0, 0, 549, 450, 327, 288, 323, 324,
	331, 656, 652, 455, 657, 0, 296, 529, 373, 0,
	417, 346, 594, 595, 0, 646, 244, 245, 246, 247,
	248, 249, 250, 251, 289, 252, 253, 254, 255, 256,
	257, 258, 261, 262, 263, 264, 265, 266, 267, 268,
	597, 259, 260, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 282, 0, 0, 0,
	290, 291, 292, 293, 0, 0, 284, 285, 286, 287,
	0, 0, 0, 480, 481, 482, 504, 0, 466, 528,
	654, 0, 0, 0, 0, 0, 0, 0, 578, 590,
	624, 0, 634, 635, 637, 639, 638, 641, 440, 441,
	648, 0, 643, 644, 645, 642, 377, 427, 446, 434,
	0, 660, 519, 520, 661, 630, 404, 0, 0, 534,
	567, 556, 640, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 372, 571, 553,
	563, 554, 539, 540, 541, 548, 351, 542, 543, 544,
	514, 545, 515, 546, 547, 0, 570, 521, 436, 388,
	588, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 230, 0, 0, 1562, 0, 0, 0, 313,
	231, 516, 636, 518, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 303, 443, 462, 314,
	431, 475, 319, 439, 454, 309, 403, 428, 0, 0,
	305, 460, 438, 385, 362, 363, 304, 0, 422, 337,
	353, 334, 401, 0, 459, 487, 333, 478, 0, 470,
	307, 0, 469, 400, 456, 461, 386, 379, 0, 306,
	458, 384, 378, 366, 343, 503, 367, 368, 357, 412,
	376, 413, 358, 390, 389, 391, 0, 0, 0, 0,
	0, 498, 499, 0, 0, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 629, 0, 0,
	633, 0, 472, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 369, 0, 0, 0, 488, 0, 425, 406,
	663, 0, 0, 423, 374, 457, 414, 463, 444, 471,
	419, 415, 297, 445, 336, 387, 310, 312, 653, 338,
	340, 344, 345, 396, 397, 409, 430, 447, 448, 449,
	335, 320, 424, 321, 355, 322, 298, 328, 326, 329,
	432, 330, 300, 410, 453, 0, 350, 420, 382, 301,
	381, 411, 452, 451, 311, 479, 485, 486, 575, 0,
	491, 664, 665, 666, 500, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 302, 348, 294, 295, 659,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	325, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	658, 0, 577, 592, 662, 591, 655, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 299, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	318, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 667, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 317, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 315, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 327, 288, 323, 324, 331,
	656, 652, 455, 657, 0, 296, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 244, 245, 246, 247, 248,
	249, 250, 251, 289, 252, 253, 254, 255, 256, 257,
	258, 261, 262, 263, 264, 265, 266, 267, 268, 597,
	259, 260, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 0, 0, 0, 290,
	291, 292, 293, 0, 0, 284, 285, 286, 287, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 654,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	660, 519, 520, 661, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 2545, 0, 0, 0, 313, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 443, 462, 314, 431,
	475, 319, 439, 454, 309, 403, 428, 0, 0, 305,
	460, 438, 385, 362, 363, 304, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 307,
	0, 469, 400, 456, 461, 386, 379, 0, 306, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 663,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 297, 445, 336, 387, 310, 312, 653, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	320, 424, 321, 355, 322, 298, 328, 326, 329, 432,
	330, 300, 410, 453, 0, 350, 420, 382, 301, 381,
	411, 452, 451, 311, 479, 485, 486, 575, 0, 491,
	664, 665, 666, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 505, 506, 507, 509,
	510, 511, 512, 576, 593, 560, 530, 493, 584, 527,
	531, 532, 360, 596, 0, 0, 0, 484, 370, 371,
	0, 342, 341, 383, 302, 348, 294, 295, 659, 332,
	402, 598, 631, 632, 523, 0, 585, 524, 533, 325,
	557, 569, 568, 398, 483, 0, 580, 583, 513, 658,
	0, 577, 592, 662, 591, 655, 408, 0, 429, 589,
	536, 0, 581, 555, 0, 582, 551, 586, 0, 525,
	0, 437, 465, 477, 494, 497, 526, 611, 612, 613,
	299, 496, 615, 616, 617, 618, 619, 620, 621, 614,
	468, 558, 535, 561, 476, 538, 537, 0, 0, 572,
	492, 573, 574, 392, 393, 394, 395, 352, 599, 318,
	495, 418, 0, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 565, 562, 667, 0, 622, 623, 0,
	0, 489, 490, 347, 354, 508, 356, 317, 407, 349,
	474, 364, 0, 501, 566, 502, 625, 628, 626, 627,
	399, 359, 361, 433, 365, 375, 421, 473, 405, 426,
	315, 464, 435, 380, 552, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 606, 605, 604, 603, 602, 601, 600,
	0, 0, 549, 450, 327, 288, 323, 324, 331, 656,
	652, 455, 657, 0, 296, 529, 373, 0, 417, 346,
	594, 595, 0, 646, 244, 245, 246, 247, 248, 249,
	250, 251, 289, 252, 253, 254, 255, 256, 257, 258,
	261, 262, 263, 264, 265, 266, 267, 268, 597, 259,
	260, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 0, 0, 0, 290, 291,
	292, 293, 0, 0, 284, 285, 286, 287, 0, 0,
	0, 480, 481, 482, 504, 0, 466, 528, 654, 0,
	0, 0, 0, 0, 0, 0, 578, 590, 624, 0,
	634, 635, 637, 639, 638, 641, 440, 441, 648, 0,
	643, 644, 645, 642, 377, 427, 446, 434, 0, 660,
	519, 520, 661, 630, 404, 0, 0, 534, 567, 556,
	640, 522, 0, 0, 2923, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 372, 571, 553, 563, 554,
	539, 540, 541, 548, 351, 542, 543, 544, 514, 545,
	515, 546, 547, 0, 570, 521, 436, 388, 588, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	230, 0, 0, 0, 0, 0, 0, 313, 231, 516,
	636, 518, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 443, 462, 314, 431, 475,
	319, 439, 454, 309, 403, 428, 0, 0, 305, 460,
	438, 385, 362, 363, 304, 0, 422, 337, 353, 334,
	401, 0, 459, 487, 333, 478, 0, 470, 307, 0,
	469, 400, 456, 461, 386, 379, 0, 306, 458, 384,
	378, 366, 343, 503, 367, 368, 357, 412, 376, 413,
	358, 390, 389, 391, 0, 0, 0, 0, 0, 498,
	499, 0, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 0, 0, 633, 0,
	472, 0, 0, 0, 0, 0, 0, 442, 0, 0,
	369, 0, 0, 0, 488, 0, 425, 406, 663, 0,
	0, 423, 374, 457, 414, 463, 444, 471, 419, 415,
	297, 445, 336, 387, 310, 312, 653, 338, 340, 344,
	345, 396, 397, 409, 430, 447, 448, 449, 335, 320,
	424, 321, 355, 322, 298, 328, 326, 329, 432, 330,
	300, 410, 453, 0, 350, 420, 382, 301, 381, 411,
	452, 451, 311, 479, 485, 486, 575, 0, 491, 664,
	665, 666, 500, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 302, 348, 294, 295, 659, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 325, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 658, 0,
	577, 592, 662, 591, 655, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 299,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 318, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 667, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 317, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 315,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 327, 288, 323, 324, 331, 656, 652,
	455, 657, 0, 296, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 244, 245, 246, 247, 248, 249, 250,
	251, 289, 252, 253, 254, 255, 256, 257, 258, 261,
	262, 263, 264, 265, 266, 267, 268, 597, 259, 260,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 0, 0, 0, 290, 291, 292,
	293, 0, 0, 284, 285, 286, 287, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 654, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 660, 519,
	520, 661, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 313, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 303, 443, 462, 314, 431, 475, 319,
	439, 454, 309, 403, 428, 0, 0, 305, 460, 438,
	385, 362, 363, 304, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 307, 0, 469,
	400, 456, 461, 386, 379, 0, 306, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 0, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 663, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 297,
	445, 336, 387, 310, 312, 653, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 320, 424,
	321, 355, 322, 298, 328, 326, 329, 432, 330, 300,
	410, 453, 0, 350, 420, 382, 301, 381, 411, 452,
	451, 311, 479, 485, 486, 575, 0, 491, 664, 665,
	666, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 505, 506, 507, 509, 510, 511,
	512, 576, 593, 560, 530, 493, 584, 527, 531, 532,
	360, 596, 0, 0, 0, 484, 370, 371, 0, 342,
	341, 383, 302, 348, 294, 295, 659, 332, 402, 598,
	631, 632, 523, 0, 585, 524, 533, 325, 557, 569,
	568, 398, 483, 0, 580, 583, 513, 658, 0, 577,
	592, 662, 591, 655, 408, 0, 429, 589, 536, 0,
	581, 555, 0, 582, 551, 586, 0, 525, 0, 437,
	465, 477, 494, 497, 526, 611, 612, 613, 299, 496,
	615, 616, 617, 618, 619, 620, 621, 614, 468, 558,
	535, 561, 476, 538, 537, 0, 0, 572, 492, 573,
	574, 392, 393, 394, 395, 352, 599, 318, 495, 418,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 565, 562, 667, 0, 622, 623, 0, 0, 489,
	490, 347, 354, 508, 356, 317, 407, 349, 474, 364,
	0, 501, 566, 502, 625, 628, 626, 627, 399, 359,
	361, 433, 365, 375, 421, 473, 405, 426, 315, 464,
	435, 380, 552, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 606, 605, 604, 603, 602, 601, 600, 0, 0,
	549, 450, 327, 288, 323, 324, 331, 656, 652, 455,
	657, 0, 296, 529, 373, 0, 417, 346, 594, 595,
	0, 646, 244, 245, 246, 247, 248, 249, 250, 251,
	289, 252, 253, 254, 255, 256, 257, 258, 261, 262,
	263, 264, 265, 266, 267, 268, 597, 259, 260, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 0, 0, 0, 290, 291, 292, 293,
	0, 0, 284, 285, 286, 287, 0, 0, 0, 480,
	481, 482, 504, 0, 466, 528, 654, 0, 0, 0,
	0, 0, 0, 0, 578, 590, 624, 0, 634, 635,
	637, 639, 638, 641, 440, 441, 648, 0, 643, 644,
	645, 642, 377, 427, 446, 434, 0, 660, 519, 520,
	661, 630, 404, 0, 0, 534, 567, 556, 640, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 372, 571, 553, 563, 554, 539, 540,
	541, 548, 351, 542, 543, 544, 514, 545, 515, 546,
	547, 0, 570, 521, 436, 388, 588, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	0, 2663, 0, 0, 0, 313, 231, 516, 636, 518,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 443, 462, 314, 431, 475, 319, 439,
	454, 309, 403, 428, 0, 0, 305, 460, 438, 385,
	362, 363, 304, 0, 422, 337, 353, 334, 401, 0,
	459, 487, 333, 478, 0, 470, 307, 0, 469, 400,
	456, 461, 386, 379, 0, 306, 458, 384, 378, 366,
	343, 503, 367, 368, 357, 412, 376, 413, 358, 390,
	389, 391, 0, 0, 0, 0, 0, 498, 499, 0,
	0, 647, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 629, 0, 0, 633, 0, 472, 0,
	0, 0, 0, 0, 0, 442, 0, 0, 369, 0,
	0, 0, 488, 0, 425, 406, 663, 0, 0, 423,
	374, 457, 414, 463, 444, 471, 419, 415, 297, 445,
	336, 387, 310, 312, 653, 338, 340, 344, 345, 396,
	397, 409, 430, 447, 448, 449, 335, 320, 424, 321,
	355, 322, 298, 328, 326, 329, 432, 330, 300, 410,
	453, 0, 350, 420, 382, 301, 381, 411, 452, 451,
	311, 479, 485, 486, 575, 0, 491, 664, 665, 666,
	500, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 302, 348, 294, 295, 659, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 325, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 658, 0, 577, 592,
	662, 591, 655, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 299, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 318, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 667, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 317, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 315, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 0, 0, 549,
	450, 327, 288, 323, 324, 331, 656, 652, 455, 657,
	0, 296, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 244, 245, 246, 247, 248, 249, 250, 251, 289,
	252, 253, 254, 255, 256, 257, 258, 261, 262, 263,
	264, 265, 266, 267, 268, 597, 259, 260, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
	281, 282, 0, 0, 0, 290, 291, 292, 293, 0,
	0, 284, 285, 286, 287, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 654, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 660, 519, 520, 661,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 313, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2625, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 443, 462, 314, 431, 475, 319, 439, 454,
	309, 403, 428, 0, 0, 305, 460, 438, 385, 362,
	363, 304, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 307, 0, 469, 400, 456,
	461, 386, 379, 0, 306, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 663, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 297, 445, 336,
	387, 310, 312, 653, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 320, 424, 321, 355,
	322, 298, 328, 326, 329, 432, 330, 300, 410, 453,
	0, 350, 420, 382, 301, 381, 411, 452, 451, 311,
	479, 485, 486, 575, 0, 491, 664, 665, 666, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 505, 506, 507, 509, 510, 511, 512, 576,
	593, 560, 530, 493, 584, 527, 531, 532, 360, 596,
	0, 0, 0, 484, 370, 371, 0, 342, 341, 383,
	302, 348, 294, 295, 659, 332, 402, 598, 631, 632,
	523, 0, 585, 524, 533, 325, 557, 569, 568, 398,
	483, 0, 580, 583, 513, 658, 0, 577, 592, 662,
	591, 655, 408, 0, 429, 589, 536, 0, 581, 555,
	0, 582, 551, 586, 0, 525, 0, 437, 465, 477,
	494, 497, 526, 611, 612, 613, 299, 496, 615, 616,
	617, 618, 619, 620, 621, 614, 468, 558, 535, 561,
	476, 538, 537, 0, 0, 572, 492, 573, 574, 392,
	393, 394, 395, 352, 599, 318, 495, 418, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	562, 667, 0, 622, 623, 0, 0, 489, 490, 347,
	354, 508, 356, 317, 407, 349, 474, 364, 0, 501,
	566, 502, 625, 628, 626, 627, 399, 359, 361, 433,
	365, 375, 421, 473, 405, 426, 315, 464, 435, 380,
	552, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 606,
	605, 604, 603, 602, 601, 600, 0, 0, 549, 450,
	327, 288, 323, 324, 331, 656, 652, 455, 657, 0,
	296, 529, 373, 0, 417, 346, 594, 595, 0, 646,
	244, 245, 246, 247, 248, 249, 250, 251, 289, 252,
	253, 254, 255, 256, 257, 258, 261, 262, 263, 264,
	265, 266, 267, 268, 597, 259, 260, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	282, 0, 0, 0, 290, 291, 292, 293, 0, 0,
	284, 285, 286, 287, 0, 0, 0, 480, 481, 482,
	504, 0, 466, 528, 654, 0, 0, 0, 0, 0,
	0, 0, 578, 590, 624, 0, 634, 635, 637, 639,
	638, 641, 440, 441, 648, 0, 643, 644, 645, 642,
	377, 427, 446, 434, 0, 660, 519, 520, 661, 630,
	404, 0, 0, 534, 567, 556, 640, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 372, 571, 553, 563, 554, 539, 540, 541, 548,
	351, 542, 543, 544, 514, 545, 515, 546, 547, 0,
	570, 521, 436, 388, 588, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 230, 0, 0, 2623,
	0, 0, 0, 313, 231, 516, 636, 518, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	303, 443, 462, 314, 431, 475, 319, 439, 454, 309,
	403, 428, 0, 0, 305, 460, 438, 385, 362, 363,
	304, 0, 422, 337, 353, 334, 401, 0, 459, 487,
	333, 478, 0, 470, 307, 0, 469, 400, 456, 461,
	386, 379, 0, 306, 458, 384, 378, 366, 343, 503,
	367, 368, 357, 412, 376, 413, 358, 390, 389, 391,
	0, 0, 0, 0, 0, 498, 499, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 633, 0, 472, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 369, 0, 0, 0,
	488, 0, 425, 406, 663, 0, 0, 423, 374, 457,
	414, 463, 444, 471, 419, 415, 297, 445, 336, 387,
	310, 312, 653, 338, 340, 344, 345, 396, 397, 409,
	430, 447, 448, 449, 335, 320, 424, 321, 355, 322,
	298, 328, 326, 329, 432, 330, 300, 410, 453, 0,
	350, 420, 382, 301, 381, 411, 452, 451, 311, 479,
	485, 486, 575, 0, 491, 664, 665, 666, 500, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 302,
	348, 294, 295, 659, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 325, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 658, 0, 577, 592, 662, 591,
	655, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 299, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 318, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	667, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 317, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 315, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 327,
	288, 323, 324, 331, 656, 652, 455, 657, 0, 296,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 244,
	245, 246, 247, 248, 249, 250, 251, 289, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 265,
	266, 267, 268, 597, 259, 260, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	0, 0, 0, 290, 291, 292, 293, 0, 0, 284,
	285, 286, 287, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 654, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 2392, 660, 519, 520, 661, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 313, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 303,
	443, 462, 314, 431, 475, 319, 439, 454, 309, 403,
	428, 0, 0, 305, 460, 438, 385, 362, 363, 304,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 307, 0, 469, 400, 456, 461, 386,
	379, 0, 306, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 663, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 297, 445, 336, 387, 310,
	312, 653, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 320, 424, 321, 355, 322, 298,
	328, 326, 329, 432, 330, 300, 410, 453, 0, 350,
	420, 382, 301, 381, 411, 452, 451, 311, 479, 485,
	486, 575, 0, 491, 664, 665, 666, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 509, 510, 511, 512, 576, 593, 560,
	530, 493, 584, 527, 531, 532, 360, 596, 0, 0,
	0, 484, 370, 371, 0, 342, 341, 383, 302, 348,
	294, 295, 659, 332, 402, 598, 631, 632, 523, 0,
	585, 524, 533, 325, 557, 569, 568, 398, 483, 0,
	580, 583, 513, 658, 0, 577, 592, 662, 591, 655,
	408, 0, 429, 589, 536, 0, 581, 555, 0, 582,
	551, 586, 0, 525, 0, 437, 465, 477, 494, 497,
	526, 611, 612, 613, 299, 496, 615, 616, 617, 618,
	619, 620, 621, 614, 468, 558, 535, 561, 476, 538,
	537, 0, 0, 572, 492, 573, 574, 392, 393, 394,
	395, 352, 599, 318, 495, 418, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 562, 667,
	0, 622, 623, 0, 0, 489, 490, 347, 354, 508,
	356, 317, 407, 349, 474, 364, 0, 501, 566, 502,
	625, 628, 626, 627, 399, 359, 361, 433, 365, 375,
	421, 473, 405, 426, 315, 464, 435, 380, 552, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 606, 605, 604,
	603, 602, 601, 600, 0, 0, 549, 450, 327, 288,
	323, 324, 331, 656, 652, 455, 657, 0, 296, 529,
	373, 0, 417, 346, 594, 595, 0, 646, 244, 245,
	246, 247, 248, 249, 250, 251, 289, 252, 253, 254,
	255, 256, 257, 258, 261, 262, 263, 264, 265, 266,
	267, 268, 597, 259, 260, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 0,
	0, 0, 290, 291, 292, 293, 0, 0, 284, 285,
	286, 287, 0, 0, 0, 480, 481, 482, 504, 0,
	466, 528, 654, 0, 0, 0, 0, 0, 0, 0,
	578, 590, 624, 0, 634, 635, 637, 639, 638, 641,
	440, 441, 648, 0, 643, 644, 645, 642, 377, 427,
	446, 434, 0, 660, 519, 520, 661, 630, 404, 0,
	0, 534, 567, 556, 640, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 372,
	571, 553, 563, 554, 539, 540, 541, 548, 351, 542,
	543, 544, 514, 545, 515, 546, 547, 0, 570, 521,
	436, 388, 588, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 230, 0, 0, 0, 1933, 0,
	0, 313, 231, 516, 636, 518, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 303, 443,
	462, 314, 431, 475, 319, 439, 454, 309, 403, 428,
	0, 0, 305, 460, 438, 385, 362, 363, 304, 0,
	422, 337, 353, 334, 401, 0, 459, 487, 333, 478,
	0, 470, 307, 0, 469, 400, 456, 461, 386, 379,
	0, 306, 458, 384, 378, 366, 343, 503, 367, 368,
	357, 412, 376, 413, 358, 390, 389, 391, 0, 0,
	0, 0, 0, 498, 499, 0, 0, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	0, 0, 633, 0, 472, 0, 0, 0, 0, 0,
	0, 442, 0, 0, 369, 0, 0, 0, 488, 0,
	425, 406, 663, 0, 0, 423, 374, 457, 414, 463,
	444, 471, 419, 415, 297, 445, 336, 387, 310, 312,
	653, 338, 340, 344, 345, 396, 397, 409, 430, 447,
	448, 449, 335, 320, 424, 321, 355, 322, 298, 328,
	326, 329, 432, 330, 300, 410, 453, 0, 350, 420,
	382, 301, 381, 411, 452, 451, 311, 479, 485, 486,
	575, 0, 491, 664, 665, 666, 500, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 302, 348, 294,
	295, 659, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 325, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 658, 0, 577, 592, 662, 591, 655, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 299, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 318, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 667, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	317, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 315, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 327, 288, 323,
	324, 331, 656, 652, 455, 657, 0, 296, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 244, 245, 246,
	247, 248, 249, 250, 251, 289, 252, 253, 254, 255,
	256, 257, 258, 261, 262, 263, 264, 265, 266, 267,
	268, 597, 259, 260, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 0, 0,
	0, 290, 291, 292, 293, 0, 0, 284, 285, 286,
	287, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 654, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 660, 519, 520, 661, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 2064, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	313, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 303, 443, 462,
	314, 431, 475, 319, 439, 454, 309, 403, 428, 0,
	0, 305, 460, 438, 385, 362, 363, 304, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 307, 0, 469, 400, 456, 461, 386, 379, 0,
	306, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 663, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 297, 445, 336, 387, 310, 312, 653,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 320, 424, 321, 355, 322, 298, 328, 326,
	329, 432, 330, 300, 410, 453, 0, 350, 420, 382,
	301, 381, 411, 452, 451, 311, 479, 485, 486, 575,
	0, 491, 664, 665, 666, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 505, 506,
	507, 509, 510, 511, 512, 576, 593, 560, 530, 493,
	584, 527, 531, 532, 360, 596, 0, 0, 0, 484,
	370, 371, 0, 342, 341, 383, 302, 348, 294, 295,
	659, 332, 402, 598, 631, 632, 523, 0, 585, 524,
	533, 325, 557, 569, 568, 398, 483, 0, 580, 583,
	513, 658, 0, 577, 592, 662, 591, 655, 408, 0,
	429, 589, 536, 0, 581, 555, 0, 582, 551, 586,
	0, 525, 0, 437, 465, 477, 494, 497, 526, 611,
	612, 613, 299, 496, 615, 616, 617, 618, 619, 620,
	621, 614, 468, 558, 535, 561, 476, 538, 537, 0,
	0, 572, 492, 573, 574, 392, 393, 394, 395, 352,
	599, 318, 495, 418, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 565, 562, 667, 0, 622,
	623, 0, 0, 489, 490, 347, 354, 508, 356, 317,
	407, 349, 474, 364, 0, 501, 566, 502, 625, 628,
	626, 627, 399, 359, 361, 433, 365, 375, 421, 473,
	405, 426, 315, 464, 435, 380, 552, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 606, 605, 604, 603, 602,
	601, 600, 0, 0, 549, 450, 327, 288, 323, 324,
	331, 656, 652, 455, 657, 0, 296, 529, 373, 0,
	417, 346, 594, 595, 0, 646, 244, 245, 246, 247,
	248, 249, 250, 251, 289, 252, 253, 254, 255, 256,
	257, 258, 261, 262, 263, 264, 265, 266, 267, 268,
	597, 259, 260, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 282, 0, 0, 0,
	290, 291, 292, 293, 0, 0, 284, 285, 286, 287,
	0, 0, 0, 480, 481, 482, 504, 0, 466, 528,
	654, 0, 0, 0, 0, 0, 0, 0, 578, 590,
	624, 0, 634, 635, 637, 639, 638, 641, 440, 441,
	648, 0, 643, 644, 645, 642, 377, 427, 446, 434,
	0, 660, 519, 520, 661, 630, 404, 0, 0, 534,
	567, 556, 640, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 372, 571, 553,
	563, 554, 539, 540, 541, 548, 351, 542, 543, 544,
	514, 545, 515, 546, 547, 0, 570, 521, 436, 388,
	588, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 230, 0, 0, 1562, 0, 0, 0, 313,
	231, 516, 636, 518, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 303, 443, 462, 314,
	431, 475, 319, 439, 454, 309, 403, 428, 0, 0,
	305, 460, 438, 385, 362, 363, 304, 0, 422, 337,
	353, 334, 401, 0, 459, 487, 333, 478, 0, 470,
	307, 0, 469, 400, 456, 461, 386, 379, 0, 306,
	458, 384, 378, 366, 343, 503, 367, 368, 357, 412,
	376, 413, 358, 390, 389, 391, 0, 0, 0, 0,
	0, 498, 499, 0, 0, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 629, 0, 0,
	633, 0, 472, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 369, 0, 0, 0, 488, 0, 425, 406,
	663, 0, 0, 423, 374, 457, 414, 463, 444, 471,
	1969, 415, 297, 445, 336, 387, 310, 312, 653, 338,
	340, 344, 345, 396, 397, 409, 430, 447, 448, 449,
	335, 320, 424, 321, 355, 322, 298, 328, 326, 329,
	432, 330, 300, 410, 453, 0, 350, 420, 382, 301,
	381, 411, 452, 451, 311, 479, 485, 486, 575, 0,
	491, 664, 665, 666, 500, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 302, 348, 294, 295, 659,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	325, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	658, 0, 577, 592, 662, 591, 655, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 299, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	318, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 667, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 317, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 315, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 327, 288, 323, 324, 331,
	656, 652, 455, 657, 0, 296, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 244, 245, 246, 247, 248,
	249, 250, 251, 289, 252, 253, 254, 255, 256, 257,
	258, 261, 262, 263, 264, 265, 266, 267, 268, 597,
	259, 260, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 0, 0, 0, 290,
	291, 292, 293, 0, 0, 284, 285, 286, 287, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 654,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	660, 519, 520, 661, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 313, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 443, 462, 314, 431,
	475, 319, 439, 454, 309, 403, 428, 0, 0, 305,
	460, 438, 385, 362, 363, 304, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 307,
	0, 469, 400, 456, 461, 386, 379, 0, 306, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 1591, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 663,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 297, 445, 336, 387, 310, 312, 653, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	320, 424, 321, 355, 322, 298, 328, 326, 329, 432,
	330, 300, 410, 453, 0, 350, 420, 382, 301, 381,
	411, 452, 451, 311, 479, 485, 486, 575, 0, 491,
	664, 665, 666, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 505, 506, 507, 509,
	510, 511, 512, 576, 593, 560, 530, 493, 584, 527,
	531, 532, 360, 596, 0, 0, 0, 484, 370, 371,
	0, 342, 341, 383, 302, 348, 294, 295, 659, 332,
	402, 598, 631, 632, 523, 0, 585, 524, 533, 325,
	557, 569, 568, 398, 483, 0, 580, 583, 513, 658,
	0, 577, 592, 662, 591, 655, 408, 0, 429, 589,
	536, 0, 581, 555, 0, 582, 551, 586, 0, 525,
	0, 437, 465, 477, 494, 497, 526, 611, 612, 613,
	299, 496, 615, 616, 617, 618, 619, 620, 621, 614,
	468, 558, 535, 561, 476, 538, 537, 0, 0, 572,
	492, 573, 574, 392, 393, 394, 395, 352, 599, 318,
	495, 418, 0, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 565, 562, 667, 0, 622, 623, 0,
	0, 489, 490, 347, 354, 508, 356, 317, 407, 349,
	474, 364, 0, 501, 566, 502, 625, 628, 626, 627,
	399, 359, 361, 433, 365, 375, 421, 473, 405, 426,
	315, 464, 435, 380, 552, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 606, 605, 604, 603, 602, 601, 600,
	0, 0, 549, 450, 327, 288, 323, 324, 331, 656,
	652, 455, 657, 0, 296, 529, 373, 0, 417, 346,
	594, 595, 0, 646, 244, 245, 246, 247, 248, 249,
	250, 251, 289, 252, 253, 254, 255, 256, 257, 258,
	261, 262, 263, 264, 265, 266, 267, 268, 597, 259,
	260, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 0, 0, 0, 290, 291,
	292, 293, 0, 0, 284, 285, 286, 287, 0, 0,
	0, 480, 481, 482, 504, 0, 466, 528, 654, 0,
	0, 0, 0, 0, 0, 0, 578, 590, 624, 0,
	634, 635, 637, 639, 638, 641, 440, 441, 648, 0,
	643, 644, 645, 642, 377, 427, 446, 434, 0, 660,
	519, 520, 661, 630, 404, 0, 0, 534, 567, 556,
	640, 522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 674, 339, 0, 0, 372, 571, 553, 563, 554,
	539, 540, 541, 548, 351, 542, 543, 544, 514, 545,
	515, 546, 547, 0, 570, 521, 436, 388, 588, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	230, 0, 0, 0, 0, 0, 0, 313, 231, 516,
	636, 518, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 443, 462, 314, 431, 475,
	319, 439, 454, 309, 403, 428, 0, 0, 305, 460,
	438, 385, 362, 363, 304, 0, 422, 337, 353, 334,
	401, 0, 459, 487, 333, 478, 0, 470, 307, 0,
	469, 400, 456, 461, 386, 379, 0, 306, 458, 384,
	378, 366, 343, 503, 367, 368, 357, 412, 376, 413,
	358, 390, 389, 391, 0, 0, 0, 0, 0, 498,
	499, 0, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 0, 0, 633, 0,
	472, 0, 0, 0, 0, 0, 0, 442, 0, 0,
	369, 0, 0, 0, 488, 0, 425, 406, 663, 0,
	0, 423, 374, 457, 414, 463, 444, 471, 419, 415,
	297, 445, 336, 387, 310, 312, 653, 338, 340, 344,
	345, 396, 397, 409, 430, 447, 448, 449, 335, 320,
	424, 321, 355, 322, 298, 328, 326, 329, 432, 330,
	300, 410, 453, 0, 350, 420, 382, 301, 381, 411,
	452, 451, 311, 479, 485, 486, 575, 0, 491, 664,
	665, 666, 500, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 302, 348, 294, 295, 659, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 325, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 658, 0,
	577, 592, 662, 591, 655, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 299,
	496, 615, 616, 617, 618, 619, 620, 621, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 318, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 667, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 317, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 315,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 327, 288, 323, 324, 331, 656, 652,
	455, 657, 0, 296, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 244, 245, 246, 247, 248, 249, 250,
	251, 289, 252, 253, 254, 255, 256, 257, 258, 261,
	262, 263, 264, 265, 266, 267, 268, 597, 259, 260,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 0, 0, 0, 290, 291, 292,
	293, 0, 0, 284, 285, 286, 287, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 654, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 0, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 660, 519,
	520, 661, 630, 404, 0, 0, 534, 567, 556, 640,
	522, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 372, 571, 553, 563, 554, 539,
	540, 541, 548, 351, 542, 543, 544, 514, 545, 515,
	546, 547, 0, 570, 521, 436, 388, 588, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 230,
	0, 0, 0, 0, 0, 0, 313, 231, 516, 636,
	518, 517, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 303, 443, 462, 314, 431, 475, 319,
	439, 454, 309, 403, 428, 0, 0, 305, 460, 438,
	385, 362, 363, 304, 0, 422, 337, 353, 334, 401,
	0, 459, 487, 333, 478, 0, 470, 307, 0, 469,
	400, 456, 461, 386, 379, 0, 306, 458, 384, 378,
	366, 343, 503, 367, 368, 357, 412, 376, 413, 358,
	390, 389, 391, 0, 0, 0, 0, 0, 498, 499,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 629, 0, 684, 633, 0, 472,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 369,
	0, 0, 0, 488, 0, 425, 406, 663, 0, 0,
	423, 374, 457, 414, 463, 444, 471, 419, 415, 297,
	445, 336, 387, 310, 312, 653, 338, 340, 344, 345,
	396, 397, 409, 430, 447, 448, 449, 335, 320, 424,
	321, 355, 322, 298, 328, 326, 329, 432, 330, 300,
	410, 453, 0, 350, 420, 382, 301, 381, 411, 452,
	451, 311, 479, 485, 486, 575, 0, 491, 664, 665,
	666, 500, 0, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 505, 506, 507, 509, 510, 511,
	512, 576, 593, 560, 530, 493, 584, 527, 531, 532,
	360, 596, 0, 0, 0, 484, 370, 371, 0, 342,
	341, 383, 302, 348, 294, 295, 659, 332, 402, 598,
	631, 632, 523, 0, 585, 524, 533, 325, 557, 569,
	568, 398, 483, 0, 580, 583, 513, 658, 0, 577,
	592, 662, 591, 655, 408, 0, 429, 589, 536, 0,
	581, 555, 0, 582, 551, 586, 0, 525, 0, 437,
	465, 477, 494, 497, 526, 611, 612, 613, 299, 496,
	615, 616, 617, 618, 619, 620, 621, 614, 468, 558,
	535, 561, 476, 538, 537, 0, 0, 572, 492, 573,
	574, 392, 393, 394, 395, 352, 599, 318, 495, 418,
	0, 559, 0, 0, 0, 0, 0, 0, 0, 0,
	564, 565, 562, 667, 0, 622, 623, 0, 0, 489,
	490, 347, 354, 508, 356, 317, 407, 349, 474, 364,
	0, 501, 566, 502, 625, 628, 626, 627, 399, 359,
	361, 433, 365, 375, 421, 473, 405, 426, 315, 464,
	435, 380, 552, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 606, 605, 604, 603, 602, 601, 600, 0, 0,
	549, 450, 327, 288, 323, 324, 331, 656, 652, 455,
	657, 0, 296, 529, 373, 0, 417, 346, 594, 595,
	0, 646, 244, 245, 246, 247, 248, 249, 250, 251,
	289, 252, 253, 254, 255, 256, 257, 258, 261, 262,
	263, 264, 265, 266, 267, 268, 597, 259, 260, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 0, 0, 0, 290, 291, 292, 293,
	0, 0, 284, 285, 286, 287, 0, 0, 0, 480,
	481, 482, 504, 0, 466, 528, 654, 0, 0, 0,
	0, 0, 0, 0, 578, 590, 624, 0, 634, 635,
	637, 639, 638, 641, 440, 441, 648, 0, 643, 644,
	645, 642, 377, 427, 446, 434, 0, 660, 519, 520,
	661, 630, 404, 0, 0, 534, 567, 556, 640, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 372, 571, 553, 563, 554, 539, 540,
	541, 548, 351, 542, 543, 544, 514, 545, 515, 546,
	547, 0, 570, 521, 436, 388, 588, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	0, 0, 0, 0, 0, 313, 231, 516, 636, 518,
	517, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 303, 443, 462, 314, 431, 475, 319, 439,
	454, 309, 403, 428, 0, 0, 305, 460, 438, 385,
	362, 363, 304, 0, 422, 337, 353, 334, 401, 0,
	459, 487, 333, 478, 0, 470, 307, 0, 469, 400,
	456, 461, 386, 379, 0, 306, 458, 384, 378, 366,
	343, 503, 367, 368, 357, 412, 376, 413, 358, 390,
	389, 391, 0, 0, 0, 0, 0, 498, 499, 0,
	0, 647, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 629, 0, 0, 633, 0, 472, 0,
	0, 0, 0, 0, 0, 442, 0, 0, 369, 0,
	0, 0, 488, 0, 425, 406, 663, 0, 0, 423,
	374, 457, 414, 463, 444, 471, 419, 415, 297, 445,
	336, 387, 310, 312, 653, 338, 340, 344, 345, 396,
	397, 409, 430, 447, 448, 449, 335, 320, 424, 321,
	355, 322, 298, 328, 326, 329, 432, 330, 300, 410,
	453, 0, 350, 420, 382, 301, 381, 411, 452, 451,
	311, 479, 485, 486, 575, 0, 491, 664, 665, 666,
	500, 0, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 505, 506, 507, 509, 510, 511, 512,
	576, 593, 560, 530, 493, 584, 527, 531, 532, 360,
	596, 0, 0, 0, 484, 370, 371, 0, 342, 341,
	383, 302, 348, 294, 295, 659, 332, 402, 598, 631,
	632, 523, 0, 585, 524, 533, 325, 557, 569, 568,
	398, 483, 0, 580, 583, 513, 658, 0, 577, 592,
	662, 591, 655, 408, 0, 429, 589, 536, 0, 581,
	555, 0, 582, 551, 586, 0, 525, 0, 437, 465,
	477, 494, 497, 526, 611, 612, 613, 299, 496, 615,
	616, 617, 618, 619, 620, 621, 614, 468, 558, 535,
	561, 476, 538, 537, 0, 0, 572, 492, 573, 574,
	392, 393, 394, 395, 352, 599, 318, 495, 418, 0,
	559, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	565, 562, 667, 0, 622, 623, 0, 0, 489, 490,
	347, 354, 508, 356, 317, 407, 349, 474, 364, 0,
	501, 566, 502, 625, 628, 626, 627, 399, 359, 361,
	433, 365, 375, 421, 473, 405, 426, 315, 464, 435,
	380, 552, 579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 607,
	606, 605, 604, 603, 602, 601, 600, 983, 0, 549,
	450, 327, 288, 323, 324, 331, 656, 652, 455, 657,
	0, 296, 529, 373, 0, 417, 346, 594, 595, 0,
	646, 244, 245, 246, 247, 248, 249, 250, 251, 289,
	252, 253, 254, 255, 256, 257, 258, 261, 262, 263,
	264, 265, 266, 267, 268, 597, 259, 260, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
	281, 282, 0, 0, 0, 290, 291, 292, 293, 0,
	0, 284, 285, 286, 287, 0, 0, 0, 480, 481,
	482, 504, 0, 466, 528, 654, 0, 0, 0, 0,
	0, 0, 0, 578, 590, 624, 0, 634, 635, 637,
	639, 638, 641, 440, 441, 648, 0, 643, 644, 645,
	642, 377, 427, 446, 434, 0, 660, 519, 520, 661,
	630, 404, 0, 0, 534, 567, 556, 640, 522, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 339,
	0, 0, 372, 571, 553, 563, 554, 539, 540, 541,
	548, 351, 542, 543, 544, 514, 545, 515, 546, 547,
	0, 570, 521, 436, 388, 588, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 0, 0,
	0, 0, 0, 0, 313, 231, 516, 636, 518, 517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 443, 462, 314, 431, 475, 319, 439, 454,
	309, 403, 428, 0, 0, 305, 460, 438, 385, 362,
	363, 304, 0, 422, 337, 353, 334, 401, 0, 459,
	487, 333, 478, 0, 470, 307, 0, 469, 400, 456,
	461, 386, 379, 0, 306, 458, 384, 378, 366, 343,
	503, 367, 368, 357, 412, 376, 413, 358, 390, 389,
	391, 0, 0, 0, 0, 0, 498, 499, 0, 0,
	647, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 629, 0, 0, 633, 0, 472, 0, 0,
	0, 0, 0, 0, 442, 0, 0, 369, 0, 0,
	0, 488, 0, 425, 406, 663, 0, 0, 423, 374,
	457, 414, 463, 444, 471, 419, 415, 297, 445, 336,
	387, 310, 312, 653, 338, 340, 344, 345, 396, 397,
	409, 430, 447, 448, 449, 335, 320, 424, 321, 355,
	322, 298, 328, 326, 329, 432, 330, 300, 410, 453,
	0, 350, 420, 382, 301, 381, 411, 452, 451, 311,
	479, 485, 486, 575, 0, 491, 664, 665, 666, 500,
	0, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 505, 506, 507, 509, 510, 511, 512, 576,
	593, 560, 530, 493, 584, 527, 531, 532, 360, 596,
	0, 0, 0, 484, 370, 371, 0, 342, 341, 383,
	302, 348, 294, 295, 659, 332, 402, 598, 631, 632,
	523, 0, 585, 524, 533, 325, 557, 569, 568, 398,
	483, 0, 580, 583, 513, 658, 0, 577, 592, 662,
	591, 655, 408, 0, 429, 589, 536, 0, 581, 555,
	0, 582, 551, 586, 0, 525, 0, 437, 465, 477,
	494, 497, 526, 611, 612, 613, 299, 496, 615, 616,
	617, 618, 619, 620, 621, 614, 468, 558, 535, 561,
	476, 538, 537, 0, 0, 572, 492, 573, 574, 392,
	393, 394, 395, 352, 599, 318, 495, 418, 0, 559,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 565,
	562, 667, 0, 622, 623, 0, 0, 489, 490, 347,
	354, 508, 356, 317, 407, 349, 474, 364, 0, 501,
	566, 502, 625, 628, 626, 627, 399, 359, 361, 433,
	365, 375, 421, 473, 405, 426, 315, 464, 435, 380,
	552, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 607, 606,
	605, 604, 603, 602, 601, 600, 0, 0, 549, 450,
	327, 288, 323, 324, 331, 656, 652, 455, 657, 0,
	296, 529, 373, 0, 417, 346, 594, 595, 0, 646,
	244, 245, 246, 247, 248, 249, 250, 251, 289, 252,
	253, 254, 255, 256, 257, 258, 261, 262, 263, 264,
	265, 266, 267, 268, 597, 259, 260, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 280, 281,
	282, 0, 0, 0, 290, 291, 292, 293, 0, 0,
	284, 285, 286, 287, 0, 0, 0, 480, 481, 482,
	504, 0, 466, 528, 654, 0, 0, 0, 0, 0,
	0, 0, 578, 590, 624, 0, 634, 635, 637, 639,
	638, 641, 440, 441, 648, 0, 643, 644, 645, 642,
	377, 427, 446, 434, 0, 660, 519, 520, 661, 630,
	404, 0, 0, 534, 567, 556, 640, 522, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 339, 0,
	0, 372, 571, 553, 563, 554, 539, 540, 541, 548,
	351, 542, 543, 544, 514, 545, 515, 546, 547, 0,
	570, 521, 436, 388, 588, 587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 230, 0, 0, 0,
	0, 0, 0, 313, 231, 516, 636, 518, 517, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	303, 443, 462, 314, 431, 475, 319, 439, 454, 309,
	403, 428, 0, 0, 305, 460, 438, 385, 362, 363,
	304, 0, 422, 337, 353, 334, 401, 0, 459, 487,
	333, 478, 0, 470, 307, 0, 469, 400, 456, 461,
	386, 379, 0, 306, 458, 384, 378, 366, 343, 503,
	367, 368, 357, 412, 376, 413, 358, 390, 389, 391,
	0, 0, 0, 0, 0, 498, 499, 0, 0, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629, 0, 0, 633, 0, 472, 0, 0, 0,
	0, 0, 0, 442, 0, 0, 369, 0, 0, 0,
	488, 0, 425, 406, 663, 0, 0, 423, 374, 457,
	414, 463, 444, 471, 419, 415, 297, 445, 336, 387,
	310, 312, 653, 338, 340, 344, 345, 396, 397, 409,
	430, 447, 448, 449, 335, 320, 424, 321, 355, 322,
	298, 328, 326, 329, 432, 330, 300, 410, 453, 0,
	350, 3210, 382, 301, 381, 411, 452, 451, 311, 479,
	485, 486, 575, 0, 491, 664, 665, 666, 500, 0,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 505, 506, 507, 509, 510, 511, 512, 576, 593,
	560, 530, 493, 584, 527, 531, 532, 360, 596, 0,
	0, 0, 484, 370, 371, 0, 342, 341, 383, 302,
	348, 294, 295, 659, 332, 402, 598, 631, 632, 523,
	0, 585, 524, 533, 325, 557, 569, 568, 398, 483,
	0, 580, 583, 513, 658, 0, 577, 592, 662, 591,
	655, 408, 0, 429, 589, 536, 0, 581, 555, 0,
	582, 551, 586, 0, 525, 0, 437, 465, 477, 494,
	497, 526, 611, 612, 613, 299, 496, 615, 616, 617,
	618, 619, 620, 621, 614, 468, 558, 535, 561, 476,
	538, 537, 0, 0, 572, 492, 573, 574, 392, 393,
	394, 395, 352, 599, 318, 495, 418, 0, 559, 0,
	0, 0, 0, 0, 0, 0, 0, 564, 565, 562,
	667, 0, 622, 623, 0, 0, 489, 490, 347, 354,
	508, 356, 317, 407, 349, 474, 364, 0, 501, 566,
	502, 625, 628, 626, 627, 399, 359, 361, 433, 365,
	375, 421, 473, 405, 426, 315, 464, 435, 380, 552,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 607, 606, 605,
	604, 603, 602, 601, 600, 0, 0, 549, 450, 327,
	288, 323, 324, 331, 656, 652, 455, 657, 0, 296,
	529, 373, 0, 417, 346, 594, 595, 0, 646, 244,
	245, 246, 247, 248, 249, 250, 251, 289, 252, 253,
	254, 255, 256, 257, 258, 261, 262, 263, 264, 265,
	266, 267, 268, 597, 259, 260, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 280, 281, 282,
	0, 0, 0, 290, 291, 292, 293, 0, 0, 284,
	285, 286, 287, 0, 0, 0, 480, 481, 482, 504,
	0, 466, 528, 654, 0, 0, 0, 0, 0, 0,
	0, 578, 590, 624, 0, 634, 635, 637, 639, 638,
	641, 440, 441, 648, 0, 643, 644, 645, 642, 377,
	427, 446, 434, 0, 660, 519, 520, 661, 630, 404,
	0, 0, 534, 567, 556, 640, 522, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 0, 0,
	372, 571, 553, 563, 554, 539, 540, 541, 548, 351,
	542, 543, 544, 514, 545, 515, 546, 547, 0, 570,
	521, 436, 388, 588, 587, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 0, 0,
	0, 0, 313, 231, 516, 636, 518, 517, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 303,
	443, 462, 314, 431, 475, 319, 439, 1919, 309, 403,
	428, 0, 0, 305, 460, 438, 385, 362, 363, 304,
	0, 422, 337, 353, 334, 401, 0, 459, 487, 333,
	478, 0, 470, 307, 0, 469, 400, 456, 461, 386,
	379, 0, 306, 458, 384, 378, 366, 343, 503, 367,
	368, 357, 412, 376, 413, 358, 390, 389, 391, 0,
	0, 0, 0, 0, 498, 499, 0, 0, 647, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	629, 0, 0, 633, 0, 472, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 369, 0, 0, 0, 488,
	0, 425, 406, 663, 0, 0, 423, 374, 457, 414,
	463, 444, 471, 419, 415, 297, 445, 336, 387, 310,
	312, 653, 338, 340, 344, 345, 396, 397, 409, 430,
	447, 448, 449, 335, 320, 424, 321, 355, 322, 298,
	328, 326, 329, 432, 330, 300, 410, 453, 0, 350,
	420, 382, 301, 381, 411, 452, 451, 311, 479, 485,
	486, 575, 0, 491, 664, 665, 666, 500, 0, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 506, 507, 509, 510, 511, 512, 576, 593, 560,
	530, 493, 584, 527, 531, 532, 360, 596, 0, 0,
	0, 484, 370, 371, 0, 342, 341, 383, 302, 348,
	294, 295, 659, 332, 402, 598, 631, 632, 523, 0,
	585, 524, 533, 325, 557, 569, 568, 398, 483, 0,
	580, 583, 513, 658, 0, 577, 592, 662, 591, 655,
	408, 0, 429, 589, 536, 0, 581, 555, 0, 582,
	551, 586, 0, 525, 0, 437, 465, 477, 494, 497,
	526, 611, 612, 613, 299, 496, 615, 616, 617, 618,
	619, 620, 621, 614, 468, 558, 535, 561, 476, 538,
	537, 0, 0, 572, 492, 573, 574, 392, 393, 394,
	395, 352, 599, 318, 495, 418, 0, 559, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 565, 562, 667,
	0, 622, 623, 0, 0, 489, 490, 347, 354, 508,
	356, 317, 407, 349, 474, 364, 0, 501, 566, 502,
	625, 628, 626, 627, 399, 359, 361, 433, 365, 375,
	421, 473, 405, 426, 315, 464, 435, 380, 552, 579,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 607, 606, 605, 604,
	603, 602, 601, 600, 0, 0, 549, 450, 327, 288,
	323, 324, 331, 656, 652, 455, 657, 0, 296, 529,
	373, 0, 417, 346, 594, 595, 0, 646, 244, 245,
	246, 247, 248, 249, 250, 251, 289, 252, 253, 254,
	255, 256, 257, 258, 261, 262, 263, 264, 265, 266,
	267, 268, 597, 259, 260, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 280, 281, 282, 0,
	0, 0, 290, 291, 292, 293, 0, 0, 284, 285,
	286, 287, 0, 0, 0, 480, 481, 482, 504, 0,
	466, 528, 654, 0, 0, 0, 0, 0, 0, 0,
	578, 590, 624, 0, 634, 635, 637, 639, 638, 641,
	440, 441, 648, 0, 643, 644, 645, 642, 377, 427,
	446, 434, 0, 660, 519, 520, 661, 630, 404, 0,
	0, 534, 567, 556, 640, 522, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 372,
	571, 553, 563, 554, 539, 540, 541, 548, 351, 542,
	543, 544, 514, 545, 515, 546, 547, 0, 570, 521,
	436, 388, 588, 587, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 230, 0, 0, 0, 0, 0,
	0, 313, 231, 516, 636, 518, 517, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 303, 443,
	1541, 314, 431, 475, 319, 439, 454, 309, 403, 428,
	0, 0, 305, 460, 438, 385, 362, 363, 304, 0,
	422, 337, 353, 334, 401, 0, 459, 487, 333, 478,
	0, 470, 307, 0, 469, 400, 456, 461, 386, 379,
	0, 306, 458, 384, 378, 366, 343, 503, 367, 368,
	357, 412, 376, 413, 358, 390, 389, 391, 0, 0,
	0, 0, 0, 498, 499, 0, 0, 647, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	0, 0, 633, 0, 472, 0, 0, 0, 0, 0,
	0, 442, 0, 0, 369, 0, 0, 0, 488, 0,
	425, 406, 663, 0, 0, 423, 374, 457, 414, 463,
	444, 471, 419, 415, 297, 445, 336, 387, 310, 312,
	653, 338, 340, 344, 345, 396, 397, 409, 430, 447,
	448, 449, 335, 320, 424, 321, 355, 322, 298, 328,
	326, 329, 432, 330, 300, 410, 453, 0, 350, 420,
	382, 301, 381, 411, 452, 451, 311, 479, 485, 486,
	575, 0, 491, 664, 665, 666, 500, 0, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 505,
	506, 507, 509, 510, 511, 512, 576, 593, 560, 530,
	493, 584, 527, 531, 532, 360, 596, 0, 0, 0,
	484, 370, 371, 0, 342, 341, 383, 302, 348, 294,
	295, 659, 332, 402, 598, 631, 632, 523, 0, 585,
	524, 533, 325, 557, 569, 568, 398, 483, 0, 580,
	583, 513, 658, 0, 577, 592, 662, 591, 655, 408,
	0, 429, 589, 536, 0, 581, 555, 0, 582, 551,
	586, 0, 525, 0, 437, 465, 477, 494, 497, 526,
	611, 612, 613, 299, 496, 615, 616, 617, 618, 619,
	620, 621, 614, 468, 558, 535, 561, 476, 538, 537,
	0, 0, 572, 492, 573, 574, 392, 393, 394, 395,
	352, 599, 318, 495, 418, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 564, 565, 562, 667, 0,
	622, 623, 0, 0, 489, 490, 347, 354, 508, 356,
	317, 407, 349, 474, 364, 0, 501, 566, 502, 625,
	628, 626, 627, 399, 359, 361, 433, 365, 375, 421,
	473, 405, 426, 315, 464, 435, 380, 552, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 606, 605, 604, 603,
	602, 601, 600, 0, 0, 549, 450, 327, 288, 323,
	324, 331, 656, 652, 455, 657, 0, 296, 529, 373,
	0, 417, 346, 594, 595, 0, 646, 244, 245, 246,
	247, 248, 249, 250, 251, 289, 252, 253, 254, 255,
	256, 257, 258, 261, 262, 263, 264, 265, 266, 267,
	268, 597, 259, 260, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 280, 281, 282, 0, 0,
	0, 290, 291, 292, 293, 0, 0, 284, 285, 286,
	287, 0, 0, 0, 480, 481, 482, 504, 0, 466,
	528, 654, 0, 0, 0, 0, 0, 0, 0, 578,
	590, 624, 0, 634, 635, 637, 639, 638, 641, 440,
	441, 648, 0, 643, 644, 645, 642, 377, 427, 446,
	434, 0, 660, 519, 520, 661, 630, 404, 0, 0,
	534, 567, 556, 640, 522, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 339, 0, 0, 372, 571,
	553, 563, 554, 539, 540, 541, 548, 351, 542, 543,
	544, 514, 545, 515, 546, 547, 0, 570, 521, 436,
	388, 588, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 230, 0, 0, 0, 0, 0, 0,
	313, 231, 516, 636, 518, 517, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 303, 443, 1539,
	314, 431, 475, 319, 439, 454, 309, 403, 428, 0,
	0, 305, 460, 438, 385, 362, 363, 304, 0, 422,
	337, 353, 334, 401, 0, 459, 487, 333, 478, 0,
	470, 307, 0, 469, 400, 456, 461, 386, 379, 0,
	306, 458, 384, 378, 366, 343, 503, 367, 368, 357,
	412, 376, 413, 358, 390, 389, 391, 0, 0, 0,
	0, 0, 498, 499, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 629, 0,
	0, 633, 0, 472, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 369, 0, 0, 0, 488, 0, 425,
	406, 663, 0, 0, 423, 374, 457, 414, 463, 444,
	471, 419, 415, 297, 445, 336, 387, 310, 312, 653,
	338, 340, 344, 345, 396, 397, 409, 430, 447, 448,
	449, 335, 320, 424, 321, 355, 322, 298, 328, 326,
	329, 432, 330, 300, 410, 453, 0, 350, 420, 382,
	301, 381, 411, 452, 451, 311, 479, 485, 486, 575,
	0, 491, 664, 665, 666, 500, 0, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 505, 506,
	507, 509, 510, 511, 512, 576, 593, 560, 530, 493,
	584, 527, 531, 532, 360, 596, 0, 0, 0, 484,
	370, 371, 0, 342, 341, 383, 302, 348, 294, 295,
	659, 332, 402, 598, 631, 632, 523, 0, 585, 524,
	533, 325, 557, 569, 568, 398, 483, 0, 580, 583,
	513, 658, 0, 577, 592, 662, 591, 655, 408, 0,
	429, 589, 536, 0, 581, 555, 0, 582, 551, 586,
	0, 525, 0, 437, 465, 477, 494, 497, 526, 611,
	612, 613, 299, 496, 615, 616, 617, 618, 619, 620,
	621, 614, 468, 558, 535, 561, 476, 538, 537, 0,
	0, 572, 492, 573, 574, 392, 393, 394, 395, 352,
	599, 318, 495, 418, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 0, 564, 565, 562, 667, 0, 622,
	623, 0, 0, 489, 490, 347, 354, 508, 356, 317,
	407, 349, 474, 364, 0, 501, 566, 502, 625, 628,
	626, 627, 399, 359, 361, 433, 365, 375, 421, 473,
	405, 426, 315, 464, 435, 380, 552, 579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 607, 606, 605, 604, 603, 602,
	601, 600, 0, 0, 549, 450, 327, 288, 323, 324,
	331, 656, 652, 455, 657, 0, 296, 529, 373, 0,
	417, 346, 594, 595, 0, 646, 244, 245, 246, 247,
	248, 249, 250, 251, 289, 252, 253, 254, 255, 256,
	257, 258, 261, 262, 263, 264, 265, 266, 267, 268,
	597, 259, 260, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 280, 281, 282, 0, 0, 0,
	290, 291, 292, 293, 0, 0, 284, 285, 286, 287,
	0, 0, 0, 480, 481, 482, 504, 0, 466, 528,
	654, 0, 0, 0, 0, 0, 0, 0, 578, 590,
	624, 0, 634, 635, 637, 639, 638, 641, 440, 441,
	648, 0, 643, 644, 645, 642, 377, 427, 446, 434,
	0, 660, 519, 520, 661, 630, 404, 0, 0, 534,
	567, 556, 640, 522, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 339, 0, 0, 372, 571, 553,
	563, 554, 539, 540, 541, 548, 351, 542, 543, 544,
	514, 545, 515, 546, 547, 0, 570, 521, 436, 388,
	588, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 230, 0, 0, 0, 0, 0, 0, 313,
	231, 516, 636, 518, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 303, 443, 462, 314,
	431, 475, 319, 439, 1418, 309, 403, 428, 0, 0,
	305, 460, 438, 385, 362, 363, 304, 0, 422, 337,
	353, 334, 401, 0, 459, 487, 333, 478, 0, 470,
	307, 0, 469, 400, 456, 461, 386, 379, 0, 306,
	458, 384, 378, 366, 343, 503, 367, 368, 357, 412,
	376, 413, 358, 390, 389, 391, 0, 0, 0, 0,
	0, 498, 499, 0, 0, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 629, 0, 0,
	633, 0, 472, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 369, 0, 0, 0, 488, 0, 425, 406,
	663, 0, 0, 423, 374, 457, 414, 463, 444, 471,
	419, 415, 297, 445, 336, 387, 310, 312, 653, 338,
	340, 344, 345, 396, 397, 409, 430, 447, 448, 449,
	335, 320, 424, 321, 355, 322, 298, 328, 326, 329,
	432, 330, 300, 410, 453, 0, 350, 420, 382, 301,
	381, 411, 452, 451, 311, 479, 485, 486, 575, 0,
	491, 664, 665, 666, 500, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	509, 510, 511, 512, 576, 593, 560, 530, 493, 584,
	527, 531, 532, 360, 596, 0, 0, 0, 484, 370,
	371, 0, 342, 341, 383, 302, 348, 294, 295, 659,
	332, 402, 598, 631, 632, 523, 0, 585, 524, 533,
	325, 557, 569, 568, 398, 483, 0, 580, 583, 513,
	658, 0, 577, 592, 662, 591, 655, 408, 0, 429,
	589, 536, 0, 581, 555, 0, 582, 551, 586, 0,
	525, 0, 437, 465, 477, 494, 497, 526, 611, 612,
	613, 299, 496, 615, 616, 617, 618, 619, 620, 621,
	614, 468, 558, 535, 561, 476, 538, 537, 0, 0,
	572, 492, 573, 574, 392, 393, 394, 395, 352, 599,
	318, 495, 418, 0, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 565, 562, 667, 0, 622, 623,
	0, 0, 489, 490, 347, 354, 508, 356, 317, 407,
	349, 474, 364, 0, 501, 566, 502, 625, 628, 626,
	627, 399, 359, 361, 433, 365, 375, 421, 473, 405,
	426, 315, 464, 435, 380, 552, 579, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 606, 605, 604, 603, 602, 601,
	600, 0, 0, 549, 450, 327, 288, 323, 324, 331,
	656, 652, 455, 657, 0, 296, 529, 373, 0, 417,
	346, 594, 595, 0, 646, 244, 245, 246, 247, 248,
	249, 250, 251, 289, 252, 253, 254, 255, 256, 257,
	258, 261, 262, 263, 264, 265, 266, 267, 268, 597,
	259, 260, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 0, 0, 0, 290,
	291, 292, 293, 0, 0, 284, 285, 286, 287, 0,
	0, 0, 480, 481, 482, 504, 0, 466, 528, 654,
	0, 0, 0, 0, 0, 0, 0, 578, 590, 624,
	0, 634, 635, 637, 639, 638, 641, 440, 441, 648,
	0, 643, 644, 645, 642, 377, 427, 446, 434, 0,
	660, 519, 520, 661, 630, 404, 0, 0, 534, 567,
	556, 640, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 339, 0, 0, 372, 571, 553, 563,
	554, 539, 540, 541, 548, 351, 542, 543, 544, 514,
	545, 515, 546, 547, 0, 570, 521, 436, 388, 588,
	587, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 313, 231,
	516, 636, 518, 517, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 303, 443, 462, 314, 431,
	475, 319, 439, 454, 309, 403, 428, 0, 0, 305,
	460, 438, 385, 362, 363, 304, 0, 422, 337, 353,
	334, 401, 0, 459, 487, 333, 478, 0, 470, 307,
	0, 469, 400, 456, 461, 386, 379, 0, 306, 458,
	384, 378, 366, 343, 503, 367, 368, 357, 412, 376,
	413, 358, 390, 389, 391, 0, 0, 0, 0, 0,
	498, 499, 0, 0, 647, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 629, 0, 0, 633,
	0, 472, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 369, 0, 0, 0, 488, 0, 425, 406, 663,
	0, 0, 423, 374, 457, 414, 463, 444, 471, 419,
	415, 297, 445, 336, 387, 310, 312, 752, 338, 340,
	344, 345, 396, 397, 409, 430, 447, 448, 449, 335,
	320, 424, 321, 355, 322, 298, 328, 326, 329, 432,
	330, 300, 410, 453, 0, 350, 420, 382, 301, 381,
	411, 452, 451, 311, 479, 485, 486, 575, 0, 491,
	664, 665, 666, 500, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 505, 506, 507, 509,
	510, 511, 512, 576, 593, 560, 530, 493, 584, 527,
	531, 532, 360, 596, 0, 0, 0, 484, 370, 371,
	0, 342, 341, 383, 302, 348, 294, 295, 659, 332,
	402, 598, 631, 632, 523, 0, 585, 524, 533, 325,
	557, 569, 568, 398, 483, 0, 580, 583, 513, 658,
	0, 577, 592, 662, 591, 655, 408, 0, 429, 589,
	536, 0, 581, 555, 0, 582, 551, 586, 0, 525,
	0, 437, 465, 477, 494, 497, 526, 611, 612, 613,
	299, 496, 615, 616, 617, 618, 619, 620, 621, 614,
	468, 558, 535, 561, 476, 538, 537, 0, 0, 572,
	492, 573, 574, 392, 393, 394, 395, 352, 599, 318,
	495, 418, 0, 559, 0, 0, 0, 0, 0, 0,
	0, 0, 564, 565, 562, 667, 0, 622, 623, 0,
	0, 489, 490, 347, 354, 508, 356, 317, 407, 349,
	474, 364, 0, 501, 566, 502, 625, 628, 626, 627,
	399, 359, 361, 433, 365, 375, 421, 473, 405, 426,
	315, 464, 435, 380, 552, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 606, 605, 604, 603, 602, 601, 600,
	0, 0, 549, 450, 327, 288, 323, 324, 331, 656,
	652, 455, 657, 0, 296, 529, 373, 0, 417, 346,
	594, 595, 0, 646, 244, 245, 246, 247, 248, 249,
	250, 251, 289, 252, 253, 254, 255, 256, 257, 258,
	261, 262, 263, 264, 265, 266, 267, 268, 597, 259,
	260, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 0, 0, 0, 290, 291,
	292, 293, 0, 0, 284, 285, 286, 287, 0, 0,
	0, 480, 481, 482, 504, 0, 466, 528, 654, 0,
	0, 0, 0, 0, 0, 0, 578, 590, 624, 0,
	634, 635, 637, 639, 638, 641, 440, 441, 648, 0,
	643, 644, 645, 642, 377, 427, 446, 434, 0, 660,
	519, 520, 661, 630, 404, 0, 0, 534, 567, 556,
	640, 522, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 339, 0, 0, 372, 571, 553, 563, 554,
	539, 540, 541, 548, 351, 542, 543, 544, 514, 545,
	515, 546, 547, 0, 570, 521, 436, 388, 588, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	230, 0, 0, 0, 0, 0, 0, 313, 231, 516,
	636, 518, 517, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 303, 443, 462, 314, 431, 475,
	319, 439, 454, 309, 403, 428, 0, 0, 305, 460,
	438, 385, 362, 363, 304, 0, 422, 337, 353, 334,
	401, 0, 459, 487, 333, 478, 0, 470, 307, 0,
	469, 400, 456, 461, 386, 379, 0, 306, 458, 384,
	378, 366, 343, 503, 367, 368, 357, 412, 376, 413,
	358, 390, 389, 391, 0, 0, 0, 0, 0, 498,
	499, 0, 0, 647, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 629, 0, 0, 633, 0,
	472, 0, 0, 0, 0, 0, 0, 442, 0, 0,
	369, 0, 0, 0, 488, 0, 425, 406, 663, 0,
	0, 423, 374, 457, 414, 463, 444, 471, 709, 415,
	297, 445, 336, 387, 310, 312, 653, 338, 340, 344,
	345, 396, 397, 409, 430, 447, 448, 449, 335, 320,
	424, 321, 355, 322, 298, 328, 326, 329, 432, 330,
	300, 410, 453, 0, 350, 420, 382, 301, 381, 411,
	452, 451, 311, 479, 485, 486, 575, 0, 491, 664,
	665, 666, 500, 0, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 505, 506, 507, 509, 510,
	511, 512, 576, 593, 560, 530, 493, 584, 527, 531,
	532, 360, 596, 0, 0, 0, 484, 370, 371, 0,
	342, 341, 383, 302, 348, 294, 295, 659, 332, 402,
	598, 631, 632, 523, 0, 585, 524, 533, 325, 557,
	569, 568, 398, 483, 0, 580, 583, 513, 658, 0,
	577, 592, 662, 591, 655, 408, 0, 429, 589, 536,
	0, 581, 555, 0, 582, 551, 586, 0, 525, 0,
	437, 465, 477, 494, 497, 526, 611, 612, 613, 299,
	496, 615, 616, 617, 618, 619, 620, 710, 614, 468,
	558, 535, 561, 476, 538, 537, 0, 0, 572, 492,
	573, 574, 392, 393, 394, 395, 352, 599, 318, 495,
	418, 0, 559, 0, 0, 0, 0, 0, 0, 0,
	0, 564, 565, 562, 667, 0, 622, 623, 0, 0,
	489, 490, 347, 354, 508, 356, 317, 407, 349, 474,
	364, 0, 501, 566, 502, 625, 628, 626, 627, 399,
	359, 361, 433, 365, 375, 421, 473, 405, 426, 315,
	464, 435, 380, 552, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 606, 605, 604, 603, 602, 601, 600, 0,
	0, 549, 450, 327, 288, 323, 324, 331, 656, 652,
	455, 657, 0, 296, 529, 373, 0, 417, 346, 594,
	595, 0, 646, 244, 245, 246, 247, 248, 249, 250,
	251, 289, 252, 253, 254, 255, 256, 257, 258, 261,
	262, 263, 264, 265, 266, 267, 268, 597, 259, 260,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 0, 0, 0, 290, 291, 292,
	293, 0, 2051, 284, 285, 286, 287, 0, 0, 0,
	480, 481, 482, 504, 0, 466, 528, 654, 0, 0,
	0, 0, 0, 0, 0, 578, 590, 624, 0, 634,
	635, 637, 639, 638, 641, 440, 441, 648, 2053, 643,
	644, 645, 642, 377, 427, 446, 434, 0, 660, 519,
	520, 661, 630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2028, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2044, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2032, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2038, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2026, 2060, 0, 0, 2027,
	2029, 2031, 0, 2033, 2034, 2035, 2039, 2040, 2041, 2043,
	2046, 2047, 2048, 0, 0, 0, 0, 0, 0, 0,
	2036, 2045, 2037, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2052, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2049, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2025, 0, 0, 0, 0, 0, 0,
	2024, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2042, 0, 0, 0, 0, 0,
	0, 0, 0, 2030,
}

var yyPact = [...]int{
	4082, -1000, -1000, -1000, -348, 16249, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 50678, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 474, 50678, -346, 31857, 48731, -1000, -1000, 2753,
	-1000, 49380, 18216, 50678, 577, 576, 50678, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 993, -1000, 55221, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 898, 4728, 54572,
	12328, -224, -1000, 1558, -43, 2646, 486, -214, -221, 562,
	1182, 1188, 1291, 1143, 50678, 1134, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 254,
	1030, 50029, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 239, 249, 981, 1030,
	23416, 107, 105, 1558, 487, -97, 209, -1000, 1796, 4208,
	197, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12328, 12328, 16249, -382, 16249, 12328, 50678, 50678,
	-1000, -1000, -1000, -1000, -346, 49380, 898, 4728, 12328, 2646,
	486, -214, -221, 562, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -97, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 105, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5319,
	-1000, 1683, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2344, 3225,
	1675, 2635, 869, 48731, 50678, -1000, 144, 869, -1000, -1000,
	-1000, 1558, 3635, -1000, 50678, 50678, 216, 1936, -1000, 504,
	513, 435, 503, 394, 1663, -1000, -1000, -1000, -1000, -1000,
	-1000, 792, 3611, -1000, 50678, 50678, 3237, 50678, -1000, 2308,
	824, -1000, 5652, 3402, 1590, 1047, 3247, -1000, -1000, 3224,
	-1000, 404, 258, 411, 671, 471, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 375, -1000, 3477, -1000, -1000, 382, -1000,
	-1000, 371, -1000, -1000, -1000, 102, -1000, -1000, -1000, -1000,
	-1000, -1000, 19, -1000, -1000, 1327, 2618, 12328, 2456, -1000,
	3678, 1698, -1000, -1000, -1000, 7758, 14936, 14936, 14936, 14936,
	50678, -1000, -1000, 3009, 12328, 3223, 3216, 3210, 3207, -1000,
	-1000, -1000, -1000, -1000, -1000, 3198, 1657, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2040, -1000, -1000, -1000,
	15588, -1000, 3197, 3196, 3178, 3177, 3175, 3172, 3167, 3166,
	3163, 3158, 3156, 3154, 3148, 3147, 2843, 17557, 3142, 2630,
	2625, 3141, 3130, 3127, 2624, 3120, 3119, 3117, 2843, 2843,
	3112, 3107, 3106, 3090, 3089, 3083, 3076, 3075, 3073, 3071,
	3070, 3067, 3066, 3064, 3062, 3061, 3060, 3046, 3045, 3043,
	3041, 3040, 3039, 3036, 3034, 3033, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1502, -1000, 3032, 3625, 2914, -1000, 3468, 3456, 3454, 3441,
	-273, 3030, 2263, -1000, -1000, 100, 3609, 50678, -296, 50678,
	431, -115, -117, -118, 983, -1000, -84, -1000, -1000, 1147,
	-1000, 1124, 53923, 948, -1000, -1000, 50678, 896, 896, 896,
	50678, 214, 1063, 896, 896, 896, 896, 896, 956, 896,
	3507, 977, 968, 967, 962, 896, -61, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1935, 1934, 3306, 1113, -1000, -1000,
	-1000, -1000, 1570, 50678, -1000, 2972, 431, -334, 1748, 1748,
	3582, 3582, 3502, 3501, 839, 836, 829, 1748, 626, -1000,
	1818, 1818, 1818, 1818, 1748, 519, 841, 3514, 3514, 160,
	1818, 86, 1748, 1748, 86, 1748, 1748, -1000, 1997, 259,
	-280, -1000, -1000, -1000, -1000, 1818, 1818, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3471, 3453, 898, 898, 50678, 898,
	194, 50678, 898, 898, 898, 50678, 907, -333, 32, 53274,
	52625, 2419, 2308, 820, 816, 1580, 1889, -1000, 1766, 50678,
	50678, 1766, 1766, 26665, 26016, -1000, 50678, -1000, 3625, 2914,
	2829, 1780, 2828, 2914, -119, 431, 898, 898, 898, 898,
	898, 325, 898, 898, 898, 898, 898, 50678, 50678, 48082,
	898, 898, 898, 898, 10366, 1796, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16249,
	2379, 2189, 195, -18, -321, 277, -1000, -1000, 50678, 3374,
	342, -1000, -1000, -1000, 2940, -1000, 2951, 2951, 2951, 2951,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2951, 2951, 2969, 3029, -1000, -1000, 2946, 2946, 2946, 2940,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2964, 2964, 2968, 2968, 2964,
	50678, -138, -1000, -1000, 12328, 50678, 3394, 452, 3028, 869,
	-1000, -1000, 50678, 321, 460, 3625, 3391, 3514, 3562, -1000,
	-1000, 1649, 2257, 2622, -1000, 394, -1000, 454, 394, -1000,
	464, 464, 1892, -1000, 1261, -1000, -1000, -1000, -1000, -1000,
	-1000, 50678, 19, 3284, -1000, -1000, 2581, 3025, -1000, 677,
	1396, 1371, -1000, 320, 5316, 40943, 2308, 40943, 50678, -1000,
	-1000, -1000, -1000, -1000, -1000, 99, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	328, -1000, 12328, 12328, 12328, 12328, 12328, -1000, 814, 14284,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14936, 14936, 14936,
	14936, 14936, 14936, 14936, 14936, 14936, 14936, 14936, 14936, 3003,
	2077, 14936, 14936, 14936, 14936, 28612, 1780, 3475, 1574, 313,
	1698, 1698, 1698, 1698, 12328, -1000, 1949, 2618, 12328, 12328,
	12328, 12328, 35102, 50678, -1000, -1000, 4031, 12328, 12328, 3668,
	12328, 3428, 12328, 12328, 12328, 2827, 6445, 50678, 12328, -1000,
	2823, 2815, -1000, -1000, 2070, 12328, -1000, -1000, 12328, -1000,
	-1000, 12328, 14936, 12328, -1000, 12328, 12328, 12328, -1000, -1000,
	1466, 3428, 3428, 3428, 1890, 12328, 12328, 3428, 3428, 3428,
	1840, 3428, 3428, 3428, 3428, 3428, 3428, 3428, 3428, 3428,
	3428, 3428, 2814, 2813, 2812, 11676, 3514, -224, -1000, 9714,
	3391, 3514, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -275, 3020, 50678, 2621, 2612, -355, 186, 508,
	50678, 1208, -1000, -1000, 50678, 2256, 50678, 2254, 244, 243,
	50678, 50678, 92, 1175, 1098, 1129, -1000, -1000, 50678, 51976,
	-1000, 50678, 1801, 50678, 50678, 3419, -1000, 50678, 50678, 896,
	896, 896, -1000, 46135, 40943, 50678, 50678, 2308, 50678, 50678,
	50678, 896, 896, 896, 896, 50678, -1000, 3323, 40943, 3310,
	907, -1000, 50678, 1570, 3418, 50678, -1000, -1000, -1000, -1000,
	3582, 14936, 14936, -1000, -1000, 12328, -1000, 278, 47433, 1818,
	1748, 1748, -1000, -1000, 50678, -1000, -1000, -1000, 1818, 50678,
	1818, 1818, 3582, 1818, -1000, -1000, -1000, 1748, 1748, -1000,
	-1000, 12328, -1000, -1000, 1818, 1818, -1000, -1000, 3582, 50678,
	97, 3582, 3582, 131, -1000, -1000, -1000, 1748, 50678, 50678,
	896, 50678, -1000, 50678, 50678, -1000, -1000, 50678, 50678, 4654,
	50678, 46135, 46784, 3451, -1000, 40943, 50678, 50678, 1568, -1000,
	947, 38347, -1000, 50678, 1473, -1000, 42, -1000, 89, 32,
	1766, 32, 1766, 944, -1000, 674, 695, 24718, 611, 40943,
	7097, -1000, -1000, 1766, 1766, 7097, 7097, 1704, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1566, -1000, 309, 3514, -1000,
	-1000, -1000, -1000, -1000, 2251, -313, 50678, 46135, 40943, 2308,
	50678, 898, 50678, 50678, 50678, 50678, 50678, -1000, 3011, 1645,
	-1000, 3398, 50678, 50678, 50678, 50678, 1360, -1000, -1000, 21461,
	1643, -1000, -1000, 1953, -1000, 12328, 16249, -252, 12328, 16249,
	16249, 12328, 16249, -1000, 12328, 334, -1000, -1000, -1000, -1000,
	2238, -1000, 2236, -1000, -1000, -1000, -1000, -1000, 2600, 2600,
	-1000, 2235, -1000, -1000, -1000, -1000, 2233, -1000, -1000, 2213,
	-1000, -1000, -1000, -1000, -166, 2811, 1327, -1000, 2591, 3246,
	-225, -1000, 22767, 50678, 50678, 452, -367, 1933, 1930, 1928,
	3481, -1000, -225, -1000, 22114, 50678, 3514, -1000, -230, 3391,
	12328, 50678, -1000, 3492, -1000, -1000, 394, -1000, -1000, -1000,
	464, 481, -1000, -1000, -1000, -1000, -1000, -1000, 1639, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-103, -111, 1562, -1000, 50678, -1000, -1000, 320, 40943, 42890,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 268, -1000, -1000,
	175, -1000, 942, 272, 1861, -1000, -1000, 220, 210, 225,
	1017, 2618, -1000, 1984, 1984, 1957, -1000, 897, -1000, -1000,
	-1000, -1000, 3009, -1000, -1000, -1000, 2610, 2808, -1000, 1978,
	1978, 1686, 1686, 1686, 1686, 1686, 2322, 2322, -1000, -1000,
	-1000, 7758, 3003, 14936, 14936, 14936, 14936, 999, 999, 4254,
	4242, -1000, -1000, -1000, -1000, 12328, 173, 1946, -1000, 12328,
	2633, 1542, 2439, 1488, 1855, -1000, 2940, 12328, 1635, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2809,
	2805, 2490, 3608, 2803, 12328, -1000, -1000, 1841, 1834, 1817,
	-1000, 2530, 11024, -1000, -1000, -1000, 2802, 1634, 2800, -1000,
	-1000, -1000, 2798, 1814, 1331, 2797, 1947, 2796, 2794, 2793,
	2788, 1554, 12328, 12328, 12328, 12328, 2780, 1805, 1804, 12328,
	12328, 12328, 12328, 2779, 12328, 12328, 12328, 12328, 12328, 12328,
	12328, 12328, 12328, 12328, 50678, 145, 145, 145, 1538, 1529,
	-1000, -1000, 1803, -1000, 2618, -1000, -1000, 3391, -1000, 3000,
	2211, 1482, -1000, -1000, -342, 2527, 50678, 50678, 176, 50678,
	2590, -306, 50678, -1000, -1000, 2587, -1000, 50678, 50678, 50678,
	50678, -124, 3393, -1000, -1000, 1155, 1117, 1135, -1000, 50678,
	-1000, 2584, 3382, 3491, 937, 50678, 2999, 2997, 50678, 50678,
	50678, 329, -1000, -1000, 1344, -1000, 272, -27, 582, 1381,
	3235, 875, -139, 50678, 50678, 50678, 50678, 3417, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 45486, -1000, 2992, 1795,
	-1000, -1000, 1698, 1698, 2618, 50678, 50678, 50678, 3234, 50678,
	50678, 3582, 3582, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1818, 3582, 3582, 1523, 1748, 1818, -1000, -1000, 1818, -367,
	-1000, 1818, -1000, -367, 1624, -367, 50678, -1000, -1000, -1000,
	3414, 2972, 1475, -1000, -1000, -1000, 3560, 1118, 889, 889,
	1142, 773, 3558, 20163, -1000, 1788, 1199, 941, 3338, 401,
	-1000, 1788, -163, 871, 1788, 1788, 1788, 1788, 1788, 1788,
	1788, 790, 771, 1788, 1788, 1788, 1788, 1788, 1788, 1788,
	1788, 1788, 1788, 1788, 1186, 1788, 1788, 1788, 1788, 1788,
	-1000, 1788, 2991, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	800, 706, 291, 3446, 451, -1000, 442, 1344, 696, 3444,
	470, 50678, 50678, 3598, 1325, -1000, -1000, -1000, -1000, -1000,
	29261, 29261, 24069, 29261, -1000, 206, 1766, 32, 70, -1000,
	-1000, 1473, 7097, 1473, 7097, 2206, -1000, -1000, 940, -1000,
	-1000, 1381, -1000, 50678, 50678, -1000, -1000, 2987, 1927, -1000,
	-1000, 17557, -1000, 7097, 7097, -1000, -1000, 31208, 50678, -1000,
	-9, -1000, -12, 3391, -1000, -1000, -1000, 1330, -1000, -1000,
	1472, 1381, 3245, 50678, 1330, 1330, 1330, -1000, -1000, 18865,
	50678, 50678, -1000, -1000, -1000, -313, 3582, 10366, -1000, 38347,
	-1000, -1000, 44837, -1000, 44188, 1893, -1000, 16249, 2161, 190,
	-1000, 266, -328, 187, 2216, 185, 2618, -1000, -1000, 2777,
	2775, 1793, -1000, 1791, 2770, 1783, 1781, 2194, -1000, 76,
	-1000, 3379, 1384, -1000, 2986, -1000, 1758, 3301, -1000, 1449,
	-1000, 1926, 1757, -1000, -1000, -1000, 12328, 43539, 12328, 1069,
	1384, 1754, 3300, 1449, 3391, 2582, -1000, 1446, -1000, 2307,
	1623, 205, -1000, -1000, -1000, 50678, 2581, 1733, 42890, 1414,
	-1000, 936, 1620, 1614, -1000, 40943, 388, 40943, -1000, 40943,
	-1000, -1000, 400, -1000, 50678, 3381, -1000, -1000, -1000, 2527,
	1923, -364, 50678, -1000, -1000, -1000, -1000, -1000, 1727, -1000,
	999, 999, 4254, 4155, -1000, 14936, -1000, 14936, 3413, -1000,
	1860, -1000, 12328, 2130, 5204, 12328, 5204, 2905, 27963, 35102,
	-127, 3389, 3397, 50678, -1000, -1000, 12328, 12328, -1000, 3378,
	-1000, -1000, -1000, -1000, 12328, 12328, 2464, -1000, 50678, -1000,
	-1000, -1000, -1000, 27963, -1000, 14936, -1000, -1000, -1000, -1000,
	12328, 1369, 1369, 3365, 1725, 145, 145, 145, 3356, 3343,
	3286, 1723, 145, 3173, 3131, 3122, 3115, 3108, 2988, 2900,
	2848, 2806, 2762, 1709, -1000, 2985, -1000, -1000, 2045, 13632,
	9714, -1000, -1000, 310, 1438, 2191, 2578, 125, -1000, 1922,
	-1000, 2567, 50678, 50678, 1185, -1000, 50678, 3607, -1000, 3602,
	3590, -1000, -1000, 50678, 50678, -1000, -1000, -1000, 1099, -1000,
	2559, -1000, 251, 226, 2103, 345, 1363, 18865, 2972, 2984,
	2972, 165, 1788, 646, 40943, 809, -1000, 50678, 2133, 1917,
	3244, 774, 3368, 50678, 50678, 2983, 531, 2981, 2980, 3411,
	536, 5448, 50678, 1348, -1000, 1605, 4208, -1000, 50678, -1000,
	-1000, 50678, -1000, 2308, -1000, 1748, -1000, -1000, 3582, -1000,
	-1000, 12328, 12328, 3582, 1748, 1748, -1000, 1818, -1000, 50678,
	-1000, -367, 536, 5448, 3410, 4909, 726, 2832, -1000, 50678,
	-1000, -1000, -1000, 943, -1000, 1119, 896, 50678, 2008, 1119,
	2007, 2977, -1000, -1000, 50678, 50678, 50678, 50678, -1000, -1000,
	50678, -1000, 50678, 50678, 50678, 50678, 50678, 42241, -1000, 50678,
	50678, -1000, 50678, 2004, 50678, 1996, 1138, -1000, 1788, 1788,
	1054, -1000, -1000, 653, -1000, 42241, 2188, 2185, 2181, 2180,
	2557, 2551, 2548, 1788, 1788, 2179, 2547, 41592, 2546, 1380,
	2171, 2170, 2164, 2246, 2544, 1262, -1000, 2543, 2208, 2207,
	2121, 50678, 2976, 2442, -1000, -1000, 2103, 165, 1788, 449,
	50678, 1916, 1915, 646, 616, 616, 580, -32, 25367, -1000,
	-1000, -1000, 50678, 38347, 38347, 38347, 38347, 38347, 38347, -1000,
	3272, 3264, 2974, -1000, 3274, 3266, 3280, 3270, 3251, 50678,
	38347, 2972, -1000, 41592, -1000, -1000, -1000, 1780, 1691, 3676,
	1095, 12328, 7097, -1000, -1000, 50, 44, -1000, -1000, -1000,
	-1000, 40943, 2541, 611, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3485, 50678, 50678, 877, 2763, 1437, -1000, -1000, -1000,
	5448, 2951, 2951, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2951, 2951, 2969, -1000, -1000, 2946, 2946, 2946,
	2940, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2964, 2964, 2968, 2968, 2964, -1000, -1000, -1000, 3580,
	-1000, 1432, -1000, -1000, 1589, -1000, 1958, -353, 16249, 1798,
	1807, -1000, 12328, 16249, 12328, -253, 413, -262, -1000, -1000,
	-1000, 2539, -1000, -1000, -1000, 2160, -1000, 2154, -1000, 188,
	228, 1995, -225, 9714, 453, 50678, -225, 50678, 9714, -1000,
	50678, 162, -374, -375, 158, 2536, 447, -225, 3485, 76,
	12328, 3330, -1000, -1000, 50678, 2150, -1000, -1000, -1000, 3586,
	40943, 2308, 1729, 40294, -1000, 377, -1000, 263, 661, 2535,
	-1000, 960, 124, 2534, 2527, -1000, -1000, -1000, -1000, 14936,
	1698, -1000, -1000, -1000, 2618, 12328, 2757, -1000, 1097, 1097,
	2401, 2755, 2754, -1000, 2951, 2951, -1000, 2940, 2946, 2940,
	1097, 1097, 2750, -1000, 2939, -1000, 3389, -1000, 2247, 2731,
	-1000, 2714, 2678, 12328, -1000, 2748, 4085, 1530, -77, -194,
	145, 145, -1000, -1000, -1000, -1000, 145, 145, 145, 145,
	-1000, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 870, -109, -288, -110, -289, -1000, 2747, 1431,
	-1000, -1000, -1000, -1000, -1000, 3668, 1428, 597, 597, 2527,
	2526, -1000, 932, 2522, 1153, 50678, 2521, -309, 50678, 50678,
	3409, 1880, -1000, 2520, -1000, -1000, 50678, 50678, 50678, 51327,
	702, 50678, 50678, 2510, -1000, 2508, 2740, 1422, -1000, -1000,
	50678, -1000, -1000, -1000, 2739, 3405, 19514, 3404, 2271, -1000,
	-1000, -1000, 30559, 616, -1000, -1000, -1000, 777, 443, 2140,
	612, -1000, 50678, 624, 3318, 1896, 2503, 50678, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3368, -1000, 1038, -367,
	514, 37049, 16908, -1000, 420, 50678, -1000, 50678, 19514, 19514,
	420, 530, 1914, -1000, 869, 1337, 139, 38347, 50678, -1000,
	37698, 2738, -1000, -1000, 1381, 3582, -1000, 2618, 2618, -367,
	3582, 3582, 1748, -1000, -1000, 530, -1000, 420, -1000, 1190,
	20812, 613, 525, 518, -1000, 758, -1000, -1000, 868, 3347,
	5448, -1000, 50678, -1000, 50678, -1000, 50678, 50678, 896, 12328,
	3347, 50678, 919, -1000, 1212, 532, 498, 857, 857, 1420,
	-1000, 3389, -1000, -1000, 1416, -1000, -1000, -1000, -1000, 50678,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	27963, 27963, 3436, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2500, 2484, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 50678, 1688, -1000,
	1891, 2478, 2271, 30559, 1877, 1766, 2475, 2468, 616, -1000,
	2467, 2466, -1000, 2133, 1863, 959, 50678, -1000, 1375, 50678,
	50678, -1000, 1415, -1000, 1862, 3230, 3243, 3230, -1000, 3230,
	-1000, -1000, -1000, -1000, 3268, 2453, -1000, 2826, -1000, 2561,
	-1000, -1000, -1000, -1000, 1415, -1000, -1000, -1000, -1000, -1000,
	1095, -1000, 3483, 1119, 1119, 1119, 2737, -1000, -1000, -1000,
	-1000, 1414, 2735, -1000, -1000, -1000, 3620, -1000, -1000, -1000,
	-1000, -1000, -1000, 18865, 3364, 3577, 3556, 39645, -1000, -353,
	1837, -1000, 1999, 183, 2143, 50678, -1000, -1000, -1000, 2734,
	2733, -232, 196, 3549, 3546, 1132, -1000, 2732, 1413, -225,
	-1000, -1000, 1384, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-379, -225, -1000, 1384, -1000, 188, -1000, -1000, 3339, -1000,
	-1000, 2308, -1000, 256, -1000, -1000, -1000, -1000, -1000, -1000,
	261, -1000, 50678, -1000, 1391, 123, -1000, 2618, -1000, -1000,
	-1000, -1000, -1000, 5204, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2451, -1000, -1000, 12328, -1000, -1000,
	-1000, 2614, -1000, -1000, 12328, 2728, 2450, 2727, 2447, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 3625, -1000, 3545, 1680,
	2723, 2721, 1679, 2718, 2694, -1000, 12328, 2693, 3668, 1061,
	2446, 1061, -1000, -1000, 468, 29910, 50678, 3584, -1000, 50678,
	918, -367, -1000, 50678, -1000, 546, 2444, -1000, -1000, 50678,
	2103, 697, 2103, 784, 50678, -313, -1000, -132, 1363, 5448,
	996, 420, 2692, 1385, -1000, -1000, -1000, -1000, 420, -1000,
	2443, 265, -1000, -1000, -1000, -1000, 2139, -1000, -1000, 2110,
	1602, 282, -1000, -1000, -1000, -1000, -1000, -1000, 2253, 50678,
	38996, 2270, 1856, -369, -1000, 2938, -1000, 1788, 1788, 1788,
	918, 50678, 1676, -1000, 1788, 1788, 2691, -1000, -1000, 918,
	2689, 2688, -140, 878, 1874, 1858, -1000, 2138, 29261, 38347,
	37698, 1395, -1000, 1585, -1000, -1000, -1000, -1000, -1000, -1000,
	3582, 878, -1000, 614, 2136, 14936, 2936, 14936, 2935, 633,
	2934, 1672, -1000, 50678, -1000, -1000, 50678, 522, 2933, -1000,
	2932, 3124, 593, 2926, 2923, 50678, 2593, -1000, 3347, 50678,
	822, 3352, -1000, -1000, -1000, 472, -1000, -1000, -1000, 711,
	-1000, 50678, -1000, 50678, -1000, 1692, -1000, 27963, -1000, -1000,
	1668, -1000, 2442, 2430, -1000, -1000, 265, 2429, 7097, -1000,
	-1000, -1000, -1000, -1000, 3318, 2428, 2253, 50678, -1000, 50678,
	1375, 1375, 3625, 50678, 9714, -1000, -1000, 12328, 2922, -1000,
	12328, -1000, -1000, -1000, 2686, -1000, -1000, -1000, -1000, -1000,
	2918, 3346, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2193,
	-1000, 12328, 12980, -1000, 893, 16249, -263, 407, -1000, -1000,
	-1000, -234, 2421, -1000, -1000, 3544, 2418, 2299, 50678, -1000,
	-1000, 1384, -1000, 1384, -232, -1000, -1000, 1381, -1000, -1000,
	1288, 778, -1000, 2685, 281, -1000, 2550, -1000, 2538, 145,
	-1000, 145, -1000, 327, 12328, -1000, 2417, -1000, -1000, -1000,
	2412, -1000, -1000, 2416, -1000, 2677, -1000, 2408, -1000, -1000,
	50678, -1000, -1000, 1145, 2407, -1000, 467, 918, -1000, 672,
	-372, -1000, 2405, 2103, 2399, 2103, 50678, 693, -1000, 2398,
	2395, -1000, -1000, 5448, -143, -140, 19514, -143, -1000, -1000,
	391, 457, -1000, -1000, 2097, 673, -1000, -1000, 2392, 679,
	-1000, 1375, -1000, 1854, 2027, 2334, 35102, 27963, 28612, 2390,
	-1000, -1000, -1000, 37049, 2193, 2193, 5687, -1000, 328, 55836,
	-1000, 2916, 1191, 1857, -1000, 2135, -1000, 2132, -1000, 3582,
	1395, 137, -1000, -1000, 1718, -1000, 1191, 2832, 3540, -1000,
	3125, 50678, 2993, 50678, 2913, 1826, 14936, -1000, 868, 3299,
	-1000, -1000, 522, -1000, -1000, 2003, 14936, -1000, -1000, 2387,
	28612, 1081, 1822, 1809, 1066, 2904, -1000, 724, 3616, -1000,
	-1000, -1000, 1051, 2895, -1000, 1993, 1967, -1000, 50678, -1000,
	35102, 35102, 806, 806, 35102, 35102, 2884, 857, -1000, -1000,
	14936, -1000, -1000, 1788, -1000, -1000, -1000, 1788, 1670, -1000,
	-1000, -1000, -1000, -1000, -1000, 2270, -1000, -1000, 1330, -1000,
	3514, -1000, -1000, 2618, 50678, 2618, -1000, 36400, -1000, 3537,
	3536, -1000, 2618, 255, 247, 2860, 2859, -1000, -353, 50678,
	50678, -236, 2127, -1000, 2386, 207, -1000, -1000, 1328, -234,
	-243, 131, 27963, 1808, -1000, 2657, 355, -155, -1000, -1000,
	-1000, -1000, 2656, -1000, 954, -1000, -1000, -1000, 1327, 2653,
	2652, -1000, -1000, -1000, -1000, 50678, -1000, 50678, -1000, -1000,
	-1000, -1000, 2317, -313, 2385, -313, 2372, 664, 2103, -1000,
	-1000, -134, -1000, -1000, 433, -1000, -1000, -1000, 657, 2287,
	-1000, -1000, 434, -1000, -1000, -1000, 2253, 2358, -1000, -1000,
	109, -1000, 1806, 1666, -1000, -1000, -1000, -1000, -1000, -1000,
	856, -1000, 420, 5888, -1000, 1199, -1000, 1288, 856, 33804,
	717, 316, -1000, 2123, -1000, -1000, 3625, -1000, 709, -1000,
	625, -1000, 1664, -1000, 1651, 35751, 2116, 2176, -1000, 5739,
	988, -1000, -1000, 4254, -1000, -1000, -1000, -1000, -1000, -1000,
	2357, 2352, -1000, -1000, -1000, -1000, -1000, 2108, 2854, 41,
	3434, 2340, -1000, -1000, 2852, 1646, 1640, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1632, 1631, 35102,
	-1000, -1000, 4254, 2105, 27963, 1788, -1000, -1000, 1630, 1617,
	-1000, -1000, -1000, -1000, -1000, -327, 2851, 12328, 12328, -1000,
	-1000, -1000, 2847, -1000, -1000, 3535, -236, -246, 2339, 180,
	236, -1000, 2336, -1000, -135, 3290, -158, -1000, -1000, 969,
	-227, 138, 135, 128, -1000, -1000, -1000, 12328, -1000, -1000,
	-1000, -1000, 108, -1000, 1797, -1000, -313, -1000, -313, 2103,
	2335, 50678, 722, -1000, -1000, -1000, -1000, 242, -1000, -1000,
	-1000, -1000, -1000, -1000, 2334, 2327, -1000, 604, 3533, -1000,
	55836, -1000, 1788, -1000, 604, 1601, -1000, 1788, 1788, -1000,
	533, -1000, 1794, -1000, 2092, -1000, 3514, -1000, 523, -1000,
	609, -1000, -1000, -1000, 1581, -1000, -1000, -1000, 5739, 619,
	-1000, 827, 2846, -1000, -1000, 2638, 12328, 2843, 1788, 2615,
	-122, 35102, 3110, 2995, 2850, 2756, 1565, -1000, -1000, 27963,
	-1000, -1000, 34453, -1000, 2842, 1564, 1563, 50678, 2299, -1000,
	-1000, 2321, -1000, 906, 179, 236, -1000, 3532, 198, 3529,
	3528, 1295, 3289, -1000, -1000, 1866, -1000, 178, 174, 155,
	-1000, -1000, -1000, -1000, -313, 2317, 2316, -1000, -1000, 2315,
	-313, 600, -1000, 372, -1000, -1000, -1000, 312, -1000, 3525,
	726, -1000, 27963, -1000, -1000, 33804, 2193, 2193, -1000, -1000,
	2060, -1000, -1000, -1000, -1000, 2058, -1000, -1000, -1000, 1547,
	-1000, 50678, 1050, 9062, -1000, 2325, -1000, 50678, -1000, 3240,
	-1000, 298, 1525, 312, 806, 312, 806, 312, 806, 312,
	806, 365, -1000, -1000, -1000, 1514, 12328, -1000, -1000, 1481,
	-1000, -1000, -1000, 2839, 2057, 196, 166, 3524, -1000, 2299,
	3518, 2299, 2299, -1000, 150, -152, 969, -1000, -1000, -1000,
	-1000, -1000, -1000, -313, -1000, 2309, -1000, -1000, -1000, -1000,
	1788, 1788, 2306, 2304, 501, -1000, -1000, 1788, 1788, 1788,
	-1000, 33155, 613, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	619, 55836, -1000, 9062, 1397, -1000, 2618, -1000, 857, -1000,
	-1000, 3239, 3176, 3600, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2838, 2495, -1000, 50678, 3431, 27314,
	200, -1000, -1000, -1000, 2300, -1000, 2299, -1000, -1000, 1774,
	-156, -1000, -1000, -283, 2054, 2052, -1000, -1000, 50678, 2049,
	2044, 2041, -1000, 50678, 614, -1000, 55836, 1387, -1000, 9062,
	-1000, -1000, 3614, -1000, 3601, 1083, 1083, 312, 312, 312,
	312, 12328, -1000, -1000, -1000, 50678, -1000, 1373, -1000, -1000,
	-1000, 1583, -1000, -1000, -1000, -1000, 2294, -160, -1000, -1000,
	2282, -1000, -1000, -1000, -1000, -1000, -1000, 1370, 2832, -1000,
	-1000, -1000, -1000, -1000, 2096, 740, -1000, 2461, 1238, -1000,
	1771, -1000, 32506, 50678, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 50678, 8410, -1000, 1209, -1000, -1000, 2618,
	50678, -1000,
}

var yyPgo = [...]int{
	0, 180, 3637, 242, 178, 4314, 90, 256, 297, 291,
	252, 247, 4313, 4312, 4311, 3359, 3353, 4310, 4309, 4308,
	4292, 4291, 4289, 4288, 4287, 4286, 4284, 4281, 4280, 4278,
	4277, 4276, 4275, 4274, 4273, 4271, 4269, 4268, 4267, 4265,
	4264, 4263, 4262, 4260, 4258, 4257, 4255, 244, 4252, 4250,
	4244, 4243, 4242, 4241, 4239, 4238, 4220, 4219, 4218, 4217,
	4216, 4196, 4195, 4194, 4193, 4192, 4190, 4189, 4188, 4187,
	4186, 4185, 4184, 4183, 4182, 4180, 4174, 4173, 4169, 4165,
	4162, 4161, 4160, 4158, 4157, 280, 4156, 3347, 4153, 4152,
	4150, 4149, 4143, 4142, 4141, 4140, 4139, 4138, 4137, 341,
	4135, 4134, 4133, 4132, 4131, 4130, 4129, 4128, 4126, 4123,
	4122, 4120, 4119, 305, 4115, 4112, 4111, 4110, 218, 4109,
	208, 4108, 174, 150, 4107, 4106, 4105, 4103, 4102, 4101,
	4094, 4093, 4092, 4091, 4090, 4089, 4084, 4082, 251, 190,
	65, 4081, 45, 4079, 4074, 219, 4070, 157, 4069, 151,
	4068, 4067, 4066, 4065, 4061, 4055, 4054, 4053, 4051, 4050,
	4048, 4047, 4046, 4044, 4043, 4039, 4037, 4036, 4035, 4034,
	4033, 4030, 4029, 4027, 51, 4024, 258, 4022, 69, 4020,
	181, 4018, 70, 4014, 4012, 84, 4010, 4009, 56, 144,
	253, 3081, 266, 4008, 191, 4007, 4006, 249, 176, 4005,
	4004, 294, 4003, 161, 222, 159, 101, 134, 4000, 138,
	3999, 263, 49, 39, 254, 148, 3994, 3993, 57, 194,
	127, 3991, 214, 99, 110, 3987, 3985, 147, 3984, 238,
	182, 3982, 106, 3980, 3979, 3977, 25, 3976, 3975, 197,
	200, 3973, 3971, 96, 3970, 3969, 63, 136, 3968, 71,
	123, 169, 116, 3964, 2919, 124, 86, 3963, 119, 109,
	3962, 122, 3961, 3959, 3957, 3955, 198, 3954, 3952, 133,
	75, 3951, 3948, 3947, 68, 3946, 76, 3945, 42, 3944,
	60, 3943, 3941, 3940, 3939, 3938, 3937, 3936, 3935, 3934,
	3933, 3932, 3931, 55, 3929, 3928, 3927, 3926, 7, 12,
	15, 3925, 29, 3923, 171, 3921, 3920, 167, 3919, 195,
	3918, 3916, 94, 92, 3914, 93, 166, 3907, 10, 27,
	78, 3905, 3904, 3902, 282, 3901, 3898, 3897, 271, 3896,
	3894, 3893, 160, 3891, 3890, 3888, 1819, 3887, 3886, 3885,
	3884, 3881, 3880, 248, 3879, 1, 216, 41, 3878, 126,
	141, 3877, 37, 31, 3876, 48, 114, 221, 130, 100,
	3875, 3872, 3871, 139, 199, 111, 88, 0, 98, 231,
	162, 3870, 3869, 3868, 261, 3867, 235, 212, 237, 205,
	257, 250, 3866, 3865, 80, 3864, 163, 32, 53, 132,
	336, 21, 224, 3860, 1106, 8, 183, 3859, 210, 3858,
	14, 18, 213, 153, 3857, 3856, 36, 262, 3855, 3853,
	3851, 135, 3850, 3848, 326, 79, 3846, 3845, 3843, 3839,
	3837, 38, 3836, 189, 16, 3835, 102, 3834, 240, 3833,
	226, 131, 184, 177, 164, 220, 223, 85, 82, 3813,
	1827, 156, 103, 17, 3811, 228, 3810, 187, 137, 3809,
	107, 3807, 243, 264, 207, 3806, 185, 9, 52, 40,
	30, 46, 11, 286, 209, 3805, 3804, 23, 50, 3801,
	54, 3800, 20, 3799, 3797, 44, 3795, 59, 5, 3794,
	3792, 19, 22, 3791, 34, 206, 173, 115, 97, 61,
	3790, 3789, 152, 158, 3788, 146, 154, 168, 3787, 81,
	3786, 3785, 3784, 3783, 955, 260, 3781, 3779, 3778, 3776,
	3769, 3768, 3764, 3763, 215, 3762, 117, 43, 3758, 3744,
	3743, 3742, 83, 142, 3737, 3736, 3734, 3733, 33, 143,
	3732, 13, 3731, 26, 24, 35, 3730, 105, 3729, 3,
	186, 3728, 3724, 4, 3722, 3720, 2, 3719, 3717, 145,
	3715, 95, 28, 170, 121, 3712, 3711, 89, 211, 149,
	3709, 3708, 112, 239, 202, 3707, 196, 246, 259, 3706,
	204, 3705, 3704, 3702, 3701, 3700, 1250, 3699, 3697, 233,
	62, 104, 3696, 217, 118, 3694, 3693, 91, 165, 120,
	125, 58, 87, 3692, 113, 203, 3690, 193, 3688, 255,
	3687, 3684, 108, 3683, 3682, 3681, 3680, 188, 3678, 3676,
	192, 232, 3665, 3664, 270, 3663, 3661, 3660, 3655, 3653,
	3652, 3651, 3650, 3649, 3647, 241, 337, 3645,
}

//line mysql_sql.y:13127
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) conflictOptUnion() *tree.ConflictOpt {
	v, _ := st.union.(*tree.ConflictOpt)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) diffAsOptUnion() *tree.DiffAsOpt {
	v, _ := st.union.(*tree.DiffAsOpt)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) toAccountOptUnion() *tree.ToAccountOpt {
	v, _ := st.union.(*tree.ToAccountOpt)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 620, 623, 623, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	128, 128, 358, 358, 359, 359, 130, 354, 354, 353,
	353, 131, 132, 133, 599, 599, 134, 135, 165, 598,
	598, 598, 598, 598, 167, 167, 167, 167, 167, 167,
	167, 475, 129, 129, 129, 129, 129, 171, 171, 171,
	171, 171, 127, 605, 605, 605, 606, 606, 124, 154,
	153, 156, 156, 155, 155, 152, 152, 148, 151, 151,
	150, 150, 149, 144, 146, 146, 145, 147, 147, 125,
	113, 126, 548, 548, 547, 547, 546, 546, 500, 500,
	501, 501, 345, 345, 345, 545, 545, 545, 544, 544,
	543, 543, 542, 542, 540, 540, 541, 539, 538, 538,
	538, 536, 536, 536, 532, 532, 534, 533, 533, 535,
	527, 527, 530, 530, 528, 528, 528, 528, 531, 526,
	526, 526, 525, 525, 112, 112, 112, 442, 442, 111,
	111, 456, 456, 456, 456, 456, 454, 454, 454, 454,
	454, 454, 453, 453, 452, 452, 457, 457, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 455,
	455, 455, 455, 455, 455, 455, 455, 455, 455, 100,
	100, 100, 100, 100, 100, 100, 107, 105, 105, 105,
	106, 611, 611, 610, 610, 612, 612, 612, 612, 613,
	613, 103, 103, 103, 104, 451, 451, 451, 101, 102,
	102, 441, 441, 446, 446, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 450, 450,
	450, 448, 448, 447, 447, 449, 449, 91, 91, 91,
	91, 91, 91, 95, 96, 97, 97, 97, 97, 94,
	93, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	92, 92, 92, 92, 92, 92, 86, 86, 86, 86,
	86, 85, 85, 87, 87, 438, 438, 437, 108, 108,
	109, 608, 608, 607, 609, 609, 609, 609, 110, 116,
	116, 116, 116, 116, 116, 116, 116, 115, 115, 115,
	118, 118, 117, 119, 99, 99, 99, 99, 99, 99,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 573, 573, 573, 573,
	574, 574, 372, 373, 624, 375, 371, 371, 371, 569,
	569, 570, 571, 572, 572, 572, 114, 14, 228, 228,
	474, 474, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 13, 84, 89, 89, 90, 308, 308, 309,
	303, 303, 310, 310, 170, 311, 311, 311, 316, 316,
	317, 317, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 288, 288, 288, 283, 283, 283,
	283, 283, 283, 283, 284, 284, 285, 285, 286, 286,
	286, 286, 287, 287, 364, 364, 312, 312, 312, 314,
	314, 313, 307, 305, 305, 305, 305, 305, 305, 305,
	306, 306, 306, 306, 306, 315, 315, 82, 88, 88,
	88, 88, 586, 586, 83, 83, 83, 597, 597, 504,
	504, 386, 386, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 509,
	510, 382, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	79, 80, 81, 54, 57, 58, 169, 172, 172, 172,
	172, 53, 53, 53, 427, 427, 52, 625, 625, 357,
	357, 67, 66, 56, 68, 69, 70, 71, 72, 73,
	51, 65, 65, 65, 65, 65, 65, 65, 65, 76,
	521, 521, 627, 627, 627, 74, 75, 503, 503, 503,
	64, 63, 62, 61, 60, 60, 50, 50, 49, 49,
	55, 160, 59, 161, 161, 379, 379, 379, 381, 381,
	377, 626, 626, 470, 470, 380, 380, 48, 48, 48,
	48, 77, 378, 378, 356, 376, 376, 376, 12, 12,
	10, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 26, 27,
	29, 435, 435, 432, 28, 20, 19, 19, 23, 22,
	18, 18, 21, 24, 25, 25, 9, 9, 9, 9,
	15, 15, 16, 198, 198, 255, 255, 580, 580, 576,
	576, 577, 577, 577, 578, 578, 579, 579, 120, 515,
	515, 515, 515, 515, 515, 8, 8, 223, 223, 514,
	514, 514, 514, 514, 514, 439, 439, 439, 558, 558,
	558, 559, 222, 222, 215, 215, 516, 516, 403, 560,
	560, 524, 524, 523, 523, 522, 522, 220, 220, 221,
	221, 201, 201, 139, 139, 529, 529, 529, 529, 537,
	537, 499, 499, 293, 293, 347, 347, 348, 348, 188,
	188, 189, 189, 189, 189, 189, 189, 614, 614, 615,
	616, 617, 617, 618, 618, 618, 619, 619, 619, 619,
	619, 566, 566, 568, 568, 567, 219, 219, 213, 213,
	214, 214, 214, 212, 212, 211, 210, 210, 209, 207,
	207, 207, 208, 208, 208, 227, 227, 191, 191, 191,
	190, 190, 190, 190, 190, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 192, 195, 195,
	196, 196, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 325, 325, 326, 326, 326, 326, 326, 137,
	137, 508, 508, 324, 324, 193, 193, 194, 194, 194,
	194, 323, 323, 322, 206, 206, 205, 204, 204, 204,
	199, 199, 199, 199, 199, 200, 334, 334, 333, 333,
	332, 332, 332, 332, 335, 123, 136, 136, 138, 226,
	226, 217, 216, 331, 330, 330, 330, 330, 225, 225,
	224, 224, 218, 218, 203, 203, 203, 203, 329, 202,
	327, 604, 604, 603, 603, 602, 600, 600, 600, 601,
	601, 601, 601, 550, 550, 550, 550, 550, 365, 365,
	365, 370, 370, 368, 368, 368, 368, 368, 374, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 39, 238, 239, 40, 240, 240, 241, 241, 242,
	242, 243, 244, 245, 245, 245, 245, 419, 419, 38,
	229, 229, 230, 230, 231, 231, 232, 233, 233, 233,
	237, 234, 235, 235, 622, 622, 621, 37, 37, 30,
	175, 175, 176, 176, 176, 178, 178, 289, 289, 289,
	177, 177, 179, 179, 179, 581, 583, 583, 585, 584,
	584, 584, 587, 587, 587, 587, 587, 588, 588, 588,
	588, 589, 589, 31, 157, 157, 182, 182, 162, 592,
	592, 592, 591, 591, 593, 593, 594, 594, 351, 351,
	352, 352, 173, 174, 174, 164, 159, 181, 181, 181,
	181, 181, 183, 183, 257, 257, 158, 163, 166, 168,
	582, 590, 590, 590, 436, 436, 433, 434, 434, 431,
	430, 430, 430, 596, 596, 595, 595, 595, 366, 366,
	32, 426, 426, 428, 429, 429, 429, 420, 420, 420,
	420, 36, 424, 424, 425, 425, 425, 425, 425, 425,
	425, 425, 425, 425, 425, 421, 421, 423, 423, 418,
	418, 418, 418, 418, 418, 418, 418, 35, 35, 180,
	180, 417, 417, 414, 414, 236, 236, 412, 412, 413,
	413, 411, 411, 411, 415, 415, 43, 78, 44, 45,
	46, 42, 416, 416, 184, 184, 184, 184, 184, 184,
	187, 187, 186, 186, 186, 186, 185, 185, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 141,
	140, 140, 140, 140, 140, 143, 143, 350, 350, 349,
	349, 142, 290, 290, 41, 268, 268, 491, 491, 486,
	486, 486, 486, 486, 506, 506, 506, 487, 487, 487,
	488, 488, 488, 490, 490, 490, 489, 489, 489, 489,
	489, 505, 505, 507, 507, 507, 458, 458, 459, 459,
	459, 462, 462, 478, 478, 479, 479, 477, 477, 484,
	484, 483, 483, 482, 482, 481, 481, 480, 480, 480,
	480, 473, 473, 472, 472, 460, 460, 460, 460, 460,
	461, 461, 461, 471, 471, 476, 476, 321, 321, 320,
	320, 276, 276, 277, 277, 319, 319, 274, 274, 275,
	275, 275, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 556, 556, 557,
	279, 279, 291, 291, 291, 291, 291, 291, 278, 278,
	280, 280, 256, 256, 254, 254, 246, 246, 246, 246,
	246, 246, 247, 247, 248, 248, 249, 249, 249, 253,
	253, 252, 252, 252, 252, 250, 250, 251, 251, 251,
	251, 251, 251, 444, 444, 553, 553, 554, 554, 549,
	549, 549, 552, 552, 552, 552, 552, 552, 552, 552,
	555, 555, 555, 551, 551, 258, 344, 344, 344, 367,
	367, 367, 367, 369, 343, 343, 343, 273, 273, 272,
	272, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 443, 443, 383, 383, 384, 384, 302,
	301, 301, 301, 301, 301, 299, 300, 298, 298, 298,
	298, 298, 295, 295, 294, 294, 294, 296, 296, 296,
	296, 296, 422, 422, 292, 292, 282, 282, 282, 281,
	281, 281, 485, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 297, 341, 341, 341, 342, 342, 342,
	342, 342, 342, 342, 342, 393, 393, 399, 399, 565,
	565, 564, 259, 259, 259, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 269, 269, 269, 467, 467, 467,
	467, 468, 468, 468, 468, 469, 469, 469, 465, 465,
	466, 466, 404, 405, 405, 512, 512, 513, 513, 463,
	463, 464, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 340, 340, 340, 520, 520, 520, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 337, 337,
	337, 337, 337, 337, 575, 575, 575, 561, 561, 561,
	562, 562, 562, 562, 562, 562, 562, 562, 562, 562,
	562, 562, 563, 563, 563, 563, 563, 563, 563, 563,
	563, 563, 563, 563, 563, 563, 563, 563, 563, 339,
	339, 339, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	406, 406, 407, 407, 517, 517, 517, 517, 517, 517,
	518, 518, 519, 519, 519, 519, 511, 511, 511, 511,
	511, 511, 511, 511, 511, 511, 511, 511, 511, 511,
	511, 511, 511, 511, 511, 511, 511, 511, 511, 511,
	511, 511, 511, 511, 511, 511, 391, 336, 336, 336,
	408, 400, 400, 401, 401, 402, 402, 394, 394, 394,
	394, 394, 394, 395, 395, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 396, 396, 398,
	398, 410, 410, 410, 409, 409, 409, 409, 409, 409,
	409, 271, 271, 271, 271, 388, 388, 388, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	261, 261, 261, 261, 265, 265, 267, 267, 267, 267,
	267, 267, 267, 267, 267, 267, 267, 267, 267, 267,
	266, 266, 266, 266, 266, 264, 264, 264, 264, 264,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 121,
	122, 122, 263, 346, 346, 492, 492, 495, 495, 493,
	493, 494, 496, 496, 496, 497, 497, 497, 498, 498,
	498, 502, 502, 355, 355, 355, 363, 363, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 362, 362, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 8, 0, 2, 0, 2, 12, 1, 3, 0,
	3, 3, 3, 4, 1, 2, 4, 5, 6, 1,
	2, 1, 2, 3, 10, 10, 11, 11, 12, 8,
	13, 1, 5, 6, 8, 10, 9, 5, 7, 9,
	8, 6, 4, 0, 1, 1, 0, 1, 5, 2,
	2, 6, 9, 6, 9, 4, 7, 8, 0, 1,
	1, 2, 4, 6, 1, 2, 4, 0, 2, 10,
	11, 2, 0, 2, 1, 3, 3, 3, 0, 2,
	0, 2, 1, 3, 5, 0, 2, 3, 1, 3,
	1, 1, 1, 3, 1, 1, 1, 1, 0, 3,
	3, 0, 3, 3, 0, 1, 3, 0, 1, 3,
	0, 2, 1, 2, 3, 4, 3, 3, 1, 0,
	1, 1, 0, 1, 8, 5, 7, 0, 3, 8,
	5, 1, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 4, 1, 3, 1, 2,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 3, 4, 4,
	5, 1, 3, 3, 1, 2, 2, 2, 1, 2,
	2, 3, 4, 4, 6, 1, 1, 1, 2, 4,
	6, 1, 4, 1, 3, 3, 4, 4, 4, 4,
	3, 3, 2, 4, 4, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 2, 3, 3, 4, 5, 4, 2,
	2, 0, 1, 4, 2, 4, 1, 5, 3, 2,
	1, 2, 2, 4, 4, 5, 2, 1, 3, 4,
	4, 1, 2, 9, 7, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 1, 2, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 4,
	2, 4, 3, 3, 1, 1, 1, 1, 1, 1,
	2, 3, 4, 7, 2, 3, 3, 4, 3, 4,
	4, 5, 3, 4, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 1, 1, 1, 1, 6, 4, 1, 1,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 10, 7, 4, 4, 3, 1, 3, 3,
	1, 3, 1, 6, 7, 3, 3, 3, 1, 1,
	1, 3, 2, 4, 5, 5, 6, 5, 5, 3,
	2, 2, 1, 3, 4, 3, 7, 5, 8, 2,
	2, 1, 3, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 2, 1,
	3, 2, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 6, 3, 3, 3, 1, 1, 7, 7, 7,
	8, 8, 0, 4, 7, 6, 6, 0, 3, 0,
	2, 0, 1, 1, 1, 1, 4, 2, 2, 3,
	3, 4, 5, 3, 4, 4, 2, 2, 2, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 4, 3, 3, 3, 4, 5, 6,
	5, 2, 5, 5, 0, 2, 7, 0, 1, 0,
	1, 5, 5, 3, 3, 2, 4, 4, 4, 4,
	4, 1, 1, 1, 3, 3, 1, 1, 1, 6,
	0, 1, 1, 1, 1, 5, 5, 0, 1, 1,
	3, 3, 3, 4, 7, 7, 5, 4, 7, 8,
	3, 3, 2, 3, 4, 0, 2, 2, 0, 2,
	2, 1, 1, 1, 1, 0, 1, 5, 5, 6,
	4, 3, 1, 3, 1, 1, 3, 5, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	4, 1, 3, 1, 4, 6, 6, 4, 4, 4,
	4, 4, 3, 6, 3, 5, 1, 1, 2, 2,
	11, 8, 9, 1, 3, 2, 4, 0, 2, 0,
	1, 1, 1, 1, 0, 1, 0, 1, 4, 2,
	1, 5, 4, 4, 2, 5, 5, 1, 3, 2,
	1, 5, 4, 4, 2, 0, 5, 4, 0, 1,
	3, 3, 1, 3, 1, 3, 1, 3, 4, 0,
	1, 0, 1, 1, 3, 1, 1, 0, 4, 1,
	3, 2, 1, 0, 8, 0, 4, 7, 4, 0,
	2, 0, 2, 0, 2, 0, 4, 1, 3, 1,
	1, 6, 4, 5, 7, 4, 5, 0, 1, 3,
	8, 0, 6, 0, 4, 6, 1, 1, 1, 1,
	1, 2, 3, 1, 3, 6, 0, 3, 0, 1,
	2, 4, 4, 0, 1, 3, 1, 3, 3, 0,
	1, 1, 0, 2, 2, 0, 2, 3, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 7, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 4, 7, 6, 6, 3,
	5, 0, 2, 0, 2, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 3, 1, 1, 1, 1,
	4, 4, 4, 3, 4, 3, 2, 2, 2, 2,
	2, 3, 2, 3, 2, 4, 1, 3, 4, 0,
	2, 1, 3, 1, 1, 2, 2, 3, 0, 1,
	2, 4, 1, 3, 1, 3, 2, 3, 1, 4,
	3, 0, 1, 1, 2, 5, 2, 2, 2, 0,
	2, 3, 3, 0, 1, 3, 1, 3, 0, 1,
	2, 1, 1, 0, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 1, 9, 1, 3, 0, 1, 1,
	3, 1, 3, 0, 1, 1, 1, 0, 2, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 0, 1, 1,
	1, 0, 2, 7, 8, 10, 2, 2, 8, 0,
	3, 3, 0, 3, 0, 3, 0, 5, 1, 3,
	0, 3, 3, 0, 2, 9, 8, 0, 2, 2,
	3, 3, 0, 2, 0, 2, 4, 4, 4, 5,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 3, 3, 3, 1, 1, 3, 3, 4, 0,
	2, 2, 2, 2, 2, 2, 2, 6, 8, 0,
	4, 1, 1, 0, 3, 0, 1, 0, 1, 1,
	2, 4, 4, 4, 0, 1, 8, 2, 4, 4,
	4, 9, 0, 2, 8, 9, 5, 5, 7, 7,
	0, 2, 0, 3, 3, 3, 0, 3, 11, 9,
	11, 8, 6, 9, 7, 10, 7, 6, 8, 2,
	2, 9, 4, 5, 3, 0, 4, 1, 3, 0,
	3, 6, 0, 2, 10, 0, 2, 0, 2, 0,
	3, 2, 4, 3, 0, 2, 1, 0, 2, 3,
	0, 2, 3, 0, 2, 1, 0, 3, 2, 4,
	3, 0, 1, 0, 1, 1, 0, 6, 0, 3,
	5, 0, 4, 0, 3, 1, 3, 4, 5, 0,
	3, 1, 3, 2, 3, 1, 2, 0, 4, 6,
	5, 0, 2, 0, 2, 4, 5, 4, 5, 1,
	5, 6, 5, 0, 3, 0, 1, 1, 3, 3,
	3, 0, 4, 1, 3, 3, 3, 0, 1, 1,
	3, 2, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 4, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 5, 4, 1, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 0, 5, 5, 5,
	5, 6, 0, 1, 1, 3, 1, 1, 1, 1,
	1, 7, 9, 7, 9, 2, 1, 7, 9, 7,
	9, 8, 5, 0, 1, 0, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 3, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	2, 1, 2, 2, 1, 1, 2, 2, 2, 3,
	3, 2, 2, 1, 5, 6, 4, 1, 1, 1,
	5, 4, 1, 1, 2, 0, 1, 1, 2, 5,
	0, 1, 1, 2, 2, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 2, 2, 2, 0, 4, 7,
	3, 3, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 4, 1, 1, 2, 5,
	6, 8, 6, 6, 6, 1, 1, 1, 1, 1,
	1, 3, 9, 1, 4, 4, 4, 7, 9, 7,
	7, 7, 9, 7, 7, 0, 2, 0, 1, 1,
	2, 4, 1, 2, 2, 1, 2, 2, 1, 2,
	2, 2, 2, 2, 0, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 5,
	0, 1, 3, 0, 1, 0, 2, 0, 2, 0,
	1, 6, 8, 8, 6, 6, 5, 5, 5, 6,
	6, 6, 6, 5, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 4, 4, 4, 3, 4,
	6, 6, 7, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 8, 4, 2, 3, 2, 4, 2, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 4, 4, 4,
	0, 1, 2, 3, 1, 1, 1, 1, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	3, 0, 1, 1, 3, 1, 3, 3, 3, 3,
	3, 2, 1, 1, 1, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 1, 3, 4, 4, 5,
	4, 5, 3, 4, 5, 6, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 2,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 4, 1, 2,
	3, 5, 1, 1, 3, 0, 1, 0, 3, 0,
	3, 3, 0, 3, 5, 0, 3, 5, 0, 1,
	1, 0, 1, 1, 2, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}

var yyChk = [...]int{
	-1000, -620, -623, -2, -5, 647, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -188, -127, -128,
	-129, -171, -132, -134, -135, -184, 637, -92, -93, -94,
	-95, -96, -97, -33, -32, -31, -30, -157, -162, -165,
	-167, -130, 570, 643, 473, 14, 522, -15, -16, -566,
	-17, 267, -371, -372, -373, -375, -624, -48, -49, -50,
	-60, -61, -62, -63, -64, -74, -75, -76, -51, -52,
	-53, -56, -54, -67, -66, -68, -69, -70, -71, -72,
	-73, -55, -59, -160, -161, -77, -57, -78, -58, -169,
	-172, -131, -79, -80, -81, -83, -82, -88, -84, -89,
	-159, -164, -13, -170, -90, 241, -87, 77, -101, -102,
	-103, -104, -105, -106, -107, -109, -110, 397, 403, 460,
	636, 62, -189, -191, 666, 667, 670, 557, 560, 285,
	163, 164, 166, 167, 171, 174, -34, -35, -36, -37,
	-38, -39, -41, -40, -42, -43, -44, -45, -46, 237,
	16, 565, -18, -21, -19, -22, -20, -28, -29, -27,
	-24, -26, -158, -25, -163, -23, -166, -168, -133, 262,
	261, 39, 328, 329, 330, 401, 260, 238, 240, 15,
	32, 43, 376, -190, 86, 558, 239, -192, 13, 672,
	-6, -3, -2, -144, -148, -152, -155, -156, -153, -154,
	-4, -122, 121, 252, 638, -367, 393, 639, 641, 640,
	89, 97, -360, -362, 473, 267, 397, 403, 636, 667,
	670, 557, 560, 285, 572, 573, 574, 575, 576, 577,
	578, 579, 581, 582, 583, 584, 585, 586, 587, 597,
	598, 588, 589, 590, 591, 592, 593, 594, 595, 599,
	600, 601, 602, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 612, 525, 622, 623, 624, 625, 553, 580,
	616, 617, 618, 619, 374, 375, 562, 279, 303, 428,
	309, 316, 372, 163, 183, 177, 206, 197, 558, 172,
	283, 321, 284, 96, 166, 508, 111, 485, 457, 169,
	298, 300, 302, 554, 555, 387, 305, 552, 304, 306,
	308, 556, 377, 193, 188, 297, 281, 186, 286, 41,
	287, 370, 369, 211, 288, 289, 567, 481, 373, 487,
	313, 53, 455, 187, 482, 301, 484, 215, 219, 499,
	360, 500, 181, 182, 489, 502, 210, 213, 214, 259,
	366, 367, 44, 564, 271, 503, 217, 662, 209, 204,
	511, 317, 315, 371, 208, 180, 203, 282, 66, 221,
	220, 222, 451, 452, 453, 454, 290, 291, 391, 498,
	200, 189, 378, 173, 23, 506, 266, 486, 404, 292,
	310, 318, 216, 218, 273, 278, 333, 566, 459, 277,
	314, 504, 185, 270, 299, 265, 507, 663, 174, 406,
	293, 167, 307, 501, 665, 510, 65, 419, 179, 170,
	654, 655, 256, 164, 275, 280, 664, 294, 295, 296,
	551, 320, 319, 311, 171, 559, 201, 272, 207, 191,
	178, 202, 165, 274, 509, 420, 634, 376, 438, 199,
	196, 276, 249, 505, 488, 168, 442, 421, 194, 322,
	629, 630, 631, 392, 365, 323, 324, 192, 263, 479,
	480, 327, 448, 355, 422, 458, 429, 423, 228, 229,
	331, 491, 493, 212, 632, 344, 345, 346, 483, 347,
	348, 349, 350, 396, 57, 59, 98, 101, 100, 668,
	669, 64, 30, 382, 385, 417, 424, 357, 635, 563,
	354, 358, 359, 386, 26, 440, 408, 444, 443, 49,
	50, 51, 54, 55, 56, 58, 60, 61, 52, 550,
	401, 414, 512, 46, 48, 411, 28, 388, 439, 461,
	353, 441, 472, 47, 470, 471, 492, 27, 390, 389,
	63, 45, 447, 449, 450, 325, 351, 399, 644, 513,
	394, 410, 413, 395, 356, 384, 415, 68, 67, 407,
	645, 402, 400, 352, 568, 569, 361, 596, 379, 456,
	547, 546, 545, 544, 543, 542, 541, 540, 328, 329,
	330, 425, 426, 427, 437, 430, 431, 432, 433, 434,
	435, 436, 475, 476, 646, 494, 496, 497, 495, 244,
	671, 380, 381, 247, 648, 649, 99, 650, 652, 651,
	29, 653, 661, 658, 659, 660, 571, 232, 656, -449,
	-447, -367, 558, 285, 636, 403, 557, 560, 397, 376,
	667, 670, 401, 267, 328, 329, 330, 473, 374, -240,
	-367, 671, -201, 251, 40, -254, -367, -201, -87, -16,
	-15, -190, -191, -254, 246, -376, 24, 455, -99, 456,
	241, 242, 86, 78, -367, -9, -113, -8, -120, -85,
	-188, 460, -374, -367, 328, 328, -374, 246, -369, 277,
	436, -367, -504, 252, -453, -426, 278, -452, -428, -455,
	-429, 33, 237, 239, 238, 570, 274, 16, 401, 248,
	14, 13, 402, 260, 26, 27, 29, 15, 403, 405,
	30, 406, 409, 410, 411, 43, 414, 415, 267, 89,
	97, 92, 285, -239, -367, -402, -394, 118, -397, -389,
	-390, -392, -345, -540, -387, 86, 145, 146, 153, 119,
	673, -391, -485, 37, 121, 576, 580, 616, 523, -337,
	-338, -339, -340, -341, -342, 561, -367, -541, -539, 92,
	102, 104, 108, 109, 107, 105, 157, 190, 106, 93,
	158, -191, 89, -561, 586, -361, 609, 622, 623, 624,
	625, 608, 62, -511, -519, 245, -517, 156, 195, 263,
	191, 14, 151, 448, 192, 617, 618, 619, 583, 605,
	525, 587, 597, 612, 578, 579, 581, 573, 574, 575,
	577, 588, 590, 604, -520, 600, 610, 611, 596, 620,
	621, 658, 613, 614, 615, 652, 91, 90, 603, 602,
	589, 584, 585, 591, 572, 582, 592, 593, 601, 606,
	607, 385, 111, 386, 387, 515, 377, 81, 388, 252,
	455, 71, 389, 390, 391, 392, 393, 522, 394, 72,
	395, 384, 267, 438, 396, 194, 212, 527, 526, 528,
	519, 516, 514, 517, 518, 520, 521, 594, 595, 599,
	-136, -138, 627, -614, -328, -615, 6, 7, 8, 9,
	-616, 158, -605, 457, 566, 92, 321, 374, 17, 515,
	657, 556, 657, 556, 335, 168, 165, -440, 168, 117,
	174, 173, 250, 168, -440, -367, 171, 657, 170, 654,
	331, -416, -175, 374, 438, 347, 98, 277, -420, -417,
	554, -505, 325, 321, 297, 247, 114, -176, 257, 256,
	112, 515, 245, 412, 316, 57, 59, -576, -577, 234,
	235, 236, -568, 548, -567, -367, 657, 662, 387, 100,
	101, 654, 655, 28, 246, 398, 273, 493, 491, 492,
	494, 495, 496, 497, -65, -521, -503, 488, 487, -380,
	480, 486, 478, 490, 481, 375, 349, 570, 348, 237,
	648, 555, 549, -355, 422, 458, 512, 513, 399, 459,
	499, 501, 482, 111, 198, 195, 247, 249, 246, 654,
	374, 515, 438, 98, 347, 246, -576, 662, 165, 499,
	501, 457, 277, 436, 42, -446, 448, -445, -447, 500,
	511, 90, 91, 498, -355, 111, 479, 479, -614, -328,
	-189, -191, -123, -566, 556, 657, 247, 374, 438, 277,
	248, 246, 551, 554, 249, 515, 245, 328, 398, 273,
	347, 98, 170, 654, -195, -196, -197, 230, 231, 232,
	70, 235, 233, 67, 33, 34, 35, -1, 125, 672,
	-394, -394, -6, 675, -6, -394, -367, -367, 160, -261,
	-265, -262, -264, -263, -267, -266, 195, 196, 156, 199,
	205, 201, 202, 203, 204, 206, 207, 208, 209, 210,
	213, 214, 211, 32, 212, 263, 191, 192, 193, 194,
	215, 177, 197, 563, 223, 178, 224, 179, 225, 180,
	226, 181, 182, 227, 183, 186, 187, 188, 189, 185,
	159, -228, 92, 33, 86, 159, 92, -220, 269, -201,
	-254, -246, 159, 673, -220, -614, -211, -212, 11, -254,
	-343, -367, 457, 128, -99, 78, -99, 456, 78, -99,
	456, 241, -569, -570, -571, -573, 241, 456, 455, 242,
	-118, 159, 285, 17, -374, -374, 84, -254, -428, 277,
	-453, -426, 37, 83, 160, 250, 160, 83, 86, 399,
	374, 438, 400, 515, 246, 412, 249, 277, 413, 374,
	438, 246, 249, 515, 277, 374, 246, 249, 438, 277,
	413, 374, 478, 479, 249, 28, 404, 407, 408, 479,
	-525, 511, 160, 117, 114, 115, 116, -394, 135, -409,
	128, 129, 130, 131, 132, 133, 134, 142, 141, 152,
	145, 146, 147, 148, 149, 150, 151, 143, 144, 138,
	118, 136, 140, 137, 120, 155, -191, -394, -402, 62,
	-392, -392, -392, -392, -367, -485, -399, -394, 86, 86,
	86, 86, 86, 159, 105, 92, -394, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, -518,
	86, 86, -406, -407, 86, 86, -387, -343, 86, 92,
	92, 86, 86, 86, 92, 86, 86, 86, -407, -407,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, -212, 160, -211, 86,
	-211, -212, -192, -191, 33, 34, 33, 34, 33, 34,
	33, 34, -617, 645, 86, 102, 668, 228, 17, -367,
	654, -367, -599, 33, 559, 559, 559, 559, 237, 16,
	339, 55, 504, 565, 172, 173, 174, -367, 171, 250,
	-367, -414, 252, -414, -414, -238, -367, 273, 398, 249,
	551, 249, -176, -414, -414, -414, -414, -414, 248, -414,
	24, 246, 246, 246, 246, -414, 522, 128, 128, 60,
	-578, 176, 160, -568, -219, 86, -599, 663, 664, 665,
	-379, 136, 140, -379, -324, 18, -324, 24, 24, 275,
	275, 275, -379, 315, -625, -626, 17, 138, -377, -626,
	-377, -377, -379, -627, 248, 489, 44, 276, 275, -213,
	-214, 22, -213, 483, 479, -470, 484, 485, -381, -626,
	-380, -379, -379, -380, -379, -379, -379, 33, 246, 249,
	515, 347, 649, -625, -625, 32, 32, -504, -504, -254,
	-504, -504, 549, -356, -367, -504, -504, -504, -308, -309,
	-254, -579, 251, 665, -611, -610, 502, -613, 504, 165,
	-447, 165, -447, 89, -428, 277, 277, 160, 128, 24,
	-448, 128, 139, -447, -447, -448, -448, -278, 42, -366,
	156, -367, 92, -278, 42, -608, -607, -254, -212, -192,
	-191, 87, 87, 87, 559, -599, -504, -504, -504, -504,
	-504, -505, -504, -504, -504, -504, -504, -374, -229, -367,
	-240, 252, -504, -504, -504, -504, -193, -194, 147, -394,
	-367, -197, -3, -146, -145, 122, 123, 125, 639, 393,
	638, 642, 636, -447, 42, -498, 420, 419, -492, -494,
	86, -493, 86, -493, -493, -493, -493, -493, 86, 86,
	-495, 86, -495, -495, -492, -496, 86, -496, -497, 86,
	-497, -496, -367, -474, 565, -400, -402, -367, 40, -514,
	62, -188, 86, 32, 86, -220, -367, 192, 170, 653,
	36, -515, 62, -188, 86, 32, -212, -139, 40, -214,
	21, 159, 102, 92, -118, -99, 78, -118, -99, -99,
	87, 160, -572, 108, 109, -574, 210, 201, -367, -116,
	92, -539, -7, -11, -8, -9, -10, -47, -85, -188,
	557, 560, -542, -540, 86, 33, 447, 83, 17, -454,
	246, 515, 398, 273, 249, 374, -452, -435, -432, -430,
	-366, -428, -431, -430, -457, -343, 479, -140, 462, 461,
	327, -394, -394, -394, -394, -394, 107, 118, 365, 108,
	109, -389, -410, 33, 323, 324, -390, -390, -390, -390,
	-390, -390, -390, -390, -390, -390, -390, -390, -398, -408,
	-485, 86, 138, 136, 140, 137, 120, -392, -392, -390,
	-390, -280, -366, 156, 87, 160, -394, -565, -564, 122,
	-394, -394, -394, -394, -421, -423, -343, 86, -367, -562,
	-563, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	538, 539, 389, 384, 390, 388, 377, 396, 391, 392,
	194, 546, 547, 540, 541, 542, 543, 544, 545, -400,
	-400, -394, -562, -400, -336, 34, 33, -402, -402, -402,
	87, -394, -575, 363, 362, 364, -215, -367, -400, 87,
	87, 87, 102, -402, -402, -400, -390, -400, -400, -400,
	-400, -563, -336, -336, -336, -336, 147, -402, -402, -336,
	-336, -336, -336, 147, -336, -336, -336, -336, -336, -336,
	-336, -336, -336, -336, -336, 87, 87, 87, 147, -402,
	-213, -138, -523, -522, -394, 42, -139, -214, -618, 646,
	86, -343, -606, 92, 92, 673, 170, 654, 17, 515,
	-367, 17, 246, -367, 102, -367, 102, 246, 515, 246,
	515, -254, -254, 505, 506, 169, 173, 172, -367, 171,
	-367, -367, 118, -367, -367, 36, -240, -229, -414, -414,
	-414, -583, -367, 93, -436, -433, -430, -367, -367, -426,
	-367, -356, -254, -414, -414, -414, -414, -254, -289, 54,
	55, 56, -430, -177, 57, 58, -579, -567, 36, -218,
	-367, -324, -392, -392, -394, 374, 515, 246, -430, 277,
	-625, -379, -379, -357, -356, -381, -376, -381, -381, -324,
	-377, -379, -379, -394, -381, -377, -324, -367, 479, -324,
	-324, -470, -379, -378, -367, -378, -414, -356, -357, -357,
	-254, -254, -303, -310, -304, -311, 269, 243, 382, 383,
	240, 238, 11, 239, -318, 316, -415, 523, -284, -285,
	78, 43, -287, 267, 424, 417, 279, 283, 96, 284,
	457, 285, 248, 287, 288, 289, 304, 306, 259, 290,
	291, 292, 448, 293, 164, 305, 294, 295, 296, 400,
	-279, 6, 350, 42, 52, 53, 471, 470, 568, 565,
	280, -367, -583, -581, 32, -367, 32, -436, -430, -367,
	-367, 160, 250, -204, -206, -203, -199, -200, -205, -327,
	-329, -202, 86, -254, -191, -367, -447, 160, 503, 505,
	506, -611, -448, -611, -448, 250, 33, 447, -451, 447,
	33, -426, -445, 499, 501, -441, 92, 448, -431, -450,
	83, 156, -522, -448, -448, -450, -450, 155, 160, -609,
	504, 505, 234, -213, 102, -236, 656, -256, -254, -583,
	-435, -426, -367, -504, -256, -256, -256, -369, -369, 86,
	159, 37, -367, -367, -367, -367, -323, 160, -322, 17,
	-368, -367, 36, 92, 159, -147, -145, 124, -394, -6,
	638, -394, -6, -6, -394, -6, -394, -502, 421, 102,
	102, -346, 92, -346, 102, 102, 102, 571, 87, 92,
	-439, 83, -516, -403, -560, 627, -222, 87, -215, -558,
	-559, -215, -221, -367, -514, -246, 128, 128, 128, 25,
	-516, -222, 87, -558, -213, 628, -139, -210, -209, -394,
	-367, 24, -118, -99, -570, 159, 160, -218, -454, -434,
	-431, -456, 147, -367, -442, 160, 565, 676, 90, 250,
	-596, -595, 439, 87, 160, -526, 251, 522, 92, 673,
	455, 228, 229, 107, 365, 108, 109, -485, -402, -398,
	-392, -392, -390, -390, -396, 264, -396, 117, -394, 674,
	-393, -564, 124, -394, 36, 160, 36, 160, 84, 160,
	87, -492, -394, 159, 87, 87, 17, 17, 87, -394,
	87, 87, 87, 87, 17, 17, -394, 87, 159, 87,
	87, 87, 87, 84, 87, 160, 87, 87, 87, 87,
	160, -402, -402, -394, -402, 87, 87, 87, -394, -394,
	-394, -402, 87, -394, -394, -394, -394, -394, -394, -394,
	-394, -394, -394, -218, -464, 474, -464, -464, 160, 160,
	160, 87, -139, 86, 102, 160, 669, -350, -349, 92,
	-367, -367, 170, 654, -367, 92, 654, -367, 92, -254,
	-356, -254, -356, 562, 40, 170, 174, 174, 173, -367,
	92, 37, 24, 24, 314, -239, 86, 86, -254, -254,
	-254, -585, 425, -597, 160, 42, -595, 515, -173, 327,
	-418, 84, -180, 334, 17, 565, -254, -254, -254, -254,
	-268, 36, 17, -198, -255, -367, 86, 87, 160, -367,
	-367, -367, -427, 84, -367, -357, -324, -324, -381, -324,
	-324, 160, 23, -379, -381, -381, -246, -377, -246, 159,
	-246, -356, -491, 36, -219, 160, 21, 269, -253, -364,
	-250, -252, 254, -384, -251, 257, -554, 255, 253, 112,
	258, 312, 113, 248, -364, -364, 254, -288, 250, 36,
	-364, -306, 248, 368, 312, 255, 21, 269, -305, 248,
	113, -367, 254, 258, 255, 253, -363, 128, -355, 155,
	250, 44, 400, -363, 569, 269, -363, -363, -363, -363,
	-363, -363, -363, 286, 286, -363, -363, -363, -363, -363,
	-363, -363, -363, -363, -363, -363, 165, -363, -363, -363,
	-363, -363, -363, 86, 281, 282, 314, -586, 425, 32,
	380, 380, 381, -597, 376, 43, 32, -181, 374, -309,
	-307, -378, 32, -330, -331, -332, -333, -335, -334, 69,
	73, 75, 79, 70, 71, 72, 76, 81, 74, 32,
	160, -365, -370, 36, -367, 92, -365, -191, -206, -204,
	-365, 86, -448, -610, -612, 507, 504, 510, -450, -450,
	102, 250, 86, 128, -450, -450, 42, -366, -607, 511,
	505, -139, 160, 83, -256, -230, -231, -232, -233, -261,
	-343, 196, 199, 201, 202, 203, 204, 206, 207, 208,
	209, 210, 213, 214, 211, 212, 263, 191, 192, 193,
	194, 215, 177, 197, 563, 178, 179, 180, 181, 182,
	183, 186, 187, 188, 189, 185, -367, -240, -236, -324,
	-194, -206, -367, 92, -367, 147, 125, -6, 123, -151,
	-150, -149, 126, 636, 642, 125, 125, 125, 87, 87,
	87, 160, 87, 87, 87, 160, 87, 160, 102, -529,
	484, 41, 160, 86, 87, 160, 62, 160, 128, 87,
	160, -394, -367, 92, -394, 192, 87, 62, -139, 92,
	160, -207, 38, 39, 159, 457, -367, -540, 87, -456,
	160, 250, 159, 159, -432, 403, -366, -434, 21, 565,
	-343, 40, -350, 128, 673, -367, 87, -396, -396, 117,
	-392, -389, 87, 125, -394, 123, -259, -261, 419, 420,
	-394, -259, -260, -266, 156, 195, 263, 194, 193, 191,
	419, 420, -278, -423, 562, -207, 87, -367, -394, -394,
	87, -394, -394, 17, -367, -278, -390, -394, -212, -212,
	87, 87, -463, -464, -463, -463, 87, 87, 87, 87,
	-463, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 86, 102, 104, 102, 104, -522, -619, 64,
	644, 63, 447, 107, 317, 160, 102, 92, 674, 160,
	128, 92, -367, -367, 17, 246, -367, 17, 17, 17,
	-254, -254, 174, 92, -598, 321, 374, 515, 246, 374,
	321, 515, 246, -475, 102, 411, -241, -242, -243, -244,
	-245, 138, 161, 162, -230, -219, 86, -219, -588, 486,
	427, 437, -363, -386, -385, 376, 43, -509, 448, 433,
	434, -433, 277, -356, -594, 99, 128, 83, 354, 358,
	360, 359, 355, 356, 357, -412, -413, -411, -415, -356,
	-581, 86, 86, -188, 36, 136, -180, 334, 86, 86,
	36, -486, 344, -261, -254, -198, -367, 17, 160, -580,
	159, -1, -367, -367, -426, -379, -324, -394, -394, -324,
	-379, -379, -381, -367, -246, -486, -261, 36, -304, 243,
	239, -460, 314, 315, -461, -476, 317, -478, 86, -258,
	-343, -251, -553, -554, -414, -367, 113, -553, 113, 86,
	-258, -343, -343, -307, -343, -367, -367, -367, -367, -314,
	-313, -343, -316, 33, -317, -367, -367, -367, -367, 113,
	-367, 113, -283, 42, 49, 50, 51, 334, 285, 335,
	-363, -363, 198, -286, 42, 447, 449, 450, -316, 102,
	102, 102, 102, 92, 92, 92, -363, -363, 102, 92,
	-370, 92, -555, 173, 46, 47, 102, 102, 102, 102,
	42, 92, -291, 42, 297, 301, 298, 299, 300, 92,
	102, 42, 102, 42, 102, 42, -367, 86, -556, -557,
	92, -475, -588, -363, 380, -447, 128, 128, -386, -590,
	96, 428, -590, -593, 327, -183, 515, 33, -223, 243,
	239, -581, -438, -437, -343, -203, -203, -203, -203, -203,
	-203, 69, 80, 69, -216, 86, 69, 74, 69, 74,
	69, -332, 69, 80, -438, -205, -219, -370, 87, -604,
	-603, -602, -600, 77, 251, 78, -400, -450, 504, 508,
	509, -434, -382, 92, -441, -227, 24, -254, -254, -507,
	307, 308, 87, 160, -261, -326, 19, 159, 121, -6,
	-147, -149, -394, -6, -394, 638, 393, 639, 92, 102,
	102, -537, 468, 463, 465, 113, -403, -524, -523, 62,
	-188, -215, -516, -559, -522, -367, 674, 674, 674, 674,
	92, 62, -188, -516, -227, -529, -209, -208, 45, -367,
	102, 17, -431, -426, 147, 147, -367, 404, -442, 92,
	426, 92, 246, 674, 92, -350, -389, -394, 87, -269,
	182, 181, -269, 36, 87, 87, -493, -493, -492, -495,
	-492, -269, -269, 87, 86, -207, 87, 24, 87, 87,
	87, -394, 87, 87, 160, -512, 524, -513, 598, -463,
	-463, -463, -463, -463, -463, -463, -463, -463, -463, -463,
	-463, -463, -463, -463, -463, -463, -405, -404, 269, 469,
	651, 651, 469, 651, 651, 87, 160, -562, 160, -358,
	322, -358, -349, 92, 250, 92, 170, -367, 92, 654,
	-254, -356, -187, 36, -186, 122, 92, -367, -367, -367,
	314, -367, 314, -367, -367, 92, 92, 87, 160, -343,
	87, 36, -247, -248, -249, -258, -250, -252, 36, -589,
	96, -584, 92, -367, 93, -590, 158, 378, 42, 429,
	430, 445, 373, 102, 102, 435, -582, -367, -182, 246,
	374, -592, 53, 128, 92, -254, -411, -355, 155, 288,
	-246, 347, -321, -320, -367, 92, -247, -188, -254, -254,
	-247, -247, -188, -487, 346, 21, 102, 146, -220, 84,
	159, -206, -255, -367, 147, 87, -324, -246, -324, -324,
	-379, -487, -188, -472, 318, 86, -470, 86, -470, 113,
	355, -479, -477, 269, -312, 46, 48, -261, -551, -367,
	-549, -551, -367, -549, -549, -414, -394, -312, -258, 250,
	32, 239, -315, 352, 353, 358, 360, -443, 313, 118,
	-443, 160, -207, 160, -367, -278, -278, 32, 92, 92,
	-256, 87, 160, 128, 92, -589, -584, 128, -448, 92,
	92, -590, 92, 92, -594, 128, -257, 246, -356, 160,
	-223, -223, -324, 160, 128, -225, -224, 83, 84, -226,
	83, -224, -224, 69, -217, 92, 69, 69, -324, -602,
	-601, 24, -554, -554, -554, 87, 87, 15, -232, 42,
	-325, 20, 21, 147, 125, 123, 125, 125, -367, 87,
	87, -499, 629, -533, -535, 463, 21, 21, 15, 251,
	87, -516, 674, -516, -537, 46, 47, -426, -442, 448,
	-254, 160, 674, -259, -297, 92, -394, 87, -394, 87,
	92, 87, 92, -212, 21, 87, 160, 87, 87, 87,
	160, 87, 87, -394, 87, -562, -359, 192, 92, -359,
	374, -368, -367, 17, -367, -185, 250, -246, -254, 340,
	92, -367, -475, 314, -475, 314, 246, -367, -236, -419,
	564, -243, -261, 244, -188, 87, 160, -188, 92, -587,
	439, 102, 42, 102, 158, 431, -510, -174, 96, -256,
	33, -223, -591, 96, 128, 673, 86, -363, -363, -363,
	-185, -367, 87, 160, -363, -363, 87, -185, 87, 87,
	-276, 565, -488, 268, 102, 146, 102, 146, 102, -365,
	-206, -367, -324, -580, 159, -324, -488, -462, 319, 102,
	-390, 86, -390, 86, -471, 316, 86, 87, 160, -367,
	-343, -273, -272, -270, 107, 118, 42, 417, -271, 96,
	155, 302, 305, 304, 280, 303, -302, -383, 83, 423,
	352, 353, -415, 629, 553, 253, 112, 113, 405, -384,
	86, 86, 84, 322, 86, 86, -551, 87, -312, -343,
	42, -315, 42, 366, 313, -313, -367, 155, -278, 87,
	-557, 92, -587, 92, -450, -592, 92, -174, -256, -581,
	-212, -437, -522, -394, 86, -394, 87, 86, 69, 11,
	19, -387, -394, -402, 658, 660, 661, 252, -6, 639,
	393, -293, 630, 92, 21, 92, -531, 92, -438, -499,
	-142, -290, -355, 285, 87, -296, 138, 565, 87, 87,
	-463, -463, -466, -465, -469, 469, 314, 477, -402, 92,
	92, 87, 87, 92, -367, 170, 92, 374, -185, 341,
	342, 343, 673, 92, -475, 92, -475, -367, 314, 92,
	92, -234, -261, -178, 565, -276, -249, -178, 21, 565,
	377, 42, 102, 42, 432, 92, -182, 128, 108, 109,
	-351, -352, 92, -421, -278, -280, 92, -320, -387, -387,
	-274, -188, 36, -275, -318, -415, -141, -140, -274, 86,
	-489, 164, 102, 146, 102, 102, -324, -324, -489, -478,
	21, 87, -457, 87, -457, 86, 128, -390, -477, -480,
	62, -270, 107, -390, 92, -280, -281, 42, 301, 297,
	128, 128, -282, 42, 281, 282, -292, 86, 312, 15,
	198, 86, 113, 113, -254, -421, -421, -552, 354, 355,
	356, 361, 358, 359, 357, 360, -552, -421, -421, 86,
	-444, -443, -390, -363, -363, 155, -591, -213, -218, -550,
	-367, 253, 21, 21, -508, 565, 659, 86, 86, -367,
	-367, -347, 631, 102, 92, 465, -293, -500, 632, -527,
	-470, -278, 128, 87, 76, 563, 566, 87, -468, 120,
	431, 435, -388, -391, 102, 104, 190, 158, 87, 87,
	-367, -367, -354, -353, 92, -236, 92, -236, 92, 314,
	-475, 564, -179, 61, 511, 92, 93, 426, 92, 93,
	377, -174, 92, 674, 160, 128, 87, -458, 269, -188,
	160, -318, -355, -142, -458, -277, -319, -367, 92, -506,
	173, 345, 565, 102, 146, 102, -212, -490, 173, 345,
	-461, 87, 87, 87, -457, 102, 87, -484, -481, 86,
	-318, 271, 138, 92, 92, 102, 86, -517, 32, 92,
	-422, 86, 87, 87, 87, 87, -421, 102, -278, -363,
	87, 87, 160, 661, 86, -402, -402, 86, 21, -347,
	-501, 633, 92, -536, 468, -530, -528, 463, 464, 465,
	466, 92, 564, 66, 567, -467, -468, 435, -388, -391,
	627, 475, 475, 475, 674, 160, 128, -236, -236, -475,
	92, -237, -367, 312, 448, -352, 92, -424, -459, 321,
	21, -318, -363, -459, 87, 160, -363, -363, 345, 102,
	146, 102, -213, 345, -473, 320, 87, -484, -318, -483,
	-482, 319, 272, 86, 87, -394, -406, -363, 87, -295,
	-294, 561, -421, -424, 84, -424, 84, -424, 84, -424,
	84, 87, -278, -367, 253, -137, 86, 87, 87, -348,
	-367, -531, 92, -538, 251, -534, -535, 467, -528, 21,
	465, 21, 21, -143, 160, 66, 117, 476, 476, 476,
	-236, -353, 92, 92, -236, -235, 36, 470, 404, -425,
	259, 366, 367, 96, 565, 352, 353, 371, 370, 369,
	372, 21, -460, -278, -319, -387, -387, 102, 102, 87,
	160, -367, 268, 86, -401, -395, -394, 268, 87, -367,
	-301, -299, -300, 83, 482, 310, 311, 87, -552, -552,
	-552, -552, -302, 87, 160, -400, 87, 160, -545, 86,
	102, -533, -532, -534, 21, -531, 21, -531, -531, 472,
	565, -467, -236, 92, -363, -363, 92, 92, 351, -363,
	-363, -363, -343, 86, -472, -482, -481, -401, 87, 160,
	-443, -300, 83, -299, 83, 16, 15, -424, -424, -424,
	-424, 86, 87, -367, -548, 32, 87, -544, -543, -344,
	-539, -367, 468, 469, 92, -531, 128, 566, -622, -621,
	650, 102, 102, -367, 102, 102, 102, -457, -462, 87,
	-395, -298, 307, 308, 32, 173, -298, -400, -547, -546,
	-345, 87, 160, 159, 92, 567, 92, 87, -478, 107,
	42, 309, 87, 160, 128, -543, -367, -546, 42, -394,
	159, -367,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 0, 317, 318, 319,
	320, 321, 322, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 0, 0, 0, 0, 0, 726, 727, 0,
	690, 0, 0, 0, 0, 0, 0, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 432, 433, 434, 435, 436,
	437, 438, 439, 440, 441, 0, 351, 347, 259, 260,
	261, 262, 263, 264, 265, 358, 359, 539, 0, 0,
	0, 0, 809, -2, 103, 0, 0, 0, 0, 0,
	340, 0, 331, 331, 0, 0, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, -2,
	739, 0, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 416,
	417, 418, 412, 413, 415, 414, -2, 0, 0, 739,
	0, 0, 0, 817, 0, 0, 0, 860, 878, 23,
	0, 7, 9, 10, 11, 12, 13, 14, 15, 16,
	17, 18, 0, 0, 19, 0, 19, 0, 0, 0,
	1439, 1440, 1441, 1442, 2245, 2215, -2, 1978, 1952, 2139,
	2140, 2035, 2047, 1946, 2283, 2284, 2285, 2286, 2287, 2288,
	2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298,
	2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308,
	2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318,
	2319, 2320, 2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328,
	2329, 2330, 2331, 2332, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
	1944, 1945, 1947, 1948, 1949, 1950, 1951, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2036, 2037,
	2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
	2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
	2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109,
	2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
	2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129,
	2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2141,
	2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151,
	2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
	2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
	-2, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
	2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
	2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201,
	2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211,
	2212, 2213, 2214, 2216, 2217, 2218, 2219, 2220, 2221, 2222,
	2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, -2, -2,
	-2, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242,
	2243, 2244, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253,
	2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263,
	2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 0,
	315, 313, 1922, 1946, 1952, 1978, 2035, 2047, 2048, 2087,
	2139, 2140, 2172, 2215, 2231, 2232, 2233, 2245, 0, 0,
	1015, 0, 787, 0, 0, 792, 1386, 787, 352, 728,
	729, 817, 843, 688, 0, 390, 0, 1968, 394, 2222,
	0, 0, 0, 0, 685, 384, 385, 386, 387, 388,
	389, 0, 0, 988, 0, 0, 380, 0, 346, 2037,
	2244, 1443, 0, 0, 0, 0, 0, 202, 1141, 204,
	1143, 208, 216, 0, 0, 0, 221, 222, 225, 226,
	227, 228, 229, 0, 233, 0, 235, 238, 0, 240,
	241, 0, 244, 245, 246, 0, 256, 257, 258, 1144,
	1145, 1146, -2, 131, 1013, 1879, 1765, 0, 1772, 1785,
	1796, 1525, 1526, 1527, 1528, 0, 0, 0, 0, 0,
	0, 1536, 1537, 0, 1567, 2287, 2328, 2329, 0, 1545,
	1546, 1547, 1548, 1549, 1550, 0, 142, 154, 155, 1818,
	1819, 1820, 1821, 1822, 1823, 1824, 0, 1826, 1827, 1828,
	1736, 1512, 1439, 0, 2296, 0, 2318, 2323, 2324, 2325,
	2326, 2317, 0, 0, 1720, 0, 1710, 0, 0, -2,
	-2, 0, 0, 2112, -2, 2330, 2331, 2332, 2293, 2314,
	2322, 2297, 2298, 2321, 2289, 2290, 2291, 2284, 2285, 2286,
	2288, 2300, 2302, 2313, 0, 2309, 2319, 2320, 2220, 0,
	0, 2267, 0, 0, 0, 2262, 156, 157, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1731, -2, 1733, -2, 1735,
	-2, 1738, -2, -2, -2, -2, 1743, 1744, -2, 1746,
	-2, -2, -2, -2, -2, -2, -2, 1722, 1723, 1724,
	1725, 1714, 1715, 1716, 1717, 1718, 1719, -2, -2, -2,
	843, 936, 0, 843, 0, 818, 865, 868, 871, 874,
	821, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 341, 342, 330, 332, 0,
	336, 0, 0, 332, 329, 323, 0, 1183, 1183, 1183,
	0, 0, 0, 1183, 1183, 1183, 1183, 1183, 0, 1183,
	0, 0, 0, 0, 0, 1183, 0, 1050, 1148, 1149,
	1150, 1181, 1182, 1272, 0, 0, 0, 744, 740, 741,
	742, 743, 831, 0, 833, 836, 0, 0, 665, 665,
	903, 903, 0, 611, 0, 0, 0, 665, 0, 625,
	617, 0, 0, 0, 665, 0, 0, 838, 838, 0,
	668, 675, 665, 665, -2, 665, 665, 662, 665, 0,
	0, 1197, 631, 632, 633, 617, 617, 636, 637, 638,
	648, 649, 676, 1903, 0, 0, 539, 539, 0, 539,
	539, 0, 539, 539, 539, 0, 746, 1994, 2082, 1975,
	2053, 1932, 2037, 2244, 0, 288, 2112, 293, 0, 1977,
	1997, 0, 0, 2016, 0, -2, 0, 368, 843, 0,
	0, 817, 0, 0, 0, 0, 539, 539, 539, 539,
	539, 1271, 539, 539, 539, 539, 539, 0, 0, 0,
	539, 539, 539, 539, 0, 879, 880, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 5, 6, 19,
	0, 0, 0, 0, 0, 0, 110, 109, 0, 1880,
	1898, 1831, 1832, 1833, 1885, 1835, 1889, 1889, 1889, 1889,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1889, 1889, 0, 0, 1878, 1855, 1887, 1887, 1887, 1885,
	1882, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1892, 1892, 1895, 1895, 1892,
	0, 430, 428, 429, 1761, 0, 0, 0, 0, 787,
	791, 1384, 0, 0, 0, 843, -2, 0, 0, 689,
	391, 1444, 0, 0, 395, 0, 396, 0, 0, 398,
	0, 0, 0, 419, 0, 422, 406, 407, 408, 409,
	402, 0, 182, 0, 382, 383, 0, 0, 348, 0,
	0, 0, 540, 0, 0, 0, 0, 0, 0, 213,
	209, 217, 220, 230, 237, 0, 249, 251, 254, 210,
	218, 223, 224, 231, 252, 211, 214, 215, 219, 253,
	255, 212, 232, 236, 250, 234, 239, 242, 243, 248,
	0, 183, 0, 0, 0, 0, 0, 1771, 0, 0,
	1804, 1805, 1806, 1807, 1808, 1809, 1810, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -2, 1765, 0, 0,
	1531, 1532, 1533, 1534, 0, 1538, 0, 1568, 0, 0,
	0, 0, 0, 0, 1825, 1829, 0, 1761, 1761, 0,
	1761, 1757, 0, 0, 0, 0, 0, 0, 1761, 1693,
	0, 0, 1695, 1711, 0, 0, 1697, 1698, 0, 1701,
	1702, 1761, 0, 1761, 1706, 1761, 1761, 1761, 1689, 1690,
	0, 1757, 1757, 1757, 1757, 0, 0, 1757, 1757, 1757,
	1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
	1757, 1757, 0, 0, 0, 0, 838, 0, 844, 0,
	-2, 0, 862, 864, 866, 867, 869, 870, 872, 873,
	875, 876, 823, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 72, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 334, 0, 339, 325, 2074, 0,
	324, 0, 0, 0, 0, 0, 1012, 0, 0, 1183,
	1183, 1183, 1051, 0, 0, 0, 0, 0, 0, 0,
	0, 1183, 1183, 1183, 1183, 0, 1203, 0, 0, 0,
	746, 745, 0, 832, 0, 0, 71, 600, 601, 602,
	903, 0, 0, 604, 605, 0, 606, 0, 0, 617,
	665, 665, 623, 624, 619, 618, 671, 672, 668, 0,
	668, 668, 903, 0, 642, 643, 644, 665, 665, 650,
	839, 0, 651, 652, 668, 0, 673, 674, 903, 0,
	0, 903, 903, 0, 660, 661, 663, 665, 0, 0,
	1183, 0, 681, 619, 619, 1904, 1905, 0, 0, 1194,
	0, 0, 0, 0, 684, 0, 0, 0, 446, 447,
	0, 0, 747, 0, 267, 271, 0, 274, 0, 2082,
	0, 2082, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 311, 312, 0, 0, 0, 0, 302, 305, 1378,
	1379, 1138, 1139, 306, 307, 360, 361, 0, 838, 861,
	863, 857, 858, 859, 0, 1185, 0, 0, 0, 0,
	0, 539, 0, 0, 0, 0, 0, 722, 0, 1030,
	724, 0, 0, 0, 0, 0, 911, 905, 907, 983,
	142, 881, 8, 127, 124, 0, 19, 0, 0, 19,
	19, 0, 19, 316, 0, 1901, 1899, 1900, 1834, 1886,
	0, 1860, 0, 1861, 1862, 1863, 1874, 1875, 0, 0,
	1856, 0, 1857, 1858, 1859, 1850, 0, 1851, 1852, 0,
	1853, 1854, 314, 427, 0, 0, 1762, 1016, 0, 765,
	779, 760, 0, 768, 0, 0, 1386, 0, 0, 0,
	0, 748, 779, 750, 0, 768, 838, 815, 0, 793,
	0, 0, 392, 0, 403, 397, 0, 404, 399, 400,
	0, 0, 421, 423, 424, 425, 410, 411, 686, 377,
	378, 379, 369, 370, 371, 372, 373, 374, 375, 376,
	0, 0, 381, 152, 0, 349, 350, 0, 0, 0,
	196, 197, 198, 199, 200, 201, 203, 187, 711, 713,
	1130, 1142, 0, 1133, 0, 206, 247, 179, 0, 0,
	0, 1766, 1767, 1768, 1769, 1770, 1775, 0, 1777, 1779,
	1781, 1783, 0, 1801, -2, -2, 1513, 1514, 1515, 1516,
	1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1786, 1799,
	1800, 0, 0, 0, 0, 0, 0, 1797, 1797, 1792,
	0, 1551, 1380, 1381, 1529, 0, 0, 1565, 1569, 0,
	0, 0, 0, 0, 0, 1165, 1885, 0, 143, 1756,
	1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
	1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
	1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 0,
	0, 1765, 0, 0, 0, 1758, 1759, 0, 0, 0,
	1648, 0, 0, 1654, 1655, 1656, 0, 774, 0, 1721,
	1694, 1712, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 937, 0, 783, 785, 786, 812, 793, 819, 0,
	0, 0, 102, 107, 0, 1239, 0, 0, 0, 0,
	0, 0, 0, 75, 1198, 76, 1200, 0, 0, 0,
	0, 0, 0, 343, 344, 0, 0, 338, 326, 2074,
	328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1066, 1067, 537, 1124, 0, 0, 0, 1140,
	1169, 1179, 0, 0, 0, 0, 0, 1245, 1052, 1057,
	1058, 1059, 1053, 1054, 1060, 1061, 0, 834, 0, 0,
	952, 603, 666, 667, 904, 607, 0, 0, 614, 2037,
	619, 903, 903, 626, 620, 627, 670, 628, 629, 630,
	668, 903, 903, 840, 665, 668, 653, 669, 668, 1386,
	657, 0, 664, 1386, 682, 1386, 0, 680, 634, 635,
	1247, 836, 444, 445, 450, 452, 0, 504, 504, 504,
	484, 504, 0, 0, 472, 1906, 0, 0, 0, 0,
	481, 1906, 0, 0, 1906, 1906, 1906, 1906, 1906, 1906,
	1906, 0, 0, 1906, 1906, 1906, 1906, 1906, 1906, 1906,
	1906, 1906, 1906, 1906, 0, 1906, 1906, 1906, 1906, 1906,
	1364, 1906, 0, 1195, 494, 495, 496, 497, 502, 503,
	0, 0, 532, 0, 0, 1065, 0, 537, 0, 0,
	1107, 0, 0, 916, 0, 917, 918, 919, 914, 954,
	978, 978, 0, 978, 958, 1386, 0, 0, 0, 279,
	280, 268, 0, 269, 0, 0, 282, 283, 0, 285,
	286, 287, 294, 1975, 2053, 289, 291, 0, 0, 295,
	308, 309, 310, 0, 0, 300, 301, 0, 0, 363,
	364, 366, 0, 793, 1199, 73, 1186, 708, 1382, 709,
	710, 714, 0, 0, 717, 718, 719, 720, 721, 1032,
	0, 0, 1116, 1117, 1118, 1185, 903, 0, 912, 0,
	908, 984, 0, 986, 0, 0, 125, 19, 0, 118,
	115, 0, 0, 0, 0, 0, 1881, 1830, 1902, 0,
	0, 0, 1883, 0, 0, 0, 0, 0, 108, 795,
	755, 0, 759, 776, 0, 780, 0, 0, 772, 764,
	769, 0, 0, 789, 756, 1385, 0, 0, 0, 0,
	749, 0, 0, 754, 793, 0, 816, 845, 846, 849,
	1445, 0, 405, 401, 420, 0, 0, 0, 0, 190,
	1127, 0, 191, 195, 185, 0, 0, 0, 1132, 0,
	1129, 1134, 0, 205, 0, 0, 180, 181, 1230, 1239,
	0, 0, 0, 1776, 1778, 1780, 1782, 1784, 0, 1787,
	1797, 1797, 1793, 0, 1788, 0, 1790, 0, 1766, 1535,
	0, 1570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 849, 0, 0, 1638, 1639, 0, 0, 1643, 0,
	1645, 1646, 1647, 1649, 0, 0, 0, 1653, 0, 1692,
	1713, 1696, 1699, 0, 1703, 0, 1705, 1707, 1708, 1709,
	0, 843, 843, 0, 0, 1609, 1609, 1609, 0, 0,
	0, 0, 1609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1554, 0, 1555, 1556, 0, 0,
	0, 938, 813, 0, 0, 0, 0, 0, 1237, 0,
	92, 0, 0, 0, 0, 97, 0, 0, 77, 0,
	0, 1206, 1207, 0, 0, 345, 333, 335, 0, 327,
	0, 1184, 0, 0, 0, 0, -2, 1032, 836, 0,
	836, 1077, 1906, 541, 0, 0, 1126, 0, 1096, 0,
	0, 0, -2, 0, 0, 0, 1179, 0, 0, 0,
	1249, 0, 0, 0, 733, 737, 23, 837, 0, 610,
	608, 0, 612, 0, 613, 665, 621, 622, 903, 645,
	646, 0, 0, 903, 665, 665, 656, 668, 677, 0,
	678, 1386, 1249, 0, 0, 1194, 1315, 1283, 462, 0,
	1399, 1400, 505, 0, 1406, 1415, 1183, 1477, 0, 1415,
	0, 0, 1417, 1418, 0, 0, 0, 0, 485, 486,
	0, 471, 0, 0, 0, 0, 0, 0, 470, 0,
	0, 515, 0, 0, 0, 0, 0, 1907, 1906, 1906,
	0, 479, 480, 0, 483, 0, 0, 0, 0, 0,
	0, 0, 0, 1906, 1906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1355, 0, 0, 0,
	0, 0, 0, 0, 1370, 1371, 0, 1077, 1906, 0,
	0, 0, 0, 541, 1121, 1121, 1094, 1112, 0, 448,
	449, 512, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 0, 943, 0, 0, 0, 0, 0, 0,
	0, 836, 979, 0, 981, 982, 956, -2, 0, 916,
	961, 1761, 0, 272, 273, 0, 0, 278, 296, 298,
	270, 0, 0, 0, 297, 299, 303, 304, 362, 365,
	367, 855, 0, 0, 1273, 0, 1033, 1034, 1036, 1037,
	0, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1959, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1031, 725, 1119, 894,
	906, 913, 985, 987, 143, 909, 0, 128, 19, 127,
	119, 120, 0, 19, 0, 0, 0, 0, 1891, 1890,
	1876, 0, 1877, 1888, 1893, 0, 1896, 0, 431, 799,
	0, 0, 779, 781, 0, 0, 779, 0, 0, 788,
	0, 0, 0, 0, 0, 0, 0, 779, 855, 795,
	0, 852, 850, 851, 0, 0, 687, 153, 426, 0,
	0, 0, 0, 0, 712, 0, 1131, 187, 0, 0,
	207, 0, 0, 0, 1239, 1234, 1760, 1789, 1791, 0,
	1798, 1794, 1530, 1539, 1566, 0, 0, 1572, 1584, 1584,
	0, 0, 0, 1575, 1889, 1889, 1578, 1885, 1887, 1885,
	1584, 1584, 0, 1166, 0, 1167, 849, 144, 0, 0,
	1644, 0, 0, 0, 775, 0, 0, 0, 1605, 1607,
	1609, 1609, 1616, 1610, 1617, 1618, 1609, 1609, 1609, 1609,
	1623, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
	1609, 1609, 1603, 0, 0, 1819, 1820, 784, 0, 0,
	826, 827, 828, 829, 830, 0, 0, 62, 62, 1239,
	0, 101, 93, 0, 0, 0, 0, 0, 0, 0,
	1210, 1212, 337, 0, 78, 79, 81, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 1018, 1019, 1021,
	0, 1024, 1025, 1026, 0, 0, 1392, 0, 1081, 1078,
	1079, 1080, 0, 1121, 542, 543, 544, 545, 0, 0,
	0, 1125, 0, 0, 1089, 0, 0, 0, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, -2, 1189, 0, 1386,
	0, 0, 1392, 1222, 0, 0, 1227, 0, 1392, 1392,
	0, 1257, 0, 1246, 787, 0, -2, 0, 0, 735,
	0, 0, 953, 609, 615, 903, 639, 841, 842, 1386,
	903, 903, 665, 683, 679, 1257, 1248, 0, 451, 504,
	0, 1303, 0, 0, 1309, 0, 1316, 455, 0, 506,
	0, 1405, 1433, 1416, 1433, 1478, 1433, 1433, 1183, 0,
	506, 0, 0, 473, 0, 0, 0, 0, 0, 469,
	509, 849, 456, 458, 459, 460, 513, 514, 516, 0,
	518, 519, 475, 487, 488, 489, 490, 491, 492, 493,
	0, 0, 0, 482, 498, 499, 500, 501, 457, 1332,
	1333, 1334, 1337, 1338, 1339, 1340, 0, 0, 1343, 1344,
	1345, 1346, 1347, 1430, 1431, 1432, 1348, 1349, 1350, 1351,
	1352, 1353, 1354, 1372, 1373, 1374, 1375, 1376, 1377, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 0, 0, 1367,
	0, 0, 1081, 0, 0, 0, 0, 0, 1121, 535,
	0, 0, 536, 1096, 0, 1114, 0, 1108, 1109, 0,
	0, 757, 903, 355, 0, 948, 939, 0, 923, 0,
	925, 945, 926, 946, 0, 0, 930, 0, 932, 0,
	928, 929, 934, 927, 903, 915, 955, 980, 957, 960,
	962, 963, 969, 0, 0, 0, 0, 266, 275, 276,
	277, 284, 0, 561, 290, 811, 0, 1383, 715, 716,
	1274, 1275, 723, 0, 1038, 892, 0, 0, 123, 126,
	0, 121, 0, 0, 0, 0, 113, 111, 1884, 0,
	0, 801, 167, 0, 0, 0, 777, 0, 782, 779,
	763, 773, 762, 770, 771, 790, 1387, 1388, 1389, 1390,
	0, 779, 753, 752, 814, 799, 847, 848, 0, 1446,
	393, 0, 1128, 187, 192, 193, 194, 188, 186, 1135,
	0, 1137, 0, 1232, 0, 0, 1795, 1571, 1540, 1573,
	1585, 1586, 1574, 0, 1542, 1543, 1576, 1577, 1579, 1580,
	1581, 1582, 1583, 1544, 0, 1168, 1640, 0, 1642, 1650,
	1651, 0, 1700, 1704, 0, 0, 0, 0, 0, 1614,
	1615, 1619, 1620, 1621, 1622, 1624, 1625, 1626, 1627, 1628,
	1629, 1630, 1631, 1632, 1633, 1634, 843, 1604, 0, 0,
	0, 0, 0, 0, 0, 824, 0, 0, 0, 64,
	0, 64, 1238, 1240, 0, 983, 0, 0, 98, 0,
	1216, 1386, 1208, 0, 1209, 0, 0, 80, 82, 0,
	2038, 0, 0, 0, 0, 1185, 1011, 1027, 1023, 0,
	0, 0, 0, 1393, 1394, 1396, 1397, 1398, 0, 1049,
	0, 0, 1069, 1070, 1071, 1083, 0, 547, 548, 0,
	0, 0, 560, 556, 557, 558, 538, 1120, 1103, 0,
	0, 1092, 0, 0, 1102, 0, 1190, 1906, 1906, 1906,
	1216, 0, 0, 1317, 1906, 1906, 0, 1224, 1226, 1216,
	0, 0, 1321, 1260, 0, 0, 1251, 0, 978, 0,
	0, 903, 734, 737, 738, 835, 616, 654, 658, 655,
	903, 1260, 443, 1281, 0, 0, 0, 0, 0, 1313,
	0, 0, 1285, 0, 474, 507, 0, -2, 0, 1434,
	0, 1419, 1434, 0, 0, 1433, 0, 463, 506, 0,
	0, 0, 520, 525, 526, 0, 522, 523, 1473, 0,
	524, 0, 511, 0, 517, 1335, 1336, 0, 1341, 1342,
	0, 1366, 0, 0, 454, 527, 0, 0, 0, 528,
	529, 534, 1122, 1123, 1089, 0, 1103, 0, 1113, 0,
	1110, 1111, 843, 0, 0, 920, 949, 0, 0, 921,
	0, 922, 924, 947, 0, 941, 931, 933, 354, 964,
	0, 0, 966, 967, 968, 959, 292, 856, 1035, 0,
	877, 0, 0, 910, 0, 19, 0, 0, 116, 1894,
	1897, 803, 0, 800, 168, 0, 0, 0, 0, 767,
	778, 761, 1391, 751, 801, 853, 854, 189, 184, 1136,
	1242, 0, 1233, 0, 1497, 1553, 0, 1652, 0, 1609,
	1606, 1609, 1608, 1600, 0, 1557, 0, 1559, 1560, 1561,
	0, 1563, 1564, 0, 822, 0, 60, 0, 63, 61,
	0, 100, 94, 0, 0, 1204, 0, 1216, 1211, 0,
	0, 83, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 1020, 1022, 0, 1055, 1321, 0, 1055, 1082, 1068,
	0, 0, 549, 550, 0, 553, 559, 1084, 0, 0,
	1086, 1087, 1088, 0, 0, 1100, 0, 0, 0, 0,
	1178, 1180, 1196, 0, 0, 0, -2, 1228, 0, -2,
	1221, 0, 1266, 0, 1258, 0, 1250, 0, 1253, 903,
	903, -2, 731, 736, 0, 659, 1266, 1283, 0, 1304,
	0, 0, 0, 0, 0, 0, 0, 1284, 0, 1297,
	508, 1435, -2, 1449, 1451, 0, 1195, 1454, 1455, 0,
	0, 0, 0, 0, 0, 1504, 1463, 0, 0, 1467,
	1468, 1469, 0, 0, 1472, 0, 1813, 1814, 0, 1476,
	0, 0, 0, 0, 0, 0, 0, 1413, 464, 465,
	0, 467, 468, 1906, 1474, 510, 461, 1906, 477, 1365,
	1368, 1369, 533, 530, 531, 1092, 1095, 1106, 1115, 758,
	838, 356, 357, 950, 0, 940, 942, 973, 970, 0,
	0, 1039, 893, 901, 2267, 2269, 2266, 117, 122, 0,
	0, 805, 0, 802, 0, 796, 798, 178, 766, 803,
	138, 170, 0, 0, 1541, 0, 0, 0, 1641, 1691,
	1612, 1613, 0, 1601, 0, 1595, 1596, 1597, 1602, 0,
	0, 825, 820, 65, 96, 0, 99, 0, 1205, 1213,
	1214, 1215, 69, 1185, 0, 1185, 0, 0, 0, 1014,
	1028, 0, 1041, 1048, 1062, 1201, 1395, 1047, 0, 0,
	546, 551, 0, 554, 555, 1104, 1103, 0, 1090, 1091,
	0, 1098, 0, 0, 1191, 1192, 1193, 1318, 1319, 1320,
	1276, 1223, 0, -2, 1329, 0, 1219, 1242, 1276, 0,
	1254, 0, 1261, 0, 1259, 1252, 843, 732, 1263, 453,
	1315, 1305, 0, 1307, 0, 0, 0, 0, 1286, -2,
	0, 1450, 1452, 1453, 1456, 1457, 1458, 1509, 1510, 1511,
	0, 0, 1461, 1506, 1507, 1508, 1462, 0, 0, 0,
	0, 0, 1811, 1812, 1502, 0, 0, 1420, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1421, 0, 0, 0,
	1412, 1414, 466, 0, 0, 1906, 1105, 353, 0, 0,
	974, 976, 971, 972, 895, 0, 0, 0, 0, 112,
	114, 129, 0, 804, 169, 0, 805, 140, 0, 161,
	0, 1243, 0, 1552, 0, 0, 0, 1611, 1598, 0,
	0, 0, 0, 0, 1815, 1816, 1817, 0, 1558, 1562,
	95, 1217, 0, 67, 0, 84, 1185, 85, 1185, 0,
	0, 0, 0, 1063, 1064, 1072, 1073, 0, 1075, 1076,
	552, 1085, 1093, 1097, 1100, 0, 1152, 1278, 0, 1225,
	1194, 1331, 1906, 1229, 1278, 0, 1323, 1906, 1906, 1244,
	0, 1256, 0, 1268, 0, 1262, 838, 442, 0, 1265,
	1301, 1306, 1308, 1310, 0, 1314, 1312, 1287, -2, 0,
	1295, 0, 0, 1459, 1460, 0, 0, 1710, 1906, 0,
	1492, 0, 1152, 1152, 1152, 1152, 0, 521, 476, 0,
	951, 965, 0, 902, 0, 0, 0, 0, 0, 794,
	130, 0, 139, 158, 0, 171, 172, 0, 0, 0,
	0, 1235, 0, 1500, 1501, 0, 1587, 0, 0, 0,
	1591, 1592, 1593, 1594, 1185, 69, 0, 86, 87, 0,
	1185, 0, 1040, 0, 1074, 1099, 1101, 1151, 1218, 0,
	1315, 1330, 0, 1220, 1322, 0, 0, 0, 1255, 1267,
	0, 1270, 730, 1264, 1282, 0, 1311, 1288, 1296, 0,
	1291, 0, 0, 0, 1505, 0, 1466, 0, 1471, 1480,
	1493, 0, 0, 1401, 0, 1403, 0, 1407, 0, 1409,
	0, 0, 478, 975, 977, 0, 1761, 897, 898, 0,
	807, 797, 141, 145, 0, 167, 164, 0, 173, 0,
	0, 0, 0, 1231, 0, 1498, 0, 1588, 1589, 1590,
	66, 68, 70, 1185, 88, 0, 1042, 1043, 1056, 1153,
	1906, 1906, 0, 0, 0, 1159, 1160, 1906, 1906, 1906,
	1164, 0, 1303, 1335, 1324, 1325, 1326, 1269, 1302, 1290,
	0, -2, 1298, 0, 0, 1763, 1773, 1774, 1464, 1470,
	1479, 1481, 1482, 0, 1494, 1495, 1496, 1503, 1152, 1152,
	1152, 1152, 1411, 896, 0, 0, 806, 0, 132, 0,
	0, 162, 163, 165, 0, 174, 0, 176, 177, 0,
	0, 1599, 90, 1044, 0, 0, 1156, 1157, 0, 0,
	0, 0, 1279, 0, 1281, 1292, -2, 0, 1300, 0,
	1465, 1483, 0, 1484, 0, 0, 0, 1402, 1404, 1408,
	1410, 1761, 899, 808, 1241, 0, 146, 0, 148, 150,
	151, 1436, 159, 160, 166, 175, 0, 0, 1029, 1045,
	0, 1154, 1155, 1158, 1161, 1162, 1163, 0, 1283, 1299,
	1764, 1485, 1487, 1488, 0, 0, 1486, 0, 133, 134,
	0, 147, 0, 0, 1236, 1499, 1046, 1280, 1277, 1489,
	1491, 1490, 900, 0, 0, 149, 1437, 135, 136, 137,
	0, 1438,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 675, 672,
	129, 128, 130, 3, 676, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 673, 141, 674, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 57987, 662, 57988, 663, 57989, 664,
	57990, 665, 57991, 666, 57992, 667, 57993, 668, 57994, 669,
	57995, 670, 57996, 671, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:855
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:862
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:868
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:876
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:882
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:886
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:905
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:911
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:916
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:920
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:953
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:968
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:979
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:991
		{
			yyVAL.str = ""
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:995
		{
			yyVAL.str = yyDollar[2].str
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1000
		{
			yyVAL.str = ""
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:1004
		{
			yyVAL.str = yyDollar[2].str
		}
	case 66:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1010
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
				Internal:    yyDollar[12].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1025
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1029
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1033
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1037
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1052
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1060
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion(), yyDollar[4].boolValUnion())
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1066
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1073
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1082
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1090
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1098
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1108
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1118
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1128
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1138
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1148
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1160
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1171
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
				Internal:    yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1182
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
				Internal:    yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1194
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
				Internal:     yyDollar[11].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1206
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
				Internal:     yyDollar[12].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1219
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
				Internal:    yyDollar[8].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1230
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
				Internal:     yyDollar[13].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1246
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1254
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1262
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1270
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1279
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1289
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1301
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1309
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1318
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1328
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1348
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1368
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1374
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1381
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1389
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1395
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1404
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1414
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1422
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1430
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1438
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1448
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1456
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1466
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1473
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1482
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1492
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1496
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1502
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1506
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1512
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1521
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1531
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1535
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1541
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1550
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1554
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1560
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1581
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1595
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1602
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1606
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1612
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1616
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1622
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1629
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1637
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1641
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1653
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1657
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1671
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1675
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1680
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1687
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1691
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1695
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1701
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1710
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1721
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1725
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1731
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1735
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1741
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1745
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1751
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1771
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1790
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1794
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1798
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1803
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1807
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1816
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1826
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1833
		{
			yyVAL.str = yyDollar[3].str
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1838
		{
			yyVAL.str = "\n"
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1845
		{
			yyVAL.str = yyDollar[3].str
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1850
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1854
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1882
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1886
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1900
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1920
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1939
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1964
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1968
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1972
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1977
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1981
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1987
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2000
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2011
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2024
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2028
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2038
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2051
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2064
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2070
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2076
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2084
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2094
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2104
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2108
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2112
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2116
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2120
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2124
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2131
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2135
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2141
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2148
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2157
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2161
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2291
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2295
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2299
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2303
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2307
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2311
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2315
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2319
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2323
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2327
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2331
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2335
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2339
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2343
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2347
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2351
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2355
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2359
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2363
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2367
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2382
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2391
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2398
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2405
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2414
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2432
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2436
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2442
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2449
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2457
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2461
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2465
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2469
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2475
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2479
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2485
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2492
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2499
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2508
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2538
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2542
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2546
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2552
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2558
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2562
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2569
		{
			yyVAL.str = yyDollar[3].str
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2575
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2579
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2585
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2593
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2611
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2619
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2627
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2650
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2669
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2676
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2683
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2691
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2698
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2705
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2714
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2722
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2728
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2732
		{
			yyVAL.str = yyDollar[1].str
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2738
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2742
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2748
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2752
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2766
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2778
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2783
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2788
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2793
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2799
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2805
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2810
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2814
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2818
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2822
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2826
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2830
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2834
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2838
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2842
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2848
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2852
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2856
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2860
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2865
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2870
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2876
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2889
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2902
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2915
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2928
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2944
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2951
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2962
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2973
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2977
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2983
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2993
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2999
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:3003
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:3009
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3015
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3019
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3023
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3027
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3033
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3046
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3052
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3056
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3060
		{
			yyLOCAL = tree.NewPrepareVar(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3067
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3071
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3077
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3083
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3094
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3100
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3104
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3108
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3112
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3116
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3120
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3128
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3136
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3146
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3154
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3164
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3174
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3190
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3194
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3202
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3210
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3250
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3254
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3260
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3266
		{
			yyVAL.str = yyDollar[1].str
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3271
		{
			yyVAL.str = "true"
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3272
		{
			yyVAL.str = "false"
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3273
		{
			yyVAL.str = yyDollar[1].str
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3278
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3284
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3293
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3300
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3308
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3312
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3337
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3360
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3370
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3377
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3386
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3394
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3398
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3404
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3415
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3419
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3425
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3429
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3453
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3463
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3473
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3489
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3507
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3511
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3517
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3521
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3527
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3533
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3541
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3551
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3559
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3569
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3579
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3589
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3596
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3600
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3604
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3608
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3612
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3619
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3625
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3629
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3633
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3637
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3641
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3645
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3649
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3653
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3658
		{
			yyVAL.str = ""
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3692
		{
			yyVAL.str = ""
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3696
		{
			yyVAL.str = string("COLUMN")
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3701
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3707
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3713
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3721
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3725
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3731
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3739
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3746
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3752
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3758
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3764
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3770
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3777
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3784
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3792
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3798
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3810
		{
			var keyType = tree.INDEX_TYPE_HNSW
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, 0)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3816
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3822
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3830
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3834
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3841
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3859
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3874
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3889
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3904
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3917
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3923
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3934
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3946
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3957
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountLock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3970
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3974
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3982
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3986
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3991
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3995
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4011
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4015
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4019
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4023
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4030
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4034
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4038
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4042
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4049
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4053
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4060
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4064
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4068
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4072
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4079
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4086
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4092
		{
			yyVAL.item = nil
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4097
		{
			yyVAL.item = nil
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4146
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4152
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4158
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4164
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4173
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4181
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4189
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4197
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4203
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4210
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4218
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4227
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4231
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4235
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4246
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4250
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4256
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4261
		{
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4265
		{
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4270
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4280
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4290
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4298
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4304
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4316
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4328
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4334
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4343
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4347
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4351
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4355
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4359
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4363
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4367
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4371
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4377
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4386
		{
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4388
		{
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4397
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4407
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4416
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4420
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4424
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4430
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4436
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4442
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4448
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4457
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4468
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4480
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4488
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4494
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4506
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4520
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4526
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4532
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4539
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4543
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4548
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4552
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4556
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4561
		{
			yyVAL.str = ""
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4565
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4571
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4586
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4590
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4596
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4604
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4611
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4619
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4625
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4631
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4636
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4644
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4650
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4655
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4661
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4667
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4671
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4699
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4707
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4715
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4723
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4727
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4733
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4746
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4754
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4763
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4769
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4777
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4785
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4793
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4799
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4807
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4813
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4821
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4827
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4837
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4842
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4849
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4865
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4878
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4889
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4893
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4899
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4905
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4914
		{
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4916
		{
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4919
		{
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4928
		{
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4932
		{
		}
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4937
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4946
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4953
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4959
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4967
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4974
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4981
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5001
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5009
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5019
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5023
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5029
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5036
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5042
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5050
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5057
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5064
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5083
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5087
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5091
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5096
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5100
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5104
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5110
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5119
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5123
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5129
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5133
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5139
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5143
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5149
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5154
		{
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5158
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5165
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5169
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5176
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5181
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5185
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5191
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5195
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5201
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5205
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5210
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5214
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5227
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5238
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5249
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5271
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5294
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5302
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5311
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5315
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5328
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5332
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5337
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5341
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5348
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5353
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5360
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5366
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5374
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5378
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5382
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5386
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5391
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5395
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5401
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5411
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5426
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5430
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5444
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5448
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5454
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5463
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5467
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5471
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5475
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5479
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5485
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5492
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5501
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5505
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5511
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5519
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5523
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5528
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5532
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5538
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5542
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5546
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5551
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5555
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5561
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5567
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5571
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5577
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5582
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5586
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5590
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5595
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5599
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5603
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5608
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5612
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5620
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5624
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5628
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5642
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5646
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5656
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5666
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5676
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5688
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5696
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5704
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5713
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5721
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5729
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5737
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5745
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5753
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5761
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5769
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5777
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5787
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5800
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5804
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5810
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5814
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5820
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5824
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5828
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5832
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5836
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5840
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5844
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5848
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5852
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5856
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5878
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5882
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5887
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5891
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5901
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5910
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5919
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5930
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5934
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5939
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5943
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5948
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5952
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5958
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5962
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5968
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5972
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5976
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5980
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5985
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5993
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5999
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6007
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6017
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6027
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6031
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6037
		{
			if strings.Contains(yyDollar[2].str, ":") {
				ss := strings.SplitN(yyDollar[2].str, ":", 2)
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: ss[0],
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
					Option:   ss[1],
				}
			} else {
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: yyDollar[2].str,
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6057
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6066
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6075
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6083
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6094
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6104
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6108
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6114
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6118
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6128
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6132
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6136
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6140
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6146
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 935:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6152
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6163
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6167
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6173
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6179
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6183
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6189
		{
			yyVAL.str = yyDollar[1].str
		}
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6196
		{
			yyVAL.str = yyDollar[2].str
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6202
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 944:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6208
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 945:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6212
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6216
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6220
		{
			yyVAL.str = tree.JOIN_TYPE_CENTROIDX + ":" + yyDollar[2].str
		}
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6226
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6230
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6236
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6240
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6246
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6250
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6256
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6260
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6270
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6283
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6289
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6295
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6309
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6320
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6327
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6331
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6337
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6347
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6351
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6355
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6360
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6364
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6368
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6372
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6377
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6381
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6385
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6389
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6393
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6398
		{
			yyVAL.str = ""
		}
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6402
		{
			yyVAL.str = yyDollar[1].str
		}
	case 980:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6406
		{
			yyVAL.str = yyDollar[2].str
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6412
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6416
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 983:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6421
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6425
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6429
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6433
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6437
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6443
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1011:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6485
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6498
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6504
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1014:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6510
		{
			yyLOCAL = tree.NewCreateProcedure(
				yyDollar[2].sourceOptionalUnion(), yyDollar[4].procNameUnion(), yyDollar[6].procArgsUnion(), yyDollar[8].str, yyDollar[9].str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6518
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6523
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6530
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6537
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6541
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6547
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6553
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6558
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6562
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6566
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6570
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6575
		{
			yyVAL.str = "sql"
		}
	case 1028:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6579
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1029:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6586
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6619
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6624
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6631
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6638
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6642
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6648
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6654
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6658
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6662
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6668
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6674
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6680
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6684
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6690
		{
			yyVAL.str = ""
		}
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6697
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1047:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6703
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6718
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6735
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6752
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1051:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6756
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6762
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6766
		{
			yyVAL.str = "DEFINER = "
		}
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6770
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6775
		{
			yyVAL.str = ""
		}
	case 1056:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6779
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6793
		{
			yyVAL.str = ""
		}
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6801
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6807
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6812
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6818
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6831
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6836
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6841
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6847
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6854
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6861
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6868
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6875
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6883
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6889
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6896
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6903
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6911
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6917
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6926
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6943
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6959
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6978
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6984
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6993
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7011
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7017
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:7024
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7032
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7038
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7046
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7052
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7060
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7066
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7075
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7079
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7084
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7088
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7095
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7100
		{
			yyVAL.str = ""
		}
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7104
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1105:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7110
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7123
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7134
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7138
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7144
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7150
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7156
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7163
		{
			yyVAL.str = ""
		}
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7167
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7172
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7176
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7182
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7190
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7198
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7206
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = &tree.DropPitr{
				IfExists: ifExists,
				Name:     name,
				Internal: yyDollar[5].boolValUnion(),
			}

		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7219
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7224
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7236
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7247
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7356
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7360
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7366
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7379
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7383
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7389
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7402
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7406
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7410
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7415
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7419
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7425
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7432
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7438
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7447
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1140:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7454
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7465
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7469
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7475
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7484
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7488
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7492
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7497
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7501
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7505
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7509
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7515
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7546
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7550
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				} else if opt2.HnswM > 0 {
					opt1.HnswM = opt2.HnswM
				} else if opt2.HnswEfConstruction > 0 {
					opt1.HnswEfConstruction = opt2.HnswEfConstruction
				} else if opt2.HnswEfSearch > 0 {
					opt1.HnswEfSearch = opt2.HnswEfSearch
				} else if opt2.Async {
					opt1.Async = opt2.Async
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7584
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7590
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7602
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7608
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7614
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7620
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7626
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7632
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("M should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswM = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7643
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_CONSTRUCTION should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfConstruction = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7654
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_SEARCH should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfSearch = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7665
		{
			io := tree.NewIndexOption()
			io.Async = true
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7674
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7678
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7684
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7698
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7712
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7716
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7720
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7724
		{
			yyLOCAL = tree.INDEX_TYPE_HNSW
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7728
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7732
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7736
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7740
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7746
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7760
		{
			var t = tree.NewCloneDatabase()
			t.DstDatabase = tree.Identifier(yyDollar[4].str)
			t.SrcDatabase = tree.Identifier(yyDollar[6].str)
			t.AtTsExpr = yyDollar[7].atTimeStampUnion()
			t.ToAccountOpt = yyDollar[8].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7774
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7785
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7789
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7794
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7798
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7803
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7807
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7813
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7817
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7823
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7832
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7841
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7847
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7851
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7857
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7868
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7874
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7892
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7910
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7928
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7944
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7948
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7955
		{
			t := tree.NewDataBranchCreateTable()
			t.CreateTable.Table = *yyDollar[5].tableNameUnion()
			t.CreateTable.LikeTableName = *yyDollar[7].tableNameUnion()
			t.CreateTable.IsAsLike = true
			t.SrcTable = *yyDollar[7].tableNameUnion()
			t.ToAccountOpt = yyDollar[8].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7965
		{
			t := tree.NewDataBranchCreateDatabase()
			t.DstDatabase = tree.Identifier(yyDollar[4].str)
			t.SrcDatabase = tree.Identifier(yyDollar[6].str)
			t.AtTsExpr = yyDollar[8].atTimeStampUnion()
			t.ToAccountOpt = yyDollar[9].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7974
		{
			t := tree.NewDataBranchDeleteTable()
			t.TableName = *yyDollar[5].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7980
		{
			t := tree.NewDataBranchDeleteDatabase()
			t.DatabaseName = tree.Identifier(yyDollar[5].str)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7986
		{
			t := tree.NewDataBranchDiff()
			t.TargetTable = *yyDollar[4].tableNameUnion()
			t.BaseTable = *yyDollar[6].tableNameUnion()
			t.DiffAsOpts = yyDollar[7].diffAsOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7994
		{
			t := tree.NewDataBranchMerge()
			t.SrcTable = *yyDollar[4].tableNameUnion()
			t.DstTable = *yyDollar[6].tableNameUnion()
			t.ConflictOpt = yyDollar[7].conflictOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.DiffAsOpt
//line mysql_sql.y:8004
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.DiffAsOpt
//line mysql_sql.y:8008
		{
			yyLOCAL = &tree.DiffAsOpt{
				As: *yyDollar[2].tableNameUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ConflictOpt
//line mysql_sql.y:8015
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConflictOpt
//line mysql_sql.y:8019
		{
			yyLOCAL = &tree.ConflictOpt{
				Opt: tree.CONFLICT_FAIL,
			}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConflictOpt
//line mysql_sql.y:8025
		{
			yyLOCAL = &tree.ConflictOpt{
				Opt: tree.CONFLICT_SKIP,
			}
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConflictOpt
//line mysql_sql.y:8031
		{
			yyLOCAL = &tree.ConflictOpt{
				Opt: tree.CONFLICT_ACCEPT,
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ToAccountOpt
//line mysql_sql.y:8039
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ToAccountOpt
//line mysql_sql.y:8043
		{
			yyLOCAL = &tree.ToAccountOpt{
				AccountName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8051
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8063
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8072
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8084
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8094
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8104
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8115
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8125
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8136
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8144
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8153
		{
			t := tree.NewCloneTable()
			t.CreateTable.Table = *yyDollar[5].tableNameUnion()
			t.CreateTable.LikeTableName = *yyDollar[7].tableNameUnion()
			t.CreateTable.IsAsLike = true
			t.SrcTable = *yyDollar[7].tableNameUnion()
			t.ToAccountOpt = yyDollar[8].toAccountOptUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8165
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8172
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8182
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8195
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8203
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8212
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8221
		{
			yyVAL.str = ""
		}
	case 1236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:8225
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8231
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8235
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8240
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8244
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8251
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8263
		{
			yyVAL.str = ""
		}
	case 1243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8267
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1244:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8273
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8294
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8308
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8312
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8316
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8322
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8326
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8333
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8340
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8347
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8354
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8358
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8362
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8366
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8370
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8377
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8384
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8388
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8395
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8402
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8406
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8412
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8418
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8422
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8429
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8436
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8443
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8450
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8454
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8459
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8463
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8467
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8472
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8476
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8489
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8493
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8501
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8509
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8513
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8525
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8529
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8535
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8539
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8545
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8558
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8572
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8576
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8582
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8586
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8592
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8601
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8612
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8616
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8621
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8625
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8631
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8636
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8644
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8648
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8658
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8662
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8673
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8681
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8689
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8697
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8708
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8717
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8727
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8737
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8741
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8746
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8750
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8756
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8760
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8766
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8775
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8785
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8789
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8795
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8799
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8805
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8814
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8824
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8828
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8834
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8838
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8842
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8848
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8852
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8856
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8860
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8864
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8868
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8872
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8877
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8881
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8885
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8889
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8893
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8897
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8901
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8905
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8909
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8913
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8917
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8921
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8925
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8931
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8937
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8941
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8945
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8949
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8953
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8959
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8965
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8971
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8977
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8983
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8989
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8993
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8997
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:9001
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:9008
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:9012
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:9018
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9029
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9033
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9039
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9043
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9047
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9051
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9055
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:9059
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:9073
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:9077
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:9086
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:9092
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9100
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9104
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9111
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9120
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9128
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:9135
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9143
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9150
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9154
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9160
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9164
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9168
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9174
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9178
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9184
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9197
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9210
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9251
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9293
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9307
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9313
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9326
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9339
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9352
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9365
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9380
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9390
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9396
		{
			yyVAL.str = ""
		}
	case 1416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9400
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9410
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9416
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9422
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9444
		{
			yyVAL.str = ""
		}
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9448
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9454
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9460
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9464
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9469
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9477
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9481
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9485
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9489
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9495
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9501
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9505
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9510
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9517
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9521
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9527
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9531
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9537
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9541
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9545
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9549
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9553
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9557
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9562
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9566
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9570
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9574
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9578
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9582
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9586
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9590
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9594
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9598
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9612
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9616
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9620
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9624
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9628
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9632
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9638
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9642
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9647
		{
			yyVAL.str = ""
		}
	case 1476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9651
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9657
		{
			yyVAL.str = ""
		}
	case 1478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9661
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1479:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9667
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9684
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9691
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9698
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9705
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9712
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9721
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9727
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9733
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9737
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9741
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9745
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9749
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9754
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9761
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9765
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9769
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9774
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9778
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9782
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9786
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9790
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9795
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9799
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9804
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9808
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9824
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9830
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9834
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9838
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9842
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9846
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9850
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9854
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9858
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9862
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9866
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9870
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9874
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9878
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9884
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9888
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9892
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9896
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9900
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9904
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9908
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9912
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9916
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9920
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9962
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9966
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9970
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9975
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9983
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9987
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9991
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9995
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9999
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10009
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10013
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10017
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10021
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10025
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10029
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10033
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10037
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10050
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10056
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10065
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10074
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10085
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10095
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10105
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10114
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10124
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10134
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10144
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10153
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10163
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10167
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10172
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10176
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10182
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10186
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:10192
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10201
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1573:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10213
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10230
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10247
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10260
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10273
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10285
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10299
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10314
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10329
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10346
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10361
		{
		}
	case 1588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10368
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10372
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10376
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10382
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10386
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10390
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10394
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10400
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10404
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10408
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10414
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10422
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10432
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10436
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10443
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10448
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10452
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10457
		{
			yyVAL.str = ","
		}
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10461
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10466
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10470
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1609:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10475
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10482
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10508
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10520
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10532
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10543
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10554
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10565
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10575
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10585
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10596
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10607
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10618
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10629
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10640
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10651
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10662
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10673
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10684
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10695
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10706
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10717
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10728
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10739
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10750
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10774
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10783
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10792
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10801
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10810
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10821
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10830
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10840
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10849
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10858
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10867
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10876
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10888
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10899
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10912
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10924
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10947
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1689:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10983
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10996
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11009
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11021
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11030
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11038
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11046
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11059
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11068
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11079
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11090
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11099
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11111
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11121
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11131
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11140
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11151
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11160
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11170
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11179
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11188
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11198
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11202
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11208
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11212
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11231
		{
		}
	case 1721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:11233
		{
		}
	case 1756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11275
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11287
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11291
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11295
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11301
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11306
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11310
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11316
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11320
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11326
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11330
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11337
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11341
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11345
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11354
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11358
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11362
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11367
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11371
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11377
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11381
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11385
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11389
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11393
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11397
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11401
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11405
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11409
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11413
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11421
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11425
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11429
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11433
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11437
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11441
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11445
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11449
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11453
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11457
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11463
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11467
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11473
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11477
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11484
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11488
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11492
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11498
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11502
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11506
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11510
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11514
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11518
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11522
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11528
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11532
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11536
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11540
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11546
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11559
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11564
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11570
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11574
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11587
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11592
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11596
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11600
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11604
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11608
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11615
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11619
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11623
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11627
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11634
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11645
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11650
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11656
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11668
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11680
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11692
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11705
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11718
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11731
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11744
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11757
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11770
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11783
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11796
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11809
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11822
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11837
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11864
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11906
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11942
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11978
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11995
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12007
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12027
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12047
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12067
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12083
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12096
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12109
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12122
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12135
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12147
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12159
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12171
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1868:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12183
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12195
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12207
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1871:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12219
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12231
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12243
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1874:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12255
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1875:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12268
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1876:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12281
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1877:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12294
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12307
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1879:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12322
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1880:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12330
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1881:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12339
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12349
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12372
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1884:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12377
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1885:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12383
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1887:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12390
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1888:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12394
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1889:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12399
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12403
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12409
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1892:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12415
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12422
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1894:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12429
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1895:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12438
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12445
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1897:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12452
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1898:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12461
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12465
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1900:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12469
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1901:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12475
		{
		}
	case 1902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12477
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1906:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12487
		{
			yyVAL.str = ""
		}
	case 1907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12491
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
