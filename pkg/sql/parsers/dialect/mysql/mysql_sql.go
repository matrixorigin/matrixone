// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const LOWER_THAN_ON = 57422
const ON = 57423
const USING = 57424
const SUBQUERY_AS_EXPR = 57425
const LOWER_THAN_STRING = 57426
const ID = 57427
const AT_ID = 57428
const AT_AT_ID = 57429
const STRING = 57430
const VALUE_ARG = 57431
const LIST_ARG = 57432
const COMMENT = 57433
const COMMENT_KEYWORD = 57434
const QUOTE_ID = 57435
const STAGE = 57436
const CREDENTIALS = 57437
const STAGES = 57438
const SNAPSHOTS = 57439
const INTEGRAL = 57440
const HEX = 57441
const FLOAT = 57442
const HEXNUM = 57443
const BIT_LITERAL = 57444
const NULL = 57445
const TRUE = 57446
const FALSE = 57447
const LOWER_THAN_CHARSET = 57448
const CHARSET = 57449
const UNIQUE = 57450
const KEY = 57451
const OR = 57452
const PIPE_CONCAT = 57453
const XOR = 57454
const AND = 57455
const NOT = 57456
const BETWEEN = 57457
const CASE = 57458
const WHEN = 57459
const THEN = 57460
const ELSE = 57461
const END = 57462
const ELSEIF = 57463
const LOWER_THAN_EQ = 57464
const LE = 57465
const GE = 57466
const NE = 57467
const NULL_SAFE_EQUAL = 57468
const IS = 57469
const LIKE = 57470
const REGEXP = 57471
const IN = 57472
const ASSIGNMENT = 57473
const ILIKE = 57474
const SHIFT_LEFT = 57475
const SHIFT_RIGHT = 57476
const DIV = 57477
const MOD = 57478
const UNARY = 57479
const COLLATE = 57480
const BINARY = 57481
const UNDERSCORE_BINARY = 57482
const INTERVAL = 57483
const OUT = 57484
const INOUT = 57485
const BEGIN = 57486
const START = 57487
const TRANSACTION = 57488
const COMMIT = 57489
const ROLLBACK = 57490
const WORK = 57491
const CONSISTENT = 57492
const SNAPSHOT = 57493
const CHAIN = 57494
const NO = 57495
const RELEASE = 57496
const PRIORITY = 57497
const QUICK = 57498
const BIT = 57499
const TINYINT = 57500
const SMALLINT = 57501
const MEDIUMINT = 57502
const INT = 57503
const INTEGER = 57504
const BIGINT = 57505
const INTNUM = 57506
const REAL = 57507
const DOUBLE = 57508
const FLOAT_TYPE = 57509
const DECIMAL = 57510
const NUMERIC = 57511
const DECIMAL_VALUE = 57512
const TIME = 57513
const TIMESTAMP = 57514
const DATETIME = 57515
const YEAR = 57516
const CHAR = 57517
const VARCHAR = 57518
const BOOL = 57519
const CHARACTER = 57520
const VARBINARY = 57521
const NCHAR = 57522
const TEXT = 57523
const TINYTEXT = 57524
const MEDIUMTEXT = 57525
const LONGTEXT = 57526
const DATALINK = 57527
const BLOB = 57528
const TINYBLOB = 57529
const MEDIUMBLOB = 57530
const LONGBLOB = 57531
const JSON = 57532
const ENUM = 57533
const UUID = 57534
const VECF32 = 57535
const VECF64 = 57536
const GEOMETRY = 57537
const POINT = 57538
const LINESTRING = 57539
const POLYGON = 57540
const GEOMETRYCOLLECTION = 57541
const MULTIPOINT = 57542
const MULTILINESTRING = 57543
const MULTIPOLYGON = 57544
const INT1 = 57545
const INT2 = 57546
const INT3 = 57547
const INT4 = 57548
const INT8 = 57549
const S3OPTION = 57550
const STAGEOPTION = 57551
const SQL_SMALL_RESULT = 57552
const SQL_BIG_RESULT = 57553
const SQL_BUFFER_RESULT = 57554
const LOW_PRIORITY = 57555
const HIGH_PRIORITY = 57556
const DELAYED = 57557
const CREATE = 57558
const ALTER = 57559
const DROP = 57560
const RENAME = 57561
const ANALYZE = 57562
const PHYPLAN = 57563
const ADD = 57564
const RETURNS = 57565
const SCHEMA = 57566
const TABLE = 57567
const SEQUENCE = 57568
const INDEX = 57569
const VIEW = 57570
const TO = 57571
const IGNORE = 57572
const IF = 57573
const PRIMARY = 57574
const COLUMN = 57575
const CONSTRAINT = 57576
const SPATIAL = 57577
const FULLTEXT = 57578
const FOREIGN = 57579
const KEY_BLOCK_SIZE = 57580
const SHOW = 57581
const DESCRIBE = 57582
const EXPLAIN = 57583
const DATE = 57584
const ESCAPE = 57585
const REPAIR = 57586
const OPTIMIZE = 57587
const TRUNCATE = 57588
const MAXVALUE = 57589
const PARTITION = 57590
const REORGANIZE = 57591
const LESS = 57592
const THAN = 57593
const PROCEDURE = 57594
const TRIGGER = 57595
const STATUS = 57596
const VARIABLES = 57597
const ROLE = 57598
const PROXY = 57599
const AVG_ROW_LENGTH = 57600
const STORAGE = 57601
const DISK = 57602
const MEMORY = 57603
const CHECKSUM = 57604
const COMPRESSION = 57605
const DATA = 57606
const DIRECTORY = 57607
const DELAY_KEY_WRITE = 57608
const ENCRYPTION = 57609
const ENGINE = 57610
const MAX_ROWS = 57611
const MIN_ROWS = 57612
const PACK_KEYS = 57613
const ROW_FORMAT = 57614
const STATS_AUTO_RECALC = 57615
const STATS_PERSISTENT = 57616
const STATS_SAMPLE_PAGES = 57617
const DYNAMIC = 57618
const COMPRESSED = 57619
const REDUNDANT = 57620
const COMPACT = 57621
const FIXED = 57622
const COLUMN_FORMAT = 57623
const AUTO_RANDOM = 57624
const ENGINE_ATTRIBUTE = 57625
const SECONDARY_ENGINE_ATTRIBUTE = 57626
const INSERT_METHOD = 57627
const RESTRICT = 57628
const CASCADE = 57629
const ACTION = 57630
const PARTIAL = 57631
const SIMPLE = 57632
const CHECK = 57633
const ENFORCED = 57634
const RANGE = 57635
const LIST = 57636
const ALGORITHM = 57637
const LINEAR = 57638
const PARTITIONS = 57639
const SUBPARTITION = 57640
const SUBPARTITIONS = 57641
const CLUSTER = 57642
const TYPE = 57643
const ANY = 57644
const SOME = 57645
const EXTERNAL = 57646
const LOCALFILE = 57647
const URL = 57648
const PREPARE = 57649
const DEALLOCATE = 57650
const RESET = 57651
const EXTENSION = 57652
const RETENTION = 57653
const PERIOD = 57654
const INCREMENT = 57655
const CYCLE = 57656
const MINVALUE = 57657
const PUBLICATION = 57658
const SUBSCRIPTIONS = 57659
const PUBLICATIONS = 57660
const PROPERTIES = 57661
const PARSER = 57662
const VISIBLE = 57663
const INVISIBLE = 57664
const BTREE = 57665
const HASH = 57666
const RTREE = 57667
const BSI = 57668
const IVFFLAT = 57669
const MASTER = 57670
const ZONEMAP = 57671
const LEADING = 57672
const BOTH = 57673
const TRAILING = 57674
const UNKNOWN = 57675
const LISTS = 57676
const OP_TYPE = 57677
const REINDEX = 57678
const EXPIRE = 57679
const ACCOUNT = 57680
const ACCOUNTS = 57681
const UNLOCK = 57682
const DAY = 57683
const NEVER = 57684
const PUMP = 57685
const MYSQL_COMPATIBILITY_MODE = 57686
const UNIQUE_CHECK_ON_AUTOINCR = 57687
const MODIFY = 57688
const CHANGE = 57689
const SECOND = 57690
const ASCII = 57691
const COALESCE = 57692
const COLLATION = 57693
const HOUR = 57694
const MICROSECOND = 57695
const MINUTE = 57696
const MONTH = 57697
const QUARTER = 57698
const REPEAT = 57699
const REVERSE = 57700
const ROW_COUNT = 57701
const WEEK = 57702
const REVOKE = 57703
const FUNCTION = 57704
const PRIVILEGES = 57705
const TABLESPACE = 57706
const EXECUTE = 57707
const SUPER = 57708
const GRANT = 57709
const OPTION = 57710
const REFERENCES = 57711
const REPLICATION = 57712
const SLAVE = 57713
const CLIENT = 57714
const USAGE = 57715
const RELOAD = 57716
const FILE = 57717
const TEMPORARY = 57718
const ROUTINE = 57719
const EVENT = 57720
const SHUTDOWN = 57721
const NULLX = 57722
const AUTO_INCREMENT = 57723
const APPROXNUM = 57724
const SIGNED = 57725
const UNSIGNED = 57726
const ZEROFILL = 57727
const ENGINES = 57728
const LOW_CARDINALITY = 57729
const AUTOEXTEND_SIZE = 57730
const ADMIN_NAME = 57731
const RANDOM = 57732
const SUSPEND = 57733
const ATTRIBUTE = 57734
const HISTORY = 57735
const REUSE = 57736
const CURRENT = 57737
const OPTIONAL = 57738
const FAILED_LOGIN_ATTEMPTS = 57739
const PASSWORD_LOCK_TIME = 57740
const UNBOUNDED = 57741
const SECONDARY = 57742
const RESTRICTED = 57743
const USER = 57744
const IDENTIFIED = 57745
const CIPHER = 57746
const ISSUER = 57747
const X509 = 57748
const SUBJECT = 57749
const SAN = 57750
const REQUIRE = 57751
const SSL = 57752
const NONE = 57753
const PASSWORD = 57754
const SHARED = 57755
const EXCLUSIVE = 57756
const MAX_QUERIES_PER_HOUR = 57757
const MAX_UPDATES_PER_HOUR = 57758
const MAX_CONNECTIONS_PER_HOUR = 57759
const MAX_USER_CONNECTIONS = 57760
const FORMAT = 57761
const VERBOSE = 57762
const CONNECTION = 57763
const TRIGGERS = 57764
const PROFILES = 57765
const LOAD = 57766
const INLINE = 57767
const INFILE = 57768
const TERMINATED = 57769
const OPTIONALLY = 57770
const ENCLOSED = 57771
const ESCAPED = 57772
const STARTING = 57773
const LINES = 57774
const ROWS = 57775
const IMPORT = 57776
const DISCARD = 57777
const JSONTYPE = 57778
const MODUMP = 57779
const OVER = 57780
const PRECEDING = 57781
const FOLLOWING = 57782
const GROUPS = 57783
const DATABASES = 57784
const TABLES = 57785
const SEQUENCES = 57786
const EXTENDED = 57787
const FULL = 57788
const PROCESSLIST = 57789
const FIELDS = 57790
const COLUMNS = 57791
const OPEN = 57792
const ERRORS = 57793
const WARNINGS = 57794
const INDEXES = 57795
const SCHEMAS = 57796
const NODE = 57797
const LOCKS = 57798
const ROLES = 57799
const TABLE_NUMBER = 57800
const COLUMN_NUMBER = 57801
const TABLE_VALUES = 57802
const TABLE_SIZE = 57803
const NAMES = 57804
const GLOBAL = 57805
const PERSIST = 57806
const SESSION = 57807
const ISOLATION = 57808
const LEVEL = 57809
const READ = 57810
const WRITE = 57811
const ONLY = 57812
const REPEATABLE = 57813
const COMMITTED = 57814
const UNCOMMITTED = 57815
const SERIALIZABLE = 57816
const LOCAL = 57817
const EVENTS = 57818
const PLUGINS = 57819
const CURRENT_TIMESTAMP = 57820
const DATABASE = 57821
const CURRENT_TIME = 57822
const LOCALTIME = 57823
const LOCALTIMESTAMP = 57824
const UTC_DATE = 57825
const UTC_TIME = 57826
const UTC_TIMESTAMP = 57827
const REPLACE = 57828
const CONVERT = 57829
const SEPARATOR = 57830
const TIMESTAMPDIFF = 57831
const CURRENT_DATE = 57832
const CURRENT_USER = 57833
const CURRENT_ROLE = 57834
const SECOND_MICROSECOND = 57835
const MINUTE_MICROSECOND = 57836
const MINUTE_SECOND = 57837
const HOUR_MICROSECOND = 57838
const HOUR_SECOND = 57839
const HOUR_MINUTE = 57840
const DAY_MICROSECOND = 57841
const DAY_SECOND = 57842
const DAY_MINUTE = 57843
const DAY_HOUR = 57844
const YEAR_MONTH = 57845
const SQL_TSI_HOUR = 57846
const SQL_TSI_DAY = 57847
const SQL_TSI_WEEK = 57848
const SQL_TSI_MONTH = 57849
const SQL_TSI_QUARTER = 57850
const SQL_TSI_YEAR = 57851
const SQL_TSI_SECOND = 57852
const SQL_TSI_MINUTE = 57853
const RECURSIVE = 57854
const CONFIG = 57855
const DRAINER = 57856
const SOURCE = 57857
const STREAM = 57858
const HEADERS = 57859
const CONNECTOR = 57860
const CONNECTORS = 57861
const DAEMON = 57862
const PAUSE = 57863
const CANCEL = 57864
const TASK = 57865
const RESUME = 57866
const MATCH = 57867
const AGAINST = 57868
const BOOLEAN = 57869
const LANGUAGE = 57870
const WITH = 57871
const QUERY = 57872
const EXPANSION = 57873
const WITHOUT = 57874
const VALIDATION = 57875
const UPGRADE = 57876
const RETRY = 57877
const ADDDATE = 57878
const BIT_AND = 57879
const BIT_OR = 57880
const BIT_XOR = 57881
const CAST = 57882
const COUNT = 57883
const APPROX_COUNT = 57884
const APPROX_COUNT_DISTINCT = 57885
const SERIAL_EXTRACT = 57886
const APPROX_PERCENTILE = 57887
const CURDATE = 57888
const CURTIME = 57889
const DATE_ADD = 57890
const DATE_SUB = 57891
const EXTRACT = 57892
const GROUP_CONCAT = 57893
const MAX = 57894
const MID = 57895
const MIN = 57896
const NOW = 57897
const POSITION = 57898
const SESSION_USER = 57899
const STD = 57900
const STDDEV = 57901
const MEDIAN = 57902
const CLUSTER_CENTERS = 57903
const KMEANS = 57904
const STDDEV_POP = 57905
const STDDEV_SAMP = 57906
const SUBDATE = 57907
const SUBSTR = 57908
const SUBSTRING = 57909
const SUM = 57910
const SYSDATE = 57911
const SYSTEM_USER = 57912
const TRANSLATE = 57913
const TRIM = 57914
const VARIANCE = 57915
const VAR_POP = 57916
const VAR_SAMP = 57917
const AVG = 57918
const RANK = 57919
const ROW_NUMBER = 57920
const DENSE_RANK = 57921
const BIT_CAST = 57922
const BITMAP_BIT_POSITION = 57923
const BITMAP_BUCKET_NUMBER = 57924
const BITMAP_COUNT = 57925
const BITMAP_CONSTRUCT_AGG = 57926
const BITMAP_OR_AGG = 57927
const NEXTVAL = 57928
const SETVAL = 57929
const CURRVAL = 57930
const LASTVAL = 57931
const ARROW = 57932
const ROW = 57933
const OUTFILE = 57934
const HEADER = 57935
const MAX_FILE_SIZE = 57936
const FORCE_QUOTE = 57937
const PARALLEL = 57938
const STRICT = 57939
const UNUSED = 57940
const BINDINGS = 57941
const DO = 57942
const DECLARE = 57943
const LOOP = 57944
const WHILE = 57945
const LEAVE = 57946
const ITERATE = 57947
const UNTIL = 57948
const CALL = 57949
const PREV = 57950
const SLIDING = 57951
const FILL = 57952
const SPBEGIN = 57953
const BACKEND = 57954
const SERVERS = 57955
const HANDLER = 57956
const PERCENT = 57957
const SAMPLE = 57958
const MO_TS = 57959
const PITR = 57960
const CDC = 57961
const GROUPING = 57962
const SETS = 57963
const CUBE = 57964
const ROLLUP = 57965
const LOGSERVICE = 57966
const REPLICAS = 57967
const STORES = 57968
const SETTINGS = 57969
const KILL = 57970
const BACKUP = 57971
const FILESYSTEM = 57972
const PARALLELISM = 57973
const RESTORE = 57974
const QUERY_RESULT = 57975

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12680

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 138,
	11, 790,
	22, 790,
	-2, 783,
	-1, 161,
	242, 1210,
	244, 1109,
	-2, 1156,
	-1, 188,
	43, 613,
	244, 613,
	271, 620,
	272, 620,
	470, 613,
	-2, 648,
	-1, 228,
	654, 1980,
	-2, 517,
	-1, 535,
	654, 2102,
	-2, 398,
	-1, 593,
	654, 2161,
	-2, 396,
	-1, 594,
	654, 2162,
	-2, 397,
	-1, 595,
	654, 2163,
	-2, 399,
	-1, 733,
	323, 176,
	442, 176,
	443, 176,
	-2, 1882,
	-1, 800,
	84, 1668,
	-2, 2038,
	-1, 801,
	84, 1686,
	-2, 2009,
	-1, 805,
	84, 1687,
	-2, 2037,
	-1, 839,
	84, 1595,
	-2, 2239,
	-1, 840,
	84, 1596,
	-2, 2238,
	-1, 841,
	84, 1597,
	-2, 2228,
	-1, 842,
	84, 2200,
	-2, 2221,
	-1, 843,
	84, 2201,
	-2, 2222,
	-1, 844,
	84, 2202,
	-2, 2230,
	-1, 845,
	84, 2203,
	-2, 2210,
	-1, 846,
	84, 2204,
	-2, 2219,
	-1, 847,
	84, 2205,
	-2, 2231,
	-1, 848,
	84, 2206,
	-2, 2232,
	-1, 849,
	84, 2207,
	-2, 2237,
	-1, 850,
	84, 2208,
	-2, 2242,
	-1, 851,
	84, 2209,
	-2, 2243,
	-1, 852,
	84, 1664,
	-2, 2076,
	-1, 853,
	84, 1665,
	-2, 1866,
	-1, 854,
	84, 1666,
	-2, 2085,
	-1, 855,
	84, 1667,
	-2, 1875,
	-1, 857,
	84, 1670,
	-2, 1883,
	-1, 858,
	84, 1671,
	-2, 2109,
	-1, 860,
	84, 1674,
	-2, 1902,
	-1, 862,
	84, 1676,
	-2, 2121,
	-1, 863,
	84, 1677,
	-2, 2120,
	-1, 864,
	84, 1678,
	-2, 1947,
	-1, 865,
	84, 1679,
	-2, 2033,
	-1, 868,
	84, 1682,
	-2, 2132,
	-1, 870,
	84, 1684,
	-2, 2135,
	-1, 871,
	84, 1685,
	-2, 2137,
	-1, 872,
	84, 1688,
	-2, 2145,
	-1, 873,
	84, 1689,
	-2, 2018,
	-1, 874,
	84, 1690,
	-2, 2063,
	-1, 875,
	84, 1691,
	-2, 2028,
	-1, 876,
	84, 1692,
	-2, 2053,
	-1, 887,
	84, 1573,
	-2, 2233,
	-1, 888,
	84, 1574,
	-2, 2234,
	-1, 889,
	84, 1575,
	-2, 2235,
	-1, 989,
	465, 648,
	466, 648,
	-2, 614,
	-1, 1040,
	126, 1866,
	137, 1866,
	157, 1866,
	-2, 1840,
	-1, 1157,
	22, 817,
	-2, 766,
	-1, 1267,
	11, 790,
	22, 790,
	-2, 1450,
	-1, 1351,
	22, 817,
	-2, 766,
	-1, 1705,
	84, 1739,
	-2, 2035,
	-1, 1706,
	84, 1740,
	-2, 2036,
	-1, 1878,
	85, 981,
	-2, 987,
	-1, 2329,
	109, 1148,
	153, 1148,
	192, 1148,
	195, 1148,
	284, 1148,
	-2, 1141,
	-1, 2487,
	11, 790,
	22, 790,
	-2, 922,
	-1, 2521,
	85, 1826,
	158, 1826,
	-2, 2020,
	-1, 2522,
	85, 1826,
	158, 1826,
	-2, 2019,
	-1, 2523,
	85, 1802,
	158, 1802,
	-2, 2006,
	-1, 2524,
	85, 1803,
	158, 1803,
	-2, 2011,
	-1, 2525,
	85, 1804,
	158, 1804,
	-2, 1935,
	-1, 2526,
	85, 1805,
	158, 1805,
	-2, 1929,
	-1, 2527,
	85, 1806,
	158, 1806,
	-2, 1856,
	-1, 2528,
	85, 1807,
	158, 1807,
	-2, 2008,
	-1, 2529,
	85, 1808,
	158, 1808,
	-2, 1933,
	-1, 2530,
	85, 1809,
	158, 1809,
	-2, 1928,
	-1, 2531,
	85, 1810,
	158, 1810,
	-2, 1916,
	-1, 2532,
	85, 1826,
	158, 1826,
	-2, 1917,
	-1, 2533,
	85, 1826,
	158, 1826,
	-2, 1918,
	-1, 2535,
	85, 1815,
	158, 1815,
	-2, 2053,
	-1, 2536,
	85, 1792,
	158, 1792,
	-2, 2038,
	-1, 2537,
	85, 1824,
	158, 1824,
	-2, 2009,
	-1, 2538,
	85, 1824,
	158, 1824,
	-2, 2037,
	-1, 2539,
	85, 1824,
	158, 1824,
	-2, 1884,
	-1, 2540,
	85, 1822,
	158, 1822,
	-2, 2028,
	-1, 2541,
	85, 1819,
	158, 1819,
	-2, 1907,
	-1, 2542,
	84, 1773,
	85, 1773,
	158, 1773,
	400, 1773,
	401, 1773,
	402, 1773,
	-2, 1855,
	-1, 2543,
	84, 1774,
	85, 1774,
	158, 1774,
	400, 1774,
	401, 1774,
	402, 1774,
	-2, 1857,
	-1, 2544,
	84, 1775,
	85, 1775,
	158, 1775,
	400, 1775,
	401, 1775,
	402, 1775,
	-2, 2081,
	-1, 2545,
	84, 1777,
	85, 1777,
	158, 1777,
	400, 1777,
	401, 1777,
	402, 1777,
	-2, 2010,
	-1, 2546,
	84, 1779,
	85, 1779,
	158, 1779,
	400, 1779,
	401, 1779,
	402, 1779,
	-2, 1990,
	-1, 2547,
	84, 1781,
	85, 1781,
	158, 1781,
	400, 1781,
	401, 1781,
	402, 1781,
	-2, 1934,
	-1, 2548,
	84, 1783,
	85, 1783,
	158, 1783,
	400, 1783,
	401, 1783,
	402, 1783,
	-2, 1912,
	-1, 2549,
	84, 1784,
	85, 1784,
	158, 1784,
	400, 1784,
	401, 1784,
	402, 1784,
	-2, 1913,
	-1, 2550,
	84, 1786,
	85, 1786,
	158, 1786,
	400, 1786,
	401, 1786,
	402, 1786,
	-2, 1854,
	-1, 2551,
	85, 1829,
	158, 1829,
	400, 1829,
	401, 1829,
	402, 1829,
	-2, 1889,
	-1, 2552,
	85, 1829,
	158, 1829,
	400, 1829,
	401, 1829,
	402, 1829,
	-2, 1903,
	-1, 2553,
	85, 1832,
	158, 1832,
	400, 1832,
	401, 1832,
	402, 1832,
	-2, 1885,
	-1, 2554,
	85, 1832,
	158, 1832,
	400, 1832,
	401, 1832,
	402, 1832,
	-2, 1950,
	-1, 2555,
	85, 1829,
	158, 1829,
	400, 1829,
	401, 1829,
	402, 1829,
	-2, 1972,
	-1, 2772,
	109, 1148,
	153, 1148,
	192, 1148,
	195, 1148,
	284, 1148,
	-2, 1142,
	-1, 2790,
	82, 710,
	158, 710,
	-2, 1326,
	-1, 3211,
	195, 1148,
	308, 1413,
	-2, 1385,
	-1, 3392,
	109, 1148,
	153, 1148,
	192, 1148,
	195, 1148,
	-2, 1266,
	-1, 3394,
	109, 1148,
	153, 1148,
	192, 1148,
	195, 1148,
	-2, 1266,
	-1, 3406,
	82, 710,
	158, 710,
	-2, 1326,
	-1, 3427,
	195, 1148,
	308, 1413,
	-2, 1386,
	-1, 3579,
	109, 1148,
	153, 1148,
	192, 1148,
	195, 1148,
	-2, 1267,
	-1, 3607,
	85, 1228,
	158, 1228,
	-2, 1148,
	-1, 3751,
	85, 1228,
	158, 1228,
	-2, 1148,
	-1, 3915,
	85, 1232,
	158, 1232,
	-2, 1148,
	-1, 3966,
	85, 1233,
	158, 1233,
	-2, 1148,
}

const yyPrivate = 57344

const yyLast = 53202

var yyAct = [...]int{
	767, 743, 4016, 769, 3988, 2820, 217, 4008, 3919, 1963,
	1685, 3925, 1607, 3926, 3412, 3511, 3817, 3230, 3918, 3751,
	3197, 752, 3840, 3798, 3875, 3635, 3302, 3441, 3729, 2814,
	3699, 3789, 745, 3303, 1303, 3750, 3818, 3567, 3668, 797,
	2732, 1745, 1039, 3720, 2817, 3515, 633, 1158, 1451, 3799,
	3374, 3801, 1457, 3506, 65, 1911, 3379, 2376, 1732, 3428,
	651, 3588, 657, 657, 1519, 3206, 3154, 1152, 657, 675,
	684, 2793, 1688, 684, 3576, 3168, 3128, 2073, 3549, 3300,
	2929, 3395, 202, 3157, 3581, 2930, 1750, 2909, 2057, 2060,
	2843, 2928, 741, 3226, 3364, 3215, 3208, 1681, 2481, 2925,
	1747, 3397, 2171, 2096, 2645, 2519, 37, 2996, 2129, 3288,
	3344, 2517, 2955, 3268, 2379, 2761, 1923, 2022, 3139, 3135,
	3131, 3133, 2610, 692, 137, 3177, 1512, 3130, 3126, 2340,
	3129, 3214, 2773, 2308, 2284, 735, 696, 2285, 2167, 1596,
	36, 2154, 2138, 1148, 2589, 3103, 2969, 2137, 3043, 1843,
	740, 1585, 1592, 2130, 2102, 2571, 1600, 2979, 2053, 2166,
	2482, 2026, 2462, 2467, 961, 1597, 2745, 2750, 1423, 2845,
	2377, 2825, 1953, 2785, 2329, 681, 213, 8, 212, 7,
	6, 2515, 1559, 1417, 1887, 2339, 2201, 1384, 1746, 1679,
	1497, 2168, 1096, 633, 744, 650, 1528, 2320, 1033, 1628,
	2023, 1440, 1491, 734, 2178, 1460, 2372, 1922, 2682, 1739,
	1670, 15, 1174, 1684, 753, 742, 2136, 217, 1719, 217,
	2133, 1087, 1088, 1611, 2118, 1566, 2092, 689, 657, 1461,
	1883, 998, 1678, 1032, 2489, 1886, 1496, 2463, 1493, 666,
	960, 1436, 27, 1550, 632, 1751, 1452, 891, 16, 699,
	698, 1048, 203, 111, 24, 23, 2681, 1558, 1608, 17,
	10, 683, 937, 14, 1373, 958, 199, 195, 1304, 2409,
	893, 984, 1427, 943, 695, 1349, 2175, 3808, 3717, 894,
	679, 33, 653, 2491, 951, 2718, 952, 1235, 1236, 1237,
	1234, 1235, 1236, 1237, 1234, 1235, 1236, 1237, 1234, 1083,
	2718, 1085, 2718, 1084, 3013, 1066, 3012, 2185, 3409, 3184,
	1153, 680, 3542, 3382, 3295, 1154, 2633, 676, 2577, 2575,
	2574, 1045, 2572, 1856, 932, 1573, 1569, 1079, 1080, 201,
	652, 669, 678, 662, 687, 2283, 1368, 1047, 946, 1495,
	942, 1420, 1421, 1422, 3776, 658, 1342, 1018, 1080, 913,
	677, 3113, 2289, 1080, 1857, 2293, 1153, 911, 1620, 1371,
	3098, 3096, 3093, 3095, 4000, 2710, 2708, 1474, 1850, 1364,
	3504, 2992, 1571, 1235, 1236, 1237, 1234, 1067, 8, 1619,
	7, 2990, 1078, 1235, 1236, 1237, 1234, 2107, 3784, 3675,
	3669, 3507, 3301, 2151, 736, 3803, 923, 2132, 1298, 892,
	3072, 3901, 2124, 2417, 4022, 3797, 3997, 903, 2712, 3683,
	3521, 3954, 200, 200, 61, 191, 162, 3550, 1233, 3396,
	2331, 1606, 1197, 2619, 3554, 2627, 3736, 2172, 200, 3795,
	1379, 3704, 3681, 2663, 200, 61, 191, 162, 200, 200,
	200, 3851, 200, 61, 191, 162, 1615, 200, 912, 1374,
	1061, 1056, 1051, 1055, 1059, 1536, 910, 200, 61, 191,
	162, 200, 61, 191, 162, 1626, 1043, 200, 200, 948,
	3737, 941, 2330, 1378, 1377, 1044, 1612, 1376, 1064, 913,
	945, 944, 1054, 196, 196, 911, 3015, 3004, 136, 736,
	2779, 1380, 1049, 1013, 1011, 1623, 1012, 926, 1637, 1614,
	1392, 933, 694, 2183, 3070, 196, 1169, 1409, 1859, 196,
	196, 196, 908, 196, 1671, 136, 904, 1675, 1625, 2734,
	882, 940, 881, 883, 884, 1166, 885, 886, 196, 2923,
	2324, 2509, 196, 1062, 1651, 1232, 2963, 2964, 196, 2777,
	950, 1674, 1065, 3097, 3094, 939, 3706, 2037, 2038, 938,
	2510, 200, 61, 191, 162, 925, 2962, 2735, 1868, 1869,
	2036, 931, 3898, 1205, 1052, 1448, 1207, 2496, 2590, 1212,
	2495, 1470, 1213, 2497, 1471, 1498, 2747, 1500, 1458, 1459,
	1007, 3929, 3930, 929, 1019, 1937, 2748, 3531, 1063, 2780,
	1687, 1456, 1230, 1042, 1208, 1455, 1458, 1459, 1041, 3431,
	1215, 3806, 3889, 3805, 3888, 2070, 1015, 3201, 3953, 3787,
	3804, 3887, 1225, 3806, 3199, 3805, 2713, 1572, 1570, 3804,
	2272, 949, 196, 3992, 3993, 2997, 3304, 1676, 1053, 3894,
	3877, 1691, 2044, 3877, 1391, 2746, 2998, 1172, 2999, 3443,
	3880, 3790, 3791, 3792, 3793, 3903, 3904, 930, 2614, 3304,
	1163, 1673, 3434, 3672, 2187, 657, 657, 2864, 3899, 3900,
	2054, 2753, 1473, 3429, 3814, 3317, 657, 1162, 3451, 3452,
	1017, 2048, 1666, 3365, 3430, 2737, 1201, 161, 1660, 198,
	1177, 1180, 1210, 2179, 3559, 3372, 684, 684, 2452, 657,
	3150, 1177, 1180, 2319, 2115, 3140, 3033, 3148, 2736, 3691,
	188, 3692, 1203, 949, 3691, 1060, 3692, 3708, 3709, 1579,
	1578, 3435, 1228, 1229, 1206, 1209, 3453, 3686, 3896, 3031,
	1227, 2624, 187, 2415, 947, 1200, 730, 3530, 1048, 732,
	3505, 2711, 2991, 2915, 731, 3532, 2730, 1090, 3928, 2454,
	1202, 1057, 2455, 2456, 1058, 3713, 1211, 1016, 3556, 3348,
	1690, 1689, 1275, 3145, 3146, 3694, 2460, 2162, 1367, 2184,
	3694, 2512, 3144, 936, 1222, 649, 1446, 1161, 1672, 3147,
	3961, 3468, 3807, 3716, 2731, 3229, 3833, 681, 681, 681,
	3320, 3155, 3203, 1785, 1484, 3166, 3693, 1393, 3465, 3227,
	3228, 3693, 3178, 3828, 3741, 3037, 2786, 2717, 1045, 1162,
	2911, 1048, 1155, 1154, 1154, 1154, 3662, 3450, 2447, 2380,
	2173, 2173, 906, 686, 1047, 2173, 3733, 1204, 685, 2290,
	3522, 1858, 2921, 1214, 1621, 1472, 1223, 1224, 3014, 2326,
	1192, 1307, 3011, 3458, 3439, 3104, 2206, 1171, 3819, 3198,
	3835, 682, 1080, 2174, 1068, 1050, 1080, 1080, 3413, 1080,
	907, 1154, 3841, 3902, 1080, 1080, 3436, 3440, 3438, 3437,
	2068, 2069, 682, 924, 922, 2819, 1168, 3420, 1435, 2186,
	682, 1045, 3735, 2815, 2816, 3357, 2819, 3142, 2573, 1179,
	1178, 2304, 679, 679, 679, 3703, 1014, 1047, 1574, 682,
	1179, 1178, 3355, 3117, 3156, 3232, 3445, 3446, 2450, 1308,
	3663, 3682, 3469, 62, 2190, 2192, 2193, 4028, 1370, 2427,
	1372, 2426, 3518, 680, 680, 680, 693, 3813, 3626, 676,
	676, 676, 892, 1183, 62, 3615, 1389, 651, 2709, 3621,
	1181, 2759, 62, 1156, 678, 678, 678, 1150, 1347, 1157,
	1189, 1352, 1044, 3356, 3453, 163, 163, 1185, 1186, 3555,
	2628, 62, 677, 677, 677, 3742, 3432, 1375, 3156, 1508,
	961, 163, 3444, 1271, 1272, 1273, 1274, 163, 1191, 1276,
	2512, 163, 163, 163, 4011, 163, 2752, 3734, 3707, 682,
	163, 1507, 1661, 197, 1190, 1662, 1433, 1860, 1458, 1459,
	163, 909, 1447, 1432, 163, 1458, 1459, 2448, 2449, 2055,
	163, 163, 1165, 1167, 1170, 1269, 3151, 1450, 1449, 1431,
	3141, 3687, 3204, 3034, 657, 3688, 3687, 1486, 3842, 1217,
	3800, 657, 1218, 2653, 3710, 633, 633, 3755, 2045, 3721,
	3398, 2395, 1454, 2756, 2757, 633, 633, 2375, 2398, 1523,
	1523, 62, 657, 2382, 2865, 3895, 2866, 2867, 2755, 3207,
	1220, 1140, 1136, 1137, 1138, 1139, 3560, 2658, 3917, 2657,
	2656, 2654, 1149, 684, 1551, 651, 737, 2047, 1667, 3092,
	1562, 1562, 1697, 1700, 1701, 2382, 2385, 1266, 1319, 1320,
	3143, 217, 2418, 1698, 163, 3227, 3228, 2375, 3231, 3502,
	633, 1530, 3449, 1385, 2392, 2397, 3636, 3637, 3638, 3642,
	3640, 3641, 3639, 3307, 1525, 2765, 2768, 2769, 2770, 2766,
	2767, 1386, 1387, 4012, 694, 2974, 2975, 1396, 1397, 1398,
	1399, 1400, 1390, 1402, 3874, 951, 1494, 952, 2655, 1408,
	1401, 3223, 1216, 1485, 1426, 3108, 1521, 1521, 1197, 2620,
	2396, 1434, 1604, 2501, 2413, 2176, 1008, 1609, 1444, 2191,
	2043, 2957, 2959, 2020, 1618, 3259, 1463, 1464, 3754, 1466,
	1467, 1353, 1468, 1517, 1518, 3622, 3623, 2303, 3448, 1351,
	2723, 1221, 3036, 1407, 2385, 3358, 1862, 3617, 1406, 1442,
	1443, 3616, 2381, 1649, 2202, 3628, 1405, 2383, 1404, 1020,
	3164, 688, 955, 956, 957, 2862, 1219, 1523, 3345, 1523,
	1162, 953, 1395, 1048, 1627, 1437, 1441, 1441, 1441, 2386,
	1048, 2188, 2189, 1414, 2381, 2375, 2380, 2727, 2378, 2383,
	3224, 3045, 3044, 1502, 1504, 1416, 1196, 1419, 2297, 1010,
	1437, 1437, 1009, 1515, 1516, 1580, 1383, 1008, 3916, 1872,
	1429, 2384, 1475, 1476, 2299, 2298, 4009, 4010, 1871, 1583,
	3540, 1586, 1587, 2893, 3110, 1613, 1381, 1382, 1462, 2296,
	1552, 1465, 1624, 1588, 1589, 1870, 914, 1523, 2439, 2659,
	2660, 1594, 1595, 2384, 915, 681, 3589, 1506, 681, 681,
	4024, 1081, 1082, 918, 1162, 1749, 1086, 2240, 1575, 1428,
	2239, 1659, 4018, 4030, 1617, 4006, 1602, 3183, 3968, 1798,
	1686, 1780, 1781, 1599, 1784, 2391, 1603, 2386, 3884, 2389,
	1233, 1531, 1799, 3940, 1394, 1537, 662, 1699, 3265, 1543,
	1010, 3165, 2958, 1009, 1549, 1806, 1159, 1808, 1563, 1809,
	1810, 1811, 2311, 1564, 917, 3308, 2512, 1683, 920, 919,
	3261, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,
	1716, 1717, 1718, 2181, 2791, 2312, 2313, 1730, 1731, 1644,
	1645, 2884, 2885, 1233, 1733, 4019, 1162, 2355, 3969, 1008,
	3937, 3969, 1861, 2792, 1197, 2322, 1864, 1783, 1866, 2095,
	679, 950, 1664, 679, 679, 1873, 3941, 1875, 1876, 2382,
	2385, 1702, 1551, 1021, 3931, 2724, 1841, 1884, 1523, 1889,
	1890, 1863, 1892, 1486, 657, 1630, 1807, 2592, 3361, 657,
	1680, 680, 1523, 2412, 680, 680, 961, 676, 3913, 1912,
	676, 676, 1635, 2479, 3225, 1638, 3868, 1657, 3867, 2480,
	3319, 1523, 678, 1654, 1428, 678, 678, 1486, 1658, 1656,
	1844, 1797, 675, 3938, 1655, 1652, 1677, 1682, 1653, 3861,
	677, 1648, 1010, 677, 677, 1009, 1235, 1236, 1237, 1234,
	1647, 3836, 1936, 3824, 2277, 3774, 1852, 2216, 1071, 1076,
	1077, 1943, 1943, 1233, 1486, 1721, 1486, 1486, 1728, 1729,
	657, 657, 2619, 2010, 1884, 2014, 2883, 3773, 1523, 2017,
	2018, 3914, 2321, 3236, 2033, 2792, 633, 3234, 3768, 1233,
	1636, 1233, 2354, 1639, 1640, 2894, 2896, 2897, 2898, 2895,
	633, 3767, 1523, 1235, 1236, 1237, 1234, 3102, 1940, 1893,
	2093, 1668, 2216, 2386, 1235, 1236, 1237, 1234, 2381, 2375,
	2380, 3766, 2378, 2383, 2181, 3765, 3825, 1891, 3775, 657,
	1884, 1523, 3100, 2078, 2370, 657, 657, 657, 692, 692,
	2480, 1847, 1788, 1789, 1790, 2088, 2089, 2090, 2091, 3068,
	2344, 3745, 2097, 3744, 3719, 1804, 1965, 1812, 1805, 217,
	2212, 2216, 217, 217, 3265, 217, 2012, 1669, 1159, 2071,
	1880, 1881, 1882, 2480, 2216, 1818, 1819, 2384, 2977, 2739,
	1946, 2714, 1895, 1896, 1897, 1898, 1842, 2609, 1195, 1848,
	1194, 1920, 1921, 2597, 2216, 1840, 2063, 2064, 2216, 3474,
	2172, 1888, 3422, 2035, 2368, 1798, 1798, 2140, 1930, 1931,
	1771, 2282, 2080, 2081, 2082, 1904, 1798, 1798, 2276, 2040,
	2275, 2042, 2247, 2156, 2181, 1879, 2181, 2216, 1941, 2163,
	1914, 1915, 2061, 2062, 1917, 2049, 1924, 1929, 1926, 1927,
	2056, 2106, 1908, 3388, 2109, 2110, 1909, 2112, 2215, 1934,
	1945, 1437, 1933, 1073, 1074, 1075, 1912, 2066, 3337, 1048,
	1523, 2170, 1048, 1919, 3333, 1441, 2150, 1195, 2077, 3244,
	1048, 1925, 2512, 1947, 1948, 3423, 2142, 1441, 1235, 1236,
	1237, 1234, 2952, 2019, 2034, 1415, 1913, 1736, 2700, 2688,
	1509, 1888, 896, 897, 898, 899, 2680, 2635, 1942, 1944,
	896, 897, 898, 899, 2011, 2617, 2605, 1928, 1197, 2599,
	2594, 2164, 2586, 2016, 1613, 1348, 3389, 4037, 2021, 4020,
	2584, 2582, 2146, 1935, 2214, 2580, 1938, 1939, 2039, 1045,
	2041, 3338, 2343, 2050, 2278, 2254, 3371, 3334, 681, 3409,
	1045, 3652, 3245, 2981, 1680, 1047, 2253, 2135, 2238, 2229,
	2228, 2227, 2217, 2794, 2180, 2480, 1047, 1641, 2135, 2622,
	2075, 2344, 1233, 2076, 2621, 2083, 2084, 1048, 916, 1233,
	1233, 1534, 2613, 2362, 2235, 2220, 2161, 1767, 2344, 2595,
	2101, 2103, 2600, 2595, 1764, 2587, 2100, 2086, 1766, 1763,
	1765, 1769, 1770, 2585, 2581, 1238, 1768, 3472, 2581, 1632,
	1284, 770, 780, 1268, 1266, 2344, 2120, 2277, 1233, 2199,
	2200, 771, 1278, 772, 776, 779, 775, 773, 774, 1233,
	2152, 1233, 1233, 1233, 1233, 2216, 1912, 2181, 1182, 2065,
	1642, 2141, 1146, 2149, 1141, 1250, 2147, 1045, 1287, 1787,
	1786, 3829, 901, 679, 3188, 2160, 3590, 3401, 2287, 2288,
	901, 2291, 3399, 1047, 2294, 1248, 1258, 1259, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1250, 777, 3028, 735, 2165,
	3179, 657, 657, 657, 680, 1787, 1786, 2218, 1424, 4031,
	676, 2270, 1425, 2158, 3996, 3830, 657, 657, 657, 657,
	3591, 3402, 1511, 1438, 2410, 678, 3400, 1469, 778, 2341,
	1253, 1254, 1255, 1256, 1257, 1250, 2203, 3809, 2194, 2347,
	1486, 3718, 1513, 677, 3679, 3619, 921, 1727, 1479, 1480,
	3618, 1482, 1483, 1514, 1487, 1488, 1489, 3604, 1721, 3563,
	2197, 2198, 2196, 1724, 1726, 1723, 1486, 1725, 2208, 3381,
	1774, 1775, 1776, 1777, 1778, 1779, 1772, 1773, 3266, 3180,
	3257, 3251, 1824, 2404, 3246, 3159, 2918, 2917, 1538, 1539,
	1540, 1541, 1542, 2159, 1544, 1545, 1546, 1547, 1548, 3749,
	2763, 2195, 1554, 1555, 1556, 1557, 1249, 1248, 1258, 1259,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 1250, 1817, 2719,
	2632, 2572, 2598, 3181, 1510, 2242, 2359, 2503, 2411, 1424,
	2361, 2145, 2363, 1425, 1235, 1236, 1237, 1234, 2144, 2143,
	657, 1943, 1439, 1411, 1410, 3296, 1164, 3293, 2642, 2484,
	2484, 2033, 2484, 1249, 1248, 1258, 1259, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1250, 2271, 2273, 2274, 2279, 2566,
	2104, 1740, 633, 633, 1235, 1236, 1237, 1234, 3886, 1740,
	1162, 2209, 2364, 2983, 1874, 2576, 1523, 657, 1235, 1236,
	1237, 1234, 2248, 2249, 1234, 2251, 1567, 2374, 1237, 1234,
	657, 2305, 2258, 3631, 2373, 1048, 1162, 2556, 651, 1567,
	3630, 2104, 1307, 2323, 1562, 3000, 2033, 2854, 2852, 2561,
	2831, 2563, 2356, 2611, 2612, 217, 1813, 1814, 1815, 1816,
	2829, 3610, 1820, 1821, 1822, 1823, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 2348, 2486, 2498,
	2490, 2499, 3564, 3565, 2367, 2351, 1561, 1561, 1802, 1286,
	2357, 4002, 2360, 2358, 2702, 2602, 2703, 4001, 2488, 3375,
	2504, 2505, 1285, 1803, 4027, 1045, 3557, 2514, 3944, 3912,
	1308, 2492, 2615, 2507, 2387, 2388, 2170, 2393, 3369, 3911,
	1441, 1047, 3831, 1523, 2733, 1523, 3770, 1523, 1235, 1236,
	1237, 1234, 1162, 2905, 3758, 3748, 2520, 2567, 3738, 3670,
	2634, 3593, 3592, 2349, 2350, 1251, 1252, 1253, 1254, 1255,
	1256, 1257, 1250, 2352, 2353, 1241, 1242, 1243, 1244, 1245,
	1246, 1247, 1239, 2560, 2457, 3558, 1523, 1162, 4026, 2903,
	2901, 2666, 2461, 3414, 3403, 3368, 2493, 3370, 1235, 1236,
	1237, 1234, 1235, 1236, 1237, 1234, 2673, 3294, 3061, 2890,
	2416, 1523, 2904, 2419, 2420, 2421, 2422, 2423, 2424, 2425,
	1502, 1504, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435,
	2436, 2437, 2438, 2508, 2440, 2441, 2442, 2443, 2444, 3247,
	2445, 2511, 2625, 3149, 3024, 2995, 2559, 2994, 2902, 2900,
	2661, 2672, 2629, 2557, 1235, 1236, 1237, 1234, 2888, 2887,
	2721, 2722, 3047, 2644, 2725, 3380, 2677, 2678, 2889, 3060,
	1692, 1693, 1694, 1695, 1696, 2674, 2886, 1235, 1236, 1237,
	1234, 1162, 2878, 1521, 2762, 1162, 2568, 2646, 2650, 2646,
	2872, 2631, 1523, 2871, 2870, 1486, 1235, 1236, 1237, 1234,
	2223, 2014, 2869, 2715, 2588, 2675, 2626, 2500, 1521, 2790,
	2281, 2664, 1737, 2123, 2122, 2796, 1741, 1742, 1743, 1744,
	2607, 1235, 1236, 1237, 1234, 2640, 1782, 2618, 2616, 2121,
	1568, 2231, 2623, 2806, 1792, 2558, 2117, 2706, 2116, 1235,
	1236, 1237, 1234, 1162, 2565, 2072, 1235, 1236, 1237, 1234,
	1867, 2828, 1865, 1633, 2636, 2637, 1680, 1048, 1162, 1162,
	1162, 1943, 1366, 3134, 1162, 4023, 2838, 2839, 2840, 2841,
	1162, 2848, 4021, 2849, 2850, 2662, 2851, 2652, 2853, 3711,
	3712, 2740, 3512, 730, 2774, 2520, 732, 1845, 2639, 2848,
	3922, 731, 2775, 3994, 3960, 1235, 1236, 1237, 1234, 2230,
	3959, 2484, 2807, 3956, 1144, 3892, 3891, 3700, 3872, 2778,
	3816, 2760, 3568, 2787, 3794, 2906, 3785, 1235, 1236, 1237,
	1234, 3762, 2213, 1965, 3757, 633, 1235, 1236, 1237, 1234,
	2079, 2014, 3756, 3715, 3702, 1162, 2033, 2033, 2033, 2033,
	2033, 3701, 2809, 2823, 3671, 3612, 782, 138, 3572, 3561,
	1162, 2033, 138, 2797, 2484, 3543, 3541, 3538, 2823, 2834,
	2835, 2912, 1143, 2826, 2837, 1916, 2741, 2826, 3535, 2742,
	2844, 2744, 1523, 2822, 2960, 3534, 2758, 2781, 3510, 3508,
	2683, 2684, 3482, 657, 657, 2211, 2689, 2798, 2833, 8,
	1932, 7, 3536, 2795, 2789, 3479, 2803, 2804, 3524, 1235,
	1236, 1237, 1234, 3860, 3523, 1888, 3476, 2910, 3367, 2808,
	3366, 2811, 663, 3462, 3363, 138, 3353, 2824, 3601, 1235,
	1236, 1237, 1234, 2836, 2830, 1235, 1236, 1237, 1234, 2031,
	2948, 1235, 1236, 1237, 1234, 2931, 2805, 2827, 3346, 217,
	1235, 1236, 1237, 1234, 217, 3330, 3328, 3323, 3254, 1845,
	2931, 2961, 3253, 3248, 1845, 1845, 3242, 3241, 2868, 2749,
	3160, 2880, 1235, 1236, 1237, 1234, 1798, 3121, 1798, 3120,
	3116, 3010, 1249, 1248, 1258, 1259, 1251, 1252, 1253, 1254,
	1255, 1256, 1257, 1250, 3023, 3114, 3112, 3109, 2913, 3107,
	1523, 656, 656, 3030, 2799, 2919, 2978, 664, 2286, 2802,
	3038, 3035, 2993, 2967, 2105, 2899, 2891, 2108, 2881, 2879,
	2111, 2946, 2949, 2113, 2951, 2875, 2874, 2873, 2728, 1048,
	2720, 2984, 2716, 2916, 838, 837, 2988, 2608, 2300, 2295,
	1048, 2965, 2968, 2292, 2126, 2950, 2932, 2933, 2934, 2935,
	2936, 2119, 1855, 1046, 1587, 1854, 1634, 1315, 138, 3325,
	1311, 2860, 2861, 1844, 1588, 1589, 1310, 1147, 3009, 905,
	1505, 1594, 1595, 138, 4029, 138, 2876, 2877, 2155, 3982,
	3848, 3005, 3844, 3696, 3695, 3007, 1235, 1236, 1237, 1234,
	3684, 1602, 3016, 3680, 200, 3017, 191, 162, 1599, 3537,
	3519, 1603, 2914, 2982, 2985, 3111, 2986, 3394, 3393, 3032,
	3392, 3360, 3115, 3342, 3064, 3340, 3118, 3119, 3006, 3339,
	3336, 3335, 3063, 3003, 1162, 3008, 3001, 3329, 3327, 3309,
	3137, 3020, 3299, 3019, 3018, 3298, 3284, 3027, 3026, 3283,
	3153, 1235, 1236, 1237, 1234, 657, 3189, 3124, 3039, 1235,
	1236, 1237, 1234, 3099, 3066, 3057, 3049, 3169, 1162, 3048,
	3042, 657, 2976, 1162, 1162, 196, 2821, 664, 3059, 3040,
	2738, 3062, 2033, 2341, 2583, 3187, 3052, 3046, 3054, 2579,
	2578, 3101, 2259, 2205, 2252, 3050, 3051, 2210, 3055, 3056,
	3053, 2246, 2245, 2699, 2404, 2219, 2244, 3163, 1235, 1236,
	1237, 1234, 2243, 2241, 2237, 2236, 3213, 2234, 3216, 2225,
	3216, 3216, 1048, 2222, 1048, 1162, 2221, 2125, 1838, 1048,
	1235, 1236, 1237, 1234, 2823, 1837, 3123, 2698, 1836, 1801,
	1800, 1791, 2226, 3237, 1535, 1533, 3106, 2774, 3981, 3233,
	2233, 1523, 1523, 3105, 3943, 1048, 3866, 1305, 3200, 3202,
	3191, 3843, 3780, 3122, 1235, 1236, 1237, 1234, 2823, 3777,
	3764, 3759, 2250, 2823, 2823, 3665, 3172, 2255, 2256, 2257,
	3664, 3176, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267,
	2268, 2269, 1045, 3646, 200, 3162, 3171, 3629, 657, 3185,
	3625, 3174, 3175, 3603, 3587, 3137, 3492, 3196, 1047, 3490,
	3460, 3212, 3186, 3459, 1486, 3238, 3239, 2014, 2014, 3211,
	3221, 3456, 3182, 2374, 3195, 2823, 3073, 3074, 3858, 3455,
	2373, 3421, 3075, 3076, 3077, 3078, 3418, 3079, 3080, 3081,
	3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 1521, 1521,
	3416, 3217, 3218, 3383, 3058, 3222, 1582, 3235, 1593, 1584,
	1261, 1598, 1265, 1601, 3194, 196, 1590, 1418, 1162, 2907,
	2832, 2638, 2666, 2783, 2782, 3243, 2776, 2743, 1262, 1264,
	1260, 3297, 1263, 1249, 1248, 1258, 1259, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1250, 1249, 1248, 1258, 1259, 1251,
	1252, 1253, 1254, 1255, 1256, 1257, 1250, 2697, 2701, 3219,
	2593, 2502, 2446, 2342, 2314, 2204, 3262, 3263, 2280, 1722,
	196, 2085, 1878, 1851, 3250, 3249, 3256, 657, 3255, 3599,
	3260, 1665, 1616, 3252, 1235, 1236, 1237, 1234, 3273, 1249,
	1248, 1258, 1259, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1250, 1591, 1365, 1350, 1346, 1345, 1344, 3277, 1343, 1342,
	1341, 3190, 3280, 3281, 3282, 1340, 3192, 3193, 2520, 1483,
	2470, 2474, 2475, 2476, 2471, 2478, 2472, 2477, 2696, 3286,
	2473, 1339, 3292, 1249, 1248, 1258, 1259, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1250, 2695, 1338, 1845, 1337, 1845,
	2097, 3350, 2694, 3310, 3352, 1235, 1236, 1237, 1234, 1336,
	1335, 1334, 1333, 1332, 3311, 1331, 1330, 3312, 1845, 1845,
	3316, 1329, 1235, 1236, 1237, 1234, 3067, 1328, 3331, 1235,
	1236, 1237, 1234, 1327, 1326, 1325, 1324, 138, 138, 138,
	1046, 1323, 3321, 2646, 1322, 1321, 657, 2014, 3354, 1318,
	1561, 1317, 3315, 1316, 1314, 1313, 1312, 3387, 1249, 1248,
	1258, 1259, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1250,
	1048, 1309, 1302, 2484, 2033, 3406, 1301, 1048, 1299, 3343,
	1249, 1248, 1258, 1259, 1251, 1252, 1253, 1254, 1255, 1256,
	1257, 1250, 3264, 1298, 1297, 1296, 1295, 1294, 3424, 1293,
	2601, 1162, 2604, 3349, 656, 1151, 3347, 2693, 1292, 1291,
	3213, 3276, 2692, 1267, 1162, 1160, 1290, 1289, 1288, 1283,
	1282, 1281, 3359, 3376, 1280, 1162, 1279, 3471, 1199, 3362,
	1145, 1523, 3856, 2691, 1235, 1236, 1237, 1234, 1188, 1235,
	1236, 1237, 1234, 3269, 3270, 2690, 3378, 3854, 3457, 3408,
	657, 2346, 2014, 2328, 1187, 3974, 1162, 3972, 3927, 3454,
	1235, 1236, 1237, 1234, 3272, 2764, 2643, 2513, 2128, 2649,
	1198, 3404, 1235, 1236, 1237, 1234, 2947, 3275, 3274, 2940,
	2667, 2668, 3415, 2939, 3417, 217, 3447, 3411, 2670, 2671,
	2687, 3405, 2943, 2937, 2938, 3473, 121, 2944, 1162, 3483,
	3885, 3425, 3486, 1412, 2676, 3461, 2941, 3796, 3466, 3463,
	3496, 2942, 3022, 64, 3464, 3470, 3608, 1235, 1236, 1237,
	1234, 2606, 63, 3475, 3477, 2844, 2596, 3484, 1521, 3158,
	3481, 3480, 3494, 1692, 1845, 3478, 2686, 1906, 1907, 3539,
	3495, 3487, 2685, 3485, 3313, 3314, 3488, 2945, 3546, 2475,
	2476, 3517, 1162, 1901, 1902, 1903, 2931, 3209, 2414, 3210,
	3467, 1354, 659, 1235, 1236, 1237, 1234, 3503, 3287, 1235,
	1236, 1237, 1234, 2679, 1162, 1523, 1523, 2003, 3513, 660,
	3169, 1576, 3514, 2591, 2611, 2612, 3544, 3545, 661, 3493,
	2630, 1629, 3580, 1610, 3580, 2301, 2087, 2856, 2931, 1193,
	1235, 1236, 1237, 1234, 2857, 2858, 2859, 1162, 3597, 1162,
	3132, 2800, 2801, 3574, 3575, 3569, 3125, 3600, 2810, 3602,
	2784, 3985, 2366, 3384, 3385, 3386, 1523, 2337, 3552, 3390,
	3391, 3553, 3551, 3562, 3571, 1910, 1877, 1048, 3761, 3570,
	1787, 1786, 1361, 1362, 657, 3240, 1162, 1162, 3407, 2458,
	1162, 1162, 2823, 2453, 3548, 3573, 3584, 3410, 2015, 3585,
	1359, 1360, 1226, 3596, 2142, 1357, 1358, 1478, 3408, 1477,
	3648, 2669, 1521, 1733, 3643, 3454, 3279, 3609, 2970, 3606,
	2302, 1912, 2157, 3657, 3613, 1355, 1356, 3633, 3634, 3577,
	2665, 3644, 3645, 1430, 1403, 3666, 3667, 1453, 1235, 1236,
	1237, 1234, 3447, 3289, 3605, 2641, 3950, 1686, 1523, 1686,
	3948, 1532, 3905, 2464, 3611, 663, 1735, 1235, 1236, 1237,
	1234, 3882, 3881, 1733, 3879, 3654, 3820, 3781, 3653, 3660,
	3659, 3697, 1235, 1236, 1237, 1234, 3655, 3598, 3509, 3498,
	3332, 3690, 3306, 1235, 1236, 1237, 1234, 138, 3649, 1845,
	2470, 2474, 2475, 2476, 2471, 2478, 2472, 2477, 3673, 3677,
	2473, 3305, 3290, 1481, 2399, 2369, 1631, 2980, 1428, 3685,
	1492, 3689, 3678, 961, 3525, 3351, 3526, 3025, 3730, 3724,
	2726, 3533, 3976, 3975, 1445, 2330, 2224, 1369, 1184, 3975,
	3976, 1529, 3627, 3285, 1162, 896, 897, 898, 899, 1159,
	1159, 204, 3, 3714, 3747, 1521, 72, 3753, 2, 3998,
	3999, 1, 2707, 1849, 3725, 138, 1363, 3517, 900, 3727,
	3726, 895, 138, 1048, 1499, 2494, 2067, 1527, 1853, 2987,
	902, 2989, 3739, 3743, 2953, 138, 2954, 1162, 138, 138,
	3278, 2956, 1523, 2729, 2177, 2920, 2451, 2318, 3152, 1413,
	1845, 138, 954, 1793, 1646, 1845, 1070, 3760, 1176, 1643,
	1175, 1173, 1738, 784, 2131, 2908, 2155, 3594, 3595, 2882,
	3656, 3984, 4015, 3942, 3987, 3722, 1663, 768, 3769, 1258,
	1259, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1250, 3873,
	3786, 3946, 3788, 3676, 1686, 3812, 2182, 1231, 3802, 3002,
	980, 3041, 3782, 825, 795, 1300, 3771, 1622, 3071, 3069,
	1072, 794, 3373, 2754, 3661, 2973, 3732, 1069, 981, 2114,
	3783, 3674, 1577, 3821, 1581, 2365, 3740, 3839, 3650, 3065,
	3607, 3205, 3651, 2818, 3810, 1605, 3834, 3419, 3529, 1521,
	3527, 3528, 700, 2046, 631, 3815, 1030, 3647, 2127, 701,
	2345, 3838, 3897, 3763, 3823, 1162, 934, 2327, 935, 927,
	2772, 2771, 1703, 1523, 1240, 1720, 3863, 3090, 3091, 1277,
	739, 3870, 3853, 3855, 3857, 3859, 2207, 3837, 3832, 2751,
	3442, 2966, 71, 70, 69, 3846, 68, 3871, 225, 786,
	224, 3698, 3566, 3869, 3989, 765, 3852, 764, 763, 762,
	761, 760, 2469, 2468, 2466, 2465, 2028, 2027, 2094, 3167,
	3878, 3876, 2847, 1523, 2842, 1954, 3730, 1952, 1490, 2394,
	2401, 1951, 3924, 3322, 3520, 3849, 3850, 3862, 3624, 3890,
	2892, 3516, 3915, 1900, 2390, 1971, 2863, 1968, 3923, 1967,
	3906, 2855, 3620, 3614, 3908, 1999, 3728, 3579, 3426, 3909,
	3910, 3427, 3433, 2336, 1095, 1091, 1093, 1094, 1092, 2651,
	1521, 3258, 2371, 3127, 2310, 2309, 2307, 2306, 1388, 3939,
	3932, 3811, 3933, 3893, 3934, 3547, 3935, 3907, 2518, 3936,
	2516, 1142, 3271, 3267, 2139, 3949, 2153, 3951, 3952, 3220,
	3021, 3947, 3945, 2029, 2025, 2024, 1162, 2922, 3802, 2459,
	3955, 3705, 1905, 928, 2325, 41, 118, 105, 179, 56,
	1521, 178, 3772, 3778, 3779, 3753, 55, 3964, 116, 176,
	54, 100, 99, 115, 174, 3966, 3967, 3965, 3973, 3971,
	3970, 53, 3983, 209, 3991, 208, 211, 3990, 210, 3977,
	3978, 3979, 3980, 207, 2569, 2570, 206, 1565, 205, 3883,
	3583, 3865, 4003, 1894, 1162, 890, 3995, 44, 1899, 43,
	2032, 180, 42, 106, 4004, 57, 3838, 40, 4007, 4005,
	39, 38, 34, 13, 4013, 12, 35, 4017, 22, 21,
	1650, 20, 26, 32, 4014, 3822, 31, 131, 130, 30,
	3826, 3827, 129, 128, 127, 126, 3962, 125, 124, 123,
	29, 4025, 19, 48, 47, 46, 9, 119, 114, 112,
	3991, 4033, 28, 3990, 4032, 113, 110, 109, 108, 107,
	103, 3847, 4017, 4034, 101, 83, 82, 81, 4038, 1949,
	1950, 96, 95, 94, 93, 138, 92, 91, 138, 138,
	89, 138, 200, 61, 191, 162, 90, 979, 80, 79,
	78, 77, 76, 98, 1686, 104, 102, 87, 97, 88,
	192, 1114, 86, 85, 84, 75, 74, 183, 73, 160,
	159, 193, 158, 157, 156, 154, 155, 153, 152, 151,
	150, 1046, 149, 148, 138, 49, 50, 51, 2074, 52,
	136, 170, 1046, 169, 2074, 2074, 2074, 200, 61, 191,
	162, 171, 173, 175, 172, 122, 177, 167, 138, 165,
	168, 166, 164, 196, 66, 192, 11, 117, 3324, 18,
	25, 4, 183, 0, 0, 3326, 193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3341, 3957, 3958,
	122, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 1089, 1267,
	144, 145, 0, 146, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1122, 1126, 1128, 1130, 1132, 1133,
	1135, 0, 1140, 1136, 1137, 1138, 1139, 0, 1117, 1118,
	1119, 1120, 1097, 1098, 1123, 0, 1100, 0, 1102, 1103,
	1104, 1105, 1101, 1106, 1107, 1108, 1109, 1110, 1113, 1115,
	1111, 1112, 1121, 0, 0, 144, 145, 0, 146, 147,
	1125, 1127, 1129, 1131, 1134, 0, 0, 0, 0, 0,
	0, 0, 161, 189, 198, 190, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 182, 181, 0, 1116,
	0, 0, 67, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1845,
	0, 0, 0, 0, 0, 0, 0, 161, 189, 198,
	190, 120, 0, 1845, 0, 0, 3489, 0, 0, 3491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 182, 181, 0, 0, 0, 3497, 67, 0, 0,
	0, 0, 0, 184, 185, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 132, 184, 185,
	186, 187, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1235, 1236, 1237, 1234, 0, 968, 0,
	2315, 2316, 2317, 0, 0, 0, 0, 0, 0, 0,
	0, 194, 0, 0, 0, 2332, 2333, 2334, 2335, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 132, 0, 0, 0, 187, 0, 133, 0,
	134, 0, 0, 0, 0, 712, 711, 718, 708, 0,
	0, 0, 0, 60, 0, 0, 0, 715, 716, 0,
	717, 721, 0, 0, 702, 0, 0, 2487, 0, 965,
	966, 0, 1771, 0, 726, 0, 0, 0, 0, 0,
	1008, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 712, 711, 718, 708, 0, 0,
	0, 0, 0, 0, 0, 0, 715, 716, 0, 717,
	721, 0, 2032, 702, 0, 0, 0, 142, 197, 1492,
	143, 138, 0, 726, 1124, 163, 0, 0, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 0, 0, 1010, 0, 0, 1009, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1529, 0, 730, 0,
	0, 732, 142, 197, 0, 143, 731, 0, 0, 2074,
	163, 0, 0, 0, 994, 58, 0, 0, 0, 0,
	0, 0, 0, 969, 0, 0, 135, 45, 0, 0,
	0, 0, 0, 59, 0, 0, 0, 5, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1767,
	971, 0, 0, 0, 139, 140, 1764, 0, 141, 0,
	1766, 1763, 1765, 1769, 1770, 0, 0, 0, 1768, 0,
	0, 0, 0, 0, 0, 703, 705, 704, 0, 0,
	0, 135, 45, 0, 0, 0, 710, 0, 59, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 714, 0,
	0, 0, 0, 0, 0, 729, 2000, 0, 0, 139,
	140, 1961, 707, 141, 0, 993, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1287, 0, 0, 0, 0, 0, 990, 0, 0,
	0, 2003, 1970, 0, 703, 705, 704, 0, 0, 964,
	0, 2004, 2005, 0, 0, 710, 0, 0, 0, 0,
	970, 1003, 0, 0, 0, 0, 0, 714, 0, 0,
	0, 0, 0, 0, 729, 0, 0, 1969, 0, 138,
	0, 707, 0, 0, 999, 697, 0, 0, 0, 138,
	0, 0, 0, 0, 1977, 0, 3845, 0, 0, 0,
	0, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1774, 1775, 1776, 1777, 1778, 1779, 1772, 1773,
	1000, 1004, 0, 0, 709, 713, 719, 0, 720, 722,
	0, 0, 723, 724, 725, 0, 0, 727, 728, 0,
	987, 0, 985, 989, 1007, 0, 0, 0, 986, 983,
	982, 0, 988, 973, 974, 972, 975, 976, 977, 978,
	0, 1005, 1993, 1006, 0, 0, 0, 0, 2788, 0,
	0, 0, 0, 0, 1001, 1002, 0, 0, 0, 0,
	3920, 0, 0, 0, 2000, 0, 0, 0, 0, 0,
	0, 0, 0, 709, 713, 719, 0, 720, 722, 0,
	0, 723, 724, 725, 0, 0, 727, 728, 0, 0,
	0, 997, 2032, 2032, 2032, 2032, 2032, 996, 0, 2003,
	0, 0, 0, 0, 0, 0, 0, 2032, 0, 0,
	0, 0, 992, 0, 1960, 1962, 1959, 0, 0, 1956,
	0, 0, 0, 0, 1981, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3920, 1987, 0, 0, 0, 0,
	0, 0, 3752, 1972, 0, 1955, 0, 0, 0, 0,
	0, 0, 1977, 0, 0, 1975, 2009, 0, 0, 1976,
	1978, 1980, 0, 1982, 1983, 1984, 1988, 1989, 1990, 1992,
	1995, 1996, 1997, 706, 0, 0, 0, 0, 0, 0,
	1985, 1994, 1986, 0, 0, 0, 3920, 0, 0, 0,
	995, 0, 1964, 0, 0, 138, 967, 962, 0, 0,
	138, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2001, 0, 0, 0,
	1993, 138, 2971, 2972, 2000, 0, 0, 0, 0, 1961,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 706, 1957, 1958, 0, 0, 0, 4036, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2003,
	1970, 1998, 0, 0, 0, 0, 0, 0, 0, 2004,
	2005, 0, 0, 0, 0, 0, 0, 0, 1974, 0,
	0, 0, 0, 0, 0, 1973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1969, 0, 0, 0, 0,
	0, 0, 1981, 0, 0, 0, 0, 0, 0, 1991,
	0, 0, 1977, 1987, 0, 0, 0, 0, 1979, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2007, 2006, 1975, 2009, 0, 0, 1976, 1978, 1980,
	0, 1982, 1983, 1984, 1988, 1989, 1990, 1992, 1995, 1996,
	1997, 0, 0, 0, 0, 0, 0, 0, 1985, 1994,
	1986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1993, 0, 0, 0, 1966, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2001, 0, 0, 0, 1114, 0,
	0, 0, 0, 0, 1046, 0, 138, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 2032, 0,
	0, 0, 0, 0, 0, 0, 2002, 0, 0, 2008,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 1998,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1771, 1960, 2813, 1959, 0, 1974, 2812, 0, 0,
	0, 0, 1981, 1973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1987, 3161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1991, 0, 0,
	3173, 0, 0, 1975, 2009, 0, 1979, 1976, 1978, 1980,
	0, 1982, 1983, 1984, 1988, 1989, 1990, 1992, 1995, 1996,
	1997, 0, 0, 0, 0, 0, 0, 0, 1985, 1994,
	1986, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	1964, 0, 0, 0, 0, 0, 0, 1114, 0, 0,
	0, 1122, 1126, 1128, 1130, 1132, 1133, 1135, 0, 1140,
	1136, 1137, 1138, 1139, 2001, 1117, 1118, 1119, 1120, 1097,
	1098, 1123, 0, 1100, 0, 1102, 1103, 1104, 1105, 1101,
	1106, 1107, 1108, 1109, 1110, 1113, 1115, 1111, 1112, 1121,
	0, 1957, 1958, 0, 0, 0, 0, 1125, 1127, 1129,
	1131, 1134, 0, 0, 0, 0, 0, 0, 0, 1998,
	0, 0, 0, 0, 3586, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1974, 2074, 1767, 0,
	0, 0, 0, 1973, 0, 1764, 1116, 0, 0, 1766,
	1763, 1765, 1769, 1770, 0, 0, 0, 1768, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1991, 0, 0,
	0, 0, 0, 0, 0, 0, 1979, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 2007,
	2006, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1122, 1126, 1128, 1130, 1132, 1133, 1135, 0, 1140, 1136,
	1137, 1138, 1139, 0, 1117, 1118, 1119, 1120, 1097, 1098,
	1123, 0, 1100, 0, 1102, 1103, 1104, 1105, 1101, 1106,
	1107, 1108, 1109, 1110, 1113, 1115, 1111, 1112, 1121, 0,
	0, 0, 1966, 0, 0, 0, 1125, 1127, 1129, 1131,
	1134, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3318, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 0, 2002, 1116, 0, 2008, 0, 0,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
	1762, 1774, 1775, 1776, 1777, 1778, 1779, 1772, 1773, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2032, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2074, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2647, 2648, 0, 0,
	0, 1124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2074,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 802, 0, 0, 0,
	0, 0, 0, 0, 0, 391, 0, 519, 552, 541,
	625, 507, 0, 0, 0, 0, 0, 0, 754, 138,
	0, 0, 330, 0, 0, 360, 556, 538, 548, 539,
	524, 525, 526, 533, 340, 527, 528, 529, 499, 530,
	500, 531, 532, 793, 555, 506, 423, 375, 573, 572,
	1124, 0, 861, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 783,
	838, 837, 770, 780, 0, 0, 303, 223, 501, 621,
	503, 502, 771, 0, 772, 776, 779, 775, 773, 774,
	0, 853, 0, 0, 0, 0, 0, 0, 738, 750,
	0, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 748, 0, 0, 0,
	0, 803, 0, 749, 0, 0, 798, 777, 781, 0,
	0, 0, 0, 293, 429, 447, 304, 418, 460, 309,
	426, 299, 390, 415, 0, 0, 295, 445, 425, 372,
	350, 351, 294, 3632, 409, 328, 342, 325, 388, 778,
	801, 805, 324, 875, 799, 455, 297, 0, 454, 387,
	441, 446, 373, 367, 0, 296, 443, 371, 366, 354,
	332, 876, 355, 356, 346, 399, 364, 400, 347, 377,
	376, 378, 0, 0, 0, 138, 0, 483, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 614, 796, 0, 618, 0, 457, 0, 0,
	859, 0, 0, 0, 428, 0, 0, 357, 0, 0,
	0, 800, 0, 412, 393, 872, 0, 0, 410, 362,
	442, 401, 448, 430, 456, 406, 402, 288, 431, 327,
	374, 300, 302, 322, 329, 331, 333, 334, 383, 384,
	396, 417, 433, 434, 435, 326, 310, 411, 311, 344,
	312, 289, 318, 316, 319, 419, 320, 291, 397, 439,
	0, 339, 407, 370, 292, 369, 398, 438, 437, 301,
	464, 470, 471, 560, 0, 476, 645, 646, 647, 485,
	0, 403, 490, 491, 492, 494, 495, 496, 497, 561,
	578, 545, 515, 478, 569, 512, 516, 517, 581, 1795,
	1794, 1796, 469, 358, 359, 0, 337, 285, 286, 640,
	857, 389, 583, 616, 617, 508, 0, 871, 852, 854,
	855, 858, 862, 863, 864, 865, 866, 868, 870, 874,
	639, 0, 562, 577, 643, 576, 636, 395, 0, 416,
	574, 521, 0, 566, 540, 0, 567, 536, 571, 0,
	510, 0, 424, 450, 462, 479, 482, 511, 596, 597,
	598, 290, 481, 600, 601, 602, 603, 604, 605, 606,
	599, 873, 543, 520, 546, 461, 523, 522, 0, 0,
	557, 804, 558, 559, 379, 380, 381, 382, 860, 584,
	308, 480, 405, 0, 544, 0, 0, 0, 0, 0,
	0, 0, 0, 549, 550, 547, 648, 0, 607, 608,
	0, 0, 474, 475, 336, 343, 493, 345, 307, 394,
	338, 459, 352, 0, 486, 551, 487, 610, 613, 611,
	612, 386, 348, 349, 420, 353, 363, 408, 458, 392,
	413, 305, 449, 422, 368, 537, 564, 882, 856, 881,
	883, 884, 880, 885, 886, 867, 759, 0, 811, 878,
	877, 879, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 591, 590, 589, 588, 587, 586,
	585, 0, 0, 534, 436, 317, 279, 313, 314, 321,
	637, 634, 440, 638, 766, 287, 514, 361, 0, 404,
	335, 579, 580, 0, 0, 845, 818, 819, 820, 756,
	821, 815, 816, 757, 817, 846, 809, 842, 843, 785,
	812, 822, 841, 823, 844, 847, 848, 887, 888, 829,
	813, 251, 889, 826, 849, 840, 839, 824, 810, 850,
	851, 792, 787, 827, 828, 814, 833, 834, 835, 758,
	806, 807, 808, 830, 831, 788, 789, 790, 791, 0,
	0, 0, 465, 466, 467, 489, 0, 451, 513, 635,
	0, 0, 0, 0, 0, 0, 0, 563, 575, 609,
	0, 619, 620, 622, 624, 836, 626, 427, 0, 832,
	629, 630, 627, 365, 414, 432, 421, 802, 641, 504,
	505, 642, 615, 0, 751, 0, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 330, 1846, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 793, 555, 506, 423, 375, 573,
	572, 0, 0, 861, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2058, 0, 0, 746, 0, 0,
	783, 838, 837, 770, 780, 0, 0, 303, 223, 501,
	621, 503, 502, 771, 0, 772, 776, 779, 775, 773,
	774, 0, 853, 0, 0, 0, 0, 0, 0, 738,
	750, 0, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 748, 0, 0,
	0, 0, 803, 0, 749, 0, 0, 2059, 777, 781,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	778, 801, 805, 324, 875, 799, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 876, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 796, 0, 618, 0, 457, 0,
	0, 859, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 800, 0, 412, 393, 872, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 857, 389, 583, 616, 617, 508, 0, 871, 852,
	854, 855, 858, 862, 863, 864, 865, 866, 868, 870,
	874, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 873, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 804, 558, 559, 379, 380, 381, 382, 860,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 882, 856,
	881, 883, 884, 880, 885, 886, 867, 759, 0, 811,
	878, 877, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 766, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 845, 818, 819, 820,
	756, 821, 815, 816, 757, 817, 846, 809, 842, 843,
	785, 812, 822, 841, 823, 844, 847, 848, 887, 888,
	829, 813, 251, 889, 826, 849, 840, 839, 824, 810,
	850, 851, 792, 787, 827, 828, 814, 833, 834, 835,
	758, 806, 807, 808, 830, 831, 788, 789, 790, 791,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 836, 626, 427, 0,
	832, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 0, 751, 200, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 1270, 555, 506, 423, 375, 573,
	572, 0, 0, 861, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	783, 838, 837, 770, 780, 0, 0, 303, 223, 501,
	621, 503, 502, 771, 0, 772, 776, 779, 775, 773,
	774, 0, 853, 0, 0, 0, 0, 0, 0, 738,
	750, 0, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 748, 0, 0,
	0, 0, 803, 0, 749, 0, 0, 798, 777, 781,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	778, 801, 805, 324, 875, 799, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 876, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 796, 0, 618, 0, 457, 0,
	0, 859, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 800, 0, 412, 393, 872, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 857, 389, 583, 616, 617, 508, 0, 871, 852,
	854, 855, 858, 862, 863, 864, 865, 866, 868, 870,
	874, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 873, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 804, 558, 559, 379, 380, 381, 382, 860,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 882, 856,
	881, 883, 884, 880, 885, 886, 867, 759, 0, 811,
	878, 877, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 766, 287, 514, 361, 163,
	404, 335, 579, 580, 0, 0, 845, 818, 819, 820,
	756, 821, 815, 816, 757, 817, 846, 809, 842, 843,
	785, 812, 822, 841, 823, 844, 847, 848, 887, 888,
	829, 813, 251, 889, 826, 849, 840, 839, 824, 810,
	850, 851, 792, 787, 827, 828, 814, 833, 834, 835,
	758, 806, 807, 808, 830, 831, 788, 789, 790, 791,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 836, 626, 427, 0,
	832, 629, 630, 627, 365, 414, 432, 421, 802, 641,
	504, 505, 642, 615, 0, 751, 0, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	754, 0, 0, 0, 330, 4035, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 793, 555, 506, 423, 375,
	573, 572, 0, 0, 861, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 783, 838, 837, 770, 780, 0, 0, 303, 223,
	501, 621, 503, 502, 771, 0, 772, 776, 779, 775,
	773, 774, 0, 853, 0, 0, 0, 0, 0, 0,
	738, 750, 0, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 748, 0,
	0, 0, 0, 803, 0, 749, 0, 0, 798, 777,
	781, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 778, 801, 805, 324, 875, 799, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 876, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 796, 0, 618, 0, 457,
	0, 0, 859, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 800, 0, 412, 393, 872, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 857, 389, 583, 616, 617, 508, 0, 871,
	852, 854, 855, 858, 862, 863, 864, 865, 866, 868,
	870, 874, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 873, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 804, 558, 559, 379, 380, 381, 382,
	860, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 882,
	856, 881, 883, 884, 880, 885, 886, 867, 759, 0,
	811, 878, 877, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 766, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 845, 818, 819,
	820, 756, 821, 815, 816, 757, 817, 846, 809, 842,
	843, 785, 812, 822, 841, 823, 844, 847, 848, 887,
	888, 829, 813, 251, 889, 826, 849, 840, 839, 824,
	810, 850, 851, 792, 787, 827, 828, 814, 833, 834,
	835, 758, 806, 807, 808, 830, 831, 788, 789, 790,
	791, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 836, 626, 427,
	0, 832, 629, 630, 627, 365, 414, 432, 421, 802,
	641, 504, 505, 642, 615, 0, 751, 0, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 754, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 793, 555, 506, 423,
	375, 573, 572, 0, 0, 861, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 783, 838, 837, 770, 780, 0, 0, 303,
	223, 501, 621, 503, 502, 771, 0, 772, 776, 779,
	775, 773, 774, 0, 853, 0, 0, 0, 0, 0,
	0, 738, 750, 0, 755, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 748,
	0, 0, 0, 0, 803, 0, 749, 0, 0, 798,
	777, 781, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 778, 801, 805, 324, 875, 799, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 876, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 796, 0, 618, 0,
	457, 0, 0, 859, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 800, 0, 412, 393, 872, 3921,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 857, 389, 583, 616, 617, 508, 0,
	871, 852, 854, 855, 858, 862, 863, 864, 865, 866,
	868, 870, 874, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 873, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 804, 558, 559, 379, 380, 381,
	382, 860, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	882, 856, 881, 883, 884, 880, 885, 886, 867, 759,
	0, 811, 878, 877, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 766, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 845, 818,
	819, 820, 756, 821, 815, 816, 757, 817, 846, 809,
	842, 843, 785, 812, 822, 841, 823, 844, 847, 848,
	887, 888, 829, 813, 251, 889, 826, 849, 840, 839,
	824, 810, 850, 851, 792, 787, 827, 828, 814, 833,
	834, 835, 758, 806, 807, 808, 830, 831, 788, 789,
	790, 791, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 836, 626,
	427, 0, 832, 629, 630, 627, 365, 414, 432, 421,
	802, 641, 504, 505, 642, 615, 0, 751, 0, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 754, 0, 0, 0, 330, 1846, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 793, 555, 506,
	423, 375, 573, 572, 0, 0, 861, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 783, 838, 837, 770, 780, 0, 0,
	303, 223, 501, 621, 503, 502, 771, 0, 772, 776,
	779, 775, 773, 774, 0, 853, 0, 0, 0, 0,
	0, 0, 738, 750, 0, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
	748, 0, 0, 0, 0, 803, 0, 749, 0, 0,
	798, 777, 781, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 778, 801, 805, 324, 875, 799, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 876, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 796, 0, 618,
	0, 457, 0, 0, 859, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 800, 0, 412, 393, 872,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 857, 389, 583, 616, 617, 508,
	0, 871, 852, 854, 855, 858, 862, 863, 864, 865,
	866, 868, 870, 874, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 873, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 804, 558, 559, 379, 380,
	381, 382, 860, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 882, 856, 881, 883, 884, 880, 885, 886, 867,
	759, 0, 811, 878, 877, 879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 766, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 845,
	818, 819, 820, 756, 821, 815, 816, 757, 817, 846,
	809, 842, 843, 785, 812, 822, 841, 823, 844, 847,
	848, 887, 888, 829, 813, 251, 889, 826, 849, 840,
	839, 824, 810, 850, 851, 792, 787, 827, 828, 814,
	833, 834, 835, 758, 806, 807, 808, 830, 831, 788,
	789, 790, 791, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 836,
	626, 427, 0, 832, 629, 630, 627, 365, 414, 432,
	421, 802, 641, 504, 505, 642, 615, 0, 751, 0,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 793, 555,
	506, 423, 375, 573, 572, 0, 0, 861, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 783, 838, 837, 770, 780, 0,
	0, 303, 223, 501, 621, 503, 502, 771, 0, 772,
	776, 779, 775, 773, 774, 0, 853, 0, 0, 0,
	0, 0, 0, 738, 750, 0, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 748, 1560, 0, 0, 0, 803, 0, 749, 0,
	0, 798, 777, 781, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 778, 801, 805, 324, 875, 799,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 876, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 796, 0,
	618, 0, 457, 0, 0, 859, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 800, 0, 412, 393,
	872, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 857, 389, 583, 616, 617,
	508, 0, 871, 852, 854, 855, 858, 862, 863, 864,
	865, 866, 868, 870, 874, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 873, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 804, 558, 559, 379,
	380, 381, 382, 860, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 882, 856, 881, 883, 884, 880, 885, 886,
	867, 759, 0, 811, 878, 877, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 766,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	845, 818, 819, 820, 756, 821, 815, 816, 757, 817,
	846, 809, 842, 843, 785, 812, 822, 841, 823, 844,
	847, 848, 887, 888, 829, 813, 251, 889, 826, 849,
	840, 839, 824, 810, 850, 851, 792, 787, 827, 828,
	814, 833, 834, 835, 758, 806, 807, 808, 830, 831,
	788, 789, 790, 791, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	836, 626, 427, 0, 832, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 802, 751,
	0, 2232, 0, 0, 0, 0, 0, 391, 0, 519,
	552, 541, 625, 507, 0, 0, 0, 0, 0, 0,
	754, 0, 0, 0, 330, 0, 0, 360, 556, 538,
	548, 539, 524, 525, 526, 533, 340, 527, 528, 529,
	499, 530, 500, 531, 532, 793, 555, 506, 423, 375,
	573, 572, 0, 0, 861, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 783, 838, 837, 770, 780, 0, 0, 303, 223,
	501, 621, 503, 502, 771, 0, 772, 776, 779, 775,
	773, 774, 0, 853, 0, 0, 0, 0, 0, 0,
	738, 750, 0, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 748, 0,
	0, 0, 0, 803, 0, 749, 0, 0, 798, 777,
	781, 0, 0, 0, 0, 293, 429, 447, 304, 418,
	460, 309, 426, 299, 390, 415, 0, 0, 295, 445,
	425, 372, 350, 351, 294, 0, 409, 328, 342, 325,
	388, 778, 801, 805, 324, 875, 799, 455, 297, 0,
	454, 387, 441, 446, 373, 367, 0, 296, 443, 371,
	366, 354, 332, 876, 355, 356, 346, 399, 364, 400,
	347, 377, 376, 378, 0, 0, 0, 0, 0, 483,
	484, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 614, 796, 0, 618, 0, 457,
	0, 0, 859, 0, 0, 0, 428, 0, 0, 357,
	0, 0, 0, 800, 0, 412, 393, 872, 0, 0,
	410, 362, 442, 401, 448, 430, 456, 406, 402, 288,
	431, 327, 374, 300, 302, 322, 329, 331, 333, 334,
	383, 384, 396, 417, 433, 434, 435, 326, 310, 411,
	311, 344, 312, 289, 318, 316, 319, 419, 320, 291,
	397, 439, 0, 339, 407, 370, 292, 369, 398, 438,
	437, 301, 464, 470, 471, 560, 0, 476, 645, 646,
	647, 485, 0, 403, 490, 491, 492, 494, 495, 496,
	497, 561, 578, 545, 515, 478, 569, 512, 516, 517,
	581, 0, 0, 0, 469, 358, 359, 0, 337, 285,
	286, 640, 857, 389, 583, 616, 617, 508, 0, 871,
	852, 854, 855, 858, 862, 863, 864, 865, 866, 868,
	870, 874, 639, 0, 562, 577, 643, 576, 636, 395,
	0, 416, 574, 521, 0, 566, 540, 0, 567, 536,
	571, 0, 510, 0, 424, 450, 462, 479, 482, 511,
	596, 597, 598, 290, 481, 600, 601, 602, 603, 604,
	605, 606, 599, 873, 543, 520, 546, 461, 523, 522,
	0, 0, 557, 804, 558, 559, 379, 380, 381, 382,
	860, 584, 308, 480, 405, 0, 544, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 550, 547, 648, 0,
	607, 608, 0, 0, 474, 475, 336, 343, 493, 345,
	307, 394, 338, 459, 352, 0, 486, 551, 487, 610,
	613, 611, 612, 386, 348, 349, 420, 353, 363, 408,
	458, 392, 413, 305, 449, 422, 368, 537, 564, 882,
	856, 881, 883, 884, 880, 885, 886, 867, 759, 0,
	811, 878, 877, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 592, 591, 590, 589, 588,
	587, 586, 585, 0, 0, 534, 436, 317, 279, 313,
	314, 321, 637, 634, 440, 638, 766, 287, 514, 361,
	0, 404, 335, 579, 580, 0, 0, 845, 818, 819,
	820, 756, 821, 815, 816, 757, 817, 846, 809, 842,
	843, 785, 812, 822, 841, 823, 844, 847, 848, 887,
	888, 829, 813, 251, 889, 826, 849, 840, 839, 824,
	810, 850, 851, 792, 787, 827, 828, 814, 833, 834,
	835, 758, 806, 807, 808, 830, 831, 788, 789, 790,
	791, 0, 0, 0, 465, 466, 467, 489, 0, 451,
	513, 635, 0, 0, 0, 0, 0, 0, 0, 563,
	575, 609, 0, 619, 620, 622, 624, 836, 626, 427,
	0, 832, 629, 630, 627, 365, 414, 432, 421, 802,
	641, 504, 505, 642, 615, 0, 751, 0, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 754, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 793, 555, 506, 423,
	375, 573, 572, 0, 0, 861, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 783, 838, 837, 770, 780, 0, 0, 303,
	223, 501, 621, 503, 502, 771, 0, 772, 776, 779,
	775, 773, 774, 0, 853, 0, 0, 0, 0, 0,
	0, 738, 750, 0, 755, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 748,
	1839, 0, 0, 0, 803, 0, 749, 0, 0, 798,
	777, 781, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 778, 801, 805, 324, 875, 799, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 876, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 796, 0, 618, 0,
	457, 0, 0, 859, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 800, 0, 412, 393, 872, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 857, 389, 583, 616, 617, 508, 0,
	871, 852, 854, 855, 858, 862, 863, 864, 865, 866,
	868, 870, 874, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 873, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 804, 558, 559, 379, 380, 381,
	382, 860, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	882, 856, 881, 883, 884, 880, 885, 886, 867, 759,
	0, 811, 878, 877, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 766, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 845, 818,
	819, 820, 756, 821, 815, 816, 757, 817, 846, 809,
	842, 843, 785, 812, 822, 841, 823, 844, 847, 848,
	887, 888, 829, 813, 251, 889, 826, 849, 840, 839,
	824, 810, 850, 851, 792, 787, 827, 828, 814, 833,
	834, 835, 758, 806, 807, 808, 830, 831, 788, 789,
	790, 791, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 836, 626,
	427, 0, 832, 629, 630, 627, 365, 414, 432, 421,
	802, 641, 504, 505, 642, 615, 0, 751, 0, 391,
	0, 519, 552, 541, 625, 507, 0, 0, 0, 0,
	0, 0, 754, 0, 0, 0, 330, 0, 0, 360,
	556, 538, 548, 539, 524, 525, 526, 533, 340, 527,
	528, 529, 499, 530, 500, 531, 532, 793, 555, 506,
	423, 375, 573, 572, 0, 0, 861, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 783, 838, 837, 770, 780, 0, 0,
	303, 223, 501, 621, 503, 502, 771, 0, 772, 776,
	779, 775, 773, 774, 0, 853, 0, 0, 0, 0,
	0, 0, 738, 750, 0, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
	748, 0, 0, 0, 0, 803, 0, 749, 0, 0,
	798, 777, 781, 0, 0, 0, 0, 293, 429, 447,
	304, 418, 460, 309, 426, 299, 390, 415, 0, 0,
	295, 445, 425, 372, 350, 351, 294, 0, 409, 328,
	342, 325, 388, 778, 801, 805, 324, 875, 799, 455,
	297, 0, 454, 387, 441, 446, 373, 367, 0, 296,
	443, 371, 366, 354, 332, 876, 355, 356, 346, 399,
	364, 400, 347, 377, 376, 378, 0, 0, 0, 0,
	0, 483, 484, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 614, 796, 0, 618,
	0, 457, 0, 0, 859, 0, 0, 0, 428, 0,
	0, 357, 0, 0, 0, 800, 0, 412, 393, 872,
	0, 0, 410, 362, 442, 401, 448, 430, 456, 406,
	402, 288, 431, 327, 374, 300, 302, 322, 329, 331,
	333, 334, 383, 384, 396, 417, 433, 434, 435, 326,
	310, 411, 311, 344, 312, 289, 318, 316, 319, 419,
	320, 291, 397, 439, 0, 339, 407, 370, 292, 369,
	398, 438, 437, 301, 464, 470, 471, 560, 0, 476,
	645, 646, 647, 485, 0, 403, 490, 491, 492, 494,
	495, 496, 497, 561, 578, 545, 515, 478, 569, 512,
	516, 517, 581, 0, 0, 0, 469, 358, 359, 0,
	337, 285, 286, 640, 857, 389, 583, 616, 617, 508,
	0, 871, 852, 854, 855, 858, 862, 863, 864, 865,
	866, 868, 870, 874, 639, 0, 562, 577, 643, 576,
	636, 395, 0, 416, 574, 521, 0, 566, 540, 0,
	567, 536, 571, 0, 510, 0, 424, 450, 462, 479,
	482, 511, 596, 597, 598, 290, 481, 600, 601, 602,
	603, 604, 605, 606, 599, 873, 543, 520, 546, 461,
	523, 522, 0, 0, 557, 804, 558, 559, 379, 380,
	381, 382, 860, 584, 308, 480, 405, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 549, 550, 547,
	648, 0, 607, 608, 0, 0, 474, 475, 336, 343,
	493, 345, 307, 394, 338, 459, 352, 0, 486, 551,
	487, 610, 613, 611, 612, 386, 348, 349, 420, 353,
	363, 408, 458, 392, 413, 305, 449, 422, 368, 537,
	564, 882, 856, 881, 883, 884, 880, 885, 886, 867,
	759, 0, 811, 878, 877, 879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 592, 591, 590,
	589, 588, 587, 586, 585, 0, 0, 534, 436, 317,
	279, 313, 314, 321, 637, 634, 440, 638, 766, 287,
	514, 361, 0, 404, 335, 579, 580, 0, 0, 845,
	818, 819, 820, 756, 821, 815, 816, 757, 817, 846,
	809, 842, 843, 785, 812, 822, 841, 823, 844, 847,
	848, 887, 888, 829, 813, 251, 889, 826, 849, 840,
	839, 824, 810, 850, 851, 792, 787, 827, 828, 814,
	833, 834, 835, 758, 806, 807, 808, 830, 831, 788,
	789, 790, 791, 0, 0, 0, 465, 466, 467, 489,
	0, 451, 513, 635, 0, 0, 0, 0, 0, 0,
	0, 563, 575, 609, 0, 619, 620, 622, 624, 836,
	626, 427, 0, 832, 629, 630, 627, 365, 414, 432,
	421, 802, 641, 504, 505, 642, 615, 0, 751, 0,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 793, 555,
	506, 423, 375, 573, 572, 0, 0, 861, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 783, 838, 837, 770, 780, 0,
	0, 303, 223, 501, 621, 503, 502, 771, 0, 772,
	776, 779, 775, 773, 774, 0, 853, 0, 0, 0,
	0, 0, 0, 738, 750, 0, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 748, 0, 0, 0, 0, 803, 0, 749, 0,
	0, 798, 777, 781, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 778, 801, 805, 324, 875, 799,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 876, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 796, 0,
	618, 0, 457, 0, 0, 859, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 800, 0, 412, 393,
	872, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 857, 389, 583, 616, 617,
	508, 0, 871, 852, 854, 855, 858, 862, 863, 864,
	865, 866, 868, 870, 874, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 873, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 804, 558, 559, 379,
	380, 381, 382, 860, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 882, 856, 881, 883, 884, 880, 885, 886,
	867, 759, 0, 811, 878, 877, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 766,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	845, 818, 819, 820, 756, 821, 815, 816, 757, 817,
	846, 809, 842, 843, 785, 812, 822, 841, 823, 844,
	847, 848, 887, 888, 829, 813, 251, 889, 826, 849,
	840, 839, 824, 810, 850, 851, 792, 787, 827, 828,
	814, 833, 834, 835, 758, 806, 807, 808, 830, 831,
	788, 789, 790, 791, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	836, 626, 427, 0, 3499, 629, 3500, 3501, 365, 414,
	432, 421, 802, 641, 504, 505, 642, 615, 0, 751,
	0, 391, 0, 519, 552, 541, 625, 507, 0, 0,
	0, 0, 0, 0, 754, 0, 0, 0, 330, 0,
	0, 360, 556, 538, 548, 539, 524, 525, 526, 533,
	340, 527, 528, 529, 499, 530, 500, 531, 532, 793,
	555, 506, 423, 375, 573, 572, 0, 0, 861, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 783, 838, 837, 770, 780,
	0, 0, 303, 223, 501, 621, 503, 502, 2704, 0,
	2705, 776, 779, 775, 773, 774, 0, 853, 0, 0,
	0, 0, 0, 0, 738, 750, 0, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 748, 0, 0, 0, 0, 803, 0, 749,
	0, 0, 798, 777, 781, 0, 0, 0, 0, 293,
	429, 447, 304, 418, 460, 309, 426, 299, 390, 415,
	0, 0, 295, 445, 425, 372, 350, 351, 294, 0,
	409, 328, 342, 325, 388, 778, 801, 805, 324, 875,
	799, 455, 297, 0, 454, 387, 441, 446, 373, 367,
	0, 296, 443, 371, 366, 354, 332, 876, 355, 356,
	346, 399, 364, 400, 347, 377, 376, 378, 0, 0,
	0, 0, 0, 483, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 614, 796,
	0, 618, 0, 457, 0, 0, 859, 0, 0, 0,
	428, 0, 0, 357, 0, 0, 0, 800, 0, 412,
	393, 872, 0, 0, 410, 362, 442, 401, 448, 430,
	456, 406, 402, 288, 431, 327, 374, 300, 302, 322,
	329, 331, 333, 334, 383, 384, 396, 417, 433, 434,
	435, 326, 310, 411, 311, 344, 312, 289, 318, 316,
	319, 419, 320, 291, 397, 439, 0, 339, 407, 370,
	292, 369, 398, 438, 437, 301, 464, 470, 471, 560,
	0, 476, 645, 646, 647, 485, 0, 403, 490, 491,
	492, 494, 495, 496, 497, 561, 578, 545, 515, 478,
	569, 512, 516, 517, 581, 0, 0, 0, 469, 358,
	359, 0, 337, 285, 286, 640, 857, 389, 583, 616,
	617, 508, 0, 871, 852, 854, 855, 858, 862, 863,
	864, 865, 866, 868, 870, 874, 639, 0, 562, 577,
	643, 576, 636, 395, 0, 416, 574, 521, 0, 566,
	540, 0, 567, 536, 571, 0, 510, 0, 424, 450,
	462, 479, 482, 511, 596, 597, 598, 290, 481, 600,
	601, 602, 603, 604, 605, 606, 599, 873, 543, 520,
	546, 461, 523, 522, 0, 0, 557, 804, 558, 559,
	379, 380, 381, 382, 860, 584, 308, 480, 405, 0,
	544, 0, 0, 0, 0, 0, 0, 0, 0, 549,
	550, 547, 648, 0, 607, 608, 0, 0, 474, 475,
	336, 343, 493, 345, 307, 394, 338, 459, 352, 0,
	486, 551, 487, 610, 613, 611, 612, 386, 348, 349,
	420, 353, 363, 408, 458, 392, 413, 305, 449, 422,
	368, 537, 564, 882, 856, 881, 883, 884, 880, 885,
	886, 867, 759, 0, 811, 878, 877, 879, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	591, 590, 589, 588, 587, 586, 585, 0, 0, 534,
	436, 317, 279, 313, 314, 321, 637, 634, 440, 638,
	766, 287, 514, 361, 0, 404, 335, 579, 580, 0,
	0, 845, 818, 819, 820, 756, 821, 815, 816, 757,
	817, 846, 809, 842, 843, 785, 812, 822, 841, 823,
	844, 847, 848, 887, 888, 829, 813, 251, 889, 826,
	849, 840, 839, 824, 810, 850, 851, 792, 787, 827,
	828, 814, 833, 834, 835, 758, 806, 807, 808, 830,
	831, 788, 789, 790, 791, 0, 0, 0, 465, 466,
	467, 489, 0, 451, 513, 635, 0, 0, 0, 0,
	0, 0, 0, 563, 575, 609, 0, 619, 620, 622,
	624, 836, 626, 427, 0, 832, 629, 630, 627, 365,
	414, 432, 421, 802, 641, 504, 505, 642, 615, 0,
	751, 0, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 1704, 0, 0, 0, 754, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	793, 555, 506, 423, 375, 573, 572, 0, 0, 861,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 746, 0, 0, 783, 838, 837, 770,
	780, 0, 0, 303, 223, 501, 621, 503, 502, 771,
	0, 772, 776, 779, 775, 773, 774, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 747, 748, 0, 0, 0, 0, 803, 0,
	749, 0, 0, 798, 777, 781, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 778, 801, 805, 324,
	875, 799, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 876, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	796, 0, 618, 0, 457, 0, 0, 859, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 800, 0,
	412, 393, 872, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 1705, 1706,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 857, 389, 583,
	616, 617, 508, 0, 871, 852, 854, 855, 858, 862,
	863, 864, 865, 866, 868, 870, 874, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 873, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 804, 558,
	559, 379, 380, 381, 382, 860, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 882, 856, 881, 883, 884, 880,
	885, 886, 867, 759, 0, 811, 878, 877, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 766, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 845, 818, 819, 820, 756, 821, 815, 816,
	757, 817, 846, 809, 842, 843, 785, 812, 822, 841,
	823, 844, 847, 848, 887, 888, 829, 813, 251, 889,
	826, 849, 840, 839, 824, 810, 850, 851, 792, 787,
	827, 828, 814, 833, 834, 835, 758, 806, 807, 808,
	830, 831, 788, 789, 790, 791, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 836, 626, 427, 0, 832, 629, 630, 627,
	365, 414, 432, 421, 802, 641, 504, 505, 642, 615,
	0, 751, 0, 391, 0, 519, 552, 541, 625, 507,
	0, 0, 0, 0, 0, 0, 754, 0, 0, 0,
	330, 0, 0, 360, 556, 538, 548, 539, 524, 525,
	526, 533, 340, 527, 528, 529, 499, 530, 500, 531,
	532, 793, 555, 506, 423, 375, 573, 572, 0, 0,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 0, 0, 783, 838, 837,
	770, 780, 0, 0, 303, 223, 501, 621, 503, 502,
	771, 0, 772, 776, 779, 775, 773, 774, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 750, 0, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 748, 0, 0, 0, 0, 803,
	0, 749, 0, 0, 798, 777, 781, 0, 0, 0,
	0, 293, 429, 447, 304, 418, 460, 309, 426, 299,
	390, 415, 0, 0, 295, 445, 425, 372, 350, 351,
	294, 0, 409, 328, 342, 325, 388, 778, 801, 805,
	324, 875, 799, 455, 297, 0, 454, 387, 441, 446,
	373, 367, 0, 296, 443, 371, 366, 354, 332, 876,
	355, 356, 346, 399, 364, 400, 347, 377, 376, 378,
	0, 0, 0, 0, 0, 483, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	614, 796, 0, 618, 0, 457, 0, 0, 859, 0,
	0, 0, 428, 0, 0, 357, 0, 0, 0, 800,
	0, 412, 393, 872, 0, 0, 410, 362, 442, 401,
	448, 430, 456, 406, 402, 288, 431, 327, 374, 300,
	302, 322, 329, 331, 333, 334, 383, 384, 396, 417,
	433, 434, 435, 326, 310, 411, 311, 344, 312, 289,
	318, 316, 319, 419, 320, 291, 397, 439, 0, 339,
	407, 370, 292, 369, 398, 438, 437, 301, 464, 470,
	471, 560, 0, 476, 645, 646, 647, 485, 0, 403,
	490, 491, 492, 494, 495, 496, 497, 561, 578, 545,
	515, 478, 569, 512, 516, 517, 581, 0, 0, 0,
	469, 358, 359, 0, 337, 285, 286, 640, 857, 389,
	583, 616, 617, 508, 0, 871, 852, 854, 855, 858,
	862, 863, 864, 865, 866, 868, 870, 874, 639, 0,
	562, 577, 643, 576, 636, 395, 0, 416, 574, 521,
	0, 566, 540, 0, 567, 536, 571, 0, 510, 0,
	424, 450, 462, 479, 482, 511, 596, 597, 598, 290,
	481, 600, 601, 602, 603, 604, 605, 606, 599, 873,
	543, 520, 546, 461, 523, 522, 0, 0, 557, 804,
	558, 559, 379, 380, 381, 382, 860, 584, 308, 480,
	405, 0, 544, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 550, 547, 648, 0, 607, 608, 0, 0,
	474, 475, 336, 343, 493, 345, 307, 394, 338, 459,
	352, 0, 486, 551, 487, 610, 613, 611, 612, 386,
	348, 349, 420, 353, 363, 408, 458, 392, 413, 305,
	449, 422, 368, 537, 564, 882, 856, 881, 883, 884,
	880, 885, 886, 867, 759, 0, 811, 878, 877, 879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 591, 590, 589, 588, 587, 586, 585, 0,
	0, 534, 436, 317, 279, 313, 314, 321, 637, 634,
	440, 638, 766, 287, 514, 361, 0, 404, 335, 579,
	580, 0, 0, 845, 818, 819, 820, 756, 821, 815,
	816, 757, 817, 846, 809, 842, 843, 785, 812, 822,
	841, 823, 844, 847, 848, 887, 888, 829, 813, 251,
	889, 826, 849, 840, 839, 824, 810, 850, 851, 792,
	787, 827, 828, 814, 833, 834, 835, 758, 806, 807,
	808, 830, 831, 788, 789, 790, 791, 0, 0, 0,
	465, 466, 467, 489, 0, 451, 513, 635, 0, 0,
	0, 0, 0, 0, 0, 563, 575, 609, 0, 619,
	620, 622, 624, 836, 626, 427, 0, 832, 629, 630,
	627, 365, 414, 432, 421, 802, 641, 504, 505, 642,
	615, 0, 751, 0, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 793, 555, 506, 423, 375, 573, 572, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 783, 838,
	837, 770, 780, 0, 0, 303, 223, 501, 621, 503,
	502, 771, 0, 772, 776, 779, 775, 773, 774, 0,
	853, 0, 0, 0, 0, 0, 0, 738, 750, 0,
	755, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 747, 748, 0, 0, 0, 0,
	803, 0, 749, 0, 0, 798, 777, 781, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 778, 801,
	805, 324, 875, 799, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	876, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 796, 0, 618, 0, 457, 0, 0, 859,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	800, 0, 412, 393, 872, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 857,
	389, 583, 616, 617, 508, 0, 871, 852, 854, 855,
	858, 862, 863, 864, 865, 866, 868, 870, 874, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	873, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	804, 558, 559, 379, 380, 381, 382, 860, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 882, 856, 881, 883,
	884, 880, 885, 886, 867, 759, 0, 811, 878, 877,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 766, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 845, 818, 819, 820, 756, 821,
	815, 816, 757, 817, 846, 809, 842, 843, 785, 812,
	822, 841, 823, 844, 847, 848, 887, 888, 829, 813,
	251, 889, 826, 849, 840, 839, 824, 810, 850, 851,
	792, 787, 827, 828, 814, 833, 834, 835, 758, 806,
	807, 808, 830, 831, 788, 789, 790, 791, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 836, 626, 427, 0, 832, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 0, 751, 200, 61, 191, 162, 0, 0,
	0, 0, 0, 0, 391, 0, 519, 552, 541, 625,
	507, 0, 192, 0, 0, 0, 0, 0, 0, 183,
	0, 330, 0, 193, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 136, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 161, 189, 198, 190, 120, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 215,
	0, 0, 0, 428, 0, 0, 357, 188, 182, 181,
	473, 0, 412, 393, 227, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 593, 594, 595, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 452, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 218, 565, 568, 498, 228,
	0, 562, 577, 535, 576, 229, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 134, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 226, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 233,
	298, 440, 234, 0, 287, 514, 361, 163, 404, 335,
	579, 580, 58, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 230, 45,
	216, 219, 221, 220, 0, 59, 563, 575, 609, 5,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 139, 231, 504, 505,
	232, 615, 200, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	136, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 2382,
	2385, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 2386, 457, 0, 0, 0, 2381, 0,
	2380, 428, 2378, 2383, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 2384, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 163, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1306, 0, 0, 222, 0, 0, 770, 780, 0,
	0, 303, 223, 501, 621, 503, 502, 771, 0, 772,
	776, 779, 775, 773, 774, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 777, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 778, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 200, 61,
	191, 162, 0, 0, 0, 0, 0, 0, 391, 667,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 674, 0, 0, 0, 0, 0, 0, 673,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 672, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 668, 670, 308, 480, 405, 682, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 62, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 163, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 1114, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 2542, 2545, 2546,
	2547, 2548, 2549, 2550, 0, 2555, 2551, 2552, 2553, 2554,
	0, 2537, 2538, 2539, 2540, 1097, 2521, 2543, 0, 2522,
	387, 2523, 2524, 2525, 2526, 1101, 2527, 2528, 2529, 2530,
	2531, 2534, 2535, 2532, 2533, 2541, 399, 364, 400, 347,
	377, 376, 378, 1125, 1127, 1129, 1131, 1134, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 2536, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 2544, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 2382, 2385, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 2386, 457, 0, 0, 0,
	2381, 0, 2380, 428, 2378, 2383, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 2384,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	2403, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 2402, 457, 0, 0, 0, 2408, 2405,
	2407, 428, 0, 2406, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 2400, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 2403, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 2402, 457, 0, 0, 0, 2408, 2405, 2407, 428,
	0, 2406, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	2098, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 2099, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 1235, 1236, 1237,
	1234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	200, 641, 504, 505, 642, 615, 0, 0, 0, 0,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 136, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 2148, 0, 222, 0, 0, 0, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 163, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 200, 641, 504, 505, 642, 615, 0, 0,
	0, 0, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	136, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 2134, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 163, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 1029, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 1036, 1037, 0, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1040, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	1023, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 1010,
	455, 297, 1009, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	1027, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 1028, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 1031, 558, 559, 379,
	380, 381, 382, 341, 584, 1026, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 1038, 1024, 1034, 1025,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 1035,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 1022, 414,
	432, 421, 200, 641, 504, 505, 642, 615, 0, 0,
	0, 0, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	136, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2030, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 163, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 1036, 1037, 0, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1040, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 1010,
	455, 297, 1009, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 1038, 2051, 1034, 2052,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 1035,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 2924, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	2927, 0, 0, 0, 2926, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 1526, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 1524, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1522, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 1520, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 1524, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1522, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3986, 0, 222, 838, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 1524, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1522, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 2447, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 959, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 1524, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1734, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 2483, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 2485, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 2098, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 2099,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 3136, 3138, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 2506, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 1524, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 655, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	654, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 838,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3963, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 3731, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 3864, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1748, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3746, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 3658, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 3170, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3188, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2030, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 3377, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3291, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3029, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 1524, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 2485, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 2846, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 2603, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 2562, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 2338, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	1885, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 2013, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 1524, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 1918, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 447, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 1553, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	655, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 447, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 665, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	322, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	406, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 606, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 959, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 391, 0,
	519, 552, 541, 625, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 360, 556,
	538, 548, 539, 524, 525, 526, 533, 340, 527, 528,
	529, 499, 530, 500, 531, 532, 0, 555, 506, 423,
	375, 573, 572, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 222, 0, 0, 0, 0, 0, 0, 303,
	223, 501, 621, 503, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 429, 447, 304,
	418, 460, 309, 426, 299, 390, 415, 0, 0, 295,
	445, 425, 372, 350, 351, 294, 0, 409, 328, 342,
	325, 388, 0, 444, 472, 324, 463, 0, 455, 297,
	0, 454, 387, 441, 446, 373, 367, 0, 296, 443,
	371, 366, 354, 332, 488, 355, 356, 346, 399, 364,
	400, 347, 377, 376, 378, 0, 0, 0, 0, 0,
	483, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 618, 0,
	457, 0, 0, 0, 0, 0, 0, 428, 0, 0,
	357, 0, 0, 0, 473, 0, 412, 393, 644, 0,
	0, 410, 362, 442, 401, 448, 430, 456, 406, 402,
	288, 431, 327, 374, 300, 302, 322, 329, 331, 333,
	334, 383, 384, 396, 417, 433, 434, 435, 326, 310,
	411, 311, 344, 312, 289, 318, 316, 319, 419, 320,
	291, 397, 439, 0, 339, 407, 370, 292, 369, 398,
	438, 437, 301, 464, 470, 471, 560, 0, 476, 645,
	646, 647, 485, 0, 403, 490, 491, 492, 494, 495,
	496, 497, 561, 578, 545, 515, 478, 569, 512, 516,
	517, 581, 0, 0, 0, 469, 358, 359, 0, 337,
	285, 286, 640, 323, 389, 583, 616, 617, 508, 0,
	570, 509, 518, 315, 542, 554, 553, 385, 468, 0,
	565, 568, 498, 639, 0, 562, 577, 643, 576, 636,
	395, 0, 416, 574, 521, 0, 566, 540, 0, 567,
	536, 571, 0, 510, 0, 424, 450, 462, 479, 482,
	511, 596, 597, 598, 290, 481, 600, 601, 602, 603,
	604, 605, 606, 599, 453, 543, 520, 546, 461, 523,
	522, 0, 0, 557, 477, 558, 559, 379, 380, 381,
	382, 341, 584, 308, 480, 405, 0, 544, 0, 0,
	0, 0, 0, 0, 0, 0, 549, 550, 547, 648,
	0, 607, 608, 0, 0, 474, 475, 336, 343, 493,
	345, 307, 394, 338, 459, 352, 0, 486, 551, 487,
	610, 613, 611, 612, 386, 348, 349, 420, 353, 363,
	408, 458, 392, 413, 305, 449, 422, 368, 537, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 274, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 592, 591, 590, 589,
	588, 587, 586, 585, 0, 0, 534, 436, 317, 279,
	313, 314, 321, 637, 634, 440, 638, 0, 287, 514,
	361, 0, 404, 335, 579, 580, 0, 0, 235, 236,
	237, 238, 239, 240, 241, 242, 280, 243, 244, 245,
	246, 247, 248, 249, 252, 253, 254, 255, 256, 257,
	258, 259, 582, 250, 251, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 0,
	0, 0, 281, 282, 283, 284, 0, 0, 275, 276,
	277, 278, 0, 0, 0, 465, 466, 467, 489, 0,
	451, 513, 635, 0, 0, 0, 0, 0, 0, 0,
	563, 575, 609, 0, 619, 620, 622, 624, 623, 626,
	427, 0, 628, 629, 630, 627, 365, 414, 432, 421,
	0, 641, 504, 505, 642, 615, 391, 0, 519, 552,
	541, 625, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 0, 360, 556, 538, 548,
	539, 524, 525, 526, 533, 340, 527, 528, 529, 499,
	530, 500, 531, 532, 0, 555, 506, 423, 375, 573,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	222, 0, 0, 0, 0, 0, 0, 303, 223, 501,
	621, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 429, 1503, 304, 418, 460,
	309, 426, 299, 390, 415, 0, 0, 295, 445, 425,
	372, 350, 351, 294, 0, 409, 328, 342, 325, 388,
	0, 444, 472, 324, 463, 0, 455, 297, 0, 454,
	387, 441, 446, 373, 367, 0, 296, 443, 371, 366,
	354, 332, 488, 355, 356, 346, 399, 364, 400, 347,
	377, 376, 378, 0, 0, 0, 0, 0, 483, 484,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 614, 0, 0, 618, 0, 457, 0,
	0, 0, 0, 0, 0, 428, 0, 0, 357, 0,
	0, 0, 473, 0, 412, 393, 644, 0, 0, 410,
	362, 442, 401, 448, 430, 456, 406, 402, 288, 431,
	327, 374, 300, 302, 322, 329, 331, 333, 334, 383,
	384, 396, 417, 433, 434, 435, 326, 310, 411, 311,
	344, 312, 289, 318, 316, 319, 419, 320, 291, 397,
	439, 0, 339, 407, 370, 292, 369, 398, 438, 437,
	301, 464, 470, 471, 560, 0, 476, 645, 646, 647,
	485, 0, 403, 490, 491, 492, 494, 495, 496, 497,
	561, 578, 545, 515, 478, 569, 512, 516, 517, 581,
	0, 0, 0, 469, 358, 359, 0, 337, 285, 286,
	640, 323, 389, 583, 616, 617, 508, 0, 570, 509,
	518, 315, 542, 554, 553, 385, 468, 0, 565, 568,
	498, 639, 0, 562, 577, 643, 576, 636, 395, 0,
	416, 574, 521, 0, 566, 540, 0, 567, 536, 571,
	0, 510, 0, 424, 450, 462, 479, 482, 511, 596,
	597, 598, 290, 481, 600, 601, 602, 603, 604, 605,
	606, 599, 453, 543, 520, 546, 461, 523, 522, 0,
	0, 557, 477, 558, 559, 379, 380, 381, 382, 341,
	584, 308, 480, 405, 0, 544, 0, 0, 0, 0,
	0, 0, 0, 0, 549, 550, 547, 648, 0, 607,
	608, 0, 0, 474, 475, 336, 343, 493, 345, 307,
	394, 338, 459, 352, 0, 486, 551, 487, 610, 613,
	611, 612, 386, 348, 349, 420, 353, 363, 408, 458,
	392, 413, 305, 449, 422, 368, 537, 564, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 592, 591, 590, 589, 588, 587,
	586, 585, 0, 0, 534, 436, 317, 279, 313, 314,
	321, 637, 634, 440, 638, 0, 287, 514, 361, 0,
	404, 335, 579, 580, 0, 0, 235, 236, 237, 238,
	239, 240, 241, 242, 280, 243, 244, 245, 246, 247,
	248, 249, 252, 253, 254, 255, 256, 257, 258, 259,
	582, 250, 251, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	281, 282, 283, 284, 0, 0, 275, 276, 277, 278,
	0, 0, 0, 465, 466, 467, 489, 0, 451, 513,
	635, 0, 0, 0, 0, 0, 0, 0, 563, 575,
	609, 0, 619, 620, 622, 624, 623, 626, 427, 0,
	628, 629, 630, 627, 365, 414, 432, 421, 0, 641,
	504, 505, 642, 615, 391, 0, 519, 552, 541, 625,
	507, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 330, 0, 0, 360, 556, 538, 548, 539, 524,
	525, 526, 533, 340, 527, 528, 529, 499, 530, 500,
	531, 532, 0, 555, 506, 423, 375, 573, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 222, 0,
	0, 0, 0, 0, 0, 303, 223, 501, 621, 503,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	306, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 429, 1501, 304, 418, 460, 309, 426,
	299, 390, 415, 0, 0, 295, 445, 425, 372, 350,
	351, 294, 0, 409, 328, 342, 325, 388, 0, 444,
	472, 324, 463, 0, 455, 297, 0, 454, 387, 441,
	446, 373, 367, 0, 296, 443, 371, 366, 354, 332,
	488, 355, 356, 346, 399, 364, 400, 347, 377, 376,
	378, 0, 0, 0, 0, 0, 483, 484, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 614, 0, 0, 618, 0, 457, 0, 0, 0,
	0, 0, 0, 428, 0, 0, 357, 0, 0, 0,
	473, 0, 412, 393, 644, 0, 0, 410, 362, 442,
	401, 448, 430, 456, 406, 402, 288, 431, 327, 374,
	300, 302, 322, 329, 331, 333, 334, 383, 384, 396,
	417, 433, 434, 435, 326, 310, 411, 311, 344, 312,
	289, 318, 316, 319, 419, 320, 291, 397, 439, 0,
	339, 407, 370, 292, 369, 398, 438, 437, 301, 464,
	470, 471, 560, 0, 476, 645, 646, 647, 485, 0,
	403, 490, 491, 492, 494, 495, 496, 497, 561, 578,
	545, 515, 478, 569, 512, 516, 517, 581, 0, 0,
	0, 469, 358, 359, 0, 337, 285, 286, 640, 323,
	389, 583, 616, 617, 508, 0, 570, 509, 518, 315,
	542, 554, 553, 385, 468, 0, 565, 568, 498, 639,
	0, 562, 577, 643, 576, 636, 395, 0, 416, 574,
	521, 0, 566, 540, 0, 567, 536, 571, 0, 510,
	0, 424, 450, 462, 479, 482, 511, 596, 597, 598,
	290, 481, 600, 601, 602, 603, 604, 605, 606, 599,
	453, 543, 520, 546, 461, 523, 522, 0, 0, 557,
	477, 558, 559, 379, 380, 381, 382, 341, 584, 308,
	480, 405, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 549, 550, 547, 648, 0, 607, 608, 0,
	0, 474, 475, 336, 343, 493, 345, 307, 394, 338,
	459, 352, 0, 486, 551, 487, 610, 613, 611, 612,
	386, 348, 349, 420, 353, 363, 408, 458, 392, 413,
	305, 449, 422, 368, 537, 564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 592, 591, 590, 589, 588, 587, 586, 585,
	0, 0, 534, 436, 317, 279, 313, 314, 321, 637,
	634, 440, 638, 0, 287, 514, 361, 0, 404, 335,
	579, 580, 0, 0, 235, 236, 237, 238, 239, 240,
	241, 242, 280, 243, 244, 245, 246, 247, 248, 249,
	252, 253, 254, 255, 256, 257, 258, 259, 582, 250,
	251, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 0, 0, 0, 281, 282,
	283, 284, 0, 0, 275, 276, 277, 278, 0, 0,
	0, 465, 466, 467, 489, 0, 451, 513, 635, 0,
	0, 0, 0, 0, 0, 0, 563, 575, 609, 0,
	619, 620, 622, 624, 623, 626, 427, 0, 628, 629,
	630, 627, 365, 414, 432, 421, 0, 641, 504, 505,
	642, 615, 391, 0, 519, 552, 541, 625, 507, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 0, 360, 556, 538, 548, 539, 524, 525, 526,
	533, 340, 527, 528, 529, 499, 530, 500, 531, 532,
	0, 555, 506, 423, 375, 573, 572, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 303, 223, 501, 621, 503, 502, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 306, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	293, 429, 447, 304, 418, 460, 309, 426, 299, 390,
	415, 0, 0, 295, 445, 425, 372, 350, 351, 294,
	0, 409, 328, 342, 325, 388, 0, 444, 472, 324,
	463, 0, 455, 297, 0, 454, 387, 441, 446, 373,
	367, 0, 296, 443, 371, 366, 354, 332, 488, 355,
	356, 346, 399, 364, 400, 347, 377, 376, 378, 0,
	0, 0, 0, 0, 483, 484, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 614,
	0, 0, 618, 0, 457, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 357, 0, 0, 0, 473, 0,
	412, 393, 644, 0, 0, 410, 362, 442, 401, 448,
	430, 456, 406, 402, 288, 431, 327, 374, 300, 302,
	733, 329, 331, 333, 334, 383, 384, 396, 417, 433,
	434, 435, 326, 310, 411, 311, 344, 312, 289, 318,
	316, 319, 419, 320, 291, 397, 439, 0, 339, 407,
	370, 292, 369, 398, 438, 437, 301, 464, 470, 471,
	560, 0, 476, 645, 646, 647, 485, 0, 403, 490,
	491, 492, 494, 495, 496, 497, 561, 578, 545, 515,
	478, 569, 512, 516, 517, 581, 0, 0, 0, 469,
	358, 359, 0, 337, 285, 286, 640, 323, 389, 583,
	616, 617, 508, 0, 570, 509, 518, 315, 542, 554,
	553, 385, 468, 0, 565, 568, 498, 639, 0, 562,
	577, 643, 576, 636, 395, 0, 416, 574, 521, 0,
	566, 540, 0, 567, 536, 571, 0, 510, 0, 424,
	450, 462, 479, 482, 511, 596, 597, 598, 290, 481,
	600, 601, 602, 603, 604, 605, 606, 599, 453, 543,
	520, 546, 461, 523, 522, 0, 0, 557, 477, 558,
	559, 379, 380, 381, 382, 341, 584, 308, 480, 405,
	0, 544, 0, 0, 0, 0, 0, 0, 0, 0,
	549, 550, 547, 648, 0, 607, 608, 0, 0, 474,
	475, 336, 343, 493, 345, 307, 394, 338, 459, 352,
	0, 486, 551, 487, 610, 613, 611, 612, 386, 348,
	349, 420, 353, 363, 408, 458, 392, 413, 305, 449,
	422, 368, 537, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	592, 591, 590, 589, 588, 587, 586, 585, 0, 0,
	534, 436, 317, 279, 313, 314, 321, 637, 634, 440,
	638, 0, 287, 514, 361, 0, 404, 335, 579, 580,
	0, 0, 235, 236, 237, 238, 239, 240, 241, 242,
	280, 243, 244, 245, 246, 247, 248, 249, 252, 253,
	254, 255, 256, 257, 258, 259, 582, 250, 251, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 0, 0, 0, 281, 282, 283, 284,
	0, 0, 275, 276, 277, 278, 0, 0, 0, 465,
	466, 467, 489, 0, 451, 513, 635, 0, 0, 0,
	0, 0, 0, 0, 563, 575, 609, 0, 619, 620,
	622, 624, 623, 626, 427, 0, 628, 629, 630, 627,
	365, 414, 432, 421, 0, 641, 504, 505, 642, 615,
	391, 0, 519, 552, 541, 625, 507, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 0,
	360, 556, 538, 548, 539, 524, 525, 526, 533, 340,
	527, 528, 529, 499, 530, 500, 531, 532, 0, 555,
	506, 423, 375, 573, 572, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 222, 0, 0, 0, 0, 0,
	0, 303, 223, 501, 621, 503, 502, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 429,
	447, 304, 418, 460, 309, 426, 299, 390, 415, 0,
	0, 295, 445, 425, 372, 350, 351, 294, 0, 409,
	328, 342, 325, 388, 0, 444, 472, 324, 463, 0,
	455, 297, 0, 454, 387, 441, 446, 373, 367, 0,
	296, 443, 371, 366, 354, 332, 488, 355, 356, 346,
	399, 364, 400, 347, 377, 376, 378, 0, 0, 0,
	0, 0, 483, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 614, 0, 0,
	618, 0, 457, 0, 0, 0, 0, 0, 0, 428,
	0, 0, 357, 0, 0, 0, 473, 0, 412, 393,
	644, 0, 0, 410, 362, 442, 401, 448, 430, 456,
	690, 402, 288, 431, 327, 374, 300, 302, 322, 329,
	331, 333, 334, 383, 384, 396, 417, 433, 434, 435,
	326, 310, 411, 311, 344, 312, 289, 318, 316, 319,
	419, 320, 291, 397, 439, 0, 339, 407, 370, 292,
	369, 398, 438, 437, 301, 464, 470, 471, 560, 0,
	476, 645, 646, 647, 485, 0, 403, 490, 491, 492,
	494, 495, 496, 497, 561, 578, 545, 515, 478, 569,
	512, 516, 517, 581, 0, 0, 0, 469, 358, 359,
	0, 337, 285, 286, 640, 323, 389, 583, 616, 617,
	508, 0, 570, 509, 518, 315, 542, 554, 553, 385,
	468, 0, 565, 568, 498, 639, 0, 562, 577, 643,
	576, 636, 395, 0, 416, 574, 521, 0, 566, 540,
	0, 567, 536, 571, 0, 510, 0, 424, 450, 462,
	479, 482, 511, 596, 597, 598, 290, 481, 600, 601,
	602, 603, 604, 605, 691, 599, 453, 543, 520, 546,
	461, 523, 522, 0, 0, 557, 477, 558, 559, 379,
	380, 381, 382, 341, 584, 308, 480, 405, 0, 544,
	0, 0, 0, 0, 0, 0, 0, 0, 549, 550,
	547, 648, 0, 607, 608, 0, 0, 474, 475, 336,
	343, 493, 345, 307, 394, 338, 459, 352, 0, 486,
	551, 487, 610, 613, 611, 612, 386, 348, 349, 420,
	353, 363, 408, 458, 392, 413, 305, 449, 422, 368,
	537, 564, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 274, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 591,
	590, 589, 588, 587, 586, 585, 0, 0, 534, 436,
	317, 279, 313, 314, 321, 637, 634, 440, 638, 0,
	287, 514, 361, 0, 404, 335, 579, 580, 0, 0,
	235, 236, 237, 238, 239, 240, 241, 242, 280, 243,
	244, 245, 246, 247, 248, 249, 252, 253, 254, 255,
	256, 257, 258, 259, 582, 250, 251, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 0, 0, 281, 282, 283, 284, 0, 0,
	275, 276, 277, 278, 0, 0, 0, 465, 466, 467,
	489, 0, 451, 513, 635, 0, 0, 0, 0, 0,
	0, 0, 563, 575, 609, 0, 619, 620, 622, 624,
	623, 626, 427, 0, 628, 629, 630, 627, 365, 414,
	432, 421, 0, 641, 504, 505, 642, 615, 712, 711,
	718, 708, 0, 0, 0, 0, 0, 0, 2000, 0,
	715, 716, 0, 717, 721, 200, 0, 702, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 726, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3578, 0, 0,
	0, 0, 0, 2003, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 732, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1977, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1993, 0, 0, 0, 2000, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2003, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 703, 705,
	704, 0, 0, 0, 0, 0, 0, 0, 0, 710,
	0, 2000, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 714, 0, 0, 0, 0, 1981, 0, 729, 0,
	0, 0, 0, 0, 0, 707, 1977, 1987, 0, 0,
	0, 0, 0, 0, 0, 0, 2003, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1975, 2009, 0,
	0, 1976, 1978, 1980, 0, 1982, 1983, 1984, 1988, 1989,
	1990, 1992, 1995, 1996, 1997, 0, 0, 0, 0, 0,
	0, 0, 1985, 1994, 1986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1977,
	3723, 0, 0, 0, 1993, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2001, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 709, 713, 719,
	0, 720, 722, 0, 0, 723, 724, 725, 0, 0,
	727, 728, 0, 1998, 0, 0, 0, 1993, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1974, 0, 0, 0, 0, 0, 1981, 1973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1991, 0, 0, 0, 0, 0, 1975, 2009, 0,
	1979, 1976, 1978, 1980, 0, 1982, 1983, 1984, 1988, 1989,
	1990, 1992, 1995, 1996, 1997, 0, 0, 0, 0, 0,
	0, 0, 1985, 1994, 1986, 0, 0, 0, 0, 1981,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1987, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2001, 0,
	1975, 2009, 0, 0, 1976, 1978, 1980, 0, 1982, 1983,
	1984, 1988, 1989, 1990, 1992, 1995, 1996, 1997, 0, 0,
	0, 0, 0, 0, 0, 1985, 1994, 1986, 0, 0,
	0, 0, 0, 0, 0, 0, 706, 0, 0, 0,
	0, 0, 0, 1998, 0, 0, 0, 0, 3582, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1974, 2001, 0, 0, 0, 0, 0, 1973, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1991, 0, 0, 0, 0, 0, 0, 0, 0,
	1979, 0, 0, 0, 0, 0, 1998, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1974, 0, 0, 0, 0, 0, 0,
	1973, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1991, 0, 0, 0, 0, 0,
	0, 0, 0, 1979, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3586, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3586,
}

var yyPact = [...]int{
	4039, -1000, -1000, -1000, -322, 15321, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49265, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 410, 49265,
	-320, 31053, 47381, -1000, -1000, 2701, -1000, 48009, 17225, 49265,
	494, 489, 49265, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	949, -1000, 51777, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 866, 4541, 51149, 11526, -209, -1000, 1704, -31,
	2599, 495, -180, -188, 1100, 1111, 1168, 1168, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 228, 962, 48637, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4411, 251,
	947, 962, 22257, 138, 133, 1704, 427, -45, 209, -1000,
	1436, 4094, 204, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11526, 11526, 15321, -351, 15321, 11526,
	49265, 49265, -1000, -1000, -1000, -1000, -320, 48009, 866, 4541,
	11526, 2599, 495, -180, -188, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -45, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 133, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4040, -1000, 1687, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2402,
	3156, 1685, 2597, 797, 47381, 49265, -1000, 153, 797, -1000,
	-1000, -1000, 1704, 3599, -1000, 49265, 49265, 212, 1900, -1000,
	448, 429, 400, 454, 340, 1681, -1000, -1000, -1000, -1000,
	-1000, -1000, 642, 3581, -1000, 49265, 49265, 3182, 49265, -1000,
	2326, 711, -1000, 52415, 3373, 1519, 980, 3199, -1000, -1000,
	3154, -1000, 345, 321, 327, 777, 409, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 367, -1000, 3445, -1000, -1000, 335,
	-1000, -1000, 324, -1000, -1000, -1000, 132, -1000, -1000, -1000,
	-1000, -1000, -1000, 43, -1000, -1000, 1152, 2120, 11526, 2079,
	-1000, 2854, 1661, -1000, -1000, -1000, 7103, 14050, 14050, 14050,
	14050, 49265, -1000, -1000, 2946, 11526, 3152, 3150, 3147, 3146,
	-1000, -1000, -1000, -1000, -1000, -1000, 3145, 1653, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2049, -1000, -1000,
	-1000, 14681, -1000, 3144, 3143, 3142, 3135, 3134, 3125, 3123,
	3122, 3121, 3120, 3119, 3104, 3102, 3098, 2783, 16587, 3097,
	2596, 2590, 3082, 3081, 3080, 2587, 3079, 3077, 3075, 2783,
	2783, 3071, 3070, 3067, 3062, 3061, 3060, 3059, 3053, 3047,
	3042, 3041, 3039, 3038, 3037, 3036, 3035, 3024, 3022, 3007,
	2991, 2986, 2985, 2984, 2982, 2981, 2980, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1567, -1000, 2979, 3598, 2891, -1000, 3463, 3443, 3438, 3420,
	-257, 2978, 2292, -1000, -1000, 111, 3580, 49265, -276, 49265,
	417, -63, -66, -67, -1000, -55, -1000, -1000, 1087, -1000,
	1065, -1000, 845, 845, 845, 49265, 49265, 255, 1069, 845,
	845, 845, 845, 845, 886, 845, 3480, 946, 944, 936,
	931, 845, 4, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1898, 1897, 3254, 1040, -1000, -1000, -1000, -1000, 1537, 49265,
	-1000, 2893, 417, -301, 1754, 1754, 3560, 3560, 3479, 738,
	722, 715, 1754, 557, -1000, 1886, 1886, 1886, 1886, 1754,
	522, 736, 3485, 3485, 131, 1886, 117, 1754, 1754, 117,
	1754, 1754, -1000, 1875, 329, -263, -1000, -1000, -1000, -1000,
	1886, 1886, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3448,
	3446, 866, 866, 49265, 866, 254, 49265, 866, 866, 866,
	49265, 879, -305, 92, 50521, 49893, 2603, 2326, 708, 686,
	1542, 1878, -1000, 1796, 49265, 49265, 1796, 1796, 25401, 24773,
	-1000, 49265, -1000, 3598, 2891, 2770, 1696, 2769, 2891, -85,
	417, 866, 866, 866, 866, 866, 310, 866, 866, 866,
	866, 866, 49265, 49265, 46753, 866, 866, 866, 866, 9627,
	9627, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15321, 1956, 2239, 203, -2, -298, 271, -1000, -1000, 49265,
	3350, 309, -1000, -1000, -1000, 2882, -1000, 2885, 2885, 2885,
	2885, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2885, 2885, 2892, 2977, -1000, -1000, 2884, 2884, 2884,
	2882, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2887, 2887, 2889, 2889,
	2887, 49265, -125, -1000, -1000, 11526, 49265, 3364, 415, 2958,
	797, -1000, -1000, 49265, 190, 434, 3598, 3362, 3485, 3555,
	-1000, -1000, 1652, 2283, 2586, -1000, 340, -1000, 421, 340,
	-1000, 538, 538, 1682, -1000, 1253, -1000, -1000, -1000, -1000,
	-1000, -1000, 49265, 43, 444, -1000, -1000, 2566, 2957, -1000,
	640, 1440, 1560, -1000, 272, 4472, 39845, 2326, 39845, 49265,
	-1000, -1000, -1000, -1000, -1000, -1000, 130, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 308, -1000, 11526, 11526, 11526, 11526, 11526, -1000, 967,
	13419, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14050, 14050,
	14050, 14050, 14050, 14050, 14050, 14050, 14050, 14050, 14050, 14050,
	2945, 1809, 14050, 14050, 14050, 14050, 27913, 1696, 3441, 1539,
	314, 1661, 1661, 1661, 1661, 11526, -1000, 1931, 2120, 11526,
	11526, 11526, 11526, 34193, 49265, -1000, -1000, 4321, 11526, 11526,
	5110, 11526, 3418, 11526, 11526, 11526, 2766, 5832, 49265, 11526,
	-1000, 2765, 2764, -1000, -1000, 2053, 11526, -1000, -1000, 11526,
	-1000, -1000, 11526, 14050, 11526, -1000, 11526, 11526, 11526, -1000,
	-1000, 1429, 3418, 3418, 3418, 1853, 11526, 11526, 3418, 3418,
	3418, 1817, 3418, 3418, 3418, 3418, 3418, 3418, 3418, 3418,
	3418, 3418, 3418, 2763, 2760, 2753, 10895, 3485, -209, -1000,
	8996, 3362, 3485, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -259, 2949, 49265, 2585, 2582, -329, 186,
	491, 49265, 1159, -1000, -1000, 49265, 2282, 49265, 2280, 72,
	1098, 1078, 1070, -1000, 49265, 1948, 49265, 49265, 3411, -1000,
	2948, 49265, 845, 845, 845, -1000, 44869, 39845, 49265, 49265,
	2326, 49265, 49265, 49265, 845, 845, 845, 845, 49265, -1000,
	3310, 39845, 3291, 879, -1000, 49265, 1537, 3410, 49265, -1000,
	-1000, -1000, -1000, 3560, 14050, 14050, -1000, -1000, 11526, -1000,
	46125, 1886, 1754, 1754, -1000, -1000, 49265, -1000, -1000, -1000,
	1886, 49265, 1886, 1886, 3560, 1886, -1000, -1000, -1000, 1754,
	1754, -1000, -1000, 11526, -1000, -1000, 1886, 1886, -1000, -1000,
	3560, 49265, 125, 3560, 3560, 113, -1000, -1000, -1000, 1754,
	49265, 49265, 845, 49265, -1000, 49265, 49265, -1000, -1000, 49265,
	49265, 4730, 49265, 44869, 45497, 3437, -1000, 39845, 49265, 49265,
	1535, -1000, 907, 37333, -1000, 49265, 1455, -1000, 76, -1000,
	61, 92, 1796, 92, 1796, 904, -1000, 600, 639, 23517,
	570, 39845, 6463, -1000, -1000, 1796, 1796, 6463, 6463, 1686,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1509, -1000, 375,
	3485, -1000, -1000, -1000, -1000, -1000, 2275, -1000, 49265, 44869,
	39845, 2326, 49265, 866, 49265, 49265, 49265, 49265, 49265, -1000,
	2947, 1640, -1000, 3370, 49265, 49265, 49265, 49265, 1362, -1000,
	-1000, 20365, 1639, 1362, -1000, 1969, -1000, 11526, 15321, -232,
	11526, 15321, 15321, 11526, 15321, -1000, 11526, 292, -1000, -1000,
	-1000, -1000, 2268, -1000, 2266, -1000, -1000, -1000, -1000, -1000,
	2581, 2581, -1000, 2259, -1000, -1000, -1000, -1000, 2244, -1000,
	-1000, 2243, -1000, -1000, -1000, -1000, -150, 2752, 1152, -1000,
	2574, 3197, -211, -1000, 21629, 49265, 49265, 415, -337, 1893,
	1892, 1885, -1000, -211, -1000, 20997, 49265, 3485, -1000, -216,
	3362, 11526, 49265, -1000, 3468, -1000, -1000, 340, -1000, -1000,
	-1000, 538, 443, -1000, -1000, -1000, -1000, -1000, -1000, 1629,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	402, -52, -58, 1481, -1000, 49265, -1000, -1000, 272, 39845,
	41729, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 269, -1000,
	-1000, 188, -1000, 899, 263, 1679, -1000, -1000, 256, 217,
	218, 986, 2120, -1000, 1964, 1964, 1959, -1000, 799, -1000,
	-1000, -1000, -1000, 2946, -1000, -1000, -1000, 3548, 1725, -1000,
	1765, 1765, 1695, 1695, 1695, 1695, 1695, 2052, 2052, -1000,
	-1000, -1000, 7103, 2945, 14050, 14050, 14050, 14050, 924, 924,
	3029, 2910, -1000, -1000, -1000, -1000, 11526, 183, 1939, -1000,
	11526, 2480, 1412, 2417, 1576, 1677, -1000, 2882, 11526, 1628,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2751, 2748, 2313, 3579, 2744, 11526, -1000, -1000, 1676, 1675,
	1674, -1000, 2344, 10264, -1000, -1000, -1000, 2742, 1627, 2740,
	-1000, -1000, -1000, 2739, 1673, 1205, 2738, 1847, 2737, 2731,
	2727, 2726, 1474, 11526, 11526, 11526, 11526, 2719, 1671, 1660,
	11526, 11526, 11526, 11526, 2717, 11526, 11526, 11526, 11526, 11526,
	11526, 11526, 11526, 11526, 11526, 49265, 165, 165, 165, 1472,
	1470, -1000, -1000, 1659, -1000, 2120, -1000, -1000, 3362, -1000,
	2944, 2240, 1463, -1000, -1000, -313, 2538, 49265, 49265, 184,
	49265, 2573, -280, 49265, -1000, -1000, 2569, -1000, -1000, -1000,
	1091, 1057, 1074, 2568, 3369, 3466, 857, 49265, 1196, 2940,
	49265, 49265, 49265, 287, -1000, -1000, 1334, -1000, 263, 34,
	506, 1216, 3181, 3578, -126, 49265, 49265, 49265, 49265, 3402,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44241, -1000,
	2939, 1657, -1000, -1000, 1661, 1661, 2120, 3179, 49265, 49265,
	3560, 3560, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1886,
	3560, 3560, 1344, 1754, 1886, -1000, -1000, 1886, -337, -1000,
	1886, -1000, -337, 1626, -337, 49265, -1000, -1000, -1000, 3397,
	2893, 1456, -1000, -1000, -1000, 3554, 1279, 837, 837, 1059,
	787, 3553, 19109, -1000, 1778, 1260, 898, 3325, 342, -1000,
	1778, -147, 817, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
	629, 627, 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778,
	1778, 1778, 1778, 1105, 1778, 1778, 1778, 1778, 1778, -1000,
	1778, 2938, 480, -1000, -1000, -1000, -1000, -1000, -1000, 720,
	588, 282, 3432, 378, -1000, 381, 1334, 3428, 401, 49265,
	49265, 3492, 1392, -1000, -1000, -1000, -1000, -1000, 28541, 28541,
	22889, 28541, -1000, 199, 1796, 92, 82, -1000, -1000, 1455,
	6463, 1455, 6463, 2237, -1000, -1000, 897, -1000, -1000, 1216,
	-1000, 49265, 49265, -1000, -1000, 2937, 1881, -1000, -1000, 16587,
	-1000, 6463, 6463, -1000, -1000, 30425, 49265, -1000, 39, -1000,
	64, 3362, -1000, 1178, -1000, -1000, 1452, 1216, 3196, 49265,
	1178, 1178, 1178, -1000, -1000, 17853, 49265, 49265, -1000, -1000,
	-1000, -1000, 3560, 9627, -1000, 37333, -1000, -1000, 43613, -1000,
	42985, 3560, 1926, -1000, 15321, 2195, 198, -1000, 261, -303,
	196, 1942, 195, 2120, -1000, -1000, 2715, 2714, 1650, -1000,
	1646, 2709, 1645, 1637, 2234, -1000, 103, -1000, 3353, 1249,
	-1000, 2936, -1000, 1635, 3275, -1000, 1445, -1000, 1876, 1634,
	-1000, -1000, -1000, 11526, 42357, 11526, 1249, 1631, 3270, 1445,
	3362, 2567, -1000, 1439, -1000, 2066, 1625, 210, -1000, -1000,
	-1000, 49265, 866, 2566, 1630, 41729, 1324, -1000, 893, 1617,
	1612, -1000, 39845, 337, 39845, -1000, 39845, -1000, -1000, 404,
	-1000, 49265, 3361, -1000, -1000, -1000, 2538, 1874, -336, 49265,
	-1000, -1000, -1000, -1000, -1000, 1622, -1000, 924, 924, 3029,
	2866, -1000, 14050, -1000, 14050, 3430, -1000, 1905, -1000, 11526,
	2172, 5356, 11526, 5356, 869, 26657, 34193, -110, 3357, 3415,
	49265, -1000, -1000, 11526, 11526, -1000, 3396, -1000, -1000, -1000,
	-1000, 11526, 11526, 2264, -1000, 49265, -1000, -1000, -1000, -1000,
	26657, -1000, 14050, -1000, -1000, -1000, -1000, 11526, 1315, 1315,
	3298, 1621, 165, 165, 165, 3267, 3261, 3215, 1614, 165,
	3170, 3158, 3137, 3132, 3027, 3020, 3003, 2932, 2762, 2728,
	1613, -1000, 2934, -1000, -1000, 2044, 12788, 8996, -1000, -1000,
	303, 1433, 2233, 2562, 144, -1000, 1873, -1000, 2560, 49265,
	49265, 1153, -1000, 49265, 3573, -1000, -1000, -1000, -1000, 1046,
	2558, -1000, 419, 2074, 202, 283, 2705, 1431, -1000, -1000,
	49265, -1000, -1000, -1000, 17853, 2893, 2903, 2893, 168, 1778,
	619, 39845, 658, -1000, 49265, 2217, 1854, 3194, 765, 3346,
	49265, 2902, 455, 2900, 2899, 3395, 466, 5217, 49265, 1337,
	-1000, 1606, 4094, -1000, 49265, -1000, 2326, -1000, 1754, -1000,
	-1000, 3560, -1000, -1000, 11526, 11526, 3560, 1754, 1754, -1000,
	1886, -1000, 49265, -1000, -337, 466, 5217, 3393, 5068, 563,
	2702, -1000, 49265, -1000, -1000, -1000, 933, -1000, 1063, 845,
	49265, 1999, 1063, 1989, 2896, -1000, -1000, 49265, 49265, 49265,
	49265, -1000, -1000, 49265, -1000, 49265, 49265, 49265, 49265, 49265,
	41101, -1000, 49265, 49265, -1000, 49265, 1987, 49265, 1986, 3366,
	-1000, 1778, 1778, 1000, -1000, -1000, 616, -1000, 41101, 2232,
	2224, 2223, 2220, 2557, 2556, 2555, 1778, 1778, 2212, 2549,
	40473, 2548, 1316, 2206, 2189, 2188, 2198, 2546, 1212, -1000,
	2545, 2179, 2178, 2142, 49265, 2895, 2447, 471, -1000, -1000,
	2074, 168, 1778, 372, 49265, 1841, 1840, 619, 499, 33,
	24145, -1000, -1000, -1000, 49265, 37333, 37333, 37333, 37333, 37333,
	-1000, 3235, 3225, 3221, -1000, 3248, 3234, 3289, 3207, 49265,
	37333, 2893, -1000, 40473, -1000, -1000, -1000, 1696, 1607, 3012,
	1075, 11526, 6463, -1000, -1000, 71, 47, -1000, -1000, -1000,
	-1000, 39845, 2543, 570, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3464, 49265, 49265, 812, 2697, 1430, -1000, -1000, -1000,
	5217, 2885, 2885, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2885, 2885, 2892, -1000, -1000, 2884, 2884, 2884,
	2882, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2887, 2887, 2889, 2889, 2887, -1000, -1000, 3558, -1000,
	1425, -1000, -1000, 1596, -1000, 3558, 1944, -323, 15321, 1928,
	1877, -1000, 11526, 15321, 11526, -238, 358, -249, -1000, -1000,
	-1000, 2542, -1000, -1000, -1000, 2177, -1000, 2175, -1000, 176,
	192, 1984, -211, 8996, 426, 49265, -211, 49265, 8996, -1000,
	49265, 179, -347, -349, 175, 425, -211, 3464, 103, 11526,
	3278, -1000, -1000, 49265, 2174, -1000, -1000, -1000, 3570, 39845,
	2326, 1732, 39217, -1000, 334, -1000, 265, 606, 2541, -1000,
	930, 142, 2540, 2538, -1000, -1000, -1000, -1000, 14050, 1661,
	-1000, -1000, -1000, 2120, 11526, 2695, -1000, 1043, 1043, 2257,
	2694, 2691, -1000, 2885, 2885, -1000, 2882, 2884, 2882, 1043,
	1043, 2690, -1000, 2880, -1000, 3357, -1000, 2214, 2706, -1000,
	2657, 2649, 11526, -1000, 2689, 3051, 1401, -1, -179, 165,
	165, -1000, -1000, -1000, -1000, 165, 165, 165, 165, -1000,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 804, -88, -269, -89, -272, -1000, 2688, 1384, -1000,
	-1000, -1000, -1000, -1000, 5110, 1359, 517, 517, 2538, 2529,
	-1000, 889, 2527, 1086, 49265, 2526, -284, -1000, 2525, -1000,
	-1000, 49265, 2510, -1000, 583, 49265, 49265, 2509, 2507, 1196,
	5217, 2682, 3391, 18481, 3385, 2299, -1000, -1000, -1000, 29797,
	601, -1000, -1000, -1000, 721, 343, 2173, 590, -1000, 49265,
	539, 3287, 1839, 2500, 49265, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3346, -1000, 1037, 452, 36077, 15959, -1000, 399,
	49265, -1000, 18481, 18481, 399, 460, 1859, -1000, 797, 1215,
	152, 37333, 49265, -1000, 36705, 2681, -1000, 1216, 3560, -1000,
	2120, 2120, -337, 3560, 3560, 1754, -1000, -1000, 460, -1000,
	399, -1000, 965, 19737, 525, 530, 523, -1000, 671, -1000,
	-1000, 784, 3322, 5217, -1000, 49265, -1000, 49265, -1000, 49265,
	49265, 845, 11526, 3322, 49265, 885, -1000, 1189, 451, 431,
	779, 779, 1339, -1000, 3357, -1000, -1000, 1335, -1000, -1000,
	-1000, -1000, 49265, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26657, 26657, 3424, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2497, 2496, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 49265, 1594, -1000,
	1838, 2169, 2493, 2299, 29797, 1835, 1796, 2492, 2488, 601,
	2217, 1834, 913, 49265, -1000, 1182, 49265, 49265, -1000, 1416,
	-1000, 1832, 3172, 3193, 3172, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3220, -1000, 3219, -1000, -1000, -1000, 1416, -1000,
	-1000, -1000, -1000, -1000, 1075, -1000, 3462, 1063, 1063, 1063,
	2674, -1000, -1000, -1000, -1000, 1324, 2671, -1000, -1000, -1000,
	3588, -1000, -1000, -1000, -1000, -1000, -1000, 17853, 3337, 3493,
	3551, 38589, 3493, -1000, -323, 1904, -1000, 2116, 191, 1902,
	49265, -1000, -1000, -1000, 2670, 2667, -218, 205, 3550, 3531,
	1088, -1000, 2664, 1306, -211, -1000, -1000, 1249, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -211, -1000, 1249, -1000, 176,
	-1000, -1000, 3309, -1000, -1000, 2326, -1000, 264, -1000, -1000,
	-1000, -1000, -1000, -1000, 236, -1000, 49265, -1000, 1272, 127,
	-1000, 2120, -1000, -1000, -1000, -1000, -1000, 5356, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2487, -1000,
	-1000, 11526, -1000, -1000, -1000, 2594, -1000, -1000, 11526, 2663,
	2486, 2662, 2485, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3598, -1000, 3529, 1589, 2656, 2655, 1583, 2654, 2650, -1000,
	11526, 2648, 5110, 1009, 2478, 1009, -1000, -1000, 394, 29169,
	49265, 3568, -1000, 49265, 2456, -1000, -1000, 2074, 582, 633,
	-1000, -1000, -1000, -1000, 935, 399, 2646, 1250, -1000, -1000,
	-1000, -1000, 399, -1000, 2454, 253, -1000, -1000, -1000, -1000,
	2450, 2448, 2125, -1000, -1000, 2127, 1590, 273, -1000, -1000,
	-1000, -1000, -1000, -1000, 2055, 49265, 37961, 2201, 1823, -339,
	-1000, 2879, -1000, 1778, 1778, 1778, 49265, 1568, -1000, 1778,
	1778, 2645, -1000, -1000, 2643, 2642, -127, 766, 1762, 1757,
	-1000, 2124, 28541, 37333, 36705, 1271, -1000, 1592, -1000, -1000,
	-1000, -1000, -1000, -1000, 3560, 766, -1000, 533, 2123, 14050,
	2876, 14050, 2862, 555, 2857, 1527, -1000, 49265, -1000, -1000,
	49265, 558, 2855, -1000, 2847, 3176, 515, 2839, 2836, 49265,
	2458, -1000, 3322, 49265, 747, 3329, -1000, -1000, -1000, 420,
	-1000, -1000, 593, -1000, 49265, -1000, 49265, -1000, 1654, -1000,
	26657, -1000, -1000, 1524, -1000, 2447, 2446, 5110, -1000, -1000,
	253, 2435, 6463, -1000, -1000, -1000, 3287, 2422, 2055, 49265,
	-1000, 49265, 1182, 1182, 3598, 49265, 8996, -1000, -1000, 11526,
	2835, -1000, 11526, -1000, -1000, -1000, -1000, -1000, 2832, 3331,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1721, -1000, 11526,
	12157, -1000, -1000, 841, 15321, -250, 356, -1000, -1000, -1000,
	-220, 2419, -1000, -1000, 3527, 2418, 2322, 49265, -1000, -1000,
	1249, 1249, -218, -1000, -1000, 1216, -1000, -1000, 1128, 631,
	-1000, 2635, 274, -1000, 2449, -1000, 2443, 165, -1000, 165,
	-1000, 277, 11526, -1000, 2415, -1000, -1000, -1000, 2408, -1000,
	-1000, 2437, -1000, 2634, -1000, 2397, -1000, -1000, 49265, -1000,
	-1000, 1082, 2396, -340, 2395, 2074, 2074, 49265, 5217, -129,
	-127, 18481, -129, -1000, -1000, 403, -1000, -1000, 390, -1000,
	-1000, 2115, 643, -1000, -1000, 2389, 603, -1000, 1182, -1000,
	1813, 2026, 2352, 34193, 26657, 27913, 2388, -1000, -1000, 36077,
	1721, 1721, 52432, 308, 52655, -1000, 2830, 1114, 1756, -1000,
	2092, -1000, 2091, -1000, 3560, 1271, 151, -1000, -1000, 1709,
	-1000, 1114, 2702, 3526, -1000, 2954, 49265, 2463, 49265, 2829,
	1811, 14050, -1000, 784, 3265, -1000, -1000, 558, -1000, -1000,
	2006, 14050, -1000, -1000, 2385, 27913, 884, 1804, 1799, 888,
	2826, -1000, 610, 3587, -1000, -1000, -1000, 990, 2823, -1000,
	1979, 1972, -1000, 49265, -1000, 34193, 34193, 756, 756, 34193,
	34193, 2819, 779, -1000, -1000, 14050, -1000, -1000, 1778, -1000,
	-1000, -1000, 1778, 1598, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2201, -1000, -1000, 1178, -1000, 3485, -1000, -1000, 2120,
	49265, 2120, 35449, -1000, 3519, 3518, -1000, 2120, 260, 262,
	2806, 2801, -1000, -323, 49265, 49265, -222, 2089, -1000, 2384,
	207, -1000, -1000, 1160, -220, -224, 113, 26657, 1798, -1000,
	2628, 357, -138, -1000, -1000, -1000, -1000, 2625, -1000, 599,
	-1000, -1000, -1000, 1152, 2619, 2618, -1000, -1000, -1000, -1000,
	49265, -1000, 2347, -1000, 2381, 2374, 575, -114, -1000, -1000,
	486, -1000, -1000, -1000, 617, 2319, -1000, -1000, 387, -1000,
	-1000, -1000, 2055, 2373, -1000, -1000, 120, -1000, 1795, 1479,
	-1000, -1000, -1000, -1000, -1000, -1000, 764, -1000, 399, 52592,
	-1000, 1260, 27285, -1000, 1128, 764, 480, 32937, 646, 326,
	-1000, 2088, -1000, -1000, 3598, -1000, 624, -1000, 552, -1000,
	1478, -1000, 1476, 34821, 2085, 1894, -1000, 4908, 891, -1000,
	-1000, 3029, -1000, -1000, -1000, -1000, -1000, -1000, 2372, 2364,
	-1000, -1000, -1000, -1000, -1000, 2084, 2797, 25, 3417, 2361,
	-1000, -1000, 2796, 1450, 1446, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1426, 1413, 34193, -1000, -1000, 3029,
	2076, 26657, 1778, -1000, -1000, 1402, 1380, -1000, -1000, -1000,
	-1000, -1000, -296, 2795, 11526, 11526, -1000, -1000, -1000, 2788,
	-1000, -1000, 3516, -222, -226, 2356, 160, 197, -1000, 2354,
	-1000, -116, 3252, -143, -1000, -1000, 604, -213, 163, 159,
	157, -1000, -1000, -1000, 11526, -1000, -1000, -1000, 119, -1000,
	1791, -1000, -1000, 2074, 49265, 609, -1000, -1000, -1000, -1000,
	235, -1000, -1000, -1000, -1000, -1000, -1000, 2352, 2350, -1000,
	521, 3515, -1000, 52655, -1000, 1778, -1000, 521, 1378, -1000,
	1778, 1778, -1000, 462, -1000, 1751, -1000, 2072, -1000, 3485,
	-1000, 445, -1000, 524, -1000, -1000, -1000, 1376, -1000, -1000,
	-1000, 4908, 537, -1000, 750, 2787, -1000, -1000, 2617, 11526,
	2783, 1778, 2615, -101, 34193, 3175, 3160, 2856, 2451, 1364,
	-1000, -1000, 26657, -1000, -1000, 33565, -1000, 2782, 1343, 1341,
	49265, 2322, -1000, -1000, 2348, -1000, 877, 182, 197, -1000,
	3513, 194, 3511, 3510, 1150, 3245, -1000, -1000, 1943, -1000,
	154, 147, 145, -1000, -1000, -1000, -1000, -1000, 2347, 2346,
	2345, 594, -1000, 333, -1000, -1000, -1000, 307, -1000, 3501,
	563, -1000, 26657, -1000, -1000, 32937, 1721, 1721, -1000, -1000,
	2069, -1000, -1000, -1000, -1000, 2059, -1000, -1000, -1000, 1333,
	-1000, 49265, 974, 8365, -1000, 2335, -1000, 49265, -1000, 3187,
	-1000, 275, 1309, 307, 756, 307, 756, 307, 756, 307,
	756, 330, -1000, -1000, -1000, 1285, 11526, -1000, -1000, 1228,
	-1000, -1000, -1000, 2780, 2058, 205, 185, 3499, -1000, 2322,
	3495, 2322, 2322, -1000, 155, -135, 604, -1000, -1000, -1000,
	-1000, -1000, -1000, 2343, -1000, -1000, -1000, -1000, 1778, 1778,
	2340, 2334, 433, -1000, -1000, 32309, 525, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 537, 52655, -1000, 8365, 1213, -1000,
	2120, -1000, 779, -1000, -1000, 3186, 3184, 3577, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2774, 2614,
	-1000, 49265, 3400, 26029, 174, -1000, -1000, -1000, 2333, -1000,
	2322, -1000, -1000, 1768, -141, -1000, -267, 2047, 2041, -1000,
	-1000, 49265, -1000, 49265, 533, -1000, 52655, 1210, -1000, 8365,
	-1000, -1000, 3585, -1000, 3583, 943, 943, 307, 307, 307,
	307, 11526, -1000, -1000, -1000, 49265, -1000, 1207, -1000, -1000,
	-1000, 1572, -1000, -1000, -1000, -1000, 2312, -144, -1000, -1000,
	2305, -1000, -1000, -1000, 1195, 2702, -1000, -1000, -1000, -1000,
	-1000, 2113, 602, -1000, 2609, 1135, -1000, 1763, -1000, 31681,
	49265, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	49265, 7734, -1000, 1570, -1000, -1000, 2120, 49265, -1000,
}

var yyPgo = [...]int{
	0, 180, 3611, 252, 178, 4131, 82, 260, 263, 248,
	259, 4130, 4129, 4127, 4126, 3332, 3323, 4124, 4122, 4121,
	4120, 4119, 4117, 4116, 4114, 4113, 4112, 4111, 4103, 4101,
	4099, 4097, 4096, 4095, 4093, 4092, 4090, 4089, 4088, 4087,
	4086, 4085, 4084, 4083, 4082, 4080, 4079, 254, 4078, 4076,
	4075, 4074, 4073, 4072, 4069, 4068, 4067, 4066, 4065, 4063,
	4062, 4061, 4060, 4059, 4058, 4057, 4056, 4050, 4047, 4046,
	4044, 4043, 4042, 4041, 4037, 4036, 4035, 4034, 4030, 4029,
	4028, 4027, 253, 4026, 4025, 242, 4022, 3306, 4019, 4018,
	4017, 4016, 4015, 4014, 4013, 4012, 331, 4010, 4009, 4008,
	4007, 4005, 4004, 4003, 4002, 3999, 3998, 3997, 3996, 3993,
	281, 3992, 3991, 3990, 3989, 255, 3988, 211, 3986, 176,
	140, 3985, 3983, 3982, 3981, 3980, 3977, 3975, 3973, 3972,
	3971, 3969, 3967, 3965, 3961, 247, 199, 72, 3960, 45,
	3959, 3958, 225, 3957, 154, 3956, 155, 3955, 3954, 3953,
	3948, 3946, 3945, 3943, 3941, 3934, 3933, 3932, 3931, 3930,
	3929, 3928, 3926, 3921, 3919, 3918, 3917, 3916, 3915, 3914,
	50, 3913, 273, 3912, 78, 3911, 174, 3909, 66, 3907,
	106, 124, 267, 2476, 266, 257, 182, 185, 3905, 3904,
	282, 3903, 200, 234, 161, 117, 122, 3900, 141, 3896,
	275, 47, 48, 246, 142, 55, 183, 143, 3894, 220,
	99, 113, 3893, 3892, 146, 3891, 243, 181, 3890, 111,
	3888, 3885, 3883, 3881, 3878, 203, 195, 3877, 3876, 133,
	3875, 3874, 67, 128, 3873, 76, 127, 170, 120, 3872,
	2559, 129, 77, 3871, 130, 104, 3869, 105, 3868, 3867,
	3866, 3865, 192, 3864, 3863, 148, 59, 3862, 3861, 3858,
	74, 3857, 81, 3856, 64, 3855, 58, 3853, 3852, 3851,
	3849, 3847, 3846, 3845, 3844, 3843, 3841, 3840, 3838, 53,
	3836, 3835, 3834, 3833, 7, 11, 13, 3832, 27, 3831,
	172, 3830, 3829, 162, 3828, 202, 3827, 3825, 96, 90,
	3824, 93, 169, 3822, 9, 28, 75, 3819, 3818, 226,
	272, 109, 157, 3817, 279, 3816, 3815, 3814, 163, 3813,
	3812, 783, 3811, 3810, 3809, 3808, 3807, 3805, 100, 3804,
	1, 224, 38, 3803, 137, 134, 3802, 37, 30, 3801,
	42, 116, 207, 145, 110, 3800, 3799, 3798, 269, 206,
	98, 97, 0, 103, 227, 160, 3796, 3794, 3793, 261,
	3792, 239, 201, 237, 168, 271, 205, 3791, 3790, 57,
	3789, 167, 32, 51, 150, 92, 21, 215, 3786, 1066,
	8, 186, 3780, 218, 3779, 12, 18, 258, 153, 3778,
	3777, 34, 268, 3775, 3774, 3772, 132, 3771, 3770, 187,
	84, 3769, 3768, 3767, 3766, 41, 3763, 188, 16, 3762,
	136, 3760, 249, 3759, 213, 138, 189, 184, 159, 232,
	235, 85, 80, 3758, 1778, 158, 102, 17, 3757, 233,
	3756, 198, 126, 3754, 88, 3753, 250, 274, 210, 3752,
	191, 10, 43, 36, 29, 44, 14, 256, 208, 3751,
	3750, 23, 49, 3748, 52, 3747, 20, 3746, 3745, 40,
	3743, 65, 5, 3741, 3740, 19, 22, 3737, 35, 214,
	173, 125, 101, 61, 3736, 3735, 139, 151, 3734, 152,
	165, 156, 3732, 79, 3731, 3730, 3729, 3728, 916, 3727,
	262, 3726, 3725, 3724, 3723, 3722, 3721, 3720, 3719, 3718,
	223, 3717, 108, 39, 3715, 3714, 3713, 3710, 89, 149,
	3709, 3707, 3706, 3703, 31, 144, 3702, 15, 3701, 26,
	24, 33, 3700, 107, 3699, 3, 194, 3687, 3686, 4,
	3684, 3683, 2, 3682, 3681, 131, 3680, 95, 25, 171,
	114, 3679, 3675, 87, 216, 147, 3674, 3673, 86, 245,
	209, 3672, 54, 240, 265, 3671, 212, 3670, 3669, 3668,
	3666, 3664, 3663, 1201, 3662, 3659, 238, 71, 91, 3658,
	230, 119, 3657, 3656, 94, 166, 121, 118, 56, 83,
	3655, 115, 204, 3654, 197, 3653, 264, 3651, 3650, 112,
	3646, 3644, 3640, 3638, 196, 3637, 3636, 190, 236, 3635,
	3634, 270, 3631, 3628, 3626, 3623, 3622, 3621, 3620, 3619,
	3618, 3616, 241, 229, 3594,
}

//line mysql_sql.y:12680
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 607, 610, 610, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 125,
	125, 343, 343, 344, 344, 127, 339, 339, 338, 338,
	128, 129, 130, 586, 586, 131, 132, 162, 585, 585,
	164, 164, 164, 164, 164, 459, 126, 126, 126, 126,
	126, 168, 168, 168, 168, 168, 124, 592, 592, 592,
	593, 593, 121, 151, 150, 153, 153, 152, 152, 149,
	149, 145, 148, 148, 147, 147, 146, 141, 143, 143,
	142, 144, 144, 122, 110, 123, 534, 534, 533, 533,
	532, 532, 484, 484, 485, 485, 330, 330, 330, 531,
	531, 531, 530, 530, 529, 529, 528, 528, 526, 526,
	527, 525, 524, 524, 524, 522, 522, 522, 518, 518,
	520, 519, 519, 521, 513, 513, 516, 516, 514, 514,
	514, 514, 517, 512, 512, 512, 511, 511, 109, 109,
	109, 426, 426, 108, 108, 440, 440, 440, 440, 440,
	438, 438, 438, 438, 438, 438, 437, 437, 436, 436,
	441, 441, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 97, 97, 97, 97, 97, 97, 97,
	104, 102, 102, 102, 103, 598, 598, 597, 597, 599,
	599, 599, 599, 600, 600, 100, 100, 100, 101, 435,
	435, 435, 98, 99, 99, 425, 425, 430, 430, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 434, 434, 434, 432, 432, 431, 431, 433,
	433, 91, 91, 91, 94, 93, 424, 424, 424, 424,
	424, 424, 424, 424, 424, 92, 92, 92, 92, 92,
	92, 86, 86, 86, 86, 86, 85, 85, 87, 87,
	422, 422, 421, 105, 105, 106, 595, 595, 594, 596,
	596, 596, 596, 107, 113, 113, 113, 113, 113, 113,
	113, 113, 112, 112, 115, 115, 114, 116, 96, 96,
	96, 96, 96, 96, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	559, 559, 559, 559, 561, 561, 357, 358, 611, 360,
	356, 356, 356, 555, 555, 556, 557, 558, 558, 558,
	111, 14, 215, 215, 458, 458, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 13, 84, 89, 89,
	90, 294, 294, 295, 289, 289, 296, 296, 167, 297,
	297, 297, 302, 302, 303, 303, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 290, 274, 274,
	274, 269, 269, 269, 269, 270, 270, 271, 271, 272,
	272, 272, 272, 273, 273, 349, 349, 298, 298, 298,
	300, 300, 299, 293, 291, 291, 291, 291, 291, 291,
	291, 292, 292, 292, 292, 301, 301, 82, 88, 88,
	88, 88, 573, 573, 83, 584, 584, 488, 488, 371,
	371, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 494, 495, 367,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 79, 80, 81,
	54, 57, 58, 166, 53, 53, 53, 411, 411, 52,
	612, 612, 342, 342, 67, 66, 56, 68, 69, 70,
	71, 72, 73, 51, 65, 65, 65, 65, 65, 65,
	65, 65, 76, 507, 507, 614, 614, 614, 74, 75,
	487, 487, 487, 64, 63, 62, 61, 60, 60, 50,
	50, 49, 49, 55, 157, 59, 158, 158, 364, 364,
	364, 366, 366, 362, 613, 613, 454, 454, 365, 365,
	48, 48, 48, 48, 77, 363, 363, 341, 361, 361,
	361, 12, 12, 10, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 26, 27, 29, 419, 419, 416, 28, 20, 19,
	19, 23, 22, 18, 18, 21, 24, 25, 25, 9,
	9, 9, 9, 15, 15, 16, 187, 187, 241, 241,
	567, 567, 563, 563, 564, 564, 564, 565, 565, 566,
	566, 117, 501, 501, 501, 501, 501, 501, 8, 8,
	210, 210, 500, 500, 500, 500, 500, 500, 423, 423,
	423, 544, 544, 544, 545, 209, 209, 204, 204, 502,
	502, 388, 546, 546, 510, 510, 509, 509, 508, 508,
	207, 207, 208, 208, 190, 190, 136, 136, 515, 515,
	515, 515, 523, 523, 483, 483, 279, 279, 332, 332,
	333, 333, 180, 180, 181, 181, 181, 181, 181, 181,
	601, 601, 602, 603, 604, 604, 605, 605, 605, 606,
	606, 606, 606, 606, 552, 552, 554, 554, 553, 206,
	206, 202, 202, 203, 203, 203, 201, 201, 200, 199,
	199, 198, 196, 196, 196, 197, 197, 197, 214, 214,
	183, 183, 183, 182, 182, 182, 182, 182, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	184, 184, 560, 560, 560, 489, 489, 489, 497, 497,
	311, 311, 312, 312, 312, 312, 312, 134, 134, 493,
	493, 310, 310, 185, 185, 186, 186, 186, 186, 309,
	309, 308, 195, 195, 194, 193, 193, 193, 188, 188,
	188, 188, 189, 320, 320, 319, 319, 318, 318, 318,
	318, 120, 133, 133, 135, 213, 213, 317, 316, 316,
	316, 316, 212, 212, 211, 211, 205, 205, 192, 192,
	192, 192, 315, 191, 313, 591, 591, 590, 590, 589,
	587, 587, 587, 588, 588, 588, 588, 536, 536, 536,
	536, 536, 350, 350, 350, 355, 355, 353, 353, 353,
	353, 353, 359, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 39, 224, 225, 40, 226,
	226, 227, 227, 228, 228, 229, 230, 231, 231, 231,
	231, 38, 216, 216, 217, 217, 218, 218, 219, 220,
	220, 220, 223, 221, 222, 222, 609, 609, 608, 37,
	37, 30, 171, 171, 172, 172, 172, 174, 174, 275,
	275, 275, 173, 173, 175, 175, 175, 568, 570, 570,
	572, 571, 571, 571, 574, 574, 574, 574, 574, 575,
	575, 575, 575, 576, 576, 31, 154, 154, 178, 178,
	159, 579, 579, 579, 578, 578, 580, 580, 581, 581,
	336, 336, 337, 337, 169, 170, 170, 161, 156, 177,
	177, 177, 177, 177, 179, 179, 243, 243, 155, 160,
	163, 165, 569, 577, 577, 577, 420, 420, 417, 418,
	418, 415, 414, 414, 414, 583, 583, 582, 582, 582,
	351, 351, 32, 410, 410, 412, 413, 413, 413, 404,
	404, 404, 404, 36, 408, 408, 409, 409, 409, 409,
	409, 409, 409, 405, 405, 407, 407, 403, 403, 403,
	403, 403, 403, 403, 35, 176, 176, 402, 402, 399,
	399, 397, 397, 398, 398, 396, 396, 396, 400, 400,
	43, 78, 44, 45, 46, 42, 401, 401, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 138, 137,
	137, 137, 137, 137, 140, 140, 335, 335, 334, 334,
	139, 276, 276, 41, 254, 254, 475, 475, 470, 470,
	470, 470, 470, 491, 491, 491, 471, 471, 471, 472,
	472, 472, 474, 474, 474, 473, 473, 473, 473, 473,
	490, 490, 492, 492, 492, 442, 442, 443, 443, 443,
	446, 446, 462, 462, 463, 463, 461, 461, 468, 468,
	467, 467, 466, 466, 465, 465, 464, 464, 464, 464,
	457, 457, 456, 456, 444, 444, 444, 444, 444, 445,
	445, 445, 455, 455, 460, 460, 307, 307, 306, 306,
	262, 262, 263, 263, 305, 305, 260, 260, 261, 261,
	261, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 542, 542, 543,
	265, 265, 277, 277, 277, 277, 277, 277, 264, 264,
	266, 266, 242, 242, 240, 240, 232, 232, 232, 232,
	232, 233, 233, 234, 234, 235, 235, 235, 239, 239,
	238, 238, 238, 238, 236, 236, 237, 237, 237, 237,
	237, 237, 428, 428, 539, 539, 540, 540, 535, 535,
	535, 538, 538, 538, 538, 538, 538, 538, 541, 541,
	541, 537, 537, 244, 329, 329, 329, 352, 352, 352,
	352, 354, 328, 328, 328, 259, 259, 258, 258, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 427, 427, 368, 368, 369, 369, 288, 287, 287,
	287, 287, 287, 285, 286, 284, 284, 284, 284, 284,
	281, 281, 280, 280, 280, 282, 282, 282, 282, 282,
	406, 406, 278, 278, 268, 268, 268, 267, 267, 267,
	469, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 283, 326, 326, 326, 327, 327, 327, 327, 327,
	327, 327, 327, 378, 378, 384, 384, 551, 551, 550,
	245, 245, 245, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 255, 255, 255, 451, 451, 451, 451, 452,
	452, 452, 452, 453, 453, 453, 449, 449, 450, 450,
	389, 390, 390, 498, 498, 499, 499, 447, 447, 448,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 506, 506, 506, 322, 322, 322, 322,
	322, 322, 322, 322, 322, 322, 322, 322, 322, 322,
	322, 322, 562, 562, 562, 547, 547, 547, 548, 548,
	548, 548, 548, 548, 548, 548, 548, 548, 548, 548,
	549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
	549, 549, 549, 549, 549, 549, 549, 324, 324, 324,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 391, 391,
	392, 392, 503, 503, 503, 503, 503, 503, 504, 504,
	505, 505, 505, 505, 496, 496, 496, 496, 496, 496,
	496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
	496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
	496, 496, 496, 376, 321, 321, 321, 393, 385, 385,
	386, 386, 387, 387, 379, 379, 379, 379, 379, 379,
	380, 380, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 374, 374, 374, 374, 374, 374, 374,
	374, 374, 374, 374, 381, 381, 383, 383, 395, 395,
	395, 394, 394, 394, 394, 394, 394, 394, 257, 257,
	257, 257, 373, 373, 373, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 247, 247, 247,
	247, 251, 251, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 252, 252, 252,
	252, 252, 250, 250, 250, 250, 250, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
	248, 248, 248, 248, 248, 248, 118, 119, 119, 249,
	331, 331, 476, 476, 479, 479, 477, 477, 478, 480,
	480, 480, 481, 481, 481, 482, 482, 482, 486, 486,
	340, 340, 340, 348, 348, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 347, 347, 347, 347, 347, 347, 347, 347,
	346, 346, 346, 346, 346, 346, 346, 346, 346, 346,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
	345, 345, 345, 345, 345, 345, 345, 345, 345, 345,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 3, 4, 4, 5, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 2, 2, 0, 1, 4, 2,
	4, 1, 5, 3, 2, 1, 2, 2, 4, 4,
	5, 2, 1, 3, 4, 4, 1, 2, 9, 7,
	1, 3, 3, 1, 1, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 2, 4, 3, 3, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 7, 2, 3,
	3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 1, 1, 1, 1,
	6, 4, 1, 1, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 10, 7, 4, 4,
	3, 1, 3, 3, 1, 3, 1, 6, 7, 3,
	3, 3, 1, 1, 1, 3, 2, 4, 5, 5,
	6, 5, 5, 3, 2, 2, 1, 3, 4, 3,
	7, 5, 8, 2, 2, 1, 3, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 2,
	1, 3, 2, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 6, 3, 3, 1, 1, 7, 7, 7,
	8, 8, 0, 4, 7, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	4, 3, 3, 3, 2, 5, 5, 0, 2, 7,
	0, 1, 0, 1, 5, 5, 3, 3, 2, 4,
	4, 4, 4, 4, 1, 1, 1, 3, 3, 1,
	1, 1, 6, 0, 1, 1, 1, 1, 5, 5,
	0, 1, 1, 3, 3, 3, 4, 7, 7, 5,
	4, 7, 8, 3, 3, 2, 3, 4, 0, 2,
	2, 0, 2, 2, 1, 1, 1, 1, 0, 1,
	5, 5, 6, 4, 3, 1, 3, 1, 1, 3,
	5, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 4, 1, 3, 1, 4, 6, 6,
	4, 4, 4, 4, 4, 3, 6, 3, 5, 1,
	1, 2, 2, 11, 8, 9, 1, 3, 2, 4,
	0, 2, 0, 1, 1, 1, 1, 0, 1, 0,
	1, 4, 2, 1, 5, 4, 4, 2, 5, 5,
	1, 3, 2, 1, 5, 4, 4, 2, 0, 5,
	4, 0, 1, 3, 3, 1, 3, 1, 3, 1,
	3, 4, 0, 1, 0, 1, 1, 3, 1, 1,
	0, 4, 1, 3, 2, 1, 0, 8, 0, 4,
	7, 4, 0, 2, 0, 2, 0, 2, 0, 4,
	1, 3, 1, 1, 6, 4, 5, 7, 4, 5,
	0, 1, 3, 8, 0, 6, 0, 4, 6, 1,
	1, 1, 1, 1, 2, 3, 1, 3, 6, 0,
	3, 0, 1, 2, 4, 4, 0, 1, 3, 1,
	3, 3, 0, 1, 1, 0, 2, 2, 0, 2,
	3, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	7, 7, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 2, 0, 4, 7, 6, 6, 3, 5, 0,
	2, 0, 2, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 3, 1, 1, 1, 1, 4, 4,
	4, 3, 3, 2, 2, 2, 2, 2, 3, 2,
	3, 4, 1, 3, 4, 0, 2, 1, 1, 2,
	2, 2, 0, 1, 2, 4, 1, 3, 1, 3,
	2, 3, 1, 4, 3, 0, 1, 1, 2, 5,
	2, 2, 2, 0, 2, 3, 3, 0, 1, 3,
	1, 3, 0, 1, 2, 1, 1, 0, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 1, 7, 1,
	3, 0, 1, 1, 3, 1, 3, 0, 1, 1,
	1, 14, 1, 3, 0, 1, 1, 3, 1, 1,
	2, 4, 1, 1, 1, 1, 0, 1, 2, 9,
	9, 7, 1, 2, 3, 3, 3, 0, 4, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	4, 1, 1, 1, 3, 3, 4, 3, 3, 0,
	1, 1, 1, 0, 2, 7, 8, 10, 2, 2,
	8, 0, 3, 3, 0, 3, 0, 3, 0, 5,
	1, 3, 0, 3, 3, 0, 2, 9, 8, 0,
	2, 2, 3, 3, 0, 2, 0, 2, 4, 4,
	4, 4, 1, 0, 2, 2, 1, 3, 2, 1,
	3, 2, 1, 3, 2, 0, 1, 3, 4, 3,
	1, 1, 4, 1, 3, 1, 1, 1, 1, 0,
	1, 1, 1, 11, 0, 2, 3, 3, 2, 2,
	3, 1, 1, 1, 3, 3, 4, 0, 2, 2,
	2, 2, 2, 2, 6, 0, 4, 1, 1, 0,
	3, 0, 1, 1, 2, 4, 4, 4, 0, 1,
	8, 2, 4, 4, 4, 9, 0, 2, 11, 9,
	11, 8, 6, 9, 7, 10, 7, 6, 2, 2,
	9, 4, 5, 3, 0, 4, 1, 3, 0, 3,
	6, 0, 2, 10, 0, 2, 0, 2, 0, 3,
	2, 4, 3, 0, 2, 1, 0, 2, 3, 0,
	2, 3, 0, 2, 1, 0, 3, 2, 4, 3,
	0, 1, 0, 1, 1, 0, 6, 0, 3, 5,
	0, 4, 0, 3, 1, 3, 4, 5, 0, 3,
	1, 3, 2, 3, 1, 2, 0, 4, 6, 5,
	0, 2, 0, 2, 4, 5, 4, 5, 1, 5,
	6, 5, 0, 3, 0, 1, 1, 3, 3, 3,
	0, 4, 1, 3, 3, 3, 0, 1, 1, 3,
	2, 3, 3, 3, 4, 4, 3, 3, 3, 3,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 5, 4, 5, 1, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 0, 5, 5, 5,
	5, 0, 1, 1, 3, 1, 1, 1, 1, 1,
	7, 9, 7, 9, 2, 1, 7, 9, 7, 9,
	8, 5, 0, 1, 0, 1, 1, 1, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 3, 3, 2,
	2, 1, 5, 6, 4, 1, 1, 1, 5, 4,
	1, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 2, 2, 0, 4, 7, 3, 3,
	0, 3, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 3, 5, 2,
	2, 2, 2, 4, 1, 1, 2, 5, 6, 8,
	6, 6, 6, 1, 1, 1, 1, 1, 1, 3,
	9, 1, 4, 4, 4, 7, 9, 7, 7, 7,
	9, 7, 7, 0, 2, 0, 1, 1, 2, 4,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 5, 0, 1,
	3, 0, 1, 0, 2, 0, 2, 0, 1, 6,
	8, 8, 6, 6, 5, 5, 5, 6, 6, 6,
	6, 5, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 1, 1, 1, 4, 4, 6, 8,
	6, 4, 5, 4, 4, 4, 3, 4, 6, 6,
	7, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 8,
	4, 2, 3, 2, 4, 2, 2, 4, 6, 2,
	2, 4, 6, 4, 2, 4, 4, 4, 0, 1,
	2, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 3, 0, 1,
	1, 3, 1, 3, 3, 3, 3, 3, 2, 1,
	1, 1, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 1, 3, 4, 4, 5, 4, 5, 3,
	4, 5, 6, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 2, 3, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 4, 1, 2, 3, 5, 1,
	1, 3, 0, 1, 0, 3, 0, 3, 3, 0,
	3, 5, 0, 3, 5, 0, 1, 1, 0, 1,
	1, 2, 2, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -607, -610, -2, -5, 628, -1, -4, -119, -91,
	-7, -14, -121, -122, -8, -117, -9, -10, -12, -95,
	-112, -114, -116, -115, -47, -11, -111, -85, -86, -97,
	-105, -108, -109, -110, -123, -118, -120, -180, -124, -125,
	-126, -168, -129, -131, -132, 618, -92, -93, -94, -33,
	-32, -31, -30, -154, -159, -162, -164, -127, 551, 624,
	454, 14, 503, -15, -16, -552, -17, 263, -356, -357,
	-358, -360, -611, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -157,
	-158, -77, -57, -78, -58, -166, -128, -79, -80, -81,
	-83, -82, -88, -84, -89, -156, -161, -13, -167, -90,
	237, -87, 76, -98, -99, -100, -101, -102, -103, -104,
	-106, -107, 378, 384, 441, 617, 61, -181, -183, 645,
	646, 649, 538, 541, 161, 162, 164, 165, -34, -35,
	-36, -37, -38, -39, -41, -40, -42, -43, -44, -45,
	-46, 233, 16, 546, -18, -21, -19, -22, -20, -28,
	-29, -27, -24, -26, -155, -25, -160, -23, -163, -165,
	-130, 258, 257, 38, 324, 325, 326, 382, 256, 234,
	236, 15, 31, 42, 357, -182, 84, 539, 235, -184,
	13, 651, -6, -3, -2, -141, -145, -149, -152, -153,
	-150, -151, -4, -119, 119, 248, 619, -352, 374, 620,
	622, 621, 87, 95, -345, -347, 454, 263, 378, 384,
	617, 646, 649, 538, 541, 553, 554, 555, 556, 557,
	558, 559, 560, 562, 563, 564, 565, 566, 567, 568,
	578, 579, 569, 570, 571, 572, 573, 574, 575, 576,
	580, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 506, 603, 604, 605, 606, 534,
	561, 597, 598, 599, 600, 355, 356, 543, 275, 299,
	409, 305, 312, 161, 180, 174, 203, 194, 539, 169,
	279, 317, 280, 94, 164, 489, 109, 466, 438, 167,
	294, 296, 298, 535, 536, 368, 301, 533, 300, 302,
	304, 537, 281, 358, 190, 185, 293, 277, 183, 282,
	40, 283, 208, 284, 285, 548, 462, 354, 468, 309,
	52, 436, 184, 463, 297, 465, 212, 216, 480, 481,
	178, 179, 470, 483, 207, 210, 211, 255, 351, 352,
	43, 545, 267, 484, 214, 641, 206, 201, 492, 313,
	311, 205, 177, 200, 278, 65, 218, 217, 219, 432,
	433, 434, 435, 286, 287, 372, 479, 197, 186, 359,
	170, 23, 487, 262, 467, 385, 288, 306, 314, 213,
	215, 269, 274, 329, 547, 440, 273, 310, 485, 182,
	266, 295, 261, 488, 642, 171, 387, 289, 165, 303,
	482, 644, 491, 64, 400, 176, 168, 635, 252, 162,
	271, 276, 643, 290, 291, 292, 532, 316, 315, 307,
	540, 198, 268, 204, 188, 175, 199, 163, 270, 490,
	401, 615, 357, 419, 196, 193, 272, 245, 486, 469,
	166, 423, 402, 191, 318, 610, 611, 612, 373, 350,
	319, 320, 189, 259, 460, 461, 323, 429, 341, 403,
	439, 410, 404, 225, 226, 327, 472, 474, 209, 613,
	330, 331, 332, 464, 333, 334, 335, 336, 377, 56,
	58, 96, 99, 98, 647, 648, 63, 29, 363, 366,
	398, 405, 343, 616, 544, 340, 344, 345, 367, 25,
	421, 389, 425, 424, 48, 49, 50, 53, 54, 55,
	57, 59, 60, 51, 531, 382, 395, 493, 45, 47,
	392, 27, 369, 420, 442, 339, 422, 453, 46, 451,
	452, 473, 26, 371, 370, 62, 44, 428, 430, 431,
	321, 337, 380, 625, 494, 375, 391, 394, 376, 342,
	365, 396, 67, 66, 388, 626, 383, 381, 338, 549,
	550, 346, 577, 360, 437, 528, 527, 526, 525, 524,
	523, 522, 521, 324, 325, 326, 406, 407, 408, 418,
	411, 412, 413, 414, 415, 416, 417, 456, 457, 627,
	475, 477, 478, 476, 240, 650, 361, 362, 243, 629,
	630, 97, 631, 633, 632, 28, 634, 640, 637, 638,
	639, -433, -431, -352, 539, 617, 384, 538, 541, 378,
	357, 646, 649, 382, 263, 324, 325, 326, 454, 355,
	-226, -352, 650, -190, 247, 39, -240, -352, -190, -87,
	-16, -15, -182, -183, -240, 242, -361, 24, 436, -96,
	437, 237, 238, 84, 77, -352, -9, -110, -8, -117,
	-85, -180, 441, -359, -352, 324, 324, -359, 242, -354,
	273, 417, -352, -488, 248, -437, -410, 274, -436, -412,
	-439, -413, 32, 233, 235, 234, 551, 270, 16, 382,
	244, 14, 13, 383, 256, 25, 26, 28, 15, 384,
	386, 29, 387, 390, 391, 392, 42, 395, 396, 263,
	87, 95, 90, 281, -225, -352, -387, -379, 116, -382,
	-374, -375, -377, -330, -526, -372, 84, 143, 144, 151,
	117, 652, -376, -469, 36, 119, 557, 561, 597, 504,
	-322, -323, -324, -325, -326, -327, 542, -352, -527, -525,
	90, 100, 102, 106, 107, 105, 103, 155, 187, 104,
	91, 156, -183, 87, -547, 567, -346, 590, 603, 604,
	605, 606, 589, 61, -496, -505, 241, -503, 154, 192,
	259, 188, 14, 149, 429, 189, 598, 599, 600, 564,
	586, 506, 568, 578, 593, 559, 560, 562, 554, 555,
	556, 558, 569, 571, 585, -506, 581, 591, 592, 577,
	601, 602, 637, 594, 595, 596, 633, 89, 88, 584,
	583, 570, 565, 566, 572, 553, 563, 573, 574, 582,
	587, 588, 366, 109, 367, 368, 496, 358, 369, 248,
	436, 70, 370, 371, 372, 373, 374, 503, 375, 71,
	376, 365, 263, 419, 377, 191, 209, 508, 507, 509,
	500, 497, 495, 498, 499, 501, 502, 575, 576, 580,
	-133, -135, 608, -601, -314, -602, 6, 7, 8, 9,
	-603, 156, -592, 438, 547, 90, 317, 355, 17, 496,
	636, 537, 636, 537, 166, 163, -424, 166, 115, 171,
	170, -424, 636, 168, 635, 327, 269, -401, -171, 355,
	419, 333, 96, 273, -404, -402, 535, -490, 321, 317,
	293, 243, 112, -172, 253, 252, 110, 496, 241, 393,
	312, 56, 58, -563, -564, 230, 231, 232, -554, 529,
	-553, -352, 636, 641, 368, 98, 99, 635, 27, 242,
	379, 269, 474, 472, 473, 475, 476, 477, 478, -65,
	-507, -487, 469, 468, -365, 461, 467, 459, 471, 462,
	356, 335, 551, 334, 233, 629, 536, 530, -340, 403,
	439, 493, 494, 380, 440, 480, 482, 463, 109, 195,
	192, 243, 245, 242, 635, 355, 496, 419, 96, 333,
	242, -563, 641, 163, 480, 482, 438, 273, 417, 41,
	-430, 429, -429, -431, 481, 492, 88, 89, 479, -340,
	109, 460, 460, -601, -314, -181, -183, -120, -552, 537,
	636, 243, 355, 419, 273, 244, 242, 532, 535, 245,
	496, 241, 324, 379, 269, 333, 96, 168, 635, -489,
	-560, 32, -497, 227, 228, 229, 33, 34, -1, 123,
	651, -379, -379, -6, 654, -6, -379, -352, -352, 158,
	-247, -251, -248, -250, -249, -253, -252, 192, 193, 154,
	196, 202, 198, 199, 200, 201, 203, 204, 205, 206,
	207, 210, 211, 208, 31, 209, 259, 188, 189, 190,
	191, 212, 174, 194, 544, 220, 175, 221, 176, 222,
	177, 223, 178, 179, 224, 180, 183, 184, 185, 186,
	182, 157, -215, 90, 32, 84, 157, 90, -207, 265,
	-190, -240, -232, 157, 652, -207, -601, -200, -201, 11,
	-240, -328, -352, 438, 126, -96, 77, -96, 437, 77,
	-96, 437, 237, -555, -556, -557, -559, 237, 437, 436,
	238, -115, 157, 281, 17, -359, -359, 82, -240, -412,
	273, -437, -410, 36, 81, 158, 246, 158, 81, 84,
	380, 355, 419, 381, 496, 242, 393, 245, 273, 394,
	355, 419, 242, 245, 496, 273, 355, 242, 245, 419,
	273, 394, 355, 459, 460, 245, 27, 385, 388, 389,
	460, -511, 492, 158, 115, 112, 113, 114, -379, 133,
	-394, 126, 127, 128, 129, 130, 131, 132, 140, 139,
	150, 143, 144, 145, 146, 147, 148, 149, 141, 142,
	136, 116, 134, 138, 135, 118, 153, -183, -379, -387,
	61, -377, -377, -377, -377, -352, -469, -384, -379, 84,
	84, 84, 84, 84, 157, 103, 90, -379, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	-504, 84, 84, -391, -392, 84, 84, -372, -328, 84,
	90, 90, 84, 84, 84, 90, 84, 84, 84, -392,
	-392, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, -201, 158, -200,
	84, -200, -201, -184, -183, 32, 33, 32, 33, 32,
	33, 32, 33, -604, 626, 84, 100, 647, 225, 17,
	-352, 635, -352, -586, 32, 540, 540, 540, 540, 485,
	546, 169, 170, 171, -399, 248, -399, -399, -224, -352,
	-226, 379, 245, 532, 245, -172, -399, -399, -399, -399,
	-399, 244, -399, 24, 242, 242, 242, 242, -399, 503,
	126, 126, 59, -565, 173, 158, -554, -206, 84, -586,
	642, 643, 644, -364, 134, 138, -364, -310, 18, -310,
	24, 271, 271, 271, -364, 311, -612, -613, 17, 136,
	-362, -613, -362, -362, -364, -614, 244, 470, 43, 272,
	271, -202, -203, 22, -202, 464, 460, -454, 465, 466,
	-366, -613, -365, -364, -364, -365, -364, -364, -364, 32,
	242, 245, 496, 333, 630, -612, -612, 31, 31, -488,
	-488, -240, -488, -488, 530, -341, -352, -488, -488, -488,
	-294, -295, -240, -566, 247, 644, -598, -597, 483, -600,
	485, 163, -431, 163, -431, 87, -412, 273, 273, 158,
	126, 24, -432, 126, 137, -431, -431, -432, -432, -264,
	41, -351, 154, -352, 90, -264, 41, -595, -594, -240,
	-201, -184, -183, 85, 85, 85, 540, -586, -488, -488,
	-488, -488, -488, -490, -488, -488, -488, -488, -488, -359,
	-216, -352, -226, 248, -488, -488, -488, -488, -185, -186,
	145, -379, -352, -185, -3, -143, -142, 120, 121, 123,
	620, 374, 619, 623, 617, -431, 41, -482, 401, 400,
	-476, -478, 84, -477, 84, -477, -477, -477, -477, -477,
	84, 84, -479, 84, -479, -479, -476, -480, 84, -480,
	-481, 84, -481, -480, -352, -458, 546, -385, -387, -352,
	39, -500, 61, -180, 84, 31, 84, -207, -352, 189,
	168, 634, -501, 61, -180, 84, 31, -201, -136, 39,
	-203, 21, 157, 100, 90, -115, -96, 77, -115, -96,
	-96, 85, 158, -558, 106, 107, -561, 207, 198, -352,
	-113, 90, -7, -8, -9, -10, -47, -85, -82, -180,
	234, 538, 541, -528, -526, 84, 32, 428, 81, 17,
	-438, 242, 496, 379, 269, 245, 355, -436, -419, -416,
	-414, -351, -412, -415, -414, -441, -328, 460, -137, 443,
	442, 323, -379, -379, -379, -379, -379, 105, 116, 350,
	106, 107, -374, -395, 32, 319, 320, -375, -375, -375,
	-375, -375, -375, -375, -375, -375, -375, -375, -375, -383,
	-393, -469, 84, 136, 134, 138, 135, 118, -377, -377,
	-375, -375, -266, -351, 154, 85, 158, -379, -551, -550,
	120, -379, -379, -379, -379, -405, -407, -328, 84, -352,
	-548, -549, 510, 511, 512, 513, 514, 515, 516, 517,
	518, 519, 520, 370, 365, 371, 369, 358, 377, 372,
	373, 191, 527, 528, 521, 522, 523, 524, 525, 526,
	-385, -385, -379, -548, -385, -321, 33, 32, -387, -387,
	-387, 85, -379, -562, 348, 347, 349, -204, -352, -385,
	85, 85, 85, 100, -387, -387, -385, -375, -385, -385,
	-385, -385, -549, -321, -321, -321, -321, 145, -387, -387,
	-321, -321, -321, -321, 145, -321, -321, -321, -321, -321,
	-321, -321, -321, -321, -321, -321, 85, 85, 85, 145,
	-387, -202, -135, -509, -508, -379, 41, -136, -203, -605,
	627, 84, -328, -593, 90, 90, 652, 168, 635, 17,
	496, -352, 17, 242, -352, 100, -352, 100, 486, 487,
	167, 170, 169, -352, 116, -352, -352, 35, 84, -216,
	-399, -399, -399, -570, -352, 91, -420, -417, -414, -352,
	-352, -410, -352, -341, -240, -399, -399, -399, -399, -240,
	-275, 53, 54, 55, -414, -173, 56, 57, -566, -553,
	35, -205, -352, -310, -377, -377, -379, -414, 273, -612,
	-364, -364, -342, -341, -366, -361, -366, -366, -310, -362,
	-364, -364, -379, -366, -362, -310, -352, 460, -310, -310,
	-454, -364, -363, -352, -363, -399, -341, -342, -342, -240,
	-240, -289, -296, -290, -297, 265, 239, 363, 364, 236,
	234, 11, 235, -304, 312, -400, 504, -270, -271, 77,
	42, -273, 263, 405, 398, 275, 279, 94, 280, 438,
	281, 244, 283, 284, 285, 300, 302, 255, 286, 287,
	288, 429, 289, 162, 301, 290, 291, 292, 381, -265,
	6, 336, 546, 41, 51, 52, 452, 451, 549, 276,
	-352, -570, -568, 31, -352, 31, -420, -352, -352, 158,
	246, -193, -195, -192, -188, -189, -194, -313, -315, -191,
	84, -240, -183, -352, -431, 158, 484, 486, 487, -598,
	-432, -598, -432, 246, 32, 428, -435, 428, 32, -410,
	-429, 480, 482, -425, 90, 429, -415, -434, 81, 154,
	-508, -432, -432, -434, -434, 153, 158, -596, 485, 486,
	230, -202, 100, -242, -240, -570, -419, -410, -352, -488,
	-242, -242, -242, -354, -354, 84, 157, 36, -352, -352,
	-352, -352, -309, 158, -308, 17, -353, -352, 35, 90,
	157, -309, -144, -142, 122, -379, -6, 619, -379, -6,
	-6, -379, -6, -379, -486, 402, 100, 100, -331, 90,
	-331, 100, 100, 100, 552, 85, 90, -423, 81, -502,
	-388, -546, 608, -209, 85, -204, -544, -545, -204, -208,
	-352, -500, -232, 126, 126, 126, -502, -209, 85, -544,
	-202, 609, -136, -199, -198, -379, -352, 24, -115, -96,
	-556, 157, 355, 158, -205, -438, -418, -415, -440, 145,
	-352, -426, 158, 546, 655, 88, 246, -583, -582, 420,
	85, 158, -512, 247, 503, 90, 652, 436, 225, 226,
	105, 350, 106, 107, -469, -387, -383, -377, -377, -375,
	-375, -381, 260, -381, 115, -379, 653, -378, -550, 122,
	-379, 35, 158, 35, 158, 82, 158, 85, -476, -379,
	157, 85, 85, 17, 17, 85, -379, 85, 85, 85,
	85, 17, 17, -379, 85, 157, 85, 85, 85, 85,
	82, 85, 158, 85, 85, 85, 85, 158, -387, -387,
	-379, -387, 85, 85, 85, -379, -379, -379, -387, 85,
	-379, -379, -379, -379, -379, -379, -379, -379, -379, -379,
	-205, -448, 455, -448, -448, 158, 158, 158, 85, -136,
	84, 100, 158, 648, -335, -334, 90, -352, -352, 168,
	635, -352, 90, 635, -352, 90, 168, 171, 171, 170,
	90, 36, 24, 310, 24, -225, -227, -228, -229, -230,
	-231, 136, 159, 160, 84, -240, -240, -240, -572, 406,
	-584, 158, 41, -582, 496, -169, 323, -403, 82, -176,
	17, 546, -240, -240, -240, -240, -254, 35, 17, -187,
	-241, -352, 84, 85, 158, -411, 82, -352, -342, -310,
	-310, -366, -310, -310, 158, 23, -364, -366, -366, -232,
	-362, -232, 157, -232, -341, -475, 35, -206, 158, 21,
	265, -239, -349, -236, -238, 250, -369, -237, 253, -540,
	251, 249, 110, 254, 308, 111, 244, -349, -349, 250,
	-274, 246, 35, -349, -292, 244, 353, 308, 251, 21,
	265, -291, 244, 111, -352, 250, 254, 251, 249, -348,
	126, -340, 153, 246, 43, 381, -348, 550, 265, -348,
	-348, -348, -348, -348, -348, -348, 282, 282, -348, -348,
	-348, -348, -348, -348, -348, -348, -348, -348, -348, 163,
	-348, -348, -348, -348, -348, -348, 84, 328, 277, 278,
	310, -573, 406, 31, 361, 361, 362, -584, 31, -177,
	355, -295, -293, -363, 31, -316, -317, -318, -319, -320,
	68, 72, 74, 78, 69, 70, 71, 75, 73, 31,
	158, -350, -355, 35, -352, 90, -350, -183, -195, -193,
	-350, 84, -432, -597, -599, 488, 485, 491, -434, -434,
	100, 246, 84, 126, -434, -434, 41, -351, -594, 492,
	486, -136, 158, 81, -242, -217, -218, -219, -220, -247,
	-328, 193, 196, 198, 199, 200, 201, 203, 204, 205,
	206, 207, 210, 211, 208, 209, 259, 188, 189, 190,
	191, 212, 174, 194, 544, 175, 176, 177, 178, 179,
	180, 183, 184, 185, 186, 182, -352, -226, -310, -186,
	-195, -352, 90, -352, 145, -310, 123, -6, 121, -148,
	-147, -146, 124, 617, 623, 123, 123, 123, 85, 85,
	85, 158, 85, 85, 85, 158, 85, 158, 100, -515,
	465, 40, 158, 84, 85, 158, 61, 158, 126, 85,
	158, -379, -352, 90, -379, 85, 61, -136, 90, 158,
	-196, 37, 38, 157, 438, -352, -526, 85, -440, 158,
	246, 157, 157, -416, 384, -351, -418, 21, 546, -328,
	39, -335, 126, 652, -352, 85, -381, -381, 115, -377,
	-374, 85, 123, -379, 121, -245, -247, 400, 401, -379,
	-245, -246, -252, 154, 192, 259, 191, 190, 188, 400,
	401, -264, -407, 543, -196, 85, -352, -379, -379, 85,
	-379, -379, 17, -352, -264, -375, -379, -201, -201, 85,
	85, -447, -448, -447, -447, 85, 85, 85, 85, -447,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 84, 100, 102, 100, 102, -508, -606, 63, 625,
	62, 428, 105, 313, 158, 100, 90, 653, 158, 126,
	90, -352, -352, 17, 242, -352, 17, 171, 90, -585,
	317, 355, -459, 100, 317, 355, 496, 392, 85, 158,
	-328, -217, -206, 84, -206, -575, 467, 408, 418, -348,
	-371, -370, 357, 42, -494, 429, 414, 415, -417, 273,
	-341, -581, 97, 126, 81, 340, 344, 345, 341, 342,
	343, -397, -398, -396, -400, -568, 84, 84, -180, 35,
	134, -176, 84, 84, 35, -470, 330, -247, -240, -187,
	-352, 17, 158, -567, 157, -1, -352, -410, -364, -310,
	-379, -379, -310, -364, -364, -366, -352, -232, -470, -247,
	35, -290, 239, 235, -444, 310, 311, -445, -460, 313,
	-462, 84, -244, -328, -237, -539, -540, -399, -352, 111,
	-539, 111, 84, -244, -328, -328, -293, -328, -352, -352,
	-352, -352, -300, -299, -328, -302, 32, -303, -352, -352,
	-352, -352, 111, -352, 111, -269, 41, 48, 49, 50,
	-348, -348, 195, -272, 41, 428, 430, 431, -302, 100,
	100, 100, 100, 90, 90, 90, -348, -348, 100, 90,
	-355, 90, -541, 170, 45, 46, 100, 100, 100, 100,
	41, 90, -277, 41, 293, 297, 294, 295, 296, 90,
	100, 41, 100, 41, 100, 41, -352, 84, -542, -543,
	90, 329, -459, -575, -348, 361, -431, 126, 126, -371,
	-580, 323, -179, 496, 32, -210, 239, 235, -568, -422,
	-421, -328, -192, -192, -192, -192, -192, 68, 79, 68,
	68, 68, 73, 68, 73, 68, -318, 79, -422, -194,
	-206, -355, 85, -591, -590, -589, -587, 76, 247, 77,
	-385, -434, 485, 489, 490, -418, -367, 90, -425, -214,
	24, -240, -240, -492, 303, 304, 85, 158, -247, -312,
	19, 157, -312, 119, -6, -144, -146, -379, -6, -379,
	619, 374, 620, 90, 100, 100, -523, 449, 444, 446,
	111, -388, -510, -509, 61, -180, -204, -502, -545, -508,
	-352, 653, 653, 653, 653, 61, -180, -502, -214, -515,
	-198, -197, 44, -352, 100, 17, -415, -410, 145, 145,
	-352, 385, -426, 90, 407, 90, 242, 653, 90, -335,
	-374, -379, 85, -255, 179, 178, -255, 35, 85, 85,
	-477, -477, -476, -479, -476, -255, -255, 85, 84, -196,
	85, 24, 85, 85, 85, -379, 85, 85, 158, -498,
	505, -499, 579, -447, -447, -447, -447, -447, -447, -447,
	-447, -447, -447, -447, -447, -447, -447, -447, -447, -447,
	-390, -389, 265, 450, 632, 632, 450, 632, 632, 85,
	158, -548, 158, -343, 318, -343, -334, 90, 246, 90,
	168, -352, 90, 635, 90, -352, 90, 310, -352, -352,
	90, 90, -229, -247, 85, 35, -233, -234, -235, -244,
	-236, -238, 35, -576, 94, -571, 90, -352, 91, -577,
	94, 409, 156, 359, 41, 410, 411, 426, 354, 100,
	100, 416, -569, -352, -178, 242, 355, -579, 52, 126,
	90, -240, -396, -340, 153, 284, 333, -307, -306, -352,
	90, -233, -180, -240, -233, -233, -180, -471, 332, 21,
	100, 144, -207, 82, 157, -195, -241, -352, 145, 85,
	-310, -232, -310, -310, -364, -471, -180, -456, 314, 84,
	-454, 84, -454, 111, 341, -463, -461, 265, -298, 45,
	47, -247, -537, -352, -535, -537, -352, -535, -535, -399,
	-379, -298, -244, 246, 31, 235, -301, 338, 339, 344,
	-427, 309, 116, -427, 158, -196, 158, -352, -264, -264,
	31, 90, 90, -242, 85, 158, 126, 100, 90, -576,
	-571, 126, -432, 90, 90, -577, -581, 126, -243, 242,
	-341, 158, -210, -210, -310, 158, 126, -212, -211, 81,
	82, -213, 81, -211, 68, 68, -310, -589, -588, 24,
	-540, -540, -540, 85, 85, 15, -219, 41, -311, 20,
	21, 145, -311, 123, 121, 123, 123, -352, 85, 85,
	-483, 610, -519, -521, 444, 21, 21, 15, 247, 85,
	-502, -502, -523, 45, 46, -410, -426, 429, -240, 158,
	653, -245, -283, 90, -379, 85, -379, 85, 90, 85,
	90, -201, 21, 85, 158, 85, 85, 85, 158, 85,
	85, -379, 85, -548, -344, 189, 90, -344, 355, -353,
	-352, 17, -352, 90, -459, 310, 310, 242, 240, -180,
	85, 158, -180, 90, -574, 420, 90, 90, 100, 41,
	100, 156, 412, -495, -170, 94, -242, 32, -210, -578,
	94, 126, 652, 84, -348, -348, -348, -352, 85, 158,
	-348, -348, 85, 85, 85, -262, 546, -472, 264, 100,
	144, 100, 144, 100, -350, -195, -352, -310, -567, 157,
	-310, -472, -446, 315, 100, -375, 84, -375, 84, -455,
	312, 84, 85, 158, -352, -328, -259, -258, -256, 105,
	116, 41, 398, -257, 94, 153, 298, 301, 300, 276,
	299, -288, -368, 81, 404, 338, 339, -400, 610, 534,
	249, 110, 111, 386, -369, 84, 84, 82, 318, 84,
	84, -537, 85, -298, -328, 41, -301, 41, 351, 309,
	-299, -352, 153, -264, 85, -543, 90, -548, -574, 90,
	-434, -579, 90, -170, -242, -568, -201, -421, -508, -379,
	84, -379, 84, 68, 11, 19, -372, -379, -387, 637,
	639, 640, 248, -6, 620, 374, -279, 611, 90, 21,
	90, -517, 90, -422, -483, -139, -276, -340, 281, 85,
	-282, 136, 546, 85, 85, -447, -447, -450, -449, -453,
	450, 310, 458, -387, 90, 90, 85, 85, 90, -352,
	168, 90, 652, 90, -459, -459, -352, -221, -247, -174,
	546, -262, -235, -174, 21, 546, 358, 41, 100, 41,
	413, 90, -178, 126, 106, 107, -336, -337, 90, -405,
	-264, -266, 90, -306, -372, -372, -260, -180, 35, -261,
	-304, -400, 546, -138, -137, -260, 546, 84, -473, 162,
	100, 144, 100, 100, -310, -310, -473, -462, 21, 85,
	-441, 85, -441, 84, 126, -375, -461, -464, 61, -256,
	105, -375, 90, -266, -267, 41, 297, 293, 126, 126,
	-268, 41, 277, 278, -278, 84, 308, 15, 195, 84,
	111, 111, -240, -405, -405, -538, 340, 341, 342, 346,
	344, 345, 343, -538, -405, -405, 84, -428, -427, -375,
	-348, -348, 153, -578, -202, -205, -536, -352, 249, 21,
	21, -493, 546, 638, 84, 84, -352, -352, -332, 612,
	100, 90, 446, -279, -484, 613, -513, -454, -264, 126,
	85, 75, 544, 547, 85, -452, 118, 412, 416, -373,
	-376, 100, 102, 187, 156, 85, 85, -352, -339, -338,
	90, 90, 90, 310, 545, -175, 60, 492, 90, 91,
	407, 90, 91, 358, -170, 90, 653, 158, 126, 85,
	-442, 265, -180, 158, -304, -340, -139, -442, -263, -305,
	-352, 90, -491, 170, 331, 546, 100, 144, 100, -201,
	-474, 170, 331, -445, 85, 85, 85, -441, 100, 85,
	-468, -465, 84, -304, 267, 136, 90, 90, 100, 84,
	-503, 31, 90, -406, 84, 85, 85, 85, 85, -405,
	100, -264, -348, 85, 85, 158, 640, 84, -387, -387,
	84, 21, -332, -485, 614, 90, -522, 449, -516, -514,
	444, 445, 446, 447, 90, 545, 65, 548, -451, -452,
	416, -373, -376, 608, 456, 456, 456, 653, 158, 126,
	-459, -223, -352, 308, 429, -337, 90, -408, -443, 317,
	21, -304, -348, -443, 85, 158, -348, -348, 331, 100,
	144, 100, -202, 331, -457, 316, 85, -468, -304, -467,
	-466, 315, 268, 84, 85, -379, -391, -348, 85, -281,
	-280, 542, -405, -408, 82, -408, 82, -408, 82, -408,
	82, 85, -264, -352, 249, -134, 84, 85, 85, -333,
	-352, -517, 90, -524, 247, -520, -521, 448, -514, 21,
	446, 21, 21, -140, 158, 65, 115, 457, 457, 457,
	-338, 90, 90, -222, 35, 451, 385, -409, 255, 351,
	352, 94, 546, 338, 339, 21, -444, -264, -305, -372,
	-372, 100, 100, 85, 158, -352, 264, 84, -386, -380,
	-379, 264, 85, -352, -287, -285, -286, 81, 463, 306,
	307, 85, -538, -538, -538, -538, -288, 85, 158, -385,
	85, 158, -531, 84, 100, -519, -518, -520, 21, -517,
	21, -517, -517, 453, 546, -451, 90, -348, -348, 90,
	90, 337, -328, 84, -456, -466, -465, -386, 85, 158,
	-427, -286, 81, -285, 81, 16, 15, -408, -408, -408,
	-408, 84, 85, -352, -534, 31, 85, -530, -529, -329,
	-525, -352, 449, 450, 90, -517, 126, 547, -609, -608,
	631, 100, 100, -352, -441, -446, 85, -380, -284, 303,
	304, 31, 170, -284, -385, -533, -532, -330, 85, 158,
	157, 90, 548, 90, 85, -462, 105, 41, 305, 85,
	158, 126, -529, -352, -532, 41, -379, 157, -352,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 0, 0,
	0, 0, 0, 699, 700, 0, 663, 0, 0, 0,
	0, 0, 0, 540, 541, 542, 543, 544, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	416, 417, 418, 419, 420, 421, 422, 423, 424, 425,
	0, 336, 332, 253, 254, 255, 256, 257, 258, 259,
	343, 344, 517, 0, 0, 0, 0, 782, -2, 97,
	0, 0, 0, 0, 325, 0, 316, 316, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, -2, 712, 0, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 400, 401, 402, 396, 397, 399, 398, -2, 0,
	0, 712, 0, 0, 0, 790, 0, 0, 0, 833,
	855, 23, 0, 7, 9, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 0, 0, 19, 0, 19, 0,
	0, 0, 1377, 1378, 1379, 1380, 2175, 2145, -2, 1911,
	1888, 2069, 2070, 1967, 1979, 2210, 2211, 2212, 2213, 2214,
	2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224,
	2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234,
	2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244,
	2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254,
	2255, 2256, 2257, 2258, 2259, 1845, 1846, 1847, 1848, 1849,
	1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859,
	1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
	1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931,
	1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941,
	1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
	1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961,
	1962, 1963, 1964, 1965, 1966, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1981, 1982, 1983, 1984,
	1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
	1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
	2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
	2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024,
	2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034,
	2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054,
	2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
	2065, 2066, 2067, 2068, 2071, 2072, 2073, 2074, 2075, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
	2097, 2098, 2099, 2100, 2101, -2, 2103, 2104, 2105, 2106,
	2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116,
	2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
	2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136,
	2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2146, 2147,
	2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157,
	2158, 2159, 2160, -2, -2, -2, 2164, 2165, 2166, 2167,
	2168, 2169, 2170, 2171, 2172, 2173, 2174, 2176, 2177, 2178,
	2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188,
	2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198,
	2199, 0, 309, 307, 1858, 1888, 1911, 1967, 1979, 1980,
	2017, 2069, 2070, 2102, 2145, 2161, 2162, 2163, 2175, 0,
	0, 979, 0, 760, 0, 0, 765, 1326, 760, 337,
	701, 702, 790, 816, 661, 0, 374, 0, 1902, 378,
	2152, 0, 0, 0, 0, 658, 368, 369, 370, 371,
	372, 373, 0, 0, 952, 0, 0, 364, 0, 331,
	1969, 2174, 1381, 0, 0, 0, 0, 0, 196, 1103,
	198, 1105, 202, 210, 0, 0, 0, 215, 216, 219,
	220, 221, 222, 223, 0, 227, 0, 229, 232, 0,
	234, 235, 0, 238, 239, 240, 0, 250, 251, 252,
	1106, 1107, 1108, -2, 125, 977, 1816, 1702, 0, 1709,
	1722, 1733, 1463, 1464, 1465, 1466, 0, 0, 0, 0,
	0, 0, 1474, 1475, 0, 1505, 2214, 2255, 2256, 0,
	1483, 1484, 1485, 1486, 1487, 1488, 0, 136, 148, 149,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 0, 1763, 1764,
	1765, 1673, 1450, 1377, 0, 2223, 0, 2245, 2250, 2251,
	2252, 2253, 2244, 0, 0, 1658, 0, 1648, 0, 0,
	-2, -2, 0, 0, 2042, -2, 2257, 2258, 2259, 2220,
	2241, 2249, 2224, 2225, 2248, 2216, 2217, 2218, 2211, 2212,
	2213, 2215, 2227, 2229, 2240, 0, 2236, 2246, 2247, 2150,
	0, 0, 2197, 0, 0, 0, 2192, 150, 151, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1669, -2, -2, 1672,
	-2, 1675, -2, -2, -2, -2, 1680, 1681, -2, 1683,
	-2, -2, -2, -2, -2, -2, -2, 1660, 1661, 1662,
	1663, 1652, 1653, 1654, 1655, 1656, 1657, -2, -2, -2,
	816, 902, 0, 816, 0, 791, 838, 841, 844, 847,
	794, 0, 0, 98, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 326, 327, 315, 317, 0, 321,
	0, 314, 1139, 1139, 1139, 0, 0, 0, 0, 1139,
	1139, 1139, 1139, 1139, 0, 1139, 0, 0, 0, 0,
	0, 1139, 0, 1012, 1110, 1111, 1112, 1137, 1138, 1211,
	0, 0, 0, 717, 713, 714, 715, 716, 804, 0,
	806, 809, 0, 0, 638, 638, 871, 871, 584, 0,
	0, 0, 638, 0, 598, 590, 0, 0, 0, 638,
	0, 0, 811, 811, 0, 641, 648, 638, 638, -2,
	638, 638, 635, 638, 0, 0, 1151, 604, 605, 606,
	590, 590, 609, 610, 611, 621, 622, 649, 1840, 0,
	0, 517, 517, 0, 517, 517, 0, 517, 517, 517,
	0, 719, 1927, 2012, 1909, 1985, 1868, 1969, 2174, 0,
	282, 2042, 287, 0, 1910, 1930, 0, 0, 1948, 0,
	-2, 0, 353, 816, 0, 0, 790, 0, 0, 0,
	0, 517, 517, 517, 517, 517, 1210, 517, 517, 517,
	517, 517, 0, 0, 0, 517, 517, 517, 517, 0,
	0, 856, 857, 852, 853, 854, 858, 859, 5, 6,
	19, 0, 0, 0, 0, 0, 0, 104, 103, 0,
	1817, 1835, 1768, 1769, 1770, 1822, 1772, 1826, 1826, 1826,
	1826, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809,
	1810, 1826, 1826, 0, 0, 1815, 1792, 1824, 1824, 1824,
	1822, 1819, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1829, 1829, 1832, 1832,
	1829, 0, 414, 412, 413, 1698, 0, 0, 0, 0,
	760, 764, 1324, 0, 0, 0, 816, -2, 0, 0,
	662, 375, 1382, 0, 0, 379, 0, 380, 0, 0,
	382, 0, 0, 0, 403, 0, 406, 390, 391, 392,
	393, 386, 0, 176, 0, 366, 367, 0, 0, 333,
	0, 0, 0, 518, 0, 0, 0, 0, 0, 0,
	207, 203, 211, 214, 224, 231, 0, 243, 245, 248,
	204, 212, 217, 218, 225, 246, 205, 208, 209, 213,
	247, 249, 206, 226, 230, 244, 228, 233, 236, 237,
	242, 0, 177, 0, 0, 0, 0, 0, 1708, 0,
	0, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -2, 1702, 0,
	0, 1469, 1470, 1471, 1472, 0, 1476, 0, 1506, 0,
	0, 0, 0, 0, 0, 1762, 1766, 0, 1698, 1698,
	0, 1698, 1694, 0, 0, 0, 0, 0, 0, 1698,
	1631, 0, 0, 1633, 1649, 0, 0, 1635, 1636, 0,
	1639, 1640, 1698, 0, 1698, 1644, 1698, 1698, 1698, 1627,
	1628, 0, 1694, 1694, 1694, 1694, 0, 0, 1694, 1694,
	1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
	1694, 1694, 1694, 0, 0, 0, 0, 811, 0, 817,
	0, -2, 0, 835, 837, 839, 840, 842, 843, 845,
	846, 848, 849, 796, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 71, 73, 0, 0, 0, 0, 0,
	0, 319, 0, 324, 0, 0, 0, 0, 0, 976,
	0, 0, 1139, 1139, 1139, 1013, 0, 0, 0, 0,
	0, 0, 0, 0, 1139, 1139, 1139, 1139, 0, 1157,
	0, 0, 0, 719, 718, 0, 805, 0, 0, 70,
	577, 578, 579, 871, 0, 0, 581, 582, 0, 583,
	0, 590, 638, 638, 596, 597, 592, 591, 644, 645,
	641, 0, 641, 641, 871, 0, 615, 616, 617, 638,
	638, 623, 812, 0, 624, 625, 641, 0, 646, 647,
	871, 0, 0, 871, 871, 0, 633, 634, 636, 638,
	0, 0, 1139, 0, 654, 592, 592, 1841, 1842, 0,
	0, 1148, 0, 0, 0, 0, 657, 0, 0, 0,
	430, 431, 0, 0, 720, 0, 261, 265, 0, 268,
	0, 2012, 0, 2012, 0, 0, 275, 0, 0, 0,
	0, 0, 0, 305, 306, 0, 0, 0, 0, 296,
	299, 1318, 1319, 1100, 1101, 300, 301, 345, 346, 0,
	811, 834, 836, 830, 831, 832, 0, 72, 0, 0,
	0, 0, 0, 517, 0, 0, 0, 0, 0, 695,
	0, 992, 697, 0, 0, 0, 0, 0, 879, 873,
	875, 947, 136, 879, 8, 121, 118, 0, 19, 0,
	0, 19, 19, 0, 19, 310, 0, 1838, 1836, 1837,
	1771, 1823, 0, 1797, 0, 1798, 1799, 1800, 1811, 1812,
	0, 0, 1793, 0, 1794, 1795, 1796, 1787, 0, 1788,
	1789, 0, 1790, 1791, 308, 411, 0, 0, 1699, 980,
	0, 738, 752, 733, 0, 741, 0, 0, 1326, 0,
	0, 0, 721, 752, 723, 0, 741, 811, 788, 0,
	766, 0, 0, 376, 0, 387, 381, 0, 388, 383,
	384, 0, 0, 405, 407, 408, 409, 394, 395, 659,
	362, 363, 354, 355, 356, 357, 358, 359, 360, 361,
	0, 0, 0, 365, 146, 0, 334, 335, 0, 0,
	0, 190, 191, 192, 193, 194, 195, 197, 181, 684,
	686, 1092, 1104, 0, 1095, 0, 200, 241, 173, 0,
	0, 0, 1703, 1704, 1705, 1706, 1707, 1712, 0, 1714,
	1716, 1718, 1720, 0, 1738, -2, -2, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1723,
	1736, 1737, 0, 0, 0, 0, 0, 0, 1734, 1734,
	1729, 0, 1489, 1320, 1321, 1467, 0, 0, 1503, 1507,
	0, 0, 0, 0, 0, 0, 1123, 1822, 0, 137,
	1693, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606,
	1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616,
	1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
	0, 0, 1702, 0, 0, 0, 1695, 1696, 0, 0,
	0, 1586, 0, 0, 1592, 1593, 1594, 0, 747, 0,
	1659, 1632, 1650, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 903, 0, 756, 758, 759, 785, 766, 792,
	0, 0, 0, 96, 101, 0, 1178, 0, 0, 0,
	0, 0, 0, 0, 74, 1152, 75, 1154, 328, 329,
	0, 0, 323, 0, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 1028, 1029, 515, 1086, 0, 0,
	0, 1102, 1127, 1135, 0, 0, 0, 0, 0, 1184,
	1014, 1019, 1020, 1021, 1015, 1016, 1022, 1023, 0, 807,
	0, 0, 916, 580, 639, 640, 872, 587, 1969, 592,
	871, 871, 599, 593, 600, 643, 601, 602, 603, 641,
	871, 871, 813, 638, 641, 626, 642, 641, 1326, 630,
	0, 637, 1326, 655, 1326, 0, 653, 607, 608, 1186,
	809, 428, 429, 434, 436, 0, 485, 485, 485, 468,
	485, 0, 0, 456, 1843, 0, 0, 0, 0, 465,
	1843, 0, 0, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
	0, 0, 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843,
	1843, 1843, 1843, 0, 1843, 1843, 1843, 1843, 1843, 1303,
	1843, 0, 484, 1149, 475, 476, 477, 478, 483, 0,
	0, 512, 0, 0, 1027, 0, 515, 0, 1069, 0,
	0, 884, 0, 885, 886, 887, 882, 918, 942, 942,
	0, 942, 922, 1326, 0, 0, 0, 273, 274, 262,
	0, 263, 0, 0, 276, 277, 0, 279, 280, 281,
	288, 1909, 1985, 283, 285, 0, 0, 289, 302, 303,
	304, 0, 0, 294, 295, 0, 0, 348, 349, 351,
	0, 766, 1153, 681, 1322, 682, 683, 687, 0, 0,
	690, 691, 692, 693, 694, 994, 0, 0, 1078, 1079,
	1080, 1081, 871, 0, 880, 0, 876, 948, 0, 950,
	0, 871, 0, 119, 19, 0, 112, 109, 0, 0,
	0, 0, 0, 1818, 1767, 1839, 0, 0, 0, 1820,
	0, 0, 0, 0, 0, 102, 768, 728, 0, 732,
	749, 0, 753, 0, 0, 745, 737, 742, 0, 0,
	762, 729, 1325, 0, 0, 0, 722, 0, 0, 727,
	766, 0, 789, 818, 819, 822, 1383, 0, 389, 385,
	404, 0, 517, 0, 0, 0, 184, 1089, 0, 185,
	189, 179, 0, 0, 0, 1094, 0, 1091, 1096, 0,
	199, 0, 0, 174, 175, 1169, 1178, 0, 0, 0,
	1713, 1715, 1717, 1719, 1721, 0, 1724, 1734, 1734, 1730,
	0, 1725, 0, 1727, 0, 1703, 1473, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 0,
	0, 1576, 1577, 0, 0, 1581, 0, 1583, 1584, 1585,
	1587, 0, 0, 0, 1591, 0, 1630, 1651, 1634, 1637,
	0, 1641, 0, 1643, 1645, 1646, 1647, 0, 816, 816,
	0, 0, 1547, 1547, 1547, 0, 0, 0, 0, 1547,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 0, 1493, 1494, 0, 0, 0, 904, 786,
	0, 0, 0, 0, 0, 1176, 0, 86, 0, 0,
	0, 0, 91, 0, 0, 76, 330, 318, 320, 0,
	0, 1140, 0, 0, 0, 0, 0, 982, 983, 985,
	0, 988, 989, 990, 994, 809, 0, 809, 1039, 1843,
	519, 0, 0, 1088, 0, 1058, 0, 0, 0, -2,
	0, 0, 1135, 0, 0, 0, 1188, 0, 0, 0,
	706, 710, 23, 810, 0, 585, 0, 586, 638, 594,
	595, 871, 618, 619, 0, 0, 871, 638, 638, 629,
	641, 650, 0, 651, 1326, 1188, 0, 0, 1148, 1254,
	1222, 446, 0, 1338, 1339, 486, 0, 1345, 1354, 1139,
	1415, 0, 1354, 0, 0, 1356, 1357, 0, 0, 0,
	0, 469, 470, 0, 455, 0, 0, 0, 0, 0,
	0, 454, 0, 0, 496, 0, 0, 0, 0, 0,
	1844, 1843, 1843, 0, 463, 464, 0, 467, 0, 0,
	0, 0, 0, 0, 0, 0, 1843, 1843, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 1310, 1311,
	0, 1039, 1843, 0, 0, 0, 0, 519, 1056, 1074,
	0, 432, 433, 493, 0, 0, 0, 0, 0, 0,
	908, 0, 0, 0, 907, 0, 0, 0, 0, 0,
	0, 809, 943, 0, 945, 946, 920, -2, 0, 884,
	925, 1698, 0, 266, 267, 0, 0, 272, 290, 292,
	264, 0, 0, 0, 291, 293, 297, 298, 347, 350,
	352, 828, 0, 0, 1212, 0, 995, 996, 998, 999,
	0, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1893, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 993, 698, 862, 874,
	881, 949, 951, 137, 877, 862, 0, 122, 19, 121,
	113, 114, 0, 19, 0, 0, 0, 0, 1828, 1827,
	1813, 0, 1814, 1825, 1830, 0, 1833, 0, 415, 772,
	0, 0, 752, 754, 0, 0, 752, 0, 0, 761,
	0, 0, 0, 0, 0, 0, 752, 828, 768, 0,
	825, 823, 824, 0, 0, 660, 147, 410, 0, 0,
	0, 0, 0, 685, 0, 1093, 181, 0, 0, 201,
	0, 0, 0, 1178, 1173, 1697, 1726, 1728, 0, 1735,
	1731, 1468, 1477, 1504, 0, 0, 1510, 1522, 1522, 0,
	0, 0, 1513, 1826, 1826, 1516, 1822, 1824, 1822, 1522,
	1522, 0, 1124, 0, 1125, 822, 138, 0, 0, 1582,
	0, 0, 0, 748, 0, 0, 0, 1543, 1545, 1547,
	1547, 1554, 1548, 1555, 1556, 1547, 1547, 1547, 1547, 1561,
	1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
	1547, 1541, 0, 0, 1756, 1757, 757, 0, 0, 799,
	800, 801, 802, 803, 0, 0, 61, 61, 1178, 0,
	95, 87, 0, 0, 0, 0, 0, 322, 0, 77,
	78, 0, 0, 85, 0, 0, 0, 0, 0, 987,
	0, 0, 0, 1331, 0, 1043, 1040, 1041, 1042, 0,
	1083, 520, 521, 522, 523, 0, 0, 0, 1087, 0,
	0, 1051, 0, 0, 0, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, -2, 1143, 0, 0, 0, 1331, 1162, 0,
	0, 1167, 1331, 1331, 0, 1196, 0, 1185, 760, 0,
	-2, 0, 0, 708, 0, 0, 917, 588, 871, 612,
	814, 815, 1326, 871, 871, 638, 656, 652, 1196, 1187,
	0, 435, 485, 0, 1242, 0, 0, 1248, 0, 1255,
	439, 0, 487, 0, 1344, 1371, 1355, 1371, 1416, 1371,
	1371, 1139, 0, 487, 0, 0, 457, 0, 0, 0,
	0, 0, 453, 490, 822, 440, 442, 443, 444, 494,
	495, 497, 0, 499, 500, 459, 471, 472, 473, 474,
	0, 0, 0, 466, 479, 480, 481, 482, 441, 1271,
	1272, 1273, 1276, 1277, 1278, 1279, 0, 0, 1282, 1283,
	1284, 1285, 1286, 1368, 1369, 1370, 1287, 1288, 1289, 1290,
	1291, 1292, 1293, 1312, 1313, 1314, 1315, 1316, 1317, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 0, 0, 1307,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 1083,
	1058, 0, 1076, 0, 1070, 1071, 0, 0, 730, 871,
	340, 0, 912, 905, 0, 891, 892, 909, 893, 910,
	911, 897, 0, 899, 0, 895, 896, 894, 871, 883,
	919, 944, 921, 924, 926, 927, 933, 0, 0, 0,
	0, 260, 269, 270, 271, 278, 0, 539, 284, 784,
	0, 1323, 688, 689, 1213, 1214, 696, 0, 1000, 860,
	0, 0, 860, 117, 120, 0, 115, 0, 0, 0,
	0, 107, 105, 1821, 0, 0, 774, 161, 0, 0,
	0, 750, 0, 755, 752, 736, 746, 735, 743, 744,
	763, 1327, 1328, 1329, 1330, 752, 726, 725, 787, 772,
	820, 821, 0, 1384, 377, 0, 1090, 181, 186, 187,
	188, 182, 180, 1097, 0, 1099, 0, 1171, 0, 0,
	1732, 1509, 1478, 1511, 1523, 1524, 1512, 0, 1480, 1481,
	1514, 1515, 1517, 1518, 1519, 1520, 1521, 1482, 0, 1126,
	1578, 0, 1580, 1588, 1589, 0, 1638, 1642, 0, 0,
	0, 0, 0, 1552, 1553, 1557, 1558, 1559, 1560, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	816, 1542, 0, 0, 0, 0, 0, 0, 0, 797,
	0, 0, 0, 63, 0, 63, 1177, 1179, 0, 947,
	0, 0, 92, 0, 0, 79, 80, 0, 0, 0,
	975, 978, 984, 986, 0, 0, 0, 1332, 1333, 1335,
	1336, 1337, 0, 1011, 0, 0, 1031, 1032, 1033, 1045,
	0, 0, 0, 525, 526, 0, 0, 0, 538, 534,
	535, 536, 516, 1082, 1065, 0, 0, 1054, 0, 0,
	1064, 0, 1144, 1843, 1843, 1843, 0, 0, 1256, 1843,
	1843, 0, 1164, 1166, 0, 0, 1260, 1199, 0, 0,
	1190, 0, 942, 0, 0, 871, 707, 710, 711, 808,
	589, 627, 631, 628, 871, 1199, 427, 1220, 0, 0,
	0, 0, 0, 1252, 0, 0, 1224, 0, 458, 488,
	0, -2, 0, 1372, 0, 1358, 1372, 0, 0, 1371,
	0, 447, 487, 0, 0, 0, 501, 505, 506, 0,
	503, 1411, 0, 504, 0, 492, 0, 498, 1274, 1275,
	0, 1280, 1281, 0, 1305, 0, 0, 0, 438, 507,
	0, 0, 0, 508, 509, 514, 1051, 0, 1065, 0,
	1075, 0, 1072, 1073, 816, 0, 0, 888, 913, 0,
	0, 889, 0, 890, 898, 900, 339, 928, 0, 0,
	930, 931, 932, 923, 286, 829, 997, 0, 850, 0,
	0, 878, 851, 0, 19, 0, 0, 110, 1831, 1834,
	776, 0, 773, 162, 0, 0, 0, 0, 740, 751,
	734, 724, 774, 826, 827, 183, 178, 1098, 1181, 0,
	1172, 0, 1435, 1491, 0, 1590, 0, 1547, 1544, 1547,
	1546, 1538, 0, 1495, 0, 1497, 1498, 1499, 0, 1501,
	1502, 0, 795, 0, 59, 0, 62, 60, 0, 94,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	1260, 0, 1017, 1044, 1030, 0, 1084, 1085, 0, 527,
	528, 0, 531, 537, 1046, 0, 0, 1048, 1049, 1050,
	0, 0, 1062, 0, 0, 0, 0, 1136, 1150, 0,
	0, 0, -2, 0, -2, 1161, 0, 1205, 0, 1197,
	0, 1189, 0, 1192, 871, 871, -2, 704, 709, 0,
	632, 1205, 1222, 0, 1243, 0, 0, 0, 0, 0,
	0, 0, 1223, 0, 1236, 489, 1373, -2, 1387, 1389,
	0, 1149, 1392, 1393, 0, 0, 0, 0, 0, 0,
	1442, 1401, 0, 0, 1405, 1406, 1407, 0, 0, 1410,
	0, 1750, 1751, 0, 1414, 0, 0, 0, 0, 0,
	0, 0, 1352, 448, 449, 0, 451, 452, 1843, 1412,
	491, 445, 1843, 461, 1304, 1308, 1309, 1306, 513, 510,
	511, 1054, 1057, 1068, 1077, 731, 811, 341, 342, 914,
	0, 906, 937, 934, 0, 0, 1001, 861, 869, 2197,
	2199, 2196, 111, 116, 0, 0, 778, 0, 775, 0,
	769, 771, 172, 739, 776, 132, 164, 0, 0, 1479,
	0, 0, 0, 1579, 1629, 1550, 1551, 0, 1539, 0,
	1533, 1534, 1535, 1540, 0, 0, 798, 793, 64, 90,
	0, 93, 68, 81, 0, 0, 0, 0, 1003, 1010,
	1024, 1155, 1334, 1009, 0, 0, 524, 529, 0, 532,
	533, 1066, 1065, 0, 1052, 1053, 0, 1060, 0, 0,
	1145, 1146, 1147, 1257, 1258, 1259, 1215, 1163, 0, -2,
	1268, 0, 0, 1159, 1181, 1215, 0, 0, 1193, 0,
	1200, 0, 1198, 1191, 816, 705, 1202, 437, 1254, 1244,
	0, 1246, 0, 0, 0, 0, 1225, -2, 0, 1388,
	1390, 1391, 1394, 1395, 1396, 1447, 1448, 1449, 0, 0,
	1399, 1444, 1445, 1446, 1400, 0, 0, 0, 0, 0,
	1748, 1749, 1440, 0, 0, 1359, 1361, 1362, 1363, 1364,
	1365, 1366, 1367, 1360, 0, 0, 0, 1351, 1353, 450,
	0, 0, 1843, 1067, 338, 0, 0, 938, 940, 935,
	936, 863, 0, 0, 0, 0, 106, 108, 123, 0,
	777, 163, 0, 778, 134, 0, 155, 0, 1182, 0,
	1490, 0, 0, 0, 1549, 1536, 0, 0, 0, 0,
	0, 1752, 1753, 1754, 0, 1496, 1500, 89, 0, 66,
	0, 82, 83, 0, 0, 0, 1025, 1026, 1034, 1035,
	0, 1037, 1038, 530, 1047, 1055, 1059, 1062, 0, 1114,
	1217, 0, 1165, 1148, 1270, 1843, 1168, 1217, 0, 1262,
	1843, 1843, 1183, 0, 1195, 0, 1207, 0, 1201, 811,
	426, 0, 1204, 1240, 1245, 1247, 1249, 0, 1253, 1251,
	1226, -2, 0, 1234, 0, 0, 1397, 1398, 0, 0,
	1648, 1843, 0, 1430, 0, 1114, 1114, 1114, 1114, 0,
	502, 460, 0, 915, 929, 0, 870, 0, 0, 0,
	0, 0, 767, 124, 0, 133, 152, 0, 165, 166,
	0, 0, 0, 0, 1174, 0, 1438, 1439, 0, 1525,
	0, 0, 0, 1529, 1530, 1531, 1532, 65, 68, 0,
	0, 0, 1002, 0, 1036, 1061, 1063, 1113, 1158, 0,
	1254, 1269, 0, 1160, 1261, 0, 0, 0, 1194, 1206,
	0, 1209, 703, 1203, 1221, 0, 1250, 1227, 1235, 0,
	1230, 0, 0, 0, 1443, 0, 1404, 0, 1409, 1418,
	1431, 0, 0, 1340, 0, 1342, 0, 1346, 0, 1348,
	0, 0, 462, 939, 941, 0, 1698, 865, 866, 0,
	780, 770, 135, 139, 0, 161, 158, 0, 167, 0,
	0, 0, 0, 1170, 0, 1436, 0, 1526, 1527, 1528,
	67, 69, 84, 0, 1004, 1005, 1018, 1115, 1843, 1843,
	0, 0, 0, 1121, 1122, 0, 1242, 1274, 1263, 1264,
	1265, 1208, 1241, 1229, 0, -2, 1237, 0, 0, 1700,
	1710, 1711, 1402, 1408, 1417, 1419, 1420, 0, 1432, 1433,
	1434, 1441, 1114, 1114, 1114, 1114, 1350, 864, 0, 0,
	779, 0, 126, 0, 0, 156, 157, 159, 0, 168,
	0, 170, 171, 0, 0, 1537, 1006, 0, 0, 1118,
	1119, 0, 1218, 0, 1220, 1231, -2, 0, 1239, 0,
	1403, 1421, 0, 1422, 0, 0, 0, 1341, 1343, 1347,
	1349, 1698, 867, 781, 1180, 0, 140, 0, 142, 144,
	145, 1374, 153, 154, 160, 169, 0, 0, 991, 1007,
	0, 1116, 1117, 1120, 0, 1222, 1238, 1701, 1423, 1425,
	1426, 0, 0, 1424, 0, 127, 128, 0, 141, 0,
	0, 1175, 1437, 1008, 1219, 1216, 1427, 1429, 1428, 868,
	0, 0, 143, 1375, 129, 130, 131, 0, 1376,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 117, 3, 3, 3, 148, 140, 3,
	84, 85, 145, 143, 158, 144, 157, 146, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 654, 651,
	127, 126, 128, 3, 655, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 150, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 652, 139, 653, 151,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 118, 119, 120, 121, 122, 123, 124,
	125, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 141, 142, 147, 149, 152, 153, 154, 155, 156,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:841
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:848
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:854
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:862
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:872
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:887
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:891
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:902
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:906
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:939
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:953
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:964
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:976
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:985
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:989
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:995
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1009
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1013
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1017
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1021
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1028
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1036
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1050
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1066
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1074
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1082
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1092
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1102
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1114
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1124
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1134
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1145
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1156
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1170
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1178
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1186
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1194
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1203
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1213
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1225
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1233
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1242
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1252
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1262
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1272
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1292
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1298
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1305
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1313
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1319
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1328
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1338
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1346
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1354
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1372
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1380
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1390
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1397
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1406
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1416
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1420
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1426
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1430
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1436
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1445
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1455
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1459
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1465
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1474
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1484
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1505
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1519
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1526
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1530
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1536
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1540
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1546
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1553
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1561
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1565
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1577
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1581
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1595
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1599
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1604
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1611
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1619
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1625
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1634
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1645
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1649
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1655
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1659
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1665
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1669
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1675
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1699
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1718
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1722
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1726
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1731
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1735
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1744
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1754
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1761
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1766
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1773
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1778
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1782
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1810
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1814
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1820
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1828
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1848
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1867
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1892
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1900
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1905
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1909
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1915
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1928
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1939
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1952
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1956
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1966
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1979
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1992
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1998
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2004
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2012
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2022
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2032
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2052
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2059
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2063
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2069
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2076
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2085
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2089
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2291
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2295
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2310
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2319
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2326
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2333
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2342
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2360
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2364
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2370
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2377
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2385
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2389
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2393
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2397
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2403
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2407
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2413
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2420
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2427
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2436
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2466
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2470
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2474
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2480
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2486
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2490
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2497
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2503
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2507
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2513
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2530
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2539
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2547
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2555
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2578
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2601
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2608
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2615
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2623
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2630
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2637
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2646
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2650
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2654
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2660
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2664
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2670
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2674
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2680
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2684
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2695
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2701
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2706
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2710
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2714
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2718
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2722
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2726
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2730
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2734
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2738
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2744
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2748
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2752
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2756
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2761
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2766
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2772
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2785
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2798
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2811
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2824
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2840
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2847
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2858
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2869
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2873
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2879
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2889
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2895
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2899
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2905
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2911
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2915
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2919
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2923
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2929
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2942
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2948
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2952
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2958
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2962
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2968
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2974
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2985
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2991
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2995
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2999
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3003
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3007
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3011
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3019
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3027
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3037
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3045
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3055
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3065
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3081
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3085
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3093
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3101
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3141
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3145
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3151
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3157
		{
			yyVAL.str = yyDollar[1].str
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3162
		{
			yyVAL.str = "true"
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3163
		{
			yyVAL.str = "false"
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3164
		{
			yyVAL.str = yyDollar[1].str
		}
	case 410:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3169
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3175
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3184
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3191
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3199
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3203
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3228
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3251
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3261
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3268
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3277
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3285
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3289
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3295
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3306
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3310
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3316
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3320
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3344
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3354
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3364
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3380
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3398
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3402
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3408
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3412
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3418
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3424
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3432
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3442
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3450
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3460
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3470
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3480
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3487
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3491
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3495
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3499
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3503
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3510
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3516
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3520
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3524
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3528
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3532
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3536
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3540
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3544
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3549
		{
			yyVAL.str = ""
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3580
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3584
		{
			yyVAL.str = string("COLUMN")
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3589
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3595
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3601
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3609
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3613
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3619
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3627
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3634
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3640
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3646
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3652
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3658
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3665
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3672
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3680
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3686
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3698
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3704
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3712
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3716
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3723
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3741
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3756
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3771
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3786
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3799
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3805
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3816
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3829
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3833
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3841
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3845
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3850
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3854
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3870
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3874
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3878
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3882
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3889
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3893
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3897
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3901
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3908
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3912
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3919
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3923
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3927
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3931
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3938
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3945
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3951
		{
			yyVAL.item = nil
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3956
		{
			yyVAL.item = nil
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4004
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4010
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4016
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4022
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4031
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4039
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4047
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4055
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4059
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4063
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4074
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4078
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4084
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4089
		{
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4093
		{
		}
	case 594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4098
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4108
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4118
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4132
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4138
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4144
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4150
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4156
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4162
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4171
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4175
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4179
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4183
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4187
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4191
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4199
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4205
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4214
		{
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4216
		{
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4225
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4235
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4244
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4248
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4252
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4258
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4264
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4270
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4276
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4285
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4296
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4308
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4316
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4322
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4334
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4348
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4354
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4360
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4367
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4371
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4376
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4380
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4384
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4389
		{
			yyVAL.str = ""
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4393
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4399
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4414
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4418
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4424
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4432
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4439
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4447
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4453
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4459
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4464
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4472
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4478
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4483
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4489
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4499
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4527
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4535
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4543
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4551
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4555
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4561
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4574
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4582
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4591
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4597
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4605
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4613
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4621
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4627
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4635
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4641
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4649
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4655
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4665
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4670
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4677
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4693
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4706
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4717
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4721
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4727
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4733
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4742
		{
		}
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4744
		{
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4747
		{
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4756
		{
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4760
		{
		}
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4765
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4774
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4781
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4787
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4795
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4802
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4809
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4829
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4837
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4847
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4851
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4857
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4864
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4870
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4878
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4885
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4892
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4911
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4915
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4919
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4924
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4928
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4932
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4938
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4947
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4951
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4957
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4961
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4967
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4971
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4977
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4982
		{
		}
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4986
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4993
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4997
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5004
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5009
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5013
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5019
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5023
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5029
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5033
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5038
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5042
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5055
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5066
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5077
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5099
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5122
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5130
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5139
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5143
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5156
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5160
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5165
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5169
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5176
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5181
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5188
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5194
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5198
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5202
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5206
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5210
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5214
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5219
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5223
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5229
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5239
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5254
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5258
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5272
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5276
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5282
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5291
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5295
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5299
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5303
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5307
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5313
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5320
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5329
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5333
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5339
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5347
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5351
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5356
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5360
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5366
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5374
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5379
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5383
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5389
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5395
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5399
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5405
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5410
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5414
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5418
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5423
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5431
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5436
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5440
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5448
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5452
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5456
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5470
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5474
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5484
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5494
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5504
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5516
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5524
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5532
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5541
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5549
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5557
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5565
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5573
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5581
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5589
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5597
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5605
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5615
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5626
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5640
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5644
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5648
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 855:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5653
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5657
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5661
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5670
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5674
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5679
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5683
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5693
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5702
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5711
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5722
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5726
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5731
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5735
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5740
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5744
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5750
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5754
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5760
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5764
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5768
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5772
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5777
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5785
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5791
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5799
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5809
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5819
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5823
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5829
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5838
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5847
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5856
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5866
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5876
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5880
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5886
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 896:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5890
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5900
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 898:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5904
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 899:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5908
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5912
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 901:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5918
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5929
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5933
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5939
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5945
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5949
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5955
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5961
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5965
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5969
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5973
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5979
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5983
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5989
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5993
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5999
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6003
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6009
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6013
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6023
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6036
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6042
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6048
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6062
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6073
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6080
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6084
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 929:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6090
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6100
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6104
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6108
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6113
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6117
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6121
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6125
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6130
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6134
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6138
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6142
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6146
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6151
		{
			yyVAL.str = ""
		}
	case 943:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6155
		{
			yyVAL.str = yyDollar[1].str
		}
	case 944:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6159
		{
			yyVAL.str = yyDollar[2].str
		}
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6165
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 946:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6169
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 947:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6174
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6178
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6182
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6186
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6190
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6196
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 975:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6238
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6251
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6257
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 978:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6263
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6276
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6281
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6288
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6295
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6299
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6305
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6311
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6316
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6320
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6324
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6328
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6335
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6368
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6373
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6380
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6387
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6391
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6397
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6403
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6407
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6411
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6417
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6423
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6429
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6433
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6439
		{
			yyVAL.str = ""
		}
	case 1008:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6446
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1009:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6452
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6467
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6484
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6501
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1013:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6505
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1014:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6511
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6515
		{
			yyVAL.str = "DEFINER = "
		}
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6519
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1017:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6524
		{
			yyVAL.str = ""
		}
	case 1018:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6528
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6542
		{
			yyVAL.str = ""
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6550
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6556
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6561
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6567
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6580
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6585
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6590
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6596
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6603
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6610
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6617
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6624
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6632
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6638
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6645
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6652
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6660
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6666
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6675
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6692
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6708
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6727
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6733
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6742
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6760
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6766
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6773
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6781
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6787
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6795
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6801
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6809
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6815
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6824
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6828
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6833
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6837
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6844
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1065:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6849
		{
			yyVAL.str = ""
		}
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6853
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1067:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6859
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6872
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6883
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6887
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6893
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6899
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6905
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6912
		{
			yyVAL.str = ""
		}
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6916
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6921
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6925
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6931
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6939
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6947
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6955
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6963
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6968
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6980
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6991
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7100
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7104
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7110
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7123
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7127
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7133
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7146
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7150
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7154
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7159
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7163
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7169
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7176
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7182
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7191
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1102:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7198
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7209
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7213
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7219
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7228
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7232
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7236
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7241
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7245
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7249
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7253
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7259
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7290
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7294
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7320
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7326
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7338
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7344
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7350
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7356
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7362
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7370
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7374
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7380
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7394
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7408
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7412
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7416
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7420
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7424
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7428
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7432
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7438
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7453
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7457
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7468
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7472
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7477
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7481
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7487
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7491
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7497
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7506
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7515
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7521
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7525
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7531
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7542
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7548
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7566
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7584
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7602
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7618
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7622
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7631
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7643
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7652
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7664
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7674
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7684
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7695
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7705
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7716
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7724
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7735
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7742
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7752
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7765
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7773
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7782
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7791
		{
			yyVAL.str = ""
		}
	case 1175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7795
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7801
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7805
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7810
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7814
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7821
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7833
		{
			yyVAL.str = ""
		}
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7837
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1183:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7843
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7864
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7878
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7882
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7886
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7892
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7896
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7903
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7910
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7917
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7924
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7928
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7932
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7936
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7940
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7947
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7954
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7958
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7965
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7972
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7976
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7982
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7988
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7992
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7999
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8006
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8013
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8020
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8024
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8029
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8033
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8037
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8042
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8046
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8059
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8063
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8071
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8079
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8083
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8095
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8099
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8105
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8109
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8115
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8128
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8142
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8146
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8152
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8156
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8162
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8171
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8182
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8186
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8191
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8195
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8201
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8206
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8214
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8218
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8228
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8232
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8243
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8251
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8259
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8267
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8278
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8287
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8297
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8307
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8311
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8316
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8320
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8326
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8330
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8336
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8345
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8355
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8359
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8365
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8369
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8375
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8384
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8394
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8398
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8404
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8408
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8412
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8418
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8422
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8426
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8430
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8434
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8438
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8442
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8447
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8451
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8455
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8459
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8463
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8467
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8471
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8475
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8479
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8483
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8487
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8491
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8495
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8501
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8507
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8511
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8515
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8519
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8523
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8529
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8535
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8541
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8547
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8553
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8559
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8563
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8567
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8571
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8576
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8587
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8591
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8597
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8608
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8612
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8618
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8622
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8626
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8630
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8634
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8638
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8652
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8656
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8665
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8671
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8679
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8683
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8690
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8699
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8707
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8715
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8722
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8726
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8732
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8736
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8740
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8746
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8750
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8756
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8769
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8782
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8821
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8861
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8875
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8881
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8894
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8907
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8920
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8933
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8948
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8958
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8964
		{
			yyVAL.str = ""
		}
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8968
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8978
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8984
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8990
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9011
		{
			yyVAL.str = ""
		}
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9015
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9021
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9027
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9031
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9036
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9044
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9048
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9052
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9056
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9062
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9068
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9072
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9077
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9084
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9088
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9094
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9098
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9104
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9108
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9112
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9116
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9120
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9124
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9129
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9133
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9137
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9141
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9145
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9149
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9153
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9157
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9161
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9165
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9179
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9183
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9187
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9191
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9195
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9199
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9205
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9209
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9214
		{
			yyVAL.str = ""
		}
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9218
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9224
		{
			yyVAL.str = ""
		}
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9228
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1417:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9234
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9251
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9258
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9265
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9272
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9279
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9288
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9294
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9300
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9304
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9308
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9312
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9316
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9321
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9328
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9332
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9336
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9341
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9345
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9349
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9353
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9357
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9362
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9366
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9371
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9375
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9391
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9397
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9401
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9405
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9409
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9413
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9417
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9421
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9425
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9429
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9433
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9437
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9441
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9445
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9451
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9455
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9459
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9463
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9467
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9471
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9475
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9479
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9483
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9487
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9529
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9533
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9537
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9542
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9550
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9554
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9558
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9562
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9566
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9576
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9580
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9584
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9588
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9592
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9596
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9600
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9604
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9617
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1492:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9623
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9632
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9641
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9652
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9662
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9672
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9681
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9691
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9701
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9711
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9720
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9730
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9734
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9739
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9743
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9749
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9753
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9759
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9768
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9780
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9797
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9814
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9827
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9840
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9852
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9866
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9881
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9896
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9913
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9928
		{
		}
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9935
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9939
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9943
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9949
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9953
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9957
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9961
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9967
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9971
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9975
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9981
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9989
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9999
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10003
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10010
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10015
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10019
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10024
		{
			yyVAL.str = ","
		}
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10028
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10033
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10037
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1547:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10042
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10049
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10075
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10087
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10099
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10110
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10121
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10132
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10142
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10152
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10163
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10174
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10185
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10196
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10207
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10218
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10229
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10240
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10251
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10262
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10273
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10284
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10295
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10306
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10317
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10341
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10350
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10359
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10368
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10377
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10388
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10397
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10407
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10416
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10425
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10434
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10443
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10455
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10466
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10479
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10491
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10514
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10550
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10563
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10576
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10588
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10597
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10605
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10613
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10626
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10635
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10646
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10657
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10666
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10678
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10688
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10698
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10707
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10718
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10727
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10737
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10746
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10755
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10765
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10769
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10779
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10798
		{
		}
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10800
		{
		}
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10841
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10853
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10857
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10861
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10867
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10872
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10876
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10882
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10886
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10892
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10896
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10903
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10907
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10911
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10920
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10924
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10928
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10933
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10937
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10943
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10947
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10951
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10955
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10959
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10963
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10967
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10971
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10975
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10979
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10987
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10991
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10995
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10999
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11003
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11007
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11011
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11015
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11019
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11023
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11029
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11033
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11039
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11043
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11050
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11054
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11058
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11064
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11068
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11072
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11076
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11080
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11084
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11088
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11094
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11098
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11102
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11106
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11112
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11125
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11130
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11136
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11140
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11153
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11158
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11162
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11166
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11170
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11174
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11181
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11185
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11189
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11193
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11200
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11211
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11216
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11222
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11234
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11246
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11258
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11271
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11284
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11297
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11310
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11323
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11336
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11349
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11362
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11375
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11388
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11403
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11430
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11472
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11508
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11544
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11561
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11573
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11593
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11613
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11633
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11649
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11662
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11675
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11688
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11701
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11713
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11725
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11737
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11749
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11761
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11773
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11785
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11797
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11809
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11821
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11834
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11847
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11860
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11873
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11888
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11896
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11905
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11915
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11938
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11943
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11949
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11956
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11960
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11965
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11969
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11975
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11981
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11988
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11995
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12004
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12011
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12018
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12027
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12031
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12035
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12041
		{
		}
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12043
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12053
		{
			yyVAL.str = ""
		}
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12057
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
